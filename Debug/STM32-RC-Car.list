
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad10  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800af10  0800af10  0000bf10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b234  0800b234  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b234  0800b234  0000c234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b23c  0800b23c  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b23c  0800b23c  0000c23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b240  0800b240  0000c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800b244  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005454  20000060  0800b2a4  0000d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054b4  0800b2a4  0000d4b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205ef  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000485c  00000000  00000000  0002d67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  00031ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ca  00000000  00000000  000339a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc23  00000000  00000000  00034e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a1b  00000000  00000000  00060a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010922e  00000000  00000000  000824b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b6de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007574  00000000  00000000  0018b724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00192c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aef8 	.word	0x0800aef8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800aef8 	.word	0x0800aef8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <MX_DMA_Init+0x48>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <MX_DMA_Init+0x48>)
 800060c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_DMA_Init+0x48>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	2010      	movs	r0, #16
 8000624:	f001 ffd5 	bl	80025d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000628:	2010      	movs	r0, #16
 800062a:	f001 ffee 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2105      	movs	r1, #5
 8000632:	2011      	movs	r0, #17
 8000634:	f001 ffcd 	bl	80025d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000638:	2011      	movs	r0, #17
 800063a:	f001 ffe6 	bl	800260a <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	//defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <MX_FREERTOS_Init+0x18>)
 8000652:	2100      	movs	r1, #0
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_FREERTOS_Init+0x1c>)
 8000656:	f007 f96b 	bl	8007930 <osThreadNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a03      	ldr	r2, [pc, #12]	@ (800066c <MX_FREERTOS_Init+0x20>)
 800065e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	0800b0bc 	.word	0x0800b0bc
 8000668:	08000f99 	.word	0x08000f99
 800066c:	2000007c 	.word	0x2000007c

08000670 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	@ 0x30
 8000674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b77      	ldr	r3, [pc, #476]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a76      	ldr	r2, [pc, #472]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b74      	ldr	r3, [pc, #464]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b71      	ldr	r3, [pc, #452]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a70      	ldr	r2, [pc, #448]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b6e      	ldr	r3, [pc, #440]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b6b      	ldr	r3, [pc, #428]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a6a      	ldr	r2, [pc, #424]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b68      	ldr	r3, [pc, #416]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b65      	ldr	r3, [pc, #404]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a64      	ldr	r2, [pc, #400]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b62      	ldr	r3, [pc, #392]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a5e      	ldr	r2, [pc, #376]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b5c      	ldr	r3, [pc, #368]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	4b59      	ldr	r3, [pc, #356]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a58      	ldr	r2, [pc, #352]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b56      	ldr	r3, [pc, #344]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	4b53      	ldr	r3, [pc, #332]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a52      	ldr	r2, [pc, #328]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b50      	ldr	r3, [pc, #320]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0308 	and.w	r3, r3, #8
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000734:	484c      	ldr	r0, [pc, #304]	@ (8000868 <MX_GPIO_Init+0x1f8>)
 8000736:	f002 fcab 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2141      	movs	r1, #65	@ 0x41
 800073e:	484b      	ldr	r0, [pc, #300]	@ (800086c <MX_GPIO_Init+0x1fc>)
 8000740:	f002 fca6 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2110      	movs	r1, #16
 8000748:	4849      	ldr	r0, [pc, #292]	@ (8000870 <MX_GPIO_Init+0x200>)
 800074a:	f002 fca1 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800074e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000754:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4843      	ldr	r0, [pc, #268]	@ (8000874 <MX_GPIO_Init+0x204>)
 8000766:	f002 fae7 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800076a:	2332      	movs	r3, #50	@ 0x32
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077a:	230b      	movs	r3, #11
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	483b      	ldr	r0, [pc, #236]	@ (8000874 <MX_GPIO_Init+0x204>)
 8000786:	f002 fad7 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800078a:	2386      	movs	r3, #134	@ 0x86
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800079a:	230b      	movs	r3, #11
 800079c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4834      	ldr	r0, [pc, #208]	@ (8000878 <MX_GPIO_Init+0x208>)
 80007a6:	f002 fac7 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007aa:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4829      	ldr	r0, [pc, #164]	@ (8000868 <MX_GPIO_Init+0x1f8>)
 80007c4:	f002 fab8 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 80007c8:	2341      	movs	r3, #65	@ 0x41
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <MX_GPIO_Init+0x1fc>)
 80007e0:	f002 faaa 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f6:	230b      	movs	r3, #11
 80007f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4819      	ldr	r0, [pc, #100]	@ (8000868 <MX_GPIO_Init+0x1f8>)
 8000802:	f002 fa99 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000806:	2380      	movs	r3, #128	@ 0x80
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4814      	ldr	r0, [pc, #80]	@ (800086c <MX_GPIO_Init+0x1fc>)
 800081a:	f002 fa8d 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800081e:	2310      	movs	r3, #16
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_GPIO_Init+0x200>)
 8000836:	f002 fa7f 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800083a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084c:	230b      	movs	r3, #11
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_GPIO_Init+0x1fc>)
 8000858:	f002 fa6e 	bl	8002d38 <HAL_GPIO_Init>

}
 800085c:	bf00      	nop
 800085e:	3730      	adds	r7, #48	@ 0x30
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400
 800086c:	40021800 	.word	0x40021800
 8000870:	40020c00 	.word	0x40020c00
 8000874:	40020800 	.word	0x40020800
 8000878:	40020000 	.word	0x40020000

0800087c <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6178      	str	r0, [r7, #20]
 8000884:	ed87 0a04 	vstr	s0, [r7, #16]
 8000888:	edc7 0a03 	vstr	s1, [r7, #12]
 800088c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000890:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	615a      	str	r2, [r3, #20]
}
 80008b6:	bf00      	nop
 80008b8:	371c      	adds	r7, #28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <pid_reset>:

void pid_reset(PID *pid_data)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b089      	sub	sp, #36	@ 0x24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	441a      	add	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	ed93 7a02 	vldr	s14, [r3, #8]
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000930:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	ed93 7a04 	vldr	s14, [r3, #16]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800094a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800094e:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	db08      	blt.n	800097e <pid_calculate+0x9c>
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000978:	edc7 7a07 	vstr	s15, [r7, #28]
 800097c:	e016      	b.n	80009ac <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	425b      	negs	r3, r3
 8000984:	ee07 3a90 	vmov	s15, r3
 8000988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000998:	d808      	bhi.n	80009ac <pid_calculate+0xca>
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	425b      	negs	r3, r3
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a8:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 80009b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80009b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80009ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009be:	edd7 7a04 	vldr	s15, [r7, #16]
 80009c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ca:	ee17 3a90 	vmov	r3, s15
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	@ 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <Init_Motor>:
} MOTOR;

MOTOR motorA;

void Init_Motor(MOTOR *m, TIM_HandleTypeDef *enc, uint32_t axis, TIM_HandleTypeDef* front, TIM_HandleTypeDef* back)
{
 80009da:	b480      	push	{r7}
 80009dc:	b085      	sub	sp, #20
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	603b      	str	r3, [r7, #0]
	m->encoder = enc;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	601a      	str	r2, [r3, #0]
	m->axisTimer = axis;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	60da      	str	r2, [r3, #12]
	m->motorBack = back;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	605a      	str	r2, [r3, #4]
	m->motorFront = front;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	609a      	str	r2, [r3, #8]

	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000a06:	821a      	strh	r2, [r3, #16]

	m->pulse_count = 0;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
	m->measured_speed = 0;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
	m->set_speed = 0;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
    m->actual_PWM = 0;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 f849 	bl	8000acc <motor_update_count>

	m->measured_speed = abs((m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000a42:	fb02 f303 	mul.w	r3, r2, r3
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	8a12      	ldrh	r2, [r2, #16]
 8000a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a4e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a52:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	619a      	str	r2, [r3, #24]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	69d9      	ldr	r1, [r3, #28]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	f7ff ff3a 	bl	80008e2 <pid_calculate>
 8000a6e:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a1a      	ldr	r2, [r3, #32]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	441a      	add	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	621a      	str	r2, [r3, #32]

	if(m->actual_PWM >= 0)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db05      	blt.n	8000a90 <motor_calculate_speed+0x64>
	{
		SetMotorSpeed(m, m->actual_PWM);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a1b      	ldr	r3, [r3, #32]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f84b 	bl	8000b26 <SetMotorSpeed>

	}

}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <ResetMotor>:

void ResetMotor(MOTOR *m) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	m->set_speed = 0;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d004      	beq.n	8000b18 <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3324      	adds	r3, #36	@ 0x24
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fed5 	bl	80008c2 <pid_reset>

	m->set_speed = set_speed;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	61da      	str	r2, [r3, #28]
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <SetMotorSpeed>:

void SetMotorSpeed(MOTOR* m, uint16_t speed)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	807b      	strh	r3, [r7, #2]
	if(speed >= m->motorBack->Instance->ARR)
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d304      	bcc.n	8000b4a <SetMotorSpeed+0x24>
		speed = m->motorBack->Instance->ARR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b48:	807b      	strh	r3, [r7, #2]

	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d105      	bne.n	8000b5e <SetMotorSpeed+0x38>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	887a      	ldrh	r2, [r7, #2]
 8000b5a:	635a      	str	r2, [r3, #52]	@ 0x34
	//__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed);
}
 8000b5c:	e02c      	b.n	8000bb8 <SetMotorSpeed+0x92>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	d105      	bne.n	8000b72 <SetMotorSpeed+0x4c>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	887b      	ldrh	r3, [r7, #2]
 8000b6e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b70:	e022      	b.n	8000bb8 <SetMotorSpeed+0x92>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d105      	bne.n	8000b86 <SetMotorSpeed+0x60>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b84:	e018      	b.n	8000bb8 <SetMotorSpeed+0x92>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	2b0c      	cmp	r3, #12
 8000b8c:	d105      	bne.n	8000b9a <SetMotorSpeed+0x74>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b98:	e00e      	b.n	8000bb8 <SetMotorSpeed+0x92>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b10      	cmp	r3, #16
 8000ba0:	d105      	bne.n	8000bae <SetMotorSpeed+0x88>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000bac:	e004      	b.n	8000bb8 <SetMotorSpeed+0x92>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <Init_MotorSystem>:

void Init_MotorSystem()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af02      	add	r7, sp, #8
	Init_Motor(&motorA, &htim8, TIM_CHANNEL_1, &htim2, &htim5);
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <Init_MotorSystem+0x38>)
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <Init_MotorSystem+0x3c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	490c      	ldr	r1, [pc, #48]	@ (8000c04 <Init_MotorSystem+0x40>)
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <Init_MotorSystem+0x44>)
 8000bd6:	f7ff ff00 	bl	80009da <Init_Motor>
	//Init_Motor(&motorB, &htim4, TIM_CHANNEL_1, &htim2, &htim5);

	pid_init(&(motorA.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8000c0c <Init_MotorSystem+0x48>
 8000be0:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8000c0c <Init_MotorSystem+0x48>
 8000be4:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000be8:	4809      	ldr	r0, [pc, #36]	@ (8000c10 <Init_MotorSystem+0x4c>)
 8000bea:	f7ff fe47 	bl	800087c <pid_init>

	SetMotorSpeed(&motorA, 0);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <Init_MotorSystem+0x44>)
 8000bf2:	f7ff ff98 	bl	8000b26 <SetMotorSpeed>
	//SetMotorSpeed(&motorB, 0);
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000240 	.word	0x20000240
 8000c00:	2000015c 	.word	0x2000015c
 8000c04:	200002d8 	.word	0x200002d8
 8000c08:	200000c8 	.word	0x200000c8
 8000c0c:	3d4ccccd 	.word	0x3d4ccccd
 8000c10:	200000ec 	.word	0x200000ec

08000c14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d102      	bne.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000c26:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c28:	f7ff ff00 	bl	8000a2c <motor_calculate_speed>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40001000 	.word	0x40001000
 8000c38:	200000c8 	.word	0x200000c8

08000c3c <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d104      	bne.n	8000c54 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	4812      	ldr	r0, [pc, #72]	@ (8000c98 <Set_PWM_Frequency+0x5c>)
 8000c4e:	f003 ff39 	bl	8004ac4 <HAL_TIM_PWM_Stop>
        return;
 8000c52:	e01e      	b.n	8000c92 <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <Set_PWM_Frequency+0x60>)
 8000c56:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <Set_PWM_Frequency+0x5c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <Set_PWM_Frequency+0x64>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <Set_PWM_Frequency+0x64>)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <Set_PWM_Frequency+0x5c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	0852      	lsrs	r2, r2, #1
 8000c88:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <Set_PWM_Frequency+0x5c>)
 8000c8e:	f003 fe1f 	bl	80048d0 <HAL_TIM_PWM_Start>
}
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000324 	.word	0x20000324
 8000c9c:	05b8d800 	.word	0x05b8d800
 8000ca0:	2000015c 	.word	0x2000015c

08000ca4 <ProcessCommand>:
}

int hornOn = 0;
int engineOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

		if (strcmp((char*)cmd, "CMD0") == 0) {
 8000cac:	499b      	ldr	r1, [pc, #620]	@ (8000f1c <ProcessCommand+0x278>)
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fac6 	bl	8000240 <strcmp>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d163      	bne.n	8000d82 <ProcessCommand+0xde>
			if (!engineOn) {
 8000cba:	4b99      	ldr	r3, [pc, #612]	@ (8000f20 <ProcessCommand+0x27c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d12a      	bne.n	8000d18 <ProcessCommand+0x74>
				HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000cc2:	213c      	movs	r1, #60	@ 0x3c
 8000cc4:	4897      	ldr	r0, [pc, #604]	@ (8000f24 <ProcessCommand+0x280>)
 8000cc6:	f004 f823 	bl	8004d10 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000cca:	213c      	movs	r1, #60	@ 0x3c
 8000ccc:	4896      	ldr	r0, [pc, #600]	@ (8000f28 <ProcessCommand+0x284>)
 8000cce:	f004 f81f 	bl	8004d10 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000cd2:	213c      	movs	r1, #60	@ 0x3c
 8000cd4:	4895      	ldr	r0, [pc, #596]	@ (8000f2c <ProcessCommand+0x288>)
 8000cd6:	f004 f81b 	bl	8004d10 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000cda:	213c      	movs	r1, #60	@ 0x3c
 8000cdc:	4894      	ldr	r0, [pc, #592]	@ (8000f30 <ProcessCommand+0x28c>)
 8000cde:	f004 f817 	bl	8004d10 <HAL_TIM_Encoder_Start>

				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4893      	ldr	r0, [pc, #588]	@ (8000f34 <ProcessCommand+0x290>)
 8000ce6:	f003 fdf3 	bl	80048d0 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000cea:	210c      	movs	r1, #12
 8000cec:	4891      	ldr	r0, [pc, #580]	@ (8000f34 <ProcessCommand+0x290>)
 8000cee:	f003 fdef 	bl	80048d0 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4890      	ldr	r0, [pc, #576]	@ (8000f38 <ProcessCommand+0x294>)
 8000cf6:	f003 fdeb 	bl	80048d0 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8000cfa:	210c      	movs	r1, #12
 8000cfc:	488e      	ldr	r0, [pc, #568]	@ (8000f38 <ProcessCommand+0x294>)
 8000cfe:	f003 fde7 	bl	80048d0 <HAL_TIM_PWM_Start>

				HAL_TIM_Base_Start_IT(&htim6);
 8000d02:	488e      	ldr	r0, [pc, #568]	@ (8000f3c <ProcessCommand+0x298>)
 8000d04:	f003 fce6 	bl	80046d4 <HAL_TIM_Base_Start_IT>

				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000d08:	2104      	movs	r1, #4
 8000d0a:	488d      	ldr	r0, [pc, #564]	@ (8000f40 <ProcessCommand+0x29c>)
 8000d0c:	f003 fde0 	bl	80048d0 <HAL_TIM_PWM_Start>
				engineOn = 1;
 8000d10:	4b83      	ldr	r3, [pc, #524]	@ (8000f20 <ProcessCommand+0x27c>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e02c      	b.n	8000d72 <ProcessCommand+0xce>
			}
			else {
				ResetMotor(&motorA);
 8000d18:	488a      	ldr	r0, [pc, #552]	@ (8000f44 <ProcessCommand+0x2a0>)
 8000d1a:	f7ff febd 	bl	8000a98 <ResetMotor>

				HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8000d1e:	213c      	movs	r1, #60	@ 0x3c
 8000d20:	4880      	ldr	r0, [pc, #512]	@ (8000f24 <ProcessCommand+0x280>)
 8000d22:	f004 f883 	bl	8004e2c <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8000d26:	213c      	movs	r1, #60	@ 0x3c
 8000d28:	487f      	ldr	r0, [pc, #508]	@ (8000f28 <ProcessCommand+0x284>)
 8000d2a:	f004 f87f 	bl	8004e2c <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8000d2e:	213c      	movs	r1, #60	@ 0x3c
 8000d30:	487e      	ldr	r0, [pc, #504]	@ (8000f2c <ProcessCommand+0x288>)
 8000d32:	f004 f87b 	bl	8004e2c <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim8, TIM_CHANNEL_ALL);
 8000d36:	213c      	movs	r1, #60	@ 0x3c
 8000d38:	487d      	ldr	r0, [pc, #500]	@ (8000f30 <ProcessCommand+0x28c>)
 8000d3a:	f004 f877 	bl	8004e2c <HAL_TIM_Encoder_Stop>

				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	487c      	ldr	r0, [pc, #496]	@ (8000f34 <ProcessCommand+0x290>)
 8000d42:	f003 febf 	bl	8004ac4 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000d46:	210c      	movs	r1, #12
 8000d48:	487a      	ldr	r0, [pc, #488]	@ (8000f34 <ProcessCommand+0x290>)
 8000d4a:	f003 febb 	bl	8004ac4 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4879      	ldr	r0, [pc, #484]	@ (8000f38 <ProcessCommand+0x294>)
 8000d52:	f003 feb7 	bl	8004ac4 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8000d56:	210c      	movs	r1, #12
 8000d58:	4877      	ldr	r0, [pc, #476]	@ (8000f38 <ProcessCommand+0x294>)
 8000d5a:	f003 feb3 	bl	8004ac4 <HAL_TIM_PWM_Stop>

				HAL_TIM_Base_Stop_IT(&htim6);
 8000d5e:	4877      	ldr	r0, [pc, #476]	@ (8000f3c <ProcessCommand+0x298>)
 8000d60:	f003 fd30 	bl	80047c4 <HAL_TIM_Base_Stop_IT>

				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000d64:	2104      	movs	r1, #4
 8000d66:	4876      	ldr	r0, [pc, #472]	@ (8000f40 <ProcessCommand+0x29c>)
 8000d68:	f003 feac 	bl	8004ac4 <HAL_TIM_PWM_Stop>
				engineOn = 0;
 8000d6c:	4b6c      	ldr	r3, [pc, #432]	@ (8000f20 <ProcessCommand+0x27c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
			}


			HAL_UART_Transmit(&huart3, (uint8_t*)"ENGINE RUNNING\r\n", 16, HAL_MAX_DELAY);
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	2210      	movs	r2, #16
 8000d78:	4973      	ldr	r1, [pc, #460]	@ (8000f48 <ProcessCommand+0x2a4>)
 8000d7a:	4874      	ldr	r0, [pc, #464]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000d7c:	f004 ff6a 	bl	8005c54 <HAL_UART_Transmit>
	    }

	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000d80:	e0c8      	b.n	8000f14 <ProcessCommand+0x270>
		else if (strcmp((char*)cmd, "CMDA") == 0) {
 8000d82:	4973      	ldr	r1, [pc, #460]	@ (8000f50 <ProcessCommand+0x2ac>)
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fa5b 	bl	8000240 <strcmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10b      	bne.n	8000da8 <ProcessCommand+0x104>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8000d90:	2101      	movs	r1, #1
 8000d92:	4870      	ldr	r0, [pc, #448]	@ (8000f54 <ProcessCommand+0x2b0>)
 8000d94:	f002 f995 	bl	80030c2 <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart3, (uint8_t*)"LIGHTS RUNNING\r\n", 16, HAL_MAX_DELAY);
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	496e      	ldr	r1, [pc, #440]	@ (8000f58 <ProcessCommand+0x2b4>)
 8000da0:	486a      	ldr	r0, [pc, #424]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000da2:	f004 ff57 	bl	8005c54 <HAL_UART_Transmit>
}
 8000da6:	e0b5      	b.n	8000f14 <ProcessCommand+0x270>
	    else if (strcmp((char*)cmd, "CMDB") == 0) {
 8000da8:	496c      	ldr	r1, [pc, #432]	@ (8000f5c <ProcessCommand+0x2b8>)
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fa48 	bl	8000240 <strcmp>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d119      	bne.n	8000dea <ProcessCommand+0x146>
	    	if (!hornOn) {
 8000db6:	4b6a      	ldr	r3, [pc, #424]	@ (8000f60 <ProcessCommand+0x2bc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d107      	bne.n	8000dce <ProcessCommand+0x12a>
		    	Set_PWM_Frequency(1000);
 8000dbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dc2:	f7ff ff3b 	bl	8000c3c <Set_PWM_Frequency>
		    	hornOn = 1;
 8000dc6:	4b66      	ldr	r3, [pc, #408]	@ (8000f60 <ProcessCommand+0x2bc>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e005      	b.n	8000dda <ProcessCommand+0x136>
	    		Set_PWM_Frequency(0);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff ff34 	bl	8000c3c <Set_PWM_Frequency>
	    		hornOn = 0;
 8000dd4:	4b62      	ldr	r3, [pc, #392]	@ (8000f60 <ProcessCommand+0x2bc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"HORN RUNNING\r\n", 14, HAL_MAX_DELAY);
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	220e      	movs	r2, #14
 8000de0:	4960      	ldr	r1, [pc, #384]	@ (8000f64 <ProcessCommand+0x2c0>)
 8000de2:	485a      	ldr	r0, [pc, #360]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000de4:	f004 ff36 	bl	8005c54 <HAL_UART_Transmit>
}
 8000de8:	e094      	b.n	8000f14 <ProcessCommand+0x270>
	    else if (strncmp((char*)cmd, "CMD", 3) == 0) {
 8000dea:	2203      	movs	r2, #3
 8000dec:	495e      	ldr	r1, [pc, #376]	@ (8000f68 <ProcessCommand+0x2c4>)
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f009 fca6 	bl	800a740 <strncmp>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f040 8085 	bne.w	8000f06 <ProcessCommand+0x262>
	        char* modeStr = (char*)cmd + 3;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3303      	adds	r3, #3
 8000e00:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f009 fb2a 	bl	800a45c <atoi>
 8000e08:	60b8      	str	r0, [r7, #8]
	        if (mode >= 1 && mode <= 9) {
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	dd72      	ble.n	8000ef6 <ProcessCommand+0x252>
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b09      	cmp	r3, #9
 8000e14:	dc6f      	bgt.n	8000ef6 <ProcessCommand+0x252>
	            switch (mode) {
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d868      	bhi.n	8000ef0 <ProcessCommand+0x24c>
 8000e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e24 <ProcessCommand+0x180>)
 8000e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e24:	08000e49 	.word	0x08000e49
 8000e28:	08000e61 	.word	0x08000e61
 8000e2c:	08000e79 	.word	0x08000e79
 8000e30:	08000e91 	.word	0x08000e91
 8000e34:	08000ea1 	.word	0x08000ea1
 8000e38:	08000eb1 	.word	0x08000eb1
 8000e3c:	08000ec1 	.word	0x08000ec1
 8000e40:	08000ed1 	.word	0x08000ed1
 8000e44:	08000ee1 	.word	0x08000ee1
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	2212      	movs	r2, #18
 8000e4e:	4947      	ldr	r1, [pc, #284]	@ (8000f6c <ProcessCommand+0x2c8>)
 8000e50:	483e      	ldr	r0, [pc, #248]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000e52:	f004 feff 	bl	8005c54 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	483a      	ldr	r0, [pc, #232]	@ (8000f44 <ProcessCommand+0x2a0>)
 8000e5a:	f7ff fe4e 	bl	8000afa <motor_set_speed>
	                    break;
 8000e5e:	e048      	b.n	8000ef2 <ProcessCommand+0x24e>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	2212      	movs	r2, #18
 8000e66:	4942      	ldr	r1, [pc, #264]	@ (8000f70 <ProcessCommand+0x2cc>)
 8000e68:	4838      	ldr	r0, [pc, #224]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000e6a:	f004 fef3 	bl	8005c54 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 100);
 8000e6e:	2164      	movs	r1, #100	@ 0x64
 8000e70:	4834      	ldr	r0, [pc, #208]	@ (8000f44 <ProcessCommand+0x2a0>)
 8000e72:	f7ff fe42 	bl	8000afa <motor_set_speed>
	                    break;
 8000e76:	e03c      	b.n	8000ef2 <ProcessCommand+0x24e>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	2212      	movs	r2, #18
 8000e7e:	493d      	ldr	r1, [pc, #244]	@ (8000f74 <ProcessCommand+0x2d0>)
 8000e80:	4832      	ldr	r0, [pc, #200]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000e82:	f004 fee7 	bl	8005c54 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 75);
 8000e86:	214b      	movs	r1, #75	@ 0x4b
 8000e88:	482e      	ldr	r0, [pc, #184]	@ (8000f44 <ProcessCommand+0x2a0>)
 8000e8a:	f7ff fe36 	bl	8000afa <motor_set_speed>
	                    break;
 8000e8e:	e030      	b.n	8000ef2 <ProcessCommand+0x24e>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	2212      	movs	r2, #18
 8000e96:	4938      	ldr	r1, [pc, #224]	@ (8000f78 <ProcessCommand+0x2d4>)
 8000e98:	482c      	ldr	r0, [pc, #176]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000e9a:	f004 fedb 	bl	8005c54 <HAL_UART_Transmit>
	                    break;
 8000e9e:	e028      	b.n	8000ef2 <ProcessCommand+0x24e>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	2212      	movs	r2, #18
 8000ea6:	4935      	ldr	r1, [pc, #212]	@ (8000f7c <ProcessCommand+0x2d8>)
 8000ea8:	4828      	ldr	r0, [pc, #160]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000eaa:	f004 fed3 	bl	8005c54 <HAL_UART_Transmit>
	                    break;
 8000eae:	e020      	b.n	8000ef2 <ProcessCommand+0x24e>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	2212      	movs	r2, #18
 8000eb6:	4932      	ldr	r1, [pc, #200]	@ (8000f80 <ProcessCommand+0x2dc>)
 8000eb8:	4824      	ldr	r0, [pc, #144]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000eba:	f004 fecb 	bl	8005c54 <HAL_UART_Transmit>
	                    break;
 8000ebe:	e018      	b.n	8000ef2 <ProcessCommand+0x24e>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	2212      	movs	r2, #18
 8000ec6:	492f      	ldr	r1, [pc, #188]	@ (8000f84 <ProcessCommand+0x2e0>)
 8000ec8:	4820      	ldr	r0, [pc, #128]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000eca:	f004 fec3 	bl	8005c54 <HAL_UART_Transmit>
	                    break;
 8000ece:	e010      	b.n	8000ef2 <ProcessCommand+0x24e>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	2212      	movs	r2, #18
 8000ed6:	492c      	ldr	r1, [pc, #176]	@ (8000f88 <ProcessCommand+0x2e4>)
 8000ed8:	481c      	ldr	r0, [pc, #112]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000eda:	f004 febb 	bl	8005c54 <HAL_UART_Transmit>
	                    break;
 8000ede:	e008      	b.n	8000ef2 <ProcessCommand+0x24e>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee4:	2212      	movs	r2, #18
 8000ee6:	4929      	ldr	r1, [pc, #164]	@ (8000f8c <ProcessCommand+0x2e8>)
 8000ee8:	4818      	ldr	r0, [pc, #96]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000eea:	f004 feb3 	bl	8005c54 <HAL_UART_Transmit>
	                    break;
 8000eee:	e000      	b.n	8000ef2 <ProcessCommand+0x24e>
	                    break;
 8000ef0:	bf00      	nop
	            switch (mode) {
 8000ef2:	bf00      	nop
}
 8000ef4:	e00e      	b.n	8000f14 <ProcessCommand+0x270>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	2215      	movs	r2, #21
 8000efc:	4924      	ldr	r1, [pc, #144]	@ (8000f90 <ProcessCommand+0x2ec>)
 8000efe:	4813      	ldr	r0, [pc, #76]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000f00:	f004 fea8 	bl	8005c54 <HAL_UART_Transmit>
}
 8000f04:	e006      	b.n	8000f14 <ProcessCommand+0x270>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	2211      	movs	r2, #17
 8000f0c:	4921      	ldr	r1, [pc, #132]	@ (8000f94 <ProcessCommand+0x2f0>)
 8000f0e:	480f      	ldr	r0, [pc, #60]	@ (8000f4c <ProcessCommand+0x2a8>)
 8000f10:	f004 fea0 	bl	8005c54 <HAL_UART_Transmit>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	0800af3c 	.word	0x0800af3c
 8000f20:	20000108 	.word	0x20000108
 8000f24:	20000110 	.word	0x20000110
 8000f28:	200001a8 	.word	0x200001a8
 8000f2c:	200001f4 	.word	0x200001f4
 8000f30:	200002d8 	.word	0x200002d8
 8000f34:	2000015c 	.word	0x2000015c
 8000f38:	20000240 	.word	0x20000240
 8000f3c:	2000028c 	.word	0x2000028c
 8000f40:	20000324 	.word	0x20000324
 8000f44:	200000c8 	.word	0x200000c8
 8000f48:	0800af44 	.word	0x0800af44
 8000f4c:	200003f8 	.word	0x200003f8
 8000f50:	0800af58 	.word	0x0800af58
 8000f54:	40021800 	.word	0x40021800
 8000f58:	0800af60 	.word	0x0800af60
 8000f5c:	0800af74 	.word	0x0800af74
 8000f60:	20000104 	.word	0x20000104
 8000f64:	0800af7c 	.word	0x0800af7c
 8000f68:	0800af8c 	.word	0x0800af8c
 8000f6c:	0800af90 	.word	0x0800af90
 8000f70:	0800afa4 	.word	0x0800afa4
 8000f74:	0800afb8 	.word	0x0800afb8
 8000f78:	0800afcc 	.word	0x0800afcc
 8000f7c:	0800afe0 	.word	0x0800afe0
 8000f80:	0800aff4 	.word	0x0800aff4
 8000f84:	0800b008 	.word	0x0800b008
 8000f88:	0800b01c 	.word	0x0800b01c
 8000f8c:	0800b030 	.word	0x0800b030
 8000f90:	0800b044 	.word	0x0800b044
 8000f94:	0800b05c 	.word	0x0800b05c

08000f98 <ProcessHeartBeat>:

void ProcessHeartBeat(void* argument) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    for (;;) {

    	if (!engineOn)
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <ProcessHeartBeat+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d015      	beq.n	8000fd4 <ProcessHeartBeat+0x3c>

    	char message[16];  // Bufor na wiadomość, np. "HB:123"
    	int length;

    	// Formatowanie wiadomości
    	length = snprintf(message, sizeof(message), "HB:%d\r\n", motorA.measured_speed);
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <ProcessHeartBeat+0x44>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f107 000c 	add.w	r0, r7, #12
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe0 <ProcessHeartBeat+0x48>)
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	f009 fb88 	bl	800a6c8 <sniprintf>
 8000fb8:	61f8      	str	r0, [r7, #28]

    	// Wysyłanie przez UART2
    	HAL_UART_Transmit(&huart2, (uint8_t*)message, length, HAL_MAX_DELAY);
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	f107 010c 	add.w	r1, r7, #12
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	4807      	ldr	r0, [pc, #28]	@ (8000fe4 <ProcessHeartBeat+0x4c>)
 8000fc8:	f004 fe44 	bl	8005c54 <HAL_UART_Transmit>
        osDelay(100);
 8000fcc:	2064      	movs	r0, #100	@ 0x64
 8000fce:	f006 fd55 	bl	8007a7c <osDelay>
 8000fd2:	e7e5      	b.n	8000fa0 <ProcessHeartBeat+0x8>
    		continue;
 8000fd4:	bf00      	nop
    for (;;) {
 8000fd6:	e7e3      	b.n	8000fa0 <ProcessHeartBeat+0x8>
 8000fd8:	20000108 	.word	0x20000108
 8000fdc:	200000c8 	.word	0x200000c8
 8000fe0:	0800b070 	.word	0x0800b070
 8000fe4:	20000370 	.word	0x20000370

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f001 f994 	bl	800231a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f83f 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f7ff fb3b 	bl	8000670 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ffa:	f7ff fb01 	bl	8000600 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000ffe:	f000 ff73 	bl	8001ee8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001002:	f001 f8b9 	bl	8002178 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8001006:	f000 ff3f 	bl	8001e88 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800100a:	f000 fa2b 	bl	8001464 <MX_TIM1_Init>
  MX_TIM3_Init();
 800100e:	f000 fae7 	bl	80015e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001012:	f000 fb3b 	bl	800168c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001016:	f000 fc2d 	bl	8001874 <MX_TIM8_Init>
  MX_TIM2_Init();
 800101a:	f000 fa7d 	bl	8001518 <MX_TIM2_Init>
  MX_TIM6_Init();
 800101e:	f000 fbf1 	bl	8001804 <MX_TIM6_Init>
  MX_TIM5_Init();
 8001022:	f000 fb89 	bl	8001738 <MX_TIM5_Init>
  MX_TIM12_Init();
 8001026:	f000 fc7f 	bl	8001928 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <main+0x7c>)
 800102c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff f910 	bl	8000254 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	b29a      	uxth	r2, r3
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	480a      	ldr	r0, [pc, #40]	@ (8001068 <main+0x80>)
 8001040:	f004 fe08 	bl	8005c54 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	4909      	ldr	r1, [pc, #36]	@ (800106c <main+0x84>)
 8001048:	4809      	ldr	r0, [pc, #36]	@ (8001070 <main+0x88>)
 800104a:	f004 fe8c 	bl	8005d66 <HAL_UART_Receive_IT>

  Init_MotorSystem();
 800104e:	f7ff fdb9 	bl	8000bc4 <Init_MotorSystem>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001052:	f006 fc03 	bl	800785c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001056:	f7ff faf9 	bl	800064c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800105a:	f006 fc33 	bl	80078c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105e:	bf00      	nop
 8001060:	e7fd      	b.n	800105e <main+0x76>
 8001062:	bf00      	nop
 8001064:	0800b078 	.word	0x0800b078
 8001068:	200003f8 	.word	0x200003f8
 800106c:	20000080 	.word	0x20000080
 8001070:	20000370 	.word	0x20000370

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	@ 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2234      	movs	r2, #52	@ 0x34
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f009 fb54 	bl	800a730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001098:	f002 f968 	bl	800336c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <SystemClock_Config+0xdc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001150 <SystemClock_Config+0xdc>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a8:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <SystemClock_Config+0xdc>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b4:	4b27      	ldr	r3, [pc, #156]	@ (8001154 <SystemClock_Config+0xe0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010bc:	4a25      	ldr	r2, [pc, #148]	@ (8001154 <SystemClock_Config+0xe0>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <SystemClock_Config+0xe0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010d4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010e8:	2360      	movs	r3, #96	@ 0x60
 80010ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 f995 	bl	800342c <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001108:	f000 f860 	bl	80011cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800110c:	f002 f93e 	bl	800338c <HAL_PWREx_EnableOverDrive>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001116:	f000 f859 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111a:	230f      	movs	r3, #15
 800111c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111e:	2302      	movs	r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	2103      	movs	r1, #3
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fc26 	bl	8003988 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001142:	f000 f843 	bl	80011cc <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	@ 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a13      	ldr	r2, [pc, #76]	@ (80011b4 <HAL_UART_RxCpltCallback+0x5c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d120      	bne.n	80011ac <HAL_UART_RxCpltCallback+0x54>
		HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	2201      	movs	r2, #1
 8001170:	4911      	ldr	r1, [pc, #68]	@ (80011b8 <HAL_UART_RxCpltCallback+0x60>)
 8001172:	4812      	ldr	r0, [pc, #72]	@ (80011bc <HAL_UART_RxCpltCallback+0x64>)
 8001174:	f004 fd6e 	bl	8005c54 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001178:	2201      	movs	r2, #1
 800117a:	490f      	ldr	r1, [pc, #60]	@ (80011b8 <HAL_UART_RxCpltCallback+0x60>)
 800117c:	4810      	ldr	r0, [pc, #64]	@ (80011c0 <HAL_UART_RxCpltCallback+0x68>)
 800117e:	f004 fdf2 	bl	8005d66 <HAL_UART_Receive_IT>
		rxBuff[rxIdx++] = rxData[0];
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_UART_RxCpltCallback+0x6c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	b2d1      	uxtb	r1, r2
 800118a:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <HAL_UART_RxCpltCallback+0x6c>)
 800118c:	7011      	strb	r1, [r2, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <HAL_UART_RxCpltCallback+0x60>)
 8001192:	7819      	ldrb	r1, [r3, #0]
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <HAL_UART_RxCpltCallback+0x70>)
 8001196:	5499      	strb	r1, [r3, r2]

		if (rxIdx == 4) {
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_UART_RxCpltCallback+0x6c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d105      	bne.n	80011ac <HAL_UART_RxCpltCallback+0x54>
			//HAL_UART_Transmit(&huart3, rxBuff, rxIdx, HAL_MAX_DELAY);
			ProcessCommand(rxBuff);
 80011a0:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <HAL_UART_RxCpltCallback+0x70>)
 80011a2:	f7ff fd7f 	bl	8000ca4 <ProcessCommand>
			rxIdx = 0;
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <HAL_UART_RxCpltCallback+0x6c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40004400 	.word	0x40004400
 80011b8:	20000080 	.word	0x20000080
 80011bc:	200003f8 	.word	0x200003f8
 80011c0:	20000370 	.word	0x20000370
 80011c4:	200000c4 	.word	0x200000c4
 80011c8:	20000084 	.word	0x20000084

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <Error_Handler+0x8>

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a10      	ldr	r2, [pc, #64]	@ (8001224 <HAL_MspInit+0x4c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <HAL_MspInit+0x4c>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	210f      	movs	r1, #15
 8001212:	f06f 0001 	mvn.w	r0, #1
 8001216:	f001 f9dc 	bl	80025d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f001 f897 	bl	8002394 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001266:	f008 f883 	bl	8009370 <xTaskGetSchedulerState>
 800126a:	4603      	mov	r3, r0
 800126c:	2b01      	cmp	r3, #1
 800126e:	d001      	beq.n	8001274 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001270:	f008 fe72 	bl	8009f58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <DMA1_Stream5_IRQHandler+0x10>)
 800127e:	f001 fb1f 	bl	80028c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000480 	.word	0x20000480

0800128c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <DMA1_Stream6_IRQHandler+0x10>)
 8001292:	f001 fb15 	bl	80028c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200004e0 	.word	0x200004e0

080012a0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80012a6:	f003 fe68 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000110 	.word	0x20000110

080012b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012ba:	f003 fe5e 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000110 	.word	0x20000110

080012c8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80012ce:	f003 fe54 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000110 	.word	0x20000110

080012dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <TIM1_CC_IRQHandler+0x10>)
 80012e2:	f003 fe4a 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000110 	.word	0x20000110

080012f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM2_IRQHandler+0x10>)
 80012f6:	f003 fe40 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000015c 	.word	0x2000015c

08001304 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <TIM3_IRQHandler+0x10>)
 800130a:	f003 fe36 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001a8 	.word	0x200001a8

08001318 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <TIM4_IRQHandler+0x10>)
 800131e:	f003 fe2c 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200001f4 	.word	0x200001f4

0800132c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <USART2_IRQHandler+0x10>)
 8001332:	f004 fd5d 	bl	8005df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000370 	.word	0x20000370

08001340 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <USART3_IRQHandler+0x10>)
 8001346:	f004 fd53 	bl	8005df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200003f8 	.word	0x200003f8

08001354 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800135a:	f003 fe0e 	bl	8004f7a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800135e:	4803      	ldr	r0, [pc, #12]	@ (800136c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8001360:	f003 fe0b 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002d8 	.word	0x200002d8
 800136c:	20000324 	.word	0x20000324

08001370 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001376:	f003 fe00 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002d8 	.word	0x200002d8

08001384 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800138a:	f003 fdf6 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200002d8 	.word	0x200002d8

08001398 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <TIM8_CC_IRQHandler+0x10>)
 800139e:	f003 fdec 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200002d8 	.word	0x200002d8

080013ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <TIM5_IRQHandler+0x10>)
 80013b2:	f003 fde2 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000240 	.word	0x20000240

080013c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <TIM6_DAC_IRQHandler+0x10>)
 80013c6:	f003 fdd8 	bl	8004f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000028c 	.word	0x2000028c

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	@ (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f009 f9be 	bl	800a784 <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20080000 	.word	0x20080000
 8001434:	00000400 	.word	0x00000400
 8001438:	2000010c 	.word	0x2000010c
 800143c:	200054b8 	.word	0x200054b8

08001440 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	@ 0x30
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2224      	movs	r2, #36	@ 0x24
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f009 f95c 	bl	800a730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <MX_TIM1_Init+0xac>)
 8001484:	4a23      	ldr	r2, [pc, #140]	@ (8001514 <MX_TIM1_Init+0xb0>)
 8001486:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001488:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <MX_TIM1_Init+0xac>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <MX_TIM1_Init+0xac>)
 8001490:	2210      	movs	r2, #16
 8001492:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001494:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_TIM1_Init+0xac>)
 8001496:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800149a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <MX_TIM1_Init+0xac>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <MX_TIM1_Init+0xac>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_TIM1_Init+0xac>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ae:	2303      	movs	r3, #3
 80014b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80014be:	230f      	movs	r3, #15
 80014c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c6:	2301      	movs	r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80014ce:	230f      	movs	r3, #15
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	480d      	ldr	r0, [pc, #52]	@ (8001510 <MX_TIM1_Init+0xac>)
 80014da:	f003 fb73 	bl	8004bc4 <HAL_TIM_Encoder_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80014e4:	f7ff fe72 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_TIM1_Init+0xac>)
 80014fa:	f004 fab1 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001504:	f7ff fe62 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3730      	adds	r7, #48	@ 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000110 	.word	0x20000110
 8001514:	40010000 	.word	0x40010000

08001518 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <MX_TIM2_Init+0xc4>)
 800153e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001542:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <MX_TIM2_Init+0xc4>)
 8001546:	222f      	movs	r2, #47	@ 0x2f
 8001548:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <MX_TIM2_Init+0xc4>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_TIM2_Init+0xc4>)
 8001552:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001556:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <MX_TIM2_Init+0xc4>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_TIM2_Init+0xc4>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001564:	481d      	ldr	r0, [pc, #116]	@ (80015dc <MX_TIM2_Init+0xc4>)
 8001566:	f003 f95c 	bl	8004822 <HAL_TIM_PWM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001570:	f7ff fe2c 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4816      	ldr	r0, [pc, #88]	@ (80015dc <MX_TIM2_Init+0xc4>)
 8001584:	f004 fa6c 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800158e:	f7ff fe1d 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001592:	2360      	movs	r3, #96	@ 0x60
 8001594:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <MX_TIM2_Init+0xc4>)
 80015aa:	f003 fded 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80015b4:	f7ff fe0a 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	220c      	movs	r2, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	@ (80015dc <MX_TIM2_Init+0xc4>)
 80015c0:	f003 fde2 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80015ca:	f7ff fdff 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ce:	4803      	ldr	r0, [pc, #12]	@ (80015dc <MX_TIM2_Init+0xc4>)
 80015d0:	f000 fbbc 	bl	8001d4c <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	@ 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000015c 	.word	0x2000015c

080015e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	@ 0x30
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	2224      	movs	r2, #36	@ 0x24
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f009 f89e 	bl	800a730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	463b      	mov	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fe:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <MX_TIM3_Init+0xa4>)
 8001600:	4a21      	ldr	r2, [pc, #132]	@ (8001688 <MX_TIM3_Init+0xa8>)
 8001602:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001604:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <MX_TIM3_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800160a:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <MX_TIM3_Init+0xa4>)
 800160c:	2210      	movs	r2, #16
 800160e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001610:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <MX_TIM3_Init+0xa4>)
 8001612:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001616:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_TIM3_Init+0xa4>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161e:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <MX_TIM3_Init+0xa4>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001624:	2303      	movs	r3, #3
 8001626:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800162c:	2301      	movs	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001634:	230f      	movs	r3, #15
 8001636:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800163c:	2301      	movs	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001644:	230f      	movs	r3, #15
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4619      	mov	r1, r3
 800164e:	480d      	ldr	r0, [pc, #52]	@ (8001684 <MX_TIM3_Init+0xa4>)
 8001650:	f003 fab8 	bl	8004bc4 <HAL_TIM_Encoder_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800165a:	f7ff fdb7 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	@ (8001684 <MX_TIM3_Init+0xa4>)
 800166c:	f004 f9f8 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001676:	f7ff fda9 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3730      	adds	r7, #48	@ 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001a8 	.word	0x200001a8
 8001688:	40000400 	.word	0x40000400

0800168c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	@ 0x30
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2224      	movs	r2, #36	@ 0x24
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f009 f848 	bl	800a730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016aa:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <MX_TIM4_Init+0xa4>)
 80016ac:	4a21      	ldr	r2, [pc, #132]	@ (8001734 <MX_TIM4_Init+0xa8>)
 80016ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <MX_TIM4_Init+0xa4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <MX_TIM4_Init+0xa4>)
 80016b8:	2210      	movs	r2, #16
 80016ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <MX_TIM4_Init+0xa4>)
 80016be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <MX_TIM4_Init+0xa4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <MX_TIM4_Init+0xa4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016d0:	2303      	movs	r3, #3
 80016d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d8:	2301      	movs	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80016e0:	230f      	movs	r3, #15
 80016e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e8:	2301      	movs	r3, #1
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80016f0:	230f      	movs	r3, #15
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_TIM4_Init+0xa4>)
 80016fc:	f003 fa62 	bl	8004bc4 <HAL_TIM_Encoder_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001706:	f7ff fd61 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	@ (8001730 <MX_TIM4_Init+0xa4>)
 8001718:	f004 f9a2 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001722:	f7ff fd53 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3730      	adds	r7, #48	@ 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200001f4 	.word	0x200001f4
 8001734:	40000800 	.word	0x40000800

08001738 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800175c:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <MX_TIM5_Init+0xc4>)
 800175e:	4a28      	ldr	r2, [pc, #160]	@ (8001800 <MX_TIM5_Init+0xc8>)
 8001760:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001762:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <MX_TIM5_Init+0xc4>)
 8001764:	222f      	movs	r2, #47	@ 0x2f
 8001766:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <MX_TIM5_Init+0xc4>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <MX_TIM5_Init+0xc4>)
 8001770:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001774:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <MX_TIM5_Init+0xc4>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <MX_TIM5_Init+0xc4>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001782:	481e      	ldr	r0, [pc, #120]	@ (80017fc <MX_TIM5_Init+0xc4>)
 8001784:	f003 f84d 	bl	8004822 <HAL_TIM_PWM_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800178e:	f7ff fd1d 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4619      	mov	r1, r3
 80017a0:	4816      	ldr	r0, [pc, #88]	@ (80017fc <MX_TIM5_Init+0xc4>)
 80017a2:	f004 f95d 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80017ac:	f7ff fd0e 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b0:	2360      	movs	r3, #96	@ 0x60
 80017b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	480d      	ldr	r0, [pc, #52]	@ (80017fc <MX_TIM5_Init+0xc4>)
 80017c8:	f003 fcde 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80017d2:	f7ff fcfb 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017d6:	463b      	mov	r3, r7
 80017d8:	220c      	movs	r2, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	4807      	ldr	r0, [pc, #28]	@ (80017fc <MX_TIM5_Init+0xc4>)
 80017de:	f003 fcd3 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80017e8:	f7ff fcf0 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017ec:	4803      	ldr	r0, [pc, #12]	@ (80017fc <MX_TIM5_Init+0xc4>)
 80017ee:	f000 faad 	bl	8001d4c <HAL_TIM_MspPostInit>

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	@ 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000240 	.word	0x20000240
 8001800:	40000c00 	.word	0x40000c00

08001804 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <MX_TIM6_Init+0x68>)
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <MX_TIM6_Init+0x6c>)
 8001818:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <MX_TIM6_Init+0x68>)
 800181c:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001820:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_TIM6_Init+0x68>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001828:	4b10      	ldr	r3, [pc, #64]	@ (800186c <MX_TIM6_Init+0x68>)
 800182a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800182e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001830:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_TIM6_Init+0x68>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001836:	480d      	ldr	r0, [pc, #52]	@ (800186c <MX_TIM6_Init+0x68>)
 8001838:	f002 fef4 	bl	8004624 <HAL_TIM_Base_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001842:	f7ff fcc3 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4806      	ldr	r0, [pc, #24]	@ (800186c <MX_TIM6_Init+0x68>)
 8001854:	f004 f904 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800185e:	f7ff fcb5 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000028c 	.word	0x2000028c
 8001870:	40001000 	.word	0x40001000

08001874 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	@ 0x30
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	2224      	movs	r2, #36	@ 0x24
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f008 ff54 	bl	800a730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	463b      	mov	r3, r7
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001892:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <MX_TIM8_Init+0xac>)
 8001894:	4a23      	ldr	r2, [pc, #140]	@ (8001924 <MX_TIM8_Init+0xb0>)
 8001896:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001898:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <MX_TIM8_Init+0xac>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800189e:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <MX_TIM8_Init+0xac>)
 80018a0:	2210      	movs	r2, #16
 80018a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <MX_TIM8_Init+0xac>)
 80018a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <MX_TIM8_Init+0xac>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <MX_TIM8_Init+0xac>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <MX_TIM8_Init+0xac>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018be:	2303      	movs	r3, #3
 80018c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018c6:	2301      	movs	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80018ce:	230f      	movs	r3, #15
 80018d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018d6:	2301      	movs	r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80018de:	230f      	movs	r3, #15
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	4619      	mov	r1, r3
 80018e8:	480d      	ldr	r0, [pc, #52]	@ (8001920 <MX_TIM8_Init+0xac>)
 80018ea:	f003 f96b 	bl	8004bc4 <HAL_TIM_Encoder_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80018f4:	f7ff fc6a 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001904:	463b      	mov	r3, r7
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	@ (8001920 <MX_TIM8_Init+0xac>)
 800190a:	f004 f8a9 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001914:	f7ff fc5a 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	3730      	adds	r7, #48	@ 0x30
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200002d8 	.word	0x200002d8
 8001924:	40010400 	.word	0x40010400

08001928 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_TIM12_Init+0x84>)
 8001942:	4a1b      	ldr	r2, [pc, #108]	@ (80019b0 <MX_TIM12_Init+0x88>)
 8001944:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_TIM12_Init+0x84>)
 8001948:	225f      	movs	r2, #95	@ 0x5f
 800194a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <MX_TIM12_Init+0x84>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001952:	4b16      	ldr	r3, [pc, #88]	@ (80019ac <MX_TIM12_Init+0x84>)
 8001954:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001958:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_TIM12_Init+0x84>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <MX_TIM12_Init+0x84>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001966:	4811      	ldr	r0, [pc, #68]	@ (80019ac <MX_TIM12_Init+0x84>)
 8001968:	f002 ff5b 	bl	8004822 <HAL_TIM_PWM_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001972:	f7ff fc2b 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001976:	2360      	movs	r3, #96	@ 0x60
 8001978:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2204      	movs	r2, #4
 800198a:	4619      	mov	r1, r3
 800198c:	4807      	ldr	r0, [pc, #28]	@ (80019ac <MX_TIM12_Init+0x84>)
 800198e:	f003 fbfb 	bl	8005188 <HAL_TIM_PWM_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001998:	f7ff fc18 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800199c:	4803      	ldr	r0, [pc, #12]	@ (80019ac <MX_TIM12_Init+0x84>)
 800199e:	f000 f9d5 	bl	8001d4c <HAL_TIM_MspPostInit>

}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000324 	.word	0x20000324
 80019b0:	40001800 	.word	0x40001800

080019b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	@ 0x40
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a93      	ldr	r2, [pc, #588]	@ (8001c20 <HAL_TIM_Encoder_MspInit+0x26c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d149      	bne.n	8001a6a <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d6:	4b93      	ldr	r3, [pc, #588]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	4a92      	ldr	r2, [pc, #584]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e2:	4b90      	ldr	r3, [pc, #576]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ee:	4b8d      	ldr	r3, [pc, #564]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a8c      	ldr	r2, [pc, #560]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b8a      	ldr	r3, [pc, #552]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 8001a06:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a20:	4619      	mov	r1, r3
 8001a22:	4881      	ldr	r0, [pc, #516]	@ (8001c28 <HAL_TIM_Encoder_MspInit+0x274>)
 8001a24:	f001 f988 	bl	8002d38 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2105      	movs	r1, #5
 8001a2c:	2018      	movs	r0, #24
 8001a2e:	f000 fdd0 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a32:	2018      	movs	r0, #24
 8001a34:	f000 fde9 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2105      	movs	r1, #5
 8001a3c:	2019      	movs	r0, #25
 8001a3e:	f000 fdc8 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a42:	2019      	movs	r0, #25
 8001a44:	f000 fde1 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2105      	movs	r1, #5
 8001a4c:	201a      	movs	r0, #26
 8001a4e:	f000 fdc0 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a52:	201a      	movs	r0, #26
 8001a54:	f000 fdd9 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2105      	movs	r1, #5
 8001a5c:	201b      	movs	r0, #27
 8001a5e:	f000 fdb8 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a62:	201b      	movs	r0, #27
 8001a64:	f000 fdd1 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001a68:	e0d5      	b.n	8001c16 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0x278>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d14c      	bne.n	8001b0e <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a74:	4b6b      	ldr	r3, [pc, #428]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	4a6a      	ldr	r2, [pc, #424]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a80:	4b68      	ldr	r3, [pc, #416]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	4b65      	ldr	r3, [pc, #404]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	4a64      	ldr	r2, [pc, #400]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a98:	4b62      	ldr	r3, [pc, #392]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	4a5e      	ldr	r2, [pc, #376]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab0:	4b5c      	ldr	r3, [pc, #368]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8001abc:	2340      	movs	r3, #64	@ 0x40
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001acc:	2302      	movs	r3, #2
 8001ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4856      	ldr	r0, [pc, #344]	@ (8001c30 <HAL_TIM_Encoder_MspInit+0x27c>)
 8001ad8:	f001 f92e 	bl	8002d38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001adc:	2320      	movs	r3, #32
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aec:	2302      	movs	r3, #2
 8001aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001af4:	4619      	mov	r1, r3
 8001af6:	484f      	ldr	r0, [pc, #316]	@ (8001c34 <HAL_TIM_Encoder_MspInit+0x280>)
 8001af8:	f001 f91e 	bl	8002d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2105      	movs	r1, #5
 8001b00:	201d      	movs	r0, #29
 8001b02:	f000 fd66 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b06:	201d      	movs	r0, #29
 8001b08:	f000 fd7f 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 8001b0c:	e083      	b.n	8001c16 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a49      	ldr	r2, [pc, #292]	@ (8001c38 <HAL_TIM_Encoder_MspInit+0x284>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d131      	bne.n	8001b7c <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b18:	4b42      	ldr	r3, [pc, #264]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	4a41      	ldr	r2, [pc, #260]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b24:	4b3f      	ldr	r3, [pc, #252]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b30:	4b3c      	ldr	r3, [pc, #240]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	4a3b      	ldr	r2, [pc, #236]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3c:	4b39      	ldr	r3, [pc, #228]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8001b48:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	4835      	ldr	r0, [pc, #212]	@ (8001c3c <HAL_TIM_Encoder_MspInit+0x288>)
 8001b66:	f001 f8e7 	bl	8002d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	201e      	movs	r0, #30
 8001b70:	f000 fd2f 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b74:	201e      	movs	r0, #30
 8001b76:	f000 fd48 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 8001b7a:	e04c      	b.n	8001c16 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2f      	ldr	r2, [pc, #188]	@ (8001c40 <HAL_TIM_Encoder_MspInit+0x28c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d147      	bne.n	8001c16 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b86:	4b27      	ldr	r3, [pc, #156]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a26      	ldr	r2, [pc, #152]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b24      	ldr	r3, [pc, #144]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a20      	ldr	r2, [pc, #128]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x270>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8001bb6:	23c0      	movs	r3, #192	@ 0xc0
 8001bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481c      	ldr	r0, [pc, #112]	@ (8001c44 <HAL_TIM_Encoder_MspInit+0x290>)
 8001bd2:	f001 f8b1 	bl	8002d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2105      	movs	r1, #5
 8001bda:	202b      	movs	r0, #43	@ 0x2b
 8001bdc:	f000 fcf9 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001be0:	202b      	movs	r0, #43	@ 0x2b
 8001be2:	f000 fd12 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2105      	movs	r1, #5
 8001bea:	202c      	movs	r0, #44	@ 0x2c
 8001bec:	f000 fcf1 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001bf0:	202c      	movs	r0, #44	@ 0x2c
 8001bf2:	f000 fd0a 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	202d      	movs	r0, #45	@ 0x2d
 8001bfc:	f000 fce9 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c00:	202d      	movs	r0, #45	@ 0x2d
 8001c02:	f000 fd02 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2105      	movs	r1, #5
 8001c0a:	202e      	movs	r0, #46	@ 0x2e
 8001c0c:	f000 fce1 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c10:	202e      	movs	r0, #46	@ 0x2e
 8001c12:	f000 fcfa 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3740      	adds	r7, #64	@ 0x40
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40000800 	.word	0x40000800
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40010400 	.word	0x40010400
 8001c44:	40020800 	.word	0x40020800

08001c48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c58:	d114      	bne.n	8001c84 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5a:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0xac>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	4a25      	ldr	r2, [pc, #148]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0xac>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c66:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0xac>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2105      	movs	r1, #5
 8001c76:	201c      	movs	r0, #28
 8001c78:	f000 fcab 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c7c:	201c      	movs	r0, #28
 8001c7e:	f000 fcc4 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001c82:	e032      	b.n	8001cea <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf8 <HAL_TIM_PWM_MspInit+0xb0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d114      	bne.n	8001cb8 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c8e:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0xac>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0xac>)
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0xac>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2105      	movs	r1, #5
 8001caa:	2032      	movs	r0, #50	@ 0x32
 8001cac:	f000 fc91 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001cb0:	2032      	movs	r0, #50	@ 0x32
 8001cb2:	f000 fcaa 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 8001cb6:	e018      	b.n	8001cea <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001cfc <HAL_TIM_PWM_MspInit+0xb4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d113      	bne.n	8001cea <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0xac>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0xac>)
 8001cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0xac>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2105      	movs	r1, #5
 8001cde:	202b      	movs	r0, #43	@ 0x2b
 8001ce0:	f000 fc77 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ce4:	202b      	movs	r0, #43	@ 0x2b
 8001ce6:	f000 fc90 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40000c00 	.word	0x40000c00
 8001cfc:	40001800 	.word	0x40001800

08001d00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <HAL_TIM_Base_MspInit+0x44>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d113      	bne.n	8001d3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_TIM_Base_MspInit+0x48>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <HAL_TIM_Base_MspInit+0x48>)
 8001d18:	f043 0310 	orr.w	r3, r3, #16
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_TIM_Base_MspInit+0x48>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	2036      	movs	r0, #54	@ 0x36
 8001d30:	f000 fc4f 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d34:	2036      	movs	r0, #54	@ 0x36
 8001d36:	f000 fc68 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40001000 	.word	0x40001000
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	@ 0x30
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d6c:	d139      	bne.n	8001de2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b41      	ldr	r3, [pc, #260]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a40      	ldr	r2, [pc, #256]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	4b3b      	ldr	r3, [pc, #236]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b38      	ldr	r3, [pc, #224]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dae:	2301      	movs	r3, #1
 8001db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	482f      	ldr	r0, [pc, #188]	@ (8001e78 <HAL_TIM_MspPostInit+0x12c>)
 8001dba:	f000 ffbd 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 8001dbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4828      	ldr	r0, [pc, #160]	@ (8001e7c <HAL_TIM_MspPostInit+0x130>)
 8001ddc:	f000 ffac 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001de0:	e043      	b.n	8001e6a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a26      	ldr	r2, [pc, #152]	@ (8001e80 <HAL_TIM_MspPostInit+0x134>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d11c      	bne.n	8001e26 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df0:	4a20      	ldr	r2, [pc, #128]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001e04:	2309      	movs	r3, #9
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e14:	2302      	movs	r3, #2
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4816      	ldr	r0, [pc, #88]	@ (8001e78 <HAL_TIM_MspPostInit+0x12c>)
 8001e20:	f000 ff8a 	bl	8002d38 <HAL_GPIO_Init>
}
 8001e24:	e021      	b.n	8001e6a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <HAL_TIM_MspPostInit+0x138>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d11c      	bne.n	8001e6a <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e30:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	4a0f      	ldr	r2, [pc, #60]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <HAL_TIM_MspPostInit+0x128>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001e5a:	2309      	movs	r3, #9
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <HAL_TIM_MspPostInit+0x130>)
 8001e66:	f000 ff67 	bl	8002d38 <HAL_GPIO_Init>
}
 8001e6a:	bf00      	nop
 8001e6c:	3730      	adds	r7, #48	@ 0x30
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40000c00 	.word	0x40000c00
 8001e84:	40001800 	.word	0x40001800

08001e88 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001e8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <MX_USART2_UART_Init+0x5c>)
 8001e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e92:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001e94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001eae:	220c      	movs	r2, #12
 8001eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eca:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <MX_USART2_UART_Init+0x58>)
 8001ecc:	f003 fe74 	bl	8005bb8 <HAL_UART_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ed6:	f7ff f979 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000370 	.word	0x20000370
 8001ee4:	40004400 	.word	0x40004400

08001ee8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001eee:	4a15      	ldr	r2, [pc, #84]	@ (8001f44 <MX_USART3_UART_Init+0x5c>)
 8001ef0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <MX_USART3_UART_Init+0x58>)
 8001f2c:	f003 fe44 	bl	8005bb8 <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f36:	f7ff f949 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200003f8 	.word	0x200003f8
 8001f44:	40004800 	.word	0x40004800

08001f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0b0      	sub	sp, #192	@ 0xc0
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	2290      	movs	r2, #144	@ 0x90
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f008 fbe1 	bl	800a730 <memset>
  if(uartHandle->Instance==USART2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a79      	ldr	r2, [pc, #484]	@ (8002158 <HAL_UART_MspInit+0x210>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	f040 80a0 	bne.w	80020ba <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 ff24 	bl	8003dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f92:	f7ff f91b 	bl	80011cc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f96:	4b71      	ldr	r3, [pc, #452]	@ (800215c <HAL_UART_MspInit+0x214>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a70      	ldr	r2, [pc, #448]	@ (800215c <HAL_UART_MspInit+0x214>)
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800215c <HAL_UART_MspInit+0x214>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b6b      	ldr	r3, [pc, #428]	@ (800215c <HAL_UART_MspInit+0x214>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a6a      	ldr	r2, [pc, #424]	@ (800215c <HAL_UART_MspInit+0x214>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b68      	ldr	r3, [pc, #416]	@ (800215c <HAL_UART_MspInit+0x214>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fc6:	2360      	movs	r3, #96	@ 0x60
 8001fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fde:	2307      	movs	r3, #7
 8001fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fe8:	4619      	mov	r1, r3
 8001fea:	485d      	ldr	r0, [pc, #372]	@ (8002160 <HAL_UART_MspInit+0x218>)
 8001fec:	f000 fea4 	bl	8002d38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ff0:	4b5c      	ldr	r3, [pc, #368]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8001ff2:	4a5d      	ldr	r2, [pc, #372]	@ (8002168 <HAL_UART_MspInit+0x220>)
 8001ff4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8001ff8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ffc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffe:	4b59      	ldr	r3, [pc, #356]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002004:	4b57      	ldr	r3, [pc, #348]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800200a:	4b56      	ldr	r3, [pc, #344]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 800200c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002010:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002012:	4b54      	ldr	r3, [pc, #336]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002018:	4b52      	ldr	r3, [pc, #328]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800201e:	4b51      	ldr	r3, [pc, #324]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8002020:	2200      	movs	r2, #0
 8002022:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002024:	4b4f      	ldr	r3, [pc, #316]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800202a:	4b4e      	ldr	r3, [pc, #312]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002030:	484c      	ldr	r0, [pc, #304]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8002032:	f000 fb05 	bl	8002640 <HAL_DMA_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800203c:	f7ff f8c6 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a48      	ldr	r2, [pc, #288]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8002044:	675a      	str	r2, [r3, #116]	@ 0x74
 8002046:	4a47      	ldr	r2, [pc, #284]	@ (8002164 <HAL_UART_MspInit+0x21c>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800204c:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_UART_MspInit+0x224>)
 800204e:	4a48      	ldr	r2, [pc, #288]	@ (8002170 <HAL_UART_MspInit+0x228>)
 8002050:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002052:	4b46      	ldr	r3, [pc, #280]	@ (800216c <HAL_UART_MspInit+0x224>)
 8002054:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002058:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800205a:	4b44      	ldr	r3, [pc, #272]	@ (800216c <HAL_UART_MspInit+0x224>)
 800205c:	2240      	movs	r2, #64	@ 0x40
 800205e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002060:	4b42      	ldr	r3, [pc, #264]	@ (800216c <HAL_UART_MspInit+0x224>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002066:	4b41      	ldr	r3, [pc, #260]	@ (800216c <HAL_UART_MspInit+0x224>)
 8002068:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800206c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800206e:	4b3f      	ldr	r3, [pc, #252]	@ (800216c <HAL_UART_MspInit+0x224>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002074:	4b3d      	ldr	r3, [pc, #244]	@ (800216c <HAL_UART_MspInit+0x224>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800207a:	4b3c      	ldr	r3, [pc, #240]	@ (800216c <HAL_UART_MspInit+0x224>)
 800207c:	2200      	movs	r2, #0
 800207e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002080:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <HAL_UART_MspInit+0x224>)
 8002082:	2200      	movs	r2, #0
 8002084:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002086:	4b39      	ldr	r3, [pc, #228]	@ (800216c <HAL_UART_MspInit+0x224>)
 8002088:	2200      	movs	r2, #0
 800208a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800208c:	4837      	ldr	r0, [pc, #220]	@ (800216c <HAL_UART_MspInit+0x224>)
 800208e:	f000 fad7 	bl	8002640 <HAL_DMA_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8002098:	f7ff f898 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a33      	ldr	r2, [pc, #204]	@ (800216c <HAL_UART_MspInit+0x224>)
 80020a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80020a2:	4a32      	ldr	r2, [pc, #200]	@ (800216c <HAL_UART_MspInit+0x224>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2105      	movs	r1, #5
 80020ac:	2026      	movs	r0, #38	@ 0x26
 80020ae:	f000 fa90 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020b2:	2026      	movs	r0, #38	@ 0x26
 80020b4:	f000 faa9 	bl	800260a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020b8:	e049      	b.n	800214e <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2d      	ldr	r2, [pc, #180]	@ (8002174 <HAL_UART_MspInit+0x22c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d144      	bne.n	800214e <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 fe7e 	bl	8003dd4 <HAL_RCCEx_PeriphCLKConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80020de:	f7ff f875 	bl	80011cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020e2:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <HAL_UART_MspInit+0x214>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	4a1d      	ldr	r2, [pc, #116]	@ (800215c <HAL_UART_MspInit+0x214>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ee:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HAL_UART_MspInit+0x214>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_UART_MspInit+0x214>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a17      	ldr	r2, [pc, #92]	@ (800215c <HAL_UART_MspInit+0x214>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_UART_MspInit+0x214>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002112:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002116:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800212c:	2307      	movs	r3, #7
 800212e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002132:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002136:	4619      	mov	r1, r3
 8002138:	4809      	ldr	r0, [pc, #36]	@ (8002160 <HAL_UART_MspInit+0x218>)
 800213a:	f000 fdfd 	bl	8002d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2105      	movs	r1, #5
 8002142:	2027      	movs	r0, #39	@ 0x27
 8002144:	f000 fa45 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002148:	2027      	movs	r0, #39	@ 0x27
 800214a:	f000 fa5e 	bl	800260a <HAL_NVIC_EnableIRQ>
}
 800214e:	bf00      	nop
 8002150:	37c0      	adds	r7, #192	@ 0xc0
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40004400 	.word	0x40004400
 800215c:	40023800 	.word	0x40023800
 8002160:	40020c00 	.word	0x40020c00
 8002164:	20000480 	.word	0x20000480
 8002168:	40026088 	.word	0x40026088
 800216c:	200004e0 	.word	0x200004e0
 8002170:	400260a0 	.word	0x400260a0
 8002174:	40004800 	.word	0x40004800

08002178 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800217c:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800217e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002182:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002186:	2206      	movs	r2, #6
 8002188:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800218a:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800218c:	2202      	movs	r2, #2
 800218e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002198:	2202      	movs	r2, #2
 800219a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800219e:	2201      	movs	r2, #1
 80021a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021bc:	f000 ff9b 	bl	80030f6 <HAL_PCD_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80021c6:	f7ff f801 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000540 	.word	0x20000540

080021d4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b0ae      	sub	sp, #184	@ 0xb8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2290      	movs	r2, #144	@ 0x90
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f008 fa9b 	bl	800a730 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002202:	d159      	bne.n	80022b8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002204:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002208:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fddd 	bl	8003dd4 <HAL_RCCEx_PeriphCLKConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002220:	f7fe ffd4 	bl	80011cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002224:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <HAL_PCD_MspInit+0xec>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	4a25      	ldr	r2, [pc, #148]	@ (80022c0 <HAL_PCD_MspInit+0xec>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_PCD_MspInit+0xec>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800223c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002240:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002256:	230a      	movs	r3, #10
 8002258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002260:	4619      	mov	r1, r3
 8002262:	4818      	ldr	r0, [pc, #96]	@ (80022c4 <HAL_PCD_MspInit+0xf0>)
 8002264:	f000 fd68 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800226c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002280:	4619      	mov	r1, r3
 8002282:	4810      	ldr	r0, [pc, #64]	@ (80022c4 <HAL_PCD_MspInit+0xf0>)
 8002284:	f000 fd58 	bl	8002d38 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002288:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_PCD_MspInit+0xec>)
 800228a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228c:	4a0c      	ldr	r2, [pc, #48]	@ (80022c0 <HAL_PCD_MspInit+0xec>)
 800228e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002292:	6353      	str	r3, [r2, #52]	@ 0x34
 8002294:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_PCD_MspInit+0xec>)
 8002296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <HAL_PCD_MspInit+0xec>)
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	4a06      	ldr	r2, [pc, #24]	@ (80022c0 <HAL_PCD_MspInit+0xec>)
 80022a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <HAL_PCD_MspInit+0xec>)
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80022b8:	bf00      	nop
 80022ba:	37b8      	adds	r7, #184	@ 0xb8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020000 	.word	0x40020000

080022c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002300 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022cc:	f7ff f8b8 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022d2:	490d      	ldr	r1, [pc, #52]	@ (8002308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d4:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022f6:	f008 fa4b 	bl	800a790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fa:	f7fe fe75 	bl	8000fe8 <main>
  bx  lr    
 80022fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002300:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002308:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800230c:	0800b244 	.word	0x0800b244
  ldr r2, =_sbss
 8002310:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002314:	200054b4 	.word	0x200054b4

08002318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC_IRQHandler>

0800231a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231e:	2003      	movs	r0, #3
 8002320:	f000 f94c 	bl	80025bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002324:	200f      	movs	r0, #15
 8002326:	f000 f805 	bl	8002334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232a:	f7fe ff55 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_InitTick+0x54>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <HAL_InitTick+0x58>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800234a:	fbb3 f3f1 	udiv	r3, r3, r1
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f967 	bl	8002626 <HAL_SYSTICK_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00e      	b.n	8002380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b0f      	cmp	r3, #15
 8002366:	d80a      	bhi.n	800237e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002368:	2200      	movs	r2, #0
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f000 f92f 	bl	80025d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002374:	4a06      	ldr	r2, [pc, #24]	@ (8002390 <HAL_InitTick+0x5c>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000000 	.word	0x20000000
 800238c:	20000008 	.word	0x20000008
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_IncTick+0x20>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_IncTick+0x24>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <HAL_IncTick+0x24>)
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000008 	.word	0x20000008
 80023b8:	20000a20 	.word	0x20000a20

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_GetTick+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000a20 	.word	0x20000a20

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff ffee 	bl	80023bc <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d005      	beq.n	80023fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_Delay+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffde 	bl	80023bc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f7      	bhi.n	80023fc <HAL_Delay+0x28>
  {
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000008 	.word	0x20000008

0800241c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <__NVIC_SetPriorityGrouping+0x40>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	4313      	orrs	r3, r2
 8002448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244a:	4a04      	ldr	r2, [pc, #16]	@ (800245c <__NVIC_SetPriorityGrouping+0x40>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00
 8002460:	05fa0000 	.word	0x05fa0000

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db0b      	blt.n	80024aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4907      	ldr	r1, [pc, #28]	@ (80024b8 <__NVIC_EnableIRQ+0x38>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2001      	movs	r0, #1
 80024a2:	fa00 f202 	lsl.w	r2, r0, r2
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	@ (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	@ (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f1c3 0307 	rsb	r3, r3, #7
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf28      	it	cs
 800252e:	2304      	movcs	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	2b06      	cmp	r3, #6
 8002538:	d902      	bls.n	8002540 <NVIC_EncodePriority+0x30>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3b03      	subs	r3, #3
 800253e:	e000      	b.n	8002542 <NVIC_EncodePriority+0x32>
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43d9      	mvns	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4313      	orrs	r3, r2
         );
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	@ 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002588:	d301      	bcc.n	800258e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258a:	2301      	movs	r3, #1
 800258c:	e00f      	b.n	80025ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258e:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <SysTick_Config+0x40>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002596:	210f      	movs	r1, #15
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	f7ff ff8e 	bl	80024bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <SysTick_Config+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a6:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <SysTick_Config+0x40>)
 80025a8:	2207      	movs	r2, #7
 80025aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	e000e010 	.word	0xe000e010

080025bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff29 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff3e 	bl	8002464 <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff8e 	bl	8002510 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5d 	bl	80024bc <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff31 	bl	8002480 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffa2 	bl	8002578 <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff feb6 	bl	80023bc <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e099      	b.n	8002790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267c:	e00f      	b.n	800269e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800267e:	f7ff fe9d 	bl	80023bc <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b05      	cmp	r3, #5
 800268a:	d908      	bls.n	800269e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2203      	movs	r2, #3
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e078      	b.n	8002790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e8      	bne.n	800267e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4b38      	ldr	r3, [pc, #224]	@ (8002798 <HAL_DMA_Init+0x158>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d107      	bne.n	8002708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002700:	4313      	orrs	r3, r2
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f023 0307 	bic.w	r3, r3, #7
 800271e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	2b04      	cmp	r3, #4
 8002730:	d117      	bne.n	8002762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00e      	beq.n	8002762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fa7b 	bl	8002c40 <DMA_CheckFifoParam>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2240      	movs	r2, #64	@ 0x40
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800275e:	2301      	movs	r3, #1
 8002760:	e016      	b.n	8002790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa32 	bl	8002bd4 <DMA_CalcBaseAndBitshift>
 8002770:	4603      	mov	r3, r0
 8002772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002778:	223f      	movs	r2, #63	@ 0x3f
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	e010803f 	.word	0xe010803f

0800279c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027aa:	f7ff fe07 	bl	80023bc <HAL_GetTick>
 80027ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d008      	beq.n	80027ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e052      	b.n	8002874 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0216 	bic.w	r2, r2, #22
 80027dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_DMA_Abort+0x62>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281e:	e013      	b.n	8002848 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002820:	f7ff fdcc 	bl	80023bc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b05      	cmp	r3, #5
 800282c:	d90c      	bls.n	8002848 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2203      	movs	r2, #3
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e015      	b.n	8002874 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e4      	bne.n	8002820 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285a:	223f      	movs	r2, #63	@ 0x3f
 800285c:	409a      	lsls	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d004      	beq.n	800289a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2280      	movs	r2, #128	@ 0x80
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e00c      	b.n	80028b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2205      	movs	r2, #5
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002b08 <HAL_DMA_IRQHandler+0x248>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a8e      	ldr	r2, [pc, #568]	@ (8002b0c <HAL_DMA_IRQHandler+0x24c>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a9b      	lsrs	r3, r3, #10
 80028d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	2208      	movs	r2, #8
 80028ec:	409a      	lsls	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01a      	beq.n	800292c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0204 	bic.w	r2, r2, #4
 8002912:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002918:	2208      	movs	r2, #8
 800291a:	409a      	lsls	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002924:	f043 0201 	orr.w	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	2201      	movs	r2, #1
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d012      	beq.n	8002962 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294e:	2201      	movs	r2, #1
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	f043 0202 	orr.w	r2, r3, #2
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002966:	2204      	movs	r2, #4
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d012      	beq.n	8002998 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	2204      	movs	r2, #4
 8002986:	409a      	lsls	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002990:	f043 0204 	orr.w	r2, r3, #4
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	2210      	movs	r2, #16
 800299e:	409a      	lsls	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d043      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d03c      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ba:	2210      	movs	r2, #16
 80029bc:	409a      	lsls	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d018      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d024      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
 80029ee:	e01f      	b.n	8002a30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
 8002a00:	e016      	b.n	8002a30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0208 	bic.w	r2, r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	2220      	movs	r2, #32
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 808f 	beq.w	8002b60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8087 	beq.w	8002b60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	2220      	movs	r2, #32
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d136      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0216 	bic.w	r2, r2, #22
 8002a78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <HAL_DMA_IRQHandler+0x1da>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0208 	bic.w	r2, r2, #8
 8002aa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	223f      	movs	r2, #63	@ 0x3f
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d07e      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
        }
        return;
 8002ad6:	e079      	b.n	8002bcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01d      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d031      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
 8002b04:	e02c      	b.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d023      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
 8002b20:	e01e      	b.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10f      	bne.n	8002b50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0210 	bic.w	r2, r2, #16
 8002b3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d032      	beq.n	8002bce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d022      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2205      	movs	r2, #5
 8002b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d307      	bcc.n	8002ba8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f2      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x2cc>
 8002ba6:	e000      	b.n	8002baa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ba8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
 8002bca:	e000      	b.n	8002bce <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bcc:	bf00      	nop
    }
  }
}
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3b10      	subs	r3, #16
 8002be4:	4a13      	ldr	r2, [pc, #76]	@ (8002c34 <DMA_CalcBaseAndBitshift+0x60>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bee:	4a12      	ldr	r2, [pc, #72]	@ (8002c38 <DMA_CalcBaseAndBitshift+0x64>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d908      	bls.n	8002c14 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x68>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	1d1a      	adds	r2, r3, #4
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c12:	e006      	b.n	8002c22 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x68>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	aaaaaaab 	.word	0xaaaaaaab
 8002c38:	0800b0f8 	.word	0x0800b0f8
 8002c3c:	fffffc00 	.word	0xfffffc00

08002c40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11f      	bne.n	8002c9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d856      	bhi.n	8002d0e <DMA_CheckFifoParam+0xce>
 8002c60:	a201      	add	r2, pc, #4	@ (adr r2, 8002c68 <DMA_CheckFifoParam+0x28>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c8b 	.word	0x08002c8b
 8002c70:	08002c79 	.word	0x08002c79
 8002c74:	08002d0f 	.word	0x08002d0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d046      	beq.n	8002d12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e043      	b.n	8002d12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c92:	d140      	bne.n	8002d16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c98:	e03d      	b.n	8002d16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca2:	d121      	bne.n	8002ce8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d837      	bhi.n	8002d1a <DMA_CheckFifoParam+0xda>
 8002caa:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <DMA_CheckFifoParam+0x70>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cc7 	.word	0x08002cc7
 8002cb8:	08002cc1 	.word	0x08002cc1
 8002cbc:	08002cd9 	.word	0x08002cd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e030      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d025      	beq.n	8002d1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd6:	e022      	b.n	8002d1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ce6:	e01c      	b.n	8002d22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d903      	bls.n	8002cf6 <DMA_CheckFifoParam+0xb6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf4:	e018      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfa:	e015      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e00b      	b.n	8002d26 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e00a      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e008      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e006      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e004      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e002      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
    }
  } 
  
  return status; 
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	@ 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e175      	b.n	8003044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f040 8164 	bne.w	800303e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d005      	beq.n	8002d8e <HAL_GPIO_Init+0x56>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d130      	bne.n	8002df0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 0201 	and.w	r2, r3, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d017      	beq.n	8002e2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d123      	bne.n	8002e80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	08da      	lsrs	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3208      	adds	r2, #8
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80be 	beq.w	800303e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	4b66      	ldr	r3, [pc, #408]	@ (800305c <HAL_GPIO_Init+0x324>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	4a65      	ldr	r2, [pc, #404]	@ (800305c <HAL_GPIO_Init+0x324>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ece:	4b63      	ldr	r3, [pc, #396]	@ (800305c <HAL_GPIO_Init+0x324>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eda:	4a61      	ldr	r2, [pc, #388]	@ (8003060 <HAL_GPIO_Init+0x328>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a58      	ldr	r2, [pc, #352]	@ (8003064 <HAL_GPIO_Init+0x32c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d037      	beq.n	8002f76 <HAL_GPIO_Init+0x23e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a57      	ldr	r2, [pc, #348]	@ (8003068 <HAL_GPIO_Init+0x330>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_GPIO_Init+0x23a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a56      	ldr	r2, [pc, #344]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d02b      	beq.n	8002f6e <HAL_GPIO_Init+0x236>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a55      	ldr	r2, [pc, #340]	@ (8003070 <HAL_GPIO_Init+0x338>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x232>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a54      	ldr	r2, [pc, #336]	@ (8003074 <HAL_GPIO_Init+0x33c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x22e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a53      	ldr	r2, [pc, #332]	@ (8003078 <HAL_GPIO_Init+0x340>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x22a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a52      	ldr	r2, [pc, #328]	@ (800307c <HAL_GPIO_Init+0x344>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x226>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a51      	ldr	r2, [pc, #324]	@ (8003080 <HAL_GPIO_Init+0x348>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a50      	ldr	r2, [pc, #320]	@ (8003084 <HAL_GPIO_Init+0x34c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x21e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4f      	ldr	r2, [pc, #316]	@ (8003088 <HAL_GPIO_Init+0x350>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x21a>
 8002f4e:	2309      	movs	r3, #9
 8002f50:	e012      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f52:	230a      	movs	r3, #10
 8002f54:	e010      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f56:	2308      	movs	r3, #8
 8002f58:	e00e      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e00c      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f5e:	2306      	movs	r3, #6
 8002f60:	e00a      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f62:	2305      	movs	r3, #5
 8002f64:	e008      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f66:	2304      	movs	r3, #4
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e004      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e002      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f76:	2300      	movs	r3, #0
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	f002 0203 	and.w	r2, r2, #3
 8002f7e:	0092      	lsls	r2, r2, #2
 8002f80:	4093      	lsls	r3, r2
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f88:	4935      	ldr	r1, [pc, #212]	@ (8003060 <HAL_GPIO_Init+0x328>)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	089b      	lsrs	r3, r3, #2
 8002f8e:	3302      	adds	r3, #2
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f96:	4b3d      	ldr	r3, [pc, #244]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fba:	4a34      	ldr	r2, [pc, #208]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc0:	4b32      	ldr	r3, [pc, #200]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe4:	4a29      	ldr	r2, [pc, #164]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fea:	4b28      	ldr	r3, [pc, #160]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800300e:	4a1f      	ldr	r2, [pc, #124]	@ (800308c <HAL_GPIO_Init+0x354>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003014:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <HAL_GPIO_Init+0x354>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003038:	4a14      	ldr	r2, [pc, #80]	@ (800308c <HAL_GPIO_Init+0x354>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3301      	adds	r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	f67f ae86 	bls.w	8002d58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3724      	adds	r7, #36	@ 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	40013800 	.word	0x40013800
 8003064:	40020000 	.word	0x40020000
 8003068:	40020400 	.word	0x40020400
 800306c:	40020800 	.word	0x40020800
 8003070:	40020c00 	.word	0x40020c00
 8003074:	40021000 	.word	0x40021000
 8003078:	40021400 	.word	0x40021400
 800307c:	40021800 	.word	0x40021800
 8003080:	40021c00 	.word	0x40021c00
 8003084:	40022000 	.word	0x40022000
 8003088:	40022400 	.word	0x40022400
 800308c:	40013c00 	.word	0x40013c00

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
 800309c:	4613      	mov	r3, r2
 800309e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a0:	787b      	ldrb	r3, [r7, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030ac:	e003      	b.n	80030b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	041a      	lsls	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030d4:	887a      	ldrh	r2, [r7, #2]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4013      	ands	r3, r2
 80030da:	041a      	lsls	r2, r3, #16
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43d9      	mvns	r1, r3
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	400b      	ands	r3, r1
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	619a      	str	r2, [r3, #24]
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af02      	add	r7, sp, #8
 80030fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e108      	b.n	800331a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff f856 	bl	80021d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003136:	d102      	bne.n	800313e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f004 f8ee 	bl	8007324 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7c1a      	ldrb	r2, [r3, #16]
 8003150:	f88d 2000 	strb.w	r2, [sp]
 8003154:	3304      	adds	r3, #4
 8003156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003158:	f004 f88a 	bl	8007270 <USB_CoreInit>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0d5      	b.n	800331a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f004 f8e6 	bl	8007346 <USB_SetCurrentMode>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0c6      	b.n	800331a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e04a      	b.n	8003228 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3315      	adds	r3, #21
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3314      	adds	r3, #20
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	b298      	uxth	r0, r3
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	332e      	adds	r3, #46	@ 0x2e
 80031ce:	4602      	mov	r2, r0
 80031d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3318      	adds	r3, #24
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	331c      	adds	r3, #28
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3320      	adds	r3, #32
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3324      	adds	r3, #36	@ 0x24
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	3301      	adds	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	791b      	ldrb	r3, [r3, #4]
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	429a      	cmp	r2, r3
 8003230:	d3af      	bcc.n	8003192 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e044      	b.n	80032c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	3301      	adds	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	791b      	ldrb	r3, [r3, #4]
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3b5      	bcc.n	8003238 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7c1a      	ldrb	r2, [r3, #16]
 80032d4:	f88d 2000 	strb.w	r2, [sp]
 80032d8:	3304      	adds	r3, #4
 80032da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032dc:	f004 f880 	bl	80073e0 <USB_DevInit>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e013      	b.n	800331a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7b1b      	ldrb	r3, [r3, #12]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d102      	bne.n	800330e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f80b 	bl	8003324 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f004 fa3b 	bl	800778e <USB_DevDisconnect>

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003352:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <HAL_PCDEx_ActivateLPM+0x44>)
 8003354:	4313      	orrs	r3, r2
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	10000003 	.word	0x10000003

0800336c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a04      	ldr	r2, [pc, #16]	@ (8003388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337a:	6013      	str	r3, [r2, #0]
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40007000 	.word	0x40007000

0800338c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	4b23      	ldr	r3, [pc, #140]	@ (8003424 <HAL_PWREx_EnableOverDrive+0x98>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4a22      	ldr	r2, [pc, #136]	@ (8003424 <HAL_PWREx_EnableOverDrive+0x98>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a2:	4b20      	ldr	r3, [pc, #128]	@ (8003424 <HAL_PWREx_EnableOverDrive+0x98>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ba:	f7fe ffff 	bl	80023bc <HAL_GetTick>
 80033be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033c0:	e009      	b.n	80033d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c2:	f7fe fffb 	bl	80023bc <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033d0:	d901      	bls.n	80033d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e022      	b.n	800341c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e2:	d1ee      	bne.n	80033c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033e4:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f0:	f7fe ffe4 	bl	80023bc <HAL_GetTick>
 80033f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033f6:	e009      	b.n	800340c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033f8:	f7fe ffe0 	bl	80023bc <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003406:	d901      	bls.n	800340c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e007      	b.n	800341c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <HAL_PWREx_EnableOverDrive+0x9c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003418:	d1ee      	bne.n	80033f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	40007000 	.word	0x40007000

0800342c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e29b      	b.n	800397a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8087 	beq.w	800355e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003450:	4b96      	ldr	r3, [pc, #600]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b04      	cmp	r3, #4
 800345a:	d00c      	beq.n	8003476 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345c:	4b93      	ldr	r3, [pc, #588]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d112      	bne.n	800348e <HAL_RCC_OscConfig+0x62>
 8003468:	4b90      	ldr	r3, [pc, #576]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003474:	d10b      	bne.n	800348e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003476:	4b8d      	ldr	r3, [pc, #564]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d06c      	beq.n	800355c <HAL_RCC_OscConfig+0x130>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d168      	bne.n	800355c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e275      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x7a>
 8003498:	4b84      	ldr	r3, [pc, #528]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a83      	ldr	r2, [pc, #524]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800349e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	e02e      	b.n	8003504 <HAL_RCC_OscConfig+0xd8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x9c>
 80034ae:	4b7f      	ldr	r3, [pc, #508]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7e      	ldr	r2, [pc, #504]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b7c      	ldr	r3, [pc, #496]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7b      	ldr	r2, [pc, #492]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e01d      	b.n	8003504 <HAL_RCC_OscConfig+0xd8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0xc0>
 80034d2:	4b76      	ldr	r3, [pc, #472]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a75      	ldr	r2, [pc, #468]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b73      	ldr	r3, [pc, #460]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a72      	ldr	r2, [pc, #456]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0xd8>
 80034ec:	4b6f      	ldr	r3, [pc, #444]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a6e      	ldr	r2, [pc, #440]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b6c      	ldr	r3, [pc, #432]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6b      	ldr	r2, [pc, #428]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80034fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d013      	beq.n	8003534 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe ff56 	bl	80023bc <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7fe ff52 	bl	80023bc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	@ 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e229      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b61      	ldr	r3, [pc, #388]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0xe8>
 8003532:	e014      	b.n	800355e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe ff42 	bl	80023bc <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe ff3e 	bl	80023bc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	@ 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e215      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	4b57      	ldr	r3, [pc, #348]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x110>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d069      	beq.n	800363e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800356a:	4b50      	ldr	r3, [pc, #320]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b4d      	ldr	r3, [pc, #308]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b08      	cmp	r3, #8
 8003580:	d11c      	bne.n	80035bc <HAL_RCC_OscConfig+0x190>
 8003582:	4b4a      	ldr	r3, [pc, #296]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	4b47      	ldr	r3, [pc, #284]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_RCC_OscConfig+0x17a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e1e9      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	4b41      	ldr	r3, [pc, #260]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	493d      	ldr	r1, [pc, #244]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	e040      	b.n	800363e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d023      	beq.n	800360c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c4:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a38      	ldr	r2, [pc, #224]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe fef4 	bl	80023bc <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d8:	f7fe fef0 	bl	80023bc <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e1c7      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ea:	4b30      	ldr	r3, [pc, #192]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b2d      	ldr	r3, [pc, #180]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4929      	ldr	r1, [pc, #164]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
 800360a:	e018      	b.n	800363e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360c:	4b27      	ldr	r3, [pc, #156]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a26      	ldr	r2, [pc, #152]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe fed0 	bl	80023bc <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003620:	f7fe fecc 	bl	80023bc <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1a3      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	4b1e      	ldr	r3, [pc, #120]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d038      	beq.n	80036bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d019      	beq.n	8003686 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003656:	4a15      	ldr	r2, [pc, #84]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fe fead 	bl	80023bc <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003666:	f7fe fea9 	bl	80023bc <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e180      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003678:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800367a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x23a>
 8003684:	e01a      	b.n	80036bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 8003688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368a:	4a08      	ldr	r2, [pc, #32]	@ (80036ac <HAL_RCC_OscConfig+0x280>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fe fe93 	bl	80023bc <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369a:	f7fe fe8f 	bl	80023bc <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d903      	bls.n	80036b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e166      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
 80036ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b0:	4b92      	ldr	r3, [pc, #584]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ee      	bne.n	800369a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a4 	beq.w	8003812 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ca:	4b8c      	ldr	r3, [pc, #560]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10d      	bne.n	80036f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d6:	4b89      	ldr	r3, [pc, #548]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	4a88      	ldr	r2, [pc, #544]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036e2:	4b86      	ldr	r3, [pc, #536]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f2:	4b83      	ldr	r3, [pc, #524]	@ (8003900 <HAL_RCC_OscConfig+0x4d4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d118      	bne.n	8003730 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036fe:	4b80      	ldr	r3, [pc, #512]	@ (8003900 <HAL_RCC_OscConfig+0x4d4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7f      	ldr	r2, [pc, #508]	@ (8003900 <HAL_RCC_OscConfig+0x4d4>)
 8003704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370a:	f7fe fe57 	bl	80023bc <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003712:	f7fe fe53 	bl	80023bc <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b64      	cmp	r3, #100	@ 0x64
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e12a      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003724:	4b76      	ldr	r3, [pc, #472]	@ (8003900 <HAL_RCC_OscConfig+0x4d4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x31a>
 8003738:	4b70      	ldr	r3, [pc, #448]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373c:	4a6f      	ldr	r2, [pc, #444]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	@ 0x70
 8003744:	e02d      	b.n	80037a2 <HAL_RCC_OscConfig+0x376>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x33c>
 800374e:	4b6b      	ldr	r3, [pc, #428]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003752:	4a6a      	ldr	r2, [pc, #424]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	@ 0x70
 800375a:	4b68      	ldr	r3, [pc, #416]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375e:	4a67      	ldr	r2, [pc, #412]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	6713      	str	r3, [r2, #112]	@ 0x70
 8003766:	e01c      	b.n	80037a2 <HAL_RCC_OscConfig+0x376>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b05      	cmp	r3, #5
 800376e:	d10c      	bne.n	800378a <HAL_RCC_OscConfig+0x35e>
 8003770:	4b62      	ldr	r3, [pc, #392]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	4a61      	ldr	r2, [pc, #388]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	6713      	str	r3, [r2, #112]	@ 0x70
 800377c:	4b5f      	ldr	r3, [pc, #380]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	4a5e      	ldr	r2, [pc, #376]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	@ 0x70
 8003788:	e00b      	b.n	80037a2 <HAL_RCC_OscConfig+0x376>
 800378a:	4b5c      	ldr	r3, [pc, #368]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a5b      	ldr	r2, [pc, #364]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
 8003796:	4b59      	ldr	r3, [pc, #356]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379a:	4a58      	ldr	r2, [pc, #352]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800379c:	f023 0304 	bic.w	r3, r3, #4
 80037a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d015      	beq.n	80037d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fe fe07 	bl	80023bc <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fe fe03 	bl	80023bc <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e0d8      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	4b4c      	ldr	r3, [pc, #304]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ee      	beq.n	80037b2 <HAL_RCC_OscConfig+0x386>
 80037d4:	e014      	b.n	8003800 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fe fdf1 	bl	80023bc <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fded 	bl	80023bc <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0c2      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f4:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ee      	bne.n	80037de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4b3d      	ldr	r3, [pc, #244]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	4a3c      	ldr	r2, [pc, #240]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800380c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003810:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80ae 	beq.w	8003978 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800381c:	4b37      	ldr	r3, [pc, #220]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	d06d      	beq.n	8003904 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d14b      	bne.n	80038c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003830:	4b32      	ldr	r3, [pc, #200]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a31      	ldr	r2, [pc, #196]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fdbe 	bl	80023bc <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fdba 	bl	80023bc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e091      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	019b      	lsls	r3, r3, #6
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	3b01      	subs	r3, #1
 800387c:	041b      	lsls	r3, r3, #16
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	071b      	lsls	r3, r3, #28
 800388e:	491b      	ldr	r1, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003894:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a18      	ldr	r2, [pc, #96]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800389e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fd8c 	bl	80023bc <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe fd88 	bl	80023bc <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e05f      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b10      	ldr	r3, [pc, #64]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x47c>
 80038c6:	e057      	b.n	8003978 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c8:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0b      	ldr	r2, [pc, #44]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80038ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fd72 	bl	80023bc <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fd6e 	bl	80023bc <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e045      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x4b0>
 80038fa:	e03d      	b.n	8003978 <HAL_RCC_OscConfig+0x54c>
 80038fc:	40023800 	.word	0x40023800
 8003900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003904:	4b1f      	ldr	r3, [pc, #124]	@ (8003984 <HAL_RCC_OscConfig+0x558>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d030      	beq.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d129      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d122      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800393a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800393c:	4293      	cmp	r3, r2
 800393e:	d119      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d10f      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0d0      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d910      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b67      	ldr	r3, [pc, #412]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 020f 	bic.w	r2, r3, #15
 80039b6:	4965      	ldr	r1, [pc, #404]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b63      	ldr	r3, [pc, #396]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0b8      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e8:	4b59      	ldr	r3, [pc, #356]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a58      	ldr	r2, [pc, #352]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 80039ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a00:	4b53      	ldr	r3, [pc, #332]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a52      	ldr	r2, [pc, #328]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b50      	ldr	r3, [pc, #320]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	494d      	ldr	r1, [pc, #308]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d040      	beq.n	8003aac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b47      	ldr	r3, [pc, #284]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d115      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e07f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b41      	ldr	r3, [pc, #260]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e073      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06b      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b39      	ldr	r3, [pc, #228]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4936      	ldr	r1, [pc, #216]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7c:	f7fe fc9e 	bl	80023bc <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fe fc9a 	bl	80023bc <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e053      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b27      	ldr	r3, [pc, #156]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d210      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 020f 	bic.w	r2, r3, #15
 8003ac2:	4922      	ldr	r1, [pc, #136]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e032      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b19      	ldr	r3, [pc, #100]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4916      	ldr	r1, [pc, #88]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b06:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490e      	ldr	r1, [pc, #56]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b1a:	f000 f821 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	490a      	ldr	r1, [pc, #40]	@ (8003b54 <HAL_RCC_ClockConfig+0x1cc>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <HAL_RCC_ClockConfig+0x1d0>)
 8003b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b36:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <HAL_RCC_ClockConfig+0x1d4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fbfa 	bl	8002334 <HAL_InitTick>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023c00 	.word	0x40023c00
 8003b50:	40023800 	.word	0x40023800
 8003b54:	0800b0e0 	.word	0x0800b0e0
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	20000004 	.word	0x20000004

08003b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b64:	b094      	sub	sp, #80	@ 0x50
 8003b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b70:	2300      	movs	r3, #0
 8003b72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b78:	4b79      	ldr	r3, [pc, #484]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d00d      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	f200 80e1 	bhi.w	8003d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x34>
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d003      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b92:	e0db      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b73      	ldr	r3, [pc, #460]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b98:	e0db      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b9a:	4b73      	ldr	r3, [pc, #460]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b9e:	e0d8      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003baa:	4b6d      	ldr	r3, [pc, #436]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d063      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bca:	2300      	movs	r3, #0
 8003bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	f04f 0000 	mov.w	r0, #0
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	0159      	lsls	r1, r3, #5
 8003be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003be4:	0150      	lsls	r0, r2, #5
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4621      	mov	r1, r4
 8003bec:	1a51      	subs	r1, r2, r1
 8003bee:	6139      	str	r1, [r7, #16]
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c04:	4659      	mov	r1, fp
 8003c06:	018b      	lsls	r3, r1, #6
 8003c08:	4651      	mov	r1, sl
 8003c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c0e:	4651      	mov	r1, sl
 8003c10:	018a      	lsls	r2, r1, #6
 8003c12:	4651      	mov	r1, sl
 8003c14:	ebb2 0801 	subs.w	r8, r2, r1
 8003c18:	4659      	mov	r1, fp
 8003c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c32:	4690      	mov	r8, r2
 8003c34:	4699      	mov	r9, r3
 8003c36:	4623      	mov	r3, r4
 8003c38:	eb18 0303 	adds.w	r3, r8, r3
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	462b      	mov	r3, r5
 8003c40:	eb49 0303 	adc.w	r3, r9, r3
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c52:	4629      	mov	r1, r5
 8003c54:	024b      	lsls	r3, r1, #9
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	024a      	lsls	r2, r1, #9
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c66:	2200      	movs	r2, #0
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c70:	f7fc fb4e 	bl	8000310 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c7c:	e058      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7e:	4b38      	ldr	r3, [pc, #224]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	099b      	lsrs	r3, r3, #6
 8003c84:	2200      	movs	r2, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	4611      	mov	r1, r2
 8003c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c98:	4642      	mov	r2, r8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	f04f 0000 	mov.w	r0, #0
 8003ca0:	f04f 0100 	mov.w	r1, #0
 8003ca4:	0159      	lsls	r1, r3, #5
 8003ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003caa:	0150      	lsls	r0, r2, #5
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8003cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	00eb      	lsls	r3, r5, #3
 8003ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce6:	00e2      	lsls	r2, r4, #3
 8003ce8:	4614      	mov	r4, r2
 8003cea:	461d      	mov	r5, r3
 8003cec:	4643      	mov	r3, r8
 8003cee:	18e3      	adds	r3, r4, r3
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	eb45 0303 	adc.w	r3, r5, r3
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d06:	4629      	mov	r1, r5
 8003d08:	028b      	lsls	r3, r1, #10
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d10:	4621      	mov	r1, r4
 8003d12:	028a      	lsls	r2, r1, #10
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	61fa      	str	r2, [r7, #28]
 8003d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d24:	f7fc faf4 	bl	8000310 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d30:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3750      	adds	r7, #80	@ 0x50
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800
 8003d64:	00f42400 	.word	0x00f42400
 8003d68:	007a1200 	.word	0x007a1200

08003d6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d70:	4b03      	ldr	r3, [pc, #12]	@ (8003d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000000 	.word	0x20000000

08003d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d88:	f7ff fff0 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0a9b      	lsrs	r3, r3, #10
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4903      	ldr	r1, [pc, #12]	@ (8003da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40023800 	.word	0x40023800
 8003da8:	0800b0f0 	.word	0x0800b0f0

08003dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db0:	f7ff ffdc 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0b5b      	lsrs	r3, r3, #13
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	@ (8003dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	0800b0f0 	.word	0x0800b0f0

08003dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d012      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dfc:	4b69      	ldr	r3, [pc, #420]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4a68      	ldr	r2, [pc, #416]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e06:	6093      	str	r3, [r2, #8]
 8003e08:	4b66      	ldr	r3, [pc, #408]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e10:	4964      	ldr	r1, [pc, #400]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d017      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e34:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3c:	4959      	ldr	r1, [pc, #356]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d017      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	494a      	ldr	r1, [pc, #296]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e88:	d101      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 808b 	beq.w	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	4a39      	ldr	r2, [pc, #228]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec4:	4b37      	ldr	r3, [pc, #220]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ed0:	4b35      	ldr	r3, [pc, #212]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a34      	ldr	r2, [pc, #208]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fe fa6e 	bl	80023bc <HAL_GetTick>
 8003ee0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee4:	f7fe fa6a 	bl	80023bc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	@ 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e38f      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f02:	4b28      	ldr	r3, [pc, #160]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d035      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d02e      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f20:	4b20      	ldr	r3, [pc, #128]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f34:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f36:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f40:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f42:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f48:	4b16      	ldr	r3, [pc, #88]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d114      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fe fa32 	bl	80023bc <HAL_GetTick>
 8003f58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7fe fa2e 	bl	80023bc <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e351      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ee      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f8a:	d111      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f8c:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f9a:	400b      	ands	r3, r1
 8003f9c:	4901      	ldr	r1, [pc, #4]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	0ffffcff 	.word	0x0ffffcff
 8003fb0:	4bac      	ldr	r3, [pc, #688]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4aab      	ldr	r2, [pc, #684]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003fba:	6093      	str	r3, [r2, #8]
 8003fbc:	4ba9      	ldr	r3, [pc, #676]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	49a6      	ldr	r1, [pc, #664]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d010      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fda:	4ba2      	ldr	r3, [pc, #648]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe0:	4aa0      	ldr	r2, [pc, #640]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fe6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003fea:	4b9e      	ldr	r3, [pc, #632]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff4:	499b      	ldr	r1, [pc, #620]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004008:	4b96      	ldr	r3, [pc, #600]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004016:	4993      	ldr	r1, [pc, #588]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800402a:	4b8e      	ldr	r3, [pc, #568]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004030:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004038:	498a      	ldr	r1, [pc, #552]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800404c:	4b85      	ldr	r3, [pc, #532]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800405a:	4982      	ldr	r1, [pc, #520]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800406e:	4b7d      	ldr	r3, [pc, #500]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004074:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407c:	4979      	ldr	r1, [pc, #484]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004090:	4b74      	ldr	r3, [pc, #464]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	4971      	ldr	r1, [pc, #452]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b8:	f023 020c 	bic.w	r2, r3, #12
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c0:	4968      	ldr	r1, [pc, #416]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040d4:	4b63      	ldr	r3, [pc, #396]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	4960      	ldr	r1, [pc, #384]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004104:	4957      	ldr	r1, [pc, #348]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004118:	4b52      	ldr	r3, [pc, #328]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	494f      	ldr	r1, [pc, #316]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800413a:	4b4a      	ldr	r3, [pc, #296]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004140:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004148:	4946      	ldr	r1, [pc, #280]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800415c:	4b41      	ldr	r3, [pc, #260]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416a:	493e      	ldr	r1, [pc, #248]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800417e:	4b39      	ldr	r3, [pc, #228]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004184:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418c:	4935      	ldr	r1, [pc, #212]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041a0:	4b30      	ldr	r3, [pc, #192]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ae:	492d      	ldr	r1, [pc, #180]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041c2:	4b28      	ldr	r3, [pc, #160]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041d0:	4924      	ldr	r1, [pc, #144]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041e0:	d101      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004202:	4b18      	ldr	r3, [pc, #96]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004208:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004210:	4914      	ldr	r1, [pc, #80]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004224:	4b0f      	ldr	r3, [pc, #60]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004234:	490b      	ldr	r1, [pc, #44]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00f      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004248:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004258:	4902      	ldr	r1, [pc, #8]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004260:	e002      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004274:	4b8a      	ldr	r3, [pc, #552]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004276:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800427a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004284:	4986      	ldr	r1, [pc, #536]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004298:	4b81      	ldr	r3, [pc, #516]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800429e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042a8:	497d      	ldr	r1, [pc, #500]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d006      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80d6 	beq.w	8004470 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042c4:	4b76      	ldr	r3, [pc, #472]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a75      	ldr	r2, [pc, #468]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7fe f874 	bl	80023bc <HAL_GetTick>
 80042d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042d8:	f7fe f870 	bl	80023bc <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	@ 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e195      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042ea:	4b6d      	ldr	r3, [pc, #436]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d021      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11d      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800430a:	4b65      	ldr	r3, [pc, #404]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004318:	4b61      	ldr	r3, [pc, #388]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800431e:	0e1b      	lsrs	r3, r3, #24
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	019a      	lsls	r2, r3, #6
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	061b      	lsls	r3, r3, #24
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	071b      	lsls	r3, r3, #28
 800433e:	4958      	ldr	r1, [pc, #352]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004364:	2b00      	cmp	r3, #0
 8004366:	d02e      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004370:	d129      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004372:	4b4b      	ldr	r3, [pc, #300]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004380:	4b47      	ldr	r3, [pc, #284]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004386:	0f1b      	lsrs	r3, r3, #28
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	019a      	lsls	r2, r3, #6
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	061b      	lsls	r3, r3, #24
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	071b      	lsls	r3, r3, #28
 80043a6:	493e      	ldr	r1, [pc, #248]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043ae:	4b3c      	ldr	r3, [pc, #240]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b4:	f023 021f 	bic.w	r2, r3, #31
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	3b01      	subs	r3, #1
 80043be:	4938      	ldr	r1, [pc, #224]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01d      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043d2:	4b33      	ldr	r3, [pc, #204]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043d8:	0e1b      	lsrs	r3, r3, #24
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043e0:	4b2f      	ldr	r3, [pc, #188]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e6:	0f1b      	lsrs	r3, r3, #28
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	019a      	lsls	r2, r3, #6
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	041b      	lsls	r3, r3, #16
 80043fa:	431a      	orrs	r2, r3
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	431a      	orrs	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	071b      	lsls	r3, r3, #28
 8004406:	4926      	ldr	r1, [pc, #152]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d011      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	019a      	lsls	r2, r3, #6
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	071b      	lsls	r3, r3, #28
 8004436:	491a      	ldr	r1, [pc, #104]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800443e:	4b18      	ldr	r3, [pc, #96]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a17      	ldr	r2, [pc, #92]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004444:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444a:	f7fd ffb7 	bl	80023bc <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004452:	f7fd ffb3 	bl	80023bc <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b64      	cmp	r3, #100	@ 0x64
 800445e:	d901      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e0d8      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004464:	4b0e      	ldr	r3, [pc, #56]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b01      	cmp	r3, #1
 8004474:	f040 80ce 	bne.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004478:	4b09      	ldr	r3, [pc, #36]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a08      	ldr	r2, [pc, #32]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800447e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004484:	f7fd ff9a 	bl	80023bc <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800448a:	e00b      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800448c:	f7fd ff96 	bl	80023bc <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	@ 0x64
 8004498:	d904      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e0bb      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044b0:	d0ec      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d02e      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d12a      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044da:	4b51      	ldr	r3, [pc, #324]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044e8:	4b4d      	ldr	r3, [pc, #308]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	0f1b      	lsrs	r3, r3, #28
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	019a      	lsls	r2, r3, #6
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	061b      	lsls	r3, r3, #24
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	071b      	lsls	r3, r3, #28
 800450e:	4944      	ldr	r1, [pc, #272]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004516:	4b42      	ldr	r3, [pc, #264]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800451c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	493d      	ldr	r1, [pc, #244]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d022      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004544:	d11d      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004546:	4b36      	ldr	r3, [pc, #216]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454c:	0e1b      	lsrs	r3, r3, #24
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004554:	4b32      	ldr	r3, [pc, #200]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455a:	0f1b      	lsrs	r3, r3, #28
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	019a      	lsls	r2, r3, #6
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	431a      	orrs	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	071b      	lsls	r3, r3, #28
 800457a:	4929      	ldr	r1, [pc, #164]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d028      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800458e:	4b24      	ldr	r3, [pc, #144]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004594:	0e1b      	lsrs	r3, r3, #24
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800459c:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	019a      	lsls	r2, r3, #6
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	431a      	orrs	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	071b      	lsls	r3, r3, #28
 80045c2:	4917      	ldr	r1, [pc, #92]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045ca:	4b15      	ldr	r3, [pc, #84]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	4911      	ldr	r1, [pc, #68]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ec:	f7fd fee6 	bl	80023bc <HAL_GetTick>
 80045f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045f4:	f7fd fee2 	bl	80023bc <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	@ 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e007      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004606:	4b06      	ldr	r3, [pc, #24]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800460e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004612:	d1ef      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800

08004624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e049      	b.n	80046ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd fb58 	bl	8001d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f000 fecc 	bl	8005400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e054      	b.n	8004796 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a26      	ldr	r2, [pc, #152]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004716:	d01d      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a22      	ldr	r2, [pc, #136]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a21      	ldr	r2, [pc, #132]	@ (80047ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1f      	ldr	r2, [pc, #124]	@ (80047b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1e      	ldr	r2, [pc, #120]	@ (80047b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <HAL_TIM_Base_Start_IT+0xe8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d115      	bne.n	8004780 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	4b19      	ldr	r3, [pc, #100]	@ (80047c0 <HAL_TIM_Base_Start_IT+0xec>)
 800475c:	4013      	ands	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b06      	cmp	r3, #6
 8004764:	d015      	beq.n	8004792 <HAL_TIM_Base_Start_IT+0xbe>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476c:	d011      	beq.n	8004792 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477e:	e008      	b.n	8004792 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e000      	b.n	8004794 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004792:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40000c00 	.word	0x40000c00
 80047b4:	40010400 	.word	0x40010400
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40001800 	.word	0x40001800
 80047c0:	00010007 	.word	0x00010007

080047c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a1a      	ldr	r2, [r3, #32]
 80047e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10f      	bne.n	800480c <HAL_TIM_Base_Stop_IT+0x48>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a1a      	ldr	r2, [r3, #32]
 80047f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d107      	bne.n	800480c <HAL_TIM_Base_Stop_IT+0x48>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e049      	b.n	80048c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fd f9fd 	bl	8001c48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 fdcd 	bl	8005400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d109      	bne.n	80048f4 <HAL_TIM_PWM_Start+0x24>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	e03c      	b.n	800496e <HAL_TIM_PWM_Start+0x9e>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d109      	bne.n	800490e <HAL_TIM_PWM_Start+0x3e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	bf14      	ite	ne
 8004906:	2301      	movne	r3, #1
 8004908:	2300      	moveq	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	e02f      	b.n	800496e <HAL_TIM_PWM_Start+0x9e>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d109      	bne.n	8004928 <HAL_TIM_PWM_Start+0x58>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e022      	b.n	800496e <HAL_TIM_PWM_Start+0x9e>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b0c      	cmp	r3, #12
 800492c:	d109      	bne.n	8004942 <HAL_TIM_PWM_Start+0x72>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b01      	cmp	r3, #1
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	e015      	b.n	800496e <HAL_TIM_PWM_Start+0x9e>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b10      	cmp	r3, #16
 8004946:	d109      	bne.n	800495c <HAL_TIM_PWM_Start+0x8c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e008      	b.n	800496e <HAL_TIM_PWM_Start+0x9e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e092      	b.n	8004a9c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d104      	bne.n	8004986 <HAL_TIM_PWM_Start+0xb6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004984:	e023      	b.n	80049ce <HAL_TIM_PWM_Start+0xfe>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b04      	cmp	r3, #4
 800498a:	d104      	bne.n	8004996 <HAL_TIM_PWM_Start+0xc6>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004994:	e01b      	b.n	80049ce <HAL_TIM_PWM_Start+0xfe>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_PWM_Start+0xd6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049a4:	e013      	b.n	80049ce <HAL_TIM_PWM_Start+0xfe>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_PWM_Start+0xe6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049b4:	e00b      	b.n	80049ce <HAL_TIM_PWM_Start+0xfe>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Start+0xf6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049c4:	e003      	b.n	80049ce <HAL_TIM_PWM_Start+0xfe>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2201      	movs	r2, #1
 80049d4:	6839      	ldr	r1, [r7, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 f81c 	bl	8005a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a30      	ldr	r2, [pc, #192]	@ (8004aa4 <HAL_TIM_PWM_Start+0x1d4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIM_PWM_Start+0x120>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa8 <HAL_TIM_PWM_Start+0x1d8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <HAL_TIM_PWM_Start+0x124>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_TIM_PWM_Start+0x126>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a25      	ldr	r2, [pc, #148]	@ (8004aa4 <HAL_TIM_PWM_Start+0x1d4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d022      	beq.n	8004a5a <HAL_TIM_PWM_Start+0x18a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1c:	d01d      	beq.n	8004a5a <HAL_TIM_PWM_Start+0x18a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a22      	ldr	r2, [pc, #136]	@ (8004aac <HAL_TIM_PWM_Start+0x1dc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d018      	beq.n	8004a5a <HAL_TIM_PWM_Start+0x18a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a20      	ldr	r2, [pc, #128]	@ (8004ab0 <HAL_TIM_PWM_Start+0x1e0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_TIM_PWM_Start+0x18a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab4 <HAL_TIM_PWM_Start+0x1e4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <HAL_TIM_PWM_Start+0x18a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a19      	ldr	r2, [pc, #100]	@ (8004aa8 <HAL_TIM_PWM_Start+0x1d8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_TIM_PWM_Start+0x18a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab8 <HAL_TIM_PWM_Start+0x1e8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_TIM_PWM_Start+0x18a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a19      	ldr	r2, [pc, #100]	@ (8004abc <HAL_TIM_PWM_Start+0x1ec>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d115      	bne.n	8004a86 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <HAL_TIM_PWM_Start+0x1f0>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b06      	cmp	r3, #6
 8004a6a:	d015      	beq.n	8004a98 <HAL_TIM_PWM_Start+0x1c8>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a72:	d011      	beq.n	8004a98 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a84:	e008      	b.n	8004a98 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e000      	b.n	8004a9a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40010400 	.word	0x40010400
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	00010007 	.word	0x00010007

08004ac4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	6839      	ldr	r1, [r7, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 ff9c 	bl	8005a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a36      	ldr	r2, [pc, #216]	@ (8004bbc <HAL_TIM_PWM_Stop+0xf8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <HAL_TIM_PWM_Stop+0x2c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a35      	ldr	r2, [pc, #212]	@ (8004bc0 <HAL_TIM_PWM_Stop+0xfc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d101      	bne.n	8004af4 <HAL_TIM_PWM_Stop+0x30>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_TIM_PWM_Stop+0x32>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d017      	beq.n	8004b2a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10f      	bne.n	8004b2a <HAL_TIM_PWM_Stop+0x66>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_PWM_Stop+0x66>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6a1a      	ldr	r2, [r3, #32]
 8004b30:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10f      	bne.n	8004b5a <HAL_TIM_PWM_Stop+0x96>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6a1a      	ldr	r2, [r3, #32]
 8004b40:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d107      	bne.n	8004b5a <HAL_TIM_PWM_Stop+0x96>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_PWM_Stop+0xa6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b68:	e023      	b.n	8004bb2 <HAL_TIM_PWM_Stop+0xee>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_PWM_Stop+0xb6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b78:	e01b      	b.n	8004bb2 <HAL_TIM_PWM_Stop+0xee>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Stop+0xc6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b88:	e013      	b.n	8004bb2 <HAL_TIM_PWM_Stop+0xee>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Stop+0xd6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b98:	e00b      	b.n	8004bb2 <HAL_TIM_PWM_Stop+0xee>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Stop+0xe6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba8:	e003      	b.n	8004bb2 <HAL_TIM_PWM_Stop+0xee>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40010400 	.word	0x40010400

08004bc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e08f      	b.n	8004cf8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7fc fee1 	bl	80019b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6899      	ldr	r1, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b3e      	ldr	r3, [pc, #248]	@ (8004d00 <HAL_TIM_Encoder_Init+0x13c>)
 8004c06:	400b      	ands	r3, r1
 8004c08:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4619      	mov	r1, r3
 8004c14:	4610      	mov	r0, r2
 8004c16:	f000 fbf3 	bl	8005400 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4b31      	ldr	r3, [pc, #196]	@ (8004d04 <HAL_TIM_Encoder_Init+0x140>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4b2b      	ldr	r3, [pc, #172]	@ (8004d08 <HAL_TIM_Encoder_Init+0x144>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4b2a      	ldr	r3, [pc, #168]	@ (8004d0c <HAL_TIM_Encoder_Init+0x148>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	4313      	orrs	r3, r2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	011a      	lsls	r2, r3, #4
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	031b      	lsls	r3, r3, #12
 8004c84:	4313      	orrs	r3, r2
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	fffebff8 	.word	0xfffebff8
 8004d04:	fffffcfc 	.word	0xfffffcfc
 8004d08:	fffff3f3 	.word	0xfffff3f3
 8004d0c:	ffff0f0f 	.word	0xffff0f0f

08004d10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d110      	bne.n	8004d62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d102      	bne.n	8004d4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d46:	7b7b      	ldrb	r3, [r7, #13]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d001      	beq.n	8004d50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e069      	b.n	8004e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d60:	e031      	b.n	8004dc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d110      	bne.n	8004d8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d102      	bne.n	8004d74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d6e:	7b3b      	ldrb	r3, [r7, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d001      	beq.n	8004d78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e055      	b.n	8004e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d88:	e01d      	b.n	8004dc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d108      	bne.n	8004da2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d90:	7bbb      	ldrb	r3, [r7, #14]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d105      	bne.n	8004da2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d96:	7b7b      	ldrb	r3, [r7, #13]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d102      	bne.n	8004da2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d9c:	7b3b      	ldrb	r3, [r7, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e03e      	b.n	8004e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_TIM_Encoder_Start+0xc4>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d008      	beq.n	8004de4 <HAL_TIM_Encoder_Start+0xd4>
 8004dd2:	e00f      	b.n	8004df4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fe19 	bl	8005a14 <TIM_CCxChannelCmd>
      break;
 8004de2:	e016      	b.n	8004e12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2201      	movs	r2, #1
 8004dea:	2104      	movs	r1, #4
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fe11 	bl	8005a14 <TIM_CCxChannelCmd>
      break;
 8004df2:	e00e      	b.n	8004e12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fe09 	bl	8005a14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2201      	movs	r2, #1
 8004e08:	2104      	movs	r1, #4
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fe02 	bl	8005a14 <TIM_CCxChannelCmd>
      break;
 8004e10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_TIM_Encoder_Stop+0x18>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d008      	beq.n	8004e54 <HAL_TIM_Encoder_Stop+0x28>
 8004e42:	e00f      	b.n	8004e64 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fde1 	bl	8005a14 <TIM_CCxChannelCmd>
      break;
 8004e52:	e016      	b.n	8004e82 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2104      	movs	r1, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fdd9 	bl	8005a14 <TIM_CCxChannelCmd>
      break;
 8004e62:	e00e      	b.n	8004e82 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fdd1 	bl	8005a14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	2104      	movs	r1, #4
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fdca 	bl	8005a14 <TIM_CCxChannelCmd>
      break;
 8004e80:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a1a      	ldr	r2, [r3, #32]
 8004e88:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <HAL_TIM_Encoder_Stop+0x86>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a1a      	ldr	r2, [r3, #32]
 8004e98:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d107      	bne.n	8004eb2 <HAL_TIM_Encoder_Stop+0x86>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_TIM_Encoder_Stop+0x92>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d148      	bne.n	8004f50 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_Encoder_Stop+0xa2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ecc:	e023      	b.n	8004f16 <HAL_TIM_Encoder_Stop+0xea>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_Encoder_Stop+0xb2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004edc:	e01b      	b.n	8004f16 <HAL_TIM_Encoder_Stop+0xea>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_Encoder_Stop+0xc2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eec:	e013      	b.n	8004f16 <HAL_TIM_Encoder_Stop+0xea>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b0c      	cmp	r3, #12
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_Encoder_Stop+0xd2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004efc:	e00b      	b.n	8004f16 <HAL_TIM_Encoder_Stop+0xea>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d104      	bne.n	8004f0e <HAL_TIM_Encoder_Stop+0xe2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f0c:	e003      	b.n	8004f16 <HAL_TIM_Encoder_Stop+0xea>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_Encoder_Stop+0xfa>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f24:	e024      	b.n	8004f70 <HAL_TIM_Encoder_Stop+0x144>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_Encoder_Stop+0x10a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f34:	e01c      	b.n	8004f70 <HAL_TIM_Encoder_Stop+0x144>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_Encoder_Stop+0x11a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f44:	e014      	b.n	8004f70 <HAL_TIM_Encoder_Stop+0x144>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004f4e:	e00f      	b.n	8004f70 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d020      	beq.n	8004fde <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01b      	beq.n	8004fde <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f06f 0202 	mvn.w	r2, #2
 8004fae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f9fd 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 8004fca:	e005      	b.n	8004fd8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f9ef 	bl	80053b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa00 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d020      	beq.n	800502a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01b      	beq.n	800502a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f06f 0204 	mvn.w	r2, #4
 8004ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f9d7 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 8005016:	e005      	b.n	8005024 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f9c9 	bl	80053b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9da 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d020      	beq.n	8005076 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01b      	beq.n	8005076 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0208 	mvn.w	r2, #8
 8005046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2204      	movs	r2, #4
 800504c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f9b1 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 8005062:	e005      	b.n	8005070 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f9a3 	bl	80053b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f9b4 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01b      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f06f 0210 	mvn.w	r2, #16
 8005092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2208      	movs	r2, #8
 8005098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f98b 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 80050ae:	e005      	b.n	80050bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f97d 	bl	80053b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f98e 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00c      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f06f 0201 	mvn.w	r2, #1
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fb fd97 	bl	8000c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fd3e 	bl	8005b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fd36 	bl	8005ba4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f948 	bl	80053ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0220 	mvn.w	r2, #32
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fcfe 	bl	8005b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e0ff      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b14      	cmp	r3, #20
 80051b2:	f200 80f0 	bhi.w	8005396 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051b6:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	08005211 	.word	0x08005211
 80051c0:	08005397 	.word	0x08005397
 80051c4:	08005397 	.word	0x08005397
 80051c8:	08005397 	.word	0x08005397
 80051cc:	08005251 	.word	0x08005251
 80051d0:	08005397 	.word	0x08005397
 80051d4:	08005397 	.word	0x08005397
 80051d8:	08005397 	.word	0x08005397
 80051dc:	08005293 	.word	0x08005293
 80051e0:	08005397 	.word	0x08005397
 80051e4:	08005397 	.word	0x08005397
 80051e8:	08005397 	.word	0x08005397
 80051ec:	080052d3 	.word	0x080052d3
 80051f0:	08005397 	.word	0x08005397
 80051f4:	08005397 	.word	0x08005397
 80051f8:	08005397 	.word	0x08005397
 80051fc:	08005315 	.word	0x08005315
 8005200:	08005397 	.word	0x08005397
 8005204:	08005397 	.word	0x08005397
 8005208:	08005397 	.word	0x08005397
 800520c:	08005355 	.word	0x08005355
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f99e 	bl	8005558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0204 	bic.w	r2, r2, #4
 800523a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6999      	ldr	r1, [r3, #24]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	619a      	str	r2, [r3, #24]
      break;
 800524e:	e0a5      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f9f0 	bl	800563c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800526a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800527a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6999      	ldr	r1, [r3, #24]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	619a      	str	r2, [r3, #24]
      break;
 8005290:	e084      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fa47 	bl	800572c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0208 	orr.w	r2, r2, #8
 80052ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0204 	bic.w	r2, r2, #4
 80052bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69d9      	ldr	r1, [r3, #28]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	61da      	str	r2, [r3, #28]
      break;
 80052d0:	e064      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fa9d 	bl	8005818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69da      	ldr	r2, [r3, #28]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69d9      	ldr	r1, [r3, #28]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	021a      	lsls	r2, r3, #8
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	61da      	str	r2, [r3, #28]
      break;
 8005312:	e043      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fad4 	bl	80058c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0208 	orr.w	r2, r2, #8
 800532e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0204 	bic.w	r2, r2, #4
 800533e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005352:	e023      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fb06 	bl	800596c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800536e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800537e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	021a      	lsls	r2, r3, #8
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005394:	e002      	b.n	800539c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
      break;
 800539a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop

080053b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a46      	ldr	r2, [pc, #280]	@ (800552c <TIM_Base_SetConfig+0x12c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541e:	d00f      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a43      	ldr	r2, [pc, #268]	@ (8005530 <TIM_Base_SetConfig+0x130>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a42      	ldr	r2, [pc, #264]	@ (8005534 <TIM_Base_SetConfig+0x134>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a41      	ldr	r2, [pc, #260]	@ (8005538 <TIM_Base_SetConfig+0x138>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a40      	ldr	r2, [pc, #256]	@ (800553c <TIM_Base_SetConfig+0x13c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a35      	ldr	r2, [pc, #212]	@ (800552c <TIM_Base_SetConfig+0x12c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d02b      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005460:	d027      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a32      	ldr	r2, [pc, #200]	@ (8005530 <TIM_Base_SetConfig+0x130>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d023      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a31      	ldr	r2, [pc, #196]	@ (8005534 <TIM_Base_SetConfig+0x134>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01f      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a30      	ldr	r2, [pc, #192]	@ (8005538 <TIM_Base_SetConfig+0x138>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01b      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2f      	ldr	r2, [pc, #188]	@ (800553c <TIM_Base_SetConfig+0x13c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d017      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2e      	ldr	r2, [pc, #184]	@ (8005540 <TIM_Base_SetConfig+0x140>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2d      	ldr	r2, [pc, #180]	@ (8005544 <TIM_Base_SetConfig+0x144>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00f      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a2c      	ldr	r2, [pc, #176]	@ (8005548 <TIM_Base_SetConfig+0x148>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00b      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2b      	ldr	r2, [pc, #172]	@ (800554c <TIM_Base_SetConfig+0x14c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005550 <TIM_Base_SetConfig+0x150>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d003      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a29      	ldr	r2, [pc, #164]	@ (8005554 <TIM_Base_SetConfig+0x154>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d108      	bne.n	80054c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a10      	ldr	r2, [pc, #64]	@ (800552c <TIM_Base_SetConfig+0x12c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_Base_SetConfig+0xf8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a12      	ldr	r2, [pc, #72]	@ (800553c <TIM_Base_SetConfig+0x13c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d103      	bne.n	8005500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d105      	bne.n	800551e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f023 0201 	bic.w	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	611a      	str	r2, [r3, #16]
  }
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40010400 	.word	0x40010400
 8005540:	40014000 	.word	0x40014000
 8005544:	40014400 	.word	0x40014400
 8005548:	40014800 	.word	0x40014800
 800554c:	40001800 	.word	0x40001800
 8005550:	40001c00 	.word	0x40001c00
 8005554:	40002000 	.word	0x40002000

08005558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f023 0201 	bic.w	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4b2b      	ldr	r3, [pc, #172]	@ (8005630 <TIM_OC1_SetConfig+0xd8>)
 8005584:	4013      	ands	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0302 	bic.w	r3, r3, #2
 80055a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a21      	ldr	r2, [pc, #132]	@ (8005634 <TIM_OC1_SetConfig+0xdc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_OC1_SetConfig+0x64>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a20      	ldr	r2, [pc, #128]	@ (8005638 <TIM_OC1_SetConfig+0xe0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10c      	bne.n	80055d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0308 	bic.w	r3, r3, #8
 80055c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 0304 	bic.w	r3, r3, #4
 80055d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a16      	ldr	r2, [pc, #88]	@ (8005634 <TIM_OC1_SetConfig+0xdc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_OC1_SetConfig+0x8e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a15      	ldr	r2, [pc, #84]	@ (8005638 <TIM_OC1_SetConfig+0xe0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d111      	bne.n	800560a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	fffeff8f 	.word	0xfffeff8f
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400

0800563c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f023 0210 	bic.w	r2, r3, #16
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4b2e      	ldr	r3, [pc, #184]	@ (8005720 <TIM_OC2_SetConfig+0xe4>)
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a23      	ldr	r2, [pc, #140]	@ (8005724 <TIM_OC2_SetConfig+0xe8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_OC2_SetConfig+0x68>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a22      	ldr	r2, [pc, #136]	@ (8005728 <TIM_OC2_SetConfig+0xec>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10d      	bne.n	80056c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a18      	ldr	r2, [pc, #96]	@ (8005724 <TIM_OC2_SetConfig+0xe8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC2_SetConfig+0x94>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a17      	ldr	r2, [pc, #92]	@ (8005728 <TIM_OC2_SetConfig+0xec>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d113      	bne.n	80056f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	feff8fff 	.word	0xfeff8fff
 8005724:	40010000 	.word	0x40010000
 8005728:	40010400 	.word	0x40010400

0800572c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4b2d      	ldr	r3, [pc, #180]	@ (800580c <TIM_OC3_SetConfig+0xe0>)
 8005758:	4013      	ands	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a22      	ldr	r2, [pc, #136]	@ (8005810 <TIM_OC3_SetConfig+0xe4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_OC3_SetConfig+0x66>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a21      	ldr	r2, [pc, #132]	@ (8005814 <TIM_OC3_SetConfig+0xe8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10d      	bne.n	80057ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a17      	ldr	r2, [pc, #92]	@ (8005810 <TIM_OC3_SetConfig+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_OC3_SetConfig+0x92>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a16      	ldr	r2, [pc, #88]	@ (8005814 <TIM_OC3_SetConfig+0xe8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d113      	bne.n	80057e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	621a      	str	r2, [r3, #32]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	fffeff8f 	.word	0xfffeff8f
 8005810:	40010000 	.word	0x40010000
 8005814:	40010400 	.word	0x40010400

08005818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4b1e      	ldr	r3, [pc, #120]	@ (80058bc <TIM_OC4_SetConfig+0xa4>)
 8005844:	4013      	ands	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800584e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	031b      	lsls	r3, r3, #12
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a13      	ldr	r2, [pc, #76]	@ (80058c0 <TIM_OC4_SetConfig+0xa8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC4_SetConfig+0x68>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a12      	ldr	r2, [pc, #72]	@ (80058c4 <TIM_OC4_SetConfig+0xac>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d109      	bne.n	8005894 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	feff8fff 	.word	0xfeff8fff
 80058c0:	40010000 	.word	0x40010000
 80058c4:	40010400 	.word	0x40010400

080058c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005960 <TIM_OC5_SetConfig+0x98>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005908:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	041b      	lsls	r3, r3, #16
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a12      	ldr	r2, [pc, #72]	@ (8005964 <TIM_OC5_SetConfig+0x9c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC5_SetConfig+0x5e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a11      	ldr	r2, [pc, #68]	@ (8005968 <TIM_OC5_SetConfig+0xa0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d109      	bne.n	800593a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800592c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	fffeff8f 	.word	0xfffeff8f
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400

0800596c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4b1c      	ldr	r3, [pc, #112]	@ (8005a08 <TIM_OC6_SetConfig+0x9c>)
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	051b      	lsls	r3, r3, #20
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a13      	ldr	r2, [pc, #76]	@ (8005a0c <TIM_OC6_SetConfig+0xa0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC6_SetConfig+0x60>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a12      	ldr	r2, [pc, #72]	@ (8005a10 <TIM_OC6_SetConfig+0xa4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d109      	bne.n	80059e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	029b      	lsls	r3, r3, #10
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	feff8fff 	.word	0xfeff8fff
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40010400 	.word	0x40010400

08005a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2201      	movs	r2, #1
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1a      	ldr	r2, [r3, #32]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	401a      	ands	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e06d      	b.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a30      	ldr	r2, [pc, #192]	@ (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d108      	bne.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a20      	ldr	r2, [pc, #128]	@ (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d022      	beq.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aea:	d01d      	beq.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d018      	beq.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1c      	ldr	r2, [pc, #112]	@ (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d013      	beq.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a1a      	ldr	r2, [pc, #104]	@ (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00e      	beq.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a15      	ldr	r2, [pc, #84]	@ (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d009      	beq.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a16      	ldr	r2, [pc, #88]	@ (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d004      	beq.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a15      	ldr	r2, [pc, #84]	@ (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10c      	bne.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40010400 	.word	0x40010400
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40001800 	.word	0x40001800

08005b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e040      	b.n	8005c4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fc f9b4 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2224      	movs	r2, #36	@ 0x24
 8005be4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fe6c 	bl	80068dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fc05 	bl	8006414 <UART_SetConfig>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e01b      	b.n	8005c4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 feeb 	bl	8006a20 <UART_CheckIdleState>
 8005c4a:	4603      	mov	r3, r0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	@ 0x28
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d177      	bne.n	8005d5c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_UART_Transmit+0x24>
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e070      	b.n	8005d5e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2221      	movs	r2, #33	@ 0x21
 8005c88:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c8a:	f7fc fb97 	bl	80023bc <HAL_GetTick>
 8005c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca8:	d108      	bne.n	8005cbc <HAL_UART_Transmit+0x68>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	e003      	b.n	8005cc4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cc4:	e02f      	b.n	8005d26 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 ff4d 	bl	8006b70 <UART_WaitOnFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e03b      	b.n	8005d5e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10b      	bne.n	8005d04 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cfa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	3302      	adds	r3, #2
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e007      	b.n	8005d14 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	781a      	ldrb	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	3301      	adds	r3, #1
 8005d12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1c9      	bne.n	8005cc6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2140      	movs	r1, #64	@ 0x40
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 ff17 	bl	8006b70 <UART_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e005      	b.n	8005d5e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2220      	movs	r2, #32
 8005d56:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b08a      	sub	sp, #40	@ 0x28
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	4613      	mov	r3, r2
 8005d72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d132      	bne.n	8005de4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_UART_Receive_IT+0x24>
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e02b      	b.n	8005de6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d018      	beq.n	8005dd4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	613b      	str	r3, [r7, #16]
   return(result);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	623b      	str	r3, [r7, #32]
 8005dc2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	69f9      	ldr	r1, [r7, #28]
 8005dc6:	6a3a      	ldr	r2, [r7, #32]
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e6      	bne.n	8005da2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 ff36 	bl	8006c4c <UART_Start_Receive_IT>
 8005de0:	4603      	mov	r3, r0
 8005de2:	e000      	b.n	8005de6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3728      	adds	r7, #40	@ 0x28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b0ba      	sub	sp, #232	@ 0xe8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e1e:	4013      	ands	r3, r2
 8005e20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d115      	bne.n	8005e58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00f      	beq.n	8005e58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d009      	beq.n	8005e58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 82ac 	beq.w	80063a6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
      }
      return;
 8005e56:	e2a6      	b.n	80063a6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8117 	beq.w	8006090 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005e72:	4b85      	ldr	r3, [pc, #532]	@ (8006088 <HAL_UART_IRQHandler+0x298>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 810a 	beq.w	8006090 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d011      	beq.n	8005eac <HAL_UART_IRQHandler+0xbc>
 8005e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ea2:	f043 0201 	orr.w	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d011      	beq.n	8005edc <HAL_UART_IRQHandler+0xec>
 8005eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00b      	beq.n	8005edc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed2:	f043 0204 	orr.w	r2, r3, #4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d011      	beq.n	8005f0c <HAL_UART_IRQHandler+0x11c>
 8005ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2204      	movs	r2, #4
 8005efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f02:	f043 0202 	orr.w	r2, r3, #2
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d017      	beq.n	8005f48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d105      	bne.n	8005f30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2208      	movs	r2, #8
 8005f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f3e:	f043 0208 	orr.w	r2, r3, #8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d012      	beq.n	8005f7a <HAL_UART_IRQHandler+0x18a>
 8005f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00c      	beq.n	8005f7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f70:	f043 0220 	orr.w	r2, r3, #32
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8212 	beq.w	80063aa <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00d      	beq.n	8005fae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b40      	cmp	r3, #64	@ 0x40
 8005fc4:	d005      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d04f      	beq.n	8006072 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 ff00 	bl	8006dd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe2:	2b40      	cmp	r3, #64	@ 0x40
 8005fe4:	d141      	bne.n	800606a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3308      	adds	r3, #8
 800600e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006012:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800601e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800602a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1d9      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006036:	2b00      	cmp	r3, #0
 8006038:	d013      	beq.n	8006062 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603e:	4a13      	ldr	r2, [pc, #76]	@ (800608c <HAL_UART_IRQHandler+0x29c>)
 8006040:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006046:	4618      	mov	r0, r3
 8006048:	f7fc fc18 	bl	800287c <HAL_DMA_Abort_IT>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d017      	beq.n	8006082 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800605c:	4610      	mov	r0, r2
 800605e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	e00f      	b.n	8006082 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9b6 	bl	80063d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	e00b      	b.n	8006082 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f9b2 	bl	80063d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e007      	b.n	8006082 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9ae 	bl	80063d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006080:	e193      	b.n	80063aa <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006082:	bf00      	nop
    return;
 8006084:	e191      	b.n	80063aa <HAL_UART_IRQHandler+0x5ba>
 8006086:	bf00      	nop
 8006088:	04000120 	.word	0x04000120
 800608c:	08006ea1 	.word	0x08006ea1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006094:	2b01      	cmp	r3, #1
 8006096:	f040 814c 	bne.w	8006332 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800609a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8145 	beq.w	8006332 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 813e 	beq.w	8006332 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2210      	movs	r2, #16
 80060bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c8:	2b40      	cmp	r3, #64	@ 0x40
 80060ca:	f040 80b6 	bne.w	800623a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8165 	beq.w	80063ae <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80060ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060ee:	429a      	cmp	r2, r3
 80060f0:	f080 815d 	bcs.w	80063ae <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006108:	f000 8086 	beq.w	8006218 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006120:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006136:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800613a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006142:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800614e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1da      	bne.n	800610c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3308      	adds	r3, #8
 800615c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006166:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3308      	adds	r3, #8
 8006176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800617a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800617e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006182:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800618c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e1      	bne.n	8006156 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e3      	bne.n	8006192 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061e8:	f023 0310 	bic.w	r3, r3, #16
 80061ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006200:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e4      	bne.n	80061d8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006212:	4618      	mov	r0, r3
 8006214:	f7fc fac2 	bl	800279c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800622a:	b29b      	uxth	r3, r3
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	b29b      	uxth	r3, r3
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f8d8 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006238:	e0b9      	b.n	80063ae <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006246:	b29b      	uxth	r3, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 80ab 	beq.w	80063b2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800625c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 80a6 	beq.w	80063b2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006276:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800627a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006288:	647b      	str	r3, [r7, #68]	@ 0x44
 800628a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800628e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e4      	bne.n	8006266 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	623b      	str	r3, [r7, #32]
   return(result);
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3308      	adds	r3, #8
 80062bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80062c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e3      	bne.n	800629c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f023 0310 	bic.w	r3, r3, #16
 80062fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	69b9      	ldr	r1, [r7, #24]
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	617b      	str	r3, [r7, #20]
   return(result);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e4      	bne.n	80062e8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f85c 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006330:	e03f      	b.n	80063b2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00e      	beq.n	800635c <HAL_UART_IRQHandler+0x56c>
 800633e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d008      	beq.n	800635c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f853 	bl	8006400 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800635a:	e02d      	b.n	80063b8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01c      	beq.n	80063b6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
    }
    return;
 8006384:	e017      	b.n	80063b6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d012      	beq.n	80063b8 <HAL_UART_IRQHandler+0x5c8>
 8006392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fd94 	bl	8006ecc <UART_EndTransmit_IT>
    return;
 80063a4:	e008      	b.n	80063b8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80063a6:	bf00      	nop
 80063a8:	e006      	b.n	80063b8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80063aa:	bf00      	nop
 80063ac:	e004      	b.n	80063b8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80063ae:	bf00      	nop
 80063b0:	e002      	b.n	80063b8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80063b2:	bf00      	nop
 80063b4:	e000      	b.n	80063b8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80063b6:	bf00      	nop
  }

}
 80063b8:	37e8      	adds	r7, #232	@ 0xe8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop

080063c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4ba6      	ldr	r3, [pc, #664]	@ (80066d8 <UART_SetConfig+0x2c4>)
 8006440:	4013      	ands	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	6979      	ldr	r1, [r7, #20]
 8006448:	430b      	orrs	r3, r1
 800644a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	430a      	orrs	r2, r1
 8006484:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a94      	ldr	r2, [pc, #592]	@ (80066dc <UART_SetConfig+0x2c8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d120      	bne.n	80064d2 <UART_SetConfig+0xbe>
 8006490:	4b93      	ldr	r3, [pc, #588]	@ (80066e0 <UART_SetConfig+0x2cc>)
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b03      	cmp	r3, #3
 800649c:	d816      	bhi.n	80064cc <UART_SetConfig+0xb8>
 800649e:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <UART_SetConfig+0x90>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064b5 	.word	0x080064b5
 80064a8:	080064c1 	.word	0x080064c1
 80064ac:	080064bb 	.word	0x080064bb
 80064b0:	080064c7 	.word	0x080064c7
 80064b4:	2301      	movs	r3, #1
 80064b6:	77fb      	strb	r3, [r7, #31]
 80064b8:	e150      	b.n	800675c <UART_SetConfig+0x348>
 80064ba:	2302      	movs	r3, #2
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e14d      	b.n	800675c <UART_SetConfig+0x348>
 80064c0:	2304      	movs	r3, #4
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e14a      	b.n	800675c <UART_SetConfig+0x348>
 80064c6:	2308      	movs	r3, #8
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e147      	b.n	800675c <UART_SetConfig+0x348>
 80064cc:	2310      	movs	r3, #16
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e144      	b.n	800675c <UART_SetConfig+0x348>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a83      	ldr	r2, [pc, #524]	@ (80066e4 <UART_SetConfig+0x2d0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d132      	bne.n	8006542 <UART_SetConfig+0x12e>
 80064dc:	4b80      	ldr	r3, [pc, #512]	@ (80066e0 <UART_SetConfig+0x2cc>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e2:	f003 030c 	and.w	r3, r3, #12
 80064e6:	2b0c      	cmp	r3, #12
 80064e8:	d828      	bhi.n	800653c <UART_SetConfig+0x128>
 80064ea:	a201      	add	r2, pc, #4	@ (adr r2, 80064f0 <UART_SetConfig+0xdc>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006525 	.word	0x08006525
 80064f4:	0800653d 	.word	0x0800653d
 80064f8:	0800653d 	.word	0x0800653d
 80064fc:	0800653d 	.word	0x0800653d
 8006500:	08006531 	.word	0x08006531
 8006504:	0800653d 	.word	0x0800653d
 8006508:	0800653d 	.word	0x0800653d
 800650c:	0800653d 	.word	0x0800653d
 8006510:	0800652b 	.word	0x0800652b
 8006514:	0800653d 	.word	0x0800653d
 8006518:	0800653d 	.word	0x0800653d
 800651c:	0800653d 	.word	0x0800653d
 8006520:	08006537 	.word	0x08006537
 8006524:	2300      	movs	r3, #0
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e118      	b.n	800675c <UART_SetConfig+0x348>
 800652a:	2302      	movs	r3, #2
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e115      	b.n	800675c <UART_SetConfig+0x348>
 8006530:	2304      	movs	r3, #4
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e112      	b.n	800675c <UART_SetConfig+0x348>
 8006536:	2308      	movs	r3, #8
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e10f      	b.n	800675c <UART_SetConfig+0x348>
 800653c:	2310      	movs	r3, #16
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e10c      	b.n	800675c <UART_SetConfig+0x348>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a68      	ldr	r2, [pc, #416]	@ (80066e8 <UART_SetConfig+0x2d4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d120      	bne.n	800658e <UART_SetConfig+0x17a>
 800654c:	4b64      	ldr	r3, [pc, #400]	@ (80066e0 <UART_SetConfig+0x2cc>)
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006552:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006556:	2b30      	cmp	r3, #48	@ 0x30
 8006558:	d013      	beq.n	8006582 <UART_SetConfig+0x16e>
 800655a:	2b30      	cmp	r3, #48	@ 0x30
 800655c:	d814      	bhi.n	8006588 <UART_SetConfig+0x174>
 800655e:	2b20      	cmp	r3, #32
 8006560:	d009      	beq.n	8006576 <UART_SetConfig+0x162>
 8006562:	2b20      	cmp	r3, #32
 8006564:	d810      	bhi.n	8006588 <UART_SetConfig+0x174>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <UART_SetConfig+0x15c>
 800656a:	2b10      	cmp	r3, #16
 800656c:	d006      	beq.n	800657c <UART_SetConfig+0x168>
 800656e:	e00b      	b.n	8006588 <UART_SetConfig+0x174>
 8006570:	2300      	movs	r3, #0
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e0f2      	b.n	800675c <UART_SetConfig+0x348>
 8006576:	2302      	movs	r3, #2
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e0ef      	b.n	800675c <UART_SetConfig+0x348>
 800657c:	2304      	movs	r3, #4
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e0ec      	b.n	800675c <UART_SetConfig+0x348>
 8006582:	2308      	movs	r3, #8
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e0e9      	b.n	800675c <UART_SetConfig+0x348>
 8006588:	2310      	movs	r3, #16
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e0e6      	b.n	800675c <UART_SetConfig+0x348>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a56      	ldr	r2, [pc, #344]	@ (80066ec <UART_SetConfig+0x2d8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d120      	bne.n	80065da <UART_SetConfig+0x1c6>
 8006598:	4b51      	ldr	r3, [pc, #324]	@ (80066e0 <UART_SetConfig+0x2cc>)
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80065a4:	d013      	beq.n	80065ce <UART_SetConfig+0x1ba>
 80065a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80065a8:	d814      	bhi.n	80065d4 <UART_SetConfig+0x1c0>
 80065aa:	2b80      	cmp	r3, #128	@ 0x80
 80065ac:	d009      	beq.n	80065c2 <UART_SetConfig+0x1ae>
 80065ae:	2b80      	cmp	r3, #128	@ 0x80
 80065b0:	d810      	bhi.n	80065d4 <UART_SetConfig+0x1c0>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <UART_SetConfig+0x1a8>
 80065b6:	2b40      	cmp	r3, #64	@ 0x40
 80065b8:	d006      	beq.n	80065c8 <UART_SetConfig+0x1b4>
 80065ba:	e00b      	b.n	80065d4 <UART_SetConfig+0x1c0>
 80065bc:	2300      	movs	r3, #0
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e0cc      	b.n	800675c <UART_SetConfig+0x348>
 80065c2:	2302      	movs	r3, #2
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e0c9      	b.n	800675c <UART_SetConfig+0x348>
 80065c8:	2304      	movs	r3, #4
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e0c6      	b.n	800675c <UART_SetConfig+0x348>
 80065ce:	2308      	movs	r3, #8
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e0c3      	b.n	800675c <UART_SetConfig+0x348>
 80065d4:	2310      	movs	r3, #16
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e0c0      	b.n	800675c <UART_SetConfig+0x348>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a44      	ldr	r2, [pc, #272]	@ (80066f0 <UART_SetConfig+0x2dc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d125      	bne.n	8006630 <UART_SetConfig+0x21c>
 80065e4:	4b3e      	ldr	r3, [pc, #248]	@ (80066e0 <UART_SetConfig+0x2cc>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f2:	d017      	beq.n	8006624 <UART_SetConfig+0x210>
 80065f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f8:	d817      	bhi.n	800662a <UART_SetConfig+0x216>
 80065fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065fe:	d00b      	beq.n	8006618 <UART_SetConfig+0x204>
 8006600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006604:	d811      	bhi.n	800662a <UART_SetConfig+0x216>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <UART_SetConfig+0x1fe>
 800660a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660e:	d006      	beq.n	800661e <UART_SetConfig+0x20a>
 8006610:	e00b      	b.n	800662a <UART_SetConfig+0x216>
 8006612:	2300      	movs	r3, #0
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e0a1      	b.n	800675c <UART_SetConfig+0x348>
 8006618:	2302      	movs	r3, #2
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e09e      	b.n	800675c <UART_SetConfig+0x348>
 800661e:	2304      	movs	r3, #4
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e09b      	b.n	800675c <UART_SetConfig+0x348>
 8006624:	2308      	movs	r3, #8
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e098      	b.n	800675c <UART_SetConfig+0x348>
 800662a:	2310      	movs	r3, #16
 800662c:	77fb      	strb	r3, [r7, #31]
 800662e:	e095      	b.n	800675c <UART_SetConfig+0x348>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a2f      	ldr	r2, [pc, #188]	@ (80066f4 <UART_SetConfig+0x2e0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d125      	bne.n	8006686 <UART_SetConfig+0x272>
 800663a:	4b29      	ldr	r3, [pc, #164]	@ (80066e0 <UART_SetConfig+0x2cc>)
 800663c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006640:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006648:	d017      	beq.n	800667a <UART_SetConfig+0x266>
 800664a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800664e:	d817      	bhi.n	8006680 <UART_SetConfig+0x26c>
 8006650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006654:	d00b      	beq.n	800666e <UART_SetConfig+0x25a>
 8006656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800665a:	d811      	bhi.n	8006680 <UART_SetConfig+0x26c>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <UART_SetConfig+0x254>
 8006660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006664:	d006      	beq.n	8006674 <UART_SetConfig+0x260>
 8006666:	e00b      	b.n	8006680 <UART_SetConfig+0x26c>
 8006668:	2301      	movs	r3, #1
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e076      	b.n	800675c <UART_SetConfig+0x348>
 800666e:	2302      	movs	r3, #2
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e073      	b.n	800675c <UART_SetConfig+0x348>
 8006674:	2304      	movs	r3, #4
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e070      	b.n	800675c <UART_SetConfig+0x348>
 800667a:	2308      	movs	r3, #8
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e06d      	b.n	800675c <UART_SetConfig+0x348>
 8006680:	2310      	movs	r3, #16
 8006682:	77fb      	strb	r3, [r7, #31]
 8006684:	e06a      	b.n	800675c <UART_SetConfig+0x348>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1b      	ldr	r2, [pc, #108]	@ (80066f8 <UART_SetConfig+0x2e4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d138      	bne.n	8006702 <UART_SetConfig+0x2ee>
 8006690:	4b13      	ldr	r3, [pc, #76]	@ (80066e0 <UART_SetConfig+0x2cc>)
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006696:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800669a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800669e:	d017      	beq.n	80066d0 <UART_SetConfig+0x2bc>
 80066a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066a4:	d82a      	bhi.n	80066fc <UART_SetConfig+0x2e8>
 80066a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066aa:	d00b      	beq.n	80066c4 <UART_SetConfig+0x2b0>
 80066ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b0:	d824      	bhi.n	80066fc <UART_SetConfig+0x2e8>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <UART_SetConfig+0x2aa>
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ba:	d006      	beq.n	80066ca <UART_SetConfig+0x2b6>
 80066bc:	e01e      	b.n	80066fc <UART_SetConfig+0x2e8>
 80066be:	2300      	movs	r3, #0
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e04b      	b.n	800675c <UART_SetConfig+0x348>
 80066c4:	2302      	movs	r3, #2
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e048      	b.n	800675c <UART_SetConfig+0x348>
 80066ca:	2304      	movs	r3, #4
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e045      	b.n	800675c <UART_SetConfig+0x348>
 80066d0:	2308      	movs	r3, #8
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e042      	b.n	800675c <UART_SetConfig+0x348>
 80066d6:	bf00      	nop
 80066d8:	efff69f3 	.word	0xefff69f3
 80066dc:	40011000 	.word	0x40011000
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40004400 	.word	0x40004400
 80066e8:	40004800 	.word	0x40004800
 80066ec:	40004c00 	.word	0x40004c00
 80066f0:	40005000 	.word	0x40005000
 80066f4:	40011400 	.word	0x40011400
 80066f8:	40007800 	.word	0x40007800
 80066fc:	2310      	movs	r3, #16
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e02c      	b.n	800675c <UART_SetConfig+0x348>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a72      	ldr	r2, [pc, #456]	@ (80068d0 <UART_SetConfig+0x4bc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d125      	bne.n	8006758 <UART_SetConfig+0x344>
 800670c:	4b71      	ldr	r3, [pc, #452]	@ (80068d4 <UART_SetConfig+0x4c0>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006712:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006716:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800671a:	d017      	beq.n	800674c <UART_SetConfig+0x338>
 800671c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006720:	d817      	bhi.n	8006752 <UART_SetConfig+0x33e>
 8006722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006726:	d00b      	beq.n	8006740 <UART_SetConfig+0x32c>
 8006728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800672c:	d811      	bhi.n	8006752 <UART_SetConfig+0x33e>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <UART_SetConfig+0x326>
 8006732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006736:	d006      	beq.n	8006746 <UART_SetConfig+0x332>
 8006738:	e00b      	b.n	8006752 <UART_SetConfig+0x33e>
 800673a:	2300      	movs	r3, #0
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e00d      	b.n	800675c <UART_SetConfig+0x348>
 8006740:	2302      	movs	r3, #2
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e00a      	b.n	800675c <UART_SetConfig+0x348>
 8006746:	2304      	movs	r3, #4
 8006748:	77fb      	strb	r3, [r7, #31]
 800674a:	e007      	b.n	800675c <UART_SetConfig+0x348>
 800674c:	2308      	movs	r3, #8
 800674e:	77fb      	strb	r3, [r7, #31]
 8006750:	e004      	b.n	800675c <UART_SetConfig+0x348>
 8006752:	2310      	movs	r3, #16
 8006754:	77fb      	strb	r3, [r7, #31]
 8006756:	e001      	b.n	800675c <UART_SetConfig+0x348>
 8006758:	2310      	movs	r3, #16
 800675a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006764:	d15b      	bne.n	800681e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006766:	7ffb      	ldrb	r3, [r7, #31]
 8006768:	2b08      	cmp	r3, #8
 800676a:	d828      	bhi.n	80067be <UART_SetConfig+0x3aa>
 800676c:	a201      	add	r2, pc, #4	@ (adr r2, 8006774 <UART_SetConfig+0x360>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	08006799 	.word	0x08006799
 8006778:	080067a1 	.word	0x080067a1
 800677c:	080067a9 	.word	0x080067a9
 8006780:	080067bf 	.word	0x080067bf
 8006784:	080067af 	.word	0x080067af
 8006788:	080067bf 	.word	0x080067bf
 800678c:	080067bf 	.word	0x080067bf
 8006790:	080067bf 	.word	0x080067bf
 8006794:	080067b7 	.word	0x080067b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006798:	f7fd faf4 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 800679c:	61b8      	str	r0, [r7, #24]
        break;
 800679e:	e013      	b.n	80067c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a0:	f7fd fb04 	bl	8003dac <HAL_RCC_GetPCLK2Freq>
 80067a4:	61b8      	str	r0, [r7, #24]
        break;
 80067a6:	e00f      	b.n	80067c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a8:	4b4b      	ldr	r3, [pc, #300]	@ (80068d8 <UART_SetConfig+0x4c4>)
 80067aa:	61bb      	str	r3, [r7, #24]
        break;
 80067ac:	e00c      	b.n	80067c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ae:	f7fd f9d7 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 80067b2:	61b8      	str	r0, [r7, #24]
        break;
 80067b4:	e008      	b.n	80067c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ba:	61bb      	str	r3, [r7, #24]
        break;
 80067bc:	e004      	b.n	80067c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	77bb      	strb	r3, [r7, #30]
        break;
 80067c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d074      	beq.n	80068b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	005a      	lsls	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	441a      	add	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b0f      	cmp	r3, #15
 80067e8:	d916      	bls.n	8006818 <UART_SetConfig+0x404>
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f0:	d212      	bcs.n	8006818 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f023 030f 	bic.w	r3, r3, #15
 80067fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	b29b      	uxth	r3, r3
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	b29a      	uxth	r2, r3
 8006808:	89fb      	ldrh	r3, [r7, #14]
 800680a:	4313      	orrs	r3, r2
 800680c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	89fa      	ldrh	r2, [r7, #14]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	e04f      	b.n	80068b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	77bb      	strb	r3, [r7, #30]
 800681c:	e04c      	b.n	80068b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800681e:	7ffb      	ldrb	r3, [r7, #31]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d828      	bhi.n	8006876 <UART_SetConfig+0x462>
 8006824:	a201      	add	r2, pc, #4	@ (adr r2, 800682c <UART_SetConfig+0x418>)
 8006826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682a:	bf00      	nop
 800682c:	08006851 	.word	0x08006851
 8006830:	08006859 	.word	0x08006859
 8006834:	08006861 	.word	0x08006861
 8006838:	08006877 	.word	0x08006877
 800683c:	08006867 	.word	0x08006867
 8006840:	08006877 	.word	0x08006877
 8006844:	08006877 	.word	0x08006877
 8006848:	08006877 	.word	0x08006877
 800684c:	0800686f 	.word	0x0800686f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006850:	f7fd fa98 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8006854:	61b8      	str	r0, [r7, #24]
        break;
 8006856:	e013      	b.n	8006880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006858:	f7fd faa8 	bl	8003dac <HAL_RCC_GetPCLK2Freq>
 800685c:	61b8      	str	r0, [r7, #24]
        break;
 800685e:	e00f      	b.n	8006880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006860:	4b1d      	ldr	r3, [pc, #116]	@ (80068d8 <UART_SetConfig+0x4c4>)
 8006862:	61bb      	str	r3, [r7, #24]
        break;
 8006864:	e00c      	b.n	8006880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006866:	f7fd f97b 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 800686a:	61b8      	str	r0, [r7, #24]
        break;
 800686c:	e008      	b.n	8006880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006872:	61bb      	str	r3, [r7, #24]
        break;
 8006874:	e004      	b.n	8006880 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	77bb      	strb	r3, [r7, #30]
        break;
 800687e:	bf00      	nop
    }

    if (pclk != 0U)
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d018      	beq.n	80068b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	085a      	lsrs	r2, r3, #1
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	441a      	add	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b0f      	cmp	r3, #15
 800689e:	d909      	bls.n	80068b4 <UART_SetConfig+0x4a0>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a6:	d205      	bcs.n	80068b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60da      	str	r2, [r3, #12]
 80068b2:	e001      	b.n	80068b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	40007c00 	.word	0x40007c00
 80068d4:	40023800 	.word	0x40023800
 80068d8:	00f42400 	.word	0x00f42400

080068dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00a      	beq.n	8006928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00a      	beq.n	800694a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00a      	beq.n	800698e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01a      	beq.n	80069f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069da:	d10a      	bne.n	80069f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
  }
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b098      	sub	sp, #96	@ 0x60
 8006a24:	af02      	add	r7, sp, #8
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a30:	f7fb fcc4 	bl	80023bc <HAL_GetTick>
 8006a34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d12e      	bne.n	8006aa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f88c 	bl	8006b70 <UART_WaitOnFlagUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d021      	beq.n	8006aa2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e6      	bne.n	8006a5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e062      	b.n	8006b68 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d149      	bne.n	8006b44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ab0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f856 	bl	8006b70 <UART_WaitOnFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d03c      	beq.n	8006b44 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e6      	bne.n	8006aca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0301 	bic.w	r3, r3, #1
 8006b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b1c:	61fa      	str	r2, [r7, #28]
 8006b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	69b9      	ldr	r1, [r7, #24]
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	617b      	str	r3, [r7, #20]
   return(result);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e5      	bne.n	8006afc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e011      	b.n	8006b68 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3758      	adds	r7, #88	@ 0x58
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b80:	e04f      	b.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d04b      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8a:	f7fb fc17 	bl	80023bc <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d302      	bcc.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e04e      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0304 	and.w	r3, r3, #4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d037      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b80      	cmp	r3, #128	@ 0x80
 8006bb6:	d034      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b40      	cmp	r3, #64	@ 0x40
 8006bbc:	d031      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d110      	bne.n	8006bee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f8ff 	bl	8006dd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e029      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bfc:	d111      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f8e5 	bl	8006dd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e00f      	b.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	bf0c      	ite	eq
 8006c32:	2301      	moveq	r3, #1
 8006c34:	2300      	movne	r3, #0
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d0a0      	beq.n	8006b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b097      	sub	sp, #92	@ 0x5c
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	4613      	mov	r3, r2
 8006c58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	88fa      	ldrh	r2, [r7, #6]
 8006c64:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7e:	d10e      	bne.n	8006c9e <UART_Start_Receive_IT+0x52>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d105      	bne.n	8006c94 <UART_Start_Receive_IT+0x48>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c92:	e02d      	b.n	8006cf0 <UART_Start_Receive_IT+0xa4>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	22ff      	movs	r2, #255	@ 0xff
 8006c98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c9c:	e028      	b.n	8006cf0 <UART_Start_Receive_IT+0xa4>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10d      	bne.n	8006cc2 <UART_Start_Receive_IT+0x76>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <UART_Start_Receive_IT+0x6c>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	22ff      	movs	r2, #255	@ 0xff
 8006cb2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cb6:	e01b      	b.n	8006cf0 <UART_Start_Receive_IT+0xa4>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	227f      	movs	r2, #127	@ 0x7f
 8006cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cc0:	e016      	b.n	8006cf0 <UART_Start_Receive_IT+0xa4>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cca:	d10d      	bne.n	8006ce8 <UART_Start_Receive_IT+0x9c>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <UART_Start_Receive_IT+0x92>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	227f      	movs	r2, #127	@ 0x7f
 8006cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cdc:	e008      	b.n	8006cf0 <UART_Start_Receive_IT+0xa4>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	223f      	movs	r2, #63	@ 0x3f
 8006ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ce6:	e003      	b.n	8006cf0 <UART_Start_Receive_IT+0xa4>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2222      	movs	r2, #34	@ 0x22
 8006cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3308      	adds	r3, #8
 8006d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d20:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006d22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e5      	bne.n	8006d00 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d3c:	d107      	bne.n	8006d4e <UART_Start_Receive_IT+0x102>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a21      	ldr	r2, [pc, #132]	@ (8006dd0 <UART_Start_Receive_IT+0x184>)
 8006d4a:	669a      	str	r2, [r3, #104]	@ 0x68
 8006d4c:	e002      	b.n	8006d54 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4a20      	ldr	r2, [pc, #128]	@ (8006dd4 <UART_Start_Receive_IT+0x188>)
 8006d52:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d019      	beq.n	8006d90 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d7c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e6      	bne.n	8006d5c <UART_Start_Receive_IT+0x110>
 8006d8e:	e018      	b.n	8006dc2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f043 0320 	orr.w	r3, r3, #32
 8006da4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dae:	623b      	str	r3, [r7, #32]
 8006db0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	69f9      	ldr	r1, [r7, #28]
 8006db4:	6a3a      	ldr	r2, [r7, #32]
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e6      	bne.n	8006d90 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	375c      	adds	r7, #92	@ 0x5c
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	080070c9 	.word	0x080070c9
 8006dd4:	08006f21 	.word	0x08006f21

08006dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b095      	sub	sp, #84	@ 0x54
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e5      	bne.n	8006e12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d118      	bne.n	8006e80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f023 0310 	bic.w	r3, r3, #16
 8006e62:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6979      	ldr	r1, [r7, #20]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e6      	bne.n	8006e4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e94:	bf00      	nop
 8006e96:	3754      	adds	r7, #84	@ 0x54
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff fa88 	bl	80063d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6979      	ldr	r1, [r7, #20]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	613b      	str	r3, [r7, #16]
   return(result);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e6      	bne.n	8006ed4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fa54 	bl	80063c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f18:	bf00      	nop
 8006f1a:	3720      	adds	r7, #32
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b09c      	sub	sp, #112	@ 0x70
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f38:	2b22      	cmp	r3, #34	@ 0x22
 8006f3a:	f040 80b9 	bne.w	80070b0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006f4c:	b2d9      	uxtb	r1, r3
 8006f4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f58:	400a      	ands	r2, r1
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f040 809c 	bne.w	80070c0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fa8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e6      	bne.n	8006f88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fcc:	f023 0301 	bic.w	r3, r3, #1
 8006fd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006fda:	647a      	str	r2, [r7, #68]	@ 0x44
 8006fdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e5      	bne.n	8006fba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d018      	beq.n	8007042 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	623b      	str	r3, [r7, #32]
   return(result);
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007024:	663b      	str	r3, [r7, #96]	@ 0x60
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800702e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007030:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e6      	bne.n	8007010 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007046:	2b01      	cmp	r3, #1
 8007048:	d12e      	bne.n	80070a8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	60fb      	str	r3, [r7, #12]
   return(result);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f023 0310 	bic.w	r3, r3, #16
 8007064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	69b9      	ldr	r1, [r7, #24]
 8007074:	69fa      	ldr	r2, [r7, #28]
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	617b      	str	r3, [r7, #20]
   return(result);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e6      	bne.n	8007050 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b10      	cmp	r3, #16
 800708e:	d103      	bne.n	8007098 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2210      	movs	r2, #16
 8007096:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff f9a1 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070a6:	e00b      	b.n	80070c0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7fa f855 	bl	8001158 <HAL_UART_RxCpltCallback>
}
 80070ae:	e007      	b.n	80070c0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0208 	orr.w	r2, r2, #8
 80070be:	619a      	str	r2, [r3, #24]
}
 80070c0:	bf00      	nop
 80070c2:	3770      	adds	r7, #112	@ 0x70
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b09c      	sub	sp, #112	@ 0x70
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e0:	2b22      	cmp	r3, #34	@ 0x22
 80070e2:	f040 80b9 	bne.w	8007258 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80070f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80070fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80070fe:	4013      	ands	r3, r2
 8007100:	b29a      	uxth	r2, r3
 8007102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007104:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710a:	1c9a      	adds	r2, r3, #2
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	f040 809c 	bne.w	8007268 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800713e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007144:	667b      	str	r3, [r7, #100]	@ 0x64
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800714e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007150:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007154:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800715c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e6      	bne.n	8007130 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	f023 0301 	bic.w	r3, r3, #1
 8007178:	663b      	str	r3, [r7, #96]	@ 0x60
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3308      	adds	r3, #8
 8007180:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007182:	643a      	str	r2, [r7, #64]	@ 0x40
 8007184:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007188:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e5      	bne.n	8007162 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d018      	beq.n	80071ea <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e6      	bne.n	80071b8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d12e      	bne.n	8007250 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	60bb      	str	r3, [r7, #8]
   return(result);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f023 0310 	bic.w	r3, r3, #16
 800720c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6979      	ldr	r1, [r7, #20]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	613b      	str	r3, [r7, #16]
   return(result);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e6      	bne.n	80071f8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	2b10      	cmp	r3, #16
 8007236:	d103      	bne.n	8007240 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2210      	movs	r2, #16
 800723e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff f8cd 	bl	80063e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800724e:	e00b      	b.n	8007268 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7f9 ff81 	bl	8001158 <HAL_UART_RxCpltCallback>
}
 8007256:	e007      	b.n	8007268 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0208 	orr.w	r2, r2, #8
 8007266:	619a      	str	r2, [r3, #24]
}
 8007268:	bf00      	nop
 800726a:	3770      	adds	r7, #112	@ 0x70
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007270:	b084      	sub	sp, #16
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	f107 001c 	add.w	r0, r7, #28
 800727e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007282:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007286:	2b01      	cmp	r3, #1
 8007288:	d121      	bne.n	80072ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	4b21      	ldr	r3, [pc, #132]	@ (8007320 <USB_CoreInit+0xb0>)
 800729c:	4013      	ands	r3, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d105      	bne.n	80072c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa92 	bl	80077ec <USB_CoreReset>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73fb      	strb	r3, [r7, #15]
 80072cc:	e010      	b.n	80072f0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa86 	bl	80077ec <USB_CoreReset>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80072f0:	7fbb      	ldrb	r3, [r7, #30]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d10b      	bne.n	800730e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f043 0206 	orr.w	r2, r3, #6
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f043 0220 	orr.w	r2, r3, #32
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800731a:	b004      	add	sp, #16
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	ffbdffbf 	.word	0xffbdffbf

08007324 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f023 0201 	bic.w	r2, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d115      	bne.n	8007394 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007374:	200a      	movs	r0, #10
 8007376:	f7fb f82d 	bl	80023d4 <HAL_Delay>
      ms += 10U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	330a      	adds	r3, #10
 800737e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa25 	bl	80077d0 <USB_GetMode>
 8007386:	4603      	mov	r3, r0
 8007388:	2b01      	cmp	r3, #1
 800738a:	d01e      	beq.n	80073ca <USB_SetCurrentMode+0x84>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007390:	d9f0      	bls.n	8007374 <USB_SetCurrentMode+0x2e>
 8007392:	e01a      	b.n	80073ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d115      	bne.n	80073c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073a6:	200a      	movs	r0, #10
 80073a8:	f7fb f814 	bl	80023d4 <HAL_Delay>
      ms += 10U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	330a      	adds	r3, #10
 80073b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fa0c 	bl	80077d0 <USB_GetMode>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <USB_SetCurrentMode+0x84>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80073c2:	d9f0      	bls.n	80073a6 <USB_SetCurrentMode+0x60>
 80073c4:	e001      	b.n	80073ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e005      	b.n	80073d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80073ce:	d101      	bne.n	80073d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e000      	b.n	80073d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073e0:	b084      	sub	sp, #16
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b086      	sub	sp, #24
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	e009      	b.n	8007414 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	3340      	adds	r3, #64	@ 0x40
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	2200      	movs	r2, #0
 800740c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	3301      	adds	r3, #1
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	2b0e      	cmp	r3, #14
 8007418:	d9f2      	bls.n	8007400 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800741a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800741e:	2b00      	cmp	r3, #0
 8007420:	d11c      	bne.n	800745c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007430:	f043 0302 	orr.w	r3, r3, #2
 8007434:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e005      	b.n	8007468 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007460:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800746e:	461a      	mov	r2, r3
 8007470:	2300      	movs	r3, #0
 8007472:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007474:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007478:	2b01      	cmp	r3, #1
 800747a:	d10d      	bne.n	8007498 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800747c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007484:	2100      	movs	r1, #0
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f968 	bl	800775c <USB_SetDevSpeed>
 800748c:	e008      	b.n	80074a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800748e:	2101      	movs	r1, #1
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f963 	bl	800775c <USB_SetDevSpeed>
 8007496:	e003      	b.n	80074a0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007498:	2103      	movs	r1, #3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f95e 	bl	800775c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074a0:	2110      	movs	r1, #16
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f8fa 	bl	800769c <USB_FlushTxFifo>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f924 	bl	8007700 <USB_FlushRxFifo>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c8:	461a      	mov	r2, r3
 80074ca:	2300      	movs	r3, #0
 80074cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d4:	461a      	mov	r2, r3
 80074d6:	2300      	movs	r3, #0
 80074d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e0:	461a      	mov	r2, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074e6:	2300      	movs	r3, #0
 80074e8:	613b      	str	r3, [r7, #16]
 80074ea:	e043      	b.n	8007574 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007502:	d118      	bne.n	8007536 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007516:	461a      	mov	r2, r3
 8007518:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	e013      	b.n	8007548 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752c:	461a      	mov	r2, r3
 800752e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	e008      	b.n	8007548 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4413      	add	r3, r2
 800753e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007542:	461a      	mov	r2, r3
 8007544:	2300      	movs	r3, #0
 8007546:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007554:	461a      	mov	r2, r3
 8007556:	2300      	movs	r3, #0
 8007558:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007566:	461a      	mov	r2, r3
 8007568:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800756c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	3301      	adds	r3, #1
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007578:	461a      	mov	r2, r3
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	4293      	cmp	r3, r2
 800757e:	d3b5      	bcc.n	80074ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]
 8007584:	e043      	b.n	800760e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007598:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800759c:	d118      	bne.n	80075d0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b0:	461a      	mov	r2, r3
 80075b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	e013      	b.n	80075e2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c6:	461a      	mov	r2, r3
 80075c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	e008      	b.n	80075e2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075dc:	461a      	mov	r2, r3
 80075de:	2300      	movs	r3, #0
 80075e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ee:	461a      	mov	r2, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007600:	461a      	mov	r2, r3
 8007602:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007606:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	3301      	adds	r3, #1
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007612:	461a      	mov	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	4293      	cmp	r3, r2
 8007618:	d3b5      	bcc.n	8007586 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800762c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800763a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800763c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f043 0210 	orr.w	r2, r3, #16
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	4b0f      	ldr	r3, [pc, #60]	@ (8007694 <USB_DevInit+0x2b4>)
 8007656:	4313      	orrs	r3, r2
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800765c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f043 0208 	orr.w	r2, r3, #8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007670:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007674:	2b01      	cmp	r3, #1
 8007676:	d105      	bne.n	8007684 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <USB_DevInit+0x2b8>)
 800767e:	4313      	orrs	r3, r2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007684:	7dfb      	ldrb	r3, [r7, #23]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007690:	b004      	add	sp, #16
 8007692:	4770      	bx	lr
 8007694:	803c3800 	.word	0x803c3800
 8007698:	40000004 	.word	0x40000004

0800769c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076b6:	d901      	bls.n	80076bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e01b      	b.n	80076f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	daf2      	bge.n	80076aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	019b      	lsls	r3, r3, #6
 80076cc:	f043 0220 	orr.w	r2, r3, #32
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076e0:	d901      	bls.n	80076e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e006      	b.n	80076f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	d0f0      	beq.n	80076d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3301      	adds	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007718:	d901      	bls.n	800771e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e018      	b.n	8007750 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	daf2      	bge.n	800770c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2210      	movs	r2, #16
 800772e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800773c:	d901      	bls.n	8007742 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e006      	b.n	8007750 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	2b10      	cmp	r3, #16
 800774c:	d0f0      	beq.n	8007730 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800777c:	4313      	orrs	r3, r2
 800777e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077a8:	f023 0303 	bic.w	r3, r3, #3
 80077ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077bc:	f043 0302 	orr.w	r3, r3, #2
 80077c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f003 0301 	and.w	r3, r3, #1
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007804:	d901      	bls.n	800780a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e01b      	b.n	8007842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	daf2      	bge.n	80077f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f043 0201 	orr.w	r2, r3, #1
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3301      	adds	r3, #1
 8007826:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800782e:	d901      	bls.n	8007834 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e006      	b.n	8007842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b01      	cmp	r3, #1
 800783e:	d0f0      	beq.n	8007822 <USB_CoreReset+0x36>

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800784e:	b480      	push	{r7}
 8007850:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007852:	bf00      	nop
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007862:	f3ef 8305 	mrs	r3, IPSR
 8007866:	60bb      	str	r3, [r7, #8]
  return(result);
 8007868:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10f      	bne.n	800788e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786e:	f3ef 8310 	mrs	r3, PRIMASK
 8007872:	607b      	str	r3, [r7, #4]
  return(result);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800787a:	f3ef 8311 	mrs	r3, BASEPRI
 800787e:	603b      	str	r3, [r7, #0]
  return(result);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d007      	beq.n	8007896 <osKernelInitialize+0x3a>
 8007886:	4b0e      	ldr	r3, [pc, #56]	@ (80078c0 <osKernelInitialize+0x64>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d103      	bne.n	8007896 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800788e:	f06f 0305 	mvn.w	r3, #5
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e00c      	b.n	80078b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007896:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <osKernelInitialize+0x64>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d105      	bne.n	80078aa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800789e:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <osKernelInitialize+0x64>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e002      	b.n	80078b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80078aa:	f04f 33ff 	mov.w	r3, #4294967295
 80078ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078b0:	68fb      	ldr	r3, [r7, #12]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	20000a24 	.word	0x20000a24

080078c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ca:	f3ef 8305 	mrs	r3, IPSR
 80078ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80078d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10f      	bne.n	80078f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d6:	f3ef 8310 	mrs	r3, PRIMASK
 80078da:	607b      	str	r3, [r7, #4]
  return(result);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078e2:	f3ef 8311 	mrs	r3, BASEPRI
 80078e6:	603b      	str	r3, [r7, #0]
  return(result);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <osKernelStart+0x3a>
 80078ee:	4b0f      	ldr	r3, [pc, #60]	@ (800792c <osKernelStart+0x68>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d103      	bne.n	80078fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80078f6:	f06f 0305 	mvn.w	r3, #5
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	e010      	b.n	8007920 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078fe:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <osKernelStart+0x68>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d109      	bne.n	800791a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007906:	f7ff ffa2 	bl	800784e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800790a:	4b08      	ldr	r3, [pc, #32]	@ (800792c <osKernelStart+0x68>)
 800790c:	2202      	movs	r2, #2
 800790e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007910:	f001 f8ca 	bl	8008aa8 <vTaskStartScheduler>
      stat = osOK;
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	e002      	b.n	8007920 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800791a:	f04f 33ff 	mov.w	r3, #4294967295
 800791e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007920:	68fb      	ldr	r3, [r7, #12]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000a24 	.word	0x20000a24

08007930 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b090      	sub	sp, #64	@ 0x40
 8007934:	af04      	add	r7, sp, #16
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007940:	f3ef 8305 	mrs	r3, IPSR
 8007944:	61fb      	str	r3, [r7, #28]
  return(result);
 8007946:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007948:	2b00      	cmp	r3, #0
 800794a:	f040 808f 	bne.w	8007a6c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800794e:	f3ef 8310 	mrs	r3, PRIMASK
 8007952:	61bb      	str	r3, [r7, #24]
  return(result);
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d105      	bne.n	8007966 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800795a:	f3ef 8311 	mrs	r3, BASEPRI
 800795e:	617b      	str	r3, [r7, #20]
  return(result);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <osThreadNew+0x3e>
 8007966:	4b44      	ldr	r3, [pc, #272]	@ (8007a78 <osThreadNew+0x148>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d07e      	beq.n	8007a6c <osThreadNew+0x13c>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d07b      	beq.n	8007a6c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007974:	2380      	movs	r3, #128	@ 0x80
 8007976:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007978:	2318      	movs	r3, #24
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800797c:	2300      	movs	r3, #0
 800797e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007980:	f04f 33ff 	mov.w	r3, #4294967295
 8007984:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d045      	beq.n	8007a18 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <osThreadNew+0x6a>
        name = attr->name;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d008      	beq.n	80079c0 <osThreadNew+0x90>
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	2b38      	cmp	r3, #56	@ 0x38
 80079b2:	d805      	bhi.n	80079c0 <osThreadNew+0x90>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <osThreadNew+0x94>
        return (NULL);
 80079c0:	2300      	movs	r3, #0
 80079c2:	e054      	b.n	8007a6e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	089b      	lsrs	r3, r3, #2
 80079d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00e      	beq.n	80079fa <osThreadNew+0xca>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b5b      	cmp	r3, #91	@ 0x5b
 80079e2:	d90a      	bls.n	80079fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d006      	beq.n	80079fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <osThreadNew+0xca>
        mem = 1;
 80079f4:	2301      	movs	r3, #1
 80079f6:	623b      	str	r3, [r7, #32]
 80079f8:	e010      	b.n	8007a1c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10c      	bne.n	8007a1c <osThreadNew+0xec>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d108      	bne.n	8007a1c <osThreadNew+0xec>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <osThreadNew+0xec>
          mem = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	623b      	str	r3, [r7, #32]
 8007a16:	e001      	b.n	8007a1c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d110      	bne.n	8007a44 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a2a:	9202      	str	r2, [sp, #8]
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fe4f 	bl	80086dc <xTaskCreateStatic>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	e013      	b.n	8007a6c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d110      	bne.n	8007a6c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	f107 0310 	add.w	r3, r7, #16
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fea3 	bl	80087a8 <xTaskCreate>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d001      	beq.n	8007a6c <osThreadNew+0x13c>
          hTask = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a6c:	693b      	ldr	r3, [r7, #16]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3730      	adds	r7, #48	@ 0x30
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000a24 	.word	0x20000a24

08007a7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a84:	f3ef 8305 	mrs	r3, IPSR
 8007a88:	613b      	str	r3, [r7, #16]
  return(result);
 8007a8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10f      	bne.n	8007ab0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a90:	f3ef 8310 	mrs	r3, PRIMASK
 8007a94:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <osDelay+0x3c>
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad4 <osDelay+0x58>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d103      	bne.n	8007ab8 <osDelay+0x3c>
    stat = osErrorISR;
 8007ab0:	f06f 0305 	mvn.w	r3, #5
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	e007      	b.n	8007ac8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 ffb8 	bl	8008a38 <vTaskDelay>
    }
  }

  return (stat);
 8007ac8:	697b      	ldr	r3, [r7, #20]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000a24 	.word	0x20000a24

08007ad8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4a07      	ldr	r2, [pc, #28]	@ (8007b04 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ae8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	4a06      	ldr	r2, [pc, #24]	@ (8007b08 <vApplicationGetIdleTaskMemory+0x30>)
 8007aee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2280      	movs	r2, #128	@ 0x80
 8007af4:	601a      	str	r2, [r3, #0]
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000a28 	.word	0x20000a28
 8007b08:	20000a84 	.word	0x20000a84

08007b0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4a07      	ldr	r2, [pc, #28]	@ (8007b38 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4a06      	ldr	r2, [pc, #24]	@ (8007b3c <vApplicationGetTimerTaskMemory+0x30>)
 8007b22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b2a:	601a      	str	r2, [r3, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	20000c84 	.word	0x20000c84
 8007b3c:	20000ce0 	.word	0x20000ce0

08007b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f103 0208 	add.w	r2, r3, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295
 8007b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f103 0208 	add.w	r2, r3, #8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f103 0208 	add.w	r2, r3, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf8:	d103      	bne.n	8007c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e00c      	b.n	8007c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3308      	adds	r3, #8
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e002      	b.n	8007c10 <vListInsert+0x2e>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d2f6      	bcs.n	8007c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6892      	ldr	r2, [r2, #8]
 8007c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6852      	ldr	r2, [r2, #4]
 8007c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d103      	bne.n	8007c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	1e5a      	subs	r2, r3, #1
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10d      	bne.n	8007cd8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	b672      	cpsid	i
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	b662      	cpsie	i
 8007cd0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cd2:	bf00      	nop
 8007cd4:	bf00      	nop
 8007cd6:	e7fd      	b.n	8007cd4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007cd8:	f002 f8a8 	bl	8009e2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce4:	68f9      	ldr	r1, [r7, #12]
 8007ce6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ce8:	fb01 f303 	mul.w	r3, r1, r3
 8007cec:	441a      	add	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	68f9      	ldr	r1, [r7, #12]
 8007d0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d0e:	fb01 f303 	mul.w	r3, r1, r3
 8007d12:	441a      	add	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	22ff      	movs	r2, #255	@ 0xff
 8007d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	22ff      	movs	r2, #255	@ 0xff
 8007d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d114      	bne.n	8007d58 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d01a      	beq.n	8007d6c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3310      	adds	r3, #16
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f001 f950 	bl	8008fe0 <xTaskRemoveFromEventList>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d012      	beq.n	8007d6c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d46:	4b0d      	ldr	r3, [pc, #52]	@ (8007d7c <xQueueGenericReset+0xd4>)
 8007d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	e009      	b.n	8007d6c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3310      	adds	r3, #16
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff feef 	bl	8007b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3324      	adds	r3, #36	@ 0x24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff feea 	bl	8007b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d6c:	f002 f894 	bl	8009e98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d70:	2301      	movs	r3, #1
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	e000ed04 	.word	0xe000ed04

08007d80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08e      	sub	sp, #56	@ 0x38
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10d      	bne.n	8007db0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d98:	b672      	cpsid	i
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	b662      	cpsie	i
 8007da8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	e7fd      	b.n	8007dac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10d      	bne.n	8007dd2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	b672      	cpsid	i
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	b662      	cpsie	i
 8007dca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	e7fd      	b.n	8007dce <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <xQueueGenericCreateStatic+0x5e>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <xQueueGenericCreateStatic+0x62>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <xQueueGenericCreateStatic+0x64>
 8007de2:	2300      	movs	r3, #0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10d      	bne.n	8007e04 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dec:	b672      	cpsid	i
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	b662      	cpsie	i
 8007dfc:	623b      	str	r3, [r7, #32]
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	e7fd      	b.n	8007e00 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d102      	bne.n	8007e10 <xQueueGenericCreateStatic+0x90>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <xQueueGenericCreateStatic+0x94>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <xQueueGenericCreateStatic+0x96>
 8007e14:	2300      	movs	r3, #0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10d      	bne.n	8007e36 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1e:	b672      	cpsid	i
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	b662      	cpsie	i
 8007e2e:	61fb      	str	r3, [r7, #28]
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	e7fd      	b.n	8007e32 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e36:	2350      	movs	r3, #80	@ 0x50
 8007e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b50      	cmp	r3, #80	@ 0x50
 8007e3e:	d00d      	beq.n	8007e5c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	b672      	cpsid	i
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	b662      	cpsie	i
 8007e54:	61bb      	str	r3, [r7, #24]
}
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
 8007e5a:	e7fd      	b.n	8007e58 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00d      	beq.n	8007e84 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 f805 	bl	8007e8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3730      	adds	r7, #48	@ 0x30
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	607a      	str	r2, [r7, #4]
 8007e9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e002      	b.n	8007eb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	69b8      	ldr	r0, [r7, #24]
 8007ec0:	f7ff fef2 	bl	8007ca8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08e      	sub	sp, #56	@ 0x38
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10d      	bne.n	8007f0c <xQueueGenericSend+0x38>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	b672      	cpsid	i
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	b662      	cpsie	i
 8007f04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <xQueueGenericSend+0x46>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <xQueueGenericSend+0x4a>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <xQueueGenericSend+0x4c>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10d      	bne.n	8007f40 <xQueueGenericSend+0x6c>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	b672      	cpsid	i
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	b662      	cpsie	i
 8007f38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	e7fd      	b.n	8007f3c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d103      	bne.n	8007f4e <xQueueGenericSend+0x7a>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d101      	bne.n	8007f52 <xQueueGenericSend+0x7e>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <xQueueGenericSend+0x80>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10d      	bne.n	8007f74 <xQueueGenericSend+0xa0>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5c:	b672      	cpsid	i
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	b662      	cpsie	i
 8007f6c:	623b      	str	r3, [r7, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	bf00      	nop
 8007f72:	e7fd      	b.n	8007f70 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f74:	f001 f9fc 	bl	8009370 <xTaskGetSchedulerState>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <xQueueGenericSend+0xb0>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <xQueueGenericSend+0xb4>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e000      	b.n	8007f8a <xQueueGenericSend+0xb6>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10d      	bne.n	8007faa <xQueueGenericSend+0xd6>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f92:	b672      	cpsid	i
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	b662      	cpsie	i
 8007fa2:	61fb      	str	r3, [r7, #28]
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	e7fd      	b.n	8007fa6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007faa:	f001 ff3f 	bl	8009e2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d302      	bcc.n	8007fc0 <xQueueGenericSend+0xec>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d129      	bne.n	8008014 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fc6:	f000 fa1b 	bl	8008400 <prvCopyDataToQueue>
 8007fca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d010      	beq.n	8007ff6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	3324      	adds	r3, #36	@ 0x24
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 f801 	bl	8008fe0 <xTaskRemoveFromEventList>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d013      	beq.n	800800c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fe4:	4b3f      	ldr	r3, [pc, #252]	@ (80080e4 <xQueueGenericSend+0x210>)
 8007fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	e00a      	b.n	800800c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ffc:	4b39      	ldr	r3, [pc, #228]	@ (80080e4 <xQueueGenericSend+0x210>)
 8007ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800800c:	f001 ff44 	bl	8009e98 <vPortExitCritical>
				return pdPASS;
 8008010:	2301      	movs	r3, #1
 8008012:	e063      	b.n	80080dc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d103      	bne.n	8008022 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800801a:	f001 ff3d 	bl	8009e98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800801e:	2300      	movs	r3, #0
 8008020:	e05c      	b.n	80080dc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008028:	f107 0314 	add.w	r3, r7, #20
 800802c:	4618      	mov	r0, r3
 800802e:	f001 f83d 	bl	80090ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008032:	2301      	movs	r3, #1
 8008034:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008036:	f001 ff2f 	bl	8009e98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800803a:	f000 fda1 	bl	8008b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800803e:	f001 fef5 	bl	8009e2c <vPortEnterCritical>
 8008042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008044:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008048:	b25b      	sxtb	r3, r3
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d103      	bne.n	8008058 <xQueueGenericSend+0x184>
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800805e:	b25b      	sxtb	r3, r3
 8008060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008064:	d103      	bne.n	800806e <xQueueGenericSend+0x19a>
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800806e:	f001 ff13 	bl	8009e98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008072:	1d3a      	adds	r2, r7, #4
 8008074:	f107 0314 	add.w	r3, r7, #20
 8008078:	4611      	mov	r1, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f001 f82c 	bl	80090d8 <xTaskCheckForTimeOut>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d124      	bne.n	80080d0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008086:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008088:	f000 fab2 	bl	80085f0 <prvIsQueueFull>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d018      	beq.n	80080c4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008094:	3310      	adds	r3, #16
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f000 ff4a 	bl	8008f34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080a2:	f000 fa3d 	bl	8008520 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080a6:	f000 fd79 	bl	8008b9c <xTaskResumeAll>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f47f af7c 	bne.w	8007faa <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80080b2:	4b0c      	ldr	r3, [pc, #48]	@ (80080e4 <xQueueGenericSend+0x210>)
 80080b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	e772      	b.n	8007faa <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080c6:	f000 fa2b 	bl	8008520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080ca:	f000 fd67 	bl	8008b9c <xTaskResumeAll>
 80080ce:	e76c      	b.n	8007faa <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080d2:	f000 fa25 	bl	8008520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080d6:	f000 fd61 	bl	8008b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3738      	adds	r7, #56	@ 0x38
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08e      	sub	sp, #56	@ 0x38
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10d      	bne.n	800811c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	b672      	cpsid	i
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	b662      	cpsie	i
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d103      	bne.n	800812a <xQueueGenericSendFromISR+0x42>
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <xQueueGenericSendFromISR+0x46>
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <xQueueGenericSendFromISR+0x48>
 800812e:	2300      	movs	r3, #0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10d      	bne.n	8008150 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008138:	b672      	cpsid	i
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	b662      	cpsie	i
 8008148:	623b      	str	r3, [r7, #32]
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d103      	bne.n	800815e <xQueueGenericSendFromISR+0x76>
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800815a:	2b01      	cmp	r3, #1
 800815c:	d101      	bne.n	8008162 <xQueueGenericSendFromISR+0x7a>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <xQueueGenericSendFromISR+0x7c>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10d      	bne.n	8008184 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816c:	b672      	cpsid	i
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	b662      	cpsie	i
 800817c:	61fb      	str	r3, [r7, #28]
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008184:	f001 ff3a 	bl	8009ffc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008188:	f3ef 8211 	mrs	r2, BASEPRI
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	b672      	cpsid	i
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	b662      	cpsie	i
 80081a0:	61ba      	str	r2, [r7, #24]
 80081a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d302      	bcc.n	80081ba <xQueueGenericSendFromISR+0xd2>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d12c      	bne.n	8008214 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081ca:	f000 f919 	bl	8008400 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d112      	bne.n	80081fe <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d016      	beq.n	800820e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	3324      	adds	r3, #36	@ 0x24
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fefb 	bl	8008fe0 <xTaskRemoveFromEventList>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00e      	beq.n	800820e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	e007      	b.n	800820e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008202:	3301      	adds	r3, #1
 8008204:	b2db      	uxtb	r3, r3
 8008206:	b25a      	sxtb	r2, r3
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800820e:	2301      	movs	r3, #1
 8008210:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008212:	e001      	b.n	8008218 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008214:	2300      	movs	r3, #0
 8008216:	637b      	str	r3, [r7, #52]	@ 0x34
 8008218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008222:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008226:	4618      	mov	r0, r3
 8008228:	3738      	adds	r7, #56	@ 0x38
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08c      	sub	sp, #48	@ 0x30
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800823c:	2300      	movs	r3, #0
 800823e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10d      	bne.n	8008266 <xQueueReceive+0x36>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824e:	b672      	cpsid	i
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	b662      	cpsie	i
 800825e:	623b      	str	r3, [r7, #32]
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	e7fd      	b.n	8008262 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d103      	bne.n	8008274 <xQueueReceive+0x44>
 800826c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <xQueueReceive+0x48>
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <xQueueReceive+0x4a>
 8008278:	2300      	movs	r3, #0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10d      	bne.n	800829a <xQueueReceive+0x6a>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	b672      	cpsid	i
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	b662      	cpsie	i
 8008292:	61fb      	str	r3, [r7, #28]
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	e7fd      	b.n	8008296 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800829a:	f001 f869 	bl	8009370 <xTaskGetSchedulerState>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d102      	bne.n	80082aa <xQueueReceive+0x7a>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <xQueueReceive+0x7e>
 80082aa:	2301      	movs	r3, #1
 80082ac:	e000      	b.n	80082b0 <xQueueReceive+0x80>
 80082ae:	2300      	movs	r3, #0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10d      	bne.n	80082d0 <xQueueReceive+0xa0>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	b672      	cpsid	i
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	b662      	cpsie	i
 80082c8:	61bb      	str	r3, [r7, #24]
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	e7fd      	b.n	80082cc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082d0:	f001 fdac 	bl	8009e2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01f      	beq.n	8008320 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082e4:	f000 f8f6 	bl	80084d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ea:	1e5a      	subs	r2, r3, #1
 80082ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00f      	beq.n	8008318 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fa:	3310      	adds	r3, #16
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fe6f 	bl	8008fe0 <xTaskRemoveFromEventList>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008308:	4b3c      	ldr	r3, [pc, #240]	@ (80083fc <xQueueReceive+0x1cc>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008318:	f001 fdbe 	bl	8009e98 <vPortExitCritical>
				return pdPASS;
 800831c:	2301      	movs	r3, #1
 800831e:	e069      	b.n	80083f4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d103      	bne.n	800832e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008326:	f001 fdb7 	bl	8009e98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800832a:	2300      	movs	r3, #0
 800832c:	e062      	b.n	80083f4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800832e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008334:	f107 0310 	add.w	r3, r7, #16
 8008338:	4618      	mov	r0, r3
 800833a:	f000 feb7 	bl	80090ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800833e:	2301      	movs	r3, #1
 8008340:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008342:	f001 fda9 	bl	8009e98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008346:	f000 fc1b 	bl	8008b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800834a:	f001 fd6f 	bl	8009e2c <vPortEnterCritical>
 800834e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008354:	b25b      	sxtb	r3, r3
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d103      	bne.n	8008364 <xQueueReceive+0x134>
 800835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800836a:	b25b      	sxtb	r3, r3
 800836c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008370:	d103      	bne.n	800837a <xQueueReceive+0x14a>
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800837a:	f001 fd8d 	bl	8009e98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800837e:	1d3a      	adds	r2, r7, #4
 8008380:	f107 0310 	add.w	r3, r7, #16
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fea6 	bl	80090d8 <xTaskCheckForTimeOut>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d123      	bne.n	80083da <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008394:	f000 f916 	bl	80085c4 <prvIsQueueEmpty>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d017      	beq.n	80083ce <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	3324      	adds	r3, #36	@ 0x24
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 fdc4 	bl	8008f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ae:	f000 f8b7 	bl	8008520 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083b2:	f000 fbf3 	bl	8008b9c <xTaskResumeAll>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d189      	bne.n	80082d0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80083bc:	4b0f      	ldr	r3, [pc, #60]	@ (80083fc <xQueueReceive+0x1cc>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	e780      	b.n	80082d0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083d0:	f000 f8a6 	bl	8008520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083d4:	f000 fbe2 	bl	8008b9c <xTaskResumeAll>
 80083d8:	e77a      	b.n	80082d0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083dc:	f000 f8a0 	bl	8008520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083e0:	f000 fbdc 	bl	8008b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e6:	f000 f8ed 	bl	80085c4 <prvIsQueueEmpty>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f43f af6f 	beq.w	80082d0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3730      	adds	r7, #48	@ 0x30
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	e000ed04 	.word	0xe000ed04

08008400 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008414:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10d      	bne.n	800843a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d14d      	bne.n	80084c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 ffbe 	bl	80093ac <xTaskPriorityDisinherit>
 8008430:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	e043      	b.n	80084c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d119      	bne.n	8008474 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6858      	ldr	r0, [r3, #4]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008448:	461a      	mov	r2, r3
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	f002 f9c6 	bl	800a7dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008458:	441a      	add	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	429a      	cmp	r2, r3
 8008468:	d32b      	bcc.n	80084c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	605a      	str	r2, [r3, #4]
 8008472:	e026      	b.n	80084c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68d8      	ldr	r0, [r3, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800847c:	461a      	mov	r2, r3
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	f002 f9ac 	bl	800a7dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800848c:	425b      	negs	r3, r3
 800848e:	441a      	add	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d207      	bcs.n	80084b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a8:	425b      	negs	r3, r3
 80084aa:	441a      	add	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d105      	bne.n	80084c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	3b01      	subs	r3, #1
 80084c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80084ca:	697b      	ldr	r3, [r7, #20]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d018      	beq.n	8008518 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ee:	441a      	add	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d303      	bcc.n	8008508 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68d9      	ldr	r1, [r3, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008510:	461a      	mov	r2, r3
 8008512:	6838      	ldr	r0, [r7, #0]
 8008514:	f002 f962 	bl	800a7dc <memcpy>
	}
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008528:	f001 fc80 	bl	8009e2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008532:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008534:	e011      	b.n	800855a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853a:	2b00      	cmp	r3, #0
 800853c:	d012      	beq.n	8008564 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	3324      	adds	r3, #36	@ 0x24
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fd4c 	bl	8008fe0 <xTaskRemoveFromEventList>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800854e:	f000 fe2b 	bl	80091a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	3b01      	subs	r3, #1
 8008556:	b2db      	uxtb	r3, r3
 8008558:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	dce9      	bgt.n	8008536 <prvUnlockQueue+0x16>
 8008562:	e000      	b.n	8008566 <prvUnlockQueue+0x46>
					break;
 8008564:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	22ff      	movs	r2, #255	@ 0xff
 800856a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800856e:	f001 fc93 	bl	8009e98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008572:	f001 fc5b 	bl	8009e2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800857c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800857e:	e011      	b.n	80085a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d012      	beq.n	80085ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3310      	adds	r3, #16
 800858c:	4618      	mov	r0, r3
 800858e:	f000 fd27 	bl	8008fe0 <xTaskRemoveFromEventList>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008598:	f000 fe06 	bl	80091a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	3b01      	subs	r3, #1
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dce9      	bgt.n	8008580 <prvUnlockQueue+0x60>
 80085ac:	e000      	b.n	80085b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	22ff      	movs	r2, #255	@ 0xff
 80085b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80085b8:	f001 fc6e 	bl	8009e98 <vPortExitCritical>
}
 80085bc:	bf00      	nop
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085cc:	f001 fc2e 	bl	8009e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d102      	bne.n	80085de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085d8:	2301      	movs	r3, #1
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e001      	b.n	80085e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085e2:	f001 fc59 	bl	8009e98 <vPortExitCritical>

	return xReturn;
 80085e6:	68fb      	ldr	r3, [r7, #12]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085f8:	f001 fc18 	bl	8009e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008604:	429a      	cmp	r2, r3
 8008606:	d102      	bne.n	800860e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008608:	2301      	movs	r3, #1
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	e001      	b.n	8008612 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008612:	f001 fc41 	bl	8009e98 <vPortExitCritical>

	return xReturn;
 8008616:	68fb      	ldr	r3, [r7, #12]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	e014      	b.n	800865a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008630:	4a0f      	ldr	r2, [pc, #60]	@ (8008670 <vQueueAddToRegistry+0x50>)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10b      	bne.n	8008654 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800863c:	490c      	ldr	r1, [pc, #48]	@ (8008670 <vQueueAddToRegistry+0x50>)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008646:	4a0a      	ldr	r2, [pc, #40]	@ (8008670 <vQueueAddToRegistry+0x50>)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	4413      	add	r3, r2
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008652:	e006      	b.n	8008662 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3301      	adds	r3, #1
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b07      	cmp	r3, #7
 800865e:	d9e7      	bls.n	8008630 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	200010e0 	.word	0x200010e0

08008674 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008684:	f001 fbd2 	bl	8009e2c <vPortEnterCritical>
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800868e:	b25b      	sxtb	r3, r3
 8008690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008694:	d103      	bne.n	800869e <vQueueWaitForMessageRestricted+0x2a>
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086a4:	b25b      	sxtb	r3, r3
 80086a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086aa:	d103      	bne.n	80086b4 <vQueueWaitForMessageRestricted+0x40>
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086b4:	f001 fbf0 	bl	8009e98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d106      	bne.n	80086ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	3324      	adds	r3, #36	@ 0x24
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 fc5b 	bl	8008f84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086ce:	6978      	ldr	r0, [r7, #20]
 80086d0:	f7ff ff26 	bl	8008520 <prvUnlockQueue>
	}
 80086d4:	bf00      	nop
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08e      	sub	sp, #56	@ 0x38
 80086e0:	af04      	add	r7, sp, #16
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10d      	bne.n	800870c <xTaskCreateStatic+0x30>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f4:	b672      	cpsid	i
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	b662      	cpsie	i
 8008704:	623b      	str	r3, [r7, #32]
}
 8008706:	bf00      	nop
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800870c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10d      	bne.n	800872e <xTaskCreateStatic+0x52>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008716:	b672      	cpsid	i
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	b662      	cpsie	i
 8008726:	61fb      	str	r3, [r7, #28]
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	e7fd      	b.n	800872a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800872e:	235c      	movs	r3, #92	@ 0x5c
 8008730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b5c      	cmp	r3, #92	@ 0x5c
 8008736:	d00d      	beq.n	8008754 <xTaskCreateStatic+0x78>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873c:	b672      	cpsid	i
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	b662      	cpsie	i
 800874c:	61bb      	str	r3, [r7, #24]
}
 800874e:	bf00      	nop
 8008750:	bf00      	nop
 8008752:	e7fd      	b.n	8008750 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008754:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01e      	beq.n	800879a <xTaskCreateStatic+0xbe>
 800875c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875e:	2b00      	cmp	r3, #0
 8008760:	d01b      	beq.n	800879a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008768:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800876a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876e:	2202      	movs	r2, #2
 8008770:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008774:	2300      	movs	r3, #0
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877a:	9302      	str	r3, [sp, #8]
 800877c:	f107 0314 	add.w	r3, r7, #20
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	68b9      	ldr	r1, [r7, #8]
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f850 	bl	8008832 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008792:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008794:	f000 f8e0 	bl	8008958 <prvAddNewTaskToReadyList>
 8008798:	e001      	b.n	800879e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800879e:	697b      	ldr	r3, [r7, #20]
	}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3728      	adds	r7, #40	@ 0x28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08c      	sub	sp, #48	@ 0x30
 80087ac:	af04      	add	r7, sp, #16
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	4613      	mov	r3, r2
 80087b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087b8:	88fb      	ldrh	r3, [r7, #6]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 fc63 	bl	800a088 <pvPortMalloc>
 80087c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00e      	beq.n	80087e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087ca:	205c      	movs	r0, #92	@ 0x5c
 80087cc:	f001 fc5c 	bl	800a088 <pvPortMalloc>
 80087d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80087de:	e005      	b.n	80087ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087e0:	6978      	ldr	r0, [r7, #20]
 80087e2:	f001 fd1f 	bl	800a224 <vPortFree>
 80087e6:	e001      	b.n	80087ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d017      	beq.n	8008822 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087fa:	88fa      	ldrh	r2, [r7, #6]
 80087fc:	2300      	movs	r3, #0
 80087fe:	9303      	str	r3, [sp, #12]
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	9302      	str	r3, [sp, #8]
 8008804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	68b9      	ldr	r1, [r7, #8]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 f80e 	bl	8008832 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008816:	69f8      	ldr	r0, [r7, #28]
 8008818:	f000 f89e 	bl	8008958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800881c:	2301      	movs	r3, #1
 800881e:	61bb      	str	r3, [r7, #24]
 8008820:	e002      	b.n	8008828 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008822:	f04f 33ff 	mov.w	r3, #4294967295
 8008826:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008828:	69bb      	ldr	r3, [r7, #24]
	}
 800882a:	4618      	mov	r0, r3
 800882c:	3720      	adds	r7, #32
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b088      	sub	sp, #32
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	607a      	str	r2, [r7, #4]
 800883e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008842:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	461a      	mov	r2, r3
 800884a:	21a5      	movs	r1, #165	@ 0xa5
 800884c:	f001 ff70 	bl	800a730 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800885a:	440b      	add	r3, r1
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	f023 0307 	bic.w	r3, r3, #7
 8008868:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00d      	beq.n	8008890 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	b672      	cpsid	i
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	b662      	cpsie	i
 8008888:	617b      	str	r3, [r7, #20]
}
 800888a:	bf00      	nop
 800888c:	bf00      	nop
 800888e:	e7fd      	b.n	800888c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d01f      	beq.n	80088d6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008896:	2300      	movs	r3, #0
 8008898:	61fb      	str	r3, [r7, #28]
 800889a:	e012      	b.n	80088c2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	4413      	add	r3, r2
 80088a2:	7819      	ldrb	r1, [r3, #0]
 80088a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	4413      	add	r3, r2
 80088aa:	3334      	adds	r3, #52	@ 0x34
 80088ac:	460a      	mov	r2, r1
 80088ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d006      	beq.n	80088ca <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	3301      	adds	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	2b0f      	cmp	r3, #15
 80088c6:	d9e9      	bls.n	800889c <prvInitialiseNewTask+0x6a>
 80088c8:	e000      	b.n	80088cc <prvInitialiseNewTask+0x9a>
			{
				break;
 80088ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088d4:	e003      	b.n	80088de <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e0:	2b37      	cmp	r3, #55	@ 0x37
 80088e2:	d901      	bls.n	80088e8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088e4:	2337      	movs	r3, #55	@ 0x37
 80088e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088f2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	2200      	movs	r2, #0
 80088f8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fc:	3304      	adds	r3, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff f93e 	bl	8007b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008906:	3318      	adds	r3, #24
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff f939 	bl	8007b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008912:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008922:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008926:	2200      	movs	r2, #0
 8008928:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	68f9      	ldr	r1, [r7, #12]
 8008936:	69b8      	ldr	r0, [r7, #24]
 8008938:	f001 f968 	bl	8009c0c <pxPortInitialiseStack>
 800893c:	4602      	mov	r2, r0
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800894c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800894e:	bf00      	nop
 8008950:	3720      	adds	r7, #32
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008960:	f001 fa64 	bl	8009e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008964:	4b2d      	ldr	r3, [pc, #180]	@ (8008a1c <prvAddNewTaskToReadyList+0xc4>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3301      	adds	r3, #1
 800896a:	4a2c      	ldr	r2, [pc, #176]	@ (8008a1c <prvAddNewTaskToReadyList+0xc4>)
 800896c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800896e:	4b2c      	ldr	r3, [pc, #176]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008976:	4a2a      	ldr	r2, [pc, #168]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800897c:	4b27      	ldr	r3, [pc, #156]	@ (8008a1c <prvAddNewTaskToReadyList+0xc4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d110      	bne.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008984:	f000 fc34 	bl	80091f0 <prvInitialiseTaskLists>
 8008988:	e00d      	b.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800898a:	4b26      	ldr	r3, [pc, #152]	@ (8008a24 <prvAddNewTaskToReadyList+0xcc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008992:	4b23      	ldr	r3, [pc, #140]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899c:	429a      	cmp	r2, r3
 800899e:	d802      	bhi.n	80089a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089a6:	4b20      	ldr	r3, [pc, #128]	@ (8008a28 <prvAddNewTaskToReadyList+0xd0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3301      	adds	r3, #1
 80089ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008a28 <prvAddNewTaskToReadyList+0xd0>)
 80089ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a28 <prvAddNewTaskToReadyList+0xd0>)
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089bc:	4b1b      	ldr	r3, [pc, #108]	@ (8008a2c <prvAddNewTaskToReadyList+0xd4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d903      	bls.n	80089cc <prvAddNewTaskToReadyList+0x74>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c8:	4a18      	ldr	r2, [pc, #96]	@ (8008a2c <prvAddNewTaskToReadyList+0xd4>)
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4a15      	ldr	r2, [pc, #84]	@ (8008a30 <prvAddNewTaskToReadyList+0xd8>)
 80089da:	441a      	add	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7ff f8d9 	bl	8007b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089e8:	f001 fa56 	bl	8009e98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008a24 <prvAddNewTaskToReadyList+0xcc>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00e      	beq.n	8008a12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008a20 <prvAddNewTaskToReadyList+0xc8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d207      	bcs.n	8008a12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a02:	4b0c      	ldr	r3, [pc, #48]	@ (8008a34 <prvAddNewTaskToReadyList+0xdc>)
 8008a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200015f4 	.word	0x200015f4
 8008a20:	20001120 	.word	0x20001120
 8008a24:	20001600 	.word	0x20001600
 8008a28:	20001610 	.word	0x20001610
 8008a2c:	200015fc 	.word	0x200015fc
 8008a30:	20001124 	.word	0x20001124
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d01a      	beq.n	8008a80 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a4a:	4b15      	ldr	r3, [pc, #84]	@ (8008aa0 <vTaskDelay+0x68>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00d      	beq.n	8008a6e <vTaskDelay+0x36>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	b672      	cpsid	i
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	b662      	cpsie	i
 8008a66:	60bb      	str	r3, [r7, #8]
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	e7fd      	b.n	8008a6a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008a6e:	f000 f887 	bl	8008b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a72:	2100      	movs	r1, #0
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fd0d 	bl	8009494 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a7a:	f000 f88f 	bl	8008b9c <xTaskResumeAll>
 8008a7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d107      	bne.n	8008a96 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008a86:	4b07      	ldr	r3, [pc, #28]	@ (8008aa4 <vTaskDelay+0x6c>)
 8008a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	2000161c 	.word	0x2000161c
 8008aa4:	e000ed04 	.word	0xe000ed04

08008aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08a      	sub	sp, #40	@ 0x28
 8008aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ab6:	463a      	mov	r2, r7
 8008ab8:	1d39      	adds	r1, r7, #4
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff f80a 	bl	8007ad8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	9202      	str	r2, [sp, #8]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	460a      	mov	r2, r1
 8008ad6:	4924      	ldr	r1, [pc, #144]	@ (8008b68 <vTaskStartScheduler+0xc0>)
 8008ad8:	4824      	ldr	r0, [pc, #144]	@ (8008b6c <vTaskStartScheduler+0xc4>)
 8008ada:	f7ff fdff 	bl	80086dc <xTaskCreateStatic>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	4a23      	ldr	r2, [pc, #140]	@ (8008b70 <vTaskStartScheduler+0xc8>)
 8008ae2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ae4:	4b22      	ldr	r3, [pc, #136]	@ (8008b70 <vTaskStartScheduler+0xc8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aec:	2301      	movs	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e001      	b.n	8008af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d102      	bne.n	8008b02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008afc:	f000 fd1e 	bl	800953c <xTimerCreateTimerTask>
 8008b00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d118      	bne.n	8008b3a <vTaskStartScheduler+0x92>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0c:	b672      	cpsid	i
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	b662      	cpsie	i
 8008b1c:	613b      	str	r3, [r7, #16]
}
 8008b1e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b20:	4b14      	ldr	r3, [pc, #80]	@ (8008b74 <vTaskStartScheduler+0xcc>)
 8008b22:	f04f 32ff 	mov.w	r2, #4294967295
 8008b26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b28:	4b13      	ldr	r3, [pc, #76]	@ (8008b78 <vTaskStartScheduler+0xd0>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b2e:	4b13      	ldr	r3, [pc, #76]	@ (8008b7c <vTaskStartScheduler+0xd4>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b34:	f001 f8fc 	bl	8009d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b38:	e011      	b.n	8008b5e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b40:	d10d      	bne.n	8008b5e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b46:	b672      	cpsid	i
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	b662      	cpsie	i
 8008b56:	60fb      	str	r3, [r7, #12]
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	e7fd      	b.n	8008b5a <vTaskStartScheduler+0xb2>
}
 8008b5e:	bf00      	nop
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	0800b0a4 	.word	0x0800b0a4
 8008b6c:	080091c1 	.word	0x080091c1
 8008b70:	20001618 	.word	0x20001618
 8008b74:	20001614 	.word	0x20001614
 8008b78:	20001600 	.word	0x20001600
 8008b7c:	200015f8 	.word	0x200015f8

08008b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b84:	4b04      	ldr	r3, [pc, #16]	@ (8008b98 <vTaskSuspendAll+0x18>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	4a03      	ldr	r2, [pc, #12]	@ (8008b98 <vTaskSuspendAll+0x18>)
 8008b8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b8e:	bf00      	nop
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	2000161c 	.word	0x2000161c

08008b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008baa:	4b43      	ldr	r3, [pc, #268]	@ (8008cb8 <xTaskResumeAll+0x11c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10d      	bne.n	8008bce <xTaskResumeAll+0x32>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb6:	b672      	cpsid	i
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	b662      	cpsie	i
 8008bc6:	603b      	str	r3, [r7, #0]
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	e7fd      	b.n	8008bca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bce:	f001 f92d 	bl	8009e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bd2:	4b39      	ldr	r3, [pc, #228]	@ (8008cb8 <xTaskResumeAll+0x11c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	4a37      	ldr	r2, [pc, #220]	@ (8008cb8 <xTaskResumeAll+0x11c>)
 8008bda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bdc:	4b36      	ldr	r3, [pc, #216]	@ (8008cb8 <xTaskResumeAll+0x11c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d162      	bne.n	8008caa <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008be4:	4b35      	ldr	r3, [pc, #212]	@ (8008cbc <xTaskResumeAll+0x120>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d05e      	beq.n	8008caa <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bec:	e02f      	b.n	8008c4e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bee:	4b34      	ldr	r3, [pc, #208]	@ (8008cc0 <xTaskResumeAll+0x124>)
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3318      	adds	r3, #24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff f82a 	bl	8007c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff f825 	bl	8007c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8008cc4 <xTaskResumeAll+0x128>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d903      	bls.n	8008c1e <xTaskResumeAll+0x82>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8008cc4 <xTaskResumeAll+0x128>)
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4a27      	ldr	r2, [pc, #156]	@ (8008cc8 <xTaskResumeAll+0x12c>)
 8008c2c:	441a      	add	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f7fe ffb0 	bl	8007b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c3e:	4b23      	ldr	r3, [pc, #140]	@ (8008ccc <xTaskResumeAll+0x130>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d302      	bcc.n	8008c4e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008c48:	4b21      	ldr	r3, [pc, #132]	@ (8008cd0 <xTaskResumeAll+0x134>)
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc0 <xTaskResumeAll+0x124>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1cb      	bne.n	8008bee <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c5c:	f000 fb68 	bl	8009330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c60:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd4 <xTaskResumeAll+0x138>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d010      	beq.n	8008c8e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c6c:	f000 f846 	bl	8008cfc <xTaskIncrementTick>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8008c76:	4b16      	ldr	r3, [pc, #88]	@ (8008cd0 <xTaskResumeAll+0x134>)
 8008c78:	2201      	movs	r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f1      	bne.n	8008c6c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8008c88:	4b12      	ldr	r3, [pc, #72]	@ (8008cd4 <xTaskResumeAll+0x138>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c8e:	4b10      	ldr	r3, [pc, #64]	@ (8008cd0 <xTaskResumeAll+0x134>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c96:	2301      	movs	r3, #1
 8008c98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd8 <xTaskResumeAll+0x13c>)
 8008c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008caa:	f001 f8f5 	bl	8009e98 <vPortExitCritical>

	return xAlreadyYielded;
 8008cae:	68bb      	ldr	r3, [r7, #8]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	2000161c 	.word	0x2000161c
 8008cbc:	200015f4 	.word	0x200015f4
 8008cc0:	200015b4 	.word	0x200015b4
 8008cc4:	200015fc 	.word	0x200015fc
 8008cc8:	20001124 	.word	0x20001124
 8008ccc:	20001120 	.word	0x20001120
 8008cd0:	20001608 	.word	0x20001608
 8008cd4:	20001604 	.word	0x20001604
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ce2:	4b05      	ldr	r3, [pc, #20]	@ (8008cf8 <xTaskGetTickCount+0x1c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ce8:	687b      	ldr	r3, [r7, #4]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	200015f8 	.word	0x200015f8

08008cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d06:	4b50      	ldr	r3, [pc, #320]	@ (8008e48 <xTaskIncrementTick+0x14c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 808c 	bne.w	8008e28 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d10:	4b4e      	ldr	r3, [pc, #312]	@ (8008e4c <xTaskIncrementTick+0x150>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3301      	adds	r3, #1
 8008d16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d18:	4a4c      	ldr	r2, [pc, #304]	@ (8008e4c <xTaskIncrementTick+0x150>)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d123      	bne.n	8008d6c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d24:	4b4a      	ldr	r3, [pc, #296]	@ (8008e50 <xTaskIncrementTick+0x154>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00d      	beq.n	8008d4a <xTaskIncrementTick+0x4e>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	b672      	cpsid	i
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	b662      	cpsie	i
 8008d42:	603b      	str	r3, [r7, #0]
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	e7fd      	b.n	8008d46 <xTaskIncrementTick+0x4a>
 8008d4a:	4b41      	ldr	r3, [pc, #260]	@ (8008e50 <xTaskIncrementTick+0x154>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	4b40      	ldr	r3, [pc, #256]	@ (8008e54 <xTaskIncrementTick+0x158>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a3e      	ldr	r2, [pc, #248]	@ (8008e50 <xTaskIncrementTick+0x154>)
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	4a3e      	ldr	r2, [pc, #248]	@ (8008e54 <xTaskIncrementTick+0x158>)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e58 <xTaskIncrementTick+0x15c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3301      	adds	r3, #1
 8008d64:	4a3c      	ldr	r2, [pc, #240]	@ (8008e58 <xTaskIncrementTick+0x15c>)
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	f000 fae2 	bl	8009330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e5c <xTaskIncrementTick+0x160>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d349      	bcc.n	8008e0a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d76:	4b36      	ldr	r3, [pc, #216]	@ (8008e50 <xTaskIncrementTick+0x154>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d104      	bne.n	8008d8a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d80:	4b36      	ldr	r3, [pc, #216]	@ (8008e5c <xTaskIncrementTick+0x160>)
 8008d82:	f04f 32ff 	mov.w	r2, #4294967295
 8008d86:	601a      	str	r2, [r3, #0]
					break;
 8008d88:	e03f      	b.n	8008e0a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d8a:	4b31      	ldr	r3, [pc, #196]	@ (8008e50 <xTaskIncrementTick+0x154>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d203      	bcs.n	8008daa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008da2:	4a2e      	ldr	r2, [pc, #184]	@ (8008e5c <xTaskIncrementTick+0x160>)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008da8:	e02f      	b.n	8008e0a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe ff50 	bl	8007c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	3318      	adds	r3, #24
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe ff47 	bl	8007c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dca:	4b25      	ldr	r3, [pc, #148]	@ (8008e60 <xTaskIncrementTick+0x164>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d903      	bls.n	8008dda <xTaskIncrementTick+0xde>
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd6:	4a22      	ldr	r2, [pc, #136]	@ (8008e60 <xTaskIncrementTick+0x164>)
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4a1f      	ldr	r2, [pc, #124]	@ (8008e64 <xTaskIncrementTick+0x168>)
 8008de8:	441a      	add	r2, r3
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	3304      	adds	r3, #4
 8008dee:	4619      	mov	r1, r3
 8008df0:	4610      	mov	r0, r2
 8008df2:	f7fe fed2 	bl	8007b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8008e68 <xTaskIncrementTick+0x16c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d3b8      	bcc.n	8008d76 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008e04:	2301      	movs	r3, #1
 8008e06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e08:	e7b5      	b.n	8008d76 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e0a:	4b17      	ldr	r3, [pc, #92]	@ (8008e68 <xTaskIncrementTick+0x16c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e10:	4914      	ldr	r1, [pc, #80]	@ (8008e64 <xTaskIncrementTick+0x168>)
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d907      	bls.n	8008e32 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008e22:	2301      	movs	r3, #1
 8008e24:	617b      	str	r3, [r7, #20]
 8008e26:	e004      	b.n	8008e32 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e28:	4b10      	ldr	r3, [pc, #64]	@ (8008e6c <xTaskIncrementTick+0x170>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8008e6c <xTaskIncrementTick+0x170>)
 8008e30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e32:	4b0f      	ldr	r3, [pc, #60]	@ (8008e70 <xTaskIncrementTick+0x174>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e3e:	697b      	ldr	r3, [r7, #20]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	2000161c 	.word	0x2000161c
 8008e4c:	200015f8 	.word	0x200015f8
 8008e50:	200015ac 	.word	0x200015ac
 8008e54:	200015b0 	.word	0x200015b0
 8008e58:	2000160c 	.word	0x2000160c
 8008e5c:	20001614 	.word	0x20001614
 8008e60:	200015fc 	.word	0x200015fc
 8008e64:	20001124 	.word	0x20001124
 8008e68:	20001120 	.word	0x20001120
 8008e6c:	20001604 	.word	0x20001604
 8008e70:	20001608 	.word	0x20001608

08008e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e7a:	4b29      	ldr	r3, [pc, #164]	@ (8008f20 <vTaskSwitchContext+0xac>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e82:	4b28      	ldr	r3, [pc, #160]	@ (8008f24 <vTaskSwitchContext+0xb0>)
 8008e84:	2201      	movs	r2, #1
 8008e86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e88:	e044      	b.n	8008f14 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008e8a:	4b26      	ldr	r3, [pc, #152]	@ (8008f24 <vTaskSwitchContext+0xb0>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e90:	4b25      	ldr	r3, [pc, #148]	@ (8008f28 <vTaskSwitchContext+0xb4>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	e013      	b.n	8008ec0 <vTaskSwitchContext+0x4c>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10d      	bne.n	8008eba <vTaskSwitchContext+0x46>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	b672      	cpsid	i
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	b662      	cpsie	i
 8008eb2:	607b      	str	r3, [r7, #4]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <vTaskSwitchContext+0x42>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	491a      	ldr	r1, [pc, #104]	@ (8008f2c <vTaskSwitchContext+0xb8>)
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	440b      	add	r3, r1
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0e1      	beq.n	8008e98 <vTaskSwitchContext+0x24>
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4a13      	ldr	r2, [pc, #76]	@ (8008f2c <vTaskSwitchContext+0xb8>)
 8008ee0:	4413      	add	r3, r2
 8008ee2:	60bb      	str	r3, [r7, #8]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	605a      	str	r2, [r3, #4]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d104      	bne.n	8008f04 <vTaskSwitchContext+0x90>
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	605a      	str	r2, [r3, #4]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	4a09      	ldr	r2, [pc, #36]	@ (8008f30 <vTaskSwitchContext+0xbc>)
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	4a06      	ldr	r2, [pc, #24]	@ (8008f28 <vTaskSwitchContext+0xb4>)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6013      	str	r3, [r2, #0]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	2000161c 	.word	0x2000161c
 8008f24:	20001608 	.word	0x20001608
 8008f28:	200015fc 	.word	0x200015fc
 8008f2c:	20001124 	.word	0x20001124
 8008f30:	20001120 	.word	0x20001120

08008f34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10d      	bne.n	8008f60 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f48:	b672      	cpsid	i
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	b662      	cpsie	i
 8008f58:	60fb      	str	r3, [r7, #12]
}
 8008f5a:	bf00      	nop
 8008f5c:	bf00      	nop
 8008f5e:	e7fd      	b.n	8008f5c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f60:	4b07      	ldr	r3, [pc, #28]	@ (8008f80 <vTaskPlaceOnEventList+0x4c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3318      	adds	r3, #24
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7fe fe3a 	bl	8007be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f6e:	2101      	movs	r1, #1
 8008f70:	6838      	ldr	r0, [r7, #0]
 8008f72:	f000 fa8f 	bl	8009494 <prvAddCurrentTaskToDelayedList>
}
 8008f76:	bf00      	nop
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	20001120 	.word	0x20001120

08008f84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10d      	bne.n	8008fb2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9a:	b672      	cpsid	i
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	b662      	cpsie	i
 8008faa:	617b      	str	r3, [r7, #20]
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	e7fd      	b.n	8008fae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fdc <vTaskPlaceOnEventListRestricted+0x58>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3318      	adds	r3, #24
 8008fb8:	4619      	mov	r1, r3
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7fe fded 	bl	8007b9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8008fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	68b8      	ldr	r0, [r7, #8]
 8008fd0:	f000 fa60 	bl	8009494 <prvAddCurrentTaskToDelayedList>
	}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20001120 	.word	0x20001120

08008fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10d      	bne.n	8009012 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffa:	b672      	cpsid	i
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	b662      	cpsie	i
 800900a:	60fb      	str	r3, [r7, #12]
}
 800900c:	bf00      	nop
 800900e:	bf00      	nop
 8009010:	e7fd      	b.n	800900e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	3318      	adds	r3, #24
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe fe1c 	bl	8007c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800901c:	4b1d      	ldr	r3, [pc, #116]	@ (8009094 <xTaskRemoveFromEventList+0xb4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d11d      	bne.n	8009060 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	3304      	adds	r3, #4
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fe13 	bl	8007c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009032:	4b19      	ldr	r3, [pc, #100]	@ (8009098 <xTaskRemoveFromEventList+0xb8>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	429a      	cmp	r2, r3
 8009038:	d903      	bls.n	8009042 <xTaskRemoveFromEventList+0x62>
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903e:	4a16      	ldr	r2, [pc, #88]	@ (8009098 <xTaskRemoveFromEventList+0xb8>)
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4a13      	ldr	r2, [pc, #76]	@ (800909c <xTaskRemoveFromEventList+0xbc>)
 8009050:	441a      	add	r2, r3
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3304      	adds	r3, #4
 8009056:	4619      	mov	r1, r3
 8009058:	4610      	mov	r0, r2
 800905a:	f7fe fd9e 	bl	8007b9a <vListInsertEnd>
 800905e:	e005      	b.n	800906c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	3318      	adds	r3, #24
 8009064:	4619      	mov	r1, r3
 8009066:	480e      	ldr	r0, [pc, #56]	@ (80090a0 <xTaskRemoveFromEventList+0xc0>)
 8009068:	f7fe fd97 	bl	8007b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009070:	4b0c      	ldr	r3, [pc, #48]	@ (80090a4 <xTaskRemoveFromEventList+0xc4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009076:	429a      	cmp	r2, r3
 8009078:	d905      	bls.n	8009086 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800907a:	2301      	movs	r3, #1
 800907c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800907e:	4b0a      	ldr	r3, [pc, #40]	@ (80090a8 <xTaskRemoveFromEventList+0xc8>)
 8009080:	2201      	movs	r2, #1
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	e001      	b.n	800908a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009086:	2300      	movs	r3, #0
 8009088:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800908a:	697b      	ldr	r3, [r7, #20]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	2000161c 	.word	0x2000161c
 8009098:	200015fc 	.word	0x200015fc
 800909c:	20001124 	.word	0x20001124
 80090a0:	200015b4 	.word	0x200015b4
 80090a4:	20001120 	.word	0x20001120
 80090a8:	20001608 	.word	0x20001608

080090ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090b4:	4b06      	ldr	r3, [pc, #24]	@ (80090d0 <vTaskInternalSetTimeOutState+0x24>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090bc:	4b05      	ldr	r3, [pc, #20]	@ (80090d4 <vTaskInternalSetTimeOutState+0x28>)
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	605a      	str	r2, [r3, #4]
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	2000160c 	.word	0x2000160c
 80090d4:	200015f8 	.word	0x200015f8

080090d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10d      	bne.n	8009104 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ec:	b672      	cpsid	i
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	b662      	cpsie	i
 80090fc:	613b      	str	r3, [r7, #16]
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10d      	bne.n	8009126 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910e:	b672      	cpsid	i
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	b662      	cpsie	i
 800911e:	60fb      	str	r3, [r7, #12]
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	e7fd      	b.n	8009122 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009126:	f000 fe81 	bl	8009e2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800912a:	4b1d      	ldr	r3, [pc, #116]	@ (80091a0 <xTaskCheckForTimeOut+0xc8>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009142:	d102      	bne.n	800914a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009144:	2300      	movs	r3, #0
 8009146:	61fb      	str	r3, [r7, #28]
 8009148:	e023      	b.n	8009192 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4b15      	ldr	r3, [pc, #84]	@ (80091a4 <xTaskCheckForTimeOut+0xcc>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d007      	beq.n	8009166 <xTaskCheckForTimeOut+0x8e>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	429a      	cmp	r2, r3
 800915e:	d302      	bcc.n	8009166 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009160:	2301      	movs	r3, #1
 8009162:	61fb      	str	r3, [r7, #28]
 8009164:	e015      	b.n	8009192 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	429a      	cmp	r2, r3
 800916e:	d20b      	bcs.n	8009188 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	1ad2      	subs	r2, r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff ff95 	bl	80090ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009182:	2300      	movs	r3, #0
 8009184:	61fb      	str	r3, [r7, #28]
 8009186:	e004      	b.n	8009192 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800918e:	2301      	movs	r3, #1
 8009190:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009192:	f000 fe81 	bl	8009e98 <vPortExitCritical>

	return xReturn;
 8009196:	69fb      	ldr	r3, [r7, #28]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	200015f8 	.word	0x200015f8
 80091a4:	2000160c 	.word	0x2000160c

080091a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091ac:	4b03      	ldr	r3, [pc, #12]	@ (80091bc <vTaskMissedYield+0x14>)
 80091ae:	2201      	movs	r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
}
 80091b2:	bf00      	nop
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20001608 	.word	0x20001608

080091c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091c8:	f000 f852 	bl	8009270 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091cc:	4b06      	ldr	r3, [pc, #24]	@ (80091e8 <prvIdleTask+0x28>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d9f9      	bls.n	80091c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091d4:	4b05      	ldr	r3, [pc, #20]	@ (80091ec <prvIdleTask+0x2c>)
 80091d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091e4:	e7f0      	b.n	80091c8 <prvIdleTask+0x8>
 80091e6:	bf00      	nop
 80091e8:	20001124 	.word	0x20001124
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091f6:	2300      	movs	r3, #0
 80091f8:	607b      	str	r3, [r7, #4]
 80091fa:	e00c      	b.n	8009216 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4a12      	ldr	r2, [pc, #72]	@ (8009250 <prvInitialiseTaskLists+0x60>)
 8009208:	4413      	add	r3, r2
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fc98 	bl	8007b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3301      	adds	r3, #1
 8009214:	607b      	str	r3, [r7, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b37      	cmp	r3, #55	@ 0x37
 800921a:	d9ef      	bls.n	80091fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800921c:	480d      	ldr	r0, [pc, #52]	@ (8009254 <prvInitialiseTaskLists+0x64>)
 800921e:	f7fe fc8f 	bl	8007b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009222:	480d      	ldr	r0, [pc, #52]	@ (8009258 <prvInitialiseTaskLists+0x68>)
 8009224:	f7fe fc8c 	bl	8007b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009228:	480c      	ldr	r0, [pc, #48]	@ (800925c <prvInitialiseTaskLists+0x6c>)
 800922a:	f7fe fc89 	bl	8007b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800922e:	480c      	ldr	r0, [pc, #48]	@ (8009260 <prvInitialiseTaskLists+0x70>)
 8009230:	f7fe fc86 	bl	8007b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009234:	480b      	ldr	r0, [pc, #44]	@ (8009264 <prvInitialiseTaskLists+0x74>)
 8009236:	f7fe fc83 	bl	8007b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800923a:	4b0b      	ldr	r3, [pc, #44]	@ (8009268 <prvInitialiseTaskLists+0x78>)
 800923c:	4a05      	ldr	r2, [pc, #20]	@ (8009254 <prvInitialiseTaskLists+0x64>)
 800923e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009240:	4b0a      	ldr	r3, [pc, #40]	@ (800926c <prvInitialiseTaskLists+0x7c>)
 8009242:	4a05      	ldr	r2, [pc, #20]	@ (8009258 <prvInitialiseTaskLists+0x68>)
 8009244:	601a      	str	r2, [r3, #0]
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20001124 	.word	0x20001124
 8009254:	20001584 	.word	0x20001584
 8009258:	20001598 	.word	0x20001598
 800925c:	200015b4 	.word	0x200015b4
 8009260:	200015c8 	.word	0x200015c8
 8009264:	200015e0 	.word	0x200015e0
 8009268:	200015ac 	.word	0x200015ac
 800926c:	200015b0 	.word	0x200015b0

08009270 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009276:	e019      	b.n	80092ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009278:	f000 fdd8 	bl	8009e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800927c:	4b10      	ldr	r3, [pc, #64]	@ (80092c0 <prvCheckTasksWaitingTermination+0x50>)
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3304      	adds	r3, #4
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fce3 	bl	8007c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800928e:	4b0d      	ldr	r3, [pc, #52]	@ (80092c4 <prvCheckTasksWaitingTermination+0x54>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3b01      	subs	r3, #1
 8009294:	4a0b      	ldr	r2, [pc, #44]	@ (80092c4 <prvCheckTasksWaitingTermination+0x54>)
 8009296:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009298:	4b0b      	ldr	r3, [pc, #44]	@ (80092c8 <prvCheckTasksWaitingTermination+0x58>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3b01      	subs	r3, #1
 800929e:	4a0a      	ldr	r2, [pc, #40]	@ (80092c8 <prvCheckTasksWaitingTermination+0x58>)
 80092a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092a2:	f000 fdf9 	bl	8009e98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f810 	bl	80092cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092ac:	4b06      	ldr	r3, [pc, #24]	@ (80092c8 <prvCheckTasksWaitingTermination+0x58>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e1      	bne.n	8009278 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	200015c8 	.word	0x200015c8
 80092c4:	200015f4 	.word	0x200015f4
 80092c8:	200015dc 	.word	0x200015dc

080092cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d108      	bne.n	80092f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 ff9e 	bl	800a224 <vPortFree>
				vPortFree( pxTCB );
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 ff9b 	bl	800a224 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092ee:	e01b      	b.n	8009328 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d103      	bne.n	8009302 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 ff92 	bl	800a224 <vPortFree>
	}
 8009300:	e012      	b.n	8009328 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009308:	2b02      	cmp	r3, #2
 800930a:	d00d      	beq.n	8009328 <prvDeleteTCB+0x5c>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009310:	b672      	cpsid	i
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	b662      	cpsie	i
 8009320:	60fb      	str	r3, [r7, #12]
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	e7fd      	b.n	8009324 <prvDeleteTCB+0x58>
	}
 8009328:	bf00      	nop
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009336:	4b0c      	ldr	r3, [pc, #48]	@ (8009368 <prvResetNextTaskUnblockTime+0x38>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009340:	4b0a      	ldr	r3, [pc, #40]	@ (800936c <prvResetNextTaskUnblockTime+0x3c>)
 8009342:	f04f 32ff 	mov.w	r2, #4294967295
 8009346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009348:	e008      	b.n	800935c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800934a:	4b07      	ldr	r3, [pc, #28]	@ (8009368 <prvResetNextTaskUnblockTime+0x38>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	4a04      	ldr	r2, [pc, #16]	@ (800936c <prvResetNextTaskUnblockTime+0x3c>)
 800935a:	6013      	str	r3, [r2, #0]
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	200015ac 	.word	0x200015ac
 800936c:	20001614 	.word	0x20001614

08009370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009376:	4b0b      	ldr	r3, [pc, #44]	@ (80093a4 <xTaskGetSchedulerState+0x34>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d102      	bne.n	8009384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800937e:	2301      	movs	r3, #1
 8009380:	607b      	str	r3, [r7, #4]
 8009382:	e008      	b.n	8009396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009384:	4b08      	ldr	r3, [pc, #32]	@ (80093a8 <xTaskGetSchedulerState+0x38>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800938c:	2302      	movs	r3, #2
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	e001      	b.n	8009396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009392:	2300      	movs	r3, #0
 8009394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009396:	687b      	ldr	r3, [r7, #4]
	}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	20001600 	.word	0x20001600
 80093a8:	2000161c 	.word	0x2000161c

080093ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d05c      	beq.n	800947c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093c2:	4b31      	ldr	r3, [pc, #196]	@ (8009488 <xTaskPriorityDisinherit+0xdc>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d00d      	beq.n	80093e8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d0:	b672      	cpsid	i
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	b662      	cpsie	i
 80093e0:	60fb      	str	r3, [r7, #12]
}
 80093e2:	bf00      	nop
 80093e4:	bf00      	nop
 80093e6:	e7fd      	b.n	80093e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10d      	bne.n	800940c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f4:	b672      	cpsid	i
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	b662      	cpsie	i
 8009404:	60bb      	str	r3, [r7, #8]
}
 8009406:	bf00      	nop
 8009408:	bf00      	nop
 800940a:	e7fd      	b.n	8009408 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009410:	1e5a      	subs	r2, r3, #1
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800941e:	429a      	cmp	r2, r3
 8009420:	d02c      	beq.n	800947c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009426:	2b00      	cmp	r3, #0
 8009428:	d128      	bne.n	800947c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	3304      	adds	r3, #4
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fc10 	bl	8007c54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009440:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800944c:	4b0f      	ldr	r3, [pc, #60]	@ (800948c <xTaskPriorityDisinherit+0xe0>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	429a      	cmp	r2, r3
 8009452:	d903      	bls.n	800945c <xTaskPriorityDisinherit+0xb0>
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009458:	4a0c      	ldr	r2, [pc, #48]	@ (800948c <xTaskPriorityDisinherit+0xe0>)
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009460:	4613      	mov	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	4413      	add	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4a09      	ldr	r2, [pc, #36]	@ (8009490 <xTaskPriorityDisinherit+0xe4>)
 800946a:	441a      	add	r2, r3
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	3304      	adds	r3, #4
 8009470:	4619      	mov	r1, r3
 8009472:	4610      	mov	r0, r2
 8009474:	f7fe fb91 	bl	8007b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009478:	2301      	movs	r3, #1
 800947a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800947c:	697b      	ldr	r3, [r7, #20]
	}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20001120 	.word	0x20001120
 800948c:	200015fc 	.word	0x200015fc
 8009490:	20001124 	.word	0x20001124

08009494 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800949e:	4b21      	ldr	r3, [pc, #132]	@ (8009524 <prvAddCurrentTaskToDelayedList+0x90>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094a4:	4b20      	ldr	r3, [pc, #128]	@ (8009528 <prvAddCurrentTaskToDelayedList+0x94>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fbd2 	bl	8007c54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b6:	d10a      	bne.n	80094ce <prvAddCurrentTaskToDelayedList+0x3a>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094be:	4b1a      	ldr	r3, [pc, #104]	@ (8009528 <prvAddCurrentTaskToDelayedList+0x94>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4619      	mov	r1, r3
 80094c6:	4819      	ldr	r0, [pc, #100]	@ (800952c <prvAddCurrentTaskToDelayedList+0x98>)
 80094c8:	f7fe fb67 	bl	8007b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094cc:	e026      	b.n	800951c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4413      	add	r3, r2
 80094d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094d6:	4b14      	ldr	r3, [pc, #80]	@ (8009528 <prvAddCurrentTaskToDelayedList+0x94>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d209      	bcs.n	80094fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094e6:	4b12      	ldr	r3, [pc, #72]	@ (8009530 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009528 <prvAddCurrentTaskToDelayedList+0x94>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f7fe fb75 	bl	8007be2 <vListInsert>
}
 80094f8:	e010      	b.n	800951c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009534 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009528 <prvAddCurrentTaskToDelayedList+0x94>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3304      	adds	r3, #4
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	f7fe fb6b 	bl	8007be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800950c:	4b0a      	ldr	r3, [pc, #40]	@ (8009538 <prvAddCurrentTaskToDelayedList+0xa4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	429a      	cmp	r2, r3
 8009514:	d202      	bcs.n	800951c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009516:	4a08      	ldr	r2, [pc, #32]	@ (8009538 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6013      	str	r3, [r2, #0]
}
 800951c:	bf00      	nop
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	200015f8 	.word	0x200015f8
 8009528:	20001120 	.word	0x20001120
 800952c:	200015e0 	.word	0x200015e0
 8009530:	200015b0 	.word	0x200015b0
 8009534:	200015ac 	.word	0x200015ac
 8009538:	20001614 	.word	0x20001614

0800953c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08a      	sub	sp, #40	@ 0x28
 8009540:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009542:	2300      	movs	r3, #0
 8009544:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009546:	f000 fb21 	bl	8009b8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800954a:	4b1e      	ldr	r3, [pc, #120]	@ (80095c4 <xTimerCreateTimerTask+0x88>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d021      	beq.n	8009596 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009556:	2300      	movs	r3, #0
 8009558:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800955a:	1d3a      	adds	r2, r7, #4
 800955c:	f107 0108 	add.w	r1, r7, #8
 8009560:	f107 030c 	add.w	r3, r7, #12
 8009564:	4618      	mov	r0, r3
 8009566:	f7fe fad1 	bl	8007b0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	9202      	str	r2, [sp, #8]
 8009572:	9301      	str	r3, [sp, #4]
 8009574:	2302      	movs	r3, #2
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	2300      	movs	r3, #0
 800957a:	460a      	mov	r2, r1
 800957c:	4912      	ldr	r1, [pc, #72]	@ (80095c8 <xTimerCreateTimerTask+0x8c>)
 800957e:	4813      	ldr	r0, [pc, #76]	@ (80095cc <xTimerCreateTimerTask+0x90>)
 8009580:	f7ff f8ac 	bl	80086dc <xTaskCreateStatic>
 8009584:	4603      	mov	r3, r0
 8009586:	4a12      	ldr	r2, [pc, #72]	@ (80095d0 <xTimerCreateTimerTask+0x94>)
 8009588:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800958a:	4b11      	ldr	r3, [pc, #68]	@ (80095d0 <xTimerCreateTimerTask+0x94>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009592:	2301      	movs	r3, #1
 8009594:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10d      	bne.n	80095b8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	b672      	cpsid	i
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	b662      	cpsie	i
 80095b0:	613b      	str	r3, [r7, #16]
}
 80095b2:	bf00      	nop
 80095b4:	bf00      	nop
 80095b6:	e7fd      	b.n	80095b4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80095b8:	697b      	ldr	r3, [r7, #20]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	20001650 	.word	0x20001650
 80095c8:	0800b0ac 	.word	0x0800b0ac
 80095cc:	08009715 	.word	0x08009715
 80095d0:	20001654 	.word	0x20001654

080095d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08a      	sub	sp, #40	@ 0x28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10d      	bne.n	8009608 <xTimerGenericCommand+0x34>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f0:	b672      	cpsid	i
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	b662      	cpsie	i
 8009600:	623b      	str	r3, [r7, #32]
}
 8009602:	bf00      	nop
 8009604:	bf00      	nop
 8009606:	e7fd      	b.n	8009604 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009608:	4b19      	ldr	r3, [pc, #100]	@ (8009670 <xTimerGenericCommand+0x9c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d02a      	beq.n	8009666 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	2b05      	cmp	r3, #5
 8009620:	dc18      	bgt.n	8009654 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009622:	f7ff fea5 	bl	8009370 <xTaskGetSchedulerState>
 8009626:	4603      	mov	r3, r0
 8009628:	2b02      	cmp	r3, #2
 800962a:	d109      	bne.n	8009640 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800962c:	4b10      	ldr	r3, [pc, #64]	@ (8009670 <xTimerGenericCommand+0x9c>)
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	f107 0110 	add.w	r1, r7, #16
 8009634:	2300      	movs	r3, #0
 8009636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009638:	f7fe fc4c 	bl	8007ed4 <xQueueGenericSend>
 800963c:	6278      	str	r0, [r7, #36]	@ 0x24
 800963e:	e012      	b.n	8009666 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009640:	4b0b      	ldr	r3, [pc, #44]	@ (8009670 <xTimerGenericCommand+0x9c>)
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	f107 0110 	add.w	r1, r7, #16
 8009648:	2300      	movs	r3, #0
 800964a:	2200      	movs	r2, #0
 800964c:	f7fe fc42 	bl	8007ed4 <xQueueGenericSend>
 8009650:	6278      	str	r0, [r7, #36]	@ 0x24
 8009652:	e008      	b.n	8009666 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009654:	4b06      	ldr	r3, [pc, #24]	@ (8009670 <xTimerGenericCommand+0x9c>)
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	f107 0110 	add.w	r1, r7, #16
 800965c:	2300      	movs	r3, #0
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	f7fe fd42 	bl	80080e8 <xQueueGenericSendFromISR>
 8009664:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009668:	4618      	mov	r0, r3
 800966a:	3728      	adds	r7, #40	@ 0x28
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20001650 	.word	0x20001650

08009674 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b088      	sub	sp, #32
 8009678:	af02      	add	r7, sp, #8
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800967e:	4b24      	ldr	r3, [pc, #144]	@ (8009710 <prvProcessExpiredTimer+0x9c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	3304      	adds	r3, #4
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fae1 	bl	8007c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	d025      	beq.n	80096ec <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	18d1      	adds	r1, r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	6978      	ldr	r0, [r7, #20]
 80096ae:	f000 f8d7 	bl	8009860 <prvInsertTimerInActiveList>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d022      	beq.n	80096fe <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096b8:	2300      	movs	r3, #0
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	2300      	movs	r3, #0
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	2100      	movs	r1, #0
 80096c2:	6978      	ldr	r0, [r7, #20]
 80096c4:	f7ff ff86 	bl	80095d4 <xTimerGenericCommand>
 80096c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d116      	bne.n	80096fe <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	b672      	cpsid	i
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	b662      	cpsie	i
 80096e4:	60fb      	str	r3, [r7, #12]
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	e7fd      	b.n	80096e8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096f2:	f023 0301 	bic.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	6978      	ldr	r0, [r7, #20]
 8009704:	4798      	blx	r3
}
 8009706:	bf00      	nop
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20001648 	.word	0x20001648

08009714 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800971c:	f107 0308 	add.w	r3, r7, #8
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f859 	bl	80097d8 <prvGetNextExpireTime>
 8009726:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	4619      	mov	r1, r3
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f805 	bl	800973c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009732:	f000 f8d7 	bl	80098e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009736:	bf00      	nop
 8009738:	e7f0      	b.n	800971c <prvTimerTask+0x8>
	...

0800973c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009746:	f7ff fa1b 	bl	8008b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800974a:	f107 0308 	add.w	r3, r7, #8
 800974e:	4618      	mov	r0, r3
 8009750:	f000 f866 	bl	8009820 <prvSampleTimeNow>
 8009754:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d130      	bne.n	80097be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10a      	bne.n	8009778 <prvProcessTimerOrBlockTask+0x3c>
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	429a      	cmp	r2, r3
 8009768:	d806      	bhi.n	8009778 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800976a:	f7ff fa17 	bl	8008b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff ff7f 	bl	8009674 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009776:	e024      	b.n	80097c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d008      	beq.n	8009790 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800977e:	4b13      	ldr	r3, [pc, #76]	@ (80097cc <prvProcessTimerOrBlockTask+0x90>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <prvProcessTimerOrBlockTask+0x50>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <prvProcessTimerOrBlockTask+0x52>
 800978c:	2300      	movs	r3, #0
 800978e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009790:	4b0f      	ldr	r3, [pc, #60]	@ (80097d0 <prvProcessTimerOrBlockTask+0x94>)
 8009792:	6818      	ldr	r0, [r3, #0]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	4619      	mov	r1, r3
 800979e:	f7fe ff69 	bl	8008674 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097a2:	f7ff f9fb 	bl	8008b9c <xTaskResumeAll>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097ac:	4b09      	ldr	r3, [pc, #36]	@ (80097d4 <prvProcessTimerOrBlockTask+0x98>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	f3bf 8f6f 	isb	sy
}
 80097bc:	e001      	b.n	80097c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097be:	f7ff f9ed 	bl	8008b9c <xTaskResumeAll>
}
 80097c2:	bf00      	nop
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	2000164c 	.word	0x2000164c
 80097d0:	20001650 	.word	0x20001650
 80097d4:	e000ed04 	.word	0xe000ed04

080097d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097e0:	4b0e      	ldr	r3, [pc, #56]	@ (800981c <prvGetNextExpireTime+0x44>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <prvGetNextExpireTime+0x16>
 80097ea:	2201      	movs	r2, #1
 80097ec:	e000      	b.n	80097f0 <prvGetNextExpireTime+0x18>
 80097ee:	2200      	movs	r2, #0
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d105      	bne.n	8009808 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097fc:	4b07      	ldr	r3, [pc, #28]	@ (800981c <prvGetNextExpireTime+0x44>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	e001      	b.n	800980c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800980c:	68fb      	ldr	r3, [r7, #12]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20001648 	.word	0x20001648

08009820 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009828:	f7ff fa58 	bl	8008cdc <xTaskGetTickCount>
 800982c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800982e:	4b0b      	ldr	r3, [pc, #44]	@ (800985c <prvSampleTimeNow+0x3c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	429a      	cmp	r2, r3
 8009836:	d205      	bcs.n	8009844 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009838:	f000 f940 	bl	8009abc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	e002      	b.n	800984a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800984a:	4a04      	ldr	r2, [pc, #16]	@ (800985c <prvSampleTimeNow+0x3c>)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009850:	68fb      	ldr	r3, [r7, #12]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20001658 	.word	0x20001658

08009860 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800986e:	2300      	movs	r3, #0
 8009870:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	429a      	cmp	r2, r3
 8009884:	d812      	bhi.n	80098ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	1ad2      	subs	r2, r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	429a      	cmp	r2, r3
 8009892:	d302      	bcc.n	800989a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009894:	2301      	movs	r3, #1
 8009896:	617b      	str	r3, [r7, #20]
 8009898:	e01b      	b.n	80098d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800989a:	4b10      	ldr	r3, [pc, #64]	@ (80098dc <prvInsertTimerInActiveList+0x7c>)
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7fe f99c 	bl	8007be2 <vListInsert>
 80098aa:	e012      	b.n	80098d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d206      	bcs.n	80098c2 <prvInsertTimerInActiveList+0x62>
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d302      	bcc.n	80098c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098bc:	2301      	movs	r3, #1
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	e007      	b.n	80098d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098c2:	4b07      	ldr	r3, [pc, #28]	@ (80098e0 <prvInsertTimerInActiveList+0x80>)
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3304      	adds	r3, #4
 80098ca:	4619      	mov	r1, r3
 80098cc:	4610      	mov	r0, r2
 80098ce:	f7fe f988 	bl	8007be2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098d2:	697b      	ldr	r3, [r7, #20]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	2000164c 	.word	0x2000164c
 80098e0:	20001648 	.word	0x20001648

080098e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08e      	sub	sp, #56	@ 0x38
 80098e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098ea:	e0d4      	b.n	8009a96 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	da1b      	bge.n	800992a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098f2:	1d3b      	adds	r3, r7, #4
 80098f4:	3304      	adds	r3, #4
 80098f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10d      	bne.n	800991a <prvProcessReceivedCommands+0x36>
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009902:	b672      	cpsid	i
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	b662      	cpsie	i
 8009912:	61fb      	str	r3, [r7, #28]
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	e7fd      	b.n	8009916 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800991a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009920:	6850      	ldr	r0, [r2, #4]
 8009922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009924:	6892      	ldr	r2, [r2, #8]
 8009926:	4611      	mov	r1, r2
 8009928:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	f2c0 80b2 	blt.w	8009a96 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d004      	beq.n	8009948 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800993e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009940:	3304      	adds	r3, #4
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe f986 	bl	8007c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009948:	463b      	mov	r3, r7
 800994a:	4618      	mov	r0, r3
 800994c:	f7ff ff68 	bl	8009820 <prvSampleTimeNow>
 8009950:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b09      	cmp	r3, #9
 8009956:	f200 809b 	bhi.w	8009a90 <prvProcessReceivedCommands+0x1ac>
 800995a:	a201      	add	r2, pc, #4	@ (adr r2, 8009960 <prvProcessReceivedCommands+0x7c>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	08009989 	.word	0x08009989
 8009964:	08009989 	.word	0x08009989
 8009968:	08009989 	.word	0x08009989
 800996c:	08009a03 	.word	0x08009a03
 8009970:	08009a17 	.word	0x08009a17
 8009974:	08009a67 	.word	0x08009a67
 8009978:	08009989 	.word	0x08009989
 800997c:	08009989 	.word	0x08009989
 8009980:	08009a03 	.word	0x08009a03
 8009984:	08009a17 	.word	0x08009a17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800998e:	f043 0301 	orr.w	r3, r3, #1
 8009992:	b2da      	uxtb	r2, r3
 8009994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009996:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	18d1      	adds	r1, r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099a8:	f7ff ff5a 	bl	8009860 <prvInsertTimerInActiveList>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d070      	beq.n	8009a94 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d065      	beq.n	8009a94 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	441a      	add	r2, r3
 80099d0:	2300      	movs	r3, #0
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	2100      	movs	r1, #0
 80099d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099da:	f7ff fdfb 	bl	80095d4 <xTimerGenericCommand>
 80099de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d156      	bne.n	8009a94 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ea:	b672      	cpsid	i
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	b662      	cpsie	i
 80099fa:	61bb      	str	r3, [r7, #24]
}
 80099fc:	bf00      	nop
 80099fe:	bf00      	nop
 8009a00:	e7fd      	b.n	80099fe <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a08:	f023 0301 	bic.w	r3, r3, #1
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a14:	e03f      	b.n	8009a96 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a1c:	f043 0301 	orr.w	r3, r3, #1
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10d      	bne.n	8009a52 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	b672      	cpsid	i
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	b662      	cpsie	i
 8009a4a:	617b      	str	r3, [r7, #20]
}
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	e7fd      	b.n	8009a4e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a58:	18d1      	adds	r1, r2, r3
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a60:	f7ff fefe 	bl	8009860 <prvInsertTimerInActiveList>
					break;
 8009a64:	e017      	b.n	8009a96 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a6c:	f003 0302 	and.w	r3, r3, #2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d103      	bne.n	8009a7c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009a74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a76:	f000 fbd5 	bl	800a224 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a7a:	e00c      	b.n	8009a96 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a82:	f023 0301 	bic.w	r3, r3, #1
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a8e:	e002      	b.n	8009a96 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009a90:	bf00      	nop
 8009a92:	e000      	b.n	8009a96 <prvProcessReceivedCommands+0x1b2>
					break;
 8009a94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a96:	4b08      	ldr	r3, [pc, #32]	@ (8009ab8 <prvProcessReceivedCommands+0x1d4>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	1d39      	adds	r1, r7, #4
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fe fbc6 	bl	8008230 <xQueueReceive>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f47f af20 	bne.w	80098ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	3730      	adds	r7, #48	@ 0x30
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20001650 	.word	0x20001650

08009abc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ac2:	e04b      	b.n	8009b5c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8009b84 <prvSwitchTimerLists+0xc8>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ace:	4b2d      	ldr	r3, [pc, #180]	@ (8009b84 <prvSwitchTimerLists+0xc8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe f8b9 	bl	8007c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d031      	beq.n	8009b5c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	4413      	add	r3, r2
 8009b00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d90e      	bls.n	8009b28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b16:	4b1b      	ldr	r3, [pc, #108]	@ (8009b84 <prvSwitchTimerLists+0xc8>)
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	4619      	mov	r1, r3
 8009b20:	4610      	mov	r0, r2
 8009b22:	f7fe f85e 	bl	8007be2 <vListInsert>
 8009b26:	e019      	b.n	8009b5c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	2100      	movs	r1, #0
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7ff fd4e 	bl	80095d4 <xTimerGenericCommand>
 8009b38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10d      	bne.n	8009b5c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b44:	b672      	cpsid	i
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	b662      	cpsie	i
 8009b54:	603b      	str	r3, [r7, #0]
}
 8009b56:	bf00      	nop
 8009b58:	bf00      	nop
 8009b5a:	e7fd      	b.n	8009b58 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b5c:	4b09      	ldr	r3, [pc, #36]	@ (8009b84 <prvSwitchTimerLists+0xc8>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1ae      	bne.n	8009ac4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b66:	4b07      	ldr	r3, [pc, #28]	@ (8009b84 <prvSwitchTimerLists+0xc8>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b6c:	4b06      	ldr	r3, [pc, #24]	@ (8009b88 <prvSwitchTimerLists+0xcc>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a04      	ldr	r2, [pc, #16]	@ (8009b84 <prvSwitchTimerLists+0xc8>)
 8009b72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b74:	4a04      	ldr	r2, [pc, #16]	@ (8009b88 <prvSwitchTimerLists+0xcc>)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	6013      	str	r3, [r2, #0]
}
 8009b7a:	bf00      	nop
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20001648 	.word	0x20001648
 8009b88:	2000164c 	.word	0x2000164c

08009b8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b92:	f000 f94b 	bl	8009e2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b96:	4b15      	ldr	r3, [pc, #84]	@ (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d120      	bne.n	8009be0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b9e:	4814      	ldr	r0, [pc, #80]	@ (8009bf0 <prvCheckForValidListAndQueue+0x64>)
 8009ba0:	f7fd ffce 	bl	8007b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ba4:	4813      	ldr	r0, [pc, #76]	@ (8009bf4 <prvCheckForValidListAndQueue+0x68>)
 8009ba6:	f7fd ffcb 	bl	8007b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009baa:	4b13      	ldr	r3, [pc, #76]	@ (8009bf8 <prvCheckForValidListAndQueue+0x6c>)
 8009bac:	4a10      	ldr	r2, [pc, #64]	@ (8009bf0 <prvCheckForValidListAndQueue+0x64>)
 8009bae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009bb0:	4b12      	ldr	r3, [pc, #72]	@ (8009bfc <prvCheckForValidListAndQueue+0x70>)
 8009bb2:	4a10      	ldr	r2, [pc, #64]	@ (8009bf4 <prvCheckForValidListAndQueue+0x68>)
 8009bb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	4b11      	ldr	r3, [pc, #68]	@ (8009c00 <prvCheckForValidListAndQueue+0x74>)
 8009bbc:	4a11      	ldr	r2, [pc, #68]	@ (8009c04 <prvCheckForValidListAndQueue+0x78>)
 8009bbe:	2110      	movs	r1, #16
 8009bc0:	200a      	movs	r0, #10
 8009bc2:	f7fe f8dd 	bl	8007d80 <xQueueGenericCreateStatic>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4a08      	ldr	r2, [pc, #32]	@ (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009bca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bcc:	4b07      	ldr	r3, [pc, #28]	@ (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bd4:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	490b      	ldr	r1, [pc, #44]	@ (8009c08 <prvCheckForValidListAndQueue+0x7c>)
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe fd20 	bl	8008620 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009be0:	f000 f95a 	bl	8009e98 <vPortExitCritical>
}
 8009be4:	bf00      	nop
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20001650 	.word	0x20001650
 8009bf0:	20001620 	.word	0x20001620
 8009bf4:	20001634 	.word	0x20001634
 8009bf8:	20001648 	.word	0x20001648
 8009bfc:	2000164c 	.word	0x2000164c
 8009c00:	200016fc 	.word	0x200016fc
 8009c04:	2000165c 	.word	0x2000165c
 8009c08:	0800b0b4 	.word	0x0800b0b4

08009c0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3b04      	subs	r3, #4
 8009c1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3b04      	subs	r3, #4
 8009c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f023 0201 	bic.w	r2, r3, #1
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3b04      	subs	r3, #4
 8009c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8009c70 <pxPortInitialiseStack+0x64>)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3b14      	subs	r3, #20
 8009c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3b04      	subs	r3, #4
 8009c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f06f 0202 	mvn.w	r2, #2
 8009c5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3b20      	subs	r3, #32
 8009c60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c62:	68fb      	ldr	r3, [r7, #12]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	08009c75 	.word	0x08009c75

08009c74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c7e:	4b15      	ldr	r3, [pc, #84]	@ (8009cd4 <prvTaskExitError+0x60>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c86:	d00d      	beq.n	8009ca4 <prvTaskExitError+0x30>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8c:	b672      	cpsid	i
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	b662      	cpsie	i
 8009c9c:	60fb      	str	r3, [r7, #12]
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	e7fd      	b.n	8009ca0 <prvTaskExitError+0x2c>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca8:	b672      	cpsid	i
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	b662      	cpsie	i
 8009cb8:	60bb      	str	r3, [r7, #8]
}
 8009cba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cbc:	bf00      	nop
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d0fc      	beq.n	8009cbe <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	2000000c 	.word	0x2000000c
	...

08009ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ce0:	4b07      	ldr	r3, [pc, #28]	@ (8009d00 <pxCurrentTCBConst2>)
 8009ce2:	6819      	ldr	r1, [r3, #0]
 8009ce4:	6808      	ldr	r0, [r1, #0]
 8009ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cea:	f380 8809 	msr	PSP, r0
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f04f 0000 	mov.w	r0, #0
 8009cf6:	f380 8811 	msr	BASEPRI, r0
 8009cfa:	4770      	bx	lr
 8009cfc:	f3af 8000 	nop.w

08009d00 <pxCurrentTCBConst2>:
 8009d00:	20001120 	.word	0x20001120
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop

08009d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d08:	4808      	ldr	r0, [pc, #32]	@ (8009d2c <prvPortStartFirstTask+0x24>)
 8009d0a:	6800      	ldr	r0, [r0, #0]
 8009d0c:	6800      	ldr	r0, [r0, #0]
 8009d0e:	f380 8808 	msr	MSP, r0
 8009d12:	f04f 0000 	mov.w	r0, #0
 8009d16:	f380 8814 	msr	CONTROL, r0
 8009d1a:	b662      	cpsie	i
 8009d1c:	b661      	cpsie	f
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	df00      	svc	0
 8009d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d2a:	bf00      	nop
 8009d2c:	e000ed08 	.word	0xe000ed08

08009d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d36:	4b37      	ldr	r3, [pc, #220]	@ (8009e14 <xPortStartScheduler+0xe4>)
 8009d38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	22ff      	movs	r2, #255	@ 0xff
 8009d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e18 <xPortStartScheduler+0xe8>)
 8009d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8009e1c <xPortStartScheduler+0xec>)
 8009d60:	2207      	movs	r2, #7
 8009d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d64:	e009      	b.n	8009d7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009d66:	4b2d      	ldr	r3, [pc, #180]	@ (8009e1c <xPortStartScheduler+0xec>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8009e1c <xPortStartScheduler+0xec>)
 8009d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d70:	78fb      	ldrb	r3, [r7, #3]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d82:	2b80      	cmp	r3, #128	@ 0x80
 8009d84:	d0ef      	beq.n	8009d66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d86:	4b25      	ldr	r3, [pc, #148]	@ (8009e1c <xPortStartScheduler+0xec>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f1c3 0307 	rsb	r3, r3, #7
 8009d8e:	2b04      	cmp	r3, #4
 8009d90:	d00d      	beq.n	8009dae <xPortStartScheduler+0x7e>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d96:	b672      	cpsid	i
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	b662      	cpsie	i
 8009da6:	60bb      	str	r3, [r7, #8]
}
 8009da8:	bf00      	nop
 8009daa:	bf00      	nop
 8009dac:	e7fd      	b.n	8009daa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009dae:	4b1b      	ldr	r3, [pc, #108]	@ (8009e1c <xPortStartScheduler+0xec>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	021b      	lsls	r3, r3, #8
 8009db4:	4a19      	ldr	r2, [pc, #100]	@ (8009e1c <xPortStartScheduler+0xec>)
 8009db6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009db8:	4b18      	ldr	r3, [pc, #96]	@ (8009e1c <xPortStartScheduler+0xec>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009dc0:	4a16      	ldr	r2, [pc, #88]	@ (8009e1c <xPortStartScheduler+0xec>)
 8009dc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dcc:	4b14      	ldr	r3, [pc, #80]	@ (8009e20 <xPortStartScheduler+0xf0>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a13      	ldr	r2, [pc, #76]	@ (8009e20 <xPortStartScheduler+0xf0>)
 8009dd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009dd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009dd8:	4b11      	ldr	r3, [pc, #68]	@ (8009e20 <xPortStartScheduler+0xf0>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a10      	ldr	r2, [pc, #64]	@ (8009e20 <xPortStartScheduler+0xf0>)
 8009dde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009de2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009de4:	f000 f8dc 	bl	8009fa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009de8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e24 <xPortStartScheduler+0xf4>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dee:	f000 f8fb 	bl	8009fe8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009df2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e28 <xPortStartScheduler+0xf8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a0c      	ldr	r2, [pc, #48]	@ (8009e28 <xPortStartScheduler+0xf8>)
 8009df8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009dfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dfe:	f7ff ff83 	bl	8009d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e02:	f7ff f837 	bl	8008e74 <vTaskSwitchContext>
	prvTaskExitError();
 8009e06:	f7ff ff35 	bl	8009c74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	e000e400 	.word	0xe000e400
 8009e18:	2000174c 	.word	0x2000174c
 8009e1c:	20001750 	.word	0x20001750
 8009e20:	e000ed20 	.word	0xe000ed20
 8009e24:	2000000c 	.word	0x2000000c
 8009e28:	e000ef34 	.word	0xe000ef34

08009e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e36:	b672      	cpsid	i
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	b662      	cpsie	i
 8009e46:	607b      	str	r3, [r7, #4]
}
 8009e48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e4a:	4b11      	ldr	r3, [pc, #68]	@ (8009e90 <vPortEnterCritical+0x64>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	4a0f      	ldr	r2, [pc, #60]	@ (8009e90 <vPortEnterCritical+0x64>)
 8009e52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e54:	4b0e      	ldr	r3, [pc, #56]	@ (8009e90 <vPortEnterCritical+0x64>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d112      	bne.n	8009e82 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e94 <vPortEnterCritical+0x68>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00d      	beq.n	8009e82 <vPortEnterCritical+0x56>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6a:	b672      	cpsid	i
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	b662      	cpsie	i
 8009e7a:	603b      	str	r3, [r7, #0]
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	e7fd      	b.n	8009e7e <vPortEnterCritical+0x52>
	}
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	2000000c 	.word	0x2000000c
 8009e94:	e000ed04 	.word	0xe000ed04

08009e98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e9e:	4b13      	ldr	r3, [pc, #76]	@ (8009eec <vPortExitCritical+0x54>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10d      	bne.n	8009ec2 <vPortExitCritical+0x2a>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eaa:	b672      	cpsid	i
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	b662      	cpsie	i
 8009eba:	607b      	str	r3, [r7, #4]
}
 8009ebc:	bf00      	nop
 8009ebe:	bf00      	nop
 8009ec0:	e7fd      	b.n	8009ebe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8009eec <vPortExitCritical+0x54>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	4a08      	ldr	r2, [pc, #32]	@ (8009eec <vPortExitCritical+0x54>)
 8009eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ecc:	4b07      	ldr	r3, [pc, #28]	@ (8009eec <vPortExitCritical+0x54>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d105      	bne.n	8009ee0 <vPortExitCritical+0x48>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	f383 8811 	msr	BASEPRI, r3
}
 8009ede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	2000000c 	.word	0x2000000c

08009ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ef0:	f3ef 8009 	mrs	r0, PSP
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	4b15      	ldr	r3, [pc, #84]	@ (8009f50 <pxCurrentTCBConst>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	f01e 0f10 	tst.w	lr, #16
 8009f00:	bf08      	it	eq
 8009f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0a:	6010      	str	r0, [r2, #0]
 8009f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009f14:	b672      	cpsid	i
 8009f16:	f380 8811 	msr	BASEPRI, r0
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	b662      	cpsie	i
 8009f24:	f7fe ffa6 	bl	8008e74 <vTaskSwitchContext>
 8009f28:	f04f 0000 	mov.w	r0, #0
 8009f2c:	f380 8811 	msr	BASEPRI, r0
 8009f30:	bc09      	pop	{r0, r3}
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	6808      	ldr	r0, [r1, #0]
 8009f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	f01e 0f10 	tst.w	lr, #16
 8009f3e:	bf08      	it	eq
 8009f40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f44:	f380 8809 	msr	PSP, r0
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop

08009f50 <pxCurrentTCBConst>:
 8009f50:	20001120 	.word	0x20001120
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop

08009f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	b672      	cpsid	i
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	b662      	cpsie	i
 8009f72:	607b      	str	r3, [r7, #4]
}
 8009f74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f76:	f7fe fec1 	bl	8008cfc <xTaskIncrementTick>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f80:	4b06      	ldr	r3, [pc, #24]	@ (8009f9c <xPortSysTickHandler+0x44>)
 8009f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	f383 8811 	msr	BASEPRI, r3
}
 8009f92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8009fd4 <vPortSetupTimerInterrupt+0x34>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009faa:	4b0b      	ldr	r3, [pc, #44]	@ (8009fd8 <vPortSetupTimerInterrupt+0x38>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <vPortSetupTimerInterrupt+0x3c>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8009fe0 <vPortSetupTimerInterrupt+0x40>)
 8009fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fba:	099b      	lsrs	r3, r3, #6
 8009fbc:	4a09      	ldr	r2, [pc, #36]	@ (8009fe4 <vPortSetupTimerInterrupt+0x44>)
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fc2:	4b04      	ldr	r3, [pc, #16]	@ (8009fd4 <vPortSetupTimerInterrupt+0x34>)
 8009fc4:	2207      	movs	r2, #7
 8009fc6:	601a      	str	r2, [r3, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	e000e010 	.word	0xe000e010
 8009fd8:	e000e018 	.word	0xe000e018
 8009fdc:	20000000 	.word	0x20000000
 8009fe0:	10624dd3 	.word	0x10624dd3
 8009fe4:	e000e014 	.word	0xe000e014

08009fe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fe8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ff8 <vPortEnableVFP+0x10>
 8009fec:	6801      	ldr	r1, [r0, #0]
 8009fee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009ff2:	6001      	str	r1, [r0, #0]
 8009ff4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ff6:	bf00      	nop
 8009ff8:	e000ed88 	.word	0xe000ed88

08009ffc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a002:	f3ef 8305 	mrs	r3, IPSR
 800a006:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b0f      	cmp	r3, #15
 800a00c:	d917      	bls.n	800a03e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a00e:	4a1a      	ldr	r2, [pc, #104]	@ (800a078 <vPortValidateInterruptPriority+0x7c>)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4413      	add	r3, r2
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a018:	4b18      	ldr	r3, [pc, #96]	@ (800a07c <vPortValidateInterruptPriority+0x80>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	7afa      	ldrb	r2, [r7, #11]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d20d      	bcs.n	800a03e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a026:	b672      	cpsid	i
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	b662      	cpsie	i
 800a036:	607b      	str	r3, [r7, #4]
}
 800a038:	bf00      	nop
 800a03a:	bf00      	nop
 800a03c:	e7fd      	b.n	800a03a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a03e:	4b10      	ldr	r3, [pc, #64]	@ (800a080 <vPortValidateInterruptPriority+0x84>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a046:	4b0f      	ldr	r3, [pc, #60]	@ (800a084 <vPortValidateInterruptPriority+0x88>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d90d      	bls.n	800a06a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	b672      	cpsid	i
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	b662      	cpsie	i
 800a062:	603b      	str	r3, [r7, #0]
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	e7fd      	b.n	800a066 <vPortValidateInterruptPriority+0x6a>
	}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	e000e3f0 	.word	0xe000e3f0
 800a07c:	2000174c 	.word	0x2000174c
 800a080:	e000ed0c 	.word	0xe000ed0c
 800a084:	20001750 	.word	0x20001750

0800a088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08a      	sub	sp, #40	@ 0x28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a090:	2300      	movs	r3, #0
 800a092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a094:	f7fe fd74 	bl	8008b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a098:	4b5d      	ldr	r3, [pc, #372]	@ (800a210 <pvPortMalloc+0x188>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0a0:	f000 f920 	bl	800a2e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0a4:	4b5b      	ldr	r3, [pc, #364]	@ (800a214 <pvPortMalloc+0x18c>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 8094 	bne.w	800a1da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d020      	beq.n	800a0fa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a0b8:	2208      	movs	r2, #8
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4413      	add	r3, r2
 800a0be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d017      	beq.n	800a0fa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f023 0307 	bic.w	r3, r3, #7
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00d      	beq.n	800a0fa <pvPortMalloc+0x72>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e2:	b672      	cpsid	i
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	b662      	cpsie	i
 800a0f2:	617b      	str	r3, [r7, #20]
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop
 800a0f8:	e7fd      	b.n	800a0f6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d06c      	beq.n	800a1da <pvPortMalloc+0x152>
 800a100:	4b45      	ldr	r3, [pc, #276]	@ (800a218 <pvPortMalloc+0x190>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d867      	bhi.n	800a1da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a10a:	4b44      	ldr	r3, [pc, #272]	@ (800a21c <pvPortMalloc+0x194>)
 800a10c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a10e:	4b43      	ldr	r3, [pc, #268]	@ (800a21c <pvPortMalloc+0x194>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a114:	e004      	b.n	800a120 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	429a      	cmp	r2, r3
 800a128:	d903      	bls.n	800a132 <pvPortMalloc+0xaa>
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1f1      	bne.n	800a116 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a132:	4b37      	ldr	r3, [pc, #220]	@ (800a210 <pvPortMalloc+0x188>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a138:	429a      	cmp	r2, r3
 800a13a:	d04e      	beq.n	800a1da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2208      	movs	r2, #8
 800a142:	4413      	add	r3, r2
 800a144:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	1ad2      	subs	r2, r2, r3
 800a156:	2308      	movs	r3, #8
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d922      	bls.n	800a1a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a15e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4413      	add	r3, r2
 800a164:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	f003 0307 	and.w	r3, r3, #7
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00d      	beq.n	800a18c <pvPortMalloc+0x104>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a174:	b672      	cpsid	i
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	b662      	cpsie	i
 800a184:	613b      	str	r3, [r7, #16]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	1ad2      	subs	r2, r2, r3
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a19e:	69b8      	ldr	r0, [r7, #24]
 800a1a0:	f000 f902 	bl	800a3a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1a4:	4b1c      	ldr	r3, [pc, #112]	@ (800a218 <pvPortMalloc+0x190>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a218 <pvPortMalloc+0x190>)
 800a1b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1b2:	4b19      	ldr	r3, [pc, #100]	@ (800a218 <pvPortMalloc+0x190>)
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	4b1a      	ldr	r3, [pc, #104]	@ (800a220 <pvPortMalloc+0x198>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d203      	bcs.n	800a1c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1be:	4b16      	ldr	r3, [pc, #88]	@ (800a218 <pvPortMalloc+0x190>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a17      	ldr	r2, [pc, #92]	@ (800a220 <pvPortMalloc+0x198>)
 800a1c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c8:	685a      	ldr	r2, [r3, #4]
 800a1ca:	4b12      	ldr	r3, [pc, #72]	@ (800a214 <pvPortMalloc+0x18c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1da:	f7fe fcdf 	bl	8008b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	f003 0307 	and.w	r3, r3, #7
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00d      	beq.n	800a204 <pvPortMalloc+0x17c>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ec:	b672      	cpsid	i
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	b662      	cpsie	i
 800a1fc:	60fb      	str	r3, [r7, #12]
}
 800a1fe:	bf00      	nop
 800a200:	bf00      	nop
 800a202:	e7fd      	b.n	800a200 <pvPortMalloc+0x178>
	return pvReturn;
 800a204:	69fb      	ldr	r3, [r7, #28]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3728      	adds	r7, #40	@ 0x28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	2000535c 	.word	0x2000535c
 800a214:	20005368 	.word	0x20005368
 800a218:	20005360 	.word	0x20005360
 800a21c:	20005354 	.word	0x20005354
 800a220:	20005364 	.word	0x20005364

0800a224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d04e      	beq.n	800a2d4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a236:	2308      	movs	r3, #8
 800a238:	425b      	negs	r3, r3
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	4413      	add	r3, r2
 800a23e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	4b24      	ldr	r3, [pc, #144]	@ (800a2dc <vPortFree+0xb8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4013      	ands	r3, r2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10d      	bne.n	800a26e <vPortFree+0x4a>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a256:	b672      	cpsid	i
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	b662      	cpsie	i
 800a266:	60fb      	str	r3, [r7, #12]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00d      	beq.n	800a292 <vPortFree+0x6e>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	b672      	cpsid	i
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	b662      	cpsie	i
 800a28a:	60bb      	str	r3, [r7, #8]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	4b11      	ldr	r3, [pc, #68]	@ (800a2dc <vPortFree+0xb8>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4013      	ands	r3, r2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d019      	beq.n	800a2d4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d115      	bne.n	800a2d4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a2dc <vPortFree+0xb8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	43db      	mvns	r3, r3
 800a2b2:	401a      	ands	r2, r3
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2b8:	f7fe fc62 	bl	8008b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	4b07      	ldr	r3, [pc, #28]	@ (800a2e0 <vPortFree+0xbc>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	4a06      	ldr	r2, [pc, #24]	@ (800a2e0 <vPortFree+0xbc>)
 800a2c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2ca:	6938      	ldr	r0, [r7, #16]
 800a2cc:	f000 f86c 	bl	800a3a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a2d0:	f7fe fc64 	bl	8008b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2d4:	bf00      	nop
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20005368 	.word	0x20005368
 800a2e0:	20005360 	.word	0x20005360

0800a2e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ea:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a2ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2f0:	4b27      	ldr	r3, [pc, #156]	@ (800a390 <prvHeapInit+0xac>)
 800a2f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00c      	beq.n	800a318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3307      	adds	r3, #7
 800a302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0307 	bic.w	r3, r3, #7
 800a30a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	4a1f      	ldr	r2, [pc, #124]	@ (800a390 <prvHeapInit+0xac>)
 800a314:	4413      	add	r3, r2
 800a316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a31c:	4a1d      	ldr	r2, [pc, #116]	@ (800a394 <prvHeapInit+0xb0>)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a322:	4b1c      	ldr	r3, [pc, #112]	@ (800a394 <prvHeapInit+0xb0>)
 800a324:	2200      	movs	r2, #0
 800a326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	4413      	add	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a330:	2208      	movs	r2, #8
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	1a9b      	subs	r3, r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f023 0307 	bic.w	r3, r3, #7
 800a33e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4a15      	ldr	r2, [pc, #84]	@ (800a398 <prvHeapInit+0xb4>)
 800a344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a346:	4b14      	ldr	r3, [pc, #80]	@ (800a398 <prvHeapInit+0xb4>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2200      	movs	r2, #0
 800a34c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a34e:	4b12      	ldr	r3, [pc, #72]	@ (800a398 <prvHeapInit+0xb4>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a364:	4b0c      	ldr	r3, [pc, #48]	@ (800a398 <prvHeapInit+0xb4>)
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	4a0a      	ldr	r2, [pc, #40]	@ (800a39c <prvHeapInit+0xb8>)
 800a372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	4a09      	ldr	r2, [pc, #36]	@ (800a3a0 <prvHeapInit+0xbc>)
 800a37a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a37c:	4b09      	ldr	r3, [pc, #36]	@ (800a3a4 <prvHeapInit+0xc0>)
 800a37e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a382:	601a      	str	r2, [r3, #0]
}
 800a384:	bf00      	nop
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	20001754 	.word	0x20001754
 800a394:	20005354 	.word	0x20005354
 800a398:	2000535c 	.word	0x2000535c
 800a39c:	20005364 	.word	0x20005364
 800a3a0:	20005360 	.word	0x20005360
 800a3a4:	20005368 	.word	0x20005368

0800a3a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3b0:	4b28      	ldr	r3, [pc, #160]	@ (800a454 <prvInsertBlockIntoFreeList+0xac>)
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e002      	b.n	800a3bc <prvInsertBlockIntoFreeList+0x14>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d8f7      	bhi.n	800a3b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d108      	bne.n	800a3ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	441a      	add	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d118      	bne.n	800a430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b15      	ldr	r3, [pc, #84]	@ (800a458 <prvInsertBlockIntoFreeList+0xb0>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d00d      	beq.n	800a426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	441a      	add	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e008      	b.n	800a438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a426:	4b0c      	ldr	r3, [pc, #48]	@ (800a458 <prvInsertBlockIntoFreeList+0xb0>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	e003      	b.n	800a438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d002      	beq.n	800a446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a446:	bf00      	nop
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20005354 	.word	0x20005354
 800a458:	2000535c 	.word	0x2000535c

0800a45c <atoi>:
 800a45c:	220a      	movs	r2, #10
 800a45e:	2100      	movs	r1, #0
 800a460:	f000 b928 	b.w	800a6b4 <strtol>

0800a464 <sbrk_aligned>:
 800a464:	b570      	push	{r4, r5, r6, lr}
 800a466:	4e0f      	ldr	r6, [pc, #60]	@ (800a4a4 <sbrk_aligned+0x40>)
 800a468:	460c      	mov	r4, r1
 800a46a:	6831      	ldr	r1, [r6, #0]
 800a46c:	4605      	mov	r5, r0
 800a46e:	b911      	cbnz	r1, 800a476 <sbrk_aligned+0x12>
 800a470:	f000 f978 	bl	800a764 <_sbrk_r>
 800a474:	6030      	str	r0, [r6, #0]
 800a476:	4621      	mov	r1, r4
 800a478:	4628      	mov	r0, r5
 800a47a:	f000 f973 	bl	800a764 <_sbrk_r>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	d103      	bne.n	800a48a <sbrk_aligned+0x26>
 800a482:	f04f 34ff 	mov.w	r4, #4294967295
 800a486:	4620      	mov	r0, r4
 800a488:	bd70      	pop	{r4, r5, r6, pc}
 800a48a:	1cc4      	adds	r4, r0, #3
 800a48c:	f024 0403 	bic.w	r4, r4, #3
 800a490:	42a0      	cmp	r0, r4
 800a492:	d0f8      	beq.n	800a486 <sbrk_aligned+0x22>
 800a494:	1a21      	subs	r1, r4, r0
 800a496:	4628      	mov	r0, r5
 800a498:	f000 f964 	bl	800a764 <_sbrk_r>
 800a49c:	3001      	adds	r0, #1
 800a49e:	d1f2      	bne.n	800a486 <sbrk_aligned+0x22>
 800a4a0:	e7ef      	b.n	800a482 <sbrk_aligned+0x1e>
 800a4a2:	bf00      	nop
 800a4a4:	2000536c 	.word	0x2000536c

0800a4a8 <_malloc_r>:
 800a4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4ac:	1ccd      	adds	r5, r1, #3
 800a4ae:	f025 0503 	bic.w	r5, r5, #3
 800a4b2:	3508      	adds	r5, #8
 800a4b4:	2d0c      	cmp	r5, #12
 800a4b6:	bf38      	it	cc
 800a4b8:	250c      	movcc	r5, #12
 800a4ba:	2d00      	cmp	r5, #0
 800a4bc:	4606      	mov	r6, r0
 800a4be:	db01      	blt.n	800a4c4 <_malloc_r+0x1c>
 800a4c0:	42a9      	cmp	r1, r5
 800a4c2:	d904      	bls.n	800a4ce <_malloc_r+0x26>
 800a4c4:	230c      	movs	r3, #12
 800a4c6:	6033      	str	r3, [r6, #0]
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5a4 <_malloc_r+0xfc>
 800a4d2:	f000 f869 	bl	800a5a8 <__malloc_lock>
 800a4d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a4da:	461c      	mov	r4, r3
 800a4dc:	bb44      	cbnz	r4, 800a530 <_malloc_r+0x88>
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f7ff ffbf 	bl	800a464 <sbrk_aligned>
 800a4e6:	1c43      	adds	r3, r0, #1
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	d158      	bne.n	800a59e <_malloc_r+0xf6>
 800a4ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a4f0:	4627      	mov	r7, r4
 800a4f2:	2f00      	cmp	r7, #0
 800a4f4:	d143      	bne.n	800a57e <_malloc_r+0xd6>
 800a4f6:	2c00      	cmp	r4, #0
 800a4f8:	d04b      	beq.n	800a592 <_malloc_r+0xea>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	4630      	mov	r0, r6
 800a500:	eb04 0903 	add.w	r9, r4, r3
 800a504:	f000 f92e 	bl	800a764 <_sbrk_r>
 800a508:	4581      	cmp	r9, r0
 800a50a:	d142      	bne.n	800a592 <_malloc_r+0xea>
 800a50c:	6821      	ldr	r1, [r4, #0]
 800a50e:	1a6d      	subs	r5, r5, r1
 800a510:	4629      	mov	r1, r5
 800a512:	4630      	mov	r0, r6
 800a514:	f7ff ffa6 	bl	800a464 <sbrk_aligned>
 800a518:	3001      	adds	r0, #1
 800a51a:	d03a      	beq.n	800a592 <_malloc_r+0xea>
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	442b      	add	r3, r5
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	f8d8 3000 	ldr.w	r3, [r8]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	bb62      	cbnz	r2, 800a584 <_malloc_r+0xdc>
 800a52a:	f8c8 7000 	str.w	r7, [r8]
 800a52e:	e00f      	b.n	800a550 <_malloc_r+0xa8>
 800a530:	6822      	ldr	r2, [r4, #0]
 800a532:	1b52      	subs	r2, r2, r5
 800a534:	d420      	bmi.n	800a578 <_malloc_r+0xd0>
 800a536:	2a0b      	cmp	r2, #11
 800a538:	d917      	bls.n	800a56a <_malloc_r+0xc2>
 800a53a:	1961      	adds	r1, r4, r5
 800a53c:	42a3      	cmp	r3, r4
 800a53e:	6025      	str	r5, [r4, #0]
 800a540:	bf18      	it	ne
 800a542:	6059      	strne	r1, [r3, #4]
 800a544:	6863      	ldr	r3, [r4, #4]
 800a546:	bf08      	it	eq
 800a548:	f8c8 1000 	streq.w	r1, [r8]
 800a54c:	5162      	str	r2, [r4, r5]
 800a54e:	604b      	str	r3, [r1, #4]
 800a550:	4630      	mov	r0, r6
 800a552:	f000 f82f 	bl	800a5b4 <__malloc_unlock>
 800a556:	f104 000b 	add.w	r0, r4, #11
 800a55a:	1d23      	adds	r3, r4, #4
 800a55c:	f020 0007 	bic.w	r0, r0, #7
 800a560:	1ac2      	subs	r2, r0, r3
 800a562:	bf1c      	itt	ne
 800a564:	1a1b      	subne	r3, r3, r0
 800a566:	50a3      	strne	r3, [r4, r2]
 800a568:	e7af      	b.n	800a4ca <_malloc_r+0x22>
 800a56a:	6862      	ldr	r2, [r4, #4]
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	bf0c      	ite	eq
 800a570:	f8c8 2000 	streq.w	r2, [r8]
 800a574:	605a      	strne	r2, [r3, #4]
 800a576:	e7eb      	b.n	800a550 <_malloc_r+0xa8>
 800a578:	4623      	mov	r3, r4
 800a57a:	6864      	ldr	r4, [r4, #4]
 800a57c:	e7ae      	b.n	800a4dc <_malloc_r+0x34>
 800a57e:	463c      	mov	r4, r7
 800a580:	687f      	ldr	r7, [r7, #4]
 800a582:	e7b6      	b.n	800a4f2 <_malloc_r+0x4a>
 800a584:	461a      	mov	r2, r3
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d1fb      	bne.n	800a584 <_malloc_r+0xdc>
 800a58c:	2300      	movs	r3, #0
 800a58e:	6053      	str	r3, [r2, #4]
 800a590:	e7de      	b.n	800a550 <_malloc_r+0xa8>
 800a592:	230c      	movs	r3, #12
 800a594:	6033      	str	r3, [r6, #0]
 800a596:	4630      	mov	r0, r6
 800a598:	f000 f80c 	bl	800a5b4 <__malloc_unlock>
 800a59c:	e794      	b.n	800a4c8 <_malloc_r+0x20>
 800a59e:	6005      	str	r5, [r0, #0]
 800a5a0:	e7d6      	b.n	800a550 <_malloc_r+0xa8>
 800a5a2:	bf00      	nop
 800a5a4:	20005370 	.word	0x20005370

0800a5a8 <__malloc_lock>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	@ (800a5b0 <__malloc_lock+0x8>)
 800a5aa:	f000 b915 	b.w	800a7d8 <__retarget_lock_acquire_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	200054b0 	.word	0x200054b0

0800a5b4 <__malloc_unlock>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	@ (800a5bc <__malloc_unlock+0x8>)
 800a5b6:	f000 b910 	b.w	800a7da <__retarget_lock_release_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	200054b0 	.word	0x200054b0

0800a5c0 <_strtol_l.constprop.0>:
 800a5c0:	2b24      	cmp	r3, #36	@ 0x24
 800a5c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c6:	4686      	mov	lr, r0
 800a5c8:	4690      	mov	r8, r2
 800a5ca:	d801      	bhi.n	800a5d0 <_strtol_l.constprop.0+0x10>
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d106      	bne.n	800a5de <_strtol_l.constprop.0+0x1e>
 800a5d0:	f000 f8d8 	bl	800a784 <__errno>
 800a5d4:	2316      	movs	r3, #22
 800a5d6:	6003      	str	r3, [r0, #0]
 800a5d8:	2000      	movs	r0, #0
 800a5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5de:	4834      	ldr	r0, [pc, #208]	@ (800a6b0 <_strtol_l.constprop.0+0xf0>)
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5e8:	5d06      	ldrb	r6, [r0, r4]
 800a5ea:	f016 0608 	ands.w	r6, r6, #8
 800a5ee:	d1f8      	bne.n	800a5e2 <_strtol_l.constprop.0+0x22>
 800a5f0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a5f2:	d12d      	bne.n	800a650 <_strtol_l.constprop.0+0x90>
 800a5f4:	782c      	ldrb	r4, [r5, #0]
 800a5f6:	2601      	movs	r6, #1
 800a5f8:	1c95      	adds	r5, r2, #2
 800a5fa:	f033 0210 	bics.w	r2, r3, #16
 800a5fe:	d109      	bne.n	800a614 <_strtol_l.constprop.0+0x54>
 800a600:	2c30      	cmp	r4, #48	@ 0x30
 800a602:	d12a      	bne.n	800a65a <_strtol_l.constprop.0+0x9a>
 800a604:	782a      	ldrb	r2, [r5, #0]
 800a606:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a60a:	2a58      	cmp	r2, #88	@ 0x58
 800a60c:	d125      	bne.n	800a65a <_strtol_l.constprop.0+0x9a>
 800a60e:	786c      	ldrb	r4, [r5, #1]
 800a610:	2310      	movs	r3, #16
 800a612:	3502      	adds	r5, #2
 800a614:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a618:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a61c:	2200      	movs	r2, #0
 800a61e:	fbbc f9f3 	udiv	r9, ip, r3
 800a622:	4610      	mov	r0, r2
 800a624:	fb03 ca19 	mls	sl, r3, r9, ip
 800a628:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a62c:	2f09      	cmp	r7, #9
 800a62e:	d81b      	bhi.n	800a668 <_strtol_l.constprop.0+0xa8>
 800a630:	463c      	mov	r4, r7
 800a632:	42a3      	cmp	r3, r4
 800a634:	dd27      	ble.n	800a686 <_strtol_l.constprop.0+0xc6>
 800a636:	1c57      	adds	r7, r2, #1
 800a638:	d007      	beq.n	800a64a <_strtol_l.constprop.0+0x8a>
 800a63a:	4581      	cmp	r9, r0
 800a63c:	d320      	bcc.n	800a680 <_strtol_l.constprop.0+0xc0>
 800a63e:	d101      	bne.n	800a644 <_strtol_l.constprop.0+0x84>
 800a640:	45a2      	cmp	sl, r4
 800a642:	db1d      	blt.n	800a680 <_strtol_l.constprop.0+0xc0>
 800a644:	fb00 4003 	mla	r0, r0, r3, r4
 800a648:	2201      	movs	r2, #1
 800a64a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a64e:	e7eb      	b.n	800a628 <_strtol_l.constprop.0+0x68>
 800a650:	2c2b      	cmp	r4, #43	@ 0x2b
 800a652:	bf04      	itt	eq
 800a654:	782c      	ldrbeq	r4, [r5, #0]
 800a656:	1c95      	addeq	r5, r2, #2
 800a658:	e7cf      	b.n	800a5fa <_strtol_l.constprop.0+0x3a>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1da      	bne.n	800a614 <_strtol_l.constprop.0+0x54>
 800a65e:	2c30      	cmp	r4, #48	@ 0x30
 800a660:	bf0c      	ite	eq
 800a662:	2308      	moveq	r3, #8
 800a664:	230a      	movne	r3, #10
 800a666:	e7d5      	b.n	800a614 <_strtol_l.constprop.0+0x54>
 800a668:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a66c:	2f19      	cmp	r7, #25
 800a66e:	d801      	bhi.n	800a674 <_strtol_l.constprop.0+0xb4>
 800a670:	3c37      	subs	r4, #55	@ 0x37
 800a672:	e7de      	b.n	800a632 <_strtol_l.constprop.0+0x72>
 800a674:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a678:	2f19      	cmp	r7, #25
 800a67a:	d804      	bhi.n	800a686 <_strtol_l.constprop.0+0xc6>
 800a67c:	3c57      	subs	r4, #87	@ 0x57
 800a67e:	e7d8      	b.n	800a632 <_strtol_l.constprop.0+0x72>
 800a680:	f04f 32ff 	mov.w	r2, #4294967295
 800a684:	e7e1      	b.n	800a64a <_strtol_l.constprop.0+0x8a>
 800a686:	1c53      	adds	r3, r2, #1
 800a688:	d108      	bne.n	800a69c <_strtol_l.constprop.0+0xdc>
 800a68a:	2322      	movs	r3, #34	@ 0x22
 800a68c:	f8ce 3000 	str.w	r3, [lr]
 800a690:	4660      	mov	r0, ip
 800a692:	f1b8 0f00 	cmp.w	r8, #0
 800a696:	d0a0      	beq.n	800a5da <_strtol_l.constprop.0+0x1a>
 800a698:	1e69      	subs	r1, r5, #1
 800a69a:	e006      	b.n	800a6aa <_strtol_l.constprop.0+0xea>
 800a69c:	b106      	cbz	r6, 800a6a0 <_strtol_l.constprop.0+0xe0>
 800a69e:	4240      	negs	r0, r0
 800a6a0:	f1b8 0f00 	cmp.w	r8, #0
 800a6a4:	d099      	beq.n	800a5da <_strtol_l.constprop.0+0x1a>
 800a6a6:	2a00      	cmp	r2, #0
 800a6a8:	d1f6      	bne.n	800a698 <_strtol_l.constprop.0+0xd8>
 800a6aa:	f8c8 1000 	str.w	r1, [r8]
 800a6ae:	e794      	b.n	800a5da <_strtol_l.constprop.0+0x1a>
 800a6b0:	0800b101 	.word	0x0800b101

0800a6b4 <strtol>:
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	460a      	mov	r2, r1
 800a6b8:	4601      	mov	r1, r0
 800a6ba:	4802      	ldr	r0, [pc, #8]	@ (800a6c4 <strtol+0x10>)
 800a6bc:	6800      	ldr	r0, [r0, #0]
 800a6be:	f7ff bf7f 	b.w	800a5c0 <_strtol_l.constprop.0>
 800a6c2:	bf00      	nop
 800a6c4:	20000010 	.word	0x20000010

0800a6c8 <sniprintf>:
 800a6c8:	b40c      	push	{r2, r3}
 800a6ca:	b530      	push	{r4, r5, lr}
 800a6cc:	4b17      	ldr	r3, [pc, #92]	@ (800a72c <sniprintf+0x64>)
 800a6ce:	1e0c      	subs	r4, r1, #0
 800a6d0:	681d      	ldr	r5, [r3, #0]
 800a6d2:	b09d      	sub	sp, #116	@ 0x74
 800a6d4:	da08      	bge.n	800a6e8 <sniprintf+0x20>
 800a6d6:	238b      	movs	r3, #139	@ 0x8b
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	f04f 30ff 	mov.w	r0, #4294967295
 800a6de:	b01d      	add	sp, #116	@ 0x74
 800a6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6e4:	b002      	add	sp, #8
 800a6e6:	4770      	bx	lr
 800a6e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a6ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a6f0:	bf14      	ite	ne
 800a6f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a6f6:	4623      	moveq	r3, r4
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	9307      	str	r3, [sp, #28]
 800a6fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a700:	9002      	str	r0, [sp, #8]
 800a702:	9006      	str	r0, [sp, #24]
 800a704:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a708:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a70a:	ab21      	add	r3, sp, #132	@ 0x84
 800a70c:	a902      	add	r1, sp, #8
 800a70e:	4628      	mov	r0, r5
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	f000 f917 	bl	800a944 <_svfiprintf_r>
 800a716:	1c43      	adds	r3, r0, #1
 800a718:	bfbc      	itt	lt
 800a71a:	238b      	movlt	r3, #139	@ 0x8b
 800a71c:	602b      	strlt	r3, [r5, #0]
 800a71e:	2c00      	cmp	r4, #0
 800a720:	d0dd      	beq.n	800a6de <sniprintf+0x16>
 800a722:	9b02      	ldr	r3, [sp, #8]
 800a724:	2200      	movs	r2, #0
 800a726:	701a      	strb	r2, [r3, #0]
 800a728:	e7d9      	b.n	800a6de <sniprintf+0x16>
 800a72a:	bf00      	nop
 800a72c:	20000010 	.word	0x20000010

0800a730 <memset>:
 800a730:	4402      	add	r2, r0
 800a732:	4603      	mov	r3, r0
 800a734:	4293      	cmp	r3, r2
 800a736:	d100      	bne.n	800a73a <memset+0xa>
 800a738:	4770      	bx	lr
 800a73a:	f803 1b01 	strb.w	r1, [r3], #1
 800a73e:	e7f9      	b.n	800a734 <memset+0x4>

0800a740 <strncmp>:
 800a740:	b510      	push	{r4, lr}
 800a742:	b16a      	cbz	r2, 800a760 <strncmp+0x20>
 800a744:	3901      	subs	r1, #1
 800a746:	1884      	adds	r4, r0, r2
 800a748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a74c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a750:	429a      	cmp	r2, r3
 800a752:	d103      	bne.n	800a75c <strncmp+0x1c>
 800a754:	42a0      	cmp	r0, r4
 800a756:	d001      	beq.n	800a75c <strncmp+0x1c>
 800a758:	2a00      	cmp	r2, #0
 800a75a:	d1f5      	bne.n	800a748 <strncmp+0x8>
 800a75c:	1ad0      	subs	r0, r2, r3
 800a75e:	bd10      	pop	{r4, pc}
 800a760:	4610      	mov	r0, r2
 800a762:	e7fc      	b.n	800a75e <strncmp+0x1e>

0800a764 <_sbrk_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4d06      	ldr	r5, [pc, #24]	@ (800a780 <_sbrk_r+0x1c>)
 800a768:	2300      	movs	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	602b      	str	r3, [r5, #0]
 800a770:	f7f6 fe30 	bl	80013d4 <_sbrk>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_sbrk_r+0x1a>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_sbrk_r+0x1a>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	200054ac 	.word	0x200054ac

0800a784 <__errno>:
 800a784:	4b01      	ldr	r3, [pc, #4]	@ (800a78c <__errno+0x8>)
 800a786:	6818      	ldr	r0, [r3, #0]
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	20000010 	.word	0x20000010

0800a790 <__libc_init_array>:
 800a790:	b570      	push	{r4, r5, r6, lr}
 800a792:	4d0d      	ldr	r5, [pc, #52]	@ (800a7c8 <__libc_init_array+0x38>)
 800a794:	4c0d      	ldr	r4, [pc, #52]	@ (800a7cc <__libc_init_array+0x3c>)
 800a796:	1b64      	subs	r4, r4, r5
 800a798:	10a4      	asrs	r4, r4, #2
 800a79a:	2600      	movs	r6, #0
 800a79c:	42a6      	cmp	r6, r4
 800a79e:	d109      	bne.n	800a7b4 <__libc_init_array+0x24>
 800a7a0:	4d0b      	ldr	r5, [pc, #44]	@ (800a7d0 <__libc_init_array+0x40>)
 800a7a2:	4c0c      	ldr	r4, [pc, #48]	@ (800a7d4 <__libc_init_array+0x44>)
 800a7a4:	f000 fba8 	bl	800aef8 <_init>
 800a7a8:	1b64      	subs	r4, r4, r5
 800a7aa:	10a4      	asrs	r4, r4, #2
 800a7ac:	2600      	movs	r6, #0
 800a7ae:	42a6      	cmp	r6, r4
 800a7b0:	d105      	bne.n	800a7be <__libc_init_array+0x2e>
 800a7b2:	bd70      	pop	{r4, r5, r6, pc}
 800a7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7b8:	4798      	blx	r3
 800a7ba:	3601      	adds	r6, #1
 800a7bc:	e7ee      	b.n	800a79c <__libc_init_array+0xc>
 800a7be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c2:	4798      	blx	r3
 800a7c4:	3601      	adds	r6, #1
 800a7c6:	e7f2      	b.n	800a7ae <__libc_init_array+0x1e>
 800a7c8:	0800b23c 	.word	0x0800b23c
 800a7cc:	0800b23c 	.word	0x0800b23c
 800a7d0:	0800b23c 	.word	0x0800b23c
 800a7d4:	0800b240 	.word	0x0800b240

0800a7d8 <__retarget_lock_acquire_recursive>:
 800a7d8:	4770      	bx	lr

0800a7da <__retarget_lock_release_recursive>:
 800a7da:	4770      	bx	lr

0800a7dc <memcpy>:
 800a7dc:	440a      	add	r2, r1
 800a7de:	4291      	cmp	r1, r2
 800a7e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7e4:	d100      	bne.n	800a7e8 <memcpy+0xc>
 800a7e6:	4770      	bx	lr
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7f2:	4291      	cmp	r1, r2
 800a7f4:	d1f9      	bne.n	800a7ea <memcpy+0xe>
 800a7f6:	bd10      	pop	{r4, pc}

0800a7f8 <_free_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	d041      	beq.n	800a884 <_free_r+0x8c>
 800a800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a804:	1f0c      	subs	r4, r1, #4
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfb8      	it	lt
 800a80a:	18e4      	addlt	r4, r4, r3
 800a80c:	f7ff fecc 	bl	800a5a8 <__malloc_lock>
 800a810:	4a1d      	ldr	r2, [pc, #116]	@ (800a888 <_free_r+0x90>)
 800a812:	6813      	ldr	r3, [r2, #0]
 800a814:	b933      	cbnz	r3, 800a824 <_free_r+0x2c>
 800a816:	6063      	str	r3, [r4, #4]
 800a818:	6014      	str	r4, [r2, #0]
 800a81a:	4628      	mov	r0, r5
 800a81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a820:	f7ff bec8 	b.w	800a5b4 <__malloc_unlock>
 800a824:	42a3      	cmp	r3, r4
 800a826:	d908      	bls.n	800a83a <_free_r+0x42>
 800a828:	6820      	ldr	r0, [r4, #0]
 800a82a:	1821      	adds	r1, r4, r0
 800a82c:	428b      	cmp	r3, r1
 800a82e:	bf01      	itttt	eq
 800a830:	6819      	ldreq	r1, [r3, #0]
 800a832:	685b      	ldreq	r3, [r3, #4]
 800a834:	1809      	addeq	r1, r1, r0
 800a836:	6021      	streq	r1, [r4, #0]
 800a838:	e7ed      	b.n	800a816 <_free_r+0x1e>
 800a83a:	461a      	mov	r2, r3
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	b10b      	cbz	r3, 800a844 <_free_r+0x4c>
 800a840:	42a3      	cmp	r3, r4
 800a842:	d9fa      	bls.n	800a83a <_free_r+0x42>
 800a844:	6811      	ldr	r1, [r2, #0]
 800a846:	1850      	adds	r0, r2, r1
 800a848:	42a0      	cmp	r0, r4
 800a84a:	d10b      	bne.n	800a864 <_free_r+0x6c>
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	4401      	add	r1, r0
 800a850:	1850      	adds	r0, r2, r1
 800a852:	4283      	cmp	r3, r0
 800a854:	6011      	str	r1, [r2, #0]
 800a856:	d1e0      	bne.n	800a81a <_free_r+0x22>
 800a858:	6818      	ldr	r0, [r3, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	6053      	str	r3, [r2, #4]
 800a85e:	4408      	add	r0, r1
 800a860:	6010      	str	r0, [r2, #0]
 800a862:	e7da      	b.n	800a81a <_free_r+0x22>
 800a864:	d902      	bls.n	800a86c <_free_r+0x74>
 800a866:	230c      	movs	r3, #12
 800a868:	602b      	str	r3, [r5, #0]
 800a86a:	e7d6      	b.n	800a81a <_free_r+0x22>
 800a86c:	6820      	ldr	r0, [r4, #0]
 800a86e:	1821      	adds	r1, r4, r0
 800a870:	428b      	cmp	r3, r1
 800a872:	bf04      	itt	eq
 800a874:	6819      	ldreq	r1, [r3, #0]
 800a876:	685b      	ldreq	r3, [r3, #4]
 800a878:	6063      	str	r3, [r4, #4]
 800a87a:	bf04      	itt	eq
 800a87c:	1809      	addeq	r1, r1, r0
 800a87e:	6021      	streq	r1, [r4, #0]
 800a880:	6054      	str	r4, [r2, #4]
 800a882:	e7ca      	b.n	800a81a <_free_r+0x22>
 800a884:	bd38      	pop	{r3, r4, r5, pc}
 800a886:	bf00      	nop
 800a888:	20005370 	.word	0x20005370

0800a88c <__ssputs_r>:
 800a88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a890:	688e      	ldr	r6, [r1, #8]
 800a892:	461f      	mov	r7, r3
 800a894:	42be      	cmp	r6, r7
 800a896:	680b      	ldr	r3, [r1, #0]
 800a898:	4682      	mov	sl, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	4690      	mov	r8, r2
 800a89e:	d82d      	bhi.n	800a8fc <__ssputs_r+0x70>
 800a8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8a8:	d026      	beq.n	800a8f8 <__ssputs_r+0x6c>
 800a8aa:	6965      	ldr	r5, [r4, #20]
 800a8ac:	6909      	ldr	r1, [r1, #16]
 800a8ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8b2:	eba3 0901 	sub.w	r9, r3, r1
 800a8b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8ba:	1c7b      	adds	r3, r7, #1
 800a8bc:	444b      	add	r3, r9
 800a8be:	106d      	asrs	r5, r5, #1
 800a8c0:	429d      	cmp	r5, r3
 800a8c2:	bf38      	it	cc
 800a8c4:	461d      	movcc	r5, r3
 800a8c6:	0553      	lsls	r3, r2, #21
 800a8c8:	d527      	bpl.n	800a91a <__ssputs_r+0x8e>
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	f7ff fdec 	bl	800a4a8 <_malloc_r>
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	b360      	cbz	r0, 800a92e <__ssputs_r+0xa2>
 800a8d4:	6921      	ldr	r1, [r4, #16]
 800a8d6:	464a      	mov	r2, r9
 800a8d8:	f7ff ff80 	bl	800a7dc <memcpy>
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	6126      	str	r6, [r4, #16]
 800a8ea:	6165      	str	r5, [r4, #20]
 800a8ec:	444e      	add	r6, r9
 800a8ee:	eba5 0509 	sub.w	r5, r5, r9
 800a8f2:	6026      	str	r6, [r4, #0]
 800a8f4:	60a5      	str	r5, [r4, #8]
 800a8f6:	463e      	mov	r6, r7
 800a8f8:	42be      	cmp	r6, r7
 800a8fa:	d900      	bls.n	800a8fe <__ssputs_r+0x72>
 800a8fc:	463e      	mov	r6, r7
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	4632      	mov	r2, r6
 800a902:	4641      	mov	r1, r8
 800a904:	f000 faa8 	bl	800ae58 <memmove>
 800a908:	68a3      	ldr	r3, [r4, #8]
 800a90a:	1b9b      	subs	r3, r3, r6
 800a90c:	60a3      	str	r3, [r4, #8]
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	4433      	add	r3, r6
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	2000      	movs	r0, #0
 800a916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91a:	462a      	mov	r2, r5
 800a91c:	f000 fab6 	bl	800ae8c <_realloc_r>
 800a920:	4606      	mov	r6, r0
 800a922:	2800      	cmp	r0, #0
 800a924:	d1e0      	bne.n	800a8e8 <__ssputs_r+0x5c>
 800a926:	6921      	ldr	r1, [r4, #16]
 800a928:	4650      	mov	r0, sl
 800a92a:	f7ff ff65 	bl	800a7f8 <_free_r>
 800a92e:	230c      	movs	r3, #12
 800a930:	f8ca 3000 	str.w	r3, [sl]
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a93a:	81a3      	strh	r3, [r4, #12]
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	e7e9      	b.n	800a916 <__ssputs_r+0x8a>
	...

0800a944 <_svfiprintf_r>:
 800a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	4698      	mov	r8, r3
 800a94a:	898b      	ldrh	r3, [r1, #12]
 800a94c:	061b      	lsls	r3, r3, #24
 800a94e:	b09d      	sub	sp, #116	@ 0x74
 800a950:	4607      	mov	r7, r0
 800a952:	460d      	mov	r5, r1
 800a954:	4614      	mov	r4, r2
 800a956:	d510      	bpl.n	800a97a <_svfiprintf_r+0x36>
 800a958:	690b      	ldr	r3, [r1, #16]
 800a95a:	b973      	cbnz	r3, 800a97a <_svfiprintf_r+0x36>
 800a95c:	2140      	movs	r1, #64	@ 0x40
 800a95e:	f7ff fda3 	bl	800a4a8 <_malloc_r>
 800a962:	6028      	str	r0, [r5, #0]
 800a964:	6128      	str	r0, [r5, #16]
 800a966:	b930      	cbnz	r0, 800a976 <_svfiprintf_r+0x32>
 800a968:	230c      	movs	r3, #12
 800a96a:	603b      	str	r3, [r7, #0]
 800a96c:	f04f 30ff 	mov.w	r0, #4294967295
 800a970:	b01d      	add	sp, #116	@ 0x74
 800a972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a976:	2340      	movs	r3, #64	@ 0x40
 800a978:	616b      	str	r3, [r5, #20]
 800a97a:	2300      	movs	r3, #0
 800a97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a97e:	2320      	movs	r3, #32
 800a980:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a984:	f8cd 800c 	str.w	r8, [sp, #12]
 800a988:	2330      	movs	r3, #48	@ 0x30
 800a98a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab28 <_svfiprintf_r+0x1e4>
 800a98e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a992:	f04f 0901 	mov.w	r9, #1
 800a996:	4623      	mov	r3, r4
 800a998:	469a      	mov	sl, r3
 800a99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a99e:	b10a      	cbz	r2, 800a9a4 <_svfiprintf_r+0x60>
 800a9a0:	2a25      	cmp	r2, #37	@ 0x25
 800a9a2:	d1f9      	bne.n	800a998 <_svfiprintf_r+0x54>
 800a9a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a9a8:	d00b      	beq.n	800a9c2 <_svfiprintf_r+0x7e>
 800a9aa:	465b      	mov	r3, fp
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f7ff ff6b 	bl	800a88c <__ssputs_r>
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	f000 80a7 	beq.w	800ab0a <_svfiprintf_r+0x1c6>
 800a9bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9be:	445a      	add	r2, fp
 800a9c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f000 809f 	beq.w	800ab0a <_svfiprintf_r+0x1c6>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9d6:	f10a 0a01 	add.w	sl, sl, #1
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	9307      	str	r3, [sp, #28]
 800a9de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9e4:	4654      	mov	r4, sl
 800a9e6:	2205      	movs	r2, #5
 800a9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ec:	484e      	ldr	r0, [pc, #312]	@ (800ab28 <_svfiprintf_r+0x1e4>)
 800a9ee:	f7f5 fc3f 	bl	8000270 <memchr>
 800a9f2:	9a04      	ldr	r2, [sp, #16]
 800a9f4:	b9d8      	cbnz	r0, 800aa2e <_svfiprintf_r+0xea>
 800a9f6:	06d0      	lsls	r0, r2, #27
 800a9f8:	bf44      	itt	mi
 800a9fa:	2320      	movmi	r3, #32
 800a9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa00:	0711      	lsls	r1, r2, #28
 800aa02:	bf44      	itt	mi
 800aa04:	232b      	movmi	r3, #43	@ 0x2b
 800aa06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa0a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa10:	d015      	beq.n	800aa3e <_svfiprintf_r+0xfa>
 800aa12:	9a07      	ldr	r2, [sp, #28]
 800aa14:	4654      	mov	r4, sl
 800aa16:	2000      	movs	r0, #0
 800aa18:	f04f 0c0a 	mov.w	ip, #10
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa22:	3b30      	subs	r3, #48	@ 0x30
 800aa24:	2b09      	cmp	r3, #9
 800aa26:	d94b      	bls.n	800aac0 <_svfiprintf_r+0x17c>
 800aa28:	b1b0      	cbz	r0, 800aa58 <_svfiprintf_r+0x114>
 800aa2a:	9207      	str	r2, [sp, #28]
 800aa2c:	e014      	b.n	800aa58 <_svfiprintf_r+0x114>
 800aa2e:	eba0 0308 	sub.w	r3, r0, r8
 800aa32:	fa09 f303 	lsl.w	r3, r9, r3
 800aa36:	4313      	orrs	r3, r2
 800aa38:	9304      	str	r3, [sp, #16]
 800aa3a:	46a2      	mov	sl, r4
 800aa3c:	e7d2      	b.n	800a9e4 <_svfiprintf_r+0xa0>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	1d19      	adds	r1, r3, #4
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	9103      	str	r1, [sp, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bfbb      	ittet	lt
 800aa4a:	425b      	neglt	r3, r3
 800aa4c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa50:	9307      	strge	r3, [sp, #28]
 800aa52:	9307      	strlt	r3, [sp, #28]
 800aa54:	bfb8      	it	lt
 800aa56:	9204      	strlt	r2, [sp, #16]
 800aa58:	7823      	ldrb	r3, [r4, #0]
 800aa5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa5c:	d10a      	bne.n	800aa74 <_svfiprintf_r+0x130>
 800aa5e:	7863      	ldrb	r3, [r4, #1]
 800aa60:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa62:	d132      	bne.n	800aaca <_svfiprintf_r+0x186>
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	9203      	str	r2, [sp, #12]
 800aa6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa70:	3402      	adds	r4, #2
 800aa72:	9305      	str	r3, [sp, #20]
 800aa74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab38 <_svfiprintf_r+0x1f4>
 800aa78:	7821      	ldrb	r1, [r4, #0]
 800aa7a:	2203      	movs	r2, #3
 800aa7c:	4650      	mov	r0, sl
 800aa7e:	f7f5 fbf7 	bl	8000270 <memchr>
 800aa82:	b138      	cbz	r0, 800aa94 <_svfiprintf_r+0x150>
 800aa84:	9b04      	ldr	r3, [sp, #16]
 800aa86:	eba0 000a 	sub.w	r0, r0, sl
 800aa8a:	2240      	movs	r2, #64	@ 0x40
 800aa8c:	4082      	lsls	r2, r0
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	3401      	adds	r4, #1
 800aa92:	9304      	str	r3, [sp, #16]
 800aa94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa98:	4824      	ldr	r0, [pc, #144]	@ (800ab2c <_svfiprintf_r+0x1e8>)
 800aa9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa9e:	2206      	movs	r2, #6
 800aaa0:	f7f5 fbe6 	bl	8000270 <memchr>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d036      	beq.n	800ab16 <_svfiprintf_r+0x1d2>
 800aaa8:	4b21      	ldr	r3, [pc, #132]	@ (800ab30 <_svfiprintf_r+0x1ec>)
 800aaaa:	bb1b      	cbnz	r3, 800aaf4 <_svfiprintf_r+0x1b0>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	3307      	adds	r3, #7
 800aab0:	f023 0307 	bic.w	r3, r3, #7
 800aab4:	3308      	adds	r3, #8
 800aab6:	9303      	str	r3, [sp, #12]
 800aab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaba:	4433      	add	r3, r6
 800aabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aabe:	e76a      	b.n	800a996 <_svfiprintf_r+0x52>
 800aac0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aac4:	460c      	mov	r4, r1
 800aac6:	2001      	movs	r0, #1
 800aac8:	e7a8      	b.n	800aa1c <_svfiprintf_r+0xd8>
 800aaca:	2300      	movs	r3, #0
 800aacc:	3401      	adds	r4, #1
 800aace:	9305      	str	r3, [sp, #20]
 800aad0:	4619      	mov	r1, r3
 800aad2:	f04f 0c0a 	mov.w	ip, #10
 800aad6:	4620      	mov	r0, r4
 800aad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aadc:	3a30      	subs	r2, #48	@ 0x30
 800aade:	2a09      	cmp	r2, #9
 800aae0:	d903      	bls.n	800aaea <_svfiprintf_r+0x1a6>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0c6      	beq.n	800aa74 <_svfiprintf_r+0x130>
 800aae6:	9105      	str	r1, [sp, #20]
 800aae8:	e7c4      	b.n	800aa74 <_svfiprintf_r+0x130>
 800aaea:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaee:	4604      	mov	r4, r0
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e7f0      	b.n	800aad6 <_svfiprintf_r+0x192>
 800aaf4:	ab03      	add	r3, sp, #12
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	462a      	mov	r2, r5
 800aafa:	4b0e      	ldr	r3, [pc, #56]	@ (800ab34 <_svfiprintf_r+0x1f0>)
 800aafc:	a904      	add	r1, sp, #16
 800aafe:	4638      	mov	r0, r7
 800ab00:	f3af 8000 	nop.w
 800ab04:	1c42      	adds	r2, r0, #1
 800ab06:	4606      	mov	r6, r0
 800ab08:	d1d6      	bne.n	800aab8 <_svfiprintf_r+0x174>
 800ab0a:	89ab      	ldrh	r3, [r5, #12]
 800ab0c:	065b      	lsls	r3, r3, #25
 800ab0e:	f53f af2d 	bmi.w	800a96c <_svfiprintf_r+0x28>
 800ab12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab14:	e72c      	b.n	800a970 <_svfiprintf_r+0x2c>
 800ab16:	ab03      	add	r3, sp, #12
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	462a      	mov	r2, r5
 800ab1c:	4b05      	ldr	r3, [pc, #20]	@ (800ab34 <_svfiprintf_r+0x1f0>)
 800ab1e:	a904      	add	r1, sp, #16
 800ab20:	4638      	mov	r0, r7
 800ab22:	f000 f879 	bl	800ac18 <_printf_i>
 800ab26:	e7ed      	b.n	800ab04 <_svfiprintf_r+0x1c0>
 800ab28:	0800b201 	.word	0x0800b201
 800ab2c:	0800b20b 	.word	0x0800b20b
 800ab30:	00000000 	.word	0x00000000
 800ab34:	0800a88d 	.word	0x0800a88d
 800ab38:	0800b207 	.word	0x0800b207

0800ab3c <_printf_common>:
 800ab3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab40:	4616      	mov	r6, r2
 800ab42:	4698      	mov	r8, r3
 800ab44:	688a      	ldr	r2, [r1, #8]
 800ab46:	690b      	ldr	r3, [r1, #16]
 800ab48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	bfb8      	it	lt
 800ab50:	4613      	movlt	r3, r2
 800ab52:	6033      	str	r3, [r6, #0]
 800ab54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab58:	4607      	mov	r7, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	b10a      	cbz	r2, 800ab62 <_printf_common+0x26>
 800ab5e:	3301      	adds	r3, #1
 800ab60:	6033      	str	r3, [r6, #0]
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	0699      	lsls	r1, r3, #26
 800ab66:	bf42      	ittt	mi
 800ab68:	6833      	ldrmi	r3, [r6, #0]
 800ab6a:	3302      	addmi	r3, #2
 800ab6c:	6033      	strmi	r3, [r6, #0]
 800ab6e:	6825      	ldr	r5, [r4, #0]
 800ab70:	f015 0506 	ands.w	r5, r5, #6
 800ab74:	d106      	bne.n	800ab84 <_printf_common+0x48>
 800ab76:	f104 0a19 	add.w	sl, r4, #25
 800ab7a:	68e3      	ldr	r3, [r4, #12]
 800ab7c:	6832      	ldr	r2, [r6, #0]
 800ab7e:	1a9b      	subs	r3, r3, r2
 800ab80:	42ab      	cmp	r3, r5
 800ab82:	dc26      	bgt.n	800abd2 <_printf_common+0x96>
 800ab84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	3b00      	subs	r3, #0
 800ab8c:	bf18      	it	ne
 800ab8e:	2301      	movne	r3, #1
 800ab90:	0692      	lsls	r2, r2, #26
 800ab92:	d42b      	bmi.n	800abec <_printf_common+0xb0>
 800ab94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab98:	4641      	mov	r1, r8
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	47c8      	blx	r9
 800ab9e:	3001      	adds	r0, #1
 800aba0:	d01e      	beq.n	800abe0 <_printf_common+0xa4>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	6922      	ldr	r2, [r4, #16]
 800aba6:	f003 0306 	and.w	r3, r3, #6
 800abaa:	2b04      	cmp	r3, #4
 800abac:	bf02      	ittt	eq
 800abae:	68e5      	ldreq	r5, [r4, #12]
 800abb0:	6833      	ldreq	r3, [r6, #0]
 800abb2:	1aed      	subeq	r5, r5, r3
 800abb4:	68a3      	ldr	r3, [r4, #8]
 800abb6:	bf0c      	ite	eq
 800abb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abbc:	2500      	movne	r5, #0
 800abbe:	4293      	cmp	r3, r2
 800abc0:	bfc4      	itt	gt
 800abc2:	1a9b      	subgt	r3, r3, r2
 800abc4:	18ed      	addgt	r5, r5, r3
 800abc6:	2600      	movs	r6, #0
 800abc8:	341a      	adds	r4, #26
 800abca:	42b5      	cmp	r5, r6
 800abcc:	d11a      	bne.n	800ac04 <_printf_common+0xc8>
 800abce:	2000      	movs	r0, #0
 800abd0:	e008      	b.n	800abe4 <_printf_common+0xa8>
 800abd2:	2301      	movs	r3, #1
 800abd4:	4652      	mov	r2, sl
 800abd6:	4641      	mov	r1, r8
 800abd8:	4638      	mov	r0, r7
 800abda:	47c8      	blx	r9
 800abdc:	3001      	adds	r0, #1
 800abde:	d103      	bne.n	800abe8 <_printf_common+0xac>
 800abe0:	f04f 30ff 	mov.w	r0, #4294967295
 800abe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe8:	3501      	adds	r5, #1
 800abea:	e7c6      	b.n	800ab7a <_printf_common+0x3e>
 800abec:	18e1      	adds	r1, r4, r3
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	2030      	movs	r0, #48	@ 0x30
 800abf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abf6:	4422      	add	r2, r4
 800abf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac00:	3302      	adds	r3, #2
 800ac02:	e7c7      	b.n	800ab94 <_printf_common+0x58>
 800ac04:	2301      	movs	r3, #1
 800ac06:	4622      	mov	r2, r4
 800ac08:	4641      	mov	r1, r8
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	47c8      	blx	r9
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d0e6      	beq.n	800abe0 <_printf_common+0xa4>
 800ac12:	3601      	adds	r6, #1
 800ac14:	e7d9      	b.n	800abca <_printf_common+0x8e>
	...

0800ac18 <_printf_i>:
 800ac18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1c:	7e0f      	ldrb	r7, [r1, #24]
 800ac1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac20:	2f78      	cmp	r7, #120	@ 0x78
 800ac22:	4691      	mov	r9, r2
 800ac24:	4680      	mov	r8, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	469a      	mov	sl, r3
 800ac2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac2e:	d807      	bhi.n	800ac40 <_printf_i+0x28>
 800ac30:	2f62      	cmp	r7, #98	@ 0x62
 800ac32:	d80a      	bhi.n	800ac4a <_printf_i+0x32>
 800ac34:	2f00      	cmp	r7, #0
 800ac36:	f000 80d2 	beq.w	800adde <_printf_i+0x1c6>
 800ac3a:	2f58      	cmp	r7, #88	@ 0x58
 800ac3c:	f000 80b9 	beq.w	800adb2 <_printf_i+0x19a>
 800ac40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac48:	e03a      	b.n	800acc0 <_printf_i+0xa8>
 800ac4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac4e:	2b15      	cmp	r3, #21
 800ac50:	d8f6      	bhi.n	800ac40 <_printf_i+0x28>
 800ac52:	a101      	add	r1, pc, #4	@ (adr r1, 800ac58 <_printf_i+0x40>)
 800ac54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac58:	0800acb1 	.word	0x0800acb1
 800ac5c:	0800acc5 	.word	0x0800acc5
 800ac60:	0800ac41 	.word	0x0800ac41
 800ac64:	0800ac41 	.word	0x0800ac41
 800ac68:	0800ac41 	.word	0x0800ac41
 800ac6c:	0800ac41 	.word	0x0800ac41
 800ac70:	0800acc5 	.word	0x0800acc5
 800ac74:	0800ac41 	.word	0x0800ac41
 800ac78:	0800ac41 	.word	0x0800ac41
 800ac7c:	0800ac41 	.word	0x0800ac41
 800ac80:	0800ac41 	.word	0x0800ac41
 800ac84:	0800adc5 	.word	0x0800adc5
 800ac88:	0800acef 	.word	0x0800acef
 800ac8c:	0800ad7f 	.word	0x0800ad7f
 800ac90:	0800ac41 	.word	0x0800ac41
 800ac94:	0800ac41 	.word	0x0800ac41
 800ac98:	0800ade7 	.word	0x0800ade7
 800ac9c:	0800ac41 	.word	0x0800ac41
 800aca0:	0800acef 	.word	0x0800acef
 800aca4:	0800ac41 	.word	0x0800ac41
 800aca8:	0800ac41 	.word	0x0800ac41
 800acac:	0800ad87 	.word	0x0800ad87
 800acb0:	6833      	ldr	r3, [r6, #0]
 800acb2:	1d1a      	adds	r2, r3, #4
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6032      	str	r2, [r6, #0]
 800acb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acc0:	2301      	movs	r3, #1
 800acc2:	e09d      	b.n	800ae00 <_printf_i+0x1e8>
 800acc4:	6833      	ldr	r3, [r6, #0]
 800acc6:	6820      	ldr	r0, [r4, #0]
 800acc8:	1d19      	adds	r1, r3, #4
 800acca:	6031      	str	r1, [r6, #0]
 800accc:	0606      	lsls	r6, r0, #24
 800acce:	d501      	bpl.n	800acd4 <_printf_i+0xbc>
 800acd0:	681d      	ldr	r5, [r3, #0]
 800acd2:	e003      	b.n	800acdc <_printf_i+0xc4>
 800acd4:	0645      	lsls	r5, r0, #25
 800acd6:	d5fb      	bpl.n	800acd0 <_printf_i+0xb8>
 800acd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acdc:	2d00      	cmp	r5, #0
 800acde:	da03      	bge.n	800ace8 <_printf_i+0xd0>
 800ace0:	232d      	movs	r3, #45	@ 0x2d
 800ace2:	426d      	negs	r5, r5
 800ace4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ace8:	4859      	ldr	r0, [pc, #356]	@ (800ae50 <_printf_i+0x238>)
 800acea:	230a      	movs	r3, #10
 800acec:	e011      	b.n	800ad12 <_printf_i+0xfa>
 800acee:	6821      	ldr	r1, [r4, #0]
 800acf0:	6833      	ldr	r3, [r6, #0]
 800acf2:	0608      	lsls	r0, r1, #24
 800acf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800acf8:	d402      	bmi.n	800ad00 <_printf_i+0xe8>
 800acfa:	0649      	lsls	r1, r1, #25
 800acfc:	bf48      	it	mi
 800acfe:	b2ad      	uxthmi	r5, r5
 800ad00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad02:	4853      	ldr	r0, [pc, #332]	@ (800ae50 <_printf_i+0x238>)
 800ad04:	6033      	str	r3, [r6, #0]
 800ad06:	bf14      	ite	ne
 800ad08:	230a      	movne	r3, #10
 800ad0a:	2308      	moveq	r3, #8
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad12:	6866      	ldr	r6, [r4, #4]
 800ad14:	60a6      	str	r6, [r4, #8]
 800ad16:	2e00      	cmp	r6, #0
 800ad18:	bfa2      	ittt	ge
 800ad1a:	6821      	ldrge	r1, [r4, #0]
 800ad1c:	f021 0104 	bicge.w	r1, r1, #4
 800ad20:	6021      	strge	r1, [r4, #0]
 800ad22:	b90d      	cbnz	r5, 800ad28 <_printf_i+0x110>
 800ad24:	2e00      	cmp	r6, #0
 800ad26:	d04b      	beq.n	800adc0 <_printf_i+0x1a8>
 800ad28:	4616      	mov	r6, r2
 800ad2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad32:	5dc7      	ldrb	r7, [r0, r7]
 800ad34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad38:	462f      	mov	r7, r5
 800ad3a:	42bb      	cmp	r3, r7
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	d9f4      	bls.n	800ad2a <_printf_i+0x112>
 800ad40:	2b08      	cmp	r3, #8
 800ad42:	d10b      	bne.n	800ad5c <_printf_i+0x144>
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	07df      	lsls	r7, r3, #31
 800ad48:	d508      	bpl.n	800ad5c <_printf_i+0x144>
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	6861      	ldr	r1, [r4, #4]
 800ad4e:	4299      	cmp	r1, r3
 800ad50:	bfde      	ittt	le
 800ad52:	2330      	movle	r3, #48	@ 0x30
 800ad54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad5c:	1b92      	subs	r2, r2, r6
 800ad5e:	6122      	str	r2, [r4, #16]
 800ad60:	f8cd a000 	str.w	sl, [sp]
 800ad64:	464b      	mov	r3, r9
 800ad66:	aa03      	add	r2, sp, #12
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	f7ff fee6 	bl	800ab3c <_printf_common>
 800ad70:	3001      	adds	r0, #1
 800ad72:	d14a      	bne.n	800ae0a <_printf_i+0x1f2>
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	b004      	add	sp, #16
 800ad7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	f043 0320 	orr.w	r3, r3, #32
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	4833      	ldr	r0, [pc, #204]	@ (800ae54 <_printf_i+0x23c>)
 800ad88:	2778      	movs	r7, #120	@ 0x78
 800ad8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	6831      	ldr	r1, [r6, #0]
 800ad92:	061f      	lsls	r7, r3, #24
 800ad94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad98:	d402      	bmi.n	800ada0 <_printf_i+0x188>
 800ad9a:	065f      	lsls	r7, r3, #25
 800ad9c:	bf48      	it	mi
 800ad9e:	b2ad      	uxthmi	r5, r5
 800ada0:	6031      	str	r1, [r6, #0]
 800ada2:	07d9      	lsls	r1, r3, #31
 800ada4:	bf44      	itt	mi
 800ada6:	f043 0320 	orrmi.w	r3, r3, #32
 800adaa:	6023      	strmi	r3, [r4, #0]
 800adac:	b11d      	cbz	r5, 800adb6 <_printf_i+0x19e>
 800adae:	2310      	movs	r3, #16
 800adb0:	e7ac      	b.n	800ad0c <_printf_i+0xf4>
 800adb2:	4827      	ldr	r0, [pc, #156]	@ (800ae50 <_printf_i+0x238>)
 800adb4:	e7e9      	b.n	800ad8a <_printf_i+0x172>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	f023 0320 	bic.w	r3, r3, #32
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	e7f6      	b.n	800adae <_printf_i+0x196>
 800adc0:	4616      	mov	r6, r2
 800adc2:	e7bd      	b.n	800ad40 <_printf_i+0x128>
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	6825      	ldr	r5, [r4, #0]
 800adc8:	6961      	ldr	r1, [r4, #20]
 800adca:	1d18      	adds	r0, r3, #4
 800adcc:	6030      	str	r0, [r6, #0]
 800adce:	062e      	lsls	r6, r5, #24
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	d501      	bpl.n	800add8 <_printf_i+0x1c0>
 800add4:	6019      	str	r1, [r3, #0]
 800add6:	e002      	b.n	800adde <_printf_i+0x1c6>
 800add8:	0668      	lsls	r0, r5, #25
 800adda:	d5fb      	bpl.n	800add4 <_printf_i+0x1bc>
 800addc:	8019      	strh	r1, [r3, #0]
 800adde:	2300      	movs	r3, #0
 800ade0:	6123      	str	r3, [r4, #16]
 800ade2:	4616      	mov	r6, r2
 800ade4:	e7bc      	b.n	800ad60 <_printf_i+0x148>
 800ade6:	6833      	ldr	r3, [r6, #0]
 800ade8:	1d1a      	adds	r2, r3, #4
 800adea:	6032      	str	r2, [r6, #0]
 800adec:	681e      	ldr	r6, [r3, #0]
 800adee:	6862      	ldr	r2, [r4, #4]
 800adf0:	2100      	movs	r1, #0
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7f5 fa3c 	bl	8000270 <memchr>
 800adf8:	b108      	cbz	r0, 800adfe <_printf_i+0x1e6>
 800adfa:	1b80      	subs	r0, r0, r6
 800adfc:	6060      	str	r0, [r4, #4]
 800adfe:	6863      	ldr	r3, [r4, #4]
 800ae00:	6123      	str	r3, [r4, #16]
 800ae02:	2300      	movs	r3, #0
 800ae04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae08:	e7aa      	b.n	800ad60 <_printf_i+0x148>
 800ae0a:	6923      	ldr	r3, [r4, #16]
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	4649      	mov	r1, r9
 800ae10:	4640      	mov	r0, r8
 800ae12:	47d0      	blx	sl
 800ae14:	3001      	adds	r0, #1
 800ae16:	d0ad      	beq.n	800ad74 <_printf_i+0x15c>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	079b      	lsls	r3, r3, #30
 800ae1c:	d413      	bmi.n	800ae46 <_printf_i+0x22e>
 800ae1e:	68e0      	ldr	r0, [r4, #12]
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	4298      	cmp	r0, r3
 800ae24:	bfb8      	it	lt
 800ae26:	4618      	movlt	r0, r3
 800ae28:	e7a6      	b.n	800ad78 <_printf_i+0x160>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	4649      	mov	r1, r9
 800ae30:	4640      	mov	r0, r8
 800ae32:	47d0      	blx	sl
 800ae34:	3001      	adds	r0, #1
 800ae36:	d09d      	beq.n	800ad74 <_printf_i+0x15c>
 800ae38:	3501      	adds	r5, #1
 800ae3a:	68e3      	ldr	r3, [r4, #12]
 800ae3c:	9903      	ldr	r1, [sp, #12]
 800ae3e:	1a5b      	subs	r3, r3, r1
 800ae40:	42ab      	cmp	r3, r5
 800ae42:	dcf2      	bgt.n	800ae2a <_printf_i+0x212>
 800ae44:	e7eb      	b.n	800ae1e <_printf_i+0x206>
 800ae46:	2500      	movs	r5, #0
 800ae48:	f104 0619 	add.w	r6, r4, #25
 800ae4c:	e7f5      	b.n	800ae3a <_printf_i+0x222>
 800ae4e:	bf00      	nop
 800ae50:	0800b212 	.word	0x0800b212
 800ae54:	0800b223 	.word	0x0800b223

0800ae58 <memmove>:
 800ae58:	4288      	cmp	r0, r1
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	eb01 0402 	add.w	r4, r1, r2
 800ae60:	d902      	bls.n	800ae68 <memmove+0x10>
 800ae62:	4284      	cmp	r4, r0
 800ae64:	4623      	mov	r3, r4
 800ae66:	d807      	bhi.n	800ae78 <memmove+0x20>
 800ae68:	1e43      	subs	r3, r0, #1
 800ae6a:	42a1      	cmp	r1, r4
 800ae6c:	d008      	beq.n	800ae80 <memmove+0x28>
 800ae6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae76:	e7f8      	b.n	800ae6a <memmove+0x12>
 800ae78:	4402      	add	r2, r0
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	428a      	cmp	r2, r1
 800ae7e:	d100      	bne.n	800ae82 <memmove+0x2a>
 800ae80:	bd10      	pop	{r4, pc}
 800ae82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae8a:	e7f7      	b.n	800ae7c <memmove+0x24>

0800ae8c <_realloc_r>:
 800ae8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae90:	4680      	mov	r8, r0
 800ae92:	4615      	mov	r5, r2
 800ae94:	460c      	mov	r4, r1
 800ae96:	b921      	cbnz	r1, 800aea2 <_realloc_r+0x16>
 800ae98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	f7ff bb03 	b.w	800a4a8 <_malloc_r>
 800aea2:	b92a      	cbnz	r2, 800aeb0 <_realloc_r+0x24>
 800aea4:	f7ff fca8 	bl	800a7f8 <_free_r>
 800aea8:	2400      	movs	r4, #0
 800aeaa:	4620      	mov	r0, r4
 800aeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb0:	f000 f81a 	bl	800aee8 <_malloc_usable_size_r>
 800aeb4:	4285      	cmp	r5, r0
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	d802      	bhi.n	800aec0 <_realloc_r+0x34>
 800aeba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aebe:	d8f4      	bhi.n	800aeaa <_realloc_r+0x1e>
 800aec0:	4629      	mov	r1, r5
 800aec2:	4640      	mov	r0, r8
 800aec4:	f7ff faf0 	bl	800a4a8 <_malloc_r>
 800aec8:	4607      	mov	r7, r0
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d0ec      	beq.n	800aea8 <_realloc_r+0x1c>
 800aece:	42b5      	cmp	r5, r6
 800aed0:	462a      	mov	r2, r5
 800aed2:	4621      	mov	r1, r4
 800aed4:	bf28      	it	cs
 800aed6:	4632      	movcs	r2, r6
 800aed8:	f7ff fc80 	bl	800a7dc <memcpy>
 800aedc:	4621      	mov	r1, r4
 800aede:	4640      	mov	r0, r8
 800aee0:	f7ff fc8a 	bl	800a7f8 <_free_r>
 800aee4:	463c      	mov	r4, r7
 800aee6:	e7e0      	b.n	800aeaa <_realloc_r+0x1e>

0800aee8 <_malloc_usable_size_r>:
 800aee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeec:	1f18      	subs	r0, r3, #4
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	bfbc      	itt	lt
 800aef2:	580b      	ldrlt	r3, [r1, r0]
 800aef4:	18c0      	addlt	r0, r0, r3
 800aef6:	4770      	bx	lr

0800aef8 <_init>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	bf00      	nop
 800aefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefe:	bc08      	pop	{r3}
 800af00:	469e      	mov	lr, r3
 800af02:	4770      	bx	lr

0800af04 <_fini>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	bf00      	nop
 800af08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0a:	bc08      	pop	{r3}
 800af0c:	469e      	mov	lr, r3
 800af0e:	4770      	bx	lr
