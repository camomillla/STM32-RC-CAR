
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b954  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800bb54  0800bb54  0000cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bed8  0800bed8  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0800bed8  0800bed8  0000ced8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee0  0800bee0  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee0  0800bee0  0000cee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bee4  0800bee4  0000cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800bee8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000543c  20000060  0800bf48  0000d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000549c  0800bf48  0000d49c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022537  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e00  00000000  00000000  0002f5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  000343c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a5  00000000  00000000  00035fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c211  00000000  00000000  00037555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002367c  00000000  00000000  00063766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109609  00000000  00000000  00086de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001903eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b0c  00000000  00000000  00190430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00197f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bb3c 	.word	0x0800bb3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800bb3c 	.word	0x0800bb3c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <MX_DMA_Init+0x48>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <MX_DMA_Init+0x48>)
 800060c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_DMA_Init+0x48>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	2010      	movs	r0, #16
 8000624:	f001 ffbb 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000628:	2010      	movs	r0, #16
 800062a:	f001 ffd4 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2105      	movs	r1, #5
 8000632:	2011      	movs	r0, #17
 8000634:	f001 ffb3 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000638:	2011      	movs	r0, #17
 800063a:	f001 ffcc 	bl	80025d6 <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
 8000650:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <MX_FREERTOS_Init+0x28>)
 8000652:	2100      	movs	r1, #0
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <MX_FREERTOS_Init+0x2c>)
 8000656:	f007 fa93 	bl	8007b80 <osThreadNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a07      	ldr	r2, [pc, #28]	@ (800067c <MX_FREERTOS_Init+0x30>)
 800065e:	6013      	str	r3, [r2, #0]
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 8000660:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <MX_FREERTOS_Init+0x34>)
 8000662:	2100      	movs	r1, #0
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <MX_FREERTOS_Init+0x38>)
 8000666:	f007 fa8b 	bl	8007b80 <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a06      	ldr	r2, [pc, #24]	@ (8000688 <MX_FREERTOS_Init+0x3c>)
 800066e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0800bd3c 	.word	0x0800bd3c
 8000678:	08000dd1 	.word	0x08000dd1
 800067c:	2000007c 	.word	0x2000007c
 8000680:	0800bd60 	.word	0x0800bd60
 8000684:	08000e75 	.word	0x08000e75
 8000688:	20000080 	.word	0x20000080

0800068c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	@ 0x30
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b77      	ldr	r3, [pc, #476]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a76      	ldr	r2, [pc, #472]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b74      	ldr	r3, [pc, #464]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	61bb      	str	r3, [r7, #24]
 80006b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b71      	ldr	r3, [pc, #452]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a70      	ldr	r2, [pc, #448]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b6e      	ldr	r3, [pc, #440]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a6a      	ldr	r2, [pc, #424]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b68      	ldr	r3, [pc, #416]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b65      	ldr	r3, [pc, #404]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a64      	ldr	r2, [pc, #400]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b62      	ldr	r3, [pc, #392]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000702:	4b5f      	ldr	r3, [pc, #380]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a5e      	ldr	r2, [pc, #376]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b5c      	ldr	r3, [pc, #368]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071a:	4b59      	ldr	r3, [pc, #356]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a58      	ldr	r2, [pc, #352]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b56      	ldr	r3, [pc, #344]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0310 	and.w	r3, r3, #16
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b53      	ldr	r3, [pc, #332]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a52      	ldr	r2, [pc, #328]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b50      	ldr	r3, [pc, #320]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000750:	484c      	ldr	r0, [pc, #304]	@ (8000884 <MX_GPIO_Init+0x1f8>)
 8000752:	f002 fd1d 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2141      	movs	r1, #65	@ 0x41
 800075a:	484b      	ldr	r0, [pc, #300]	@ (8000888 <MX_GPIO_Init+0x1fc>)
 800075c:	f002 fd18 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2110      	movs	r1, #16
 8000764:	4849      	ldr	r0, [pc, #292]	@ (800088c <MX_GPIO_Init+0x200>)
 8000766:	f002 fd13 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000770:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4843      	ldr	r0, [pc, #268]	@ (8000890 <MX_GPIO_Init+0x204>)
 8000782:	f002 fb59 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000786:	2332      	movs	r3, #50	@ 0x32
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000796:	230b      	movs	r3, #11
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	483b      	ldr	r0, [pc, #236]	@ (8000890 <MX_GPIO_Init+0x204>)
 80007a2:	f002 fb49 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007a6:	2386      	movs	r3, #134	@ 0x86
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b6:	230b      	movs	r3, #11
 80007b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4834      	ldr	r0, [pc, #208]	@ (8000894 <MX_GPIO_Init+0x208>)
 80007c2:	f002 fb39 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007c6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4829      	ldr	r0, [pc, #164]	@ (8000884 <MX_GPIO_Init+0x1f8>)
 80007e0:	f002 fb2a 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 80007e4:	2341      	movs	r3, #65	@ 0x41
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4823      	ldr	r0, [pc, #140]	@ (8000888 <MX_GPIO_Init+0x1fc>)
 80007fc:	f002 fb1c 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000812:	230b      	movs	r3, #11
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4819      	ldr	r0, [pc, #100]	@ (8000884 <MX_GPIO_Init+0x1f8>)
 800081e:	f002 fb0b 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4814      	ldr	r0, [pc, #80]	@ (8000888 <MX_GPIO_Init+0x1fc>)
 8000836:	f002 faff 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800083a:	2310      	movs	r3, #16
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480e      	ldr	r0, [pc, #56]	@ (800088c <MX_GPIO_Init+0x200>)
 8000852:	f002 faf1 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000856:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000868:	230b      	movs	r3, #11
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_GPIO_Init+0x1fc>)
 8000874:	f002 fae0 	bl	8002e38 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	@ 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020400 	.word	0x40020400
 8000888:	40021800 	.word	0x40021800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40020800 	.word	0x40020800
 8000894:	40020000 	.word	0x40020000

08000898 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x28>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d104      	bne.n	80008b8 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x2c>)
 80008b4:	f00a fb10 	bl	800aed8 <ATC_IdleLineCallback>
	}
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40004400 	.word	0x40004400
 80008c4:	20000084 	.word	0x20000084

080008c8 <pid_init>:
	float Kd;			//Wzmocnienie członu różniczkującego*/
	int anti_windup_limit;		//Anti-Windup - ograniczenie członu całkującego*/
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6178      	str	r0, [r7, #20]
 80008d0:	ed87 0a04 	vstr	s0, [r7, #16]
 80008d4:	edc7 0a03 	vstr	s1, [r7, #12]
 80008d8:	ed87 1a02 	vstr	s2, [r7, #8]
 80008dc:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	615a      	str	r2, [r3, #20]
}
 8000902:	bf00      	nop
 8000904:	371c      	adds	r7, #28
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <pid_reset>:

void pid_reset(PID *pid_data)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 800092e:	b480      	push	{r7}
 8000930:	b089      	sub	sp, #36	@ 0x24
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	441a      	add	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	ed93 7a02 	vldr	s14, [r3, #8]
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000962:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	ed93 7a03 	vldr	s14, [r3, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800097c:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	ed93 7a04 	vldr	s14, [r3, #16]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099a:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80009ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009b6:	db08      	blt.n	80009ca <pid_calculate+0x9c>
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c4:	edc7 7a07 	vstr	s15, [r7, #28]
 80009c8:	e016      	b.n	80009f8 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	425b      	negs	r3, r3
 80009d0:	ee07 3a90 	vmov	s15, r3
 80009d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80009dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e4:	d808      	bhi.n	80009f8 <pid_calculate+0xca>
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	425b      	negs	r3, r3
 80009ec:	ee07 3a90 	vmov	s15, r3
 80009f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f4:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 80009fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a02:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a16:	ee17 3a90 	vmov	r3, s15
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000a3c:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f82a 	bl	8000ac4 <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000a78:	fb02 f303 	mul.w	r3, r2, r3
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	8892      	ldrh	r2, [r2, #4]
 8000a80:	fb93 f2f2 	sdiv	r2, r3, r2
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f103 0018 	add.w	r0, r3, #24
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6919      	ldr	r1, [r3, #16]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f7ff ff49 	bl	800092e <pid_calculate>
 8000a9c:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	695a      	ldr	r2, [r3, #20]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	441a      	add	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db04      	blt.n	8000abc <motor_calculate_speed+0x5a>
	{
		//drv8835_set_motorA_direction(CW);
		drv8835_set_motorA_speed(m->actual_PWM);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f832 	bl	8000b20 <drv8835_set_motorA_speed>
	else
	{
		//drv8835_set_motorA_direction(CCW);
		//drv8835_set_motorA_speed(-m->actual_PWM);
	}
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d004      	beq.n	8000b10 <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3318      	adds	r3, #24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff feff 	bl	800090e <pid_reset>

	m->set_speed = set_speed;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	611a      	str	r2, [r3, #16]
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000b2a:	88fa      	ldrh	r2, [r7, #6]
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <drv8835_set_motorA_speed+0x34>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d303      	bcc.n	8000b3e <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000b36:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <drv8835_set_motorA_speed+0x34>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <drv8835_set_motorA_speed+0x34>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	88fa      	ldrh	r2, [r7, #6]
 8000b44:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000144 	.word	0x20000144

08000b58 <drv8835_init>:

void drv8835_init()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	//drv8835_mode_control(Phase_Enable_Mode);
	//drv8835_set_motorA_direction(CCW);
	drv8835_set_motorA_speed(0);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ffdf 	bl	8000b20 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b62:	2100      	movs	r1, #0
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <drv8835_init+0x18>)
 8000b66:	f003 ff05 	bl	8004974 <HAL_TIM_PWM_Start>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000144 	.word	0x20000144

08000b74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d102      	bne.n	8000b8c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000b86:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b88:	f7ff ff6b 	bl	8000a62 <motor_calculate_speed>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40001000 	.word	0x40001000
 8000b98:	200000c0 	.word	0x200000c0

08000b9c <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d104      	bne.n	8000bb4 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2); // Zatrzymanie PWM
 8000baa:	2104      	movs	r1, #4
 8000bac:	4812      	ldr	r0, [pc, #72]	@ (8000bf8 <Set_PWM_Frequency+0x5c>)
 8000bae:	f003 ffdb 	bl	8004b68 <HAL_TIM_PWM_Stop>
        return;
 8000bb2:	e01e      	b.n	8000bf2 <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000; // 96 MHz zegar bazowy
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <Set_PWM_Frequency+0x60>)
 8000bb6:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <Set_PWM_Frequency+0x5c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <Set_PWM_Frequency+0x64>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bda:	4a09      	ldr	r2, [pc, #36]	@ (8000c00 <Set_PWM_Frequency+0x64>)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2); // Wypełnienie 50%
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <Set_PWM_Frequency+0x5c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	0852      	lsrs	r2, r2, #1
 8000be8:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // Start PWM
 8000bea:	2104      	movs	r1, #4
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <Set_PWM_Frequency+0x5c>)
 8000bee:	f003 fec1 	bl	8004974 <HAL_TIM_PWM_Start>
}
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000030c 	.word	0x2000030c
 8000bfc:	05b8d800 	.word	0x05b8d800
 8000c00:	20000144 	.word	0x20000144

08000c04 <ProcessCommand>:
    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);  // Dodaj nową linię
}

int hornOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	// Sprawdź, czy komenda to LIGHTS
	    if (strcmp((char*)cmd, "LIGHTS") == 0) {
 8000c0c:	495e      	ldr	r1, [pc, #376]	@ (8000d88 <ProcessCommand+0x184>)
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fb16 	bl	8000240 <strcmp>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d104      	bne.n	8000c24 <ProcessCommand+0x20>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	485b      	ldr	r0, [pc, #364]	@ (8000d8c <ProcessCommand+0x188>)
 8000c1e:	f002 fad0 	bl	80031c2 <HAL_GPIO_TogglePin>
	    }
	    // Nieznana komenda
	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000c22:	e0ad      	b.n	8000d80 <ProcessCommand+0x17c>
	    else if (strcmp((char*)cmd, "HORN") == 0) {
 8000c24:	495a      	ldr	r1, [pc, #360]	@ (8000d90 <ProcessCommand+0x18c>)
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fb0a 	bl	8000240 <strcmp>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d112      	bne.n	8000c58 <ProcessCommand+0x54>
	    	if (!hornOn) {
 8000c32:	4b58      	ldr	r3, [pc, #352]	@ (8000d94 <ProcessCommand+0x190>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d107      	bne.n	8000c4a <ProcessCommand+0x46>
		    	Set_PWM_Frequency(1000);
 8000c3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c3e:	f7ff ffad 	bl	8000b9c <Set_PWM_Frequency>
		    	hornOn = 1;
 8000c42:	4b54      	ldr	r3, [pc, #336]	@ (8000d94 <ProcessCommand+0x190>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
}
 8000c48:	e09a      	b.n	8000d80 <ProcessCommand+0x17c>
	    		Set_PWM_Frequency(0);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ffa6 	bl	8000b9c <Set_PWM_Frequency>
	    		hornOn = 0;
 8000c50:	4b50      	ldr	r3, [pc, #320]	@ (8000d94 <ProcessCommand+0x190>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	e093      	b.n	8000d80 <ProcessCommand+0x17c>
	    else if (strncmp((char*)cmd, "MOTOR", 5) == 0) { // Sprawdź, czy zaczyna się od "MOTOR"
 8000c58:	2205      	movs	r2, #5
 8000c5a:	494f      	ldr	r1, [pc, #316]	@ (8000d98 <ProcessCommand+0x194>)
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f00a fb60 	bl	800b322 <strncmp>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 8084 	bne.w	8000d72 <ProcessCommand+0x16e>
	        char* modeStr = (char*)cmd + 5; // Wskaźnik na część po "MOTOR"
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3305      	adds	r3, #5
 8000c6e:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);       // Zamiana cyfry trybu na liczbę całkowitą
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f00a f9a0 	bl	800afb6 <atoi>
 8000c76:	60b8      	str	r0, [r7, #8]
	        if (mode >= 0 && mode <= 8) {   // Sprawdzenie, czy tryb mieści się w zakresie 0-8
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db71      	blt.n	8000d62 <ProcessCommand+0x15e>
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	dc6e      	bgt.n	8000d62 <ProcessCommand+0x15e>
	            switch (mode) {
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d868      	bhi.n	8000d5c <ProcessCommand+0x158>
 8000c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c90 <ProcessCommand+0x8c>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000cb5 	.word	0x08000cb5
 8000c94:	08000ccd 	.word	0x08000ccd
 8000c98:	08000ce5 	.word	0x08000ce5
 8000c9c:	08000cfd 	.word	0x08000cfd
 8000ca0:	08000d0d 	.word	0x08000d0d
 8000ca4:	08000d1d 	.word	0x08000d1d
 8000ca8:	08000d2d 	.word	0x08000d2d
 8000cac:	08000d3d 	.word	0x08000d3d
 8000cb0:	08000d4d 	.word	0x08000d4d
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	2212      	movs	r2, #18
 8000cba:	4938      	ldr	r1, [pc, #224]	@ (8000d9c <ProcessCommand+0x198>)
 8000cbc:	4838      	ldr	r0, [pc, #224]	@ (8000da0 <ProcessCommand+0x19c>)
 8000cbe:	f004 ff75 	bl	8005bac <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4837      	ldr	r0, [pc, #220]	@ (8000da4 <ProcessCommand+0x1a0>)
 8000cc6:	f7ff ff14 	bl	8000af2 <motor_set_speed>
	                    break;
 8000cca:	e048      	b.n	8000d5e <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd0:	2212      	movs	r2, #18
 8000cd2:	4935      	ldr	r1, [pc, #212]	@ (8000da8 <ProcessCommand+0x1a4>)
 8000cd4:	4832      	ldr	r0, [pc, #200]	@ (8000da0 <ProcessCommand+0x19c>)
 8000cd6:	f004 ff69 	bl	8005bac <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 100);
 8000cda:	2164      	movs	r1, #100	@ 0x64
 8000cdc:	4831      	ldr	r0, [pc, #196]	@ (8000da4 <ProcessCommand+0x1a0>)
 8000cde:	f7ff ff08 	bl	8000af2 <motor_set_speed>
	                    break;
 8000ce2:	e03c      	b.n	8000d5e <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	2212      	movs	r2, #18
 8000cea:	4930      	ldr	r1, [pc, #192]	@ (8000dac <ProcessCommand+0x1a8>)
 8000cec:	482c      	ldr	r0, [pc, #176]	@ (8000da0 <ProcessCommand+0x19c>)
 8000cee:	f004 ff5d 	bl	8005bac <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 75);
 8000cf2:	214b      	movs	r1, #75	@ 0x4b
 8000cf4:	482b      	ldr	r0, [pc, #172]	@ (8000da4 <ProcessCommand+0x1a0>)
 8000cf6:	f7ff fefc 	bl	8000af2 <motor_set_speed>
	                    break;
 8000cfa:	e030      	b.n	8000d5e <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	2212      	movs	r2, #18
 8000d02:	492b      	ldr	r1, [pc, #172]	@ (8000db0 <ProcessCommand+0x1ac>)
 8000d04:	4826      	ldr	r0, [pc, #152]	@ (8000da0 <ProcessCommand+0x19c>)
 8000d06:	f004 ff51 	bl	8005bac <HAL_UART_Transmit>
	                    break;
 8000d0a:	e028      	b.n	8000d5e <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	2212      	movs	r2, #18
 8000d12:	4928      	ldr	r1, [pc, #160]	@ (8000db4 <ProcessCommand+0x1b0>)
 8000d14:	4822      	ldr	r0, [pc, #136]	@ (8000da0 <ProcessCommand+0x19c>)
 8000d16:	f004 ff49 	bl	8005bac <HAL_UART_Transmit>
	                    break;
 8000d1a:	e020      	b.n	8000d5e <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	2212      	movs	r2, #18
 8000d22:	4925      	ldr	r1, [pc, #148]	@ (8000db8 <ProcessCommand+0x1b4>)
 8000d24:	481e      	ldr	r0, [pc, #120]	@ (8000da0 <ProcessCommand+0x19c>)
 8000d26:	f004 ff41 	bl	8005bac <HAL_UART_Transmit>
	                    break;
 8000d2a:	e018      	b.n	8000d5e <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d30:	2212      	movs	r2, #18
 8000d32:	4922      	ldr	r1, [pc, #136]	@ (8000dbc <ProcessCommand+0x1b8>)
 8000d34:	481a      	ldr	r0, [pc, #104]	@ (8000da0 <ProcessCommand+0x19c>)
 8000d36:	f004 ff39 	bl	8005bac <HAL_UART_Transmit>
	                    break;
 8000d3a:	e010      	b.n	8000d5e <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	2212      	movs	r2, #18
 8000d42:	491f      	ldr	r1, [pc, #124]	@ (8000dc0 <ProcessCommand+0x1bc>)
 8000d44:	4816      	ldr	r0, [pc, #88]	@ (8000da0 <ProcessCommand+0x19c>)
 8000d46:	f004 ff31 	bl	8005bac <HAL_UART_Transmit>
	                    break;
 8000d4a:	e008      	b.n	8000d5e <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d50:	2212      	movs	r2, #18
 8000d52:	491c      	ldr	r1, [pc, #112]	@ (8000dc4 <ProcessCommand+0x1c0>)
 8000d54:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <ProcessCommand+0x19c>)
 8000d56:	f004 ff29 	bl	8005bac <HAL_UART_Transmit>
	                    break;
 8000d5a:	e000      	b.n	8000d5e <ProcessCommand+0x15a>
	                    break; // Nie powinno wystąpić
 8000d5c:	bf00      	nop
	            switch (mode) {
 8000d5e:	bf00      	nop
}
 8000d60:	e00e      	b.n	8000d80 <ProcessCommand+0x17c>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	2215      	movs	r2, #21
 8000d68:	4917      	ldr	r1, [pc, #92]	@ (8000dc8 <ProcessCommand+0x1c4>)
 8000d6a:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <ProcessCommand+0x19c>)
 8000d6c:	f004 ff1e 	bl	8005bac <HAL_UART_Transmit>
}
 8000d70:	e006      	b.n	8000d80 <ProcessCommand+0x17c>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	2211      	movs	r2, #17
 8000d78:	4914      	ldr	r1, [pc, #80]	@ (8000dcc <ProcessCommand+0x1c8>)
 8000d7a:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <ProcessCommand+0x19c>)
 8000d7c:	f004 ff16 	bl	8005bac <HAL_UART_Transmit>
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	0800bb70 	.word	0x0800bb70
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	0800bb78 	.word	0x0800bb78
 8000d94:	200000f0 	.word	0x200000f0
 8000d98:	0800bb80 	.word	0x0800bb80
 8000d9c:	0800bb88 	.word	0x0800bb88
 8000da0:	200003e0 	.word	0x200003e0
 8000da4:	200000c0 	.word	0x200000c0
 8000da8:	0800bb9c 	.word	0x0800bb9c
 8000dac:	0800bbb0 	.word	0x0800bbb0
 8000db0:	0800bbc4 	.word	0x0800bbc4
 8000db4:	0800bbd8 	.word	0x0800bbd8
 8000db8:	0800bbec 	.word	0x0800bbec
 8000dbc:	0800bc00 	.word	0x0800bc00
 8000dc0:	0800bc14 	.word	0x0800bc14
 8000dc4:	0800bc28 	.word	0x0800bc28
 8000dc8:	0800bc3c 	.word	0x0800bc3c
 8000dcc:	0800bc54 	.word	0x0800bc54

08000dd0 <ProcessIncomingData>:

// Funkcja obsługująca przetwarzanie danych przychodzących przez ESP
void ProcessIncomingData(void* argument) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	6078      	str	r0, [r7, #4]
	char *response = NULL; // Wskaźnik na odebrane dane
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
	    while (1) {
	        // Oczekiwanie na odpowiedź zawierającą +IPD
	        int result = ATC_Receive(&ESP, &response, 5000, 1, "+IPD,");
 8000ddc:	f107 0108 	add.w	r1, r7, #8
 8000de0:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <ProcessIncomingData+0x94>)
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2301      	movs	r3, #1
 8000de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dea:	481f      	ldr	r0, [pc, #124]	@ (8000e68 <ProcessIncomingData+0x98>)
 8000dec:	f009 ffc3 	bl	800ad76 <ATC_Receive>
 8000df0:	6178      	str	r0, [r7, #20]
	        if (result > 0 && response != NULL) {
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dd2e      	ble.n	8000e56 <ProcessIncomingData+0x86>
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d02b      	beq.n	8000e56 <ProcessIncomingData+0x86>
	            // Przetwarzanie odpowiedzi zawierającej +IPD
	            char *ipdStart = strstr(response, "+IPD,");
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	4918      	ldr	r1, [pc, #96]	@ (8000e64 <ProcessIncomingData+0x94>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f00a fab2 	bl	800b36c <strstr>
 8000e08:	6138      	str	r0, [r7, #16]
	            if (ipdStart != NULL) {
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d01f      	beq.n	8000e50 <ProcessIncomingData+0x80>
	                // Znajdź początek danych (po dwukropku ':')
	                char *dataStart = strchr(ipdStart, ':');
 8000e10:	213a      	movs	r1, #58	@ 0x3a
 8000e12:	6938      	ldr	r0, [r7, #16]
 8000e14:	f00a fa78 	bl	800b308 <strchr>
 8000e18:	60f8      	str	r0, [r7, #12]
	                if (dataStart != NULL) {
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d017      	beq.n	8000e50 <ProcessIncomingData+0x80>
	                    dataStart++; // Przesuń za dwukropek, aby przejść do danych
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
	                    // Wyślij dane na UART3
	                    HAL_UART_Transmit(&huart3, (uint8_t *)dataStart, strlen(dataStart), HAL_MAX_DELAY);
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff fa14 	bl	8000254 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	68f9      	ldr	r1, [r7, #12]
 8000e36:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <ProcessIncomingData+0x9c>)
 8000e38:	f004 feb8 	bl	8005bac <HAL_UART_Transmit>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Nowa linia dla przejrzystości
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	2202      	movs	r2, #2
 8000e42:	490b      	ldr	r1, [pc, #44]	@ (8000e70 <ProcessIncomingData+0xa0>)
 8000e44:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <ProcessIncomingData+0x9c>)
 8000e46:	f004 feb1 	bl	8005bac <HAL_UART_Transmit>
	                    ProcessCommand((uint8_t *)dataStart);
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f7ff feda 	bl	8000c04 <ProcessCommand>
	                }
	            }
	            ATC_RxFlush(&ESP); // Wyczyść bufor dla nowych danych
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <ProcessIncomingData+0x98>)
 8000e52:	f009 fc52 	bl	800a6fa <ATC_RxFlush>
	        }

	        // Wywołanie głównej pętli ATC
	        ATC_Loop(&ESP);
 8000e56:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <ProcessIncomingData+0x98>)
 8000e58:	f009 fe48 	bl	800aaec <ATC_Loop>
	        osDelay(50);
 8000e5c:	2032      	movs	r0, #50	@ 0x32
 8000e5e:	f006 ff35 	bl	8007ccc <osDelay>
	    while (1) {
 8000e62:	e7bb      	b.n	8000ddc <ProcessIncomingData+0xc>
 8000e64:	0800bc68 	.word	0x0800bc68
 8000e68:	20000084 	.word	0x20000084
 8000e6c:	200003e0 	.word	0x200003e0
 8000e70:	0800bb6c 	.word	0x0800bb6c

08000e74 <ProcessHeartBeat>:
	    }
}

void ProcessHeartBeat(void* argument) {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b095      	sub	sp, #84	@ 0x54
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	    char heartbeatMessage[32]; // Bufor na wiadomość w formacie HB:XXX
	    const uint8_t channel = 0; // Kanał komunikacji (dla CIPMUX=1)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	    const int timeout = 1000; // Timeout na odpowiedź
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	64bb      	str	r3, [r7, #72]	@ 0x48

	    while (1) {
	        // Przygotuj wiadomość HB:XXX
	        sprintf(heartbeatMessage, "HB:%d\r\n", motorA.measured_speed);
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <ProcessHeartBeat+0x74>)
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e90:	4916      	ldr	r1, [pc, #88]	@ (8000eec <ProcessHeartBeat+0x78>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f00a f9d6 	bl	800b244 <siprintf>

	        // Przygotuj komendę AT do wysyłania danych
	        char command[32];
	        sprintf(command, "AT+CIPSEND=%d,%d\r\n", channel, strlen(heartbeatMessage) - 2);
 8000e98:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 8000e9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f9d7 	bl	8000254 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	f107 0008 	add.w	r0, r7, #8
 8000eae:	4622      	mov	r2, r4
 8000eb0:	490f      	ldr	r1, [pc, #60]	@ (8000ef0 <ProcessHeartBeat+0x7c>)
 8000eb2:	f00a f9c7 	bl	800b244 <siprintf>

	        // Wyślij komendę otwierającą wysyłkę danych
	        ATC_Send(&ESP, command, timeout);
 8000eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <ProcessHeartBeat+0x80>)
 8000ec0:	f009 ff01 	bl	800acc6 <ATC_Send>
	        osDelay(50); // Krótka przerwa na przetworzenie
 8000ec4:	2032      	movs	r0, #50	@ 0x32
 8000ec6:	f006 ff01 	bl	8007ccc <osDelay>

	        // Wyślij faktyczną wiadomość
	        ATC_Send(&ESP, heartbeatMessage, timeout);
 8000eca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000ecc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4808      	ldr	r0, [pc, #32]	@ (8000ef4 <ProcessHeartBeat+0x80>)
 8000ed4:	f009 fef7 	bl	800acc6 <ATC_Send>

	        // Wywołanie głównej pętli ATC
	        ATC_Loop(&ESP);
 8000ed8:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <ProcessHeartBeat+0x80>)
 8000eda:	f009 fe07 	bl	800aaec <ATC_Loop>

	        // Odczekaj 1 sekundę
	        osDelay(50);
 8000ede:	2032      	movs	r0, #50	@ 0x32
 8000ee0:	f006 fef4 	bl	8007ccc <osDelay>
	    while (1) {
 8000ee4:	bf00      	nop
 8000ee6:	e7cf      	b.n	8000e88 <ProcessHeartBeat+0x14>
 8000ee8:	200000c0 	.word	0x200000c0
 8000eec:	0800bc70 	.word	0x0800bc70
 8000ef0:	0800bc78 	.word	0x0800bc78
 8000ef4:	20000084 	.word	0x20000084

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f001 f9f2 	bl	80022e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f8d7 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f7ff fbc1 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0a:	f7ff fb79 	bl	8000600 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f0e:	f000 ffd1 	bl	8001eb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f12:	f001 f917 	bl	8002144 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000f16:	f000 ff9d 	bl	8001e54 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f1a:	f000 fa89 	bl	8001430 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1e:	f000 fb45 	bl	80015ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f22:	f000 fb99 	bl	8001658 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000f26:	f000 fc8b 	bl	8001840 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f2a:	f000 fadb 	bl	80014e4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000f2e:	f000 fc4f 	bl	80017d0 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000f32:	f000 fbe7 	bl	8001704 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000f36:	f000 fcdd 	bl	80018f4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  ATC_Init(&ESP, &huart2, 2048, "ESP");
 8000f3a:	4b49      	ldr	r3, [pc, #292]	@ (8001060 <main+0x168>)
 8000f3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f40:	4948      	ldr	r1, [pc, #288]	@ (8001064 <main+0x16c>)
 8000f42:	4849      	ldr	r0, [pc, #292]	@ (8001068 <main+0x170>)
 8000f44:	f009 fd2d 	bl	800a9a2 <ATC_Init>
  ATC_SendReceive(&ESP, "AT\r\n", 1000, NULL, 1000, 0);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2300      	movs	r3, #0
 8000f54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f58:	4944      	ldr	r1, [pc, #272]	@ (800106c <main+0x174>)
 8000f5a:	4843      	ldr	r0, [pc, #268]	@ (8001068 <main+0x170>)
 8000f5c:	f009 fdd4 	bl	800ab08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWMODE=1\r\n", 1000, NULL, 1000, 0);
 8000f60:	2300      	movs	r3, #0
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f70:	493f      	ldr	r1, [pc, #252]	@ (8001070 <main+0x178>)
 8000f72:	483d      	ldr	r0, [pc, #244]	@ (8001068 <main+0x170>)
 8000f74:	f009 fdc8 	bl	800ab08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMUX=1\r\n", 1000, NULL, 1000, 0);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f88:	493a      	ldr	r1, [pc, #232]	@ (8001074 <main+0x17c>)
 8000f8a:	4837      	ldr	r0, [pc, #220]	@ (8001068 <main+0x170>)
 8000f8c:	f009 fdbc 	bl	800ab08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMODE=1\r\n", 1000, NULL, 1000, 0);
 8000f90:	2300      	movs	r3, #0
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fa0:	4935      	ldr	r1, [pc, #212]	@ (8001078 <main+0x180>)
 8000fa2:	4831      	ldr	r0, [pc, #196]	@ (8001068 <main+0x170>)
 8000fa4:	f009 fdb0 	bl	800ab08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPSERVER=1,80\r\n", 1000, NULL, 1000, 0);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fb8:	4930      	ldr	r1, [pc, #192]	@ (800107c <main+0x184>)
 8000fba:	482b      	ldr	r0, [pc, #172]	@ (8001068 <main+0x170>)
 8000fbc:	f009 fda4 	bl	800ab08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWJAP=\"DeathLock\",\"\"\r\n", 10000, NULL, 10000, 0);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fd0:	492b      	ldr	r1, [pc, #172]	@ (8001080 <main+0x188>)
 8000fd2:	4825      	ldr	r0, [pc, #148]	@ (8001068 <main+0x170>)
 8000fd4:	f009 fd98 	bl	800ab08 <ATC_SendReceive>

  const char *readyMsg = "STM32 ready to receive data from ESP...\r\n";
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <main+0x18c>)
 8000fda:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f939 	bl	8000254 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4826      	ldr	r0, [pc, #152]	@ (8001088 <main+0x190>)
 8000fee:	f004 fddd 	bl	8005bac <HAL_UART_Transmit>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000ff2:	213c      	movs	r1, #60	@ 0x3c
 8000ff4:	4825      	ldr	r0, [pc, #148]	@ (800108c <main+0x194>)
 8000ff6:	f003 fedd 	bl	8004db4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000ffa:	213c      	movs	r1, #60	@ 0x3c
 8000ffc:	4824      	ldr	r0, [pc, #144]	@ (8001090 <main+0x198>)
 8000ffe:	f003 fed9 	bl	8004db4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001002:	213c      	movs	r1, #60	@ 0x3c
 8001004:	4823      	ldr	r0, [pc, #140]	@ (8001094 <main+0x19c>)
 8001006:	f003 fed5 	bl	8004db4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800100a:	213c      	movs	r1, #60	@ 0x3c
 800100c:	4822      	ldr	r0, [pc, #136]	@ (8001098 <main+0x1a0>)
 800100e:	f003 fed1 	bl	8004db4 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001012:	2100      	movs	r1, #0
 8001014:	4821      	ldr	r0, [pc, #132]	@ (800109c <main+0x1a4>)
 8001016:	f003 fcad 	bl	8004974 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800101a:	210c      	movs	r1, #12
 800101c:	481f      	ldr	r0, [pc, #124]	@ (800109c <main+0x1a4>)
 800101e:	f003 fca9 	bl	8004974 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8001022:	481f      	ldr	r0, [pc, #124]	@ (80010a0 <main+0x1a8>)
 8001024:	f003 fbd6 	bl	80047d4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001028:	2104      	movs	r1, #4
 800102a:	481e      	ldr	r0, [pc, #120]	@ (80010a4 <main+0x1ac>)
 800102c:	f003 fca2 	bl	8004974 <HAL_TIM_PWM_Start>

  drv8835_init();
 8001030:	f7ff fd92 	bl	8000b58 <drv8835_init>
  motor_init(&motorA, &htim4);
 8001034:	4917      	ldr	r1, [pc, #92]	@ (8001094 <main+0x19c>)
 8001036:	481c      	ldr	r0, [pc, #112]	@ (80010a8 <main+0x1b0>)
 8001038:	f7ff fcf5 	bl	8000a26 <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 800103c:	2101      	movs	r1, #1
 800103e:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 80010ac <main+0x1b4>
 8001042:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 80010ac <main+0x1b4>
 8001046:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800104a:	4819      	ldr	r0, [pc, #100]	@ (80010b0 <main+0x1b8>)
 800104c:	f7ff fc3c 	bl	80008c8 <pid_init>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001050:	f006 fd2c 	bl	8007aac <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001054:	f7ff fafa 	bl	800064c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001058:	f006 fd5c 	bl	8007b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <main+0x164>
 8001060:	0800bc8c 	.word	0x0800bc8c
 8001064:	20000358 	.word	0x20000358
 8001068:	20000084 	.word	0x20000084
 800106c:	0800bc90 	.word	0x0800bc90
 8001070:	0800bc98 	.word	0x0800bc98
 8001074:	0800bca8 	.word	0x0800bca8
 8001078:	0800bcb8 	.word	0x0800bcb8
 800107c:	0800bcc8 	.word	0x0800bcc8
 8001080:	0800bcdc 	.word	0x0800bcdc
 8001084:	0800bcf8 	.word	0x0800bcf8
 8001088:	200003e0 	.word	0x200003e0
 800108c:	200000f8 	.word	0x200000f8
 8001090:	20000190 	.word	0x20000190
 8001094:	200001dc 	.word	0x200001dc
 8001098:	200002c0 	.word	0x200002c0
 800109c:	20000144 	.word	0x20000144
 80010a0:	20000274 	.word	0x20000274
 80010a4:	2000030c 	.word	0x2000030c
 80010a8:	200000c0 	.word	0x200000c0
 80010ac:	3d4ccccd 	.word	0x3d4ccccd
 80010b0:	200000d8 	.word	0x200000d8

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	@ 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	2234      	movs	r2, #52	@ 0x34
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00a f918 	bl	800b2f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010d8:	f002 f9c8 	bl	800346c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <SystemClock_Config+0xdc>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001190 <SystemClock_Config+0xdc>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <SystemClock_Config+0xdc>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010f4:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <SystemClock_Config+0xe0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010fc:	4a25      	ldr	r2, [pc, #148]	@ (8001194 <SystemClock_Config+0xe0>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <SystemClock_Config+0xe0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001110:	2301      	movs	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001114:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001118:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	2302      	movs	r3, #2
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001122:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001128:	2360      	movs	r3, #96	@ 0x60
 800112a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001130:	2304      	movs	r3, #4
 8001132:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4618      	mov	r0, r3
 800113e:	f002 f9f5 	bl	800352c <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001148:	f000 f826 	bl	8001198 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800114c:	f002 f99e 	bl	800348c <HAL_PWREx_EnableOverDrive>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001156:	f000 f81f 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	2103      	movs	r1, #3
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fc86 	bl	8003a88 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001182:	f000 f809 	bl	8001198 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	@ 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <Error_Handler+0x8>

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a10      	ldr	r2, [pc, #64]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	210f      	movs	r1, #15
 80011de:	f06f 0001 	mvn.w	r0, #1
 80011e2:	f001 f9dc 	bl	800259e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <NMI_Handler+0x4>

080011fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <MemManage_Handler+0x4>

0800120c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <UsageFault_Handler+0x4>

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122e:	f001 f897 	bl	8002360 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001232:	f008 f9c5 	bl	80095c0 <xTaskGetSchedulerState>
 8001236:	4603      	mov	r3, r0
 8001238:	2b01      	cmp	r3, #1
 800123a:	d001      	beq.n	8001240 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800123c:	f008 ffb4 	bl	800a1a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <DMA1_Stream5_IRQHandler+0x10>)
 800124a:	f001 fb7f 	bl	800294c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000468 	.word	0x20000468

08001258 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <DMA1_Stream6_IRQHandler+0x10>)
 800125e:	f001 fb75 	bl	800294c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200004c8 	.word	0x200004c8

0800126c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001272:	f003 fe2d 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000f8 	.word	0x200000f8

08001280 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001286:	f003 fe23 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000f8 	.word	0x200000f8

08001294 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800129a:	f003 fe19 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000f8 	.word	0x200000f8

080012a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <TIM1_CC_IRQHandler+0x10>)
 80012ae:	f003 fe0f 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200000f8 	.word	0x200000f8

080012bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <TIM2_IRQHandler+0x10>)
 80012c2:	f003 fe05 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000144 	.word	0x20000144

080012d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <TIM3_IRQHandler+0x10>)
 80012d6:	f003 fdfb 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000190 	.word	0x20000190

080012e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <TIM4_IRQHandler+0x10>)
 80012ea:	f003 fdf1 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001dc 	.word	0x200001dc

080012f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <USART2_IRQHandler+0x10>)
 80012fe:	f004 fe73 	bl	8005fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000358 	.word	0x20000358

0800130c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <USART3_IRQHandler+0x10>)
 8001312:	f004 fe69 	bl	8005fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200003e0 	.word	0x200003e0

08001320 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8001326:	f003 fdd3 	bl	8004ed0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800132a:	4803      	ldr	r0, [pc, #12]	@ (8001338 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800132c:	f003 fdd0 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200002c0 	.word	0x200002c0
 8001338:	2000030c 	.word	0x2000030c

0800133c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001342:	f003 fdc5 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200002c0 	.word	0x200002c0

08001350 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001356:	f003 fdbb 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200002c0 	.word	0x200002c0

08001364 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <TIM8_CC_IRQHandler+0x10>)
 800136a:	f003 fdb1 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200002c0 	.word	0x200002c0

08001378 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <TIM5_IRQHandler+0x10>)
 800137e:	f003 fda7 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000228 	.word	0x20000228

0800138c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <TIM6_DAC_IRQHandler+0x10>)
 8001392:	f003 fd9d 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000274 	.word	0x20000274

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f009 fff2 	bl	800b3b8 <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20080000 	.word	0x20080000
 8001400:	00000400 	.word	0x00000400
 8001404:	200000f4 	.word	0x200000f4
 8001408:	200054a0 	.word	0x200054a0

0800140c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	@ 0x30
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2224      	movs	r2, #36	@ 0x24
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f009 ff5a 	bl	800b2f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800144e:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <MX_TIM1_Init+0xac>)
 8001450:	4a23      	ldr	r2, [pc, #140]	@ (80014e0 <MX_TIM1_Init+0xb0>)
 8001452:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <MX_TIM1_Init+0xac>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <MX_TIM1_Init+0xac>)
 800145c:	2210      	movs	r2, #16
 800145e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001460:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <MX_TIM1_Init+0xac>)
 8001462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001466:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <MX_TIM1_Init+0xac>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_TIM1_Init+0xac>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <MX_TIM1_Init+0xac>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800147a:	2303      	movs	r3, #3
 800147c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800148a:	230f      	movs	r3, #15
 800148c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800149a:	230f      	movs	r3, #15
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4619      	mov	r1, r3
 80014a4:	480d      	ldr	r0, [pc, #52]	@ (80014dc <MX_TIM1_Init+0xac>)
 80014a6:	f003 fbdf 	bl	8004c68 <HAL_TIM_Encoder_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80014b0:	f7ff fe72 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <MX_TIM1_Init+0xac>)
 80014c6:	f004 fa77 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80014d0:	f7ff fe62 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3730      	adds	r7, #48	@ 0x30
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200000f8 	.word	0x200000f8
 80014e0:	40010000 	.word	0x40010000

080014e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001508:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800150a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800150e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001510:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001512:	222f      	movs	r2, #47	@ 0x2f
 8001514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800151c:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800151e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001530:	481d      	ldr	r0, [pc, #116]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001532:	f003 f9c7 	bl	80048c4 <HAL_TIM_PWM_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800153c:	f7ff fe2c 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	4816      	ldr	r0, [pc, #88]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001550:	f004 fa32 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800155a:	f7ff fe1d 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155e:	2360      	movs	r3, #96	@ 0x60
 8001560:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 8001576:	f003 fdb3 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001580:	f7ff fe0a 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001584:	463b      	mov	r3, r7
 8001586:	220c      	movs	r2, #12
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800158c:	f003 fda8 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001596:	f7ff fdff 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800159a:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <MX_TIM2_Init+0xc4>)
 800159c:	f000 fbbc 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	@ 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000144 	.word	0x20000144

080015ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	@ 0x30
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2224      	movs	r2, #36	@ 0x24
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f009 fe9c 	bl	800b2f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	463b      	mov	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015cc:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <MX_TIM3_Init+0xa8>)
 80015ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015d8:	2210      	movs	r2, #16
 80015da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015f0:	2303      	movs	r3, #3
 80015f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f8:	2301      	movs	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001600:	230f      	movs	r3, #15
 8001602:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001608:	2301      	movs	r3, #1
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001610:	230f      	movs	r3, #15
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	@ (8001650 <MX_TIM3_Init+0xa4>)
 800161c:	f003 fb24 	bl	8004c68 <HAL_TIM_Encoder_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001626:	f7ff fdb7 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001632:	463b      	mov	r3, r7
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	@ (8001650 <MX_TIM3_Init+0xa4>)
 8001638:	f004 f9be 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001642:	f7ff fda9 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3730      	adds	r7, #48	@ 0x30
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000190 	.word	0x20000190
 8001654:	40000400 	.word	0x40000400

08001658 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	@ 0x30
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2224      	movs	r2, #36	@ 0x24
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f009 fe46 	bl	800b2f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <MX_TIM4_Init+0xa4>)
 8001678:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <MX_TIM4_Init+0xa8>)
 800167a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <MX_TIM4_Init+0xa4>)
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <MX_TIM4_Init+0xa4>)
 8001684:	2210      	movs	r2, #16
 8001686:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <MX_TIM4_Init+0xa4>)
 800168a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800168e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_TIM4_Init+0xa4>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <MX_TIM4_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800169c:	2303      	movs	r3, #3
 800169e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80016ac:	230f      	movs	r3, #15
 80016ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016b4:	2301      	movs	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80016bc:	230f      	movs	r3, #15
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4619      	mov	r1, r3
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <MX_TIM4_Init+0xa4>)
 80016c8:	f003 face 	bl	8004c68 <HAL_TIM_Encoder_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80016d2:	f7ff fd61 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	@ (80016fc <MX_TIM4_Init+0xa4>)
 80016e4:	f004 f968 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80016ee:	f7ff fd53 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3730      	adds	r7, #48	@ 0x30
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200001dc 	.word	0x200001dc
 8001700:	40000800 	.word	0x40000800

08001704 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
 8001724:	615a      	str	r2, [r3, #20]
 8001726:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001728:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 800172a:	4a28      	ldr	r2, [pc, #160]	@ (80017cc <MX_TIM5_Init+0xc8>)
 800172c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 800172e:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 8001730:	222f      	movs	r2, #47	@ 0x2f
 8001732:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b24      	ldr	r3, [pc, #144]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800173a:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 800173c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001740:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800174e:	481e      	ldr	r0, [pc, #120]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 8001750:	f003 f8b8 	bl	80048c4 <HAL_TIM_PWM_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800175a:	f7ff fd1d 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4816      	ldr	r0, [pc, #88]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 800176e:	f004 f923 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001778:	f7ff fd0e 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177c:	2360      	movs	r3, #96	@ 0x60
 800177e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	4619      	mov	r1, r3
 8001792:	480d      	ldr	r0, [pc, #52]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 8001794:	f003 fca4 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800179e:	f7ff fcfb 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017a2:	463b      	mov	r3, r7
 80017a4:	220c      	movs	r2, #12
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 80017aa:	f003 fc99 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80017b4:	f7ff fcf0 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <MX_TIM5_Init+0xc4>)
 80017ba:	f000 faad 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	@ 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000228 	.word	0x20000228
 80017cc:	40000c00 	.word	0x40000c00

080017d0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017e0:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <MX_TIM6_Init+0x68>)
 80017e2:	4a16      	ldr	r2, [pc, #88]	@ (800183c <MX_TIM6_Init+0x6c>)
 80017e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_TIM6_Init+0x68>)
 80017e8:	f242 527f 	movw	r2, #9599	@ 0x257f
 80017ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <MX_TIM6_Init+0x68>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80017f4:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_TIM6_Init+0x68>)
 80017f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_TIM6_Init+0x68>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001802:	480d      	ldr	r0, [pc, #52]	@ (8001838 <MX_TIM6_Init+0x68>)
 8001804:	f002 ff8e 	bl	8004724 <HAL_TIM_Base_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800180e:	f7ff fcc3 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4806      	ldr	r0, [pc, #24]	@ (8001838 <MX_TIM6_Init+0x68>)
 8001820:	f004 f8ca 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800182a:	f7ff fcb5 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000274 	.word	0x20000274
 800183c:	40001000 	.word	0x40001000

08001840 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	@ 0x30
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2224      	movs	r2, #36	@ 0x24
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f009 fd52 	bl	800b2f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <MX_TIM8_Init+0xac>)
 8001860:	4a23      	ldr	r2, [pc, #140]	@ (80018f0 <MX_TIM8_Init+0xb0>)
 8001862:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <MX_TIM8_Init+0xac>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <MX_TIM8_Init+0xac>)
 800186c:	2210      	movs	r2, #16
 800186e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001870:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <MX_TIM8_Init+0xac>)
 8001872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001876:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <MX_TIM8_Init+0xac>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <MX_TIM8_Init+0xac>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <MX_TIM8_Init+0xac>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800188a:	2303      	movs	r3, #3
 800188c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001892:	2301      	movs	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800189a:	230f      	movs	r3, #15
 800189c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018a2:	2301      	movs	r3, #1
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80018aa:	230f      	movs	r3, #15
 80018ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	4619      	mov	r1, r3
 80018b4:	480d      	ldr	r0, [pc, #52]	@ (80018ec <MX_TIM8_Init+0xac>)
 80018b6:	f003 f9d7 	bl	8004c68 <HAL_TIM_Encoder_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80018c0:	f7ff fc6a 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018d0:	463b      	mov	r3, r7
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <MX_TIM8_Init+0xac>)
 80018d6:	f004 f86f 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80018e0:	f7ff fc5a 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	3730      	adds	r7, #48	@ 0x30
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200002c0 	.word	0x200002c0
 80018f0:	40010400 	.word	0x40010400

080018f4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	615a      	str	r2, [r3, #20]
 800190a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_TIM12_Init+0x84>)
 800190e:	4a1b      	ldr	r2, [pc, #108]	@ (800197c <MX_TIM12_Init+0x88>)
 8001910:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <MX_TIM12_Init+0x84>)
 8001914:	225f      	movs	r2, #95	@ 0x5f
 8001916:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <MX_TIM12_Init+0x84>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <MX_TIM12_Init+0x84>)
 8001920:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001924:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <MX_TIM12_Init+0x84>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <MX_TIM12_Init+0x84>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001932:	4811      	ldr	r0, [pc, #68]	@ (8001978 <MX_TIM12_Init+0x84>)
 8001934:	f002 ffc6 	bl	80048c4 <HAL_TIM_PWM_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800193e:	f7ff fc2b 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001942:	2360      	movs	r3, #96	@ 0x60
 8001944:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2204      	movs	r2, #4
 8001956:	4619      	mov	r1, r3
 8001958:	4807      	ldr	r0, [pc, #28]	@ (8001978 <MX_TIM12_Init+0x84>)
 800195a:	f003 fbc1 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001964:	f7ff fc18 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001968:	4803      	ldr	r0, [pc, #12]	@ (8001978 <MX_TIM12_Init+0x84>)
 800196a:	f000 f9d5 	bl	8001d18 <HAL_TIM_MspPostInit>

}
 800196e:	bf00      	nop
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000030c 	.word	0x2000030c
 800197c:	40001800 	.word	0x40001800

08001980 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b090      	sub	sp, #64	@ 0x40
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a93      	ldr	r2, [pc, #588]	@ (8001bec <HAL_TIM_Encoder_MspInit+0x26c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d149      	bne.n	8001a36 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019a2:	4b93      	ldr	r3, [pc, #588]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	4a92      	ldr	r2, [pc, #584]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ae:	4b90      	ldr	r3, [pc, #576]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ba:	4b8d      	ldr	r3, [pc, #564]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a8c      	ldr	r2, [pc, #560]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b8a      	ldr	r3, [pc, #552]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 80019d2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80019d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4881      	ldr	r0, [pc, #516]	@ (8001bf4 <HAL_TIM_Encoder_MspInit+0x274>)
 80019f0:	f001 fa22 	bl	8002e38 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2105      	movs	r1, #5
 80019f8:	2018      	movs	r0, #24
 80019fa:	f000 fdd0 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019fe:	2018      	movs	r0, #24
 8001a00:	f000 fde9 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2105      	movs	r1, #5
 8001a08:	2019      	movs	r0, #25
 8001a0a:	f000 fdc8 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a0e:	2019      	movs	r0, #25
 8001a10:	f000 fde1 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2105      	movs	r1, #5
 8001a18:	201a      	movs	r0, #26
 8001a1a:	f000 fdc0 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a1e:	201a      	movs	r0, #26
 8001a20:	f000 fdd9 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2105      	movs	r1, #5
 8001a28:	201b      	movs	r0, #27
 8001a2a:	f000 fdb8 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a2e:	201b      	movs	r0, #27
 8001a30:	f000 fdd1 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001a34:	e0d5      	b.n	8001be2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6f      	ldr	r2, [pc, #444]	@ (8001bf8 <HAL_TIM_Encoder_MspInit+0x278>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d14c      	bne.n	8001ada <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a40:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	4a6a      	ldr	r2, [pc, #424]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4c:	4b68      	ldr	r3, [pc, #416]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b65      	ldr	r3, [pc, #404]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	4a64      	ldr	r2, [pc, #400]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a64:	4b62      	ldr	r3, [pc, #392]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	4a5e      	ldr	r2, [pc, #376]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8001a88:	2340      	movs	r3, #64	@ 0x40
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4856      	ldr	r0, [pc, #344]	@ (8001bfc <HAL_TIM_Encoder_MspInit+0x27c>)
 8001aa4:	f001 f9c8 	bl	8002e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	484f      	ldr	r0, [pc, #316]	@ (8001c00 <HAL_TIM_Encoder_MspInit+0x280>)
 8001ac4:	f001 f9b8 	bl	8002e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2105      	movs	r1, #5
 8001acc:	201d      	movs	r0, #29
 8001ace:	f000 fd66 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ad2:	201d      	movs	r0, #29
 8001ad4:	f000 fd7f 	bl	80025d6 <HAL_NVIC_EnableIRQ>
}
 8001ad8:	e083      	b.n	8001be2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a49      	ldr	r2, [pc, #292]	@ (8001c04 <HAL_TIM_Encoder_MspInit+0x284>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d131      	bne.n	8001b48 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ae4:	4b42      	ldr	r3, [pc, #264]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	4a41      	ldr	r2, [pc, #260]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b00:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b08:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8001b14:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b26:	2302      	movs	r3, #2
 8001b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4835      	ldr	r0, [pc, #212]	@ (8001c08 <HAL_TIM_Encoder_MspInit+0x288>)
 8001b32:	f001 f981 	bl	8002e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2105      	movs	r1, #5
 8001b3a:	201e      	movs	r0, #30
 8001b3c:	f000 fd2f 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b40:	201e      	movs	r0, #30
 8001b42:	f000 fd48 	bl	80025d6 <HAL_NVIC_EnableIRQ>
}
 8001b46:	e04c      	b.n	8001be2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c0c <HAL_TIM_Encoder_MspInit+0x28c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d147      	bne.n	8001be2 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b52:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a20      	ldr	r2, [pc, #128]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8001b82:	23c0      	movs	r3, #192	@ 0xc0
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b92:	2303      	movs	r3, #3
 8001b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	481c      	ldr	r0, [pc, #112]	@ (8001c10 <HAL_TIM_Encoder_MspInit+0x290>)
 8001b9e:	f001 f94b 	bl	8002e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	202b      	movs	r0, #43	@ 0x2b
 8001ba8:	f000 fcf9 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001bac:	202b      	movs	r0, #43	@ 0x2b
 8001bae:	f000 fd12 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2105      	movs	r1, #5
 8001bb6:	202c      	movs	r0, #44	@ 0x2c
 8001bb8:	f000 fcf1 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001bbc:	202c      	movs	r0, #44	@ 0x2c
 8001bbe:	f000 fd0a 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	202d      	movs	r0, #45	@ 0x2d
 8001bc8:	f000 fce9 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001bcc:	202d      	movs	r0, #45	@ 0x2d
 8001bce:	f000 fd02 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	202e      	movs	r0, #46	@ 0x2e
 8001bd8:	f000 fce1 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001bdc:	202e      	movs	r0, #46	@ 0x2e
 8001bde:	f000 fcfa 	bl	80025d6 <HAL_NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3740      	adds	r7, #64	@ 0x40
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40000800 	.word	0x40000800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40010400 	.word	0x40010400
 8001c10:	40020800 	.word	0x40020800

08001c14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c24:	d114      	bne.n	8001c50 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c26:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a25      	ldr	r2, [pc, #148]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2105      	movs	r1, #5
 8001c42:	201c      	movs	r0, #28
 8001c44:	f000 fcab 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c48:	201c      	movs	r0, #28
 8001c4a:	f000 fcc4 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001c4e:	e032      	b.n	8001cb6 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xb0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d114      	bne.n	8001c84 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c5a:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c66:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2105      	movs	r1, #5
 8001c76:	2032      	movs	r0, #50	@ 0x32
 8001c78:	f000 fc91 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c7c:	2032      	movs	r0, #50	@ 0x32
 8001c7e:	f000 fcaa 	bl	80025d6 <HAL_NVIC_EnableIRQ>
}
 8001c82:	e018      	b.n	8001cb6 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d113      	bne.n	8001cb6 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2105      	movs	r1, #5
 8001caa:	202b      	movs	r0, #43	@ 0x2b
 8001cac:	f000 fc77 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001cb0:	202b      	movs	r0, #43	@ 0x2b
 8001cb2:	f000 fc90 	bl	80025d6 <HAL_NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40000c00 	.word	0x40000c00
 8001cc8:	40001800 	.word	0x40001800

08001ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <HAL_TIM_Base_MspInit+0x44>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d113      	bne.n	8001d06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	2036      	movs	r0, #54	@ 0x36
 8001cfc:	f000 fc4f 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d00:	2036      	movs	r0, #54	@ 0x36
 8001d02:	f000 fc68 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40001000 	.word	0x40001000
 8001d14:	40023800 	.word	0x40023800

08001d18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	@ 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d38:	d139      	bne.n	8001dae <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	4b41      	ldr	r3, [pc, #260]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a40      	ldr	r2, [pc, #256]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b3e      	ldr	r3, [pc, #248]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	4b3b      	ldr	r3, [pc, #236]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a3a      	ldr	r2, [pc, #232]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b38      	ldr	r3, [pc, #224]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	482f      	ldr	r0, [pc, #188]	@ (8001e44 <HAL_TIM_MspPostInit+0x12c>)
 8001d86:	f001 f857 	bl	8002e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 8001d8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	4828      	ldr	r0, [pc, #160]	@ (8001e48 <HAL_TIM_MspPostInit+0x130>)
 8001da8:	f001 f846 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001dac:	e043      	b.n	8001e36 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a26      	ldr	r2, [pc, #152]	@ (8001e4c <HAL_TIM_MspPostInit+0x134>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d11c      	bne.n	8001df2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbc:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001dd0:	2309      	movs	r3, #9
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001de0:	2302      	movs	r3, #2
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	4816      	ldr	r0, [pc, #88]	@ (8001e44 <HAL_TIM_MspPostInit+0x12c>)
 8001dec:	f001 f824 	bl	8002e38 <HAL_GPIO_Init>
}
 8001df0:	e021      	b.n	8001e36 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a16      	ldr	r2, [pc, #88]	@ (8001e50 <HAL_TIM_MspPostInit+0x138>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d11c      	bne.n	8001e36 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfc:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e00:	4a0f      	ldr	r2, [pc, #60]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <HAL_TIM_MspPostInit+0x128>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001e26:	2309      	movs	r3, #9
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <HAL_TIM_MspPostInit+0x130>)
 8001e32:	f001 f801 	bl	8002e38 <HAL_GPIO_Init>
}
 8001e36:	bf00      	nop
 8001e38:	3730      	adds	r7, #48	@ 0x30
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40000c00 	.word	0x40000c00
 8001e50:	40001800 	.word	0x40001800

08001e54 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e5a:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <MX_USART2_UART_Init+0x5c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e98:	f003 fe3a 	bl	8005b10 <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ea2:	f7ff f979 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000358 	.word	0x20000358
 8001eb0:	40004400 	.word	0x40004400

08001eb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eb8:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001eba:	4a15      	ldr	r2, [pc, #84]	@ (8001f10 <MX_USART3_UART_Init+0x5c>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ebe:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001ec0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <MX_USART3_UART_Init+0x58>)
 8001ef8:	f003 fe0a 	bl	8005b10 <HAL_UART_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f02:	f7ff f949 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200003e0 	.word	0x200003e0
 8001f10:	40004800 	.word	0x40004800

08001f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0b0      	sub	sp, #192	@ 0xc0
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	2290      	movs	r2, #144	@ 0x90
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f009 f9df 	bl	800b2f8 <memset>
  if(uartHandle->Instance==USART2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a79      	ldr	r2, [pc, #484]	@ (8002124 <HAL_UART_MspInit+0x210>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	f040 80a0 	bne.w	8002086 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 ffbe 	bl	8003ed4 <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f5e:	f7ff f91b 	bl	8001198 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f62:	4b71      	ldr	r3, [pc, #452]	@ (8002128 <HAL_UART_MspInit+0x214>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a70      	ldr	r2, [pc, #448]	@ (8002128 <HAL_UART_MspInit+0x214>)
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002128 <HAL_UART_MspInit+0x214>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7a:	4b6b      	ldr	r3, [pc, #428]	@ (8002128 <HAL_UART_MspInit+0x214>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a6a      	ldr	r2, [pc, #424]	@ (8002128 <HAL_UART_MspInit+0x214>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b68      	ldr	r3, [pc, #416]	@ (8002128 <HAL_UART_MspInit+0x214>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001f92:	2360      	movs	r3, #96	@ 0x60
 8001f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001faa:	2307      	movs	r3, #7
 8001fac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	485d      	ldr	r0, [pc, #372]	@ (800212c <HAL_UART_MspInit+0x218>)
 8001fb8:	f000 ff3e 	bl	8002e38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001fbe:	4a5d      	ldr	r2, [pc, #372]	@ (8002134 <HAL_UART_MspInit+0x220>)
 8001fc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001fc4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fca:	4b59      	ldr	r3, [pc, #356]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd0:	4b57      	ldr	r3, [pc, #348]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd6:	4b56      	ldr	r3, [pc, #344]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001fd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fdc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fde:	4b54      	ldr	r3, [pc, #336]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe4:	4b52      	ldr	r3, [pc, #328]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001fea:	4b51      	ldr	r3, [pc, #324]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ffc:	484c      	ldr	r0, [pc, #304]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8001ffe:	f000 fb05 	bl	800260c <HAL_DMA_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8002008:	f7ff f8c6 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a48      	ldr	r2, [pc, #288]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8002010:	675a      	str	r2, [r3, #116]	@ 0x74
 8002012:	4a47      	ldr	r2, [pc, #284]	@ (8002130 <HAL_UART_MspInit+0x21c>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002018:	4b47      	ldr	r3, [pc, #284]	@ (8002138 <HAL_UART_MspInit+0x224>)
 800201a:	4a48      	ldr	r2, [pc, #288]	@ (800213c <HAL_UART_MspInit+0x228>)
 800201c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800201e:	4b46      	ldr	r3, [pc, #280]	@ (8002138 <HAL_UART_MspInit+0x224>)
 8002020:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002024:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002026:	4b44      	ldr	r3, [pc, #272]	@ (8002138 <HAL_UART_MspInit+0x224>)
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800202c:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <HAL_UART_MspInit+0x224>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002032:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <HAL_UART_MspInit+0x224>)
 8002034:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002038:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800203a:	4b3f      	ldr	r3, [pc, #252]	@ (8002138 <HAL_UART_MspInit+0x224>)
 800203c:	2200      	movs	r2, #0
 800203e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002040:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <HAL_UART_MspInit+0x224>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002046:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <HAL_UART_MspInit+0x224>)
 8002048:	2200      	movs	r2, #0
 800204a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800204c:	4b3a      	ldr	r3, [pc, #232]	@ (8002138 <HAL_UART_MspInit+0x224>)
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002052:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_UART_MspInit+0x224>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002058:	4837      	ldr	r0, [pc, #220]	@ (8002138 <HAL_UART_MspInit+0x224>)
 800205a:	f000 fad7 	bl	800260c <HAL_DMA_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8002064:	f7ff f898 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a33      	ldr	r2, [pc, #204]	@ (8002138 <HAL_UART_MspInit+0x224>)
 800206c:	671a      	str	r2, [r3, #112]	@ 0x70
 800206e:	4a32      	ldr	r2, [pc, #200]	@ (8002138 <HAL_UART_MspInit+0x224>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2105      	movs	r1, #5
 8002078:	2026      	movs	r0, #38	@ 0x26
 800207a:	f000 fa90 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800207e:	2026      	movs	r0, #38	@ 0x26
 8002080:	f000 faa9 	bl	80025d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002084:	e049      	b.n	800211a <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2d      	ldr	r2, [pc, #180]	@ (8002140 <HAL_UART_MspInit+0x22c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d144      	bne.n	800211a <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002094:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002096:	2300      	movs	r3, #0
 8002098:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 ff18 	bl	8003ed4 <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80020aa:	f7ff f875 	bl	8001198 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <HAL_UART_MspInit+0x214>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002128 <HAL_UART_MspInit+0x214>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <HAL_UART_MspInit+0x214>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c6:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <HAL_UART_MspInit+0x214>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a17      	ldr	r2, [pc, #92]	@ (8002128 <HAL_UART_MspInit+0x214>)
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_UART_MspInit+0x214>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020f8:	2307      	movs	r3, #7
 80020fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020fe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002102:	4619      	mov	r1, r3
 8002104:	4809      	ldr	r0, [pc, #36]	@ (800212c <HAL_UART_MspInit+0x218>)
 8002106:	f000 fe97 	bl	8002e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2105      	movs	r1, #5
 800210e:	2027      	movs	r0, #39	@ 0x27
 8002110:	f000 fa45 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002114:	2027      	movs	r0, #39	@ 0x27
 8002116:	f000 fa5e 	bl	80025d6 <HAL_NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	37c0      	adds	r7, #192	@ 0xc0
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40004400 	.word	0x40004400
 8002128:	40023800 	.word	0x40023800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	20000468 	.word	0x20000468
 8002134:	40026088 	.word	0x40026088
 8002138:	200004c8 	.word	0x200004c8
 800213c:	400260a0 	.word	0x400260a0
 8002140:	40004800 	.word	0x40004800

08002144 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800214a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800214e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002152:	2206      	movs	r2, #6
 8002154:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002156:	4b11      	ldr	r3, [pc, #68]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002158:	2202      	movs	r2, #2
 800215a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002162:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002164:	2202      	movs	r2, #2
 8002166:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800216a:	2201      	movs	r2, #1
 800216c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800217c:	2201      	movs	r2, #1
 800217e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002182:	2200      	movs	r2, #0
 8002184:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002186:	4805      	ldr	r0, [pc, #20]	@ (800219c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002188:	f001 f835 	bl	80031f6 <HAL_PCD_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002192:	f7ff f801 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000528 	.word	0x20000528

080021a0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0ae      	sub	sp, #184	@ 0xb8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2290      	movs	r2, #144	@ 0x90
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f009 f899 	bl	800b2f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021ce:	d159      	bne.n	8002284 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80021d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80021d4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 fe77 	bl	8003ed4 <HAL_RCCEx_PeriphCLKConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80021ec:	f7fe ffd4 	bl	8001198 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	4b26      	ldr	r3, [pc, #152]	@ (800228c <HAL_PCD_MspInit+0xec>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f4:	4a25      	ldr	r2, [pc, #148]	@ (800228c <HAL_PCD_MspInit+0xec>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fc:	4b23      	ldr	r3, [pc, #140]	@ (800228c <HAL_PCD_MspInit+0xec>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002208:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800220c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002222:	230a      	movs	r3, #10
 8002224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800222c:	4619      	mov	r1, r3
 800222e:	4818      	ldr	r0, [pc, #96]	@ (8002290 <HAL_PCD_MspInit+0xf0>)
 8002230:	f000 fe02 	bl	8002e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002234:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002238:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800224c:	4619      	mov	r1, r3
 800224e:	4810      	ldr	r0, [pc, #64]	@ (8002290 <HAL_PCD_MspInit+0xf0>)
 8002250:	f000 fdf2 	bl	8002e38 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <HAL_PCD_MspInit+0xec>)
 8002256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002258:	4a0c      	ldr	r2, [pc, #48]	@ (800228c <HAL_PCD_MspInit+0xec>)
 800225a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800225e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002260:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <HAL_PCD_MspInit+0xec>)
 8002262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4b07      	ldr	r3, [pc, #28]	@ (800228c <HAL_PCD_MspInit+0xec>)
 800226e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002270:	4a06      	ldr	r2, [pc, #24]	@ (800228c <HAL_PCD_MspInit+0xec>)
 8002272:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002276:	6453      	str	r3, [r2, #68]	@ 0x44
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <HAL_PCD_MspInit+0xec>)
 800227a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002284:	bf00      	nop
 8002286:	37b8      	adds	r7, #184	@ 0xb8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	40020000 	.word	0x40020000

08002294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002294:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002298:	f7ff f8b8 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800229e:	490d      	ldr	r1, [pc, #52]	@ (80022d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a0:	4a0d      	ldr	r2, [pc, #52]	@ (80022d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b4:	4c0a      	ldr	r4, [pc, #40]	@ (80022e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022c2:	f009 f87f 	bl	800b3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c6:	f7fe fe17 	bl	8000ef8 <main>
  bx  lr    
 80022ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80022d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80022d8:	0800bee8 	.word	0x0800bee8
  ldr r2, =_sbss
 80022dc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80022e0:	2000549c 	.word	0x2000549c

080022e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC_IRQHandler>

080022e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ea:	2003      	movs	r0, #3
 80022ec:	f000 f94c 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f0:	200f      	movs	r0, #15
 80022f2:	f000 f805 	bl	8002300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f6:	f7fe ff55 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_InitTick+0x54>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_InitTick+0x58>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f967 	bl	80025f2 <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00e      	b.n	800234c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d80a      	bhi.n	800234a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002334:	2200      	movs	r2, #0
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f000 f92f 	bl	800259e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002340:	4a06      	ldr	r2, [pc, #24]	@ (800235c <HAL_InitTick+0x5c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000000 	.word	0x20000000
 8002358:	20000008 	.word	0x20000008
 800235c:	20000004 	.word	0x20000004

08002360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_IncTick+0x20>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_IncTick+0x24>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4413      	add	r3, r2
 8002370:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <HAL_IncTick+0x24>)
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000008 	.word	0x20000008
 8002384:	20000a08 	.word	0x20000a08

08002388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return uwTick;
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_GetTick+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000a08 	.word	0x20000a08

080023a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff ffee 	bl	8002388 <HAL_GetTick>
 80023ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d005      	beq.n	80023c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_Delay+0x44>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c6:	bf00      	nop
 80023c8:	f7ff ffde 	bl	8002388 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d8f7      	bhi.n	80023c8 <HAL_Delay+0x28>
  {
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000008 	.word	0x20000008

080023e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <__NVIC_SetPriorityGrouping+0x40>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002404:	4013      	ands	r3, r2
 8002406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	4313      	orrs	r3, r2
 8002414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002416:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <__NVIC_SetPriorityGrouping+0x40>)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	60d3      	str	r3, [r2, #12]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00
 800242c:	05fa0000 	.word	0x05fa0000

08002430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002434:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <__NVIC_GetPriorityGrouping+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0307 	and.w	r3, r3, #7
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0b      	blt.n	8002476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	@ (8002484 <__NVIC_EnableIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db0a      	blt.n	80024b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	490c      	ldr	r1, [pc, #48]	@ (80024d4 <__NVIC_SetPriority+0x4c>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	0112      	lsls	r2, r2, #4
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	440b      	add	r3, r1
 80024ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b0:	e00a      	b.n	80024c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4908      	ldr	r1, [pc, #32]	@ (80024d8 <__NVIC_SetPriority+0x50>)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	3b04      	subs	r3, #4
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	761a      	strb	r2, [r3, #24]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000e100 	.word	0xe000e100
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	@ 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f1c3 0307 	rsb	r3, r3, #7
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	bf28      	it	cs
 80024fa:	2304      	movcs	r3, #4
 80024fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3304      	adds	r3, #4
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <NVIC_EncodePriority+0x30>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3b03      	subs	r3, #3
 800250a:	e000      	b.n	800250e <NVIC_EncodePriority+0x32>
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	401a      	ands	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	4313      	orrs	r3, r2
         );
}
 8002536:	4618      	mov	r0, r3
 8002538:	3724      	adds	r7, #36	@ 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f7ff ff8e 	bl	8002488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff29 	bl	80023e8 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff3e 	bl	8002430 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff8e 	bl	80024dc <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5d 	bl	8002488 <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff31 	bl	800244c <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa2 	bl	8002544 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff feb6 	bl	8002388 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e099      	b.n	800275c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002648:	e00f      	b.n	800266a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264a:	f7ff fe9d 	bl	8002388 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b05      	cmp	r3, #5
 8002656:	d908      	bls.n	800266a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2203      	movs	r2, #3
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e078      	b.n	800275c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e8      	bne.n	800264a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4b38      	ldr	r3, [pc, #224]	@ (8002764 <HAL_DMA_Init+0x158>)
 8002684:	4013      	ands	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002696:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d107      	bne.n	80026d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	4313      	orrs	r3, r2
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0307 	bic.w	r3, r3, #7
 80026ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d117      	bne.n	800272e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fb15 	bl	8002d40 <DMA_CheckFifoParam>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2240      	movs	r2, #64	@ 0x40
 8002720:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800272a:	2301      	movs	r3, #1
 800272c:	e016      	b.n	800275c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 facc 	bl	8002cd4 <DMA_CalcBaseAndBitshift>
 800273c:	4603      	mov	r3, r0
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	223f      	movs	r2, #63	@ 0x3f
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	e010803f 	.word	0xe010803f

08002768 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_DMA_Start_IT+0x26>
 800278a:	2302      	movs	r3, #2
 800278c:	e048      	b.n	8002820 <HAL_DMA_Start_IT+0xb8>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d137      	bne.n	8002812 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2202      	movs	r2, #2
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fa5e 	bl	8002c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c0:	223f      	movs	r2, #63	@ 0x3f
 80027c2:	409a      	lsls	r2, r3
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0216 	orr.w	r2, r2, #22
 80027d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0208 	orr.w	r2, r2, #8
 80027fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e005      	b.n	800281e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800281a:	2302      	movs	r3, #2
 800281c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002834:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002836:	f7ff fda7 	bl	8002388 <HAL_GetTick>
 800283a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d008      	beq.n	800285a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2280      	movs	r2, #128	@ 0x80
 800284c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e052      	b.n	8002900 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0216 	bic.w	r2, r2, #22
 8002868:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002878:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_DMA_Abort+0x62>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0208 	bic.w	r2, r2, #8
 8002898:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028aa:	e013      	b.n	80028d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ac:	f7ff fd6c 	bl	8002388 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d90c      	bls.n	80028d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2203      	movs	r2, #3
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e015      	b.n	8002900 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e4      	bne.n	80028ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e6:	223f      	movs	r2, #63	@ 0x3f
 80028e8:	409a      	lsls	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d004      	beq.n	8002926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2280      	movs	r2, #128	@ 0x80
 8002920:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00c      	b.n	8002940 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2205      	movs	r2, #5
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002958:	4b8e      	ldr	r3, [pc, #568]	@ (8002b94 <HAL_DMA_IRQHandler+0x248>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a8e      	ldr	r2, [pc, #568]	@ (8002b98 <HAL_DMA_IRQHandler+0x24c>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0a9b      	lsrs	r3, r3, #10
 8002964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002976:	2208      	movs	r2, #8
 8002978:	409a      	lsls	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01a      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0204 	bic.w	r2, r2, #4
 800299e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a4:	2208      	movs	r2, #8
 80029a6:	409a      	lsls	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029bc:	2201      	movs	r2, #1
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d012      	beq.n	80029ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029da:	2201      	movs	r2, #1
 80029dc:	409a      	lsls	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	2204      	movs	r2, #4
 80029f4:	409a      	lsls	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d012      	beq.n	8002a24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	2204      	movs	r2, #4
 8002a12:	409a      	lsls	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1c:	f043 0204 	orr.w	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	2210      	movs	r2, #16
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d043      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d03c      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a46:	2210      	movs	r2, #16
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d018      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d108      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d024      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
 8002a7a:	e01f      	b.n	8002abc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
 8002a8c:	e016      	b.n	8002abc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0208 	bic.w	r2, r2, #8
 8002aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 808f 	beq.w	8002bec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8087 	beq.w	8002bec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d136      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0216 	bic.w	r2, r2, #22
 8002b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <HAL_DMA_IRQHandler+0x1da>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0208 	bic.w	r2, r2, #8
 8002b34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	223f      	movs	r2, #63	@ 0x3f
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d07e      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
        }
        return;
 8002b62:	e079      	b.n	8002c58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01d      	beq.n	8002bae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d031      	beq.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
 8002b90:	e02c      	b.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000
 8002b98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d023      	beq.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
 8002bac:	e01e      	b.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10f      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0210 	bic.w	r2, r2, #16
 8002bca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d032      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2205      	movs	r2, #5
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d307      	bcc.n	8002c34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f2      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x2cc>
 8002c32:	e000      	b.n	8002c36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
 8002c56:	e000      	b.n	8002c5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c58:	bf00      	nop
    }
  }
}
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b40      	cmp	r3, #64	@ 0x40
 8002ca4:	d108      	bne.n	8002cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cb6:	e007      	b.n	8002cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	3b10      	subs	r3, #16
 8002ce4:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <DMA_CalcBaseAndBitshift+0x60>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cee:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <DMA_CalcBaseAndBitshift+0x64>)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d908      	bls.n	8002d14 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b0c      	ldr	r3, [pc, #48]	@ (8002d3c <DMA_CalcBaseAndBitshift+0x68>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	1d1a      	adds	r2, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d12:	e006      	b.n	8002d22 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <DMA_CalcBaseAndBitshift+0x68>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	aaaaaaab 	.word	0xaaaaaaab
 8002d38:	0800bd9c 	.word	0x0800bd9c
 8002d3c:	fffffc00 	.word	0xfffffc00

08002d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11f      	bne.n	8002d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d856      	bhi.n	8002e0e <DMA_CheckFifoParam+0xce>
 8002d60:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <DMA_CheckFifoParam+0x28>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002d8b 	.word	0x08002d8b
 8002d70:	08002d79 	.word	0x08002d79
 8002d74:	08002e0f 	.word	0x08002e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d046      	beq.n	8002e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e043      	b.n	8002e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d92:	d140      	bne.n	8002e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d98:	e03d      	b.n	8002e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da2:	d121      	bne.n	8002de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d837      	bhi.n	8002e1a <DMA_CheckFifoParam+0xda>
 8002daa:	a201      	add	r2, pc, #4	@ (adr r2, 8002db0 <DMA_CheckFifoParam+0x70>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002dc7 	.word	0x08002dc7
 8002db8:	08002dc1 	.word	0x08002dc1
 8002dbc:	08002dd9 	.word	0x08002dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc4:	e030      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d025      	beq.n	8002e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd6:	e022      	b.n	8002e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002de0:	d11f      	bne.n	8002e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002de6:	e01c      	b.n	8002e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d903      	bls.n	8002df6 <DMA_CheckFifoParam+0xb6>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d003      	beq.n	8002dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002df4:	e018      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfa:	e015      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00e      	beq.n	8002e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e00b      	b.n	8002e26 <DMA_CheckFifoParam+0xe6>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e00a      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e12:	bf00      	nop
 8002e14:	e008      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
 8002e18:	e006      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e004      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e26:	bf00      	nop
    }
  } 
  
  return status; 
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	@ 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e175      	b.n	8003144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	f040 8164 	bne.w	800313e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d005      	beq.n	8002e8e <HAL_GPIO_Init+0x56>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d130      	bne.n	8002ef0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2203      	movs	r2, #3
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 0201 	and.w	r2, r3, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d017      	beq.n	8002f2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d123      	bne.n	8002f80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	08da      	lsrs	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3208      	adds	r2, #8
 8002f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	220f      	movs	r2, #15
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	08da      	lsrs	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3208      	adds	r2, #8
 8002f7a:	69b9      	ldr	r1, [r7, #24]
 8002f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0203 	and.w	r2, r3, #3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80be 	beq.w	800313e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc2:	4b66      	ldr	r3, [pc, #408]	@ (800315c <HAL_GPIO_Init+0x324>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	4a65      	ldr	r2, [pc, #404]	@ (800315c <HAL_GPIO_Init+0x324>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fce:	4b63      	ldr	r3, [pc, #396]	@ (800315c <HAL_GPIO_Init+0x324>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fda:	4a61      	ldr	r2, [pc, #388]	@ (8003160 <HAL_GPIO_Init+0x328>)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a58      	ldr	r2, [pc, #352]	@ (8003164 <HAL_GPIO_Init+0x32c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d037      	beq.n	8003076 <HAL_GPIO_Init+0x23e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a57      	ldr	r2, [pc, #348]	@ (8003168 <HAL_GPIO_Init+0x330>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_GPIO_Init+0x23a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a56      	ldr	r2, [pc, #344]	@ (800316c <HAL_GPIO_Init+0x334>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02b      	beq.n	800306e <HAL_GPIO_Init+0x236>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a55      	ldr	r2, [pc, #340]	@ (8003170 <HAL_GPIO_Init+0x338>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d025      	beq.n	800306a <HAL_GPIO_Init+0x232>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a54      	ldr	r2, [pc, #336]	@ (8003174 <HAL_GPIO_Init+0x33c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01f      	beq.n	8003066 <HAL_GPIO_Init+0x22e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a53      	ldr	r2, [pc, #332]	@ (8003178 <HAL_GPIO_Init+0x340>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d019      	beq.n	8003062 <HAL_GPIO_Init+0x22a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a52      	ldr	r2, [pc, #328]	@ (800317c <HAL_GPIO_Init+0x344>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_GPIO_Init+0x226>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a51      	ldr	r2, [pc, #324]	@ (8003180 <HAL_GPIO_Init+0x348>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00d      	beq.n	800305a <HAL_GPIO_Init+0x222>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a50      	ldr	r2, [pc, #320]	@ (8003184 <HAL_GPIO_Init+0x34c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <HAL_GPIO_Init+0x21e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4f      	ldr	r2, [pc, #316]	@ (8003188 <HAL_GPIO_Init+0x350>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_GPIO_Init+0x21a>
 800304e:	2309      	movs	r3, #9
 8003050:	e012      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003052:	230a      	movs	r3, #10
 8003054:	e010      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003056:	2308      	movs	r3, #8
 8003058:	e00e      	b.n	8003078 <HAL_GPIO_Init+0x240>
 800305a:	2307      	movs	r3, #7
 800305c:	e00c      	b.n	8003078 <HAL_GPIO_Init+0x240>
 800305e:	2306      	movs	r3, #6
 8003060:	e00a      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003062:	2305      	movs	r3, #5
 8003064:	e008      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003066:	2304      	movs	r3, #4
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x240>
 800306a:	2303      	movs	r3, #3
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x240>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x240>
 8003076:	2300      	movs	r3, #0
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003088:	4935      	ldr	r1, [pc, #212]	@ (8003160 <HAL_GPIO_Init+0x328>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003096:	4b3d      	ldr	r3, [pc, #244]	@ (800318c <HAL_GPIO_Init+0x354>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ba:	4a34      	ldr	r2, [pc, #208]	@ (800318c <HAL_GPIO_Init+0x354>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c0:	4b32      	ldr	r3, [pc, #200]	@ (800318c <HAL_GPIO_Init+0x354>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e4:	4a29      	ldr	r2, [pc, #164]	@ (800318c <HAL_GPIO_Init+0x354>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ea:	4b28      	ldr	r3, [pc, #160]	@ (800318c <HAL_GPIO_Init+0x354>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800310e:	4a1f      	ldr	r2, [pc, #124]	@ (800318c <HAL_GPIO_Init+0x354>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003114:	4b1d      	ldr	r3, [pc, #116]	@ (800318c <HAL_GPIO_Init+0x354>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003138:	4a14      	ldr	r2, [pc, #80]	@ (800318c <HAL_GPIO_Init+0x354>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	f67f ae86 	bls.w	8002e58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3724      	adds	r7, #36	@ 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	40013800 	.word	0x40013800
 8003164:	40020000 	.word	0x40020000
 8003168:	40020400 	.word	0x40020400
 800316c:	40020800 	.word	0x40020800
 8003170:	40020c00 	.word	0x40020c00
 8003174:	40021000 	.word	0x40021000
 8003178:	40021400 	.word	0x40021400
 800317c:	40021800 	.word	0x40021800
 8003180:	40021c00 	.word	0x40021c00
 8003184:	40022000 	.word	0x40022000
 8003188:	40022400 	.word	0x40022400
 800318c:	40013c00 	.word	0x40013c00

08003190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
 800319c:	4613      	mov	r3, r2
 800319e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a0:	787b      	ldrb	r3, [r7, #1]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031ac:	e003      	b.n	80031b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	041a      	lsls	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	619a      	str	r2, [r3, #24]
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031d4:	887a      	ldrh	r2, [r7, #2]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	041a      	lsls	r2, r3, #16
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43d9      	mvns	r1, r3
 80031e0:	887b      	ldrh	r3, [r7, #2]
 80031e2:	400b      	ands	r3, r1
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	619a      	str	r2, [r3, #24]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af02      	add	r7, sp, #8
 80031fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e108      	b.n	800341a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe ffbc 	bl	80021a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003236:	d102      	bne.n	800323e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f004 f996 	bl	8007574 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7c1a      	ldrb	r2, [r3, #16]
 8003250:	f88d 2000 	strb.w	r2, [sp]
 8003254:	3304      	adds	r3, #4
 8003256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003258:	f004 f932 	bl	80074c0 <USB_CoreInit>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0d5      	b.n	800341a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f004 f98e 	bl	8007596 <USB_SetCurrentMode>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0c6      	b.n	800341a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	e04a      	b.n	8003328 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3315      	adds	r3, #21
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3314      	adds	r3, #20
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	b298      	uxth	r0, r3
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	332e      	adds	r3, #46	@ 0x2e
 80032ce:	4602      	mov	r2, r0
 80032d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3318      	adds	r3, #24
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	331c      	adds	r3, #28
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	3320      	adds	r3, #32
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3324      	adds	r3, #36	@ 0x24
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	3301      	adds	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	791b      	ldrb	r3, [r3, #4]
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	429a      	cmp	r2, r3
 8003330:	d3af      	bcc.n	8003292 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
 8003336:	e044      	b.n	80033c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	3301      	adds	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	791b      	ldrb	r3, [r3, #4]
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d3b5      	bcc.n	8003338 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	7c1a      	ldrb	r2, [r3, #16]
 80033d4:	f88d 2000 	strb.w	r2, [sp]
 80033d8:	3304      	adds	r3, #4
 80033da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033dc:	f004 f928 	bl	8007630 <USB_DevInit>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e013      	b.n	800341a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7b1b      	ldrb	r3, [r3, #12]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d102      	bne.n	800340e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f80b 	bl	8003424 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f004 fae3 	bl	80079de <USB_DevDisconnect>

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003452:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <HAL_PCDEx_ActivateLPM+0x44>)
 8003454:	4313      	orrs	r3, r2
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	10000003 	.word	0x10000003

0800346c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a04      	ldr	r2, [pc, #16]	@ (8003488 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40007000 	.word	0x40007000

0800348c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	4b23      	ldr	r3, [pc, #140]	@ (8003524 <HAL_PWREx_EnableOverDrive+0x98>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	4a22      	ldr	r2, [pc, #136]	@ (8003524 <HAL_PWREx_EnableOverDrive+0x98>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_PWREx_EnableOverDrive+0x98>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ba:	f7fe ff65 	bl	8002388 <HAL_GetTick>
 80034be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034c0:	e009      	b.n	80034d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034c2:	f7fe ff61 	bl	8002388 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034d0:	d901      	bls.n	80034d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e022      	b.n	800351c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e2:	d1ee      	bne.n	80034c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034e4:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f0:	f7fe ff4a 	bl	8002388 <HAL_GetTick>
 80034f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034f6:	e009      	b.n	800350c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034f8:	f7fe ff46 	bl	8002388 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003506:	d901      	bls.n	800350c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e007      	b.n	800351c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003518:	d1ee      	bne.n	80034f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000

0800352c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e29b      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8087 	beq.w	800365e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003550:	4b96      	ldr	r3, [pc, #600]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b04      	cmp	r3, #4
 800355a:	d00c      	beq.n	8003576 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355c:	4b93      	ldr	r3, [pc, #588]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d112      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
 8003568:	4b90      	ldr	r3, [pc, #576]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003574:	d10b      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003576:	4b8d      	ldr	r3, [pc, #564]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d06c      	beq.n	800365c <HAL_RCC_OscConfig+0x130>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d168      	bne.n	800365c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e275      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x7a>
 8003598:	4b84      	ldr	r3, [pc, #528]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a83      	ldr	r2, [pc, #524]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e02e      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x9c>
 80035ae:	4b7f      	ldr	r3, [pc, #508]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b7c      	ldr	r3, [pc, #496]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7b      	ldr	r2, [pc, #492]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xc0>
 80035d2:	4b76      	ldr	r3, [pc, #472]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a75      	ldr	r2, [pc, #468]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b73      	ldr	r3, [pc, #460]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a72      	ldr	r2, [pc, #456]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035ec:	4b6f      	ldr	r3, [pc, #444]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b6c      	ldr	r3, [pc, #432]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6b      	ldr	r2, [pc, #428]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe febc 	bl	8002388 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe feb8 	bl	8002388 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e229      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe fea8 	bl	8002388 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe fea4 	bl	8002388 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e215      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b57      	ldr	r3, [pc, #348]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x110>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d069      	beq.n	800373e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366a:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b4d      	ldr	r3, [pc, #308]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x190>
 8003682:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b47      	ldr	r3, [pc, #284]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1e9      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b41      	ldr	r3, [pc, #260]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	493d      	ldr	r1, [pc, #244]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e040      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d023      	beq.n	800370c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b39      	ldr	r3, [pc, #228]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a38      	ldr	r2, [pc, #224]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fe5a 	bl	8002388 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d8:	f7fe fe56 	bl	8002388 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e1c7      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	4b30      	ldr	r3, [pc, #192]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4929      	ldr	r1, [pc, #164]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
 800370a:	e018      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370c:	4b27      	ldr	r3, [pc, #156]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a26      	ldr	r2, [pc, #152]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fe36 	bl	8002388 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003720:	f7fe fe32 	bl	8002388 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1a3      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d038      	beq.n	80037bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d019      	beq.n	8003786 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003756:	4a15      	ldr	r2, [pc, #84]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe fe13 	bl	8002388 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003766:	f7fe fe0f 	bl	8002388 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e180      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003778:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x23a>
 8003784:	e01a      	b.n	80037bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378a:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fe fdf9 	bl	8002388 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379a:	f7fe fdf5 	bl	8002388 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d903      	bls.n	80037b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e166      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
 80037ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	4b92      	ldr	r3, [pc, #584]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a4 	beq.w	8003912 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ca:	4b8c      	ldr	r3, [pc, #560]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	4b89      	ldr	r3, [pc, #548]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4a88      	ldr	r2, [pc, #544]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e2:	4b86      	ldr	r3, [pc, #536]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f2:	4b83      	ldr	r3, [pc, #524]	@ (8003a00 <HAL_RCC_OscConfig+0x4d4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037fe:	4b80      	ldr	r3, [pc, #512]	@ (8003a00 <HAL_RCC_OscConfig+0x4d4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a7f      	ldr	r2, [pc, #508]	@ (8003a00 <HAL_RCC_OscConfig+0x4d4>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe fdbd 	bl	8002388 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fe fdb9 	bl	8002388 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b64      	cmp	r3, #100	@ 0x64
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e12a      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003824:	4b76      	ldr	r3, [pc, #472]	@ (8003a00 <HAL_RCC_OscConfig+0x4d4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x31a>
 8003838:	4b70      	ldr	r3, [pc, #448]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	4a6f      	ldr	r2, [pc, #444]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	@ 0x70
 8003844:	e02d      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x33c>
 800384e:	4b6b      	ldr	r3, [pc, #428]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003852:	4a6a      	ldr	r2, [pc, #424]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6713      	str	r3, [r2, #112]	@ 0x70
 800385a:	4b68      	ldr	r3, [pc, #416]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	4a67      	ldr	r2, [pc, #412]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	6713      	str	r3, [r2, #112]	@ 0x70
 8003866:	e01c      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d10c      	bne.n	800388a <HAL_RCC_OscConfig+0x35e>
 8003870:	4b62      	ldr	r3, [pc, #392]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	4a61      	ldr	r2, [pc, #388]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6713      	str	r3, [r2, #112]	@ 0x70
 800387c:	4b5f      	ldr	r3, [pc, #380]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a5e      	ldr	r2, [pc, #376]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	e00b      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
 800388a:	4b5c      	ldr	r3, [pc, #368]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	4a5b      	ldr	r2, [pc, #364]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	@ 0x70
 8003896:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	4a58      	ldr	r2, [pc, #352]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d015      	beq.n	80038d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe fd6d 	bl	8002388 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe fd69 	bl	8002388 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0d8      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	4b4c      	ldr	r3, [pc, #304]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ee      	beq.n	80038b2 <HAL_RCC_OscConfig+0x386>
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fe fd57 	bl	8002388 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fe fd53 	bl	8002388 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0c2      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f4:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ee      	bne.n	80038de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003906:	4b3d      	ldr	r3, [pc, #244]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	4a3c      	ldr	r2, [pc, #240]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 800390c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80ae 	beq.w	8003a78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800391c:	4b37      	ldr	r3, [pc, #220]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b08      	cmp	r3, #8
 8003926:	d06d      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d14b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b32      	ldr	r3, [pc, #200]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a31      	ldr	r2, [pc, #196]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe fd24 	bl	8002388 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fe fd20 	bl	8002388 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e091      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	4b29      	ldr	r3, [pc, #164]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	491b      	ldr	r1, [pc, #108]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003994:	4b19      	ldr	r3, [pc, #100]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a18      	ldr	r2, [pc, #96]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 800399a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fe fcf2 	bl	8002388 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe fcee 	bl	8002388 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e05f      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x47c>
 80039c6:	e057      	b.n	8003a78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0b      	ldr	r2, [pc, #44]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80039ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe fcd8 	bl	8002388 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fe fcd4 	bl	8002388 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e045      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b03      	ldr	r3, [pc, #12]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x4b0>
 80039fa:	e03d      	b.n	8003a78 <HAL_RCC_OscConfig+0x54c>
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a04:	4b1f      	ldr	r3, [pc, #124]	@ (8003a84 <HAL_RCC_OscConfig+0x558>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d030      	beq.n	8003a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d129      	bne.n	8003a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d122      	bne.n	8003a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d119      	bne.n	8003a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d10f      	bne.n	8003a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800

08003a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0d0      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d910      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b67      	ldr	r3, [pc, #412]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 020f 	bic.w	r2, r3, #15
 8003ab6:	4965      	ldr	r1, [pc, #404]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b63      	ldr	r3, [pc, #396]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0b8      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae8:	4b59      	ldr	r3, [pc, #356]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a58      	ldr	r2, [pc, #352]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003aee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003af2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b00:	4b53      	ldr	r3, [pc, #332]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4a52      	ldr	r2, [pc, #328]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b50      	ldr	r3, [pc, #320]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	494d      	ldr	r1, [pc, #308]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d040      	beq.n	8003bac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d115      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07f      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	4b41      	ldr	r3, [pc, #260]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e073      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06b      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b39      	ldr	r3, [pc, #228]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4936      	ldr	r1, [pc, #216]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7c:	f7fe fc04 	bl	8002388 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fe fc00 	bl	8002388 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e053      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d210      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b24      	ldr	r3, [pc, #144]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 020f 	bic.w	r2, r3, #15
 8003bc2:	4922      	ldr	r1, [pc, #136]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b20      	ldr	r3, [pc, #128]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e032      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be8:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4916      	ldr	r1, [pc, #88]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c06:	4b12      	ldr	r3, [pc, #72]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	490e      	ldr	r1, [pc, #56]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c1a:	f000 f821 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	490a      	ldr	r1, [pc, #40]	@ (8003c54 <HAL_RCC_ClockConfig+0x1cc>)
 8003c2c:	5ccb      	ldrb	r3, [r1, r3]
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	4a09      	ldr	r2, [pc, #36]	@ (8003c58 <HAL_RCC_ClockConfig+0x1d0>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c36:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <HAL_RCC_ClockConfig+0x1d4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fb60 	bl	8002300 <HAL_InitTick>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023c00 	.word	0x40023c00
 8003c50:	40023800 	.word	0x40023800
 8003c54:	0800bd84 	.word	0x0800bd84
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	20000004 	.word	0x20000004

08003c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c64:	b094      	sub	sp, #80	@ 0x50
 8003c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c70:	2300      	movs	r3, #0
 8003c72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c78:	4b79      	ldr	r3, [pc, #484]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d00d      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	f200 80e1 	bhi.w	8003e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x34>
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d003      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c92:	e0db      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c94:	4b73      	ldr	r3, [pc, #460]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c98:	e0db      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c9a:	4b73      	ldr	r3, [pc, #460]	@ (8003e68 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c9e:	e0d8      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ca8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003caa:	4b6d      	ldr	r3, [pc, #436]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d063      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cca:	2300      	movs	r3, #0
 8003ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	f04f 0000 	mov.w	r0, #0
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	0159      	lsls	r1, r3, #5
 8003ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce4:	0150      	lsls	r0, r2, #5
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4621      	mov	r1, r4
 8003cec:	1a51      	subs	r1, r2, r1
 8003cee:	6139      	str	r1, [r7, #16]
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d04:	4659      	mov	r1, fp
 8003d06:	018b      	lsls	r3, r1, #6
 8003d08:	4651      	mov	r1, sl
 8003d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d0e:	4651      	mov	r1, sl
 8003d10:	018a      	lsls	r2, r1, #6
 8003d12:	4651      	mov	r1, sl
 8003d14:	ebb2 0801 	subs.w	r8, r2, r1
 8003d18:	4659      	mov	r1, fp
 8003d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d32:	4690      	mov	r8, r2
 8003d34:	4699      	mov	r9, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	eb18 0303 	adds.w	r3, r8, r3
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	462b      	mov	r3, r5
 8003d40:	eb49 0303 	adc.w	r3, r9, r3
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d52:	4629      	mov	r1, r5
 8003d54:	024b      	lsls	r3, r1, #9
 8003d56:	4621      	mov	r1, r4
 8003d58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	024a      	lsls	r2, r1, #9
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d66:	2200      	movs	r2, #0
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d70:	f7fc face 	bl	8000310 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d7c:	e058      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7e:	4b38      	ldr	r3, [pc, #224]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	2200      	movs	r2, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	4611      	mov	r1, r2
 8003d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	2300      	movs	r3, #0
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d98:	4642      	mov	r2, r8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	f04f 0000 	mov.w	r0, #0
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	0159      	lsls	r1, r3, #5
 8003da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003daa:	0150      	lsls	r0, r2, #5
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4641      	mov	r1, r8
 8003db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003db6:	4649      	mov	r1, r9
 8003db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8003dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	00eb      	lsls	r3, r5, #3
 8003de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de6:	00e2      	lsls	r2, r4, #3
 8003de8:	4614      	mov	r4, r2
 8003dea:	461d      	mov	r5, r3
 8003dec:	4643      	mov	r3, r8
 8003dee:	18e3      	adds	r3, r4, r3
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	464b      	mov	r3, r9
 8003df4:	eb45 0303 	adc.w	r3, r5, r3
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e06:	4629      	mov	r1, r5
 8003e08:	028b      	lsls	r3, r1, #10
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e10:	4621      	mov	r1, r4
 8003e12:	028a      	lsls	r2, r1, #10
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	61fa      	str	r2, [r7, #28]
 8003e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e24:	f7fc fa74 	bl	8000310 <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e4a:	e002      	b.n	8003e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e4c:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3750      	adds	r7, #80	@ 0x50
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	00f42400 	.word	0x00f42400
 8003e68:	007a1200 	.word	0x007a1200

08003e6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e70:	4b03      	ldr	r3, [pc, #12]	@ (8003e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000000 	.word	0x20000000

08003e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e88:	f7ff fff0 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0a9b      	lsrs	r3, r3, #10
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4903      	ldr	r1, [pc, #12]	@ (8003ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	0800bd94 	.word	0x0800bd94

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003eb0:	f7ff ffdc 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0b5b      	lsrs	r3, r3, #13
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	@ (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	0800bd94 	.word	0x0800bd94

08003ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d012      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003efc:	4b69      	ldr	r3, [pc, #420]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a68      	ldr	r2, [pc, #416]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f06:	6093      	str	r3, [r2, #8]
 8003f08:	4b66      	ldr	r3, [pc, #408]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f10:	4964      	ldr	r1, [pc, #400]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d017      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f34:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	4959      	ldr	r1, [pc, #356]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d017      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	494a      	ldr	r1, [pc, #296]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f88:	d101      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 808b 	beq.w	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	4a39      	ldr	r2, [pc, #228]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc4:	4b37      	ldr	r3, [pc, #220]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fd0:	4b35      	ldr	r3, [pc, #212]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a34      	ldr	r2, [pc, #208]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fe f9d4 	bl	8002388 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe4:	f7fe f9d0 	bl	8002388 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	@ 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e38f      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004002:	4b28      	ldr	r3, [pc, #160]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800400a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d035      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	429a      	cmp	r2, r3
 800401e:	d02e      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004020:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004028:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800402a:	4b1e      	ldr	r3, [pc, #120]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	4a1d      	ldr	r2, [pc, #116]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004034:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004036:	4b1b      	ldr	r3, [pc, #108]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	4a1a      	ldr	r2, [pc, #104]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004040:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004042:	4a18      	ldr	r2, [pc, #96]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004048:	4b16      	ldr	r3, [pc, #88]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	d114      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fe f998 	bl	8002388 <HAL_GetTick>
 8004058:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fe f994 	bl	8002388 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e351      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ee      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800408a:	d111      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800408c:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004098:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800409a:	400b      	ands	r3, r1
 800409c:	4901      	ldr	r1, [pc, #4]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
 80040a2:	e00b      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40007000 	.word	0x40007000
 80040ac:	0ffffcff 	.word	0x0ffffcff
 80040b0:	4bac      	ldr	r3, [pc, #688]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4aab      	ldr	r2, [pc, #684]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80040ba:	6093      	str	r3, [r2, #8]
 80040bc:	4ba9      	ldr	r3, [pc, #676]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c8:	49a6      	ldr	r1, [pc, #664]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d010      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040da:	4ba2      	ldr	r3, [pc, #648]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040e0:	4aa0      	ldr	r2, [pc, #640]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80040ea:	4b9e      	ldr	r3, [pc, #632]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f4:	499b      	ldr	r1, [pc, #620]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004108:	4b96      	ldr	r3, [pc, #600]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004116:	4993      	ldr	r1, [pc, #588]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800412a:	4b8e      	ldr	r3, [pc, #568]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004130:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004138:	498a      	ldr	r1, [pc, #552]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800414c:	4b85      	ldr	r3, [pc, #532]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800415a:	4982      	ldr	r1, [pc, #520]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800416e:	4b7d      	ldr	r3, [pc, #500]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004174:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	4979      	ldr	r1, [pc, #484]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004190:	4b74      	ldr	r3, [pc, #464]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004196:	f023 0203 	bic.w	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	4971      	ldr	r1, [pc, #452]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b8:	f023 020c 	bic.w	r2, r3, #12
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c0:	4968      	ldr	r1, [pc, #416]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041d4:	4b63      	ldr	r3, [pc, #396]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e2:	4960      	ldr	r1, [pc, #384]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004204:	4957      	ldr	r1, [pc, #348]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004218:	4b52      	ldr	r3, [pc, #328]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004226:	494f      	ldr	r1, [pc, #316]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800423a:	4b4a      	ldr	r3, [pc, #296]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004240:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004248:	4946      	ldr	r1, [pc, #280]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800425c:	4b41      	ldr	r3, [pc, #260]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426a:	493e      	ldr	r1, [pc, #248]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800427e:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004284:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800428c:	4935      	ldr	r1, [pc, #212]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042a0:	4b30      	ldr	r3, [pc, #192]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ae:	492d      	ldr	r1, [pc, #180]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d011      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042c2:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042d0:	4924      	ldr	r1, [pc, #144]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e0:	d101      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004302:	4b18      	ldr	r3, [pc, #96]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004308:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004310:	4914      	ldr	r1, [pc, #80]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004324:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004334:	490b      	ldr	r1, [pc, #44]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00f      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004358:	4902      	ldr	r1, [pc, #8]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004374:	4b8a      	ldr	r3, [pc, #552]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800437a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004384:	4986      	ldr	r1, [pc, #536]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004398:	4b81      	ldr	r3, [pc, #516]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800439e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043a8:	497d      	ldr	r1, [pc, #500]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d006      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80d6 	beq.w	8004570 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043c4:	4b76      	ldr	r3, [pc, #472]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a75      	ldr	r2, [pc, #468]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d0:	f7fd ffda 	bl	8002388 <HAL_GetTick>
 80043d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043d8:	f7fd ffd6 	bl	8002388 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	@ 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e195      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ea:	4b6d      	ldr	r3, [pc, #436]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d021      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	2b00      	cmp	r3, #0
 8004408:	d11d      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800440a:	4b65      	ldr	r3, [pc, #404]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004418:	4b61      	ldr	r3, [pc, #388]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800441e:	0e1b      	lsrs	r3, r3, #24
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	019a      	lsls	r2, r3, #6
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	431a      	orrs	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	071b      	lsls	r3, r3, #28
 800443e:	4958      	ldr	r1, [pc, #352]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004464:	2b00      	cmp	r3, #0
 8004466:	d02e      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004470:	d129      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004472:	4b4b      	ldr	r3, [pc, #300]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004480:	4b47      	ldr	r3, [pc, #284]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004486:	0f1b      	lsrs	r3, r3, #28
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	019a      	lsls	r2, r3, #6
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	061b      	lsls	r3, r3, #24
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	071b      	lsls	r3, r3, #28
 80044a6:	493e      	ldr	r1, [pc, #248]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044ae:	4b3c      	ldr	r3, [pc, #240]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044b4:	f023 021f 	bic.w	r2, r3, #31
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	3b01      	subs	r3, #1
 80044be:	4938      	ldr	r1, [pc, #224]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01d      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044d2:	4b33      	ldr	r3, [pc, #204]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044e0:	4b2f      	ldr	r3, [pc, #188]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e6:	0f1b      	lsrs	r3, r3, #28
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	019a      	lsls	r2, r3, #6
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	431a      	orrs	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	061b      	lsls	r3, r3, #24
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	071b      	lsls	r3, r3, #28
 8004506:	4926      	ldr	r1, [pc, #152]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d011      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	019a      	lsls	r2, r3, #6
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	041b      	lsls	r3, r3, #16
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	061b      	lsls	r3, r3, #24
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	071b      	lsls	r3, r3, #28
 8004536:	491a      	ldr	r1, [pc, #104]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800453e:	4b18      	ldr	r3, [pc, #96]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a17      	ldr	r2, [pc, #92]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004544:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454a:	f7fd ff1d 	bl	8002388 <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004552:	f7fd ff19 	bl	8002388 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b64      	cmp	r3, #100	@ 0x64
 800455e:	d901      	bls.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e0d8      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004564:	4b0e      	ldr	r3, [pc, #56]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b01      	cmp	r3, #1
 8004574:	f040 80ce 	bne.w	8004714 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004578:	4b09      	ldr	r3, [pc, #36]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a08      	ldr	r2, [pc, #32]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004584:	f7fd ff00 	bl	8002388 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800458a:	e00b      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800458c:	f7fd fefc 	bl	8002388 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	@ 0x64
 8004598:	d904      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e0bb      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045b0:	d0ec      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d02e      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d12a      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045da:	4b51      	ldr	r3, [pc, #324]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045e8:	4b4d      	ldr	r3, [pc, #308]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ee:	0f1b      	lsrs	r3, r3, #28
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	019a      	lsls	r2, r3, #6
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	041b      	lsls	r3, r3, #16
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	071b      	lsls	r3, r3, #28
 800460e:	4944      	ldr	r1, [pc, #272]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004616:	4b42      	ldr	r3, [pc, #264]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800461c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	3b01      	subs	r3, #1
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	493d      	ldr	r1, [pc, #244]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d022      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004644:	d11d      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004646:	4b36      	ldr	r3, [pc, #216]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464c:	0e1b      	lsrs	r3, r3, #24
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004654:	4b32      	ldr	r3, [pc, #200]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465a:	0f1b      	lsrs	r3, r3, #28
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	019a      	lsls	r2, r3, #6
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	431a      	orrs	r2, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	061b      	lsls	r3, r3, #24
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	071b      	lsls	r3, r3, #28
 800467a:	4929      	ldr	r1, [pc, #164]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d028      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800468e:	4b24      	ldr	r3, [pc, #144]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004694:	0e1b      	lsrs	r3, r3, #24
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800469c:	4b20      	ldr	r3, [pc, #128]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	019a      	lsls	r2, r3, #6
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	041b      	lsls	r3, r3, #16
 80046b4:	431a      	orrs	r2, r3
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	071b      	lsls	r3, r3, #28
 80046c2:	4917      	ldr	r1, [pc, #92]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046ca:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	4911      	ldr	r1, [pc, #68]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ec:	f7fd fe4c 	bl	8002388 <HAL_GetTick>
 80046f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046f4:	f7fd fe48 	bl	8002388 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	@ 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e007      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004706:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800470e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004712:	d1ef      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800

08004724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e049      	b.n	80047ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fd fabe 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f000 fdf8 	bl	8005358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d001      	beq.n	80047ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e054      	b.n	8004896 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a26      	ldr	r2, [pc, #152]	@ (80048a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d022      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x80>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004816:	d01d      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x80>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a22      	ldr	r2, [pc, #136]	@ (80048a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x80>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a21      	ldr	r2, [pc, #132]	@ (80048ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x80>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1f      	ldr	r2, [pc, #124]	@ (80048b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x80>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1e      	ldr	r2, [pc, #120]	@ (80048b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x80>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1c      	ldr	r2, [pc, #112]	@ (80048b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x80>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1b      	ldr	r2, [pc, #108]	@ (80048bc <HAL_TIM_Base_Start_IT+0xe8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d115      	bne.n	8004880 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	4b19      	ldr	r3, [pc, #100]	@ (80048c0 <HAL_TIM_Base_Start_IT+0xec>)
 800485c:	4013      	ands	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b06      	cmp	r3, #6
 8004864:	d015      	beq.n	8004892 <HAL_TIM_Base_Start_IT+0xbe>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486c:	d011      	beq.n	8004892 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487e:	e008      	b.n	8004892 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e000      	b.n	8004894 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40010400 	.word	0x40010400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40001800 	.word	0x40001800
 80048c0:	00010007 	.word	0x00010007

080048c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e049      	b.n	800496a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd f992 	bl	8001c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f000 fd28 	bl	8005358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_TIM_PWM_Start+0x24>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e03c      	b.n	8004a12 <HAL_TIM_PWM_Start+0x9e>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b04      	cmp	r3, #4
 800499c:	d109      	bne.n	80049b2 <HAL_TIM_PWM_Start+0x3e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	bf14      	ite	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	2300      	moveq	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	e02f      	b.n	8004a12 <HAL_TIM_PWM_Start+0x9e>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d109      	bne.n	80049cc <HAL_TIM_PWM_Start+0x58>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e022      	b.n	8004a12 <HAL_TIM_PWM_Start+0x9e>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	d109      	bne.n	80049e6 <HAL_TIM_PWM_Start+0x72>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	e015      	b.n	8004a12 <HAL_TIM_PWM_Start+0x9e>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d109      	bne.n	8004a00 <HAL_TIM_PWM_Start+0x8c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e008      	b.n	8004a12 <HAL_TIM_PWM_Start+0x9e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e092      	b.n	8004b40 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_PWM_Start+0xb6>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a28:	e023      	b.n	8004a72 <HAL_TIM_PWM_Start+0xfe>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_PWM_Start+0xc6>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a38:	e01b      	b.n	8004a72 <HAL_TIM_PWM_Start+0xfe>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d104      	bne.n	8004a4a <HAL_TIM_PWM_Start+0xd6>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a48:	e013      	b.n	8004a72 <HAL_TIM_PWM_Start+0xfe>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_PWM_Start+0xe6>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a58:	e00b      	b.n	8004a72 <HAL_TIM_PWM_Start+0xfe>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_PWM_Start+0xf6>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a68:	e003      	b.n	8004a72 <HAL_TIM_PWM_Start+0xfe>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2201      	movs	r2, #1
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 ff76 	bl	800596c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a30      	ldr	r2, [pc, #192]	@ (8004b48 <HAL_TIM_PWM_Start+0x1d4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_TIM_PWM_Start+0x120>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b4c <HAL_TIM_PWM_Start+0x1d8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d101      	bne.n	8004a98 <HAL_TIM_PWM_Start+0x124>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <HAL_TIM_PWM_Start+0x126>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a25      	ldr	r2, [pc, #148]	@ (8004b48 <HAL_TIM_PWM_Start+0x1d4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d022      	beq.n	8004afe <HAL_TIM_PWM_Start+0x18a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac0:	d01d      	beq.n	8004afe <HAL_TIM_PWM_Start+0x18a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a22      	ldr	r2, [pc, #136]	@ (8004b50 <HAL_TIM_PWM_Start+0x1dc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_TIM_PWM_Start+0x18a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a20      	ldr	r2, [pc, #128]	@ (8004b54 <HAL_TIM_PWM_Start+0x1e0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_TIM_PWM_Start+0x18a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1f      	ldr	r2, [pc, #124]	@ (8004b58 <HAL_TIM_PWM_Start+0x1e4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_TIM_PWM_Start+0x18a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a19      	ldr	r2, [pc, #100]	@ (8004b4c <HAL_TIM_PWM_Start+0x1d8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_TIM_PWM_Start+0x18a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1b      	ldr	r2, [pc, #108]	@ (8004b5c <HAL_TIM_PWM_Start+0x1e8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_TIM_PWM_Start+0x18a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a19      	ldr	r2, [pc, #100]	@ (8004b60 <HAL_TIM_PWM_Start+0x1ec>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d115      	bne.n	8004b2a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	4b17      	ldr	r3, [pc, #92]	@ (8004b64 <HAL_TIM_PWM_Start+0x1f0>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b06      	cmp	r3, #6
 8004b0e:	d015      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x1c8>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b16:	d011      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b28:	e008      	b.n	8004b3c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e000      	b.n	8004b3e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800
 8004b58:	40000c00 	.word	0x40000c00
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40001800 	.word	0x40001800
 8004b64:	00010007 	.word	0x00010007

08004b68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fef6 	bl	800596c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a36      	ldr	r2, [pc, #216]	@ (8004c60 <HAL_TIM_PWM_Stop+0xf8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIM_PWM_Stop+0x2c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a35      	ldr	r2, [pc, #212]	@ (8004c64 <HAL_TIM_PWM_Stop+0xfc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_PWM_Stop+0x30>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_TIM_PWM_Stop+0x32>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d017      	beq.n	8004bce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10f      	bne.n	8004bce <HAL_TIM_PWM_Stop+0x66>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	f240 4344 	movw	r3, #1092	@ 0x444
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_PWM_Stop+0x66>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10f      	bne.n	8004bfe <HAL_TIM_PWM_Stop+0x96>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6a1a      	ldr	r2, [r3, #32]
 8004be4:	f240 4344 	movw	r3, #1092	@ 0x444
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d107      	bne.n	8004bfe <HAL_TIM_PWM_Stop+0x96>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Stop+0xa6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c0c:	e023      	b.n	8004c56 <HAL_TIM_PWM_Stop+0xee>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Stop+0xb6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c1c:	e01b      	b.n	8004c56 <HAL_TIM_PWM_Stop+0xee>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Stop+0xc6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c2c:	e013      	b.n	8004c56 <HAL_TIM_PWM_Stop+0xee>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b0c      	cmp	r3, #12
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_PWM_Stop+0xd6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c3c:	e00b      	b.n	8004c56 <HAL_TIM_PWM_Stop+0xee>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d104      	bne.n	8004c4e <HAL_TIM_PWM_Stop+0xe6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c4c:	e003      	b.n	8004c56 <HAL_TIM_PWM_Stop+0xee>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010400 	.word	0x40010400

08004c68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e08f      	b.n	8004d9c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc fe75 	bl	8001980 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6899      	ldr	r1, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8004da4 <HAL_TIM_Encoder_Init+0x13c>)
 8004caa:	400b      	ands	r3, r1
 8004cac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f000 fb4d 	bl	8005358 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4b31      	ldr	r3, [pc, #196]	@ (8004da8 <HAL_TIM_Encoder_Init+0x140>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004dac <HAL_TIM_Encoder_Init+0x144>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4b2a      	ldr	r3, [pc, #168]	@ (8004db0 <HAL_TIM_Encoder_Init+0x148>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	4313      	orrs	r3, r2
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	011a      	lsls	r2, r3, #4
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	031b      	lsls	r3, r3, #12
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	fffebff8 	.word	0xfffebff8
 8004da8:	fffffcfc 	.word	0xfffffcfc
 8004dac:	fffff3f3 	.word	0xfffff3f3
 8004db0:	ffff0f0f 	.word	0xffff0f0f

08004db4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dc4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dcc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dd4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ddc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d110      	bne.n	8004e06 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d102      	bne.n	8004df0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dea:	7b7b      	ldrb	r3, [r7, #13]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d001      	beq.n	8004df4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e069      	b.n	8004ec8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e04:	e031      	b.n	8004e6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d110      	bne.n	8004e2e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e0c:	7bbb      	ldrb	r3, [r7, #14]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d102      	bne.n	8004e18 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e12:	7b3b      	ldrb	r3, [r7, #12]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d001      	beq.n	8004e1c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e055      	b.n	8004ec8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e2c:	e01d      	b.n	8004e6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d108      	bne.n	8004e46 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e34:	7bbb      	ldrb	r3, [r7, #14]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d105      	bne.n	8004e46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e3a:	7b7b      	ldrb	r3, [r7, #13]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d102      	bne.n	8004e46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e40:	7b3b      	ldrb	r3, [r7, #12]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d001      	beq.n	8004e4a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e03e      	b.n	8004ec8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_TIM_Encoder_Start+0xc4>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d008      	beq.n	8004e88 <HAL_TIM_Encoder_Start+0xd4>
 8004e76:	e00f      	b.n	8004e98 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2100      	movs	r1, #0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fd73 	bl	800596c <TIM_CCxChannelCmd>
      break;
 8004e86:	e016      	b.n	8004eb6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	2104      	movs	r1, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fd6b 	bl	800596c <TIM_CCxChannelCmd>
      break;
 8004e96:	e00e      	b.n	8004eb6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fd63 	bl	800596c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	2104      	movs	r1, #4
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fd5c 	bl	800596c <TIM_CCxChannelCmd>
      break;
 8004eb4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d020      	beq.n	8004f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01b      	beq.n	8004f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0202 	mvn.w	r2, #2
 8004f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9fe 	bl	800531c <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9f0 	bl	8005308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fa01 	bl	8005330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d020      	beq.n	8004f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01b      	beq.n	8004f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0204 	mvn.w	r2, #4
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2202      	movs	r2, #2
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9d8 	bl	800531c <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f9ca 	bl	8005308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f9db 	bl	8005330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d020      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01b      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0208 	mvn.w	r2, #8
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9b2 	bl	800531c <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9a4 	bl	8005308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f9b5 	bl	8005330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d020      	beq.n	8005018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01b      	beq.n	8005018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0210 	mvn.w	r2, #16
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2208      	movs	r2, #8
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f98c 	bl	800531c <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f97e 	bl	8005308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f98f 	bl	8005330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0201 	mvn.w	r2, #1
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fb fd9c 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00c      	beq.n	800506a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fd3f 	bl	8005ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fd37 	bl	8005afc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00c      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f949 	bl	8005344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00c      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f06f 0220 	mvn.w	r2, #32
 80050ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fcff 	bl	8005ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0ff      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b14      	cmp	r3, #20
 800510a:	f200 80f0 	bhi.w	80052ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800510e:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005169 	.word	0x08005169
 8005118:	080052ef 	.word	0x080052ef
 800511c:	080052ef 	.word	0x080052ef
 8005120:	080052ef 	.word	0x080052ef
 8005124:	080051a9 	.word	0x080051a9
 8005128:	080052ef 	.word	0x080052ef
 800512c:	080052ef 	.word	0x080052ef
 8005130:	080052ef 	.word	0x080052ef
 8005134:	080051eb 	.word	0x080051eb
 8005138:	080052ef 	.word	0x080052ef
 800513c:	080052ef 	.word	0x080052ef
 8005140:	080052ef 	.word	0x080052ef
 8005144:	0800522b 	.word	0x0800522b
 8005148:	080052ef 	.word	0x080052ef
 800514c:	080052ef 	.word	0x080052ef
 8005150:	080052ef 	.word	0x080052ef
 8005154:	0800526d 	.word	0x0800526d
 8005158:	080052ef 	.word	0x080052ef
 800515c:	080052ef 	.word	0x080052ef
 8005160:	080052ef 	.word	0x080052ef
 8005164:	080052ad 	.word	0x080052ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f99e 	bl	80054b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0208 	orr.w	r2, r2, #8
 8005182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0204 	bic.w	r2, r2, #4
 8005192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6999      	ldr	r1, [r3, #24]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	619a      	str	r2, [r3, #24]
      break;
 80051a6:	e0a5      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f9f0 	bl	8005594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6999      	ldr	r1, [r3, #24]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	021a      	lsls	r2, r3, #8
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	619a      	str	r2, [r3, #24]
      break;
 80051e8:	e084      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fa47 	bl	8005684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0208 	orr.w	r2, r2, #8
 8005204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0204 	bic.w	r2, r2, #4
 8005214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69d9      	ldr	r1, [r3, #28]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	61da      	str	r2, [r3, #28]
      break;
 8005228:	e064      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fa9d 	bl	8005770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69d9      	ldr	r1, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	021a      	lsls	r2, r3, #8
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	61da      	str	r2, [r3, #28]
      break;
 800526a:	e043      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fad4 	bl	8005820 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0208 	orr.w	r2, r2, #8
 8005286:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0204 	bic.w	r2, r2, #4
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052aa:	e023      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fb06 	bl	80058c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	021a      	lsls	r2, r3, #8
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052ec:	e002      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
      break;
 80052f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop

08005308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a46      	ldr	r2, [pc, #280]	@ (8005484 <TIM_Base_SetConfig+0x12c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005376:	d00f      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a43      	ldr	r2, [pc, #268]	@ (8005488 <TIM_Base_SetConfig+0x130>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00b      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a42      	ldr	r2, [pc, #264]	@ (800548c <TIM_Base_SetConfig+0x134>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d007      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a41      	ldr	r2, [pc, #260]	@ (8005490 <TIM_Base_SetConfig+0x138>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a40      	ldr	r2, [pc, #256]	@ (8005494 <TIM_Base_SetConfig+0x13c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d108      	bne.n	80053aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a35      	ldr	r2, [pc, #212]	@ (8005484 <TIM_Base_SetConfig+0x12c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02b      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b8:	d027      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a32      	ldr	r2, [pc, #200]	@ (8005488 <TIM_Base_SetConfig+0x130>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d023      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a31      	ldr	r2, [pc, #196]	@ (800548c <TIM_Base_SetConfig+0x134>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01f      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a30      	ldr	r2, [pc, #192]	@ (8005490 <TIM_Base_SetConfig+0x138>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01b      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005494 <TIM_Base_SetConfig+0x13c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d017      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005498 <TIM_Base_SetConfig+0x140>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2d      	ldr	r2, [pc, #180]	@ (800549c <TIM_Base_SetConfig+0x144>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00f      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <TIM_Base_SetConfig+0x148>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00b      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2b      	ldr	r2, [pc, #172]	@ (80054a4 <TIM_Base_SetConfig+0x14c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d007      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a2a      	ldr	r2, [pc, #168]	@ (80054a8 <TIM_Base_SetConfig+0x150>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a29      	ldr	r2, [pc, #164]	@ (80054ac <TIM_Base_SetConfig+0x154>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d108      	bne.n	800541c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a10      	ldr	r2, [pc, #64]	@ (8005484 <TIM_Base_SetConfig+0x12c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_Base_SetConfig+0xf8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a12      	ldr	r2, [pc, #72]	@ (8005494 <TIM_Base_SetConfig+0x13c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d103      	bne.n	8005458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b01      	cmp	r3, #1
 8005468:	d105      	bne.n	8005476 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f023 0201 	bic.w	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	611a      	str	r2, [r3, #16]
  }
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40010000 	.word	0x40010000
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40000c00 	.word	0x40000c00
 8005494:	40010400 	.word	0x40010400
 8005498:	40014000 	.word	0x40014000
 800549c:	40014400 	.word	0x40014400
 80054a0:	40014800 	.word	0x40014800
 80054a4:	40001800 	.word	0x40001800
 80054a8:	40001c00 	.word	0x40001c00
 80054ac:	40002000 	.word	0x40002000

080054b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	f023 0201 	bic.w	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4b2b      	ldr	r3, [pc, #172]	@ (8005588 <TIM_OC1_SetConfig+0xd8>)
 80054dc:	4013      	ands	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0303 	bic.w	r3, r3, #3
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f023 0302 	bic.w	r3, r3, #2
 80054f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a21      	ldr	r2, [pc, #132]	@ (800558c <TIM_OC1_SetConfig+0xdc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_OC1_SetConfig+0x64>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a20      	ldr	r2, [pc, #128]	@ (8005590 <TIM_OC1_SetConfig+0xe0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d10c      	bne.n	800552e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0308 	bic.w	r3, r3, #8
 800551a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 0304 	bic.w	r3, r3, #4
 800552c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a16      	ldr	r2, [pc, #88]	@ (800558c <TIM_OC1_SetConfig+0xdc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_OC1_SetConfig+0x8e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a15      	ldr	r2, [pc, #84]	@ (8005590 <TIM_OC1_SetConfig+0xe0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d111      	bne.n	8005562 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800554c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	621a      	str	r2, [r3, #32]
}
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	fffeff8f 	.word	0xfffeff8f
 800558c:	40010000 	.word	0x40010000
 8005590:	40010400 	.word	0x40010400

08005594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f023 0210 	bic.w	r2, r3, #16
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4b2e      	ldr	r3, [pc, #184]	@ (8005678 <TIM_OC2_SetConfig+0xe4>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0320 	bic.w	r3, r3, #32
 80055de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a23      	ldr	r2, [pc, #140]	@ (800567c <TIM_OC2_SetConfig+0xe8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_OC2_SetConfig+0x68>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a22      	ldr	r2, [pc, #136]	@ (8005680 <TIM_OC2_SetConfig+0xec>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d10d      	bne.n	8005618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a18      	ldr	r2, [pc, #96]	@ (800567c <TIM_OC2_SetConfig+0xe8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_OC2_SetConfig+0x94>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a17      	ldr	r2, [pc, #92]	@ (8005680 <TIM_OC2_SetConfig+0xec>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d113      	bne.n	8005650 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800562e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	feff8fff 	.word	0xfeff8fff
 800567c:	40010000 	.word	0x40010000
 8005680:	40010400 	.word	0x40010400

08005684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005764 <TIM_OC3_SetConfig+0xe0>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a22      	ldr	r2, [pc, #136]	@ (8005768 <TIM_OC3_SetConfig+0xe4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_OC3_SetConfig+0x66>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a21      	ldr	r2, [pc, #132]	@ (800576c <TIM_OC3_SetConfig+0xe8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d10d      	bne.n	8005706 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a17      	ldr	r2, [pc, #92]	@ (8005768 <TIM_OC3_SetConfig+0xe4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_OC3_SetConfig+0x92>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a16      	ldr	r2, [pc, #88]	@ (800576c <TIM_OC3_SetConfig+0xe8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d113      	bne.n	800573e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800571c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	fffeff8f 	.word	0xfffeff8f
 8005768:	40010000 	.word	0x40010000
 800576c:	40010400 	.word	0x40010400

08005770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4b1e      	ldr	r3, [pc, #120]	@ (8005814 <TIM_OC4_SetConfig+0xa4>)
 800579c:	4013      	ands	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a13      	ldr	r2, [pc, #76]	@ (8005818 <TIM_OC4_SetConfig+0xa8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC4_SetConfig+0x68>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a12      	ldr	r2, [pc, #72]	@ (800581c <TIM_OC4_SetConfig+0xac>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d109      	bne.n	80057ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	feff8fff 	.word	0xfeff8fff
 8005818:	40010000 	.word	0x40010000
 800581c:	40010400 	.word	0x40010400

08005820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4b1b      	ldr	r3, [pc, #108]	@ (80058b8 <TIM_OC5_SetConfig+0x98>)
 800584c:	4013      	ands	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005860:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	041b      	lsls	r3, r3, #16
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a12      	ldr	r2, [pc, #72]	@ (80058bc <TIM_OC5_SetConfig+0x9c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_OC5_SetConfig+0x5e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <TIM_OC5_SetConfig+0xa0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d109      	bne.n	8005892 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	621a      	str	r2, [r3, #32]
}
 80058ac:	bf00      	nop
 80058ae:	371c      	adds	r7, #28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	fffeff8f 	.word	0xfffeff8f
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40010400 	.word	0x40010400

080058c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005960 <TIM_OC6_SetConfig+0x9c>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	051b      	lsls	r3, r3, #20
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a13      	ldr	r2, [pc, #76]	@ (8005964 <TIM_OC6_SetConfig+0xa0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC6_SetConfig+0x60>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a12      	ldr	r2, [pc, #72]	@ (8005968 <TIM_OC6_SetConfig+0xa4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d109      	bne.n	8005938 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800592a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	029b      	lsls	r3, r3, #10
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	feff8fff 	.word	0xfeff8fff
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400

0800596c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	2201      	movs	r2, #1
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a1a      	ldr	r2, [r3, #32]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	43db      	mvns	r3, r3
 800598e:	401a      	ands	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1a      	ldr	r2, [r3, #32]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	fa01 f303 	lsl.w	r3, r1, r3
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e06d      	b.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a30      	ldr	r2, [pc, #192]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2f      	ldr	r2, [pc, #188]	@ (8005abc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d108      	bne.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a20      	ldr	r2, [pc, #128]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d022      	beq.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a42:	d01d      	beq.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d018      	beq.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00e      	beq.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d009      	beq.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a16      	ldr	r2, [pc, #88]	@ (8005acc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a15      	ldr	r2, [pc, #84]	@ (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10c      	bne.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40010400 	.word	0x40010400
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40000c00 	.word	0x40000c00
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40001800 	.word	0x40001800

08005ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e040      	b.n	8005ba4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fc f9ee 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2224      	movs	r2, #36	@ 0x24
 8005b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fff0 	bl	8006b3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fd89 	bl	8006674 <UART_SetConfig>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e01b      	b.n	8005ba4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 f86f 	bl	8006c80 <UART_CheckIdleState>
 8005ba2:	4603      	mov	r3, r0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	@ 0x28
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d177      	bne.n	8005cb4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Transmit+0x24>
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e070      	b.n	8005cb6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2221      	movs	r2, #33	@ 0x21
 8005be0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be2:	f7fc fbd1 	bl	8002388 <HAL_GetTick>
 8005be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	88fa      	ldrh	r2, [r7, #6]
 8005bec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c00:	d108      	bne.n	8005c14 <HAL_UART_Transmit+0x68>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e003      	b.n	8005c1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c1c:	e02f      	b.n	8005c7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2200      	movs	r2, #0
 8005c26:	2180      	movs	r1, #128	@ 0x80
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f001 f8d1 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e03b      	b.n	8005cb6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10b      	bne.n	8005c5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	3302      	adds	r3, #2
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e007      	b.n	8005c6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1c9      	bne.n	8005c1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2140      	movs	r1, #64	@ 0x40
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f001 f89b 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e005      	b.n	8005cb6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	@ 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d165      	bne.n	8005da2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_UART_Transmit_DMA+0x22>
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e05e      	b.n	8005da4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2221      	movs	r2, #33	@ 0x21
 8005d08:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d027      	beq.n	8005d62 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4a25      	ldr	r2, [pc, #148]	@ (8005dac <HAL_UART_Transmit_DMA+0xec>)
 8005d18:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	4a24      	ldr	r2, [pc, #144]	@ (8005db0 <HAL_UART_Transmit_DMA+0xf0>)
 8005d20:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d26:	4a23      	ldr	r2, [pc, #140]	@ (8005db4 <HAL_UART_Transmit_DMA+0xf4>)
 8005d28:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2e:	2200      	movs	r2, #0
 8005d30:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3328      	adds	r3, #40	@ 0x28
 8005d42:	461a      	mov	r2, r3
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	f7fc fd0f 	bl	8002768 <HAL_DMA_Start_IT>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2210      	movs	r2, #16
 8005d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e020      	b.n	8005da4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2240      	movs	r2, #64	@ 0x40
 8005d68:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8a:	623a      	str	r2, [r7, #32]
 8005d8c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	69f9      	ldr	r1, [r7, #28]
 8005d90:	6a3a      	ldr	r2, [r7, #32]
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e5      	bne.n	8005d6a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3728      	adds	r7, #40	@ 0x28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	08007101 	.word	0x08007101
 8005db0:	08007197 	.word	0x08007197
 8005db4:	08007319 	.word	0x08007319

08005db8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08e      	sub	sp, #56	@ 0x38
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005de0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005de4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e6      	bne.n	8005dc0 <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfc:	2b80      	cmp	r3, #128	@ 0x80
 8005dfe:	d137      	bne.n	8005e70 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3308      	adds	r3, #8
 8005e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e20:	61ba      	str	r2, [r7, #24]
 8005e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d019      	beq.n	8005e70 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e40:	2200      	movs	r2, #0
 8005e42:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fc fced 	bl	8002828 <HAL_DMA_Abort>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fc ff01 	bl	8002c60 <HAL_DMA_GetError>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d105      	bne.n	8005e70 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2210      	movs	r2, #16
 8005e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e007      	b.n	8005e80 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3738      	adds	r7, #56	@ 0x38
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b09a      	sub	sp, #104	@ 0x68
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ea4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eae:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eb0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005eb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e6      	bne.n	8005e90 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ee2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ee8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e5      	bne.n	8005ec2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d118      	bne.n	8005f30 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f023 0310 	bic.w	r3, r3, #16
 8005f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e6      	bne.n	8005efe <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d137      	bne.n	8005fae <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3308      	adds	r3, #8
 8005f44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f5e:	61ba      	str	r2, [r7, #24]
 8005f60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6979      	ldr	r1, [r7, #20]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e5      	bne.n	8005f3e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d019      	beq.n	8005fae <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7e:	2200      	movs	r2, #0
 8005f80:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fc fc4e 	bl	8002828 <HAL_DMA_Abort>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00d      	beq.n	8005fae <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fc fe62 	bl	8002c60 <HAL_DMA_GetError>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d105      	bne.n	8005fae <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2210      	movs	r2, #16
 8005fa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e017      	b.n	8005fde <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	220f      	movs	r2, #15
 8005fbc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699a      	ldr	r2, [r3, #24]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0208 	orr.w	r2, r2, #8
 8005fcc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3768      	adds	r7, #104	@ 0x68
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b0ba      	sub	sp, #232	@ 0xe8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800600e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006012:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006016:	4013      	ands	r3, r2
 8006018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800601c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d115      	bne.n	8006050 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00f      	beq.n	8006050 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d009      	beq.n	8006050 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 82ac 	beq.w	800659e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
      }
      return;
 800604e:	e2a6      	b.n	800659e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8117 	beq.w	8006288 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800605a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006066:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800606a:	4b85      	ldr	r3, [pc, #532]	@ (8006280 <HAL_UART_IRQHandler+0x298>)
 800606c:	4013      	ands	r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 810a 	beq.w	8006288 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d011      	beq.n	80060a4 <HAL_UART_IRQHandler+0xbc>
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00b      	beq.n	80060a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2201      	movs	r2, #1
 8006092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800609a:	f043 0201 	orr.w	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d011      	beq.n	80060d4 <HAL_UART_IRQHandler+0xec>
 80060b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2202      	movs	r2, #2
 80060c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ca:	f043 0204 	orr.w	r2, r3, #4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d011      	beq.n	8006104 <HAL_UART_IRQHandler+0x11c>
 80060e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2204      	movs	r2, #4
 80060f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060fa:	f043 0202 	orr.w	r2, r3, #2
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b00      	cmp	r3, #0
 800610e:	d017      	beq.n	8006140 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d105      	bne.n	8006128 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800611c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006120:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2208      	movs	r2, #8
 800612e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006136:	f043 0208 	orr.w	r2, r3, #8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006148:	2b00      	cmp	r3, #0
 800614a:	d012      	beq.n	8006172 <HAL_UART_IRQHandler+0x18a>
 800614c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006150:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00c      	beq.n	8006172 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006168:	f043 0220 	orr.w	r2, r3, #32
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8212 	beq.w	80065a2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ba:	2b40      	cmp	r3, #64	@ 0x40
 80061bc:	d005      	beq.n	80061ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04f      	beq.n	800626a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 ff34 	bl	8007038 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061da:	2b40      	cmp	r3, #64	@ 0x40
 80061dc:	d141      	bne.n	8006262 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3308      	adds	r3, #8
 80061e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3308      	adds	r3, #8
 8006206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800620a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800620e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1d9      	bne.n	80061de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622e:	2b00      	cmp	r3, #0
 8006230:	d013      	beq.n	800625a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006236:	4a13      	ldr	r2, [pc, #76]	@ (8006284 <HAL_UART_IRQHandler+0x29c>)
 8006238:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800623e:	4618      	mov	r0, r3
 8006240:	f7fc fb62 	bl	8002908 <HAL_DMA_Abort_IT>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d017      	beq.n	800627a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800624e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006258:	e00f      	b.n	800627a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f9d4 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e00b      	b.n	800627a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f9d0 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e007      	b.n	800627a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9cc 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006278:	e193      	b.n	80065a2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	bf00      	nop
    return;
 800627c:	e191      	b.n	80065a2 <HAL_UART_IRQHandler+0x5ba>
 800627e:	bf00      	nop
 8006280:	04000120 	.word	0x04000120
 8006284:	08007397 	.word	0x08007397

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800628c:	2b01      	cmp	r3, #1
 800628e:	f040 814c 	bne.w	800652a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8145 	beq.w	800652a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 813e 	beq.w	800652a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2210      	movs	r2, #16
 80062b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c0:	2b40      	cmp	r3, #64	@ 0x40
 80062c2:	f040 80b6 	bne.w	8006432 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8165 	beq.w	80065a6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062e6:	429a      	cmp	r2, r3
 80062e8:	f080 815d 	bcs.w	80065a6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006300:	f000 8086 	beq.w	8006410 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006318:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800631c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800632e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006332:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800633a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1da      	bne.n	8006304 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3308      	adds	r3, #8
 8006354:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800635e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3308      	adds	r3, #8
 800636e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006372:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006376:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800637a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e1      	bne.n	800634e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800639a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800639c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e3      	bne.n	800638a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063e0:	f023 0310 	bic.w	r3, r3, #16
 80063e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e4      	bne.n	80063d0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640a:	4618      	mov	r0, r3
 800640c:	f7fc fa0c 	bl	8002828 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006422:	b29b      	uxth	r3, r3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	b29b      	uxth	r3, r3
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fa fa34 	bl	8000898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006430:	e0b9      	b.n	80065a6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800643e:	b29b      	uxth	r3, r3
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 80ab 	beq.w	80065aa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80a6 	beq.w	80065aa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800646c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006472:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006480:	647b      	str	r3, [r7, #68]	@ 0x44
 8006482:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800648e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e4      	bne.n	800645e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3308      	adds	r3, #8
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	623b      	str	r3, [r7, #32]
   return(result);
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80064ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e3      	bne.n	8006494 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f023 0310 	bic.w	r3, r3, #16
 80064f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006502:	61fb      	str	r3, [r7, #28]
 8006504:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	69b9      	ldr	r1, [r7, #24]
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	617b      	str	r3, [r7, #20]
   return(result);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e4      	bne.n	80064e0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800651c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fa f9b8 	bl	8000898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006528:	e03f      	b.n	80065aa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800652a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800652e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00e      	beq.n	8006554 <HAL_UART_IRQHandler+0x56c>
 8006536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800653a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d008      	beq.n	8006554 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800654a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f865 	bl	800661c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006552:	e02d      	b.n	80065b0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00e      	beq.n	800657e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01c      	beq.n	80065ae <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
    }
    return;
 800657c:	e017      	b.n	80065ae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800657e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d012      	beq.n	80065b0 <HAL_UART_IRQHandler+0x5c8>
 800658a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800658e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00c      	beq.n	80065b0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 ff13 	bl	80073c2 <UART_EndTransmit_IT>
    return;
 800659c:	e008      	b.n	80065b0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800659e:	bf00      	nop
 80065a0:	e006      	b.n	80065b0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80065a2:	bf00      	nop
 80065a4:	e004      	b.n	80065b0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80065a6:	bf00      	nop
 80065a8:	e002      	b.n	80065b0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80065ae:	bf00      	nop
  }

}
 80065b0:	37e8      	adds	r7, #232	@ 0xe8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop

080065b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800663c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006644:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4313      	orrs	r3, r2
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4ba6      	ldr	r3, [pc, #664]	@ (8006938 <UART_SetConfig+0x2c4>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	6979      	ldr	r1, [r7, #20]
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a94      	ldr	r2, [pc, #592]	@ (800693c <UART_SetConfig+0x2c8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d120      	bne.n	8006732 <UART_SetConfig+0xbe>
 80066f0:	4b93      	ldr	r3, [pc, #588]	@ (8006940 <UART_SetConfig+0x2cc>)
 80066f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d816      	bhi.n	800672c <UART_SetConfig+0xb8>
 80066fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006704 <UART_SetConfig+0x90>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	08006715 	.word	0x08006715
 8006708:	08006721 	.word	0x08006721
 800670c:	0800671b 	.word	0x0800671b
 8006710:	08006727 	.word	0x08006727
 8006714:	2301      	movs	r3, #1
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e150      	b.n	80069bc <UART_SetConfig+0x348>
 800671a:	2302      	movs	r3, #2
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e14d      	b.n	80069bc <UART_SetConfig+0x348>
 8006720:	2304      	movs	r3, #4
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e14a      	b.n	80069bc <UART_SetConfig+0x348>
 8006726:	2308      	movs	r3, #8
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e147      	b.n	80069bc <UART_SetConfig+0x348>
 800672c:	2310      	movs	r3, #16
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e144      	b.n	80069bc <UART_SetConfig+0x348>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a83      	ldr	r2, [pc, #524]	@ (8006944 <UART_SetConfig+0x2d0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d132      	bne.n	80067a2 <UART_SetConfig+0x12e>
 800673c:	4b80      	ldr	r3, [pc, #512]	@ (8006940 <UART_SetConfig+0x2cc>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b0c      	cmp	r3, #12
 8006748:	d828      	bhi.n	800679c <UART_SetConfig+0x128>
 800674a:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <UART_SetConfig+0xdc>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006785 	.word	0x08006785
 8006754:	0800679d 	.word	0x0800679d
 8006758:	0800679d 	.word	0x0800679d
 800675c:	0800679d 	.word	0x0800679d
 8006760:	08006791 	.word	0x08006791
 8006764:	0800679d 	.word	0x0800679d
 8006768:	0800679d 	.word	0x0800679d
 800676c:	0800679d 	.word	0x0800679d
 8006770:	0800678b 	.word	0x0800678b
 8006774:	0800679d 	.word	0x0800679d
 8006778:	0800679d 	.word	0x0800679d
 800677c:	0800679d 	.word	0x0800679d
 8006780:	08006797 	.word	0x08006797
 8006784:	2300      	movs	r3, #0
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e118      	b.n	80069bc <UART_SetConfig+0x348>
 800678a:	2302      	movs	r3, #2
 800678c:	77fb      	strb	r3, [r7, #31]
 800678e:	e115      	b.n	80069bc <UART_SetConfig+0x348>
 8006790:	2304      	movs	r3, #4
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e112      	b.n	80069bc <UART_SetConfig+0x348>
 8006796:	2308      	movs	r3, #8
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e10f      	b.n	80069bc <UART_SetConfig+0x348>
 800679c:	2310      	movs	r3, #16
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e10c      	b.n	80069bc <UART_SetConfig+0x348>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a68      	ldr	r2, [pc, #416]	@ (8006948 <UART_SetConfig+0x2d4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d120      	bne.n	80067ee <UART_SetConfig+0x17a>
 80067ac:	4b64      	ldr	r3, [pc, #400]	@ (8006940 <UART_SetConfig+0x2cc>)
 80067ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067b6:	2b30      	cmp	r3, #48	@ 0x30
 80067b8:	d013      	beq.n	80067e2 <UART_SetConfig+0x16e>
 80067ba:	2b30      	cmp	r3, #48	@ 0x30
 80067bc:	d814      	bhi.n	80067e8 <UART_SetConfig+0x174>
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d009      	beq.n	80067d6 <UART_SetConfig+0x162>
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	d810      	bhi.n	80067e8 <UART_SetConfig+0x174>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <UART_SetConfig+0x15c>
 80067ca:	2b10      	cmp	r3, #16
 80067cc:	d006      	beq.n	80067dc <UART_SetConfig+0x168>
 80067ce:	e00b      	b.n	80067e8 <UART_SetConfig+0x174>
 80067d0:	2300      	movs	r3, #0
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e0f2      	b.n	80069bc <UART_SetConfig+0x348>
 80067d6:	2302      	movs	r3, #2
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e0ef      	b.n	80069bc <UART_SetConfig+0x348>
 80067dc:	2304      	movs	r3, #4
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e0ec      	b.n	80069bc <UART_SetConfig+0x348>
 80067e2:	2308      	movs	r3, #8
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e0e9      	b.n	80069bc <UART_SetConfig+0x348>
 80067e8:	2310      	movs	r3, #16
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e0e6      	b.n	80069bc <UART_SetConfig+0x348>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a56      	ldr	r2, [pc, #344]	@ (800694c <UART_SetConfig+0x2d8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d120      	bne.n	800683a <UART_SetConfig+0x1c6>
 80067f8:	4b51      	ldr	r3, [pc, #324]	@ (8006940 <UART_SetConfig+0x2cc>)
 80067fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006802:	2bc0      	cmp	r3, #192	@ 0xc0
 8006804:	d013      	beq.n	800682e <UART_SetConfig+0x1ba>
 8006806:	2bc0      	cmp	r3, #192	@ 0xc0
 8006808:	d814      	bhi.n	8006834 <UART_SetConfig+0x1c0>
 800680a:	2b80      	cmp	r3, #128	@ 0x80
 800680c:	d009      	beq.n	8006822 <UART_SetConfig+0x1ae>
 800680e:	2b80      	cmp	r3, #128	@ 0x80
 8006810:	d810      	bhi.n	8006834 <UART_SetConfig+0x1c0>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <UART_SetConfig+0x1a8>
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	d006      	beq.n	8006828 <UART_SetConfig+0x1b4>
 800681a:	e00b      	b.n	8006834 <UART_SetConfig+0x1c0>
 800681c:	2300      	movs	r3, #0
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e0cc      	b.n	80069bc <UART_SetConfig+0x348>
 8006822:	2302      	movs	r3, #2
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e0c9      	b.n	80069bc <UART_SetConfig+0x348>
 8006828:	2304      	movs	r3, #4
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e0c6      	b.n	80069bc <UART_SetConfig+0x348>
 800682e:	2308      	movs	r3, #8
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e0c3      	b.n	80069bc <UART_SetConfig+0x348>
 8006834:	2310      	movs	r3, #16
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e0c0      	b.n	80069bc <UART_SetConfig+0x348>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a44      	ldr	r2, [pc, #272]	@ (8006950 <UART_SetConfig+0x2dc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d125      	bne.n	8006890 <UART_SetConfig+0x21c>
 8006844:	4b3e      	ldr	r3, [pc, #248]	@ (8006940 <UART_SetConfig+0x2cc>)
 8006846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006852:	d017      	beq.n	8006884 <UART_SetConfig+0x210>
 8006854:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006858:	d817      	bhi.n	800688a <UART_SetConfig+0x216>
 800685a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800685e:	d00b      	beq.n	8006878 <UART_SetConfig+0x204>
 8006860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006864:	d811      	bhi.n	800688a <UART_SetConfig+0x216>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <UART_SetConfig+0x1fe>
 800686a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800686e:	d006      	beq.n	800687e <UART_SetConfig+0x20a>
 8006870:	e00b      	b.n	800688a <UART_SetConfig+0x216>
 8006872:	2300      	movs	r3, #0
 8006874:	77fb      	strb	r3, [r7, #31]
 8006876:	e0a1      	b.n	80069bc <UART_SetConfig+0x348>
 8006878:	2302      	movs	r3, #2
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e09e      	b.n	80069bc <UART_SetConfig+0x348>
 800687e:	2304      	movs	r3, #4
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e09b      	b.n	80069bc <UART_SetConfig+0x348>
 8006884:	2308      	movs	r3, #8
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e098      	b.n	80069bc <UART_SetConfig+0x348>
 800688a:	2310      	movs	r3, #16
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e095      	b.n	80069bc <UART_SetConfig+0x348>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a2f      	ldr	r2, [pc, #188]	@ (8006954 <UART_SetConfig+0x2e0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d125      	bne.n	80068e6 <UART_SetConfig+0x272>
 800689a:	4b29      	ldr	r3, [pc, #164]	@ (8006940 <UART_SetConfig+0x2cc>)
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a8:	d017      	beq.n	80068da <UART_SetConfig+0x266>
 80068aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068ae:	d817      	bhi.n	80068e0 <UART_SetConfig+0x26c>
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b4:	d00b      	beq.n	80068ce <UART_SetConfig+0x25a>
 80068b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ba:	d811      	bhi.n	80068e0 <UART_SetConfig+0x26c>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <UART_SetConfig+0x254>
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c4:	d006      	beq.n	80068d4 <UART_SetConfig+0x260>
 80068c6:	e00b      	b.n	80068e0 <UART_SetConfig+0x26c>
 80068c8:	2301      	movs	r3, #1
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e076      	b.n	80069bc <UART_SetConfig+0x348>
 80068ce:	2302      	movs	r3, #2
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e073      	b.n	80069bc <UART_SetConfig+0x348>
 80068d4:	2304      	movs	r3, #4
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e070      	b.n	80069bc <UART_SetConfig+0x348>
 80068da:	2308      	movs	r3, #8
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	e06d      	b.n	80069bc <UART_SetConfig+0x348>
 80068e0:	2310      	movs	r3, #16
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e06a      	b.n	80069bc <UART_SetConfig+0x348>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <UART_SetConfig+0x2e4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d138      	bne.n	8006962 <UART_SetConfig+0x2ee>
 80068f0:	4b13      	ldr	r3, [pc, #76]	@ (8006940 <UART_SetConfig+0x2cc>)
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80068fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068fe:	d017      	beq.n	8006930 <UART_SetConfig+0x2bc>
 8006900:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006904:	d82a      	bhi.n	800695c <UART_SetConfig+0x2e8>
 8006906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800690a:	d00b      	beq.n	8006924 <UART_SetConfig+0x2b0>
 800690c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006910:	d824      	bhi.n	800695c <UART_SetConfig+0x2e8>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <UART_SetConfig+0x2aa>
 8006916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800691a:	d006      	beq.n	800692a <UART_SetConfig+0x2b6>
 800691c:	e01e      	b.n	800695c <UART_SetConfig+0x2e8>
 800691e:	2300      	movs	r3, #0
 8006920:	77fb      	strb	r3, [r7, #31]
 8006922:	e04b      	b.n	80069bc <UART_SetConfig+0x348>
 8006924:	2302      	movs	r3, #2
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e048      	b.n	80069bc <UART_SetConfig+0x348>
 800692a:	2304      	movs	r3, #4
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e045      	b.n	80069bc <UART_SetConfig+0x348>
 8006930:	2308      	movs	r3, #8
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e042      	b.n	80069bc <UART_SetConfig+0x348>
 8006936:	bf00      	nop
 8006938:	efff69f3 	.word	0xefff69f3
 800693c:	40011000 	.word	0x40011000
 8006940:	40023800 	.word	0x40023800
 8006944:	40004400 	.word	0x40004400
 8006948:	40004800 	.word	0x40004800
 800694c:	40004c00 	.word	0x40004c00
 8006950:	40005000 	.word	0x40005000
 8006954:	40011400 	.word	0x40011400
 8006958:	40007800 	.word	0x40007800
 800695c:	2310      	movs	r3, #16
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e02c      	b.n	80069bc <UART_SetConfig+0x348>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a72      	ldr	r2, [pc, #456]	@ (8006b30 <UART_SetConfig+0x4bc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d125      	bne.n	80069b8 <UART_SetConfig+0x344>
 800696c:	4b71      	ldr	r3, [pc, #452]	@ (8006b34 <UART_SetConfig+0x4c0>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006972:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006976:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800697a:	d017      	beq.n	80069ac <UART_SetConfig+0x338>
 800697c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006980:	d817      	bhi.n	80069b2 <UART_SetConfig+0x33e>
 8006982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006986:	d00b      	beq.n	80069a0 <UART_SetConfig+0x32c>
 8006988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800698c:	d811      	bhi.n	80069b2 <UART_SetConfig+0x33e>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <UART_SetConfig+0x326>
 8006992:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006996:	d006      	beq.n	80069a6 <UART_SetConfig+0x332>
 8006998:	e00b      	b.n	80069b2 <UART_SetConfig+0x33e>
 800699a:	2300      	movs	r3, #0
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e00d      	b.n	80069bc <UART_SetConfig+0x348>
 80069a0:	2302      	movs	r3, #2
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e00a      	b.n	80069bc <UART_SetConfig+0x348>
 80069a6:	2304      	movs	r3, #4
 80069a8:	77fb      	strb	r3, [r7, #31]
 80069aa:	e007      	b.n	80069bc <UART_SetConfig+0x348>
 80069ac:	2308      	movs	r3, #8
 80069ae:	77fb      	strb	r3, [r7, #31]
 80069b0:	e004      	b.n	80069bc <UART_SetConfig+0x348>
 80069b2:	2310      	movs	r3, #16
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e001      	b.n	80069bc <UART_SetConfig+0x348>
 80069b8:	2310      	movs	r3, #16
 80069ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069c4:	d15b      	bne.n	8006a7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d828      	bhi.n	8006a1e <UART_SetConfig+0x3aa>
 80069cc:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <UART_SetConfig+0x360>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	08006a1f 	.word	0x08006a1f
 80069e4:	08006a0f 	.word	0x08006a0f
 80069e8:	08006a1f 	.word	0x08006a1f
 80069ec:	08006a1f 	.word	0x08006a1f
 80069f0:	08006a1f 	.word	0x08006a1f
 80069f4:	08006a17 	.word	0x08006a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7fd fa44 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 80069fc:	61b8      	str	r0, [r7, #24]
        break;
 80069fe:	e013      	b.n	8006a28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a00:	f7fd fa54 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8006a04:	61b8      	str	r0, [r7, #24]
        break;
 8006a06:	e00f      	b.n	8006a28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a08:	4b4b      	ldr	r3, [pc, #300]	@ (8006b38 <UART_SetConfig+0x4c4>)
 8006a0a:	61bb      	str	r3, [r7, #24]
        break;
 8006a0c:	e00c      	b.n	8006a28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a0e:	f7fd f927 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8006a12:	61b8      	str	r0, [r7, #24]
        break;
 8006a14:	e008      	b.n	8006a28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a1a:	61bb      	str	r3, [r7, #24]
        break;
 8006a1c:	e004      	b.n	8006a28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	77bb      	strb	r3, [r7, #30]
        break;
 8006a26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d074      	beq.n	8006b18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	005a      	lsls	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	441a      	add	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	2b0f      	cmp	r3, #15
 8006a48:	d916      	bls.n	8006a78 <UART_SetConfig+0x404>
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a50:	d212      	bcs.n	8006a78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f023 030f 	bic.w	r3, r3, #15
 8006a5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	89fb      	ldrh	r3, [r7, #14]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	89fa      	ldrh	r2, [r7, #14]
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	e04f      	b.n	8006b18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	77bb      	strb	r3, [r7, #30]
 8006a7c:	e04c      	b.n	8006b18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a7e:	7ffb      	ldrb	r3, [r7, #31]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d828      	bhi.n	8006ad6 <UART_SetConfig+0x462>
 8006a84:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <UART_SetConfig+0x418>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	08006ad7 	.word	0x08006ad7
 8006a9c:	08006ac7 	.word	0x08006ac7
 8006aa0:	08006ad7 	.word	0x08006ad7
 8006aa4:	08006ad7 	.word	0x08006ad7
 8006aa8:	08006ad7 	.word	0x08006ad7
 8006aac:	08006acf 	.word	0x08006acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab0:	f7fd f9e8 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 8006ab4:	61b8      	str	r0, [r7, #24]
        break;
 8006ab6:	e013      	b.n	8006ae0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f7fd f9f8 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8006abc:	61b8      	str	r0, [r7, #24]
        break;
 8006abe:	e00f      	b.n	8006ae0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b38 <UART_SetConfig+0x4c4>)
 8006ac2:	61bb      	str	r3, [r7, #24]
        break;
 8006ac4:	e00c      	b.n	8006ae0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac6:	f7fd f8cb 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8006aca:	61b8      	str	r0, [r7, #24]
        break;
 8006acc:	e008      	b.n	8006ae0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ad2:	61bb      	str	r3, [r7, #24]
        break;
 8006ad4:	e004      	b.n	8006ae0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	77bb      	strb	r3, [r7, #30]
        break;
 8006ade:	bf00      	nop
    }

    if (pclk != 0U)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d018      	beq.n	8006b18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	085a      	lsrs	r2, r3, #1
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	441a      	add	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b0f      	cmp	r3, #15
 8006afe:	d909      	bls.n	8006b14 <UART_SetConfig+0x4a0>
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b06:	d205      	bcs.n	8006b14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60da      	str	r2, [r3, #12]
 8006b12:	e001      	b.n	8006b18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b24:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40007c00 	.word	0x40007c00
 8006b34:	40023800 	.word	0x40023800
 8006b38:	00f42400 	.word	0x00f42400

08006b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c3a:	d10a      	bne.n	8006c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b098      	sub	sp, #96	@ 0x60
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c90:	f7fb fb7a 	bl	8002388 <HAL_GetTick>
 8006c94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d12e      	bne.n	8006d02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cac:	2200      	movs	r2, #0
 8006cae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f88c 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d021      	beq.n	8006d02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e062      	b.n	8006dc8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d149      	bne.n	8006da4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f856 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d03c      	beq.n	8006da4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	623b      	str	r3, [r7, #32]
   return(result);
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e6      	bne.n	8006d2a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d7c:	61fa      	str	r2, [r7, #28]
 8006d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	69b9      	ldr	r1, [r7, #24]
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	617b      	str	r3, [r7, #20]
   return(result);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e5      	bne.n	8006d5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e011      	b.n	8006dc8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3758      	adds	r7, #88	@ 0x58
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de0:	e04f      	b.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de8:	d04b      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dea:	f7fb facd 	bl	8002388 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d302      	bcc.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e04e      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d037      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b80      	cmp	r3, #128	@ 0x80
 8006e16:	d034      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b40      	cmp	r3, #64	@ 0x40
 8006e1c:	d031      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d110      	bne.n	8006e4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2208      	movs	r2, #8
 8006e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f8ff 	bl	8007038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e029      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e5c:	d111      	bne.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f8e5 	bl	8007038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e00f      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d0a0      	beq.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b096      	sub	sp, #88	@ 0x58
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	88fa      	ldrh	r2, [r7, #6]
 8006ec4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2222      	movs	r2, #34	@ 0x22
 8006ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d028      	beq.n	8006f32 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ee4:	4a3e      	ldr	r2, [pc, #248]	@ (8006fe0 <UART_Start_Receive_DMA+0x134>)
 8006ee6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eec:	4a3d      	ldr	r2, [pc, #244]	@ (8006fe4 <UART_Start_Receive_DMA+0x138>)
 8006eee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ef4:	4a3c      	ldr	r2, [pc, #240]	@ (8006fe8 <UART_Start_Receive_DMA+0x13c>)
 8006ef6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006efc:	2200      	movs	r2, #0
 8006efe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3324      	adds	r3, #36	@ 0x24
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f10:	461a      	mov	r2, r3
 8006f12:	88fb      	ldrh	r3, [r7, #6]
 8006f14:	f7fb fc28 	bl	8002768 <HAL_DMA_Start_IT>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d009      	beq.n	8006f32 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2210      	movs	r2, #16
 8006f22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e051      	b.n	8006fd6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d018      	beq.n	8006f6c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f5a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e6      	bne.n	8006f3a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	f043 0301 	orr.w	r3, r3, #1
 8006f82:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f8c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e5      	bne.n	8006f6c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fc0:	623a      	str	r2, [r7, #32]
 8006fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	69f9      	ldr	r1, [r7, #28]
 8006fc6:	6a3a      	ldr	r2, [r7, #32]
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e5      	bne.n	8006fa0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3758      	adds	r7, #88	@ 0x58
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	080071b3 	.word	0x080071b3
 8006fe4:	080072db 	.word	0x080072db
 8006fe8:	08007319 	.word	0x08007319

08006fec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b089      	sub	sp, #36	@ 0x24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	60bb      	str	r3, [r7, #8]
   return(result);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007008:	61fb      	str	r3, [r7, #28]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6979      	ldr	r1, [r7, #20]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	613b      	str	r3, [r7, #16]
   return(result);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e6      	bne.n	8006ff4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800702c:	bf00      	nop
 800702e:	3724      	adds	r7, #36	@ 0x24
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b095      	sub	sp, #84	@ 0x54
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800705e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007060:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800706c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e6      	bne.n	8007040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3308      	adds	r3, #8
 8007078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	61fb      	str	r3, [r7, #28]
   return(result);
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	f023 0301 	bic.w	r3, r3, #1
 8007088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3308      	adds	r3, #8
 8007090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e5      	bne.n	8007072 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d118      	bne.n	80070e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f023 0310 	bic.w	r3, r3, #16
 80070c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6979      	ldr	r1, [r7, #20]
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	613b      	str	r3, [r7, #16]
   return(result);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e6      	bne.n	80070ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070f4:	bf00      	nop
 80070f6:	3754      	adds	r7, #84	@ 0x54
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b090      	sub	sp, #64	@ 0x40
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007116:	d037      	beq.n	8007188 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800711a:	2200      	movs	r2, #0
 800711c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	623b      	str	r3, [r7, #32]
   return(result);
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007136:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007140:	633a      	str	r2, [r7, #48]	@ 0x30
 8007142:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800714e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e5      	bne.n	8007120 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	60fb      	str	r3, [r7, #12]
   return(result);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007168:	637b      	str	r3, [r7, #52]	@ 0x34
 800716a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	69b9      	ldr	r1, [r7, #24]
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	617b      	str	r3, [r7, #20]
   return(result);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e6      	bne.n	8007154 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007186:	e002      	b.n	800718e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007188:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800718a:	f7ff fa15 	bl	80065b8 <HAL_UART_TxCpltCallback>
}
 800718e:	bf00      	nop
 8007190:	3740      	adds	r7, #64	@ 0x40
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff fa11 	bl	80065cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b09c      	sub	sp, #112	@ 0x70
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071be:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071c8:	d071      	beq.n	80072ae <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80071ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e6      	bne.n	80071d2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007216:	f023 0301 	bic.w	r3, r3, #1
 800721a:	667b      	str	r3, [r7, #100]	@ 0x64
 800721c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3308      	adds	r3, #8
 8007222:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007224:	647a      	str	r2, [r7, #68]	@ 0x44
 8007226:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800722a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e5      	bne.n	8007204 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3308      	adds	r3, #8
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	623b      	str	r3, [r7, #32]
   return(result);
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800724e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3308      	adds	r3, #8
 8007256:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007258:	633a      	str	r2, [r7, #48]	@ 0x30
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800725e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e5      	bne.n	8007238 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800726c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800726e:	2220      	movs	r2, #32
 8007270:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007278:	2b01      	cmp	r3, #1
 800727a:	d118      	bne.n	80072ae <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800727c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	60fb      	str	r3, [r7, #12]
   return(result);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f023 0310 	bic.w	r3, r3, #16
 8007290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	69b9      	ldr	r1, [r7, #24]
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	617b      	str	r3, [r7, #20]
   return(result);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e6      	bne.n	800727c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072b0:	2200      	movs	r2, #0
 80072b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d107      	bne.n	80072cc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072c2:	4619      	mov	r1, r3
 80072c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80072c6:	f7f9 fae7 	bl	8000898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072ca:	e002      	b.n	80072d2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80072cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80072ce:	f7ff f987 	bl	80065e0 <HAL_UART_RxCpltCallback>
}
 80072d2:	bf00      	nop
 80072d4:	3770      	adds	r7, #112	@ 0x70
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d109      	bne.n	800730a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	b29b      	uxth	r3, r3
 8007300:	4619      	mov	r1, r3
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7f9 fac8 	bl	8000898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007308:	e002      	b.n	8007310 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff f972 	bl	80065f4 <HAL_UART_RxHalfCpltCallback>
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800732a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007332:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800733e:	2b80      	cmp	r3, #128	@ 0x80
 8007340:	d109      	bne.n	8007356 <UART_DMAError+0x3e>
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b21      	cmp	r3, #33	@ 0x21
 8007346:	d106      	bne.n	8007356 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2200      	movs	r2, #0
 800734c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007350:	6978      	ldr	r0, [r7, #20]
 8007352:	f7ff fe4b 	bl	8006fec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007360:	2b40      	cmp	r3, #64	@ 0x40
 8007362:	d109      	bne.n	8007378 <UART_DMAError+0x60>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b22      	cmp	r3, #34	@ 0x22
 8007368:	d106      	bne.n	8007378 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2200      	movs	r2, #0
 800736e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007372:	6978      	ldr	r0, [r7, #20]
 8007374:	f7ff fe60 	bl	8007038 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800737e:	f043 0210 	orr.w	r2, r3, #16
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007388:	6978      	ldr	r0, [r7, #20]
 800738a:	f7ff f93d 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800738e:	bf00      	nop
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f7ff f927 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ba:	bf00      	nop
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b088      	sub	sp, #32
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	61bb      	str	r3, [r7, #24]
 80073ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6979      	ldr	r1, [r7, #20]
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	613b      	str	r3, [r7, #16]
   return(result);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e6      	bne.n	80073ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff f8d5 	bl	80065b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800740e:	bf00      	nop
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b08c      	sub	sp, #48	@ 0x30
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	4613      	mov	r3, r2
 8007422:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800742a:	2b20      	cmp	r3, #32
 800742c:	d142      	bne.n	80074b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e03b      	b.n	80074b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	461a      	mov	r2, r3
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff fd2b 	bl	8006eac <UART_Start_Receive_DMA>
 8007456:	4603      	mov	r3, r0
 8007458:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800745c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007460:	2b00      	cmp	r3, #0
 8007462:	d124      	bne.n	80074ae <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007468:	2b01      	cmp	r3, #1
 800746a:	d11d      	bne.n	80074a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2210      	movs	r2, #16
 8007472:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	617b      	str	r3, [r7, #20]
   return(result);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f043 0310 	orr.w	r3, r3, #16
 8007488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24
 8007494:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6a39      	ldr	r1, [r7, #32]
 8007498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	61fb      	str	r3, [r7, #28]
   return(result);
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e6      	bne.n	8007474 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80074a6:	e002      	b.n	80074ae <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80074ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074b2:	e000      	b.n	80074b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80074b4:	2302      	movs	r3, #2
  }
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3730      	adds	r7, #48	@ 0x30
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074c0:	b084      	sub	sp, #16
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	f107 001c 	add.w	r0, r7, #28
 80074ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d121      	bne.n	800751e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	4b21      	ldr	r3, [pc, #132]	@ (8007570 <USB_CoreInit+0xb0>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007502:	2b01      	cmp	r3, #1
 8007504:	d105      	bne.n	8007512 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa92 	bl	8007a3c <USB_CoreReset>
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]
 800751c:	e010      	b.n	8007540 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa86 	bl	8007a3c <USB_CoreReset>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007538:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007540:	7fbb      	ldrb	r3, [r7, #30]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d10b      	bne.n	800755e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f043 0206 	orr.w	r2, r3, #6
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f043 0220 	orr.w	r2, r3, #32
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800755e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800756a:	b004      	add	sp, #16
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	ffbdffbf 	.word	0xffbdffbf

08007574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f023 0201 	bic.w	r2, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d115      	bne.n	80075e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80075c4:	200a      	movs	r0, #10
 80075c6:	f7fa feeb 	bl	80023a0 <HAL_Delay>
      ms += 10U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	330a      	adds	r3, #10
 80075ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa25 	bl	8007a20 <USB_GetMode>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d01e      	beq.n	800761a <USB_SetCurrentMode+0x84>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2bc7      	cmp	r3, #199	@ 0xc7
 80075e0:	d9f0      	bls.n	80075c4 <USB_SetCurrentMode+0x2e>
 80075e2:	e01a      	b.n	800761a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d115      	bne.n	8007616 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80075f6:	200a      	movs	r0, #10
 80075f8:	f7fa fed2 	bl	80023a0 <HAL_Delay>
      ms += 10U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	330a      	adds	r3, #10
 8007600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa0c 	bl	8007a20 <USB_GetMode>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <USB_SetCurrentMode+0x84>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2bc7      	cmp	r3, #199	@ 0xc7
 8007612:	d9f0      	bls.n	80075f6 <USB_SetCurrentMode+0x60>
 8007614:	e001      	b.n	800761a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e005      	b.n	8007626 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2bc8      	cmp	r3, #200	@ 0xc8
 800761e:	d101      	bne.n	8007624 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007630:	b084      	sub	sp, #16
 8007632:	b580      	push	{r7, lr}
 8007634:	b086      	sub	sp, #24
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800763e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	e009      	b.n	8007664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	3340      	adds	r3, #64	@ 0x40
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	2200      	movs	r2, #0
 800765c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	3301      	adds	r3, #1
 8007662:	613b      	str	r3, [r7, #16]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2b0e      	cmp	r3, #14
 8007668:	d9f2      	bls.n	8007650 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800766a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800766e:	2b00      	cmp	r3, #0
 8007670:	d11c      	bne.n	80076ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007680:	f043 0302 	orr.w	r3, r3, #2
 8007684:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	e005      	b.n	80076b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076be:	461a      	mov	r2, r3
 80076c0:	2300      	movs	r3, #0
 80076c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d10d      	bne.n	80076e8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d104      	bne.n	80076de <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076d4:	2100      	movs	r1, #0
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f968 	bl	80079ac <USB_SetDevSpeed>
 80076dc:	e008      	b.n	80076f0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076de:	2101      	movs	r1, #1
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f963 	bl	80079ac <USB_SetDevSpeed>
 80076e6:	e003      	b.n	80076f0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076e8:	2103      	movs	r1, #3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f95e 	bl	80079ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076f0:	2110      	movs	r1, #16
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f8fa 	bl	80078ec <USB_FlushTxFifo>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f924 	bl	8007950 <USB_FlushRxFifo>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007718:	461a      	mov	r2, r3
 800771a:	2300      	movs	r3, #0
 800771c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007724:	461a      	mov	r2, r3
 8007726:	2300      	movs	r3, #0
 8007728:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007730:	461a      	mov	r2, r3
 8007732:	2300      	movs	r3, #0
 8007734:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	e043      	b.n	80077c4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800774e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007752:	d118      	bne.n	8007786 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007766:	461a      	mov	r2, r3
 8007768:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	e013      	b.n	8007798 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800777c:	461a      	mov	r2, r3
 800777e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	e008      	b.n	8007798 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007792:	461a      	mov	r2, r3
 8007794:	2300      	movs	r3, #0
 8007796:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a4:	461a      	mov	r2, r3
 80077a6:	2300      	movs	r3, #0
 80077a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b6:	461a      	mov	r2, r3
 80077b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80077bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	3301      	adds	r3, #1
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80077c8:	461a      	mov	r2, r3
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d3b5      	bcc.n	800773c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077d0:	2300      	movs	r3, #0
 80077d2:	613b      	str	r3, [r7, #16]
 80077d4:	e043      	b.n	800785e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077ec:	d118      	bne.n	8007820 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10a      	bne.n	800780a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007800:	461a      	mov	r2, r3
 8007802:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	e013      	b.n	8007832 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007816:	461a      	mov	r2, r3
 8007818:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	e008      	b.n	8007832 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800782c:	461a      	mov	r2, r3
 800782e:	2300      	movs	r3, #0
 8007830:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783e:	461a      	mov	r2, r3
 8007840:	2300      	movs	r3, #0
 8007842:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007850:	461a      	mov	r2, r3
 8007852:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007856:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3301      	adds	r3, #1
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007862:	461a      	mov	r2, r3
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	4293      	cmp	r3, r2
 8007868:	d3b5      	bcc.n	80077d6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800787c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800788a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800788c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007890:	2b00      	cmp	r3, #0
 8007892:	d105      	bne.n	80078a0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f043 0210 	orr.w	r2, r3, #16
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699a      	ldr	r2, [r3, #24]
 80078a4:	4b0f      	ldr	r3, [pc, #60]	@ (80078e4 <USB_DevInit+0x2b4>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f043 0208 	orr.w	r2, r3, #8
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d105      	bne.n	80078d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <USB_DevInit+0x2b8>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078e0:	b004      	add	sp, #16
 80078e2:	4770      	bx	lr
 80078e4:	803c3800 	.word	0x803c3800
 80078e8:	40000004 	.word	0x40000004

080078ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3301      	adds	r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007906:	d901      	bls.n	800790c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e01b      	b.n	8007944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	daf2      	bge.n	80078fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	019b      	lsls	r3, r3, #6
 800791c:	f043 0220 	orr.w	r2, r3, #32
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3301      	adds	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007930:	d901      	bls.n	8007936 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e006      	b.n	8007944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b20      	cmp	r3, #32
 8007940:	d0f0      	beq.n	8007924 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3301      	adds	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007968:	d901      	bls.n	800796e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e018      	b.n	80079a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	daf2      	bge.n	800795c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2210      	movs	r2, #16
 800797e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3301      	adds	r3, #1
 8007984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800798c:	d901      	bls.n	8007992 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e006      	b.n	80079a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0310 	and.w	r3, r3, #16
 800799a:	2b10      	cmp	r3, #16
 800799c:	d0f0      	beq.n	8007980 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079cc:	4313      	orrs	r3, r2
 80079ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80079f8:	f023 0303 	bic.w	r3, r3, #3
 80079fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a0c:	f043 0302 	orr.w	r3, r3, #2
 8007a10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a54:	d901      	bls.n	8007a5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e01b      	b.n	8007a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	daf2      	bge.n	8007a48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f043 0201 	orr.w	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a7e:	d901      	bls.n	8007a84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e006      	b.n	8007a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d0f0      	beq.n	8007a72 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a9e:	b480      	push	{r7}
 8007aa0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007aa2:	bf00      	nop
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab2:	f3ef 8305 	mrs	r3, IPSR
 8007ab6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10f      	bne.n	8007ade <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007abe:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac2:	607b      	str	r3, [r7, #4]
  return(result);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d105      	bne.n	8007ad6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aca:	f3ef 8311 	mrs	r3, BASEPRI
 8007ace:	603b      	str	r3, [r7, #0]
  return(result);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <osKernelInitialize+0x3a>
 8007ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8007b10 <osKernelInitialize+0x64>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d103      	bne.n	8007ae6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007ade:	f06f 0305 	mvn.w	r3, #5
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	e00c      	b.n	8007b00 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b10 <osKernelInitialize+0x64>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d105      	bne.n	8007afa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007aee:	4b08      	ldr	r3, [pc, #32]	@ (8007b10 <osKernelInitialize+0x64>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e002      	b.n	8007b00 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007afa:	f04f 33ff 	mov.w	r3, #4294967295
 8007afe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007b00:	68fb      	ldr	r3, [r7, #12]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20000a0c 	.word	0x20000a0c

08007b14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b1a:	f3ef 8305 	mrs	r3, IPSR
 8007b1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10f      	bne.n	8007b46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b26:	f3ef 8310 	mrs	r3, PRIMASK
 8007b2a:	607b      	str	r3, [r7, #4]
  return(result);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d105      	bne.n	8007b3e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b32:	f3ef 8311 	mrs	r3, BASEPRI
 8007b36:	603b      	str	r3, [r7, #0]
  return(result);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <osKernelStart+0x3a>
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b7c <osKernelStart+0x68>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d103      	bne.n	8007b4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007b46:	f06f 0305 	mvn.w	r3, #5
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	e010      	b.n	8007b70 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b7c <osKernelStart+0x68>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d109      	bne.n	8007b6a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b56:	f7ff ffa2 	bl	8007a9e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b5a:	4b08      	ldr	r3, [pc, #32]	@ (8007b7c <osKernelStart+0x68>)
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b60:	f001 f8ca 	bl	8008cf8 <vTaskStartScheduler>
      stat = osOK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e002      	b.n	8007b70 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007b70:	68fb      	ldr	r3, [r7, #12]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000a0c 	.word	0x20000a0c

08007b80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b090      	sub	sp, #64	@ 0x40
 8007b84:	af04      	add	r7, sp, #16
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b90:	f3ef 8305 	mrs	r3, IPSR
 8007b94:	61fb      	str	r3, [r7, #28]
  return(result);
 8007b96:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f040 808f 	bne.w	8007cbc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba2:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d105      	bne.n	8007bb6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007baa:	f3ef 8311 	mrs	r3, BASEPRI
 8007bae:	617b      	str	r3, [r7, #20]
  return(result);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <osThreadNew+0x3e>
 8007bb6:	4b44      	ldr	r3, [pc, #272]	@ (8007cc8 <osThreadNew+0x148>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d07e      	beq.n	8007cbc <osThreadNew+0x13c>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d07b      	beq.n	8007cbc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007bc4:	2380      	movs	r3, #128	@ 0x80
 8007bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007bc8:	2318      	movs	r3, #24
 8007bca:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d045      	beq.n	8007c68 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <osThreadNew+0x6a>
        name = attr->name;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <osThreadNew+0x90>
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	2b38      	cmp	r3, #56	@ 0x38
 8007c02:	d805      	bhi.n	8007c10 <osThreadNew+0x90>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <osThreadNew+0x94>
        return (NULL);
 8007c10:	2300      	movs	r3, #0
 8007c12:	e054      	b.n	8007cbe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	089b      	lsrs	r3, r3, #2
 8007c22:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00e      	beq.n	8007c4a <osThreadNew+0xca>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c32:	d90a      	bls.n	8007c4a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d006      	beq.n	8007c4a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <osThreadNew+0xca>
        mem = 1;
 8007c44:	2301      	movs	r3, #1
 8007c46:	623b      	str	r3, [r7, #32]
 8007c48:	e010      	b.n	8007c6c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10c      	bne.n	8007c6c <osThreadNew+0xec>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d108      	bne.n	8007c6c <osThreadNew+0xec>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d104      	bne.n	8007c6c <osThreadNew+0xec>
          mem = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	623b      	str	r3, [r7, #32]
 8007c66:	e001      	b.n	8007c6c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d110      	bne.n	8007c94 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c7a:	9202      	str	r2, [sp, #8]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 fe4f 	bl	800892c <xTaskCreateStatic>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	613b      	str	r3, [r7, #16]
 8007c92:	e013      	b.n	8007cbc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d110      	bne.n	8007cbc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	f107 0310 	add.w	r3, r7, #16
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fea3 	bl	80089f8 <xTaskCreate>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d001      	beq.n	8007cbc <osThreadNew+0x13c>
          hTask = NULL;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007cbc:	693b      	ldr	r3, [r7, #16]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3730      	adds	r7, #48	@ 0x30
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000a0c 	.word	0x20000a0c

08007ccc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cd4:	f3ef 8305 	mrs	r3, IPSR
 8007cd8:	613b      	str	r3, [r7, #16]
  return(result);
 8007cda:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10f      	bne.n	8007d00 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d105      	bne.n	8007cf8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cec:	f3ef 8311 	mrs	r3, BASEPRI
 8007cf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <osDelay+0x3c>
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <osDelay+0x58>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d103      	bne.n	8007d08 <osDelay+0x3c>
    stat = osErrorISR;
 8007d00:	f06f 0305 	mvn.w	r3, #5
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	e007      	b.n	8007d18 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 ffb8 	bl	8008c88 <vTaskDelay>
    }
  }

  return (stat);
 8007d18:	697b      	ldr	r3, [r7, #20]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000a0c 	.word	0x20000a0c

08007d28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4a07      	ldr	r2, [pc, #28]	@ (8007d54 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4a06      	ldr	r2, [pc, #24]	@ (8007d58 <vApplicationGetIdleTaskMemory+0x30>)
 8007d3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2280      	movs	r2, #128	@ 0x80
 8007d44:	601a      	str	r2, [r3, #0]
}
 8007d46:	bf00      	nop
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000a10 	.word	0x20000a10
 8007d58:	20000a6c 	.word	0x20000a6c

08007d5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4a07      	ldr	r2, [pc, #28]	@ (8007d88 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	4a06      	ldr	r2, [pc, #24]	@ (8007d8c <vApplicationGetTimerTaskMemory+0x30>)
 8007d72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d7a:	601a      	str	r2, [r3, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	20000c6c 	.word	0x20000c6c
 8007d8c:	20000cc8 	.word	0x20000cc8

08007d90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f103 0208 	add.w	r2, r3, #8
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295
 8007da8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f103 0208 	add.w	r2, r3, #8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f103 0208 	add.w	r2, r3, #8
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	601a      	str	r2, [r3, #0]
}
 8007e26:	bf00      	nop
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d103      	bne.n	8007e52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	e00c      	b.n	8007e6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3308      	adds	r3, #8
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	e002      	b.n	8007e60 <vListInsert+0x2e>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d2f6      	bcs.n	8007e5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	601a      	str	r2, [r3, #0]
}
 8007e98:	bf00      	nop
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6892      	ldr	r2, [r2, #8]
 8007eba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6852      	ldr	r2, [r2, #4]
 8007ec4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d103      	bne.n	8007ed8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	1e5a      	subs	r2, r3, #1
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10d      	bne.n	8007f28 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007f28:	f002 f8a8 	bl	800a07c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f34:	68f9      	ldr	r1, [r7, #12]
 8007f36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f38:	fb01 f303 	mul.w	r3, r1, r3
 8007f3c:	441a      	add	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	68f9      	ldr	r1, [r7, #12]
 8007f5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f5e:	fb01 f303 	mul.w	r3, r1, r3
 8007f62:	441a      	add	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	22ff      	movs	r2, #255	@ 0xff
 8007f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	22ff      	movs	r2, #255	@ 0xff
 8007f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d114      	bne.n	8007fa8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01a      	beq.n	8007fbc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3310      	adds	r3, #16
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f001 f950 	bl	8009230 <xTaskRemoveFromEventList>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d012      	beq.n	8007fbc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f96:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <xQueueGenericReset+0xd4>)
 8007f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	e009      	b.n	8007fbc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3310      	adds	r3, #16
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff feef 	bl	8007d90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3324      	adds	r3, #36	@ 0x24
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff feea 	bl	8007d90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fbc:	f002 f894 	bl	800a0e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fc0:	2301      	movs	r3, #1
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	e000ed04 	.word	0xe000ed04

08007fd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08e      	sub	sp, #56	@ 0x38
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10d      	bne.n	8008000 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	b672      	cpsid	i
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	b662      	cpsie	i
 8007ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10d      	bne.n	8008022 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	b672      	cpsid	i
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	b662      	cpsie	i
 800801a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <xQueueGenericCreateStatic+0x5e>
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <xQueueGenericCreateStatic+0x62>
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <xQueueGenericCreateStatic+0x64>
 8008032:	2300      	movs	r3, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10d      	bne.n	8008054 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803c:	b672      	cpsid	i
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	b662      	cpsie	i
 800804c:	623b      	str	r3, [r7, #32]
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	e7fd      	b.n	8008050 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d102      	bne.n	8008060 <xQueueGenericCreateStatic+0x90>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <xQueueGenericCreateStatic+0x94>
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <xQueueGenericCreateStatic+0x96>
 8008064:	2300      	movs	r3, #0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10d      	bne.n	8008086 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806e:	b672      	cpsid	i
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	b662      	cpsie	i
 800807e:	61fb      	str	r3, [r7, #28]
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	e7fd      	b.n	8008082 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008086:	2350      	movs	r3, #80	@ 0x50
 8008088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b50      	cmp	r3, #80	@ 0x50
 800808e:	d00d      	beq.n	80080ac <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	b672      	cpsid	i
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	b662      	cpsie	i
 80080a4:	61bb      	str	r3, [r7, #24]
}
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
 80080aa:	e7fd      	b.n	80080a8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80080b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00d      	beq.n	80080d4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80080c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	4613      	mov	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f805 	bl	80080de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3730      	adds	r7, #48	@ 0x30
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	607a      	str	r2, [r7, #4]
 80080ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	e002      	b.n	8008100 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800810c:	2101      	movs	r1, #1
 800810e:	69b8      	ldr	r0, [r7, #24]
 8008110:	f7ff fef2 	bl	8007ef8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800811c:	bf00      	nop
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08e      	sub	sp, #56	@ 0x38
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008132:	2300      	movs	r3, #0
 8008134:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10d      	bne.n	800815c <xQueueGenericSend+0x38>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	b672      	cpsid	i
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	b662      	cpsie	i
 8008154:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d103      	bne.n	800816a <xQueueGenericSend+0x46>
 8008162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <xQueueGenericSend+0x4a>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <xQueueGenericSend+0x4c>
 800816e:	2300      	movs	r3, #0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10d      	bne.n	8008190 <xQueueGenericSend+0x6c>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008178:	b672      	cpsid	i
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	b662      	cpsie	i
 8008188:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800818a:	bf00      	nop
 800818c:	bf00      	nop
 800818e:	e7fd      	b.n	800818c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d103      	bne.n	800819e <xQueueGenericSend+0x7a>
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <xQueueGenericSend+0x7e>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <xQueueGenericSend+0x80>
 80081a2:	2300      	movs	r3, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10d      	bne.n	80081c4 <xQueueGenericSend+0xa0>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ac:	b672      	cpsid	i
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	b662      	cpsie	i
 80081bc:	623b      	str	r3, [r7, #32]
}
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081c4:	f001 f9fc 	bl	80095c0 <xTaskGetSchedulerState>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d102      	bne.n	80081d4 <xQueueGenericSend+0xb0>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <xQueueGenericSend+0xb4>
 80081d4:	2301      	movs	r3, #1
 80081d6:	e000      	b.n	80081da <xQueueGenericSend+0xb6>
 80081d8:	2300      	movs	r3, #0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10d      	bne.n	80081fa <xQueueGenericSend+0xd6>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	b672      	cpsid	i
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	b662      	cpsie	i
 80081f2:	61fb      	str	r3, [r7, #28]
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	e7fd      	b.n	80081f6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081fa:	f001 ff3f 	bl	800a07c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008206:	429a      	cmp	r2, r3
 8008208:	d302      	bcc.n	8008210 <xQueueGenericSend+0xec>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d129      	bne.n	8008264 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008216:	f000 fa1b 	bl	8008650 <prvCopyDataToQueue>
 800821a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008220:	2b00      	cmp	r3, #0
 8008222:	d010      	beq.n	8008246 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	3324      	adds	r3, #36	@ 0x24
 8008228:	4618      	mov	r0, r3
 800822a:	f001 f801 	bl	8009230 <xTaskRemoveFromEventList>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d013      	beq.n	800825c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008234:	4b3f      	ldr	r3, [pc, #252]	@ (8008334 <xQueueGenericSend+0x210>)
 8008236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	e00a      	b.n	800825c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d007      	beq.n	800825c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800824c:	4b39      	ldr	r3, [pc, #228]	@ (8008334 <xQueueGenericSend+0x210>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800825c:	f001 ff44 	bl	800a0e8 <vPortExitCritical>
				return pdPASS;
 8008260:	2301      	movs	r3, #1
 8008262:	e063      	b.n	800832c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800826a:	f001 ff3d 	bl	800a0e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800826e:	2300      	movs	r3, #0
 8008270:	e05c      	b.n	800832c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008274:	2b00      	cmp	r3, #0
 8008276:	d106      	bne.n	8008286 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008278:	f107 0314 	add.w	r3, r7, #20
 800827c:	4618      	mov	r0, r3
 800827e:	f001 f83d 	bl	80092fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008282:	2301      	movs	r3, #1
 8008284:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008286:	f001 ff2f 	bl	800a0e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800828a:	f000 fda1 	bl	8008dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800828e:	f001 fef5 	bl	800a07c <vPortEnterCritical>
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008298:	b25b      	sxtb	r3, r3
 800829a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829e:	d103      	bne.n	80082a8 <xQueueGenericSend+0x184>
 80082a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082ae:	b25b      	sxtb	r3, r3
 80082b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b4:	d103      	bne.n	80082be <xQueueGenericSend+0x19a>
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082be:	f001 ff13 	bl	800a0e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082c2:	1d3a      	adds	r2, r7, #4
 80082c4:	f107 0314 	add.w	r3, r7, #20
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 f82c 	bl	8009328 <xTaskCheckForTimeOut>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d124      	bne.n	8008320 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082d8:	f000 fab2 	bl	8008840 <prvIsQueueFull>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d018      	beq.n	8008314 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	3310      	adds	r3, #16
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	4611      	mov	r1, r2
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 ff4a 	bl	8009184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082f2:	f000 fa3d 	bl	8008770 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082f6:	f000 fd79 	bl	8008dec <xTaskResumeAll>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f af7c 	bne.w	80081fa <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8008302:	4b0c      	ldr	r3, [pc, #48]	@ (8008334 <xQueueGenericSend+0x210>)
 8008304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	e772      	b.n	80081fa <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008316:	f000 fa2b 	bl	8008770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800831a:	f000 fd67 	bl	8008dec <xTaskResumeAll>
 800831e:	e76c      	b.n	80081fa <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008320:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008322:	f000 fa25 	bl	8008770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008326:	f000 fd61 	bl	8008dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800832a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800832c:	4618      	mov	r0, r3
 800832e:	3738      	adds	r7, #56	@ 0x38
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	e000ed04 	.word	0xe000ed04

08008338 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08e      	sub	sp, #56	@ 0x38
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10d      	bne.n	800836c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	b672      	cpsid	i
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	b662      	cpsie	i
 8008364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d103      	bne.n	800837a <xQueueGenericSendFromISR+0x42>
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <xQueueGenericSendFromISR+0x46>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueGenericSendFromISR+0x48>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10d      	bne.n	80083a0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	b672      	cpsid	i
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	b662      	cpsie	i
 8008398:	623b      	str	r3, [r7, #32]
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	e7fd      	b.n	800839c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d103      	bne.n	80083ae <xQueueGenericSendFromISR+0x76>
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d101      	bne.n	80083b2 <xQueueGenericSendFromISR+0x7a>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <xQueueGenericSendFromISR+0x7c>
 80083b2:	2300      	movs	r3, #0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10d      	bne.n	80083d4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	b672      	cpsid	i
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	b662      	cpsie	i
 80083cc:	61fb      	str	r3, [r7, #28]
}
 80083ce:	bf00      	nop
 80083d0:	bf00      	nop
 80083d2:	e7fd      	b.n	80083d0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083d4:	f001 ff3a 	bl	800a24c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083d8:	f3ef 8211 	mrs	r2, BASEPRI
 80083dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e0:	b672      	cpsid	i
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	b662      	cpsie	i
 80083f0:	61ba      	str	r2, [r7, #24]
 80083f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008400:	429a      	cmp	r2, r3
 8008402:	d302      	bcc.n	800840a <xQueueGenericSendFromISR+0xd2>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b02      	cmp	r3, #2
 8008408:	d12c      	bne.n	8008464 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008410:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800841a:	f000 f919 	bl	8008650 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800841e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d112      	bne.n	800844e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	d016      	beq.n	800845e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	3324      	adds	r3, #36	@ 0x24
 8008434:	4618      	mov	r0, r3
 8008436:	f000 fefb 	bl	8009230 <xTaskRemoveFromEventList>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00e      	beq.n	800845e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	e007      	b.n	800845e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800844e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008452:	3301      	adds	r3, #1
 8008454:	b2db      	uxtb	r3, r3
 8008456:	b25a      	sxtb	r2, r3
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800845e:	2301      	movs	r3, #1
 8008460:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008462:	e001      	b.n	8008468 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008464:	2300      	movs	r3, #0
 8008466:	637b      	str	r3, [r7, #52]	@ 0x34
 8008468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008472:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008476:	4618      	mov	r0, r3
 8008478:	3738      	adds	r7, #56	@ 0x38
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08c      	sub	sp, #48	@ 0x30
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800848c:	2300      	movs	r3, #0
 800848e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10d      	bne.n	80084b6 <xQueueReceive+0x36>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849e:	b672      	cpsid	i
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	b662      	cpsie	i
 80084ae:	623b      	str	r3, [r7, #32]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d103      	bne.n	80084c4 <xQueueReceive+0x44>
 80084bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <xQueueReceive+0x48>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <xQueueReceive+0x4a>
 80084c8:	2300      	movs	r3, #0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10d      	bne.n	80084ea <xQueueReceive+0x6a>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d2:	b672      	cpsid	i
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	b662      	cpsie	i
 80084e2:	61fb      	str	r3, [r7, #28]
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
 80084e8:	e7fd      	b.n	80084e6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084ea:	f001 f869 	bl	80095c0 <xTaskGetSchedulerState>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d102      	bne.n	80084fa <xQueueReceive+0x7a>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <xQueueReceive+0x7e>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e000      	b.n	8008500 <xQueueReceive+0x80>
 80084fe:	2300      	movs	r3, #0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10d      	bne.n	8008520 <xQueueReceive+0xa0>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008508:	b672      	cpsid	i
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	b662      	cpsie	i
 8008518:	61bb      	str	r3, [r7, #24]
}
 800851a:	bf00      	nop
 800851c:	bf00      	nop
 800851e:	e7fd      	b.n	800851c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008520:	f001 fdac 	bl	800a07c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008528:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01f      	beq.n	8008570 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008534:	f000 f8f6 	bl	8008724 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853a:	1e5a      	subs	r2, r3, #1
 800853c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00f      	beq.n	8008568 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854a:	3310      	adds	r3, #16
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fe6f 	bl	8009230 <xTaskRemoveFromEventList>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008558:	4b3c      	ldr	r3, [pc, #240]	@ (800864c <xQueueReceive+0x1cc>)
 800855a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008568:	f001 fdbe 	bl	800a0e8 <vPortExitCritical>
				return pdPASS;
 800856c:	2301      	movs	r3, #1
 800856e:	e069      	b.n	8008644 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d103      	bne.n	800857e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008576:	f001 fdb7 	bl	800a0e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800857a:	2300      	movs	r3, #0
 800857c:	e062      	b.n	8008644 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800857e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008584:	f107 0310 	add.w	r3, r7, #16
 8008588:	4618      	mov	r0, r3
 800858a:	f000 feb7 	bl	80092fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800858e:	2301      	movs	r3, #1
 8008590:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008592:	f001 fda9 	bl	800a0e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008596:	f000 fc1b 	bl	8008dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800859a:	f001 fd6f 	bl	800a07c <vPortEnterCritical>
 800859e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085a4:	b25b      	sxtb	r3, r3
 80085a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085aa:	d103      	bne.n	80085b4 <xQueueReceive+0x134>
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085ba:	b25b      	sxtb	r3, r3
 80085bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c0:	d103      	bne.n	80085ca <xQueueReceive+0x14a>
 80085c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085ca:	f001 fd8d 	bl	800a0e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085ce:	1d3a      	adds	r2, r7, #4
 80085d0:	f107 0310 	add.w	r3, r7, #16
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 fea6 	bl	8009328 <xTaskCheckForTimeOut>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d123      	bne.n	800862a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085e4:	f000 f916 	bl	8008814 <prvIsQueueEmpty>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d017      	beq.n	800861e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f0:	3324      	adds	r3, #36	@ 0x24
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fdc4 	bl	8009184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085fe:	f000 f8b7 	bl	8008770 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008602:	f000 fbf3 	bl	8008dec <xTaskResumeAll>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d189      	bne.n	8008520 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800860c:	4b0f      	ldr	r3, [pc, #60]	@ (800864c <xQueueReceive+0x1cc>)
 800860e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	e780      	b.n	8008520 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800861e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008620:	f000 f8a6 	bl	8008770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008624:	f000 fbe2 	bl	8008dec <xTaskResumeAll>
 8008628:	e77a      	b.n	8008520 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800862a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800862c:	f000 f8a0 	bl	8008770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008630:	f000 fbdc 	bl	8008dec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008636:	f000 f8ed 	bl	8008814 <prvIsQueueEmpty>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	f43f af6f 	beq.w	8008520 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008642:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008644:	4618      	mov	r0, r3
 8008646:	3730      	adds	r7, #48	@ 0x30
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	e000ed04 	.word	0xe000ed04

08008650 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800865c:	2300      	movs	r3, #0
 800865e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008664:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10d      	bne.n	800868a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d14d      	bne.n	8008712 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 ffbe 	bl	80095fc <xTaskPriorityDisinherit>
 8008680:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	609a      	str	r2, [r3, #8]
 8008688:	e043      	b.n	8008712 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d119      	bne.n	80086c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6858      	ldr	r0, [r3, #4]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	461a      	mov	r2, r3
 800869a:	68b9      	ldr	r1, [r7, #8]
 800869c:	f002 fec0 	bl	800b420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a8:	441a      	add	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d32b      	bcc.n	8008712 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	605a      	str	r2, [r3, #4]
 80086c2:	e026      	b.n	8008712 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	68d8      	ldr	r0, [r3, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086cc:	461a      	mov	r2, r3
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	f002 fea6 	bl	800b420 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086dc:	425b      	negs	r3, r3
 80086de:	441a      	add	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d207      	bcs.n	8008700 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f8:	425b      	negs	r3, r3
 80086fa:	441a      	add	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b02      	cmp	r3, #2
 8008704:	d105      	bne.n	8008712 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	3b01      	subs	r3, #1
 8008710:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800871a:	697b      	ldr	r3, [r7, #20]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d018      	beq.n	8008768 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873e:	441a      	add	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	429a      	cmp	r2, r3
 800874e:	d303      	bcc.n	8008758 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68d9      	ldr	r1, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008760:	461a      	mov	r2, r3
 8008762:	6838      	ldr	r0, [r7, #0]
 8008764:	f002 fe5c 	bl	800b420 <memcpy>
	}
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008778:	f001 fc80 	bl	800a07c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008782:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008784:	e011      	b.n	80087aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d012      	beq.n	80087b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3324      	adds	r3, #36	@ 0x24
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fd4c 	bl	8009230 <xTaskRemoveFromEventList>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800879e:	f000 fe2b 	bl	80093f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	dce9      	bgt.n	8008786 <prvUnlockQueue+0x16>
 80087b2:	e000      	b.n	80087b6 <prvUnlockQueue+0x46>
					break;
 80087b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	22ff      	movs	r2, #255	@ 0xff
 80087ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80087be:	f001 fc93 	bl	800a0e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087c2:	f001 fc5b 	bl	800a07c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087ce:	e011      	b.n	80087f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d012      	beq.n	80087fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3310      	adds	r3, #16
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 fd27 	bl	8009230 <xTaskRemoveFromEventList>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087e8:	f000 fe06 	bl	80093f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dce9      	bgt.n	80087d0 <prvUnlockQueue+0x60>
 80087fc:	e000      	b.n	8008800 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	22ff      	movs	r2, #255	@ 0xff
 8008804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008808:	f001 fc6e 	bl	800a0e8 <vPortExitCritical>
}
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800881c:	f001 fc2e 	bl	800a07c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008824:	2b00      	cmp	r3, #0
 8008826:	d102      	bne.n	800882e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	e001      	b.n	8008832 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008832:	f001 fc59 	bl	800a0e8 <vPortExitCritical>

	return xReturn;
 8008836:	68fb      	ldr	r3, [r7, #12]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008848:	f001 fc18 	bl	800a07c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008854:	429a      	cmp	r2, r3
 8008856:	d102      	bne.n	800885e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	e001      	b.n	8008862 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008862:	f001 fc41 	bl	800a0e8 <vPortExitCritical>

	return xReturn;
 8008866:	68fb      	ldr	r3, [r7, #12]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	e014      	b.n	80088aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008880:	4a0f      	ldr	r2, [pc, #60]	@ (80088c0 <vQueueAddToRegistry+0x50>)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10b      	bne.n	80088a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800888c:	490c      	ldr	r1, [pc, #48]	@ (80088c0 <vQueueAddToRegistry+0x50>)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008896:	4a0a      	ldr	r2, [pc, #40]	@ (80088c0 <vQueueAddToRegistry+0x50>)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	4413      	add	r3, r2
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088a2:	e006      	b.n	80088b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b07      	cmp	r3, #7
 80088ae:	d9e7      	bls.n	8008880 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088b0:	bf00      	nop
 80088b2:	bf00      	nop
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	200010c8 	.word	0x200010c8

080088c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088d4:	f001 fbd2 	bl	800a07c <vPortEnterCritical>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088de:	b25b      	sxtb	r3, r3
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d103      	bne.n	80088ee <vQueueWaitForMessageRestricted+0x2a>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088f4:	b25b      	sxtb	r3, r3
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d103      	bne.n	8008904 <vQueueWaitForMessageRestricted+0x40>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008904:	f001 fbf0 	bl	800a0e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	d106      	bne.n	800891e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	3324      	adds	r3, #36	@ 0x24
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fc5b 	bl	80091d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800891e:	6978      	ldr	r0, [r7, #20]
 8008920:	f7ff ff26 	bl	8008770 <prvUnlockQueue>
	}
 8008924:	bf00      	nop
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08e      	sub	sp, #56	@ 0x38
 8008930:	af04      	add	r7, sp, #16
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800893a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10d      	bne.n	800895c <xTaskCreateStatic+0x30>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	b672      	cpsid	i
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	b662      	cpsie	i
 8008954:	623b      	str	r3, [r7, #32]
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	e7fd      	b.n	8008958 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800895c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10d      	bne.n	800897e <xTaskCreateStatic+0x52>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	b672      	cpsid	i
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	b662      	cpsie	i
 8008976:	61fb      	str	r3, [r7, #28]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800897e:	235c      	movs	r3, #92	@ 0x5c
 8008980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b5c      	cmp	r3, #92	@ 0x5c
 8008986:	d00d      	beq.n	80089a4 <xTaskCreateStatic+0x78>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898c:	b672      	cpsid	i
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	b662      	cpsie	i
 800899c:	61bb      	str	r3, [r7, #24]
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	e7fd      	b.n	80089a0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01e      	beq.n	80089ea <xTaskCreateStatic+0xbe>
 80089ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d01b      	beq.n	80089ea <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089c4:	2300      	movs	r3, #0
 80089c6:	9303      	str	r3, [sp, #12]
 80089c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ca:	9302      	str	r3, [sp, #8]
 80089cc:	f107 0314 	add.w	r3, r7, #20
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 f850 	bl	8008a82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089e4:	f000 f8e0 	bl	8008ba8 <prvAddNewTaskToReadyList>
 80089e8:	e001      	b.n	80089ee <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089ee:	697b      	ldr	r3, [r7, #20]
	}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3728      	adds	r7, #40	@ 0x28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08c      	sub	sp, #48	@ 0x30
 80089fc:	af04      	add	r7, sp, #16
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	4613      	mov	r3, r2
 8008a06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a08:	88fb      	ldrh	r3, [r7, #6]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 fc63 	bl	800a2d8 <pvPortMalloc>
 8008a12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00e      	beq.n	8008a38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a1a:	205c      	movs	r0, #92	@ 0x5c
 8008a1c:	f001 fc5c 	bl	800a2d8 <pvPortMalloc>
 8008a20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a2e:	e005      	b.n	8008a3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a30:	6978      	ldr	r0, [r7, #20]
 8008a32:	f001 fd1f 	bl	800a474 <vPortFree>
 8008a36:	e001      	b.n	8008a3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d017      	beq.n	8008a72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a4a:	88fa      	ldrh	r2, [r7, #6]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9303      	str	r3, [sp, #12]
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	9302      	str	r3, [sp, #8]
 8008a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f80e 	bl	8008a82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a66:	69f8      	ldr	r0, [r7, #28]
 8008a68:	f000 f89e 	bl	8008ba8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	e002      	b.n	8008a78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a72:	f04f 33ff 	mov.w	r3, #4294967295
 8008a76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a78:	69bb      	ldr	r3, [r7, #24]
	}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3720      	adds	r7, #32
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b088      	sub	sp, #32
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
 8008a8e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a92:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	461a      	mov	r2, r3
 8008a9a:	21a5      	movs	r1, #165	@ 0xa5
 8008a9c:	f002 fc2c 	bl	800b2f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008aaa:	440b      	add	r3, r1
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	f023 0307 	bic.w	r3, r3, #7
 8008ab8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	f003 0307 	and.w	r3, r3, #7
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00d      	beq.n	8008ae0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	b672      	cpsid	i
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	b662      	cpsie	i
 8008ad8:	617b      	str	r3, [r7, #20]
}
 8008ada:	bf00      	nop
 8008adc:	bf00      	nop
 8008ade:	e7fd      	b.n	8008adc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01f      	beq.n	8008b26 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	61fb      	str	r3, [r7, #28]
 8008aea:	e012      	b.n	8008b12 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	4413      	add	r3, r2
 8008af2:	7819      	ldrb	r1, [r3, #0]
 8008af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	4413      	add	r3, r2
 8008afa:	3334      	adds	r3, #52	@ 0x34
 8008afc:	460a      	mov	r2, r1
 8008afe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	4413      	add	r3, r2
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d006      	beq.n	8008b1a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	61fb      	str	r3, [r7, #28]
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	2b0f      	cmp	r3, #15
 8008b16:	d9e9      	bls.n	8008aec <prvInitialiseNewTask+0x6a>
 8008b18:	e000      	b.n	8008b1c <prvInitialiseNewTask+0x9a>
			{
				break;
 8008b1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b24:	e003      	b.n	8008b2e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b30:	2b37      	cmp	r3, #55	@ 0x37
 8008b32:	d901      	bls.n	8008b38 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b34:	2337      	movs	r3, #55	@ 0x37
 8008b36:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b42:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b46:	2200      	movs	r2, #0
 8008b48:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff f93e 	bl	8007dd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	3318      	adds	r3, #24
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff f939 	bl	8007dd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b72:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	2200      	movs	r2, #0
 8008b78:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	68f9      	ldr	r1, [r7, #12]
 8008b86:	69b8      	ldr	r0, [r7, #24]
 8008b88:	f001 f968 	bl	8009e5c <pxPortInitialiseStack>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b9e:	bf00      	nop
 8008ba0:	3720      	adds	r7, #32
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bb0:	f001 fa64 	bl	800a07c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8008c6c <prvAddNewTaskToReadyList+0xc4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	4a2c      	ldr	r2, [pc, #176]	@ (8008c6c <prvAddNewTaskToReadyList+0xc4>)
 8008bbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8008c70 <prvAddNewTaskToReadyList+0xc8>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d109      	bne.n	8008bda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8008c70 <prvAddNewTaskToReadyList+0xc8>)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bcc:	4b27      	ldr	r3, [pc, #156]	@ (8008c6c <prvAddNewTaskToReadyList+0xc4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d110      	bne.n	8008bf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bd4:	f000 fc34 	bl	8009440 <prvInitialiseTaskLists>
 8008bd8:	e00d      	b.n	8008bf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bda:	4b26      	ldr	r3, [pc, #152]	@ (8008c74 <prvAddNewTaskToReadyList+0xcc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008be2:	4b23      	ldr	r3, [pc, #140]	@ (8008c70 <prvAddNewTaskToReadyList+0xc8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d802      	bhi.n	8008bf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8008c70 <prvAddNewTaskToReadyList+0xc8>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bf6:	4b20      	ldr	r3, [pc, #128]	@ (8008c78 <prvAddNewTaskToReadyList+0xd0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8008c78 <prvAddNewTaskToReadyList+0xd0>)
 8008bfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c00:	4b1d      	ldr	r3, [pc, #116]	@ (8008c78 <prvAddNewTaskToReadyList+0xd0>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008c7c <prvAddNewTaskToReadyList+0xd4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d903      	bls.n	8008c1c <prvAddNewTaskToReadyList+0x74>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c18:	4a18      	ldr	r2, [pc, #96]	@ (8008c7c <prvAddNewTaskToReadyList+0xd4>)
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c20:	4613      	mov	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4a15      	ldr	r2, [pc, #84]	@ (8008c80 <prvAddNewTaskToReadyList+0xd8>)
 8008c2a:	441a      	add	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f7ff f8d9 	bl	8007dea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c38:	f001 fa56 	bl	800a0e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c74 <prvAddNewTaskToReadyList+0xcc>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00e      	beq.n	8008c62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c44:	4b0a      	ldr	r3, [pc, #40]	@ (8008c70 <prvAddNewTaskToReadyList+0xc8>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d207      	bcs.n	8008c62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c52:	4b0c      	ldr	r3, [pc, #48]	@ (8008c84 <prvAddNewTaskToReadyList+0xdc>)
 8008c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	200015dc 	.word	0x200015dc
 8008c70:	20001108 	.word	0x20001108
 8008c74:	200015e8 	.word	0x200015e8
 8008c78:	200015f8 	.word	0x200015f8
 8008c7c:	200015e4 	.word	0x200015e4
 8008c80:	2000110c 	.word	0x2000110c
 8008c84:	e000ed04 	.word	0xe000ed04

08008c88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d01a      	beq.n	8008cd0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c9a:	4b15      	ldr	r3, [pc, #84]	@ (8008cf0 <vTaskDelay+0x68>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00d      	beq.n	8008cbe <vTaskDelay+0x36>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca6:	b672      	cpsid	i
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	b662      	cpsie	i
 8008cb6:	60bb      	str	r3, [r7, #8]
}
 8008cb8:	bf00      	nop
 8008cba:	bf00      	nop
 8008cbc:	e7fd      	b.n	8008cba <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008cbe:	f000 f887 	bl	8008dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fd0d 	bl	80096e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cca:	f000 f88f 	bl	8008dec <xTaskResumeAll>
 8008cce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d107      	bne.n	8008ce6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008cd6:	4b07      	ldr	r3, [pc, #28]	@ (8008cf4 <vTaskDelay+0x6c>)
 8008cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ce6:	bf00      	nop
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20001604 	.word	0x20001604
 8008cf4:	e000ed04 	.word	0xe000ed04

08008cf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08a      	sub	sp, #40	@ 0x28
 8008cfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d06:	463a      	mov	r2, r7
 8008d08:	1d39      	adds	r1, r7, #4
 8008d0a:	f107 0308 	add.w	r3, r7, #8
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff f80a 	bl	8007d28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	9202      	str	r2, [sp, #8]
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	2300      	movs	r3, #0
 8008d24:	460a      	mov	r2, r1
 8008d26:	4924      	ldr	r1, [pc, #144]	@ (8008db8 <vTaskStartScheduler+0xc0>)
 8008d28:	4824      	ldr	r0, [pc, #144]	@ (8008dbc <vTaskStartScheduler+0xc4>)
 8008d2a:	f7ff fdff 	bl	800892c <xTaskCreateStatic>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4a23      	ldr	r2, [pc, #140]	@ (8008dc0 <vTaskStartScheduler+0xc8>)
 8008d32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d34:	4b22      	ldr	r3, [pc, #136]	@ (8008dc0 <vTaskStartScheduler+0xc8>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	617b      	str	r3, [r7, #20]
 8008d40:	e001      	b.n	8008d46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d102      	bne.n	8008d52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d4c:	f000 fd1e 	bl	800978c <xTimerCreateTimerTask>
 8008d50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d118      	bne.n	8008d8a <vTaskStartScheduler+0x92>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	b672      	cpsid	i
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	b662      	cpsie	i
 8008d6c:	613b      	str	r3, [r7, #16]
}
 8008d6e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d70:	4b14      	ldr	r3, [pc, #80]	@ (8008dc4 <vTaskStartScheduler+0xcc>)
 8008d72:	f04f 32ff 	mov.w	r2, #4294967295
 8008d76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d78:	4b13      	ldr	r3, [pc, #76]	@ (8008dc8 <vTaskStartScheduler+0xd0>)
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d7e:	4b13      	ldr	r3, [pc, #76]	@ (8008dcc <vTaskStartScheduler+0xd4>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d84:	f001 f8fc 	bl	8009f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d88:	e011      	b.n	8008dae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d90:	d10d      	bne.n	8008dae <vTaskStartScheduler+0xb6>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	b672      	cpsid	i
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	b662      	cpsie	i
 8008da6:	60fb      	str	r3, [r7, #12]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <vTaskStartScheduler+0xb2>
}
 8008dae:	bf00      	nop
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	0800bd24 	.word	0x0800bd24
 8008dbc:	08009411 	.word	0x08009411
 8008dc0:	20001600 	.word	0x20001600
 8008dc4:	200015fc 	.word	0x200015fc
 8008dc8:	200015e8 	.word	0x200015e8
 8008dcc:	200015e0 	.word	0x200015e0

08008dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008dd4:	4b04      	ldr	r3, [pc, #16]	@ (8008de8 <vTaskSuspendAll+0x18>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	4a03      	ldr	r2, [pc, #12]	@ (8008de8 <vTaskSuspendAll+0x18>)
 8008ddc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008dde:	bf00      	nop
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	20001604 	.word	0x20001604

08008dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dfa:	4b43      	ldr	r3, [pc, #268]	@ (8008f08 <xTaskResumeAll+0x11c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10d      	bne.n	8008e1e <xTaskResumeAll+0x32>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e06:	b672      	cpsid	i
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	b662      	cpsie	i
 8008e16:	603b      	str	r3, [r7, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	e7fd      	b.n	8008e1a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e1e:	f001 f92d 	bl	800a07c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e22:	4b39      	ldr	r3, [pc, #228]	@ (8008f08 <xTaskResumeAll+0x11c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	4a37      	ldr	r2, [pc, #220]	@ (8008f08 <xTaskResumeAll+0x11c>)
 8008e2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e2c:	4b36      	ldr	r3, [pc, #216]	@ (8008f08 <xTaskResumeAll+0x11c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d162      	bne.n	8008efa <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e34:	4b35      	ldr	r3, [pc, #212]	@ (8008f0c <xTaskResumeAll+0x120>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d05e      	beq.n	8008efa <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e3c:	e02f      	b.n	8008e9e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e3e:	4b34      	ldr	r3, [pc, #208]	@ (8008f10 <xTaskResumeAll+0x124>)
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3318      	adds	r3, #24
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff f82a 	bl	8007ea4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff f825 	bl	8007ea4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8008f14 <xTaskResumeAll+0x128>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d903      	bls.n	8008e6e <xTaskResumeAll+0x82>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008f14 <xTaskResumeAll+0x128>)
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4a27      	ldr	r2, [pc, #156]	@ (8008f18 <xTaskResumeAll+0x12c>)
 8008e7c:	441a      	add	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4619      	mov	r1, r3
 8008e84:	4610      	mov	r0, r2
 8008e86:	f7fe ffb0 	bl	8007dea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e8e:	4b23      	ldr	r3, [pc, #140]	@ (8008f1c <xTaskResumeAll+0x130>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d302      	bcc.n	8008e9e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008e98:	4b21      	ldr	r3, [pc, #132]	@ (8008f20 <xTaskResumeAll+0x134>)
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8008f10 <xTaskResumeAll+0x124>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1cb      	bne.n	8008e3e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008eac:	f000 fb68 	bl	8009580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8008f24 <xTaskResumeAll+0x138>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d010      	beq.n	8008ede <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ebc:	f000 f846 	bl	8008f4c <xTaskIncrementTick>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8008ec6:	4b16      	ldr	r3, [pc, #88]	@ (8008f20 <xTaskResumeAll+0x134>)
 8008ec8:	2201      	movs	r2, #1
 8008eca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f1      	bne.n	8008ebc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8008ed8:	4b12      	ldr	r3, [pc, #72]	@ (8008f24 <xTaskResumeAll+0x138>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ede:	4b10      	ldr	r3, [pc, #64]	@ (8008f20 <xTaskResumeAll+0x134>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008eea:	4b0f      	ldr	r3, [pc, #60]	@ (8008f28 <xTaskResumeAll+0x13c>)
 8008eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008efa:	f001 f8f5 	bl	800a0e8 <vPortExitCritical>

	return xAlreadyYielded;
 8008efe:	68bb      	ldr	r3, [r7, #8]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20001604 	.word	0x20001604
 8008f0c:	200015dc 	.word	0x200015dc
 8008f10:	2000159c 	.word	0x2000159c
 8008f14:	200015e4 	.word	0x200015e4
 8008f18:	2000110c 	.word	0x2000110c
 8008f1c:	20001108 	.word	0x20001108
 8008f20:	200015f0 	.word	0x200015f0
 8008f24:	200015ec 	.word	0x200015ec
 8008f28:	e000ed04 	.word	0xe000ed04

08008f2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f32:	4b05      	ldr	r3, [pc, #20]	@ (8008f48 <xTaskGetTickCount+0x1c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f38:	687b      	ldr	r3, [r7, #4]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	200015e0 	.word	0x200015e0

08008f4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f56:	4b50      	ldr	r3, [pc, #320]	@ (8009098 <xTaskIncrementTick+0x14c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f040 808c 	bne.w	8009078 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f60:	4b4e      	ldr	r3, [pc, #312]	@ (800909c <xTaskIncrementTick+0x150>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3301      	adds	r3, #1
 8008f66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f68:	4a4c      	ldr	r2, [pc, #304]	@ (800909c <xTaskIncrementTick+0x150>)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d123      	bne.n	8008fbc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f74:	4b4a      	ldr	r3, [pc, #296]	@ (80090a0 <xTaskIncrementTick+0x154>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00d      	beq.n	8008f9a <xTaskIncrementTick+0x4e>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	b672      	cpsid	i
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	b662      	cpsie	i
 8008f92:	603b      	str	r3, [r7, #0]
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	e7fd      	b.n	8008f96 <xTaskIncrementTick+0x4a>
 8008f9a:	4b41      	ldr	r3, [pc, #260]	@ (80090a0 <xTaskIncrementTick+0x154>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	4b40      	ldr	r3, [pc, #256]	@ (80090a4 <xTaskIncrementTick+0x158>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a3e      	ldr	r2, [pc, #248]	@ (80090a0 <xTaskIncrementTick+0x154>)
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80090a4 <xTaskIncrementTick+0x158>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	4b3e      	ldr	r3, [pc, #248]	@ (80090a8 <xTaskIncrementTick+0x15c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80090a8 <xTaskIncrementTick+0x15c>)
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	f000 fae2 	bl	8009580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80090ac <xTaskIncrementTick+0x160>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d349      	bcc.n	800905a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fc6:	4b36      	ldr	r3, [pc, #216]	@ (80090a0 <xTaskIncrementTick+0x154>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd0:	4b36      	ldr	r3, [pc, #216]	@ (80090ac <xTaskIncrementTick+0x160>)
 8008fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd6:	601a      	str	r2, [r3, #0]
					break;
 8008fd8:	e03f      	b.n	800905a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fda:	4b31      	ldr	r3, [pc, #196]	@ (80090a0 <xTaskIncrementTick+0x154>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d203      	bcs.n	8008ffa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80090ac <xTaskIncrementTick+0x160>)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ff8:	e02f      	b.n	800905a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe ff50 	bl	8007ea4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009008:	2b00      	cmp	r3, #0
 800900a:	d004      	beq.n	8009016 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	3318      	adds	r3, #24
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe ff47 	bl	8007ea4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800901a:	4b25      	ldr	r3, [pc, #148]	@ (80090b0 <xTaskIncrementTick+0x164>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	429a      	cmp	r2, r3
 8009020:	d903      	bls.n	800902a <xTaskIncrementTick+0xde>
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009026:	4a22      	ldr	r2, [pc, #136]	@ (80090b0 <xTaskIncrementTick+0x164>)
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800902e:	4613      	mov	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4a1f      	ldr	r2, [pc, #124]	@ (80090b4 <xTaskIncrementTick+0x168>)
 8009038:	441a      	add	r2, r3
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	3304      	adds	r3, #4
 800903e:	4619      	mov	r1, r3
 8009040:	4610      	mov	r0, r2
 8009042:	f7fe fed2 	bl	8007dea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800904a:	4b1b      	ldr	r3, [pc, #108]	@ (80090b8 <xTaskIncrementTick+0x16c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009050:	429a      	cmp	r2, r3
 8009052:	d3b8      	bcc.n	8008fc6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009058:	e7b5      	b.n	8008fc6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800905a:	4b17      	ldr	r3, [pc, #92]	@ (80090b8 <xTaskIncrementTick+0x16c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009060:	4914      	ldr	r1, [pc, #80]	@ (80090b4 <xTaskIncrementTick+0x168>)
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	440b      	add	r3, r1
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d907      	bls.n	8009082 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009072:	2301      	movs	r3, #1
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	e004      	b.n	8009082 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009078:	4b10      	ldr	r3, [pc, #64]	@ (80090bc <xTaskIncrementTick+0x170>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3301      	adds	r3, #1
 800907e:	4a0f      	ldr	r2, [pc, #60]	@ (80090bc <xTaskIncrementTick+0x170>)
 8009080:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009082:	4b0f      	ldr	r3, [pc, #60]	@ (80090c0 <xTaskIncrementTick+0x174>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800908a:	2301      	movs	r3, #1
 800908c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800908e:	697b      	ldr	r3, [r7, #20]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20001604 	.word	0x20001604
 800909c:	200015e0 	.word	0x200015e0
 80090a0:	20001594 	.word	0x20001594
 80090a4:	20001598 	.word	0x20001598
 80090a8:	200015f4 	.word	0x200015f4
 80090ac:	200015fc 	.word	0x200015fc
 80090b0:	200015e4 	.word	0x200015e4
 80090b4:	2000110c 	.word	0x2000110c
 80090b8:	20001108 	.word	0x20001108
 80090bc:	200015ec 	.word	0x200015ec
 80090c0:	200015f0 	.word	0x200015f0

080090c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090ca:	4b29      	ldr	r3, [pc, #164]	@ (8009170 <vTaskSwitchContext+0xac>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090d2:	4b28      	ldr	r3, [pc, #160]	@ (8009174 <vTaskSwitchContext+0xb0>)
 80090d4:	2201      	movs	r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090d8:	e044      	b.n	8009164 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80090da:	4b26      	ldr	r3, [pc, #152]	@ (8009174 <vTaskSwitchContext+0xb0>)
 80090dc:	2200      	movs	r2, #0
 80090de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e0:	4b25      	ldr	r3, [pc, #148]	@ (8009178 <vTaskSwitchContext+0xb4>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	e013      	b.n	8009110 <vTaskSwitchContext+0x4c>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10d      	bne.n	800910a <vTaskSwitchContext+0x46>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	b672      	cpsid	i
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	b662      	cpsie	i
 8009102:	607b      	str	r3, [r7, #4]
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	e7fd      	b.n	8009106 <vTaskSwitchContext+0x42>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3b01      	subs	r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	491a      	ldr	r1, [pc, #104]	@ (800917c <vTaskSwitchContext+0xb8>)
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	440b      	add	r3, r1
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d0e1      	beq.n	80090e8 <vTaskSwitchContext+0x24>
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4a13      	ldr	r2, [pc, #76]	@ (800917c <vTaskSwitchContext+0xb8>)
 8009130:	4413      	add	r3, r2
 8009132:	60bb      	str	r3, [r7, #8]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	605a      	str	r2, [r3, #4]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	3308      	adds	r3, #8
 8009146:	429a      	cmp	r2, r3
 8009148:	d104      	bne.n	8009154 <vTaskSwitchContext+0x90>
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	605a      	str	r2, [r3, #4]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	4a09      	ldr	r2, [pc, #36]	@ (8009180 <vTaskSwitchContext+0xbc>)
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	4a06      	ldr	r2, [pc, #24]	@ (8009178 <vTaskSwitchContext+0xb4>)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6013      	str	r3, [r2, #0]
}
 8009164:	bf00      	nop
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	20001604 	.word	0x20001604
 8009174:	200015f0 	.word	0x200015f0
 8009178:	200015e4 	.word	0x200015e4
 800917c:	2000110c 	.word	0x2000110c
 8009180:	20001108 	.word	0x20001108

08009184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10d      	bne.n	80091b0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009198:	b672      	cpsid	i
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	b662      	cpsie	i
 80091a8:	60fb      	str	r3, [r7, #12]
}
 80091aa:	bf00      	nop
 80091ac:	bf00      	nop
 80091ae:	e7fd      	b.n	80091ac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091b0:	4b07      	ldr	r3, [pc, #28]	@ (80091d0 <vTaskPlaceOnEventList+0x4c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3318      	adds	r3, #24
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7fe fe3a 	bl	8007e32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091be:	2101      	movs	r1, #1
 80091c0:	6838      	ldr	r0, [r7, #0]
 80091c2:	f000 fa8f 	bl	80096e4 <prvAddCurrentTaskToDelayedList>
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20001108 	.word	0x20001108

080091d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10d      	bne.n	8009202 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	b672      	cpsid	i
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	b662      	cpsie	i
 80091fa:	617b      	str	r3, [r7, #20]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009202:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <vTaskPlaceOnEventListRestricted+0x58>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3318      	adds	r3, #24
 8009208:	4619      	mov	r1, r3
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f7fe fded 	bl	8007dea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009216:	f04f 33ff 	mov.w	r3, #4294967295
 800921a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	68b8      	ldr	r0, [r7, #8]
 8009220:	f000 fa60 	bl	80096e4 <prvAddCurrentTaskToDelayedList>
	}
 8009224:	bf00      	nop
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20001108 	.word	0x20001108

08009230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10d      	bne.n	8009262 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924a:	b672      	cpsid	i
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	b662      	cpsie	i
 800925a:	60fb      	str	r3, [r7, #12]
}
 800925c:	bf00      	nop
 800925e:	bf00      	nop
 8009260:	e7fd      	b.n	800925e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	3318      	adds	r3, #24
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fe1c 	bl	8007ea4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800926c:	4b1d      	ldr	r3, [pc, #116]	@ (80092e4 <xTaskRemoveFromEventList+0xb4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d11d      	bne.n	80092b0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	3304      	adds	r3, #4
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fe13 	bl	8007ea4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009282:	4b19      	ldr	r3, [pc, #100]	@ (80092e8 <xTaskRemoveFromEventList+0xb8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	429a      	cmp	r2, r3
 8009288:	d903      	bls.n	8009292 <xTaskRemoveFromEventList+0x62>
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928e:	4a16      	ldr	r2, [pc, #88]	@ (80092e8 <xTaskRemoveFromEventList+0xb8>)
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4a13      	ldr	r2, [pc, #76]	@ (80092ec <xTaskRemoveFromEventList+0xbc>)
 80092a0:	441a      	add	r2, r3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3304      	adds	r3, #4
 80092a6:	4619      	mov	r1, r3
 80092a8:	4610      	mov	r0, r2
 80092aa:	f7fe fd9e 	bl	8007dea <vListInsertEnd>
 80092ae:	e005      	b.n	80092bc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	3318      	adds	r3, #24
 80092b4:	4619      	mov	r1, r3
 80092b6:	480e      	ldr	r0, [pc, #56]	@ (80092f0 <xTaskRemoveFromEventList+0xc0>)
 80092b8:	f7fe fd97 	bl	8007dea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c0:	4b0c      	ldr	r3, [pc, #48]	@ (80092f4 <xTaskRemoveFromEventList+0xc4>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d905      	bls.n	80092d6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092ca:	2301      	movs	r3, #1
 80092cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092ce:	4b0a      	ldr	r3, [pc, #40]	@ (80092f8 <xTaskRemoveFromEventList+0xc8>)
 80092d0:	2201      	movs	r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e001      	b.n	80092da <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092da:	697b      	ldr	r3, [r7, #20]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20001604 	.word	0x20001604
 80092e8:	200015e4 	.word	0x200015e4
 80092ec:	2000110c 	.word	0x2000110c
 80092f0:	2000159c 	.word	0x2000159c
 80092f4:	20001108 	.word	0x20001108
 80092f8:	200015f0 	.word	0x200015f0

080092fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009304:	4b06      	ldr	r3, [pc, #24]	@ (8009320 <vTaskInternalSetTimeOutState+0x24>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800930c:	4b05      	ldr	r3, [pc, #20]	@ (8009324 <vTaskInternalSetTimeOutState+0x28>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	605a      	str	r2, [r3, #4]
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	200015f4 	.word	0x200015f4
 8009324:	200015e0 	.word	0x200015e0

08009328 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10d      	bne.n	8009354 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933c:	b672      	cpsid	i
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	b662      	cpsie	i
 800934c:	613b      	str	r3, [r7, #16]
}
 800934e:	bf00      	nop
 8009350:	bf00      	nop
 8009352:	e7fd      	b.n	8009350 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10d      	bne.n	8009376 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935e:	b672      	cpsid	i
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	b662      	cpsie	i
 800936e:	60fb      	str	r3, [r7, #12]
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	e7fd      	b.n	8009372 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009376:	f000 fe81 	bl	800a07c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800937a:	4b1d      	ldr	r3, [pc, #116]	@ (80093f0 <xTaskCheckForTimeOut+0xc8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009392:	d102      	bne.n	800939a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009394:	2300      	movs	r3, #0
 8009396:	61fb      	str	r3, [r7, #28]
 8009398:	e023      	b.n	80093e2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4b15      	ldr	r3, [pc, #84]	@ (80093f4 <xTaskCheckForTimeOut+0xcc>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d007      	beq.n	80093b6 <xTaskCheckForTimeOut+0x8e>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d302      	bcc.n	80093b6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	61fb      	str	r3, [r7, #28]
 80093b4:	e015      	b.n	80093e2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d20b      	bcs.n	80093d8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	1ad2      	subs	r2, r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff ff95 	bl	80092fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61fb      	str	r3, [r7, #28]
 80093d6:	e004      	b.n	80093e2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093de:	2301      	movs	r3, #1
 80093e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093e2:	f000 fe81 	bl	800a0e8 <vPortExitCritical>

	return xReturn;
 80093e6:	69fb      	ldr	r3, [r7, #28]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3720      	adds	r7, #32
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	200015e0 	.word	0x200015e0
 80093f4:	200015f4 	.word	0x200015f4

080093f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093fc:	4b03      	ldr	r3, [pc, #12]	@ (800940c <vTaskMissedYield+0x14>)
 80093fe:	2201      	movs	r2, #1
 8009400:	601a      	str	r2, [r3, #0]
}
 8009402:	bf00      	nop
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	200015f0 	.word	0x200015f0

08009410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009418:	f000 f852 	bl	80094c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800941c:	4b06      	ldr	r3, [pc, #24]	@ (8009438 <prvIdleTask+0x28>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d9f9      	bls.n	8009418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <prvIdleTask+0x2c>)
 8009426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009434:	e7f0      	b.n	8009418 <prvIdleTask+0x8>
 8009436:	bf00      	nop
 8009438:	2000110c 	.word	0x2000110c
 800943c:	e000ed04 	.word	0xe000ed04

08009440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009446:	2300      	movs	r3, #0
 8009448:	607b      	str	r3, [r7, #4]
 800944a:	e00c      	b.n	8009466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4a12      	ldr	r2, [pc, #72]	@ (80094a0 <prvInitialiseTaskLists+0x60>)
 8009458:	4413      	add	r3, r2
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe fc98 	bl	8007d90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3301      	adds	r3, #1
 8009464:	607b      	str	r3, [r7, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b37      	cmp	r3, #55	@ 0x37
 800946a:	d9ef      	bls.n	800944c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800946c:	480d      	ldr	r0, [pc, #52]	@ (80094a4 <prvInitialiseTaskLists+0x64>)
 800946e:	f7fe fc8f 	bl	8007d90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009472:	480d      	ldr	r0, [pc, #52]	@ (80094a8 <prvInitialiseTaskLists+0x68>)
 8009474:	f7fe fc8c 	bl	8007d90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009478:	480c      	ldr	r0, [pc, #48]	@ (80094ac <prvInitialiseTaskLists+0x6c>)
 800947a:	f7fe fc89 	bl	8007d90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800947e:	480c      	ldr	r0, [pc, #48]	@ (80094b0 <prvInitialiseTaskLists+0x70>)
 8009480:	f7fe fc86 	bl	8007d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009484:	480b      	ldr	r0, [pc, #44]	@ (80094b4 <prvInitialiseTaskLists+0x74>)
 8009486:	f7fe fc83 	bl	8007d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800948a:	4b0b      	ldr	r3, [pc, #44]	@ (80094b8 <prvInitialiseTaskLists+0x78>)
 800948c:	4a05      	ldr	r2, [pc, #20]	@ (80094a4 <prvInitialiseTaskLists+0x64>)
 800948e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <prvInitialiseTaskLists+0x7c>)
 8009492:	4a05      	ldr	r2, [pc, #20]	@ (80094a8 <prvInitialiseTaskLists+0x68>)
 8009494:	601a      	str	r2, [r3, #0]
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	2000110c 	.word	0x2000110c
 80094a4:	2000156c 	.word	0x2000156c
 80094a8:	20001580 	.word	0x20001580
 80094ac:	2000159c 	.word	0x2000159c
 80094b0:	200015b0 	.word	0x200015b0
 80094b4:	200015c8 	.word	0x200015c8
 80094b8:	20001594 	.word	0x20001594
 80094bc:	20001598 	.word	0x20001598

080094c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094c6:	e019      	b.n	80094fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094c8:	f000 fdd8 	bl	800a07c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094cc:	4b10      	ldr	r3, [pc, #64]	@ (8009510 <prvCheckTasksWaitingTermination+0x50>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fce3 	bl	8007ea4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094de:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <prvCheckTasksWaitingTermination+0x54>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	4a0b      	ldr	r2, [pc, #44]	@ (8009514 <prvCheckTasksWaitingTermination+0x54>)
 80094e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009518 <prvCheckTasksWaitingTermination+0x58>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009518 <prvCheckTasksWaitingTermination+0x58>)
 80094f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094f2:	f000 fdf9 	bl	800a0e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f810 	bl	800951c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094fc:	4b06      	ldr	r3, [pc, #24]	@ (8009518 <prvCheckTasksWaitingTermination+0x58>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e1      	bne.n	80094c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	200015b0 	.word	0x200015b0
 8009514:	200015dc 	.word	0x200015dc
 8009518:	200015c4 	.word	0x200015c4

0800951c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800952a:	2b00      	cmp	r3, #0
 800952c:	d108      	bne.n	8009540 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009532:	4618      	mov	r0, r3
 8009534:	f000 ff9e 	bl	800a474 <vPortFree>
				vPortFree( pxTCB );
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 ff9b 	bl	800a474 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800953e:	e01b      	b.n	8009578 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009546:	2b01      	cmp	r3, #1
 8009548:	d103      	bne.n	8009552 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 ff92 	bl	800a474 <vPortFree>
	}
 8009550:	e012      	b.n	8009578 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009558:	2b02      	cmp	r3, #2
 800955a:	d00d      	beq.n	8009578 <prvDeleteTCB+0x5c>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009560:	b672      	cpsid	i
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	b662      	cpsie	i
 8009570:	60fb      	str	r3, [r7, #12]
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <prvDeleteTCB+0x58>
	}
 8009578:	bf00      	nop
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009586:	4b0c      	ldr	r3, [pc, #48]	@ (80095b8 <prvResetNextTaskUnblockTime+0x38>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d104      	bne.n	800959a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009590:	4b0a      	ldr	r3, [pc, #40]	@ (80095bc <prvResetNextTaskUnblockTime+0x3c>)
 8009592:	f04f 32ff 	mov.w	r2, #4294967295
 8009596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009598:	e008      	b.n	80095ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959a:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <prvResetNextTaskUnblockTime+0x38>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4a04      	ldr	r2, [pc, #16]	@ (80095bc <prvResetNextTaskUnblockTime+0x3c>)
 80095aa:	6013      	str	r3, [r2, #0]
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	20001594 	.word	0x20001594
 80095bc:	200015fc 	.word	0x200015fc

080095c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095c6:	4b0b      	ldr	r3, [pc, #44]	@ (80095f4 <xTaskGetSchedulerState+0x34>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d102      	bne.n	80095d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095ce:	2301      	movs	r3, #1
 80095d0:	607b      	str	r3, [r7, #4]
 80095d2:	e008      	b.n	80095e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095d4:	4b08      	ldr	r3, [pc, #32]	@ (80095f8 <xTaskGetSchedulerState+0x38>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d102      	bne.n	80095e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095dc:	2302      	movs	r3, #2
 80095de:	607b      	str	r3, [r7, #4]
 80095e0:	e001      	b.n	80095e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095e2:	2300      	movs	r3, #0
 80095e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095e6:	687b      	ldr	r3, [r7, #4]
	}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	200015e8 	.word	0x200015e8
 80095f8:	20001604 	.word	0x20001604

080095fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d05c      	beq.n	80096cc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009612:	4b31      	ldr	r3, [pc, #196]	@ (80096d8 <xTaskPriorityDisinherit+0xdc>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	429a      	cmp	r2, r3
 800961a:	d00d      	beq.n	8009638 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	b672      	cpsid	i
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	b662      	cpsie	i
 8009630:	60fb      	str	r3, [r7, #12]
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	e7fd      	b.n	8009634 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10d      	bne.n	800965c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009644:	b672      	cpsid	i
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	b662      	cpsie	i
 8009654:	60bb      	str	r3, [r7, #8]
}
 8009656:	bf00      	nop
 8009658:	bf00      	nop
 800965a:	e7fd      	b.n	8009658 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009660:	1e5a      	subs	r2, r3, #1
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966e:	429a      	cmp	r2, r3
 8009670:	d02c      	beq.n	80096cc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009676:	2b00      	cmp	r3, #0
 8009678:	d128      	bne.n	80096cc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	3304      	adds	r3, #4
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe fc10 	bl	8007ea4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009690:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800969c:	4b0f      	ldr	r3, [pc, #60]	@ (80096dc <xTaskPriorityDisinherit+0xe0>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d903      	bls.n	80096ac <xTaskPriorityDisinherit+0xb0>
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	4a0c      	ldr	r2, [pc, #48]	@ (80096dc <xTaskPriorityDisinherit+0xe0>)
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4a09      	ldr	r2, [pc, #36]	@ (80096e0 <xTaskPriorityDisinherit+0xe4>)
 80096ba:	441a      	add	r2, r3
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	3304      	adds	r3, #4
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f7fe fb91 	bl	8007dea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096c8:	2301      	movs	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096cc:	697b      	ldr	r3, [r7, #20]
	}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20001108 	.word	0x20001108
 80096dc:	200015e4 	.word	0x200015e4
 80096e0:	2000110c 	.word	0x2000110c

080096e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096ee:	4b21      	ldr	r3, [pc, #132]	@ (8009774 <prvAddCurrentTaskToDelayedList+0x90>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096f4:	4b20      	ldr	r3, [pc, #128]	@ (8009778 <prvAddCurrentTaskToDelayedList+0x94>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3304      	adds	r3, #4
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe fbd2 	bl	8007ea4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009706:	d10a      	bne.n	800971e <prvAddCurrentTaskToDelayedList+0x3a>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d007      	beq.n	800971e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800970e:	4b1a      	ldr	r3, [pc, #104]	@ (8009778 <prvAddCurrentTaskToDelayedList+0x94>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3304      	adds	r3, #4
 8009714:	4619      	mov	r1, r3
 8009716:	4819      	ldr	r0, [pc, #100]	@ (800977c <prvAddCurrentTaskToDelayedList+0x98>)
 8009718:	f7fe fb67 	bl	8007dea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800971c:	e026      	b.n	800976c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4413      	add	r3, r2
 8009724:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009726:	4b14      	ldr	r3, [pc, #80]	@ (8009778 <prvAddCurrentTaskToDelayedList+0x94>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	429a      	cmp	r2, r3
 8009734:	d209      	bcs.n	800974a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009736:	4b12      	ldr	r3, [pc, #72]	@ (8009780 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	4b0f      	ldr	r3, [pc, #60]	@ (8009778 <prvAddCurrentTaskToDelayedList+0x94>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3304      	adds	r3, #4
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f7fe fb75 	bl	8007e32 <vListInsert>
}
 8009748:	e010      	b.n	800976c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800974a:	4b0e      	ldr	r3, [pc, #56]	@ (8009784 <prvAddCurrentTaskToDelayedList+0xa0>)
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	4b0a      	ldr	r3, [pc, #40]	@ (8009778 <prvAddCurrentTaskToDelayedList+0x94>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3304      	adds	r3, #4
 8009754:	4619      	mov	r1, r3
 8009756:	4610      	mov	r0, r2
 8009758:	f7fe fb6b 	bl	8007e32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800975c:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <prvAddCurrentTaskToDelayedList+0xa4>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	429a      	cmp	r2, r3
 8009764:	d202      	bcs.n	800976c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009766:	4a08      	ldr	r2, [pc, #32]	@ (8009788 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	6013      	str	r3, [r2, #0]
}
 800976c:	bf00      	nop
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	200015e0 	.word	0x200015e0
 8009778:	20001108 	.word	0x20001108
 800977c:	200015c8 	.word	0x200015c8
 8009780:	20001598 	.word	0x20001598
 8009784:	20001594 	.word	0x20001594
 8009788:	200015fc 	.word	0x200015fc

0800978c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08a      	sub	sp, #40	@ 0x28
 8009790:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009792:	2300      	movs	r3, #0
 8009794:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009796:	f000 fb21 	bl	8009ddc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800979a:	4b1e      	ldr	r3, [pc, #120]	@ (8009814 <xTimerCreateTimerTask+0x88>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d021      	beq.n	80097e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80097aa:	1d3a      	adds	r2, r7, #4
 80097ac:	f107 0108 	add.w	r1, r7, #8
 80097b0:	f107 030c 	add.w	r3, r7, #12
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7fe fad1 	bl	8007d5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	9202      	str	r2, [sp, #8]
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	2302      	movs	r3, #2
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	2300      	movs	r3, #0
 80097ca:	460a      	mov	r2, r1
 80097cc:	4912      	ldr	r1, [pc, #72]	@ (8009818 <xTimerCreateTimerTask+0x8c>)
 80097ce:	4813      	ldr	r0, [pc, #76]	@ (800981c <xTimerCreateTimerTask+0x90>)
 80097d0:	f7ff f8ac 	bl	800892c <xTaskCreateStatic>
 80097d4:	4603      	mov	r3, r0
 80097d6:	4a12      	ldr	r2, [pc, #72]	@ (8009820 <xTimerCreateTimerTask+0x94>)
 80097d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097da:	4b11      	ldr	r3, [pc, #68]	@ (8009820 <xTimerCreateTimerTask+0x94>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097e2:	2301      	movs	r3, #1
 80097e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10d      	bne.n	8009808 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f0:	b672      	cpsid	i
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	b662      	cpsie	i
 8009800:	613b      	str	r3, [r7, #16]
}
 8009802:	bf00      	nop
 8009804:	bf00      	nop
 8009806:	e7fd      	b.n	8009804 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009808:	697b      	ldr	r3, [r7, #20]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	20001638 	.word	0x20001638
 8009818:	0800bd2c 	.word	0x0800bd2c
 800981c:	08009965 	.word	0x08009965
 8009820:	2000163c 	.word	0x2000163c

08009824 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08a      	sub	sp, #40	@ 0x28
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009832:	2300      	movs	r3, #0
 8009834:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10d      	bne.n	8009858 <xTimerGenericCommand+0x34>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009840:	b672      	cpsid	i
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	b662      	cpsie	i
 8009850:	623b      	str	r3, [r7, #32]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009858:	4b19      	ldr	r3, [pc, #100]	@ (80098c0 <xTimerGenericCommand+0x9c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d02a      	beq.n	80098b6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2b05      	cmp	r3, #5
 8009870:	dc18      	bgt.n	80098a4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009872:	f7ff fea5 	bl	80095c0 <xTaskGetSchedulerState>
 8009876:	4603      	mov	r3, r0
 8009878:	2b02      	cmp	r3, #2
 800987a:	d109      	bne.n	8009890 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800987c:	4b10      	ldr	r3, [pc, #64]	@ (80098c0 <xTimerGenericCommand+0x9c>)
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	f107 0110 	add.w	r1, r7, #16
 8009884:	2300      	movs	r3, #0
 8009886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009888:	f7fe fc4c 	bl	8008124 <xQueueGenericSend>
 800988c:	6278      	str	r0, [r7, #36]	@ 0x24
 800988e:	e012      	b.n	80098b6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009890:	4b0b      	ldr	r3, [pc, #44]	@ (80098c0 <xTimerGenericCommand+0x9c>)
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	f107 0110 	add.w	r1, r7, #16
 8009898:	2300      	movs	r3, #0
 800989a:	2200      	movs	r2, #0
 800989c:	f7fe fc42 	bl	8008124 <xQueueGenericSend>
 80098a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80098a2:	e008      	b.n	80098b6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098a4:	4b06      	ldr	r3, [pc, #24]	@ (80098c0 <xTimerGenericCommand+0x9c>)
 80098a6:	6818      	ldr	r0, [r3, #0]
 80098a8:	f107 0110 	add.w	r1, r7, #16
 80098ac:	2300      	movs	r3, #0
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	f7fe fd42 	bl	8008338 <xQueueGenericSendFromISR>
 80098b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80098b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3728      	adds	r7, #40	@ 0x28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20001638 	.word	0x20001638

080098c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ce:	4b24      	ldr	r3, [pc, #144]	@ (8009960 <prvProcessExpiredTimer+0x9c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	3304      	adds	r3, #4
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fe fae1 	bl	8007ea4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098e8:	f003 0304 	and.w	r3, r3, #4
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d025      	beq.n	800993c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	18d1      	adds	r1, r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	6978      	ldr	r0, [r7, #20]
 80098fe:	f000 f8d7 	bl	8009ab0 <prvInsertTimerInActiveList>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d022      	beq.n	800994e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009908:	2300      	movs	r3, #0
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	2300      	movs	r3, #0
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	2100      	movs	r1, #0
 8009912:	6978      	ldr	r0, [r7, #20]
 8009914:	f7ff ff86 	bl	8009824 <xTimerGenericCommand>
 8009918:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d116      	bne.n	800994e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009924:	b672      	cpsid	i
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	b662      	cpsie	i
 8009934:	60fb      	str	r3, [r7, #12]
}
 8009936:	bf00      	nop
 8009938:	bf00      	nop
 800993a:	e7fd      	b.n	8009938 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009942:	f023 0301 	bic.w	r3, r3, #1
 8009946:	b2da      	uxtb	r2, r3
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	6978      	ldr	r0, [r7, #20]
 8009954:	4798      	blx	r3
}
 8009956:	bf00      	nop
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20001630 	.word	0x20001630

08009964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800996c:	f107 0308 	add.w	r3, r7, #8
 8009970:	4618      	mov	r0, r3
 8009972:	f000 f859 	bl	8009a28 <prvGetNextExpireTime>
 8009976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4619      	mov	r1, r3
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 f805 	bl	800998c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009982:	f000 f8d7 	bl	8009b34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009986:	bf00      	nop
 8009988:	e7f0      	b.n	800996c <prvTimerTask+0x8>
	...

0800998c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009996:	f7ff fa1b 	bl	8008dd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 f866 	bl	8009a70 <prvSampleTimeNow>
 80099a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d130      	bne.n	8009a0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <prvProcessTimerOrBlockTask+0x3c>
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d806      	bhi.n	80099c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80099ba:	f7ff fa17 	bl	8008dec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff ff7f 	bl	80098c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80099c6:	e024      	b.n	8009a12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d008      	beq.n	80099e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099ce:	4b13      	ldr	r3, [pc, #76]	@ (8009a1c <prvProcessTimerOrBlockTask+0x90>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <prvProcessTimerOrBlockTask+0x50>
 80099d8:	2301      	movs	r3, #1
 80099da:	e000      	b.n	80099de <prvProcessTimerOrBlockTask+0x52>
 80099dc:	2300      	movs	r3, #0
 80099de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009a20 <prvProcessTimerOrBlockTask+0x94>)
 80099e2:	6818      	ldr	r0, [r3, #0]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	4619      	mov	r1, r3
 80099ee:	f7fe ff69 	bl	80088c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099f2:	f7ff f9fb 	bl	8008dec <xTaskResumeAll>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10a      	bne.n	8009a12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099fc:	4b09      	ldr	r3, [pc, #36]	@ (8009a24 <prvProcessTimerOrBlockTask+0x98>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	f3bf 8f6f 	isb	sy
}
 8009a0c:	e001      	b.n	8009a12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a0e:	f7ff f9ed 	bl	8008dec <xTaskResumeAll>
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20001634 	.word	0x20001634
 8009a20:	20001638 	.word	0x20001638
 8009a24:	e000ed04 	.word	0xe000ed04

08009a28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a30:	4b0e      	ldr	r3, [pc, #56]	@ (8009a6c <prvGetNextExpireTime+0x44>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <prvGetNextExpireTime+0x16>
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	e000      	b.n	8009a40 <prvGetNextExpireTime+0x18>
 8009a3e:	2200      	movs	r2, #0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d105      	bne.n	8009a58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a4c:	4b07      	ldr	r3, [pc, #28]	@ (8009a6c <prvGetNextExpireTime+0x44>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	e001      	b.n	8009a5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20001630 	.word	0x20001630

08009a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a78:	f7ff fa58 	bl	8008f2c <xTaskGetTickCount>
 8009a7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009aac <prvSampleTimeNow+0x3c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d205      	bcs.n	8009a94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a88:	f000 f940 	bl	8009d0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	e002      	b.n	8009a9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a9a:	4a04      	ldr	r2, [pc, #16]	@ (8009aac <prvSampleTimeNow+0x3c>)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	20001640 	.word	0x20001640

08009ab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d812      	bhi.n	8009afc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	1ad2      	subs	r2, r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d302      	bcc.n	8009aea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	617b      	str	r3, [r7, #20]
 8009ae8:	e01b      	b.n	8009b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009aea:	4b10      	ldr	r3, [pc, #64]	@ (8009b2c <prvInsertTimerInActiveList+0x7c>)
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3304      	adds	r3, #4
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f7fe f99c 	bl	8007e32 <vListInsert>
 8009afa:	e012      	b.n	8009b22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d206      	bcs.n	8009b12 <prvInsertTimerInActiveList+0x62>
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d302      	bcc.n	8009b12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	e007      	b.n	8009b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b12:	4b07      	ldr	r3, [pc, #28]	@ (8009b30 <prvInsertTimerInActiveList+0x80>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f7fe f988 	bl	8007e32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b22:	697b      	ldr	r3, [r7, #20]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20001634 	.word	0x20001634
 8009b30:	20001630 	.word	0x20001630

08009b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b08e      	sub	sp, #56	@ 0x38
 8009b38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b3a:	e0d4      	b.n	8009ce6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	da1b      	bge.n	8009b7a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b42:	1d3b      	adds	r3, r7, #4
 8009b44:	3304      	adds	r3, #4
 8009b46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10d      	bne.n	8009b6a <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	b672      	cpsid	i
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	b662      	cpsie	i
 8009b62:	61fb      	str	r3, [r7, #28]
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop
 8009b68:	e7fd      	b.n	8009b66 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b70:	6850      	ldr	r0, [r2, #4]
 8009b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b74:	6892      	ldr	r2, [r2, #8]
 8009b76:	4611      	mov	r1, r2
 8009b78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f2c0 80b2 	blt.w	8009ce6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d004      	beq.n	8009b98 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b90:	3304      	adds	r3, #4
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe f986 	bl	8007ea4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b98:	463b      	mov	r3, r7
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7ff ff68 	bl	8009a70 <prvSampleTimeNow>
 8009ba0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b09      	cmp	r3, #9
 8009ba6:	f200 809b 	bhi.w	8009ce0 <prvProcessReceivedCommands+0x1ac>
 8009baa:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb0 <prvProcessReceivedCommands+0x7c>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009bd9 	.word	0x08009bd9
 8009bb4:	08009bd9 	.word	0x08009bd9
 8009bb8:	08009bd9 	.word	0x08009bd9
 8009bbc:	08009c53 	.word	0x08009c53
 8009bc0:	08009c67 	.word	0x08009c67
 8009bc4:	08009cb7 	.word	0x08009cb7
 8009bc8:	08009bd9 	.word	0x08009bd9
 8009bcc:	08009bd9 	.word	0x08009bd9
 8009bd0:	08009c53 	.word	0x08009c53
 8009bd4:	08009c67 	.word	0x08009c67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	18d1      	adds	r1, r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bf8:	f7ff ff5a 	bl	8009ab0 <prvInsertTimerInActiveList>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d070      	beq.n	8009ce4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d065      	beq.n	8009ce4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	441a      	add	r2, r3
 8009c20:	2300      	movs	r3, #0
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	2100      	movs	r1, #0
 8009c28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c2a:	f7ff fdfb 	bl	8009824 <xTimerGenericCommand>
 8009c2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d156      	bne.n	8009ce4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	b672      	cpsid	i
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	b662      	cpsie	i
 8009c4a:	61bb      	str	r3, [r7, #24]
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	e7fd      	b.n	8009c4e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c58:	f023 0301 	bic.w	r3, r3, #1
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c64:	e03f      	b.n	8009ce6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c6c:	f043 0301 	orr.w	r3, r3, #1
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10d      	bne.n	8009ca2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	b672      	cpsid	i
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	b662      	cpsie	i
 8009c9a:	617b      	str	r3, [r7, #20]
}
 8009c9c:	bf00      	nop
 8009c9e:	bf00      	nop
 8009ca0:	e7fd      	b.n	8009c9e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca4:	699a      	ldr	r2, [r3, #24]
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	18d1      	adds	r1, r2, r3
 8009caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cb0:	f7ff fefe 	bl	8009ab0 <prvInsertTimerInActiveList>
					break;
 8009cb4:	e017      	b.n	8009ce6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cbc:	f003 0302 	and.w	r3, r3, #2
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d103      	bne.n	8009ccc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009cc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cc6:	f000 fbd5 	bl	800a474 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009cca:	e00c      	b.n	8009ce6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cd2:	f023 0301 	bic.w	r3, r3, #1
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009cde:	e002      	b.n	8009ce6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009ce0:	bf00      	nop
 8009ce2:	e000      	b.n	8009ce6 <prvProcessReceivedCommands+0x1b2>
					break;
 8009ce4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ce6:	4b08      	ldr	r3, [pc, #32]	@ (8009d08 <prvProcessReceivedCommands+0x1d4>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	1d39      	adds	r1, r7, #4
 8009cec:	2200      	movs	r2, #0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe fbc6 	bl	8008480 <xQueueReceive>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f47f af20 	bne.w	8009b3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	3730      	adds	r7, #48	@ 0x30
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20001638 	.word	0x20001638

08009d0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d12:	e04b      	b.n	8009dac <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d14:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd4 <prvSwitchTimerLists+0xc8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8009dd4 <prvSwitchTimerLists+0xc8>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fe f8b9 	bl	8007ea4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d031      	beq.n	8009dac <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	4413      	add	r3, r2
 8009d50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d90e      	bls.n	8009d78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d66:	4b1b      	ldr	r3, [pc, #108]	@ (8009dd4 <prvSwitchTimerLists+0xc8>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4610      	mov	r0, r2
 8009d72:	f7fe f85e 	bl	8007e32 <vListInsert>
 8009d76:	e019      	b.n	8009dac <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d78:	2300      	movs	r3, #0
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	2100      	movs	r1, #0
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff fd4e 	bl	8009824 <xTimerGenericCommand>
 8009d88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10d      	bne.n	8009dac <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d94:	b672      	cpsid	i
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	b662      	cpsie	i
 8009da4:	603b      	str	r3, [r7, #0]
}
 8009da6:	bf00      	nop
 8009da8:	bf00      	nop
 8009daa:	e7fd      	b.n	8009da8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dac:	4b09      	ldr	r3, [pc, #36]	@ (8009dd4 <prvSwitchTimerLists+0xc8>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1ae      	bne.n	8009d14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009db6:	4b07      	ldr	r3, [pc, #28]	@ (8009dd4 <prvSwitchTimerLists+0xc8>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009dbc:	4b06      	ldr	r3, [pc, #24]	@ (8009dd8 <prvSwitchTimerLists+0xcc>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a04      	ldr	r2, [pc, #16]	@ (8009dd4 <prvSwitchTimerLists+0xc8>)
 8009dc2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009dc4:	4a04      	ldr	r2, [pc, #16]	@ (8009dd8 <prvSwitchTimerLists+0xcc>)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	6013      	str	r3, [r2, #0]
}
 8009dca:	bf00      	nop
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20001630 	.word	0x20001630
 8009dd8:	20001634 	.word	0x20001634

08009ddc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009de2:	f000 f94b 	bl	800a07c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009de6:	4b15      	ldr	r3, [pc, #84]	@ (8009e3c <prvCheckForValidListAndQueue+0x60>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d120      	bne.n	8009e30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009dee:	4814      	ldr	r0, [pc, #80]	@ (8009e40 <prvCheckForValidListAndQueue+0x64>)
 8009df0:	f7fd ffce 	bl	8007d90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009df4:	4813      	ldr	r0, [pc, #76]	@ (8009e44 <prvCheckForValidListAndQueue+0x68>)
 8009df6:	f7fd ffcb 	bl	8007d90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dfa:	4b13      	ldr	r3, [pc, #76]	@ (8009e48 <prvCheckForValidListAndQueue+0x6c>)
 8009dfc:	4a10      	ldr	r2, [pc, #64]	@ (8009e40 <prvCheckForValidListAndQueue+0x64>)
 8009dfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e00:	4b12      	ldr	r3, [pc, #72]	@ (8009e4c <prvCheckForValidListAndQueue+0x70>)
 8009e02:	4a10      	ldr	r2, [pc, #64]	@ (8009e44 <prvCheckForValidListAndQueue+0x68>)
 8009e04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e06:	2300      	movs	r3, #0
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	4b11      	ldr	r3, [pc, #68]	@ (8009e50 <prvCheckForValidListAndQueue+0x74>)
 8009e0c:	4a11      	ldr	r2, [pc, #68]	@ (8009e54 <prvCheckForValidListAndQueue+0x78>)
 8009e0e:	2110      	movs	r1, #16
 8009e10:	200a      	movs	r0, #10
 8009e12:	f7fe f8dd 	bl	8007fd0 <xQueueGenericCreateStatic>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4a08      	ldr	r2, [pc, #32]	@ (8009e3c <prvCheckForValidListAndQueue+0x60>)
 8009e1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e1c:	4b07      	ldr	r3, [pc, #28]	@ (8009e3c <prvCheckForValidListAndQueue+0x60>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e24:	4b05      	ldr	r3, [pc, #20]	@ (8009e3c <prvCheckForValidListAndQueue+0x60>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	490b      	ldr	r1, [pc, #44]	@ (8009e58 <prvCheckForValidListAndQueue+0x7c>)
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fd20 	bl	8008870 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e30:	f000 f95a 	bl	800a0e8 <vPortExitCritical>
}
 8009e34:	bf00      	nop
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20001638 	.word	0x20001638
 8009e40:	20001608 	.word	0x20001608
 8009e44:	2000161c 	.word	0x2000161c
 8009e48:	20001630 	.word	0x20001630
 8009e4c:	20001634 	.word	0x20001634
 8009e50:	200016e4 	.word	0x200016e4
 8009e54:	20001644 	.word	0x20001644
 8009e58:	0800bd34 	.word	0x0800bd34

08009e5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3b04      	subs	r3, #4
 8009e6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3b04      	subs	r3, #4
 8009e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	f023 0201 	bic.w	r2, r3, #1
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3b04      	subs	r3, #4
 8009e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8009ec0 <pxPortInitialiseStack+0x64>)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	3b14      	subs	r3, #20
 8009e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3b04      	subs	r3, #4
 8009ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f06f 0202 	mvn.w	r2, #2
 8009eaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	3b20      	subs	r3, #32
 8009eb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	08009ec5 	.word	0x08009ec5

08009ec4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ece:	4b15      	ldr	r3, [pc, #84]	@ (8009f24 <prvTaskExitError+0x60>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed6:	d00d      	beq.n	8009ef4 <prvTaskExitError+0x30>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009edc:	b672      	cpsid	i
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	b662      	cpsie	i
 8009eec:	60fb      	str	r3, [r7, #12]
}
 8009eee:	bf00      	nop
 8009ef0:	bf00      	nop
 8009ef2:	e7fd      	b.n	8009ef0 <prvTaskExitError+0x2c>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef8:	b672      	cpsid	i
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	b662      	cpsie	i
 8009f08:	60bb      	str	r3, [r7, #8]
}
 8009f0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f0c:	bf00      	nop
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0fc      	beq.n	8009f0e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	2000000c 	.word	0x2000000c
	...

08009f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f30:	4b07      	ldr	r3, [pc, #28]	@ (8009f50 <pxCurrentTCBConst2>)
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	6808      	ldr	r0, [r1, #0]
 8009f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	f380 8809 	msr	PSP, r0
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f04f 0000 	mov.w	r0, #0
 8009f46:	f380 8811 	msr	BASEPRI, r0
 8009f4a:	4770      	bx	lr
 8009f4c:	f3af 8000 	nop.w

08009f50 <pxCurrentTCBConst2>:
 8009f50:	20001108 	.word	0x20001108
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop

08009f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f58:	4808      	ldr	r0, [pc, #32]	@ (8009f7c <prvPortStartFirstTask+0x24>)
 8009f5a:	6800      	ldr	r0, [r0, #0]
 8009f5c:	6800      	ldr	r0, [r0, #0]
 8009f5e:	f380 8808 	msr	MSP, r0
 8009f62:	f04f 0000 	mov.w	r0, #0
 8009f66:	f380 8814 	msr	CONTROL, r0
 8009f6a:	b662      	cpsie	i
 8009f6c:	b661      	cpsie	f
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	df00      	svc	0
 8009f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f7a:	bf00      	nop
 8009f7c:	e000ed08 	.word	0xe000ed08

08009f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f86:	4b37      	ldr	r3, [pc, #220]	@ (800a064 <xPortStartScheduler+0xe4>)
 8009f88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	22ff      	movs	r2, #255	@ 0xff
 8009f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	4b2f      	ldr	r3, [pc, #188]	@ (800a068 <xPortStartScheduler+0xe8>)
 8009fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fae:	4b2f      	ldr	r3, [pc, #188]	@ (800a06c <xPortStartScheduler+0xec>)
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fb4:	e009      	b.n	8009fca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800a06c <xPortStartScheduler+0xec>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800a06c <xPortStartScheduler+0xec>)
 8009fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fd2:	2b80      	cmp	r3, #128	@ 0x80
 8009fd4:	d0ef      	beq.n	8009fb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fd6:	4b25      	ldr	r3, [pc, #148]	@ (800a06c <xPortStartScheduler+0xec>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f1c3 0307 	rsb	r3, r3, #7
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	d00d      	beq.n	8009ffe <xPortStartScheduler+0x7e>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe6:	b672      	cpsid	i
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	b662      	cpsie	i
 8009ff6:	60bb      	str	r3, [r7, #8]
}
 8009ff8:	bf00      	nop
 8009ffa:	bf00      	nop
 8009ffc:	e7fd      	b.n	8009ffa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800a06c <xPortStartScheduler+0xec>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	021b      	lsls	r3, r3, #8
 800a004:	4a19      	ldr	r2, [pc, #100]	@ (800a06c <xPortStartScheduler+0xec>)
 800a006:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a008:	4b18      	ldr	r3, [pc, #96]	@ (800a06c <xPortStartScheduler+0xec>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a010:	4a16      	ldr	r2, [pc, #88]	@ (800a06c <xPortStartScheduler+0xec>)
 800a012:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	b2da      	uxtb	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a01c:	4b14      	ldr	r3, [pc, #80]	@ (800a070 <xPortStartScheduler+0xf0>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a13      	ldr	r2, [pc, #76]	@ (800a070 <xPortStartScheduler+0xf0>)
 800a022:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a026:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a028:	4b11      	ldr	r3, [pc, #68]	@ (800a070 <xPortStartScheduler+0xf0>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a10      	ldr	r2, [pc, #64]	@ (800a070 <xPortStartScheduler+0xf0>)
 800a02e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a032:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a034:	f000 f8dc 	bl	800a1f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a038:	4b0e      	ldr	r3, [pc, #56]	@ (800a074 <xPortStartScheduler+0xf4>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a03e:	f000 f8fb 	bl	800a238 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a042:	4b0d      	ldr	r3, [pc, #52]	@ (800a078 <xPortStartScheduler+0xf8>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a0c      	ldr	r2, [pc, #48]	@ (800a078 <xPortStartScheduler+0xf8>)
 800a048:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a04c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a04e:	f7ff ff83 	bl	8009f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a052:	f7ff f837 	bl	80090c4 <vTaskSwitchContext>
	prvTaskExitError();
 800a056:	f7ff ff35 	bl	8009ec4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	e000e400 	.word	0xe000e400
 800a068:	20001734 	.word	0x20001734
 800a06c:	20001738 	.word	0x20001738
 800a070:	e000ed20 	.word	0xe000ed20
 800a074:	2000000c 	.word	0x2000000c
 800a078:	e000ef34 	.word	0xe000ef34

0800a07c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	b672      	cpsid	i
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	b662      	cpsie	i
 800a096:	607b      	str	r3, [r7, #4]
}
 800a098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a09a:	4b11      	ldr	r3, [pc, #68]	@ (800a0e0 <vPortEnterCritical+0x64>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	4a0f      	ldr	r2, [pc, #60]	@ (800a0e0 <vPortEnterCritical+0x64>)
 800a0a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a0e0 <vPortEnterCritical+0x64>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d112      	bne.n	800a0d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e4 <vPortEnterCritical+0x68>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00d      	beq.n	800a0d2 <vPortEnterCritical+0x56>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ba:	b672      	cpsid	i
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	b662      	cpsie	i
 800a0ca:	603b      	str	r3, [r7, #0]
}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	e7fd      	b.n	800a0ce <vPortEnterCritical+0x52>
	}
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	2000000c 	.word	0x2000000c
 800a0e4:	e000ed04 	.word	0xe000ed04

0800a0e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0ee:	4b13      	ldr	r3, [pc, #76]	@ (800a13c <vPortExitCritical+0x54>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10d      	bne.n	800a112 <vPortExitCritical+0x2a>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fa:	b672      	cpsid	i
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	b662      	cpsie	i
 800a10a:	607b      	str	r3, [r7, #4]
}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	e7fd      	b.n	800a10e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a112:	4b0a      	ldr	r3, [pc, #40]	@ (800a13c <vPortExitCritical+0x54>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3b01      	subs	r3, #1
 800a118:	4a08      	ldr	r2, [pc, #32]	@ (800a13c <vPortExitCritical+0x54>)
 800a11a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a11c:	4b07      	ldr	r3, [pc, #28]	@ (800a13c <vPortExitCritical+0x54>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d105      	bne.n	800a130 <vPortExitCritical+0x48>
 800a124:	2300      	movs	r3, #0
 800a126:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	f383 8811 	msr	BASEPRI, r3
}
 800a12e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	2000000c 	.word	0x2000000c

0800a140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a140:	f3ef 8009 	mrs	r0, PSP
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	4b15      	ldr	r3, [pc, #84]	@ (800a1a0 <pxCurrentTCBConst>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	f01e 0f10 	tst.w	lr, #16
 800a150:	bf08      	it	eq
 800a152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15a:	6010      	str	r0, [r2, #0]
 800a15c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a160:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a164:	b672      	cpsid	i
 800a166:	f380 8811 	msr	BASEPRI, r0
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	b662      	cpsie	i
 800a174:	f7fe ffa6 	bl	80090c4 <vTaskSwitchContext>
 800a178:	f04f 0000 	mov.w	r0, #0
 800a17c:	f380 8811 	msr	BASEPRI, r0
 800a180:	bc09      	pop	{r0, r3}
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	6808      	ldr	r0, [r1, #0]
 800a186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	f01e 0f10 	tst.w	lr, #16
 800a18e:	bf08      	it	eq
 800a190:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a194:	f380 8809 	msr	PSP, r0
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop

0800a1a0 <pxCurrentTCBConst>:
 800a1a0:	20001108 	.word	0x20001108
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	b672      	cpsid	i
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	b662      	cpsie	i
 800a1c2:	607b      	str	r3, [r7, #4]
}
 800a1c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1c6:	f7fe fec1 	bl	8008f4c <xTaskIncrementTick>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1d0:	4b06      	ldr	r3, [pc, #24]	@ (800a1ec <xPortSysTickHandler+0x44>)
 800a1d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	2300      	movs	r3, #0
 800a1da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	f383 8811 	msr	BASEPRI, r3
}
 800a1e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	e000ed04 	.word	0xe000ed04

0800a1f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a224 <vPortSetupTimerInterrupt+0x34>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a228 <vPortSetupTimerInterrupt+0x38>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a200:	4b0a      	ldr	r3, [pc, #40]	@ (800a22c <vPortSetupTimerInterrupt+0x3c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a0a      	ldr	r2, [pc, #40]	@ (800a230 <vPortSetupTimerInterrupt+0x40>)
 800a206:	fba2 2303 	umull	r2, r3, r2, r3
 800a20a:	099b      	lsrs	r3, r3, #6
 800a20c:	4a09      	ldr	r2, [pc, #36]	@ (800a234 <vPortSetupTimerInterrupt+0x44>)
 800a20e:	3b01      	subs	r3, #1
 800a210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a212:	4b04      	ldr	r3, [pc, #16]	@ (800a224 <vPortSetupTimerInterrupt+0x34>)
 800a214:	2207      	movs	r2, #7
 800a216:	601a      	str	r2, [r3, #0]
}
 800a218:	bf00      	nop
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	e000e010 	.word	0xe000e010
 800a228:	e000e018 	.word	0xe000e018
 800a22c:	20000000 	.word	0x20000000
 800a230:	10624dd3 	.word	0x10624dd3
 800a234:	e000e014 	.word	0xe000e014

0800a238 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a238:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a248 <vPortEnableVFP+0x10>
 800a23c:	6801      	ldr	r1, [r0, #0]
 800a23e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a242:	6001      	str	r1, [r0, #0]
 800a244:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a246:	bf00      	nop
 800a248:	e000ed88 	.word	0xe000ed88

0800a24c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a252:	f3ef 8305 	mrs	r3, IPSR
 800a256:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b0f      	cmp	r3, #15
 800a25c:	d917      	bls.n	800a28e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a25e:	4a1a      	ldr	r2, [pc, #104]	@ (800a2c8 <vPortValidateInterruptPriority+0x7c>)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4413      	add	r3, r2
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a268:	4b18      	ldr	r3, [pc, #96]	@ (800a2cc <vPortValidateInterruptPriority+0x80>)
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	7afa      	ldrb	r2, [r7, #11]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d20d      	bcs.n	800a28e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	b672      	cpsid	i
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	b662      	cpsie	i
 800a286:	607b      	str	r3, [r7, #4]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a28e:	4b10      	ldr	r3, [pc, #64]	@ (800a2d0 <vPortValidateInterruptPriority+0x84>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a296:	4b0f      	ldr	r3, [pc, #60]	@ (800a2d4 <vPortValidateInterruptPriority+0x88>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d90d      	bls.n	800a2ba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a2:	b672      	cpsid	i
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	b662      	cpsie	i
 800a2b2:	603b      	str	r3, [r7, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop
 800a2b8:	e7fd      	b.n	800a2b6 <vPortValidateInterruptPriority+0x6a>
	}
 800a2ba:	bf00      	nop
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	e000e3f0 	.word	0xe000e3f0
 800a2cc:	20001734 	.word	0x20001734
 800a2d0:	e000ed0c 	.word	0xe000ed0c
 800a2d4:	20001738 	.word	0x20001738

0800a2d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	@ 0x28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2e4:	f7fe fd74 	bl	8008dd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2e8:	4b5d      	ldr	r3, [pc, #372]	@ (800a460 <pvPortMalloc+0x188>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2f0:	f000 f920 	bl	800a534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2f4:	4b5b      	ldr	r3, [pc, #364]	@ (800a464 <pvPortMalloc+0x18c>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f040 8094 	bne.w	800a42a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d020      	beq.n	800a34a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a308:	2208      	movs	r2, #8
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4413      	add	r3, r2
 800a30e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f003 0307 	and.w	r3, r3, #7
 800a316:	2b00      	cmp	r3, #0
 800a318:	d017      	beq.n	800a34a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f023 0307 	bic.w	r3, r3, #7
 800a320:	3308      	adds	r3, #8
 800a322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00d      	beq.n	800a34a <pvPortMalloc+0x72>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	b672      	cpsid	i
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	b662      	cpsie	i
 800a342:	617b      	str	r3, [r7, #20]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d06c      	beq.n	800a42a <pvPortMalloc+0x152>
 800a350:	4b45      	ldr	r3, [pc, #276]	@ (800a468 <pvPortMalloc+0x190>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d867      	bhi.n	800a42a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a35a:	4b44      	ldr	r3, [pc, #272]	@ (800a46c <pvPortMalloc+0x194>)
 800a35c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a35e:	4b43      	ldr	r3, [pc, #268]	@ (800a46c <pvPortMalloc+0x194>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a364:	e004      	b.n	800a370 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	429a      	cmp	r2, r3
 800a378:	d903      	bls.n	800a382 <pvPortMalloc+0xaa>
 800a37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1f1      	bne.n	800a366 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a382:	4b37      	ldr	r3, [pc, #220]	@ (800a460 <pvPortMalloc+0x188>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a388:	429a      	cmp	r2, r3
 800a38a:	d04e      	beq.n	800a42a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2208      	movs	r2, #8
 800a392:	4413      	add	r3, r2
 800a394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	1ad2      	subs	r2, r2, r3
 800a3a6:	2308      	movs	r3, #8
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d922      	bls.n	800a3f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	f003 0307 	and.w	r3, r3, #7
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00d      	beq.n	800a3dc <pvPortMalloc+0x104>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c4:	b672      	cpsid	i
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	b662      	cpsie	i
 800a3d4:	613b      	str	r3, [r7, #16]
}
 800a3d6:	bf00      	nop
 800a3d8:	bf00      	nop
 800a3da:	e7fd      	b.n	800a3d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	1ad2      	subs	r2, r2, r3
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3ee:	69b8      	ldr	r0, [r7, #24]
 800a3f0:	f000 f902 	bl	800a5f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a468 <pvPortMalloc+0x190>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a468 <pvPortMalloc+0x190>)
 800a400:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a402:	4b19      	ldr	r3, [pc, #100]	@ (800a468 <pvPortMalloc+0x190>)
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	4b1a      	ldr	r3, [pc, #104]	@ (800a470 <pvPortMalloc+0x198>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d203      	bcs.n	800a416 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a40e:	4b16      	ldr	r3, [pc, #88]	@ (800a468 <pvPortMalloc+0x190>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a17      	ldr	r2, [pc, #92]	@ (800a470 <pvPortMalloc+0x198>)
 800a414:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	4b12      	ldr	r3, [pc, #72]	@ (800a464 <pvPortMalloc+0x18c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	431a      	orrs	r2, r3
 800a420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a422:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a42a:	f7fe fcdf 	bl	8008dec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	f003 0307 	and.w	r3, r3, #7
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00d      	beq.n	800a454 <pvPortMalloc+0x17c>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43c:	b672      	cpsid	i
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	b662      	cpsie	i
 800a44c:	60fb      	str	r3, [r7, #12]
}
 800a44e:	bf00      	nop
 800a450:	bf00      	nop
 800a452:	e7fd      	b.n	800a450 <pvPortMalloc+0x178>
	return pvReturn;
 800a454:	69fb      	ldr	r3, [r7, #28]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3728      	adds	r7, #40	@ 0x28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	20005344 	.word	0x20005344
 800a464:	20005350 	.word	0x20005350
 800a468:	20005348 	.word	0x20005348
 800a46c:	2000533c 	.word	0x2000533c
 800a470:	2000534c 	.word	0x2000534c

0800a474 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d04e      	beq.n	800a524 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a486:	2308      	movs	r3, #8
 800a488:	425b      	negs	r3, r3
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	4413      	add	r3, r2
 800a48e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	4b24      	ldr	r3, [pc, #144]	@ (800a52c <vPortFree+0xb8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4013      	ands	r3, r2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10d      	bne.n	800a4be <vPortFree+0x4a>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	b672      	cpsid	i
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	b662      	cpsie	i
 800a4b6:	60fb      	str	r3, [r7, #12]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00d      	beq.n	800a4e2 <vPortFree+0x6e>
	__asm volatile
 800a4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ca:	b672      	cpsid	i
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	b662      	cpsie	i
 800a4da:	60bb      	str	r3, [r7, #8]
}
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
 800a4e0:	e7fd      	b.n	800a4de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	4b11      	ldr	r3, [pc, #68]	@ (800a52c <vPortFree+0xb8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d019      	beq.n	800a524 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d115      	bne.n	800a524 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a52c <vPortFree+0xb8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	43db      	mvns	r3, r3
 800a502:	401a      	ands	r2, r3
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a508:	f7fe fc62 	bl	8008dd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	4b07      	ldr	r3, [pc, #28]	@ (800a530 <vPortFree+0xbc>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4413      	add	r3, r2
 800a516:	4a06      	ldr	r2, [pc, #24]	@ (800a530 <vPortFree+0xbc>)
 800a518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a51a:	6938      	ldr	r0, [r7, #16]
 800a51c:	f000 f86c 	bl	800a5f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a520:	f7fe fc64 	bl	8008dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a524:	bf00      	nop
 800a526:	3718      	adds	r7, #24
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	20005350 	.word	0x20005350
 800a530:	20005348 	.word	0x20005348

0800a534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a53a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a53e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a540:	4b27      	ldr	r3, [pc, #156]	@ (800a5e0 <prvHeapInit+0xac>)
 800a542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00c      	beq.n	800a568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3307      	adds	r3, #7
 800a552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f023 0307 	bic.w	r3, r3, #7
 800a55a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	4a1f      	ldr	r2, [pc, #124]	@ (800a5e0 <prvHeapInit+0xac>)
 800a564:	4413      	add	r3, r2
 800a566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a56c:	4a1d      	ldr	r2, [pc, #116]	@ (800a5e4 <prvHeapInit+0xb0>)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a572:	4b1c      	ldr	r3, [pc, #112]	@ (800a5e4 <prvHeapInit+0xb0>)
 800a574:	2200      	movs	r2, #0
 800a576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	4413      	add	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a580:	2208      	movs	r2, #8
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	1a9b      	subs	r3, r3, r2
 800a586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f023 0307 	bic.w	r3, r3, #7
 800a58e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4a15      	ldr	r2, [pc, #84]	@ (800a5e8 <prvHeapInit+0xb4>)
 800a594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a596:	4b14      	ldr	r3, [pc, #80]	@ (800a5e8 <prvHeapInit+0xb4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2200      	movs	r2, #0
 800a59c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a59e:	4b12      	ldr	r3, [pc, #72]	@ (800a5e8 <prvHeapInit+0xb4>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	1ad2      	subs	r2, r2, r3
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e8 <prvHeapInit+0xb4>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5ec <prvHeapInit+0xb8>)
 800a5c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	4a09      	ldr	r2, [pc, #36]	@ (800a5f0 <prvHeapInit+0xbc>)
 800a5ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5cc:	4b09      	ldr	r3, [pc, #36]	@ (800a5f4 <prvHeapInit+0xc0>)
 800a5ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a5d2:	601a      	str	r2, [r3, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	2000173c 	.word	0x2000173c
 800a5e4:	2000533c 	.word	0x2000533c
 800a5e8:	20005344 	.word	0x20005344
 800a5ec:	2000534c 	.word	0x2000534c
 800a5f0:	20005348 	.word	0x20005348
 800a5f4:	20005350 	.word	0x20005350

0800a5f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a600:	4b28      	ldr	r3, [pc, #160]	@ (800a6a4 <prvInsertBlockIntoFreeList+0xac>)
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	e002      	b.n	800a60c <prvInsertBlockIntoFreeList+0x14>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	429a      	cmp	r2, r3
 800a614:	d8f7      	bhi.n	800a606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	4413      	add	r3, r2
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	429a      	cmp	r2, r3
 800a626:	d108      	bne.n	800a63a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	441a      	add	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	441a      	add	r2, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d118      	bne.n	800a680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	4b15      	ldr	r3, [pc, #84]	@ (800a6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d00d      	beq.n	800a676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	441a      	add	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	e008      	b.n	800a688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a676:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	e003      	b.n	800a688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d002      	beq.n	800a696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a696:	bf00      	nop
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	2000533c 	.word	0x2000533c
 800a6a8:	20005344 	.word	0x20005344

0800a6ac <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fc81 	bl	800afc0 <malloc>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00b      	beq.n	800a6f2 <ATC_Free+0x26>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d007      	beq.n	800a6f2 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fc72 	bl	800afd0 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	601a      	str	r2, [r3, #0]
  }
}
 800a6f2:	bf00      	nop
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	8a9b      	ldrh	r3, [r3, #20]
 800a710:	461a      	mov	r2, r3
 800a712:	2100      	movs	r1, #0
 800a714:	f000 fdf0 	bl	800b2f8 <memset>
}
 800a718:	bf00      	nop
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	88fa      	ldrh	r2, [r7, #6]
 800a736:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	88fa      	ldrh	r2, [r7, #6]
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	4618      	mov	r0, r3
 800a742:	f7fb fabd 	bl	8005cc0 <HAL_UART_Transmit_DMA>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d102      	bne.n	800a752 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 800a74c:	2301      	movs	r3, #1
 800a74e:	75fb      	strb	r3, [r7, #23]
 800a750:	e000      	b.n	800a754 <ATC_TxRaw+0x34>
      break;
 800a752:	bf00      	nop

  } while (0);

  return answer;
 800a754:	7dfb      	ldrb	r3, [r7, #23]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b082      	sub	sp, #8
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fb ff60 	bl	8006630 <HAL_UART_GetState>
 800a770:	4603      	mov	r3, r0
 800a772:	2b21      	cmp	r3, #33	@ 0x21
 800a774:	d007      	beq.n	800a786 <ATC_TxBusy+0x28>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fb ff58 	bl	8006630 <HAL_UART_GetState>
 800a780:	4603      	mov	r3, r0
 800a782:	2b23      	cmp	r3, #35	@ 0x23
 800a784:	d101      	bne.n	800a78a <ATC_TxBusy+0x2c>
  {
    return true;
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800a78a:	2300      	movs	r3, #0
  }
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 800a7a2:	f7f7 fdf1 	bl	8002388 <HAL_GetTick>
 800a7a6:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	f000 fbf9 	bl	800afa0 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fb ff3c 	bl	8006630 <HAL_UART_GetState>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b22      	cmp	r3, #34	@ 0x22
 800a7bc:	d007      	beq.n	800a7ce <ATC_TxWait+0x3a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fb ff34 	bl	8006630 <HAL_UART_GetState>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b20      	cmp	r3, #32
 800a7cc:	d102      	bne.n	800a7d4 <ATC_TxWait+0x40>
    {
      answer = true;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a7d2:	e01c      	b.n	800a80e <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fb ff29 	bl	8006630 <HAL_UART_GetState>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2be0      	cmp	r3, #224	@ 0xe0
 800a7e2:	d014      	beq.n	800a80e <ATC_TxWait+0x7a>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fb ff21 	bl	8006630 <HAL_UART_GetState>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2ba0      	cmp	r3, #160	@ 0xa0
 800a7f2:	d00c      	beq.n	800a80e <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800a7f4:	f7f7 fdc8 	bl	8002388 <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	429a      	cmp	r2, r3
 800a802:	d8d1      	bhi.n	800a7a8 <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fb fad5 	bl	8005db8 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	8b1b      	ldrh	r3, [r3, #24]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d024      	beq.n	800a872 <ATC_CheckEvents+0x5a>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	e019      	b.n	800a862 <ATC_CheckEvents+0x4a>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	4413      	add	r3, r2
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4619      	mov	r1, r3
 800a840:	f000 fd94 	bl	800b36c <strstr>
 800a844:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d007      	beq.n	800a85c <ATC_CheckEvents+0x44>
      {
        hAtc->psEvents[ev].EventCallback(found);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68da      	ldr	r2, [r3, #12]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	4413      	add	r3, r2
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	68b8      	ldr	r0, [r7, #8]
 800a85a:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d3e0      	bcc.n	800a82e <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff ff44 	bl	800a6fa <ATC_RxFlush>
  }
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	8b1b      	ldrh	r3, [r3, #24]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d023      	beq.n	800a8d8 <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800a890:	2300      	movs	r3, #0
 800a892:	81bb      	strh	r3, [r7, #12]
 800a894:	e01b      	b.n	800a8ce <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a89a:	89ba      	ldrh	r2, [r7, #12]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	320a      	adds	r2, #10
 800a8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	f000 fd61 	bl	800b36c <strstr>
 800a8aa:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00a      	beq.n	800a8c8 <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 800a8be:	89bb      	ldrh	r3, [r7, #12]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	73fb      	strb	r3, [r7, #15]
        break;
 800a8c6:	e007      	b.n	800a8d8 <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800a8c8:	89bb      	ldrh	r3, [r7, #12]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	81bb      	strh	r3, [r7, #12]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	8adb      	ldrh	r3, [r3, #22]
 800a8d2:	89ba      	ldrh	r2, [r7, #12]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d3de      	bcc.n	800a896 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fb feb2 	bl	8006658 <HAL_UART_GetError>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d01f      	beq.n	800a93a <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f04f 32ff 	mov.w	r2, #4294967295
 800a904:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fb fabc 	bl	8005e88 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6818      	ldr	r0, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	69d9      	ldr	r1, [r3, #28]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	8a9b      	ldrh	r3, [r3, #20]
 800a91c:	461a      	mov	r2, r3
 800a91e:	f7fc fd7a 	bl	8007416 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f022 0208 	bic.w	r2, r2, #8
 800a938:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fb fe76 	bl	8006630 <HAL_UART_GetState>
 800a944:	4603      	mov	r3, r0
 800a946:	2b22      	cmp	r3, #34	@ 0x22
 800a948:	d027      	beq.n	800a99a <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fb fe6e 	bl	8006630 <HAL_UART_GetState>
 800a954:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800a956:	2b23      	cmp	r3, #35	@ 0x23
 800a958:	d01f      	beq.n	800a99a <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f04f 32ff 	mov.w	r2, #4294967295
 800a964:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fb fa8c 	bl	8005e88 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	69d9      	ldr	r1, [r3, #28]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	8a9b      	ldrh	r3, [r3, #20]
 800a97c:	461a      	mov	r2, r3
 800a97e:	f7fc fd4a 	bl	8007416 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f022 0208 	bic.w	r2, r2, #8
 800a998:	601a      	str	r2, [r3, #0]
  }
}
 800a99a:	bf00      	nop
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b086      	sub	sp, #24
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	603b      	str	r3, [r7, #0]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d075      	beq.n	800aaa8 <ATC_Init+0x106>
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d072      	beq.n	800aaa8 <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800a9c2:	223c      	movs	r2, #60	@ 0x3c
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 fc96 	bl	800b2f8 <memset>
    if (pName != NULL)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d006      	beq.n	800a9e0 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	2207      	movs	r2, #7
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fcb3 	bl	800b346 <strncpy>
    }
    hAtc->hUart = hUart;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 800a9e6:	88fb      	ldrh	r3, [r7, #6]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff fe5f 	bl	800a6ac <ATC_Malloc>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d04e      	beq.n	800aa9a <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	88fa      	ldrh	r2, [r7, #6]
 800aa02:	2100      	movs	r1, #0
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 fc77 	bl	800b2f8 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 800aa0a:	88fb      	ldrh	r3, [r7, #6]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff fe4d 	bl	800a6ac <ATC_Malloc>
 800aa12:	4602      	mov	r2, r0
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d03e      	beq.n	800aa9e <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	88fa      	ldrh	r2, [r7, #6]
 800aa26:	2100      	movs	r1, #0
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 fc65 	bl	800b2f8 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 800aa2e:	88fb      	ldrh	r3, [r7, #6]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff fe3b 	bl	800a6ac <ATC_Malloc>
 800aa36:	4602      	mov	r2, r0
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d02e      	beq.n	800aaa2 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa48:	88fa      	ldrh	r2, [r7, #6]
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 fc53 	bl	800b2f8 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	88fa      	ldrh	r2, [r7, #6]
 800aa56:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa62:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6818      	ldr	r0, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	69d9      	ldr	r1, [r3, #28]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	8a9b      	ldrh	r3, [r3, #20]
 800aa70:	461a      	mov	r2, r3
 800aa72:	f7fc fcd0 	bl	8007416 <HAL_UARTEx_ReceiveToIdle_DMA>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d114      	bne.n	800aaa6 <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f022 0208 	bic.w	r2, r2, #8
 800aa92:	601a      	str	r2, [r3, #0]
    answer = true;
 800aa94:	2301      	movs	r3, #1
 800aa96:	75fb      	strb	r3, [r7, #23]
 800aa98:	e006      	b.n	800aaa8 <ATC_Init+0x106>
      break;
 800aa9a:	bf00      	nop
 800aa9c:	e004      	b.n	800aaa8 <ATC_Init+0x106>
      break;
 800aa9e:	bf00      	nop
 800aaa0:	e002      	b.n	800aaa8 <ATC_Init+0x106>
      break;
 800aaa2:	bf00      	nop
 800aaa4:	e000      	b.n	800aaa8 <ATC_Init+0x106>
      break;
 800aaa6:	bf00      	nop

  } while (0);

  if (answer == false)
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	f083 0301 	eor.w	r3, r3, #1
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d016      	beq.n	800aae2 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d004      	beq.n	800aac6 <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	331c      	adds	r3, #28
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff fe03 	bl	800a6cc <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3324      	adds	r3, #36	@ 0x24
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff fdfa 	bl	800a6cc <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800aad8:	223c      	movs	r2, #60	@ 0x3c
 800aada:	2100      	movs	r1, #0
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 fc0b 	bl	800b2f8 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7ff fef4 	bl	800a8e2 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff fe8c 	bl	800a818 <ATC_CheckEvents>
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800ab08:	b590      	push	{r4, r7, lr}
 800ab0a:	b08d      	sub	sp, #52	@ 0x34
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 800ab16:	2300      	movs	r3, #0
 800ab18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f7ff fe1f 	bl	800a75e <ATC_TxBusy>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 800ab26:	f06f 0303 	mvn.w	r3, #3
 800ab2a:	e0c8      	b.n	800acbe <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 800ab2c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800ab30:	2b05      	cmp	r3, #5
 800ab32:	d902      	bls.n	800ab3a <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 800ab34:	f06f 0304 	mvn.w	r3, #4
 800ab38:	e0c1      	b.n	800acbe <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f7ff fed1 	bl	800a8e2 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800ab40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ab44:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800ab46:	2300      	movs	r3, #0
 800ab48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab4a:	e04b      	b.n	800abe4 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	1d1a      	adds	r2, r3, #4
 800ab50:	617a      	str	r2, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800ab56:	69b8      	ldr	r0, [r7, #24]
 800ab58:	f7f5 fb7c 	bl	8000254 <strlen>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	3301      	adds	r3, #1
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7ff fda3 	bl	800a6ac <ATC_Malloc>
 800ab66:	4601      	mov	r1, r0
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab6c:	320a      	adds	r2, #10
 800ab6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab76:	320a      	adds	r2, #10
 800ab78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d119      	bne.n	800abb4 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 800ab80:	2300      	movs	r3, #0
 800ab82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ab86:	e00d      	b.n	800aba4 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800ab88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab8c:	330a      	adds	r3, #10
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	4413      	add	r3, r2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7ff fd99 	bl	800a6cc <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800ab9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab9e:	3301      	adds	r3, #1
 800aba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abaa:	429a      	cmp	r2, r3
 800abac:	dcec      	bgt.n	800ab88 <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 800abae:	f06f 0302 	mvn.w	r3, #2
 800abb2:	e084      	b.n	800acbe <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abb8:	320a      	adds	r2, #10
 800abba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbe:	69b9      	ldr	r1, [r7, #24]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fc25 	bl	800b410 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abca:	320a      	adds	r2, #10
 800abcc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800abd0:	69b8      	ldr	r0, [r7, #24]
 800abd2:	f7f5 fb3f 	bl	8000254 <strlen>
 800abd6:	4603      	mov	r3, r0
 800abd8:	4423      	add	r3, r4
 800abda:	2200      	movs	r2, #0
 800abdc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800abde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe0:	3301      	adds	r3, #1
 800abe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abe4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800abe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abea:	429a      	cmp	r2, r3
 800abec:	dbae      	blt.n	800ab4c <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff fd83 	bl	800a6fa <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 800abf4:	68b8      	ldr	r0, [r7, #8]
 800abf6:	f7f5 fb2d 	bl	8000254 <strlen>
 800abfa:	4603      	mov	r3, r0
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	461a      	mov	r2, r3
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f7ff fd8c 	bl	800a720 <ATC_TxRaw>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f083 0301 	eor.w	r3, r3, #1
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295
 800ac18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800ac1a:	e00d      	b.n	800ac38 <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800ac1c:	6879      	ldr	r1, [r7, #4]
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f7ff fdb8 	bl	800a794 <ATC_TxWait>
 800ac24:	4603      	mov	r3, r0
 800ac26:	f083 0301 	eor.w	r3, r3, #1
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 800ac30:	f06f 0301 	mvn.w	r3, #1
 800ac34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800ac36:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 800ac38:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d022      	beq.n	800ac86 <ATC_SendReceive+0x17e>
 800ac40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d11f      	bne.n	800ac86 <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 800ac46:	f7f7 fb9f 	bl	8002388 <HAL_GetTick>
 800ac4a:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800ac4c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800ac56:	e00e      	b.n	800ac76 <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 800ac58:	2001      	movs	r0, #1
 800ac5a:	f000 f9a1 	bl	800afa0 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f7ff fe0a 	bl	800a87a <ATC_CheckResponse>
 800ac66:	4603      	mov	r3, r0
 800ac68:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800ac6a:	7ffb      	ldrb	r3, [r7, #31]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 800ac70:	7ffb      	ldrb	r3, [r7, #31]
 800ac72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ac74:	e007      	b.n	800ac86 <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 800ac76:	f7f7 fb87 	bl	8002388 <HAL_GetTick>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	6a3b      	ldr	r3, [r7, #32]
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d8e8      	bhi.n	800ac58 <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ac92:	e00d      	b.n	800acb0 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800ac94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac98:	330a      	adds	r3, #10
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	4413      	add	r3, r2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fd13 	bl	800a6cc <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800aca6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800acaa:	3301      	adds	r3, #1
 800acac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800acb0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800acb4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800acb8:	429a      	cmp	r2, r3
 800acba:	d3eb      	bcc.n	800ac94 <ATC_SendReceive+0x18c>
  }
  return answer;
 800acbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3734      	adds	r7, #52	@ 0x34
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd90      	pop	{r4, r7, pc}

0800acc6 <ATC_Send>:
  * @param  TxTimeout: Timeout for sending the command.
  * @param  ... , it can use like printf format
  * @retval Response true or false.
  */
bool ATC_Send(ATC_HandleTypeDef *hAtc, const char *pCommand, uint32_t TxTimeout, ...)
{
 800acc6:	b40c      	push	{r2, r3}
 800acc8:	b590      	push	{r4, r7, lr}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800acd2:	2300      	movs	r3, #0
 800acd4:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (ATC_TxBusy(hAtc) == true)
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff fd41 	bl	800a75e <ATC_TxBusy>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d13c      	bne.n	800ad5c <ATC_Send+0x96>
    {
      break;
    }
    ATC_CheckErrors(hAtc);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff fdfd 	bl	800a8e2 <ATC_CheckErrors>
    va_list args;
    va_start(args, TxTimeout);
 800ace8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800acec:	60fb      	str	r3, [r7, #12]
    int len = vsnprintf((char*)hAtc->pTxBuff, hAtc->Size, pCommand, args);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a18      	ldr	r0, [r3, #32]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	8a9b      	ldrh	r3, [r3, #20]
 800acf6:	4619      	mov	r1, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	f000 faee 	bl	800b2dc <vsniprintf>
 800ad00:	6138      	str	r0, [r7, #16]
    va_end(args);
    if ((len < 0) || (len > hAtc->Size))
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	db2e      	blt.n	800ad66 <ATC_Send+0xa0>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	8a9b      	ldrh	r3, [r3, #20]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	4293      	cmp	r3, r2
 800ad12:	dc28      	bgt.n	800ad66 <ATC_Send+0xa0>
    {
      break;
    }
    ATC_RxFlush(hAtc);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff fcf0 	bl	800a6fa <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)hAtc->pTxBuff, strlen((char*)hAtc->pTxBuff)) == false)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1c      	ldr	r4, [r3, #32]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7f5 fa96 	bl	8000254 <strlen>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	4621      	mov	r1, r4
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff fcf5 	bl	800a720 <ATC_TxRaw>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f083 0301 	eor.w	r3, r3, #1
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10e      	bne.n	800ad60 <ATC_Send+0x9a>
    {
      break;
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800ad42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f7ff fd25 	bl	800a794 <ATC_TxWait>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	f083 0301 	eor.w	r3, r3, #1
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <ATC_Send+0x9e>
    {
      break;
    }
    answer = true;
 800ad56:	2301      	movs	r3, #1
 800ad58:	75fb      	strb	r3, [r7, #23]
 800ad5a:	e004      	b.n	800ad66 <ATC_Send+0xa0>
      break;
 800ad5c:	bf00      	nop
 800ad5e:	e002      	b.n	800ad66 <ATC_Send+0xa0>
      break;
 800ad60:	bf00      	nop
 800ad62:	e000      	b.n	800ad66 <ATC_Send+0xa0>
      break;
 800ad64:	bf00      	nop

  } while (0);

  return answer;
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	371c      	adds	r7, #28
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ad72:	b002      	add	sp, #8
 800ad74:	4770      	bx	lr

0800ad76 <ATC_Receive>:
  * @param  Items: Number of searching strings
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_Receive(ATC_HandleTypeDef *hAtc, char **ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800ad76:	b408      	push	{r3}
 800ad78:	b590      	push	{r4, r7, lr}
 800ad7a:	b08c      	sub	sp, #48	@ 0x30
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  int answer = ATC_RESP_NOT_FOUND;
 800ad84:	2300      	movs	r3, #0
 800ad86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (Items > ATC_RESP_MAX)
 800ad88:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ad8c:	2b05      	cmp	r3, #5
 800ad8e:	d902      	bls.n	800ad96 <ATC_Receive+0x20>
  {
    return ATC_RESP_ITEMS;
 800ad90:	f06f 0304 	mvn.w	r3, #4
 800ad94:	e099      	b.n	800aeca <ATC_Receive+0x154>
  }
  ATC_CheckErrors(hAtc);
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f7ff fda3 	bl	800a8e2 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800ad9c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ada0:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800ada2:	2300      	movs	r3, #0
 800ada4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ada6:	e04b      	b.n	800ae40 <ATC_Receive+0xca>
  {
    char *arg = va_arg(args, char*);
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	1d1a      	adds	r2, r3, #4
 800adac:	617a      	str	r2, [r7, #20]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800adb2:	69b8      	ldr	r0, [r7, #24]
 800adb4:	f7f5 fa4e 	bl	8000254 <strlen>
 800adb8:	4603      	mov	r3, r0
 800adba:	3301      	adds	r3, #1
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fc75 	bl	800a6ac <ATC_Malloc>
 800adc2:	4601      	mov	r1, r0
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adc8:	320a      	adds	r2, #10
 800adca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800add2:	320a      	adds	r2, #10
 800add4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d119      	bne.n	800ae10 <ATC_Receive+0x9a>
    {
      for (uint8_t j = 0; j < i; j++)
 800addc:	2300      	movs	r3, #0
 800adde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ade2:	e00d      	b.n	800ae00 <ATC_Receive+0x8a>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800ade4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ade8:	330a      	adds	r3, #10
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff fc6b 	bl	800a6cc <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800adf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adfa:	3301      	adds	r3, #1
 800adfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae06:	429a      	cmp	r2, r3
 800ae08:	dcec      	bgt.n	800ade4 <ATC_Receive+0x6e>
      }
      return ATC_RESP_MEM_ERROR;
 800ae0a:	f06f 0302 	mvn.w	r3, #2
 800ae0e:	e05c      	b.n	800aeca <ATC_Receive+0x154>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae14:	320a      	adds	r2, #10
 800ae16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1a:	69b9      	ldr	r1, [r7, #24]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 faf7 	bl	800b410 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae26:	320a      	adds	r2, #10
 800ae28:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800ae2c:	69b8      	ldr	r0, [r7, #24]
 800ae2e:	f7f5 fa11 	bl	8000254 <strlen>
 800ae32:	4603      	mov	r3, r0
 800ae34:	4423      	add	r3, r4
 800ae36:	2200      	movs	r2, #0
 800ae38:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800ae3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae40:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ae44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae46:	429a      	cmp	r2, r3
 800ae48:	dbae      	blt.n	800ada8 <ATC_Receive+0x32>
  }
  va_end(args);

  if (Items > 0)
 800ae4a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d01f      	beq.n	800ae92 <ATC_Receive+0x11c>
  {
    uint32_t start_time = HAL_GetTick();
 800ae52:	f7f7 fa99 	bl	8002388 <HAL_GetTick>
 800ae56:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800ae58:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800ae62:	e00e      	b.n	800ae82 <ATC_Receive+0x10c>
    {
      ATC_Delay(1);
 800ae64:	2001      	movs	r0, #1
 800ae66:	f000 f89b 	bl	800afa0 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7ff fd04 	bl	800a87a <ATC_CheckResponse>
 800ae72:	4603      	mov	r3, r0
 800ae74:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800ae76:	7ffb      	ldrb	r3, [r7, #31]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <ATC_Receive+0x10c>
      {
        answer = found_index;
 800ae7c:	7ffb      	ldrb	r3, [r7, #31]
 800ae7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ae80:	e007      	b.n	800ae92 <ATC_Receive+0x11c>
    while (HAL_GetTick() - start_time < RxTimeout)
 800ae82:	f7f7 fa81 	bl	8002388 <HAL_GetTick>
 800ae86:	4602      	mov	r2, r0
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d8e8      	bhi.n	800ae64 <ATC_Receive+0xee>
      }
    }
  }
  hAtc->RespCount = 0;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ae9e:	e00d      	b.n	800aebc <ATC_Receive+0x146>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800aea0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aea4:	330a      	adds	r3, #10
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	4413      	add	r3, r2
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7ff fc0d 	bl	800a6cc <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800aeb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aebc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aec0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d3eb      	bcc.n	800aea0 <ATC_Receive+0x12a>
  }
  return answer;
 800aec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3730      	adds	r7, #48	@ 0x30
 800aece:	46bd      	mov	sp, r7
 800aed0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aed4:	b001      	add	sp, #4
 800aed6:	4770      	bx	lr

0800aed8 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 800aee4:	887a      	ldrh	r2, [r7, #2]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	8a9b      	ldrh	r3, [r3, #20]
 800aeea:	4619      	mov	r1, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	8b1b      	ldrh	r3, [r3, #24]
 800aef0:	1acb      	subs	r3, r1, r3
 800aef2:	429a      	cmp	r2, r3
 800aef4:	dd05      	ble.n	800af02 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	8a9a      	ldrh	r2, [r3, #20]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	8b1b      	ldrh	r3, [r3, #24]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	8b12      	ldrh	r2, [r2, #24]
 800af0a:	1898      	adds	r0, r3, r2
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	887a      	ldrh	r2, [r7, #2]
 800af12:	4619      	mov	r1, r3
 800af14:	f000 fa84 	bl	800b420 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	8b1a      	ldrh	r2, [r3, #24]
 800af1c:	887b      	ldrh	r3, [r7, #2]
 800af1e:	4413      	add	r3, r2
 800af20:	b29a      	uxth	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6818      	ldr	r0, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	69d9      	ldr	r1, [r3, #28]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	8a9b      	ldrh	r3, [r3, #20]
 800af32:	461a      	mov	r2, r3
 800af34:	f7fc fa6f 	bl	8007416 <HAL_UARTEx_ReceiveToIdle_DMA>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10c      	bne.n	800af58 <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f022 0208 	bic.w	r2, r2, #8
 800af54:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 800af56:	e01f      	b.n	800af98 <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295
 800af62:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fa ff8d 	bl	8005e88 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	69d9      	ldr	r1, [r3, #28]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	8a9b      	ldrh	r3, [r3, #20]
 800af7a:	461a      	mov	r2, r3
 800af7c:	f7fc fa4b 	bl	8007416 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f022 0208 	bic.w	r2, r2, #8
 800af96:	601a      	str	r2, [r3, #0]
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7f7 f9f9 	bl	80023a0 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800afae:	bf00      	nop
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <atoi>:
 800afb6:	220a      	movs	r2, #10
 800afb8:	2100      	movs	r1, #0
 800afba:	f000 b939 	b.w	800b230 <strtol>
	...

0800afc0 <malloc>:
 800afc0:	4b02      	ldr	r3, [pc, #8]	@ (800afcc <malloc+0xc>)
 800afc2:	4601      	mov	r1, r0
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	f000 b82d 	b.w	800b024 <_malloc_r>
 800afca:	bf00      	nop
 800afcc:	20000010 	.word	0x20000010

0800afd0 <free>:
 800afd0:	4b02      	ldr	r3, [pc, #8]	@ (800afdc <free+0xc>)
 800afd2:	4601      	mov	r1, r0
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	f000 ba31 	b.w	800b43c <_free_r>
 800afda:	bf00      	nop
 800afdc:	20000010 	.word	0x20000010

0800afe0 <sbrk_aligned>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	4e0f      	ldr	r6, [pc, #60]	@ (800b020 <sbrk_aligned+0x40>)
 800afe4:	460c      	mov	r4, r1
 800afe6:	6831      	ldr	r1, [r6, #0]
 800afe8:	4605      	mov	r5, r0
 800afea:	b911      	cbnz	r1, 800aff2 <sbrk_aligned+0x12>
 800afec:	f000 f9d4 	bl	800b398 <_sbrk_r>
 800aff0:	6030      	str	r0, [r6, #0]
 800aff2:	4621      	mov	r1, r4
 800aff4:	4628      	mov	r0, r5
 800aff6:	f000 f9cf 	bl	800b398 <_sbrk_r>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d103      	bne.n	800b006 <sbrk_aligned+0x26>
 800affe:	f04f 34ff 	mov.w	r4, #4294967295
 800b002:	4620      	mov	r0, r4
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	1cc4      	adds	r4, r0, #3
 800b008:	f024 0403 	bic.w	r4, r4, #3
 800b00c:	42a0      	cmp	r0, r4
 800b00e:	d0f8      	beq.n	800b002 <sbrk_aligned+0x22>
 800b010:	1a21      	subs	r1, r4, r0
 800b012:	4628      	mov	r0, r5
 800b014:	f000 f9c0 	bl	800b398 <_sbrk_r>
 800b018:	3001      	adds	r0, #1
 800b01a:	d1f2      	bne.n	800b002 <sbrk_aligned+0x22>
 800b01c:	e7ef      	b.n	800affe <sbrk_aligned+0x1e>
 800b01e:	bf00      	nop
 800b020:	20005354 	.word	0x20005354

0800b024 <_malloc_r>:
 800b024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b028:	1ccd      	adds	r5, r1, #3
 800b02a:	f025 0503 	bic.w	r5, r5, #3
 800b02e:	3508      	adds	r5, #8
 800b030:	2d0c      	cmp	r5, #12
 800b032:	bf38      	it	cc
 800b034:	250c      	movcc	r5, #12
 800b036:	2d00      	cmp	r5, #0
 800b038:	4606      	mov	r6, r0
 800b03a:	db01      	blt.n	800b040 <_malloc_r+0x1c>
 800b03c:	42a9      	cmp	r1, r5
 800b03e:	d904      	bls.n	800b04a <_malloc_r+0x26>
 800b040:	230c      	movs	r3, #12
 800b042:	6033      	str	r3, [r6, #0]
 800b044:	2000      	movs	r0, #0
 800b046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b04a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b120 <_malloc_r+0xfc>
 800b04e:	f000 f869 	bl	800b124 <__malloc_lock>
 800b052:	f8d8 3000 	ldr.w	r3, [r8]
 800b056:	461c      	mov	r4, r3
 800b058:	bb44      	cbnz	r4, 800b0ac <_malloc_r+0x88>
 800b05a:	4629      	mov	r1, r5
 800b05c:	4630      	mov	r0, r6
 800b05e:	f7ff ffbf 	bl	800afe0 <sbrk_aligned>
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	4604      	mov	r4, r0
 800b066:	d158      	bne.n	800b11a <_malloc_r+0xf6>
 800b068:	f8d8 4000 	ldr.w	r4, [r8]
 800b06c:	4627      	mov	r7, r4
 800b06e:	2f00      	cmp	r7, #0
 800b070:	d143      	bne.n	800b0fa <_malloc_r+0xd6>
 800b072:	2c00      	cmp	r4, #0
 800b074:	d04b      	beq.n	800b10e <_malloc_r+0xea>
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	4639      	mov	r1, r7
 800b07a:	4630      	mov	r0, r6
 800b07c:	eb04 0903 	add.w	r9, r4, r3
 800b080:	f000 f98a 	bl	800b398 <_sbrk_r>
 800b084:	4581      	cmp	r9, r0
 800b086:	d142      	bne.n	800b10e <_malloc_r+0xea>
 800b088:	6821      	ldr	r1, [r4, #0]
 800b08a:	1a6d      	subs	r5, r5, r1
 800b08c:	4629      	mov	r1, r5
 800b08e:	4630      	mov	r0, r6
 800b090:	f7ff ffa6 	bl	800afe0 <sbrk_aligned>
 800b094:	3001      	adds	r0, #1
 800b096:	d03a      	beq.n	800b10e <_malloc_r+0xea>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	442b      	add	r3, r5
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	f8d8 3000 	ldr.w	r3, [r8]
 800b0a2:	685a      	ldr	r2, [r3, #4]
 800b0a4:	bb62      	cbnz	r2, 800b100 <_malloc_r+0xdc>
 800b0a6:	f8c8 7000 	str.w	r7, [r8]
 800b0aa:	e00f      	b.n	800b0cc <_malloc_r+0xa8>
 800b0ac:	6822      	ldr	r2, [r4, #0]
 800b0ae:	1b52      	subs	r2, r2, r5
 800b0b0:	d420      	bmi.n	800b0f4 <_malloc_r+0xd0>
 800b0b2:	2a0b      	cmp	r2, #11
 800b0b4:	d917      	bls.n	800b0e6 <_malloc_r+0xc2>
 800b0b6:	1961      	adds	r1, r4, r5
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	6025      	str	r5, [r4, #0]
 800b0bc:	bf18      	it	ne
 800b0be:	6059      	strne	r1, [r3, #4]
 800b0c0:	6863      	ldr	r3, [r4, #4]
 800b0c2:	bf08      	it	eq
 800b0c4:	f8c8 1000 	streq.w	r1, [r8]
 800b0c8:	5162      	str	r2, [r4, r5]
 800b0ca:	604b      	str	r3, [r1, #4]
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f000 f82f 	bl	800b130 <__malloc_unlock>
 800b0d2:	f104 000b 	add.w	r0, r4, #11
 800b0d6:	1d23      	adds	r3, r4, #4
 800b0d8:	f020 0007 	bic.w	r0, r0, #7
 800b0dc:	1ac2      	subs	r2, r0, r3
 800b0de:	bf1c      	itt	ne
 800b0e0:	1a1b      	subne	r3, r3, r0
 800b0e2:	50a3      	strne	r3, [r4, r2]
 800b0e4:	e7af      	b.n	800b046 <_malloc_r+0x22>
 800b0e6:	6862      	ldr	r2, [r4, #4]
 800b0e8:	42a3      	cmp	r3, r4
 800b0ea:	bf0c      	ite	eq
 800b0ec:	f8c8 2000 	streq.w	r2, [r8]
 800b0f0:	605a      	strne	r2, [r3, #4]
 800b0f2:	e7eb      	b.n	800b0cc <_malloc_r+0xa8>
 800b0f4:	4623      	mov	r3, r4
 800b0f6:	6864      	ldr	r4, [r4, #4]
 800b0f8:	e7ae      	b.n	800b058 <_malloc_r+0x34>
 800b0fa:	463c      	mov	r4, r7
 800b0fc:	687f      	ldr	r7, [r7, #4]
 800b0fe:	e7b6      	b.n	800b06e <_malloc_r+0x4a>
 800b100:	461a      	mov	r2, r3
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	42a3      	cmp	r3, r4
 800b106:	d1fb      	bne.n	800b100 <_malloc_r+0xdc>
 800b108:	2300      	movs	r3, #0
 800b10a:	6053      	str	r3, [r2, #4]
 800b10c:	e7de      	b.n	800b0cc <_malloc_r+0xa8>
 800b10e:	230c      	movs	r3, #12
 800b110:	6033      	str	r3, [r6, #0]
 800b112:	4630      	mov	r0, r6
 800b114:	f000 f80c 	bl	800b130 <__malloc_unlock>
 800b118:	e794      	b.n	800b044 <_malloc_r+0x20>
 800b11a:	6005      	str	r5, [r0, #0]
 800b11c:	e7d6      	b.n	800b0cc <_malloc_r+0xa8>
 800b11e:	bf00      	nop
 800b120:	20005358 	.word	0x20005358

0800b124 <__malloc_lock>:
 800b124:	4801      	ldr	r0, [pc, #4]	@ (800b12c <__malloc_lock+0x8>)
 800b126:	f000 b971 	b.w	800b40c <__retarget_lock_acquire_recursive>
 800b12a:	bf00      	nop
 800b12c:	20005498 	.word	0x20005498

0800b130 <__malloc_unlock>:
 800b130:	4801      	ldr	r0, [pc, #4]	@ (800b138 <__malloc_unlock+0x8>)
 800b132:	f000 b96c 	b.w	800b40e <__retarget_lock_release_recursive>
 800b136:	bf00      	nop
 800b138:	20005498 	.word	0x20005498

0800b13c <_strtol_l.constprop.0>:
 800b13c:	2b24      	cmp	r3, #36	@ 0x24
 800b13e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b142:	4686      	mov	lr, r0
 800b144:	4690      	mov	r8, r2
 800b146:	d801      	bhi.n	800b14c <_strtol_l.constprop.0+0x10>
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d106      	bne.n	800b15a <_strtol_l.constprop.0+0x1e>
 800b14c:	f000 f934 	bl	800b3b8 <__errno>
 800b150:	2316      	movs	r3, #22
 800b152:	6003      	str	r3, [r0, #0]
 800b154:	2000      	movs	r0, #0
 800b156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15a:	4834      	ldr	r0, [pc, #208]	@ (800b22c <_strtol_l.constprop.0+0xf0>)
 800b15c:	460d      	mov	r5, r1
 800b15e:	462a      	mov	r2, r5
 800b160:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b164:	5d06      	ldrb	r6, [r0, r4]
 800b166:	f016 0608 	ands.w	r6, r6, #8
 800b16a:	d1f8      	bne.n	800b15e <_strtol_l.constprop.0+0x22>
 800b16c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b16e:	d12d      	bne.n	800b1cc <_strtol_l.constprop.0+0x90>
 800b170:	782c      	ldrb	r4, [r5, #0]
 800b172:	2601      	movs	r6, #1
 800b174:	1c95      	adds	r5, r2, #2
 800b176:	f033 0210 	bics.w	r2, r3, #16
 800b17a:	d109      	bne.n	800b190 <_strtol_l.constprop.0+0x54>
 800b17c:	2c30      	cmp	r4, #48	@ 0x30
 800b17e:	d12a      	bne.n	800b1d6 <_strtol_l.constprop.0+0x9a>
 800b180:	782a      	ldrb	r2, [r5, #0]
 800b182:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b186:	2a58      	cmp	r2, #88	@ 0x58
 800b188:	d125      	bne.n	800b1d6 <_strtol_l.constprop.0+0x9a>
 800b18a:	786c      	ldrb	r4, [r5, #1]
 800b18c:	2310      	movs	r3, #16
 800b18e:	3502      	adds	r5, #2
 800b190:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b194:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b198:	2200      	movs	r2, #0
 800b19a:	fbbc f9f3 	udiv	r9, ip, r3
 800b19e:	4610      	mov	r0, r2
 800b1a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b1a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b1a8:	2f09      	cmp	r7, #9
 800b1aa:	d81b      	bhi.n	800b1e4 <_strtol_l.constprop.0+0xa8>
 800b1ac:	463c      	mov	r4, r7
 800b1ae:	42a3      	cmp	r3, r4
 800b1b0:	dd27      	ble.n	800b202 <_strtol_l.constprop.0+0xc6>
 800b1b2:	1c57      	adds	r7, r2, #1
 800b1b4:	d007      	beq.n	800b1c6 <_strtol_l.constprop.0+0x8a>
 800b1b6:	4581      	cmp	r9, r0
 800b1b8:	d320      	bcc.n	800b1fc <_strtol_l.constprop.0+0xc0>
 800b1ba:	d101      	bne.n	800b1c0 <_strtol_l.constprop.0+0x84>
 800b1bc:	45a2      	cmp	sl, r4
 800b1be:	db1d      	blt.n	800b1fc <_strtol_l.constprop.0+0xc0>
 800b1c0:	fb00 4003 	mla	r0, r0, r3, r4
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1ca:	e7eb      	b.n	800b1a4 <_strtol_l.constprop.0+0x68>
 800b1cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b1ce:	bf04      	itt	eq
 800b1d0:	782c      	ldrbeq	r4, [r5, #0]
 800b1d2:	1c95      	addeq	r5, r2, #2
 800b1d4:	e7cf      	b.n	800b176 <_strtol_l.constprop.0+0x3a>
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1da      	bne.n	800b190 <_strtol_l.constprop.0+0x54>
 800b1da:	2c30      	cmp	r4, #48	@ 0x30
 800b1dc:	bf0c      	ite	eq
 800b1de:	2308      	moveq	r3, #8
 800b1e0:	230a      	movne	r3, #10
 800b1e2:	e7d5      	b.n	800b190 <_strtol_l.constprop.0+0x54>
 800b1e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b1e8:	2f19      	cmp	r7, #25
 800b1ea:	d801      	bhi.n	800b1f0 <_strtol_l.constprop.0+0xb4>
 800b1ec:	3c37      	subs	r4, #55	@ 0x37
 800b1ee:	e7de      	b.n	800b1ae <_strtol_l.constprop.0+0x72>
 800b1f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b1f4:	2f19      	cmp	r7, #25
 800b1f6:	d804      	bhi.n	800b202 <_strtol_l.constprop.0+0xc6>
 800b1f8:	3c57      	subs	r4, #87	@ 0x57
 800b1fa:	e7d8      	b.n	800b1ae <_strtol_l.constprop.0+0x72>
 800b1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b200:	e7e1      	b.n	800b1c6 <_strtol_l.constprop.0+0x8a>
 800b202:	1c53      	adds	r3, r2, #1
 800b204:	d108      	bne.n	800b218 <_strtol_l.constprop.0+0xdc>
 800b206:	2322      	movs	r3, #34	@ 0x22
 800b208:	f8ce 3000 	str.w	r3, [lr]
 800b20c:	4660      	mov	r0, ip
 800b20e:	f1b8 0f00 	cmp.w	r8, #0
 800b212:	d0a0      	beq.n	800b156 <_strtol_l.constprop.0+0x1a>
 800b214:	1e69      	subs	r1, r5, #1
 800b216:	e006      	b.n	800b226 <_strtol_l.constprop.0+0xea>
 800b218:	b106      	cbz	r6, 800b21c <_strtol_l.constprop.0+0xe0>
 800b21a:	4240      	negs	r0, r0
 800b21c:	f1b8 0f00 	cmp.w	r8, #0
 800b220:	d099      	beq.n	800b156 <_strtol_l.constprop.0+0x1a>
 800b222:	2a00      	cmp	r2, #0
 800b224:	d1f6      	bne.n	800b214 <_strtol_l.constprop.0+0xd8>
 800b226:	f8c8 1000 	str.w	r1, [r8]
 800b22a:	e794      	b.n	800b156 <_strtol_l.constprop.0+0x1a>
 800b22c:	0800bda5 	.word	0x0800bda5

0800b230 <strtol>:
 800b230:	4613      	mov	r3, r2
 800b232:	460a      	mov	r2, r1
 800b234:	4601      	mov	r1, r0
 800b236:	4802      	ldr	r0, [pc, #8]	@ (800b240 <strtol+0x10>)
 800b238:	6800      	ldr	r0, [r0, #0]
 800b23a:	f7ff bf7f 	b.w	800b13c <_strtol_l.constprop.0>
 800b23e:	bf00      	nop
 800b240:	20000010 	.word	0x20000010

0800b244 <siprintf>:
 800b244:	b40e      	push	{r1, r2, r3}
 800b246:	b500      	push	{lr}
 800b248:	b09c      	sub	sp, #112	@ 0x70
 800b24a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b24c:	9002      	str	r0, [sp, #8]
 800b24e:	9006      	str	r0, [sp, #24]
 800b250:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b254:	4809      	ldr	r0, [pc, #36]	@ (800b27c <siprintf+0x38>)
 800b256:	9107      	str	r1, [sp, #28]
 800b258:	9104      	str	r1, [sp, #16]
 800b25a:	4909      	ldr	r1, [pc, #36]	@ (800b280 <siprintf+0x3c>)
 800b25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b260:	9105      	str	r1, [sp, #20]
 800b262:	6800      	ldr	r0, [r0, #0]
 800b264:	9301      	str	r3, [sp, #4]
 800b266:	a902      	add	r1, sp, #8
 800b268:	f000 f98e 	bl	800b588 <_svfiprintf_r>
 800b26c:	9b02      	ldr	r3, [sp, #8]
 800b26e:	2200      	movs	r2, #0
 800b270:	701a      	strb	r2, [r3, #0]
 800b272:	b01c      	add	sp, #112	@ 0x70
 800b274:	f85d eb04 	ldr.w	lr, [sp], #4
 800b278:	b003      	add	sp, #12
 800b27a:	4770      	bx	lr
 800b27c:	20000010 	.word	0x20000010
 800b280:	ffff0208 	.word	0xffff0208

0800b284 <_vsniprintf_r>:
 800b284:	b530      	push	{r4, r5, lr}
 800b286:	4614      	mov	r4, r2
 800b288:	2c00      	cmp	r4, #0
 800b28a:	b09b      	sub	sp, #108	@ 0x6c
 800b28c:	4605      	mov	r5, r0
 800b28e:	461a      	mov	r2, r3
 800b290:	da05      	bge.n	800b29e <_vsniprintf_r+0x1a>
 800b292:	238b      	movs	r3, #139	@ 0x8b
 800b294:	6003      	str	r3, [r0, #0]
 800b296:	f04f 30ff 	mov.w	r0, #4294967295
 800b29a:	b01b      	add	sp, #108	@ 0x6c
 800b29c:	bd30      	pop	{r4, r5, pc}
 800b29e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b2a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2a6:	bf14      	ite	ne
 800b2a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2ac:	4623      	moveq	r3, r4
 800b2ae:	9302      	str	r3, [sp, #8]
 800b2b0:	9305      	str	r3, [sp, #20]
 800b2b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2b6:	9100      	str	r1, [sp, #0]
 800b2b8:	9104      	str	r1, [sp, #16]
 800b2ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b2be:	4669      	mov	r1, sp
 800b2c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b2c2:	f000 f961 	bl	800b588 <_svfiprintf_r>
 800b2c6:	1c43      	adds	r3, r0, #1
 800b2c8:	bfbc      	itt	lt
 800b2ca:	238b      	movlt	r3, #139	@ 0x8b
 800b2cc:	602b      	strlt	r3, [r5, #0]
 800b2ce:	2c00      	cmp	r4, #0
 800b2d0:	d0e3      	beq.n	800b29a <_vsniprintf_r+0x16>
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	701a      	strb	r2, [r3, #0]
 800b2d8:	e7df      	b.n	800b29a <_vsniprintf_r+0x16>
	...

0800b2dc <vsniprintf>:
 800b2dc:	b507      	push	{r0, r1, r2, lr}
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	460a      	mov	r2, r1
 800b2e4:	4601      	mov	r1, r0
 800b2e6:	4803      	ldr	r0, [pc, #12]	@ (800b2f4 <vsniprintf+0x18>)
 800b2e8:	6800      	ldr	r0, [r0, #0]
 800b2ea:	f7ff ffcb 	bl	800b284 <_vsniprintf_r>
 800b2ee:	b003      	add	sp, #12
 800b2f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2f4:	20000010 	.word	0x20000010

0800b2f8 <memset>:
 800b2f8:	4402      	add	r2, r0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d100      	bne.n	800b302 <memset+0xa>
 800b300:	4770      	bx	lr
 800b302:	f803 1b01 	strb.w	r1, [r3], #1
 800b306:	e7f9      	b.n	800b2fc <memset+0x4>

0800b308 <strchr>:
 800b308:	b2c9      	uxtb	r1, r1
 800b30a:	4603      	mov	r3, r0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b312:	b112      	cbz	r2, 800b31a <strchr+0x12>
 800b314:	428a      	cmp	r2, r1
 800b316:	d1f9      	bne.n	800b30c <strchr+0x4>
 800b318:	4770      	bx	lr
 800b31a:	2900      	cmp	r1, #0
 800b31c:	bf18      	it	ne
 800b31e:	2000      	movne	r0, #0
 800b320:	4770      	bx	lr

0800b322 <strncmp>:
 800b322:	b510      	push	{r4, lr}
 800b324:	b16a      	cbz	r2, 800b342 <strncmp+0x20>
 800b326:	3901      	subs	r1, #1
 800b328:	1884      	adds	r4, r0, r2
 800b32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b32e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b332:	429a      	cmp	r2, r3
 800b334:	d103      	bne.n	800b33e <strncmp+0x1c>
 800b336:	42a0      	cmp	r0, r4
 800b338:	d001      	beq.n	800b33e <strncmp+0x1c>
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	d1f5      	bne.n	800b32a <strncmp+0x8>
 800b33e:	1ad0      	subs	r0, r2, r3
 800b340:	bd10      	pop	{r4, pc}
 800b342:	4610      	mov	r0, r2
 800b344:	e7fc      	b.n	800b340 <strncmp+0x1e>

0800b346 <strncpy>:
 800b346:	b510      	push	{r4, lr}
 800b348:	3901      	subs	r1, #1
 800b34a:	4603      	mov	r3, r0
 800b34c:	b132      	cbz	r2, 800b35c <strncpy+0x16>
 800b34e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b352:	f803 4b01 	strb.w	r4, [r3], #1
 800b356:	3a01      	subs	r2, #1
 800b358:	2c00      	cmp	r4, #0
 800b35a:	d1f7      	bne.n	800b34c <strncpy+0x6>
 800b35c:	441a      	add	r2, r3
 800b35e:	2100      	movs	r1, #0
 800b360:	4293      	cmp	r3, r2
 800b362:	d100      	bne.n	800b366 <strncpy+0x20>
 800b364:	bd10      	pop	{r4, pc}
 800b366:	f803 1b01 	strb.w	r1, [r3], #1
 800b36a:	e7f9      	b.n	800b360 <strncpy+0x1a>

0800b36c <strstr>:
 800b36c:	780a      	ldrb	r2, [r1, #0]
 800b36e:	b570      	push	{r4, r5, r6, lr}
 800b370:	b96a      	cbnz	r2, 800b38e <strstr+0x22>
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	429a      	cmp	r2, r3
 800b376:	d109      	bne.n	800b38c <strstr+0x20>
 800b378:	460c      	mov	r4, r1
 800b37a:	4605      	mov	r5, r0
 800b37c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0f6      	beq.n	800b372 <strstr+0x6>
 800b384:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b388:	429e      	cmp	r6, r3
 800b38a:	d0f7      	beq.n	800b37c <strstr+0x10>
 800b38c:	3001      	adds	r0, #1
 800b38e:	7803      	ldrb	r3, [r0, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1ef      	bne.n	800b374 <strstr+0x8>
 800b394:	4618      	mov	r0, r3
 800b396:	e7ec      	b.n	800b372 <strstr+0x6>

0800b398 <_sbrk_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4d06      	ldr	r5, [pc, #24]	@ (800b3b4 <_sbrk_r+0x1c>)
 800b39c:	2300      	movs	r3, #0
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	602b      	str	r3, [r5, #0]
 800b3a4:	f7f5 fffc 	bl	80013a0 <_sbrk>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_sbrk_r+0x1a>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_sbrk_r+0x1a>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	20005494 	.word	0x20005494

0800b3b8 <__errno>:
 800b3b8:	4b01      	ldr	r3, [pc, #4]	@ (800b3c0 <__errno+0x8>)
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	20000010 	.word	0x20000010

0800b3c4 <__libc_init_array>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	4d0d      	ldr	r5, [pc, #52]	@ (800b3fc <__libc_init_array+0x38>)
 800b3c8:	4c0d      	ldr	r4, [pc, #52]	@ (800b400 <__libc_init_array+0x3c>)
 800b3ca:	1b64      	subs	r4, r4, r5
 800b3cc:	10a4      	asrs	r4, r4, #2
 800b3ce:	2600      	movs	r6, #0
 800b3d0:	42a6      	cmp	r6, r4
 800b3d2:	d109      	bne.n	800b3e8 <__libc_init_array+0x24>
 800b3d4:	4d0b      	ldr	r5, [pc, #44]	@ (800b404 <__libc_init_array+0x40>)
 800b3d6:	4c0c      	ldr	r4, [pc, #48]	@ (800b408 <__libc_init_array+0x44>)
 800b3d8:	f000 fbb0 	bl	800bb3c <_init>
 800b3dc:	1b64      	subs	r4, r4, r5
 800b3de:	10a4      	asrs	r4, r4, #2
 800b3e0:	2600      	movs	r6, #0
 800b3e2:	42a6      	cmp	r6, r4
 800b3e4:	d105      	bne.n	800b3f2 <__libc_init_array+0x2e>
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
 800b3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ec:	4798      	blx	r3
 800b3ee:	3601      	adds	r6, #1
 800b3f0:	e7ee      	b.n	800b3d0 <__libc_init_array+0xc>
 800b3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f6:	4798      	blx	r3
 800b3f8:	3601      	adds	r6, #1
 800b3fa:	e7f2      	b.n	800b3e2 <__libc_init_array+0x1e>
 800b3fc:	0800bee0 	.word	0x0800bee0
 800b400:	0800bee0 	.word	0x0800bee0
 800b404:	0800bee0 	.word	0x0800bee0
 800b408:	0800bee4 	.word	0x0800bee4

0800b40c <__retarget_lock_acquire_recursive>:
 800b40c:	4770      	bx	lr

0800b40e <__retarget_lock_release_recursive>:
 800b40e:	4770      	bx	lr

0800b410 <strcpy>:
 800b410:	4603      	mov	r3, r0
 800b412:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b416:	f803 2b01 	strb.w	r2, [r3], #1
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	d1f9      	bne.n	800b412 <strcpy+0x2>
 800b41e:	4770      	bx	lr

0800b420 <memcpy>:
 800b420:	440a      	add	r2, r1
 800b422:	4291      	cmp	r1, r2
 800b424:	f100 33ff 	add.w	r3, r0, #4294967295
 800b428:	d100      	bne.n	800b42c <memcpy+0xc>
 800b42a:	4770      	bx	lr
 800b42c:	b510      	push	{r4, lr}
 800b42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b432:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b436:	4291      	cmp	r1, r2
 800b438:	d1f9      	bne.n	800b42e <memcpy+0xe>
 800b43a:	bd10      	pop	{r4, pc}

0800b43c <_free_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4605      	mov	r5, r0
 800b440:	2900      	cmp	r1, #0
 800b442:	d041      	beq.n	800b4c8 <_free_r+0x8c>
 800b444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b448:	1f0c      	subs	r4, r1, #4
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bfb8      	it	lt
 800b44e:	18e4      	addlt	r4, r4, r3
 800b450:	f7ff fe68 	bl	800b124 <__malloc_lock>
 800b454:	4a1d      	ldr	r2, [pc, #116]	@ (800b4cc <_free_r+0x90>)
 800b456:	6813      	ldr	r3, [r2, #0]
 800b458:	b933      	cbnz	r3, 800b468 <_free_r+0x2c>
 800b45a:	6063      	str	r3, [r4, #4]
 800b45c:	6014      	str	r4, [r2, #0]
 800b45e:	4628      	mov	r0, r5
 800b460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b464:	f7ff be64 	b.w	800b130 <__malloc_unlock>
 800b468:	42a3      	cmp	r3, r4
 800b46a:	d908      	bls.n	800b47e <_free_r+0x42>
 800b46c:	6820      	ldr	r0, [r4, #0]
 800b46e:	1821      	adds	r1, r4, r0
 800b470:	428b      	cmp	r3, r1
 800b472:	bf01      	itttt	eq
 800b474:	6819      	ldreq	r1, [r3, #0]
 800b476:	685b      	ldreq	r3, [r3, #4]
 800b478:	1809      	addeq	r1, r1, r0
 800b47a:	6021      	streq	r1, [r4, #0]
 800b47c:	e7ed      	b.n	800b45a <_free_r+0x1e>
 800b47e:	461a      	mov	r2, r3
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	b10b      	cbz	r3, 800b488 <_free_r+0x4c>
 800b484:	42a3      	cmp	r3, r4
 800b486:	d9fa      	bls.n	800b47e <_free_r+0x42>
 800b488:	6811      	ldr	r1, [r2, #0]
 800b48a:	1850      	adds	r0, r2, r1
 800b48c:	42a0      	cmp	r0, r4
 800b48e:	d10b      	bne.n	800b4a8 <_free_r+0x6c>
 800b490:	6820      	ldr	r0, [r4, #0]
 800b492:	4401      	add	r1, r0
 800b494:	1850      	adds	r0, r2, r1
 800b496:	4283      	cmp	r3, r0
 800b498:	6011      	str	r1, [r2, #0]
 800b49a:	d1e0      	bne.n	800b45e <_free_r+0x22>
 800b49c:	6818      	ldr	r0, [r3, #0]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	6053      	str	r3, [r2, #4]
 800b4a2:	4408      	add	r0, r1
 800b4a4:	6010      	str	r0, [r2, #0]
 800b4a6:	e7da      	b.n	800b45e <_free_r+0x22>
 800b4a8:	d902      	bls.n	800b4b0 <_free_r+0x74>
 800b4aa:	230c      	movs	r3, #12
 800b4ac:	602b      	str	r3, [r5, #0]
 800b4ae:	e7d6      	b.n	800b45e <_free_r+0x22>
 800b4b0:	6820      	ldr	r0, [r4, #0]
 800b4b2:	1821      	adds	r1, r4, r0
 800b4b4:	428b      	cmp	r3, r1
 800b4b6:	bf04      	itt	eq
 800b4b8:	6819      	ldreq	r1, [r3, #0]
 800b4ba:	685b      	ldreq	r3, [r3, #4]
 800b4bc:	6063      	str	r3, [r4, #4]
 800b4be:	bf04      	itt	eq
 800b4c0:	1809      	addeq	r1, r1, r0
 800b4c2:	6021      	streq	r1, [r4, #0]
 800b4c4:	6054      	str	r4, [r2, #4]
 800b4c6:	e7ca      	b.n	800b45e <_free_r+0x22>
 800b4c8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20005358 	.word	0x20005358

0800b4d0 <__ssputs_r>:
 800b4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	688e      	ldr	r6, [r1, #8]
 800b4d6:	461f      	mov	r7, r3
 800b4d8:	42be      	cmp	r6, r7
 800b4da:	680b      	ldr	r3, [r1, #0]
 800b4dc:	4682      	mov	sl, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	4690      	mov	r8, r2
 800b4e2:	d82d      	bhi.n	800b540 <__ssputs_r+0x70>
 800b4e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4ec:	d026      	beq.n	800b53c <__ssputs_r+0x6c>
 800b4ee:	6965      	ldr	r5, [r4, #20]
 800b4f0:	6909      	ldr	r1, [r1, #16]
 800b4f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4f6:	eba3 0901 	sub.w	r9, r3, r1
 800b4fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4fe:	1c7b      	adds	r3, r7, #1
 800b500:	444b      	add	r3, r9
 800b502:	106d      	asrs	r5, r5, #1
 800b504:	429d      	cmp	r5, r3
 800b506:	bf38      	it	cc
 800b508:	461d      	movcc	r5, r3
 800b50a:	0553      	lsls	r3, r2, #21
 800b50c:	d527      	bpl.n	800b55e <__ssputs_r+0x8e>
 800b50e:	4629      	mov	r1, r5
 800b510:	f7ff fd88 	bl	800b024 <_malloc_r>
 800b514:	4606      	mov	r6, r0
 800b516:	b360      	cbz	r0, 800b572 <__ssputs_r+0xa2>
 800b518:	6921      	ldr	r1, [r4, #16]
 800b51a:	464a      	mov	r2, r9
 800b51c:	f7ff ff80 	bl	800b420 <memcpy>
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b52a:	81a3      	strh	r3, [r4, #12]
 800b52c:	6126      	str	r6, [r4, #16]
 800b52e:	6165      	str	r5, [r4, #20]
 800b530:	444e      	add	r6, r9
 800b532:	eba5 0509 	sub.w	r5, r5, r9
 800b536:	6026      	str	r6, [r4, #0]
 800b538:	60a5      	str	r5, [r4, #8]
 800b53a:	463e      	mov	r6, r7
 800b53c:	42be      	cmp	r6, r7
 800b53e:	d900      	bls.n	800b542 <__ssputs_r+0x72>
 800b540:	463e      	mov	r6, r7
 800b542:	6820      	ldr	r0, [r4, #0]
 800b544:	4632      	mov	r2, r6
 800b546:	4641      	mov	r1, r8
 800b548:	f000 faa8 	bl	800ba9c <memmove>
 800b54c:	68a3      	ldr	r3, [r4, #8]
 800b54e:	1b9b      	subs	r3, r3, r6
 800b550:	60a3      	str	r3, [r4, #8]
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	4433      	add	r3, r6
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	2000      	movs	r0, #0
 800b55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b55e:	462a      	mov	r2, r5
 800b560:	f000 fab6 	bl	800bad0 <_realloc_r>
 800b564:	4606      	mov	r6, r0
 800b566:	2800      	cmp	r0, #0
 800b568:	d1e0      	bne.n	800b52c <__ssputs_r+0x5c>
 800b56a:	6921      	ldr	r1, [r4, #16]
 800b56c:	4650      	mov	r0, sl
 800b56e:	f7ff ff65 	bl	800b43c <_free_r>
 800b572:	230c      	movs	r3, #12
 800b574:	f8ca 3000 	str.w	r3, [sl]
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	e7e9      	b.n	800b55a <__ssputs_r+0x8a>
	...

0800b588 <_svfiprintf_r>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	4698      	mov	r8, r3
 800b58e:	898b      	ldrh	r3, [r1, #12]
 800b590:	061b      	lsls	r3, r3, #24
 800b592:	b09d      	sub	sp, #116	@ 0x74
 800b594:	4607      	mov	r7, r0
 800b596:	460d      	mov	r5, r1
 800b598:	4614      	mov	r4, r2
 800b59a:	d510      	bpl.n	800b5be <_svfiprintf_r+0x36>
 800b59c:	690b      	ldr	r3, [r1, #16]
 800b59e:	b973      	cbnz	r3, 800b5be <_svfiprintf_r+0x36>
 800b5a0:	2140      	movs	r1, #64	@ 0x40
 800b5a2:	f7ff fd3f 	bl	800b024 <_malloc_r>
 800b5a6:	6028      	str	r0, [r5, #0]
 800b5a8:	6128      	str	r0, [r5, #16]
 800b5aa:	b930      	cbnz	r0, 800b5ba <_svfiprintf_r+0x32>
 800b5ac:	230c      	movs	r3, #12
 800b5ae:	603b      	str	r3, [r7, #0]
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	b01d      	add	sp, #116	@ 0x74
 800b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ba:	2340      	movs	r3, #64	@ 0x40
 800b5bc:	616b      	str	r3, [r5, #20]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5c2:	2320      	movs	r3, #32
 800b5c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5cc:	2330      	movs	r3, #48	@ 0x30
 800b5ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b76c <_svfiprintf_r+0x1e4>
 800b5d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5d6:	f04f 0901 	mov.w	r9, #1
 800b5da:	4623      	mov	r3, r4
 800b5dc:	469a      	mov	sl, r3
 800b5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5e2:	b10a      	cbz	r2, 800b5e8 <_svfiprintf_r+0x60>
 800b5e4:	2a25      	cmp	r2, #37	@ 0x25
 800b5e6:	d1f9      	bne.n	800b5dc <_svfiprintf_r+0x54>
 800b5e8:	ebba 0b04 	subs.w	fp, sl, r4
 800b5ec:	d00b      	beq.n	800b606 <_svfiprintf_r+0x7e>
 800b5ee:	465b      	mov	r3, fp
 800b5f0:	4622      	mov	r2, r4
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f7ff ff6b 	bl	800b4d0 <__ssputs_r>
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	f000 80a7 	beq.w	800b74e <_svfiprintf_r+0x1c6>
 800b600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b602:	445a      	add	r2, fp
 800b604:	9209      	str	r2, [sp, #36]	@ 0x24
 800b606:	f89a 3000 	ldrb.w	r3, [sl]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 809f 	beq.w	800b74e <_svfiprintf_r+0x1c6>
 800b610:	2300      	movs	r3, #0
 800b612:	f04f 32ff 	mov.w	r2, #4294967295
 800b616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b61a:	f10a 0a01 	add.w	sl, sl, #1
 800b61e:	9304      	str	r3, [sp, #16]
 800b620:	9307      	str	r3, [sp, #28]
 800b622:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b626:	931a      	str	r3, [sp, #104]	@ 0x68
 800b628:	4654      	mov	r4, sl
 800b62a:	2205      	movs	r2, #5
 800b62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b630:	484e      	ldr	r0, [pc, #312]	@ (800b76c <_svfiprintf_r+0x1e4>)
 800b632:	f7f4 fe1d 	bl	8000270 <memchr>
 800b636:	9a04      	ldr	r2, [sp, #16]
 800b638:	b9d8      	cbnz	r0, 800b672 <_svfiprintf_r+0xea>
 800b63a:	06d0      	lsls	r0, r2, #27
 800b63c:	bf44      	itt	mi
 800b63e:	2320      	movmi	r3, #32
 800b640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b644:	0711      	lsls	r1, r2, #28
 800b646:	bf44      	itt	mi
 800b648:	232b      	movmi	r3, #43	@ 0x2b
 800b64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b64e:	f89a 3000 	ldrb.w	r3, [sl]
 800b652:	2b2a      	cmp	r3, #42	@ 0x2a
 800b654:	d015      	beq.n	800b682 <_svfiprintf_r+0xfa>
 800b656:	9a07      	ldr	r2, [sp, #28]
 800b658:	4654      	mov	r4, sl
 800b65a:	2000      	movs	r0, #0
 800b65c:	f04f 0c0a 	mov.w	ip, #10
 800b660:	4621      	mov	r1, r4
 800b662:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b666:	3b30      	subs	r3, #48	@ 0x30
 800b668:	2b09      	cmp	r3, #9
 800b66a:	d94b      	bls.n	800b704 <_svfiprintf_r+0x17c>
 800b66c:	b1b0      	cbz	r0, 800b69c <_svfiprintf_r+0x114>
 800b66e:	9207      	str	r2, [sp, #28]
 800b670:	e014      	b.n	800b69c <_svfiprintf_r+0x114>
 800b672:	eba0 0308 	sub.w	r3, r0, r8
 800b676:	fa09 f303 	lsl.w	r3, r9, r3
 800b67a:	4313      	orrs	r3, r2
 800b67c:	9304      	str	r3, [sp, #16]
 800b67e:	46a2      	mov	sl, r4
 800b680:	e7d2      	b.n	800b628 <_svfiprintf_r+0xa0>
 800b682:	9b03      	ldr	r3, [sp, #12]
 800b684:	1d19      	adds	r1, r3, #4
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	9103      	str	r1, [sp, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bfbb      	ittet	lt
 800b68e:	425b      	neglt	r3, r3
 800b690:	f042 0202 	orrlt.w	r2, r2, #2
 800b694:	9307      	strge	r3, [sp, #28]
 800b696:	9307      	strlt	r3, [sp, #28]
 800b698:	bfb8      	it	lt
 800b69a:	9204      	strlt	r2, [sp, #16]
 800b69c:	7823      	ldrb	r3, [r4, #0]
 800b69e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6a0:	d10a      	bne.n	800b6b8 <_svfiprintf_r+0x130>
 800b6a2:	7863      	ldrb	r3, [r4, #1]
 800b6a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6a6:	d132      	bne.n	800b70e <_svfiprintf_r+0x186>
 800b6a8:	9b03      	ldr	r3, [sp, #12]
 800b6aa:	1d1a      	adds	r2, r3, #4
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	9203      	str	r2, [sp, #12]
 800b6b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6b4:	3402      	adds	r4, #2
 800b6b6:	9305      	str	r3, [sp, #20]
 800b6b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b77c <_svfiprintf_r+0x1f4>
 800b6bc:	7821      	ldrb	r1, [r4, #0]
 800b6be:	2203      	movs	r2, #3
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	f7f4 fdd5 	bl	8000270 <memchr>
 800b6c6:	b138      	cbz	r0, 800b6d8 <_svfiprintf_r+0x150>
 800b6c8:	9b04      	ldr	r3, [sp, #16]
 800b6ca:	eba0 000a 	sub.w	r0, r0, sl
 800b6ce:	2240      	movs	r2, #64	@ 0x40
 800b6d0:	4082      	lsls	r2, r0
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	9304      	str	r3, [sp, #16]
 800b6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6dc:	4824      	ldr	r0, [pc, #144]	@ (800b770 <_svfiprintf_r+0x1e8>)
 800b6de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6e2:	2206      	movs	r2, #6
 800b6e4:	f7f4 fdc4 	bl	8000270 <memchr>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d036      	beq.n	800b75a <_svfiprintf_r+0x1d2>
 800b6ec:	4b21      	ldr	r3, [pc, #132]	@ (800b774 <_svfiprintf_r+0x1ec>)
 800b6ee:	bb1b      	cbnz	r3, 800b738 <_svfiprintf_r+0x1b0>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	3307      	adds	r3, #7
 800b6f4:	f023 0307 	bic.w	r3, r3, #7
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	9303      	str	r3, [sp, #12]
 800b6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6fe:	4433      	add	r3, r6
 800b700:	9309      	str	r3, [sp, #36]	@ 0x24
 800b702:	e76a      	b.n	800b5da <_svfiprintf_r+0x52>
 800b704:	fb0c 3202 	mla	r2, ip, r2, r3
 800b708:	460c      	mov	r4, r1
 800b70a:	2001      	movs	r0, #1
 800b70c:	e7a8      	b.n	800b660 <_svfiprintf_r+0xd8>
 800b70e:	2300      	movs	r3, #0
 800b710:	3401      	adds	r4, #1
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	4619      	mov	r1, r3
 800b716:	f04f 0c0a 	mov.w	ip, #10
 800b71a:	4620      	mov	r0, r4
 800b71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b720:	3a30      	subs	r2, #48	@ 0x30
 800b722:	2a09      	cmp	r2, #9
 800b724:	d903      	bls.n	800b72e <_svfiprintf_r+0x1a6>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0c6      	beq.n	800b6b8 <_svfiprintf_r+0x130>
 800b72a:	9105      	str	r1, [sp, #20]
 800b72c:	e7c4      	b.n	800b6b8 <_svfiprintf_r+0x130>
 800b72e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b732:	4604      	mov	r4, r0
 800b734:	2301      	movs	r3, #1
 800b736:	e7f0      	b.n	800b71a <_svfiprintf_r+0x192>
 800b738:	ab03      	add	r3, sp, #12
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	462a      	mov	r2, r5
 800b73e:	4b0e      	ldr	r3, [pc, #56]	@ (800b778 <_svfiprintf_r+0x1f0>)
 800b740:	a904      	add	r1, sp, #16
 800b742:	4638      	mov	r0, r7
 800b744:	f3af 8000 	nop.w
 800b748:	1c42      	adds	r2, r0, #1
 800b74a:	4606      	mov	r6, r0
 800b74c:	d1d6      	bne.n	800b6fc <_svfiprintf_r+0x174>
 800b74e:	89ab      	ldrh	r3, [r5, #12]
 800b750:	065b      	lsls	r3, r3, #25
 800b752:	f53f af2d 	bmi.w	800b5b0 <_svfiprintf_r+0x28>
 800b756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b758:	e72c      	b.n	800b5b4 <_svfiprintf_r+0x2c>
 800b75a:	ab03      	add	r3, sp, #12
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	462a      	mov	r2, r5
 800b760:	4b05      	ldr	r3, [pc, #20]	@ (800b778 <_svfiprintf_r+0x1f0>)
 800b762:	a904      	add	r1, sp, #16
 800b764:	4638      	mov	r0, r7
 800b766:	f000 f879 	bl	800b85c <_printf_i>
 800b76a:	e7ed      	b.n	800b748 <_svfiprintf_r+0x1c0>
 800b76c:	0800bea5 	.word	0x0800bea5
 800b770:	0800beaf 	.word	0x0800beaf
 800b774:	00000000 	.word	0x00000000
 800b778:	0800b4d1 	.word	0x0800b4d1
 800b77c:	0800beab 	.word	0x0800beab

0800b780 <_printf_common>:
 800b780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b784:	4616      	mov	r6, r2
 800b786:	4698      	mov	r8, r3
 800b788:	688a      	ldr	r2, [r1, #8]
 800b78a:	690b      	ldr	r3, [r1, #16]
 800b78c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b790:	4293      	cmp	r3, r2
 800b792:	bfb8      	it	lt
 800b794:	4613      	movlt	r3, r2
 800b796:	6033      	str	r3, [r6, #0]
 800b798:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b79c:	4607      	mov	r7, r0
 800b79e:	460c      	mov	r4, r1
 800b7a0:	b10a      	cbz	r2, 800b7a6 <_printf_common+0x26>
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	6033      	str	r3, [r6, #0]
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	0699      	lsls	r1, r3, #26
 800b7aa:	bf42      	ittt	mi
 800b7ac:	6833      	ldrmi	r3, [r6, #0]
 800b7ae:	3302      	addmi	r3, #2
 800b7b0:	6033      	strmi	r3, [r6, #0]
 800b7b2:	6825      	ldr	r5, [r4, #0]
 800b7b4:	f015 0506 	ands.w	r5, r5, #6
 800b7b8:	d106      	bne.n	800b7c8 <_printf_common+0x48>
 800b7ba:	f104 0a19 	add.w	sl, r4, #25
 800b7be:	68e3      	ldr	r3, [r4, #12]
 800b7c0:	6832      	ldr	r2, [r6, #0]
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	42ab      	cmp	r3, r5
 800b7c6:	dc26      	bgt.n	800b816 <_printf_common+0x96>
 800b7c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7cc:	6822      	ldr	r2, [r4, #0]
 800b7ce:	3b00      	subs	r3, #0
 800b7d0:	bf18      	it	ne
 800b7d2:	2301      	movne	r3, #1
 800b7d4:	0692      	lsls	r2, r2, #26
 800b7d6:	d42b      	bmi.n	800b830 <_printf_common+0xb0>
 800b7d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7dc:	4641      	mov	r1, r8
 800b7de:	4638      	mov	r0, r7
 800b7e0:	47c8      	blx	r9
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	d01e      	beq.n	800b824 <_printf_common+0xa4>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	6922      	ldr	r2, [r4, #16]
 800b7ea:	f003 0306 	and.w	r3, r3, #6
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	bf02      	ittt	eq
 800b7f2:	68e5      	ldreq	r5, [r4, #12]
 800b7f4:	6833      	ldreq	r3, [r6, #0]
 800b7f6:	1aed      	subeq	r5, r5, r3
 800b7f8:	68a3      	ldr	r3, [r4, #8]
 800b7fa:	bf0c      	ite	eq
 800b7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b800:	2500      	movne	r5, #0
 800b802:	4293      	cmp	r3, r2
 800b804:	bfc4      	itt	gt
 800b806:	1a9b      	subgt	r3, r3, r2
 800b808:	18ed      	addgt	r5, r5, r3
 800b80a:	2600      	movs	r6, #0
 800b80c:	341a      	adds	r4, #26
 800b80e:	42b5      	cmp	r5, r6
 800b810:	d11a      	bne.n	800b848 <_printf_common+0xc8>
 800b812:	2000      	movs	r0, #0
 800b814:	e008      	b.n	800b828 <_printf_common+0xa8>
 800b816:	2301      	movs	r3, #1
 800b818:	4652      	mov	r2, sl
 800b81a:	4641      	mov	r1, r8
 800b81c:	4638      	mov	r0, r7
 800b81e:	47c8      	blx	r9
 800b820:	3001      	adds	r0, #1
 800b822:	d103      	bne.n	800b82c <_printf_common+0xac>
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b82c:	3501      	adds	r5, #1
 800b82e:	e7c6      	b.n	800b7be <_printf_common+0x3e>
 800b830:	18e1      	adds	r1, r4, r3
 800b832:	1c5a      	adds	r2, r3, #1
 800b834:	2030      	movs	r0, #48	@ 0x30
 800b836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b83a:	4422      	add	r2, r4
 800b83c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b844:	3302      	adds	r3, #2
 800b846:	e7c7      	b.n	800b7d8 <_printf_common+0x58>
 800b848:	2301      	movs	r3, #1
 800b84a:	4622      	mov	r2, r4
 800b84c:	4641      	mov	r1, r8
 800b84e:	4638      	mov	r0, r7
 800b850:	47c8      	blx	r9
 800b852:	3001      	adds	r0, #1
 800b854:	d0e6      	beq.n	800b824 <_printf_common+0xa4>
 800b856:	3601      	adds	r6, #1
 800b858:	e7d9      	b.n	800b80e <_printf_common+0x8e>
	...

0800b85c <_printf_i>:
 800b85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	7e0f      	ldrb	r7, [r1, #24]
 800b862:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b864:	2f78      	cmp	r7, #120	@ 0x78
 800b866:	4691      	mov	r9, r2
 800b868:	4680      	mov	r8, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	469a      	mov	sl, r3
 800b86e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b872:	d807      	bhi.n	800b884 <_printf_i+0x28>
 800b874:	2f62      	cmp	r7, #98	@ 0x62
 800b876:	d80a      	bhi.n	800b88e <_printf_i+0x32>
 800b878:	2f00      	cmp	r7, #0
 800b87a:	f000 80d2 	beq.w	800ba22 <_printf_i+0x1c6>
 800b87e:	2f58      	cmp	r7, #88	@ 0x58
 800b880:	f000 80b9 	beq.w	800b9f6 <_printf_i+0x19a>
 800b884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b88c:	e03a      	b.n	800b904 <_printf_i+0xa8>
 800b88e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b892:	2b15      	cmp	r3, #21
 800b894:	d8f6      	bhi.n	800b884 <_printf_i+0x28>
 800b896:	a101      	add	r1, pc, #4	@ (adr r1, 800b89c <_printf_i+0x40>)
 800b898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b89c:	0800b8f5 	.word	0x0800b8f5
 800b8a0:	0800b909 	.word	0x0800b909
 800b8a4:	0800b885 	.word	0x0800b885
 800b8a8:	0800b885 	.word	0x0800b885
 800b8ac:	0800b885 	.word	0x0800b885
 800b8b0:	0800b885 	.word	0x0800b885
 800b8b4:	0800b909 	.word	0x0800b909
 800b8b8:	0800b885 	.word	0x0800b885
 800b8bc:	0800b885 	.word	0x0800b885
 800b8c0:	0800b885 	.word	0x0800b885
 800b8c4:	0800b885 	.word	0x0800b885
 800b8c8:	0800ba09 	.word	0x0800ba09
 800b8cc:	0800b933 	.word	0x0800b933
 800b8d0:	0800b9c3 	.word	0x0800b9c3
 800b8d4:	0800b885 	.word	0x0800b885
 800b8d8:	0800b885 	.word	0x0800b885
 800b8dc:	0800ba2b 	.word	0x0800ba2b
 800b8e0:	0800b885 	.word	0x0800b885
 800b8e4:	0800b933 	.word	0x0800b933
 800b8e8:	0800b885 	.word	0x0800b885
 800b8ec:	0800b885 	.word	0x0800b885
 800b8f0:	0800b9cb 	.word	0x0800b9cb
 800b8f4:	6833      	ldr	r3, [r6, #0]
 800b8f6:	1d1a      	adds	r2, r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6032      	str	r2, [r6, #0]
 800b8fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b904:	2301      	movs	r3, #1
 800b906:	e09d      	b.n	800ba44 <_printf_i+0x1e8>
 800b908:	6833      	ldr	r3, [r6, #0]
 800b90a:	6820      	ldr	r0, [r4, #0]
 800b90c:	1d19      	adds	r1, r3, #4
 800b90e:	6031      	str	r1, [r6, #0]
 800b910:	0606      	lsls	r6, r0, #24
 800b912:	d501      	bpl.n	800b918 <_printf_i+0xbc>
 800b914:	681d      	ldr	r5, [r3, #0]
 800b916:	e003      	b.n	800b920 <_printf_i+0xc4>
 800b918:	0645      	lsls	r5, r0, #25
 800b91a:	d5fb      	bpl.n	800b914 <_printf_i+0xb8>
 800b91c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b920:	2d00      	cmp	r5, #0
 800b922:	da03      	bge.n	800b92c <_printf_i+0xd0>
 800b924:	232d      	movs	r3, #45	@ 0x2d
 800b926:	426d      	negs	r5, r5
 800b928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b92c:	4859      	ldr	r0, [pc, #356]	@ (800ba94 <_printf_i+0x238>)
 800b92e:	230a      	movs	r3, #10
 800b930:	e011      	b.n	800b956 <_printf_i+0xfa>
 800b932:	6821      	ldr	r1, [r4, #0]
 800b934:	6833      	ldr	r3, [r6, #0]
 800b936:	0608      	lsls	r0, r1, #24
 800b938:	f853 5b04 	ldr.w	r5, [r3], #4
 800b93c:	d402      	bmi.n	800b944 <_printf_i+0xe8>
 800b93e:	0649      	lsls	r1, r1, #25
 800b940:	bf48      	it	mi
 800b942:	b2ad      	uxthmi	r5, r5
 800b944:	2f6f      	cmp	r7, #111	@ 0x6f
 800b946:	4853      	ldr	r0, [pc, #332]	@ (800ba94 <_printf_i+0x238>)
 800b948:	6033      	str	r3, [r6, #0]
 800b94a:	bf14      	ite	ne
 800b94c:	230a      	movne	r3, #10
 800b94e:	2308      	moveq	r3, #8
 800b950:	2100      	movs	r1, #0
 800b952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b956:	6866      	ldr	r6, [r4, #4]
 800b958:	60a6      	str	r6, [r4, #8]
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	bfa2      	ittt	ge
 800b95e:	6821      	ldrge	r1, [r4, #0]
 800b960:	f021 0104 	bicge.w	r1, r1, #4
 800b964:	6021      	strge	r1, [r4, #0]
 800b966:	b90d      	cbnz	r5, 800b96c <_printf_i+0x110>
 800b968:	2e00      	cmp	r6, #0
 800b96a:	d04b      	beq.n	800ba04 <_printf_i+0x1a8>
 800b96c:	4616      	mov	r6, r2
 800b96e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b972:	fb03 5711 	mls	r7, r3, r1, r5
 800b976:	5dc7      	ldrb	r7, [r0, r7]
 800b978:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b97c:	462f      	mov	r7, r5
 800b97e:	42bb      	cmp	r3, r7
 800b980:	460d      	mov	r5, r1
 800b982:	d9f4      	bls.n	800b96e <_printf_i+0x112>
 800b984:	2b08      	cmp	r3, #8
 800b986:	d10b      	bne.n	800b9a0 <_printf_i+0x144>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	07df      	lsls	r7, r3, #31
 800b98c:	d508      	bpl.n	800b9a0 <_printf_i+0x144>
 800b98e:	6923      	ldr	r3, [r4, #16]
 800b990:	6861      	ldr	r1, [r4, #4]
 800b992:	4299      	cmp	r1, r3
 800b994:	bfde      	ittt	le
 800b996:	2330      	movle	r3, #48	@ 0x30
 800b998:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b99c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9a0:	1b92      	subs	r2, r2, r6
 800b9a2:	6122      	str	r2, [r4, #16]
 800b9a4:	f8cd a000 	str.w	sl, [sp]
 800b9a8:	464b      	mov	r3, r9
 800b9aa:	aa03      	add	r2, sp, #12
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	f7ff fee6 	bl	800b780 <_printf_common>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d14a      	bne.n	800ba4e <_printf_i+0x1f2>
 800b9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9bc:	b004      	add	sp, #16
 800b9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	f043 0320 	orr.w	r3, r3, #32
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	4833      	ldr	r0, [pc, #204]	@ (800ba98 <_printf_i+0x23c>)
 800b9cc:	2778      	movs	r7, #120	@ 0x78
 800b9ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9d2:	6823      	ldr	r3, [r4, #0]
 800b9d4:	6831      	ldr	r1, [r6, #0]
 800b9d6:	061f      	lsls	r7, r3, #24
 800b9d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9dc:	d402      	bmi.n	800b9e4 <_printf_i+0x188>
 800b9de:	065f      	lsls	r7, r3, #25
 800b9e0:	bf48      	it	mi
 800b9e2:	b2ad      	uxthmi	r5, r5
 800b9e4:	6031      	str	r1, [r6, #0]
 800b9e6:	07d9      	lsls	r1, r3, #31
 800b9e8:	bf44      	itt	mi
 800b9ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b9ee:	6023      	strmi	r3, [r4, #0]
 800b9f0:	b11d      	cbz	r5, 800b9fa <_printf_i+0x19e>
 800b9f2:	2310      	movs	r3, #16
 800b9f4:	e7ac      	b.n	800b950 <_printf_i+0xf4>
 800b9f6:	4827      	ldr	r0, [pc, #156]	@ (800ba94 <_printf_i+0x238>)
 800b9f8:	e7e9      	b.n	800b9ce <_printf_i+0x172>
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	f023 0320 	bic.w	r3, r3, #32
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	e7f6      	b.n	800b9f2 <_printf_i+0x196>
 800ba04:	4616      	mov	r6, r2
 800ba06:	e7bd      	b.n	800b984 <_printf_i+0x128>
 800ba08:	6833      	ldr	r3, [r6, #0]
 800ba0a:	6825      	ldr	r5, [r4, #0]
 800ba0c:	6961      	ldr	r1, [r4, #20]
 800ba0e:	1d18      	adds	r0, r3, #4
 800ba10:	6030      	str	r0, [r6, #0]
 800ba12:	062e      	lsls	r6, r5, #24
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	d501      	bpl.n	800ba1c <_printf_i+0x1c0>
 800ba18:	6019      	str	r1, [r3, #0]
 800ba1a:	e002      	b.n	800ba22 <_printf_i+0x1c6>
 800ba1c:	0668      	lsls	r0, r5, #25
 800ba1e:	d5fb      	bpl.n	800ba18 <_printf_i+0x1bc>
 800ba20:	8019      	strh	r1, [r3, #0]
 800ba22:	2300      	movs	r3, #0
 800ba24:	6123      	str	r3, [r4, #16]
 800ba26:	4616      	mov	r6, r2
 800ba28:	e7bc      	b.n	800b9a4 <_printf_i+0x148>
 800ba2a:	6833      	ldr	r3, [r6, #0]
 800ba2c:	1d1a      	adds	r2, r3, #4
 800ba2e:	6032      	str	r2, [r6, #0]
 800ba30:	681e      	ldr	r6, [r3, #0]
 800ba32:	6862      	ldr	r2, [r4, #4]
 800ba34:	2100      	movs	r1, #0
 800ba36:	4630      	mov	r0, r6
 800ba38:	f7f4 fc1a 	bl	8000270 <memchr>
 800ba3c:	b108      	cbz	r0, 800ba42 <_printf_i+0x1e6>
 800ba3e:	1b80      	subs	r0, r0, r6
 800ba40:	6060      	str	r0, [r4, #4]
 800ba42:	6863      	ldr	r3, [r4, #4]
 800ba44:	6123      	str	r3, [r4, #16]
 800ba46:	2300      	movs	r3, #0
 800ba48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba4c:	e7aa      	b.n	800b9a4 <_printf_i+0x148>
 800ba4e:	6923      	ldr	r3, [r4, #16]
 800ba50:	4632      	mov	r2, r6
 800ba52:	4649      	mov	r1, r9
 800ba54:	4640      	mov	r0, r8
 800ba56:	47d0      	blx	sl
 800ba58:	3001      	adds	r0, #1
 800ba5a:	d0ad      	beq.n	800b9b8 <_printf_i+0x15c>
 800ba5c:	6823      	ldr	r3, [r4, #0]
 800ba5e:	079b      	lsls	r3, r3, #30
 800ba60:	d413      	bmi.n	800ba8a <_printf_i+0x22e>
 800ba62:	68e0      	ldr	r0, [r4, #12]
 800ba64:	9b03      	ldr	r3, [sp, #12]
 800ba66:	4298      	cmp	r0, r3
 800ba68:	bfb8      	it	lt
 800ba6a:	4618      	movlt	r0, r3
 800ba6c:	e7a6      	b.n	800b9bc <_printf_i+0x160>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	4632      	mov	r2, r6
 800ba72:	4649      	mov	r1, r9
 800ba74:	4640      	mov	r0, r8
 800ba76:	47d0      	blx	sl
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d09d      	beq.n	800b9b8 <_printf_i+0x15c>
 800ba7c:	3501      	adds	r5, #1
 800ba7e:	68e3      	ldr	r3, [r4, #12]
 800ba80:	9903      	ldr	r1, [sp, #12]
 800ba82:	1a5b      	subs	r3, r3, r1
 800ba84:	42ab      	cmp	r3, r5
 800ba86:	dcf2      	bgt.n	800ba6e <_printf_i+0x212>
 800ba88:	e7eb      	b.n	800ba62 <_printf_i+0x206>
 800ba8a:	2500      	movs	r5, #0
 800ba8c:	f104 0619 	add.w	r6, r4, #25
 800ba90:	e7f5      	b.n	800ba7e <_printf_i+0x222>
 800ba92:	bf00      	nop
 800ba94:	0800beb6 	.word	0x0800beb6
 800ba98:	0800bec7 	.word	0x0800bec7

0800ba9c <memmove>:
 800ba9c:	4288      	cmp	r0, r1
 800ba9e:	b510      	push	{r4, lr}
 800baa0:	eb01 0402 	add.w	r4, r1, r2
 800baa4:	d902      	bls.n	800baac <memmove+0x10>
 800baa6:	4284      	cmp	r4, r0
 800baa8:	4623      	mov	r3, r4
 800baaa:	d807      	bhi.n	800babc <memmove+0x20>
 800baac:	1e43      	subs	r3, r0, #1
 800baae:	42a1      	cmp	r1, r4
 800bab0:	d008      	beq.n	800bac4 <memmove+0x28>
 800bab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baba:	e7f8      	b.n	800baae <memmove+0x12>
 800babc:	4402      	add	r2, r0
 800babe:	4601      	mov	r1, r0
 800bac0:	428a      	cmp	r2, r1
 800bac2:	d100      	bne.n	800bac6 <memmove+0x2a>
 800bac4:	bd10      	pop	{r4, pc}
 800bac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bace:	e7f7      	b.n	800bac0 <memmove+0x24>

0800bad0 <_realloc_r>:
 800bad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad4:	4680      	mov	r8, r0
 800bad6:	4615      	mov	r5, r2
 800bad8:	460c      	mov	r4, r1
 800bada:	b921      	cbnz	r1, 800bae6 <_realloc_r+0x16>
 800badc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bae0:	4611      	mov	r1, r2
 800bae2:	f7ff ba9f 	b.w	800b024 <_malloc_r>
 800bae6:	b92a      	cbnz	r2, 800baf4 <_realloc_r+0x24>
 800bae8:	f7ff fca8 	bl	800b43c <_free_r>
 800baec:	2400      	movs	r4, #0
 800baee:	4620      	mov	r0, r4
 800baf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf4:	f000 f81a 	bl	800bb2c <_malloc_usable_size_r>
 800baf8:	4285      	cmp	r5, r0
 800bafa:	4606      	mov	r6, r0
 800bafc:	d802      	bhi.n	800bb04 <_realloc_r+0x34>
 800bafe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb02:	d8f4      	bhi.n	800baee <_realloc_r+0x1e>
 800bb04:	4629      	mov	r1, r5
 800bb06:	4640      	mov	r0, r8
 800bb08:	f7ff fa8c 	bl	800b024 <_malloc_r>
 800bb0c:	4607      	mov	r7, r0
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d0ec      	beq.n	800baec <_realloc_r+0x1c>
 800bb12:	42b5      	cmp	r5, r6
 800bb14:	462a      	mov	r2, r5
 800bb16:	4621      	mov	r1, r4
 800bb18:	bf28      	it	cs
 800bb1a:	4632      	movcs	r2, r6
 800bb1c:	f7ff fc80 	bl	800b420 <memcpy>
 800bb20:	4621      	mov	r1, r4
 800bb22:	4640      	mov	r0, r8
 800bb24:	f7ff fc8a 	bl	800b43c <_free_r>
 800bb28:	463c      	mov	r4, r7
 800bb2a:	e7e0      	b.n	800baee <_realloc_r+0x1e>

0800bb2c <_malloc_usable_size_r>:
 800bb2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb30:	1f18      	subs	r0, r3, #4
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfbc      	itt	lt
 800bb36:	580b      	ldrlt	r3, [r1, r0]
 800bb38:	18c0      	addlt	r0, r0, r3
 800bb3a:	4770      	bx	lr

0800bb3c <_init>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	bf00      	nop
 800bb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb42:	bc08      	pop	{r3}
 800bb44:	469e      	mov	lr, r3
 800bb46:	4770      	bx	lr

0800bb48 <_fini>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	bf00      	nop
 800bb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4e:	bc08      	pop	{r3}
 800bb50:	469e      	mov	lr, r3
 800bb52:	4770      	bx	lr
