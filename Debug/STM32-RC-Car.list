
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b794  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0800b994  0800b994  0000c994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd10  0800bd10  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd10  0800bd10  0000cd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd18  0800bd18  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd18  0800bd18  0000cd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd1c  0800bd1c  0000cd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800bd20  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005438  20000060  0800bd80  0000d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005498  0800bd80  0000d498  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002251b  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e00  00000000  00000000  0002f5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  000343b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a4  00000000  00000000  00035f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c211  00000000  00000000  0003753c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023650  00000000  00000000  0006374d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109602  00000000  00000000  00086d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019039f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b0c  00000000  00000000  001903e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00197ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b97c 	.word	0x0800b97c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800b97c 	.word	0x0800b97c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <MX_DMA_Init+0x48>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <MX_DMA_Init+0x48>)
 800060c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_DMA_Init+0x48>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	2010      	movs	r0, #16
 8000624:	f001 ff59 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000628:	2010      	movs	r0, #16
 800062a:	f001 ff72 	bl	8002512 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2105      	movs	r1, #5
 8000632:	2011      	movs	r0, #17
 8000634:	f001 ff51 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000638:	2011      	movs	r0, #17
 800063a:	f001 ff6a 	bl	8002512 <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
 8000650:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <MX_FREERTOS_Init+0x28>)
 8000652:	2100      	movs	r1, #0
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <MX_FREERTOS_Init+0x2c>)
 8000656:	f007 f9b1 	bl	80079bc <osThreadNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a07      	ldr	r2, [pc, #28]	@ (800067c <MX_FREERTOS_Init+0x30>)
 800065e:	6013      	str	r3, [r2, #0]
  heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 8000660:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <MX_FREERTOS_Init+0x34>)
 8000662:	2100      	movs	r1, #0
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <MX_FREERTOS_Init+0x38>)
 8000666:	f007 f9a9 	bl	80079bc <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a06      	ldr	r2, [pc, #24]	@ (8000688 <MX_FREERTOS_Init+0x3c>)
 800066e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0800bb74 	.word	0x0800bb74
 8000678:	08000d2d 	.word	0x08000d2d
 800067c:	2000007c 	.word	0x2000007c
 8000680:	0800bb98 	.word	0x0800bb98
 8000684:	08000dd1 	.word	0x08000dd1
 8000688:	20000080 	.word	0x20000080

0800068c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	@ 0x30
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b77      	ldr	r3, [pc, #476]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a76      	ldr	r2, [pc, #472]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b74      	ldr	r3, [pc, #464]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	61bb      	str	r3, [r7, #24]
 80006b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b71      	ldr	r3, [pc, #452]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a70      	ldr	r2, [pc, #448]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b6e      	ldr	r3, [pc, #440]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a6a      	ldr	r2, [pc, #424]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b68      	ldr	r3, [pc, #416]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b65      	ldr	r3, [pc, #404]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a64      	ldr	r2, [pc, #400]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b62      	ldr	r3, [pc, #392]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000702:	4b5f      	ldr	r3, [pc, #380]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a5e      	ldr	r2, [pc, #376]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b5c      	ldr	r3, [pc, #368]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071a:	4b59      	ldr	r3, [pc, #356]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a58      	ldr	r2, [pc, #352]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b56      	ldr	r3, [pc, #344]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0310 	and.w	r3, r3, #16
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b53      	ldr	r3, [pc, #332]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a52      	ldr	r2, [pc, #328]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b50      	ldr	r3, [pc, #320]	@ (8000880 <MX_GPIO_Init+0x1f4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000750:	484c      	ldr	r0, [pc, #304]	@ (8000884 <MX_GPIO_Init+0x1f8>)
 8000752:	f002 fcbb 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2141      	movs	r1, #65	@ 0x41
 800075a:	484b      	ldr	r0, [pc, #300]	@ (8000888 <MX_GPIO_Init+0x1fc>)
 800075c:	f002 fcb6 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2110      	movs	r1, #16
 8000764:	4849      	ldr	r0, [pc, #292]	@ (800088c <MX_GPIO_Init+0x200>)
 8000766:	f002 fcb1 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000770:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4843      	ldr	r0, [pc, #268]	@ (8000890 <MX_GPIO_Init+0x204>)
 8000782:	f002 faf7 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000786:	2332      	movs	r3, #50	@ 0x32
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000796:	230b      	movs	r3, #11
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	483b      	ldr	r0, [pc, #236]	@ (8000890 <MX_GPIO_Init+0x204>)
 80007a2:	f002 fae7 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007a6:	2386      	movs	r3, #134	@ 0x86
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b6:	230b      	movs	r3, #11
 80007b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4834      	ldr	r0, [pc, #208]	@ (8000894 <MX_GPIO_Init+0x208>)
 80007c2:	f002 fad7 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007c6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4829      	ldr	r0, [pc, #164]	@ (8000884 <MX_GPIO_Init+0x1f8>)
 80007e0:	f002 fac8 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 80007e4:	2341      	movs	r3, #65	@ 0x41
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4823      	ldr	r0, [pc, #140]	@ (8000888 <MX_GPIO_Init+0x1fc>)
 80007fc:	f002 faba 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000812:	230b      	movs	r3, #11
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4819      	ldr	r0, [pc, #100]	@ (8000884 <MX_GPIO_Init+0x1f8>)
 800081e:	f002 faa9 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4814      	ldr	r0, [pc, #80]	@ (8000888 <MX_GPIO_Init+0x1fc>)
 8000836:	f002 fa9d 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800083a:	2310      	movs	r3, #16
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480e      	ldr	r0, [pc, #56]	@ (800088c <MX_GPIO_Init+0x200>)
 8000852:	f002 fa8f 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000856:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000868:	230b      	movs	r3, #11
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_GPIO_Init+0x1fc>)
 8000874:	f002 fa7e 	bl	8002d74 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	@ 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020400 	.word	0x40020400
 8000888:	40021800 	.word	0x40021800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40020800 	.word	0x40020800
 8000894:	40020000 	.word	0x40020000

08000898 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <HAL_UARTEx_RxEventCallback+0x28>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d104      	bne.n	80008b8 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <HAL_UARTEx_RxEventCallback+0x2c>)
 80008b4:	f00a fa30 	bl	800ad18 <ATC_IdleLineCallback>
	}
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40004400 	.word	0x40004400
 80008c4:	20000084 	.word	0x20000084

080008c8 <pid_init>:
	float Kd;			//Wzmocnienie członu różniczkującego*/
	int anti_windup_limit;		//Anti-Windup - ograniczenie członu całkującego*/
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6178      	str	r0, [r7, #20]
 80008d0:	ed87 0a04 	vstr	s0, [r7, #16]
 80008d4:	edc7 0a03 	vstr	s1, [r7, #12]
 80008d8:	ed87 1a02 	vstr	s2, [r7, #8]
 80008dc:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	615a      	str	r2, [r3, #20]
}
 8000902:	bf00      	nop
 8000904:	371c      	adds	r7, #28
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <pid_reset>:

void pid_reset(PID *pid_data)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 800092e:	b480      	push	{r7}
 8000930:	b089      	sub	sp, #36	@ 0x24
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	441a      	add	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	ed93 7a02 	vldr	s14, [r3, #8]
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000962:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	ed93 7a03 	vldr	s14, [r3, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800097c:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	ed93 7a04 	vldr	s14, [r3, #16]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800099a:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80009ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009b6:	db08      	blt.n	80009ca <pid_calculate+0x9c>
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c4:	edc7 7a07 	vstr	s15, [r7, #28]
 80009c8:	e016      	b.n	80009f8 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	425b      	negs	r3, r3
 80009d0:	ee07 3a90 	vmov	s15, r3
 80009d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80009dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e4:	d808      	bhi.n	80009f8 <pid_calculate+0xca>
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	425b      	negs	r3, r3
 80009ec:	ee07 3a90 	vmov	s15, r3
 80009f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f4:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 80009fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a02:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a16:	ee17 3a90 	vmov	r3, s15
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000a3c:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f82a 	bl	8000ac4 <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000a78:	fb02 f303 	mul.w	r3, r2, r3
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	8892      	ldrh	r2, [r2, #4]
 8000a80:	fb93 f2f2 	sdiv	r2, r3, r2
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f103 0018 	add.w	r0, r3, #24
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6919      	ldr	r1, [r3, #16]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f7ff ff49 	bl	800092e <pid_calculate>
 8000a9c:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	695a      	ldr	r2, [r3, #20]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	441a      	add	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db04      	blt.n	8000abc <motor_calculate_speed+0x5a>
	{
		//drv8835_set_motorA_direction(CW);
		drv8835_set_motorA_speed(m->actual_PWM);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f832 	bl	8000b20 <drv8835_set_motorA_speed>
	else
	{
		//drv8835_set_motorA_direction(CCW);
		//drv8835_set_motorA_speed(-m->actual_PWM);
	}
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d004      	beq.n	8000b10 <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3318      	adds	r3, #24
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff feff 	bl	800090e <pid_reset>

	m->set_speed = set_speed;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	611a      	str	r2, [r3, #16]
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000b2a:	88fa      	ldrh	r2, [r7, #6]
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <drv8835_set_motorA_speed+0x34>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d303      	bcc.n	8000b3e <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000b36:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <drv8835_set_motorA_speed+0x34>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <drv8835_set_motorA_speed+0x34>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	88fa      	ldrh	r2, [r7, #6]
 8000b44:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000140 	.word	0x20000140

08000b58 <drv8835_init>:

void drv8835_init()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	//drv8835_mode_control(Phase_Enable_Mode);
	//drv8835_set_motorA_direction(CCW);
	drv8835_set_motorA_speed(0);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ffdf 	bl	8000b20 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b62:	2100      	movs	r1, #0
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <drv8835_init+0x18>)
 8000b66:	f003 fea3 	bl	80048b0 <HAL_TIM_PWM_Start>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000140 	.word	0x20000140

08000b74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d102      	bne.n	8000b8c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000b86:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b88:	f7ff ff6b 	bl	8000a62 <motor_calculate_speed>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40001000 	.word	0x40001000
 8000b98:	200000c0 	.word	0x200000c0

08000b9c <ProcessCommand>:
    // Wyślij dane na UART3, aby były widoczne w terminalu
    HAL_UART_Transmit(&huart3, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);  // Dodaj nową linię
}

void ProcessCommand(uint8_t* cmd) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	// Sprawdź, czy komenda to LIGHTS
	    if (strcmp((char*)cmd, "LIGHTS") == 0) {
 8000ba4:	4951      	ldr	r1, [pc, #324]	@ (8000cec <ProcessCommand+0x150>)
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fb4a 	bl	8000240 <strcmp>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d104      	bne.n	8000bbc <ProcessCommand+0x20>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	484e      	ldr	r0, [pc, #312]	@ (8000cf0 <ProcessCommand+0x154>)
 8000bb6:	f002 faa2 	bl	80030fe <HAL_GPIO_TogglePin>
	    }
	    // Nieznana komenda
	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000bba:	e093      	b.n	8000ce4 <ProcessCommand+0x148>
	    else if (strncmp((char*)cmd, "MOTOR", 5) == 0) { // Sprawdź, czy zaczyna się od "MOTOR"
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	494d      	ldr	r1, [pc, #308]	@ (8000cf4 <ProcessCommand+0x158>)
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f00a face 	bl	800b162 <strncmp>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f040 8084 	bne.w	8000cd6 <ProcessCommand+0x13a>
	        char* modeStr = (char*)cmd + 5; // Wskaźnik na część po "MOTOR"
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3305      	adds	r3, #5
 8000bd2:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);       // Zamiana cyfry trybu na liczbę całkowitą
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f00a f90e 	bl	800adf6 <atoi>
 8000bda:	60b8      	str	r0, [r7, #8]
	        if (mode >= 0 && mode <= 8) {   // Sprawdzenie, czy tryb mieści się w zakresie 0-8
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db71      	blt.n	8000cc6 <ProcessCommand+0x12a>
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	2b08      	cmp	r3, #8
 8000be6:	dc6e      	bgt.n	8000cc6 <ProcessCommand+0x12a>
	            switch (mode) {
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d868      	bhi.n	8000cc0 <ProcessCommand+0x124>
 8000bee:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf4 <ProcessCommand+0x58>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c19 	.word	0x08000c19
 8000bf8:	08000c31 	.word	0x08000c31
 8000bfc:	08000c49 	.word	0x08000c49
 8000c00:	08000c61 	.word	0x08000c61
 8000c04:	08000c71 	.word	0x08000c71
 8000c08:	08000c81 	.word	0x08000c81
 8000c0c:	08000c91 	.word	0x08000c91
 8000c10:	08000ca1 	.word	0x08000ca1
 8000c14:	08000cb1 	.word	0x08000cb1
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	2212      	movs	r2, #18
 8000c1e:	4936      	ldr	r1, [pc, #216]	@ (8000cf8 <ProcessCommand+0x15c>)
 8000c20:	4836      	ldr	r0, [pc, #216]	@ (8000cfc <ProcessCommand+0x160>)
 8000c22:	f004 fee1 	bl	80059e8 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 0);
 8000c26:	2100      	movs	r1, #0
 8000c28:	4835      	ldr	r0, [pc, #212]	@ (8000d00 <ProcessCommand+0x164>)
 8000c2a:	f7ff ff62 	bl	8000af2 <motor_set_speed>
	                    break;
 8000c2e:	e048      	b.n	8000cc2 <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
 8000c34:	2212      	movs	r2, #18
 8000c36:	4933      	ldr	r1, [pc, #204]	@ (8000d04 <ProcessCommand+0x168>)
 8000c38:	4830      	ldr	r0, [pc, #192]	@ (8000cfc <ProcessCommand+0x160>)
 8000c3a:	f004 fed5 	bl	80059e8 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 100);
 8000c3e:	2164      	movs	r1, #100	@ 0x64
 8000c40:	482f      	ldr	r0, [pc, #188]	@ (8000d00 <ProcessCommand+0x164>)
 8000c42:	f7ff ff56 	bl	8000af2 <motor_set_speed>
	                    break;
 8000c46:	e03c      	b.n	8000cc2 <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2212      	movs	r2, #18
 8000c4e:	492e      	ldr	r1, [pc, #184]	@ (8000d08 <ProcessCommand+0x16c>)
 8000c50:	482a      	ldr	r0, [pc, #168]	@ (8000cfc <ProcessCommand+0x160>)
 8000c52:	f004 fec9 	bl	80059e8 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 75);
 8000c56:	214b      	movs	r1, #75	@ 0x4b
 8000c58:	4829      	ldr	r0, [pc, #164]	@ (8000d00 <ProcessCommand+0x164>)
 8000c5a:	f7ff ff4a 	bl	8000af2 <motor_set_speed>
	                    break;
 8000c5e:	e030      	b.n	8000cc2 <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	2212      	movs	r2, #18
 8000c66:	4929      	ldr	r1, [pc, #164]	@ (8000d0c <ProcessCommand+0x170>)
 8000c68:	4824      	ldr	r0, [pc, #144]	@ (8000cfc <ProcessCommand+0x160>)
 8000c6a:	f004 febd 	bl	80059e8 <HAL_UART_Transmit>
	                    break;
 8000c6e:	e028      	b.n	8000cc2 <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	2212      	movs	r2, #18
 8000c76:	4926      	ldr	r1, [pc, #152]	@ (8000d10 <ProcessCommand+0x174>)
 8000c78:	4820      	ldr	r0, [pc, #128]	@ (8000cfc <ProcessCommand+0x160>)
 8000c7a:	f004 feb5 	bl	80059e8 <HAL_UART_Transmit>
	                    break;
 8000c7e:	e020      	b.n	8000cc2 <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
 8000c84:	2212      	movs	r2, #18
 8000c86:	4923      	ldr	r1, [pc, #140]	@ (8000d14 <ProcessCommand+0x178>)
 8000c88:	481c      	ldr	r0, [pc, #112]	@ (8000cfc <ProcessCommand+0x160>)
 8000c8a:	f004 fead 	bl	80059e8 <HAL_UART_Transmit>
	                    break;
 8000c8e:	e018      	b.n	8000cc2 <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	2212      	movs	r2, #18
 8000c96:	4920      	ldr	r1, [pc, #128]	@ (8000d18 <ProcessCommand+0x17c>)
 8000c98:	4818      	ldr	r0, [pc, #96]	@ (8000cfc <ProcessCommand+0x160>)
 8000c9a:	f004 fea5 	bl	80059e8 <HAL_UART_Transmit>
	                    break;
 8000c9e:	e010      	b.n	8000cc2 <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	2212      	movs	r2, #18
 8000ca6:	491d      	ldr	r1, [pc, #116]	@ (8000d1c <ProcessCommand+0x180>)
 8000ca8:	4814      	ldr	r0, [pc, #80]	@ (8000cfc <ProcessCommand+0x160>)
 8000caa:	f004 fe9d 	bl	80059e8 <HAL_UART_Transmit>
	                    break;
 8000cae:	e008      	b.n	8000cc2 <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	2212      	movs	r2, #18
 8000cb6:	491a      	ldr	r1, [pc, #104]	@ (8000d20 <ProcessCommand+0x184>)
 8000cb8:	4810      	ldr	r0, [pc, #64]	@ (8000cfc <ProcessCommand+0x160>)
 8000cba:	f004 fe95 	bl	80059e8 <HAL_UART_Transmit>
	                    break;
 8000cbe:	e000      	b.n	8000cc2 <ProcessCommand+0x126>
	                    break; // Nie powinno wystąpić
 8000cc0:	bf00      	nop
	            switch (mode) {
 8000cc2:	bf00      	nop
}
 8000cc4:	e00e      	b.n	8000ce4 <ProcessCommand+0x148>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	2215      	movs	r2, #21
 8000ccc:	4915      	ldr	r1, [pc, #84]	@ (8000d24 <ProcessCommand+0x188>)
 8000cce:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <ProcessCommand+0x160>)
 8000cd0:	f004 fe8a 	bl	80059e8 <HAL_UART_Transmit>
}
 8000cd4:	e006      	b.n	8000ce4 <ProcessCommand+0x148>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	2211      	movs	r2, #17
 8000cdc:	4912      	ldr	r1, [pc, #72]	@ (8000d28 <ProcessCommand+0x18c>)
 8000cde:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <ProcessCommand+0x160>)
 8000ce0:	f004 fe82 	bl	80059e8 <HAL_UART_Transmit>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	0800b9b0 	.word	0x0800b9b0
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	0800b9b8 	.word	0x0800b9b8
 8000cf8:	0800b9c0 	.word	0x0800b9c0
 8000cfc:	200003dc 	.word	0x200003dc
 8000d00:	200000c0 	.word	0x200000c0
 8000d04:	0800b9d4 	.word	0x0800b9d4
 8000d08:	0800b9e8 	.word	0x0800b9e8
 8000d0c:	0800b9fc 	.word	0x0800b9fc
 8000d10:	0800ba10 	.word	0x0800ba10
 8000d14:	0800ba24 	.word	0x0800ba24
 8000d18:	0800ba38 	.word	0x0800ba38
 8000d1c:	0800ba4c 	.word	0x0800ba4c
 8000d20:	0800ba60 	.word	0x0800ba60
 8000d24:	0800ba74 	.word	0x0800ba74
 8000d28:	0800ba8c 	.word	0x0800ba8c

08000d2c <ProcessIncomingData>:

// Funkcja obsługująca przetwarzanie danych przychodzących przez ESP
void ProcessIncomingData(void* argument) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	6078      	str	r0, [r7, #4]
	char *response = NULL; // Wskaźnik na odebrane dane
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
	    while (1) {
	        // Oczekiwanie na odpowiedź zawierającą +IPD
	        int result = ATC_Receive(&ESP, &response, 5000, 1, "+IPD,");
 8000d38:	f107 0108 	add.w	r1, r7, #8
 8000d3c:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <ProcessIncomingData+0x94>)
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d46:	481f      	ldr	r0, [pc, #124]	@ (8000dc4 <ProcessIncomingData+0x98>)
 8000d48:	f009 ff35 	bl	800abb6 <ATC_Receive>
 8000d4c:	6178      	str	r0, [r7, #20]
	        if (result > 0 && response != NULL) {
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	dd2e      	ble.n	8000db2 <ProcessIncomingData+0x86>
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d02b      	beq.n	8000db2 <ProcessIncomingData+0x86>
	            // Przetwarzanie odpowiedzi zawierającej +IPD
	            char *ipdStart = strstr(response, "+IPD,");
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	4918      	ldr	r1, [pc, #96]	@ (8000dc0 <ProcessIncomingData+0x94>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f00a fa24 	bl	800b1ac <strstr>
 8000d64:	6138      	str	r0, [r7, #16]
	            if (ipdStart != NULL) {
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d01f      	beq.n	8000dac <ProcessIncomingData+0x80>
	                // Znajdź początek danych (po dwukropku ':')
	                char *dataStart = strchr(ipdStart, ':');
 8000d6c:	213a      	movs	r1, #58	@ 0x3a
 8000d6e:	6938      	ldr	r0, [r7, #16]
 8000d70:	f00a f9ea 	bl	800b148 <strchr>
 8000d74:	60f8      	str	r0, [r7, #12]
	                if (dataStart != NULL) {
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d017      	beq.n	8000dac <ProcessIncomingData+0x80>
	                    dataStart++; // Przesuń za dwukropek, aby przejść do danych
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
	                    // Wyślij dane na UART3
	                    HAL_UART_Transmit(&huart3, (uint8_t *)dataStart, strlen(dataStart), HAL_MAX_DELAY);
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f7ff fa66 	bl	8000254 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	68f9      	ldr	r1, [r7, #12]
 8000d92:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <ProcessIncomingData+0x9c>)
 8000d94:	f004 fe28 	bl	80059e8 <HAL_UART_Transmit>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Nowa linia dla przejrzystości
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	490b      	ldr	r1, [pc, #44]	@ (8000dcc <ProcessIncomingData+0xa0>)
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <ProcessIncomingData+0x9c>)
 8000da2:	f004 fe21 	bl	80059e8 <HAL_UART_Transmit>
	                    ProcessCommand((uint8_t *)dataStart);
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f7ff fef8 	bl	8000b9c <ProcessCommand>
	                }
	            }
	            ATC_RxFlush(&ESP); // Wyczyść bufor dla nowych danych
 8000dac:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <ProcessIncomingData+0x98>)
 8000dae:	f009 fbc4 	bl	800a53a <ATC_RxFlush>
	        }

	        // Wywołanie głównej pętli ATC
	        ATC_Loop(&ESP);
 8000db2:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <ProcessIncomingData+0x98>)
 8000db4:	f009 fdba 	bl	800a92c <ATC_Loop>
	        osDelay(50);
 8000db8:	2032      	movs	r0, #50	@ 0x32
 8000dba:	f006 fea5 	bl	8007b08 <osDelay>
	    while (1) {
 8000dbe:	e7bb      	b.n	8000d38 <ProcessIncomingData+0xc>
 8000dc0:	0800baa0 	.word	0x0800baa0
 8000dc4:	20000084 	.word	0x20000084
 8000dc8:	200003dc 	.word	0x200003dc
 8000dcc:	0800b9ac 	.word	0x0800b9ac

08000dd0 <ProcessHeartBeat>:
	    }
}

void ProcessHeartBeat(void* argument) {
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b08f      	sub	sp, #60	@ 0x3c
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    const char *heartbeatMessage = "HB\r\n"; // Treść wiadomości
 8000dd8:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <ProcessHeartBeat+0x64>)
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
    const uint8_t channel = 0; // Kanał komunikacji (dla CIPMUX=1)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    const int timeout = 1000; // Timeout na odpowiedź
 8000de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char command[32];

    while (1) {
        // Przygotuj komendę AT do wysłania danych
        sprintf(command, "AT+CIPSEND=%d,%d\r\n", channel, strlen(heartbeatMessage) - 2);
 8000de8:	f897 4033 	ldrb.w	r4, [r7, #51]	@ 0x33
 8000dec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000dee:	f7ff fa31 	bl	8000254 <strlen>
 8000df2:	4603      	mov	r3, r0
 8000df4:	3b02      	subs	r3, #2
 8000df6:	f107 000c 	add.w	r0, r7, #12
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	490e      	ldr	r1, [pc, #56]	@ (8000e38 <ProcessHeartBeat+0x68>)
 8000dfe:	f00a f941 	bl	800b084 <siprintf>

        // Wyślij komendę otwierającą wysyłkę danych
        ATC_Send(&ESP, command, timeout);
 8000e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <ProcessHeartBeat+0x6c>)
 8000e0c:	f009 fe7b 	bl	800ab06 <ATC_Send>
        osDelay(100); // Krótka przerwa na przetworzenie
 8000e10:	2064      	movs	r0, #100	@ 0x64
 8000e12:	f006 fe79 	bl	8007b08 <osDelay>

        // Wyślij faktyczną wiadomość
        ATC_Send(&ESP, heartbeatMessage, timeout);
 8000e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e18:	461a      	mov	r2, r3
 8000e1a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000e1c:	4807      	ldr	r0, [pc, #28]	@ (8000e3c <ProcessHeartBeat+0x6c>)
 8000e1e:	f009 fe72 	bl	800ab06 <ATC_Send>

        // Wywołanie głównej pętli ATC
        ATC_Loop(&ESP);
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <ProcessHeartBeat+0x6c>)
 8000e24:	f009 fd82 	bl	800a92c <ATC_Loop>

        // Odczekaj 1 sekundę
        osDelay(900);
 8000e28:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000e2c:	f006 fe6c 	bl	8007b08 <osDelay>
        sprintf(command, "AT+CIPSEND=%d,%d\r\n", channel, strlen(heartbeatMessage) - 2);
 8000e30:	bf00      	nop
 8000e32:	e7d9      	b.n	8000de8 <ProcessHeartBeat+0x18>
 8000e34:	0800baa8 	.word	0x0800baa8
 8000e38:	0800bab0 	.word	0x0800bab0
 8000e3c:	20000084 	.word	0x20000084

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f001 f9ec 	bl	8002222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f8d1 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4e:	f7ff fc1d 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e52:	f7ff fbd5 	bl	8000600 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000e56:	f000 ffcb 	bl	8001df0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e5a:	f001 f911 	bl	8002080 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000e5e:	f000 ff97 	bl	8001d90 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e62:	f000 fa83 	bl	800136c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e66:	f000 fb3f 	bl	80014e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e6a:	f000 fb93 	bl	8001594 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e6e:	f000 fc85 	bl	800177c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000e72:	f000 fad5 	bl	8001420 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e76:	f000 fc49 	bl	800170c <MX_TIM6_Init>
  MX_TIM5_Init();
 8000e7a:	f000 fbe1 	bl	8001640 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000e7e:	f000 fcd7 	bl	8001830 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  ATC_Init(&ESP, &huart2, 512, "ESP");
 8000e82:	4b47      	ldr	r3, [pc, #284]	@ (8000fa0 <main+0x160>)
 8000e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e88:	4946      	ldr	r1, [pc, #280]	@ (8000fa4 <main+0x164>)
 8000e8a:	4847      	ldr	r0, [pc, #284]	@ (8000fa8 <main+0x168>)
 8000e8c:	f009 fca9 	bl	800a7e2 <ATC_Init>
  ATC_SendReceive(&ESP, "AT\r\n", 1000, NULL, 1000, 0);
 8000e90:	2300      	movs	r3, #0
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ea0:	4942      	ldr	r1, [pc, #264]	@ (8000fac <main+0x16c>)
 8000ea2:	4841      	ldr	r0, [pc, #260]	@ (8000fa8 <main+0x168>)
 8000ea4:	f009 fd50 	bl	800a948 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWMODE=1\r\n", 1000, NULL, 1000, 0);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eb8:	493d      	ldr	r1, [pc, #244]	@ (8000fb0 <main+0x170>)
 8000eba:	483b      	ldr	r0, [pc, #236]	@ (8000fa8 <main+0x168>)
 8000ebc:	f009 fd44 	bl	800a948 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMUX=1\r\n", 1000, NULL, 1000, 0);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ed0:	4938      	ldr	r1, [pc, #224]	@ (8000fb4 <main+0x174>)
 8000ed2:	4835      	ldr	r0, [pc, #212]	@ (8000fa8 <main+0x168>)
 8000ed4:	f009 fd38 	bl	800a948 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMODE=1\r\n", 1000, NULL, 1000, 0);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ee8:	4933      	ldr	r1, [pc, #204]	@ (8000fb8 <main+0x178>)
 8000eea:	482f      	ldr	r0, [pc, #188]	@ (8000fa8 <main+0x168>)
 8000eec:	f009 fd2c 	bl	800a948 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPSERVER=1,80\r\n", 1000, NULL, 1000, 0);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f00:	492e      	ldr	r1, [pc, #184]	@ (8000fbc <main+0x17c>)
 8000f02:	4829      	ldr	r0, [pc, #164]	@ (8000fa8 <main+0x168>)
 8000f04:	f009 fd20 	bl	800a948 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWJAP=\"DeathLock\",\"\"\r\n", 10000, NULL, 10000, 0);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f18:	4929      	ldr	r1, [pc, #164]	@ (8000fc0 <main+0x180>)
 8000f1a:	4823      	ldr	r0, [pc, #140]	@ (8000fa8 <main+0x168>)
 8000f1c:	f009 fd14 	bl	800a948 <ATC_SendReceive>

  const char *readyMsg = "STM32 ready to receive data from ESP...\r\n";
 8000f20:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <main+0x184>)
 8000f22:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff f995 	bl	8000254 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4824      	ldr	r0, [pc, #144]	@ (8000fc8 <main+0x188>)
 8000f36:	f004 fd57 	bl	80059e8 <HAL_UART_Transmit>



  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f3a:	213c      	movs	r1, #60	@ 0x3c
 8000f3c:	4823      	ldr	r0, [pc, #140]	@ (8000fcc <main+0x18c>)
 8000f3e:	f003 fe57 	bl	8004bf0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f42:	213c      	movs	r1, #60	@ 0x3c
 8000f44:	4822      	ldr	r0, [pc, #136]	@ (8000fd0 <main+0x190>)
 8000f46:	f003 fe53 	bl	8004bf0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f4a:	213c      	movs	r1, #60	@ 0x3c
 8000f4c:	4821      	ldr	r0, [pc, #132]	@ (8000fd4 <main+0x194>)
 8000f4e:	f003 fe4f 	bl	8004bf0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000f52:	213c      	movs	r1, #60	@ 0x3c
 8000f54:	4820      	ldr	r0, [pc, #128]	@ (8000fd8 <main+0x198>)
 8000f56:	f003 fe4b 	bl	8004bf0 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	481f      	ldr	r0, [pc, #124]	@ (8000fdc <main+0x19c>)
 8000f5e:	f003 fca7 	bl	80048b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f62:	210c      	movs	r1, #12
 8000f64:	481d      	ldr	r0, [pc, #116]	@ (8000fdc <main+0x19c>)
 8000f66:	f003 fca3 	bl	80048b0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8000f6a:	481d      	ldr	r0, [pc, #116]	@ (8000fe0 <main+0x1a0>)
 8000f6c:	f003 fbd0 	bl	8004710 <HAL_TIM_Base_Start_IT>

  drv8835_init();
 8000f70:	f7ff fdf2 	bl	8000b58 <drv8835_init>
  motor_init(&motorA, &htim4);
 8000f74:	4917      	ldr	r1, [pc, #92]	@ (8000fd4 <main+0x194>)
 8000f76:	481b      	ldr	r0, [pc, #108]	@ (8000fe4 <main+0x1a4>)
 8000f78:	f7ff fd55 	bl	8000a26 <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8000fe8 <main+0x1a8>
 8000f82:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000fe8 <main+0x1a8>
 8000f86:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000f8a:	4818      	ldr	r0, [pc, #96]	@ (8000fec <main+0x1ac>)
 8000f8c:	f7ff fc9c 	bl	80008c8 <pid_init>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f90:	f006 fcaa 	bl	80078e8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f94:	f7ff fb5a 	bl	800064c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f98:	f006 fcda 	bl	8007950 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <main+0x15c>
 8000fa0:	0800bac4 	.word	0x0800bac4
 8000fa4:	20000354 	.word	0x20000354
 8000fa8:	20000084 	.word	0x20000084
 8000fac:	0800bac8 	.word	0x0800bac8
 8000fb0:	0800bad0 	.word	0x0800bad0
 8000fb4:	0800bae0 	.word	0x0800bae0
 8000fb8:	0800baf0 	.word	0x0800baf0
 8000fbc:	0800bb00 	.word	0x0800bb00
 8000fc0:	0800bb14 	.word	0x0800bb14
 8000fc4:	0800bb30 	.word	0x0800bb30
 8000fc8:	200003dc 	.word	0x200003dc
 8000fcc:	200000f4 	.word	0x200000f4
 8000fd0:	2000018c 	.word	0x2000018c
 8000fd4:	200001d8 	.word	0x200001d8
 8000fd8:	200002bc 	.word	0x200002bc
 8000fdc:	20000140 	.word	0x20000140
 8000fe0:	20000270 	.word	0x20000270
 8000fe4:	200000c0 	.word	0x200000c0
 8000fe8:	3d4ccccd 	.word	0x3d4ccccd
 8000fec:	200000d8 	.word	0x200000d8

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	@ 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	2234      	movs	r2, #52	@ 0x34
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00a f89a 	bl	800b138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001014:	f002 f9c8 	bl	80033a8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	4b2c      	ldr	r3, [pc, #176]	@ (80010cc <SystemClock_Config+0xdc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	4a2b      	ldr	r2, [pc, #172]	@ (80010cc <SystemClock_Config+0xdc>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	@ 0x40
 8001024:	4b29      	ldr	r3, [pc, #164]	@ (80010cc <SystemClock_Config+0xdc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001030:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <SystemClock_Config+0xe0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001038:	4a25      	ldr	r2, [pc, #148]	@ (80010d0 <SystemClock_Config+0xe0>)
 800103a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <SystemClock_Config+0xe0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001050:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001054:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800105e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001060:	2304      	movs	r3, #4
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001064:	2360      	movs	r3, #96	@ 0x60
 8001066:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800106c:	2304      	movs	r3, #4
 800106e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4618      	mov	r0, r3
 800107a:	f002 f9f5 	bl	8003468 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001084:	f000 f826 	bl	80010d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001088:	f002 f99e 	bl	80033c8 <HAL_PWREx_EnableOverDrive>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001092:	f000 f81f 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001096:	230f      	movs	r3, #15
 8001098:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109a:	2302      	movs	r3, #2
 800109c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	2103      	movs	r1, #3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fc86 	bl	80039c4 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010be:	f000 f809 	bl	80010d4 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	@ 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <Error_Handler+0x8>

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_MspInit+0x4c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <HAL_MspInit+0x4c>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001108:	6453      	str	r3, [r2, #68]	@ 0x44
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	210f      	movs	r1, #15
 800111a:	f06f 0001 	mvn.w	r0, #1
 800111e:	f001 f9dc 	bl	80024da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <NMI_Handler+0x4>

08001138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <MemManage_Handler+0x4>

08001148 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <UsageFault_Handler+0x4>

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116a:	f001 f897 	bl	800229c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800116e:	f008 f945 	bl	80093fc <xTaskGetSchedulerState>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d001      	beq.n	800117c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001178:	f008 ff36 	bl	8009fe8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <DMA1_Stream5_IRQHandler+0x10>)
 8001186:	f001 fb7f 	bl	8002888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000464 	.word	0x20000464

08001194 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <DMA1_Stream6_IRQHandler+0x10>)
 800119a:	f001 fb75 	bl	8002888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200004c4 	.word	0x200004c4

080011a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80011ae:	f003 fdad 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200000f4 	.word	0x200000f4

080011bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011c2:	f003 fda3 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000f4 	.word	0x200000f4

080011d0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80011d6:	f003 fd99 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000f4 	.word	0x200000f4

080011e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <TIM1_CC_IRQHandler+0x10>)
 80011ea:	f003 fd8f 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200000f4 	.word	0x200000f4

080011f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <TIM2_IRQHandler+0x10>)
 80011fe:	f003 fd85 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000140 	.word	0x20000140

0800120c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM3_IRQHandler+0x10>)
 8001212:	f003 fd7b 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000018c 	.word	0x2000018c

08001220 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <TIM4_IRQHandler+0x10>)
 8001226:	f003 fd71 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001d8 	.word	0x200001d8

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <USART2_IRQHandler+0x10>)
 800123a:	f004 fdf3 	bl	8005e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000354 	.word	0x20000354

08001248 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <USART3_IRQHandler+0x10>)
 800124e:	f004 fde9 	bl	8005e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200003dc 	.word	0x200003dc

0800125c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001260:	4803      	ldr	r0, [pc, #12]	@ (8001270 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8001262:	f003 fd53 	bl	8004d0c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8001266:	4803      	ldr	r0, [pc, #12]	@ (8001274 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8001268:	f003 fd50 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200002bc 	.word	0x200002bc
 8001274:	20000308 	.word	0x20000308

08001278 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800127e:	f003 fd45 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200002bc 	.word	0x200002bc

0800128c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001292:	f003 fd3b 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200002bc 	.word	0x200002bc

080012a0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <TIM8_CC_IRQHandler+0x10>)
 80012a6:	f003 fd31 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200002bc 	.word	0x200002bc

080012b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <TIM5_IRQHandler+0x10>)
 80012ba:	f003 fd27 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000224 	.word	0x20000224

080012c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <TIM6_DAC_IRQHandler+0x10>)
 80012ce:	f003 fd1d 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000270 	.word	0x20000270

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f009 ff74 	bl	800b1f8 <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20080000 	.word	0x20080000
 800133c:	00000400 	.word	0x00000400
 8001340:	200000f0 	.word	0x200000f0
 8001344:	20005498 	.word	0x20005498

08001348 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	@ 0x30
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2224      	movs	r2, #36	@ 0x24
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f009 fedc 	bl	800b138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <MX_TIM1_Init+0xac>)
 800138c:	4a23      	ldr	r2, [pc, #140]	@ (800141c <MX_TIM1_Init+0xb0>)
 800138e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <MX_TIM1_Init+0xac>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <MX_TIM1_Init+0xac>)
 8001398:	2210      	movs	r2, #16
 800139a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <MX_TIM1_Init+0xac>)
 800139e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <MX_TIM1_Init+0xac>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <MX_TIM1_Init+0xac>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <MX_TIM1_Init+0xac>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013b6:	2303      	movs	r3, #3
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013be:	2301      	movs	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013c6:	230f      	movs	r3, #15
 80013c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ce:	2301      	movs	r3, #1
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80013d6:	230f      	movs	r3, #15
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4619      	mov	r1, r3
 80013e0:	480d      	ldr	r0, [pc, #52]	@ (8001418 <MX_TIM1_Init+0xac>)
 80013e2:	f003 fb5f 	bl	8004aa4 <HAL_TIM_Encoder_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80013ec:	f7ff fe72 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_TIM1_Init+0xac>)
 8001402:	f004 f9f7 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800140c:	f7ff fe62 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3730      	adds	r7, #48	@ 0x30
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200000f4 	.word	0x200000f4
 800141c:	40010000 	.word	0x40010000

08001420 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001444:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 8001446:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800144a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 800144c:	4b25      	ldr	r3, [pc, #148]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 800144e:	222f      	movs	r2, #47	@ 0x2f
 8001450:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 800145a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800145e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800146c:	481d      	ldr	r0, [pc, #116]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 800146e:	f003 f9c7 	bl	8004800 <HAL_TIM_PWM_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001478:	f7ff fe2c 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	4816      	ldr	r0, [pc, #88]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 800148c:	f004 f9b2 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001496:	f7ff fe1d 	bl	80010d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149a:	2360      	movs	r3, #96	@ 0x60
 800149c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 80014b2:	f003 fd33 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014bc:	f7ff fe0a 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	220c      	movs	r2, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 80014c8:	f003 fd28 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80014d2:	f7ff fdff 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014d6:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <MX_TIM2_Init+0xc4>)
 80014d8:	f000 fbbc 	bl	8001c54 <HAL_TIM_MspPostInit>

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	@ 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000140 	.word	0x20000140

080014e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	@ 0x30
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2224      	movs	r2, #36	@ 0x24
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f009 fe1e 	bl	800b138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <MX_TIM3_Init+0xa4>)
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <MX_TIM3_Init+0xa8>)
 800150a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <MX_TIM3_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001512:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <MX_TIM3_Init+0xa4>)
 8001514:	2210      	movs	r2, #16
 8001516:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001518:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <MX_TIM3_Init+0xa4>)
 800151a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800151e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_TIM3_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b19      	ldr	r3, [pc, #100]	@ (800158c <MX_TIM3_Init+0xa4>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800152c:	2303      	movs	r3, #3
 800152e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001534:	2301      	movs	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800153c:	230f      	movs	r3, #15
 800153e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001544:	2301      	movs	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800154c:	230f      	movs	r3, #15
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4619      	mov	r1, r3
 8001556:	480d      	ldr	r0, [pc, #52]	@ (800158c <MX_TIM3_Init+0xa4>)
 8001558:	f003 faa4 	bl	8004aa4 <HAL_TIM_Encoder_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001562:	f7ff fdb7 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	@ (800158c <MX_TIM3_Init+0xa4>)
 8001574:	f004 f93e 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800157e:	f7ff fda9 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3730      	adds	r7, #48	@ 0x30
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000018c 	.word	0x2000018c
 8001590:	40000400 	.word	0x40000400

08001594 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	2224      	movs	r2, #36	@ 0x24
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f009 fdc8 	bl	800b138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <MX_TIM4_Init+0xa4>)
 80015b4:	4a21      	ldr	r2, [pc, #132]	@ (800163c <MX_TIM4_Init+0xa8>)
 80015b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <MX_TIM4_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <MX_TIM4_Init+0xa4>)
 80015c0:	2210      	movs	r2, #16
 80015c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <MX_TIM4_Init+0xa4>)
 80015c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <MX_TIM4_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <MX_TIM4_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015d8:	2303      	movs	r3, #3
 80015da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015e0:	2301      	movs	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80015e8:	230f      	movs	r3, #15
 80015ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015f0:	2301      	movs	r3, #1
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80015f8:	230f      	movs	r3, #15
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	@ (8001638 <MX_TIM4_Init+0xa4>)
 8001604:	f003 fa4e 	bl	8004aa4 <HAL_TIM_Encoder_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800160e:	f7ff fd61 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800161a:	463b      	mov	r3, r7
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	@ (8001638 <MX_TIM4_Init+0xa4>)
 8001620:	f004 f8e8 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800162a:	f7ff fd53 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3730      	adds	r7, #48	@ 0x30
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200001d8 	.word	0x200001d8
 800163c:	40000800 	.word	0x40000800

08001640 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001652:	463b      	mov	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <MX_TIM5_Init+0xc4>)
 8001666:	4a28      	ldr	r2, [pc, #160]	@ (8001708 <MX_TIM5_Init+0xc8>)
 8001668:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 800166a:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <MX_TIM5_Init+0xc4>)
 800166c:	222f      	movs	r2, #47	@ 0x2f
 800166e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <MX_TIM5_Init+0xc4>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001676:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <MX_TIM5_Init+0xc4>)
 8001678:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800167c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <MX_TIM5_Init+0xc4>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <MX_TIM5_Init+0xc4>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800168a:	481e      	ldr	r0, [pc, #120]	@ (8001704 <MX_TIM5_Init+0xc4>)
 800168c:	f003 f8b8 	bl	8004800 <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001696:	f7ff fd1d 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	4816      	ldr	r0, [pc, #88]	@ (8001704 <MX_TIM5_Init+0xc4>)
 80016aa:	f004 f8a3 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80016b4:	f7ff fd0e 	bl	80010d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b8:	2360      	movs	r3, #96	@ 0x60
 80016ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	480d      	ldr	r0, [pc, #52]	@ (8001704 <MX_TIM5_Init+0xc4>)
 80016d0:	f003 fc24 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80016da:	f7ff fcfb 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	220c      	movs	r2, #12
 80016e2:	4619      	mov	r1, r3
 80016e4:	4807      	ldr	r0, [pc, #28]	@ (8001704 <MX_TIM5_Init+0xc4>)
 80016e6:	f003 fc19 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80016f0:	f7ff fcf0 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <MX_TIM5_Init+0xc4>)
 80016f6:	f000 faad 	bl	8001c54 <HAL_TIM_MspPostInit>

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	@ 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000224 	.word	0x20000224
 8001708:	40000c00 	.word	0x40000c00

0800170c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <MX_TIM6_Init+0x68>)
 800171e:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <MX_TIM6_Init+0x6c>)
 8001720:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_TIM6_Init+0x68>)
 8001724:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001728:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_TIM6_Init+0x68>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001730:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <MX_TIM6_Init+0x68>)
 8001732:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001736:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_TIM6_Init+0x68>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800173e:	480d      	ldr	r0, [pc, #52]	@ (8001774 <MX_TIM6_Init+0x68>)
 8001740:	f002 ff8e 	bl	8004660 <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800174a:	f7ff fcc3 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	@ (8001774 <MX_TIM6_Init+0x68>)
 800175c:	f004 f84a 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001766:	f7ff fcb5 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000270 	.word	0x20000270
 8001778:	40001000 	.word	0x40001000

0800177c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	@ 0x30
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2224      	movs	r2, #36	@ 0x24
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f009 fcd4 	bl	800b138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <MX_TIM8_Init+0xac>)
 800179c:	4a23      	ldr	r2, [pc, #140]	@ (800182c <MX_TIM8_Init+0xb0>)
 800179e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <MX_TIM8_Init+0xac>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80017a6:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <MX_TIM8_Init+0xac>)
 80017a8:	2210      	movs	r2, #16
 80017aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <MX_TIM8_Init+0xac>)
 80017ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <MX_TIM8_Init+0xac>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <MX_TIM8_Init+0xac>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <MX_TIM8_Init+0xac>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017c6:	2303      	movs	r3, #3
 80017c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ce:	2301      	movs	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80017d6:	230f      	movs	r3, #15
 80017d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017de:	2301      	movs	r3, #1
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80017e6:	230f      	movs	r3, #15
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4619      	mov	r1, r3
 80017f0:	480d      	ldr	r0, [pc, #52]	@ (8001828 <MX_TIM8_Init+0xac>)
 80017f2:	f003 f957 	bl	8004aa4 <HAL_TIM_Encoder_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80017fc:	f7ff fc6a 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800180c:	463b      	mov	r3, r7
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_TIM8_Init+0xac>)
 8001812:	f003 ffef 	bl	80057f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800181c:	f7ff fc5a 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	3730      	adds	r7, #48	@ 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200002bc 	.word	0x200002bc
 800182c:	40010400 	.word	0x40010400

08001830 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001848:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <MX_TIM12_Init+0x84>)
 800184a:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <MX_TIM12_Init+0x88>)
 800184c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 800184e:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <MX_TIM12_Init+0x84>)
 8001850:	225f      	movs	r2, #95	@ 0x5f
 8001852:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <MX_TIM12_Init+0x84>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 800185a:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <MX_TIM12_Init+0x84>)
 800185c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001860:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <MX_TIM12_Init+0x84>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <MX_TIM12_Init+0x84>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800186e:	4811      	ldr	r0, [pc, #68]	@ (80018b4 <MX_TIM12_Init+0x84>)
 8001870:	f002 ffc6 	bl	8004800 <HAL_TIM_PWM_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800187a:	f7ff fc2b 	bl	80010d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187e:	2360      	movs	r3, #96	@ 0x60
 8001880:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2204      	movs	r2, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <MX_TIM12_Init+0x84>)
 8001896:	f003 fb41 	bl	8004f1c <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80018a0:	f7ff fc18 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018a4:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <MX_TIM12_Init+0x84>)
 80018a6:	f000 f9d5 	bl	8001c54 <HAL_TIM_MspPostInit>

}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000308 	.word	0x20000308
 80018b8:	40001800 	.word	0x40001800

080018bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b090      	sub	sp, #64	@ 0x40
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a93      	ldr	r2, [pc, #588]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0x26c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d149      	bne.n	8001972 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018de:	4b93      	ldr	r3, [pc, #588]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a92      	ldr	r2, [pc, #584]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b90      	ldr	r3, [pc, #576]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f6:	4b8d      	ldr	r3, [pc, #564]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a8c      	ldr	r2, [pc, #560]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b8a      	ldr	r3, [pc, #552]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 800190e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001920:	2301      	movs	r3, #1
 8001922:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001924:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001928:	4619      	mov	r1, r3
 800192a:	4881      	ldr	r0, [pc, #516]	@ (8001b30 <HAL_TIM_Encoder_MspInit+0x274>)
 800192c:	f001 fa22 	bl	8002d74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2105      	movs	r1, #5
 8001934:	2018      	movs	r0, #24
 8001936:	f000 fdd0 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800193a:	2018      	movs	r0, #24
 800193c:	f000 fde9 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2105      	movs	r1, #5
 8001944:	2019      	movs	r0, #25
 8001946:	f000 fdc8 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800194a:	2019      	movs	r0, #25
 800194c:	f000 fde1 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2105      	movs	r1, #5
 8001954:	201a      	movs	r0, #26
 8001956:	f000 fdc0 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800195a:	201a      	movs	r0, #26
 800195c:	f000 fdd9 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2105      	movs	r1, #5
 8001964:	201b      	movs	r0, #27
 8001966:	f000 fdb8 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800196a:	201b      	movs	r0, #27
 800196c:	f000 fdd1 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001970:	e0d5      	b.n	8001b1e <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a6f      	ldr	r2, [pc, #444]	@ (8001b34 <HAL_TIM_Encoder_MspInit+0x278>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d14c      	bne.n	8001a16 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800197c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	4a6a      	ldr	r2, [pc, #424]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	6413      	str	r3, [r2, #64]	@ 0x40
 8001988:	4b68      	ldr	r3, [pc, #416]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	4b65      	ldr	r3, [pc, #404]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001998:	4a64      	ldr	r2, [pc, #400]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a0:	4b62      	ldr	r3, [pc, #392]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ac:	4b5f      	ldr	r3, [pc, #380]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	4a5e      	ldr	r2, [pc, #376]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b8:	4b5c      	ldr	r3, [pc, #368]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 80019c4:	2340      	movs	r3, #64	@ 0x40
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019d4:	2302      	movs	r3, #2
 80019d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019dc:	4619      	mov	r1, r3
 80019de:	4856      	ldr	r0, [pc, #344]	@ (8001b38 <HAL_TIM_Encoder_MspInit+0x27c>)
 80019e0:	f001 f9c8 	bl	8002d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 80019e4:	2320      	movs	r3, #32
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019f4:	2302      	movs	r3, #2
 80019f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	484f      	ldr	r0, [pc, #316]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0x280>)
 8001a00:	f001 f9b8 	bl	8002d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2105      	movs	r1, #5
 8001a08:	201d      	movs	r0, #29
 8001a0a:	f000 fd66 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a0e:	201d      	movs	r0, #29
 8001a10:	f000 fd7f 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 8001a14:	e083      	b.n	8001b1e <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a49      	ldr	r2, [pc, #292]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0x284>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d131      	bne.n	8001a84 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a20:	4b42      	ldr	r3, [pc, #264]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	4a41      	ldr	r2, [pc, #260]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	4b3c      	ldr	r3, [pc, #240]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a44:	4b39      	ldr	r3, [pc, #228]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8001a50:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a62:	2302      	movs	r3, #2
 8001a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4835      	ldr	r0, [pc, #212]	@ (8001b44 <HAL_TIM_Encoder_MspInit+0x288>)
 8001a6e:	f001 f981 	bl	8002d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2105      	movs	r1, #5
 8001a76:	201e      	movs	r0, #30
 8001a78:	f000 fd2f 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a7c:	201e      	movs	r0, #30
 8001a7e:	f000 fd48 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 8001a82:	e04c      	b.n	8001b1e <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2f      	ldr	r2, [pc, #188]	@ (8001b48 <HAL_TIM_Encoder_MspInit+0x28c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d147      	bne.n	8001b1e <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a8e:	4b27      	ldr	r3, [pc, #156]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a26      	ldr	r2, [pc, #152]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a20      	ldr	r2, [pc, #128]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0x270>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8001abe:	23c0      	movs	r3, #192	@ 0xc0
 8001ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481c      	ldr	r0, [pc, #112]	@ (8001b4c <HAL_TIM_Encoder_MspInit+0x290>)
 8001ada:	f001 f94b 	bl	8002d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	202b      	movs	r0, #43	@ 0x2b
 8001ae4:	f000 fcf9 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ae8:	202b      	movs	r0, #43	@ 0x2b
 8001aea:	f000 fd12 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2105      	movs	r1, #5
 8001af2:	202c      	movs	r0, #44	@ 0x2c
 8001af4:	f000 fcf1 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001af8:	202c      	movs	r0, #44	@ 0x2c
 8001afa:	f000 fd0a 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2105      	movs	r1, #5
 8001b02:	202d      	movs	r0, #45	@ 0x2d
 8001b04:	f000 fce9 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001b08:	202d      	movs	r0, #45	@ 0x2d
 8001b0a:	f000 fd02 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2105      	movs	r1, #5
 8001b12:	202e      	movs	r0, #46	@ 0x2e
 8001b14:	f000 fce1 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001b18:	202e      	movs	r0, #46	@ 0x2e
 8001b1a:	f000 fcfa 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3740      	adds	r7, #64	@ 0x40
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40000800 	.word	0x40000800
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	40010400 	.word	0x40010400
 8001b4c:	40020800 	.word	0x40020800

08001b50 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b60:	d114      	bne.n	8001b8c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b62:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xac>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	4a25      	ldr	r2, [pc, #148]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xac>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6e:	4b23      	ldr	r3, [pc, #140]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xac>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	201c      	movs	r0, #28
 8001b80:	f000 fcab 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b84:	201c      	movs	r0, #28
 8001b86:	f000 fcc4 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001b8a:	e032      	b.n	8001bf2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1b      	ldr	r2, [pc, #108]	@ (8001c00 <HAL_TIM_PWM_MspInit+0xb0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d114      	bne.n	8001bc0 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xac>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	4a18      	ldr	r2, [pc, #96]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xac>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba2:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xac>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	2032      	movs	r0, #50	@ 0x32
 8001bb4:	f000 fc91 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001bb8:	2032      	movs	r0, #50	@ 0x32
 8001bba:	f000 fcaa 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 8001bbe:	e018      	b.n	8001bf2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c04 <HAL_TIM_PWM_MspInit+0xb4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d113      	bne.n	8001bf2 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001bca:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xac>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a0b      	ldr	r2, [pc, #44]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xac>)
 8001bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_TIM_PWM_MspInit+0xac>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2105      	movs	r1, #5
 8001be6:	202b      	movs	r0, #43	@ 0x2b
 8001be8:	f000 fc77 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001bec:	202b      	movs	r0, #43	@ 0x2b
 8001bee:	f000 fc90 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40000c00 	.word	0x40000c00
 8001c04:	40001800 	.word	0x40001800

08001c08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <HAL_TIM_Base_MspInit+0x44>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d113      	bne.n	8001c42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <HAL_TIM_Base_MspInit+0x48>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c50 <HAL_TIM_Base_MspInit+0x48>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <HAL_TIM_Base_MspInit+0x48>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2105      	movs	r1, #5
 8001c36:	2036      	movs	r0, #54	@ 0x36
 8001c38:	f000 fc4f 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c3c:	2036      	movs	r0, #54	@ 0x36
 8001c3e:	f000 fc68 	bl	8002512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40001000 	.word	0x40001000
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	@ 0x30
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c74:	d139      	bne.n	8001cea <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b41      	ldr	r3, [pc, #260]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a40      	ldr	r2, [pc, #256]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b3e      	ldr	r3, [pc, #248]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a3a      	ldr	r2, [pc, #232]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b38      	ldr	r3, [pc, #224]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	482f      	ldr	r0, [pc, #188]	@ (8001d80 <HAL_TIM_MspPostInit+0x12c>)
 8001cc2:	f001 f857 	bl	8002d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 8001cc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4828      	ldr	r0, [pc, #160]	@ (8001d84 <HAL_TIM_MspPostInit+0x130>)
 8001ce4:	f001 f846 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001ce8:	e043      	b.n	8001d72 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a26      	ldr	r2, [pc, #152]	@ (8001d88 <HAL_TIM_MspPostInit+0x134>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d11c      	bne.n	8001d2e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b21      	ldr	r3, [pc, #132]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf8:	4a20      	ldr	r2, [pc, #128]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d00:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001d0c:	2309      	movs	r3, #9
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4816      	ldr	r0, [pc, #88]	@ (8001d80 <HAL_TIM_MspPostInit+0x12c>)
 8001d28:	f001 f824 	bl	8002d74 <HAL_GPIO_Init>
}
 8001d2c:	e021      	b.n	8001d72 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a16      	ldr	r2, [pc, #88]	@ (8001d8c <HAL_TIM_MspPostInit+0x138>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d11c      	bne.n	8001d72 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d44:	4b0d      	ldr	r3, [pc, #52]	@ (8001d7c <HAL_TIM_MspPostInit+0x128>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001d50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d62:	2309      	movs	r3, #9
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <HAL_TIM_MspPostInit+0x130>)
 8001d6e:	f001 f801 	bl	8002d74 <HAL_GPIO_Init>
}
 8001d72:	bf00      	nop
 8001d74:	3730      	adds	r7, #48	@ 0x30
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40000c00 	.word	0x40000c00
 8001d8c:	40001800 	.word	0x40001800

08001d90 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001d96:	4a15      	ldr	r2, [pc, #84]	@ (8001dec <MX_USART2_UART_Init+0x5c>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_USART2_UART_Init+0x58>)
 8001dd4:	f003 fdba 	bl	800594c <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dde:	f7ff f979 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000354 	.word	0x20000354
 8001dec:	40004400 	.word	0x40004400

08001df0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001df6:	4a15      	ldr	r2, [pc, #84]	@ (8001e4c <MX_USART3_UART_Init+0x5c>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e34:	f003 fd8a 	bl	800594c <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e3e:	f7ff f949 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200003dc 	.word	0x200003dc
 8001e4c:	40004800 	.word	0x40004800

08001e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b0b0      	sub	sp, #192	@ 0xc0
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	2290      	movs	r2, #144	@ 0x90
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f009 f961 	bl	800b138 <memset>
  if(uartHandle->Instance==USART2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a79      	ldr	r2, [pc, #484]	@ (8002060 <HAL_UART_MspInit+0x210>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	f040 80a0 	bne.w	8001fc2 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 ffbe 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e9a:	f7ff f91b 	bl	80010d4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9e:	4b71      	ldr	r3, [pc, #452]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a70      	ldr	r2, [pc, #448]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	4b6b      	ldr	r3, [pc, #428]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a6a      	ldr	r2, [pc, #424]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b68      	ldr	r3, [pc, #416]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ece:	2360      	movs	r3, #96	@ 0x60
 8001ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	485d      	ldr	r0, [pc, #372]	@ (8002068 <HAL_UART_MspInit+0x218>)
 8001ef4:	f000 ff3e 	bl	8002d74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ef8:	4b5c      	ldr	r3, [pc, #368]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001efa:	4a5d      	ldr	r2, [pc, #372]	@ (8002070 <HAL_UART_MspInit+0x220>)
 8001efc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001efe:	4b5b      	ldr	r3, [pc, #364]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f00:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f04:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f06:	4b59      	ldr	r3, [pc, #356]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0c:	4b57      	ldr	r3, [pc, #348]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f12:	4b56      	ldr	r3, [pc, #344]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f18:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f1a:	4b54      	ldr	r3, [pc, #336]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f20:	4b52      	ldr	r3, [pc, #328]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f26:	4b51      	ldr	r3, [pc, #324]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f32:	4b4e      	ldr	r3, [pc, #312]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f38:	484c      	ldr	r0, [pc, #304]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f3a:	f000 fb05 	bl	8002548 <HAL_DMA_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001f44:	f7ff f8c6 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a48      	ldr	r2, [pc, #288]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f4c:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f4e:	4a47      	ldr	r2, [pc, #284]	@ (800206c <HAL_UART_MspInit+0x21c>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001f54:	4b47      	ldr	r3, [pc, #284]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f56:	4a48      	ldr	r2, [pc, #288]	@ (8002078 <HAL_UART_MspInit+0x228>)
 8001f58:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001f5a:	4b46      	ldr	r3, [pc, #280]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f5c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f60:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f62:	4b44      	ldr	r3, [pc, #272]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f64:	2240      	movs	r2, #64	@ 0x40
 8001f66:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f68:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f76:	4b3f      	ldr	r3, [pc, #252]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f82:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f88:	4b3a      	ldr	r3, [pc, #232]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f8e:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f94:	4837      	ldr	r0, [pc, #220]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001f96:	f000 fad7 	bl	8002548 <HAL_DMA_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001fa0:	f7ff f898 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a33      	ldr	r2, [pc, #204]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001fa8:	671a      	str	r2, [r3, #112]	@ 0x70
 8001faa:	4a32      	ldr	r2, [pc, #200]	@ (8002074 <HAL_UART_MspInit+0x224>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2105      	movs	r1, #5
 8001fb4:	2026      	movs	r0, #38	@ 0x26
 8001fb6:	f000 fa90 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fba:	2026      	movs	r0, #38	@ 0x26
 8001fbc:	f000 faa9 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fc0:	e049      	b.n	8002056 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800207c <HAL_UART_MspInit+0x22c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d144      	bne.n	8002056 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f001 ff18 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001fe6:	f7ff f875 	bl	80010d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fea:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	4a1d      	ldr	r2, [pc, #116]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002002:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a17      	ldr	r2, [pc, #92]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <HAL_UART_MspInit+0x214>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800201a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800201e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002034:	2307      	movs	r3, #7
 8002036:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800203e:	4619      	mov	r1, r3
 8002040:	4809      	ldr	r0, [pc, #36]	@ (8002068 <HAL_UART_MspInit+0x218>)
 8002042:	f000 fe97 	bl	8002d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2105      	movs	r1, #5
 800204a:	2027      	movs	r0, #39	@ 0x27
 800204c:	f000 fa45 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002050:	2027      	movs	r0, #39	@ 0x27
 8002052:	f000 fa5e 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	37c0      	adds	r7, #192	@ 0xc0
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40004400 	.word	0x40004400
 8002064:	40023800 	.word	0x40023800
 8002068:	40020c00 	.word	0x40020c00
 800206c:	20000464 	.word	0x20000464
 8002070:	40026088 	.word	0x40026088
 8002074:	200004c4 	.word	0x200004c4
 8002078:	400260a0 	.word	0x400260a0
 800207c:	40004800 	.word	0x40004800

08002080 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002086:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800208a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800208e:	2206      	movs	r2, #6
 8002090:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002094:	2202      	movs	r2, #2
 8002096:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020a0:	2202      	movs	r2, #2
 80020a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80020b0:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020c4:	f001 f835 	bl	8003132 <HAL_PCD_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80020ce:	f7ff f801 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000524 	.word	0x20000524

080020dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0ae      	sub	sp, #184	@ 0xb8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2290      	movs	r2, #144	@ 0x90
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f009 f81b 	bl	800b138 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800210a:	d159      	bne.n	80021c0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800210c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002110:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4618      	mov	r0, r3
 800211e:	f001 fe77 	bl	8003e10 <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002128:	f7fe ffd4 	bl	80010d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	4b26      	ldr	r3, [pc, #152]	@ (80021c8 <HAL_PCD_MspInit+0xec>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	4a25      	ldr	r2, [pc, #148]	@ (80021c8 <HAL_PCD_MspInit+0xec>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6313      	str	r3, [r2, #48]	@ 0x30
 8002138:	4b23      	ldr	r3, [pc, #140]	@ (80021c8 <HAL_PCD_MspInit+0xec>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002144:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800215e:	230a      	movs	r3, #10
 8002160:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002168:	4619      	mov	r1, r3
 800216a:	4818      	ldr	r0, [pc, #96]	@ (80021cc <HAL_PCD_MspInit+0xf0>)
 800216c:	f000 fe02 	bl	8002d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002188:	4619      	mov	r1, r3
 800218a:	4810      	ldr	r0, [pc, #64]	@ (80021cc <HAL_PCD_MspInit+0xf0>)
 800218c:	f000 fdf2 	bl	8002d74 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002190:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <HAL_PCD_MspInit+0xec>)
 8002192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002194:	4a0c      	ldr	r2, [pc, #48]	@ (80021c8 <HAL_PCD_MspInit+0xec>)
 8002196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800219a:	6353      	str	r3, [r2, #52]	@ 0x34
 800219c:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_PCD_MspInit+0xec>)
 800219e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <HAL_PCD_MspInit+0xec>)
 80021aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ac:	4a06      	ldr	r2, [pc, #24]	@ (80021c8 <HAL_PCD_MspInit+0xec>)
 80021ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <HAL_PCD_MspInit+0xec>)
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80021c0:	bf00      	nop
 80021c2:	37b8      	adds	r7, #184	@ 0xb8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020000 	.word	0x40020000

080021d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002208 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021d4:	f7ff f8b8 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d8:	480c      	ldr	r0, [pc, #48]	@ (800220c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021da:	490d      	ldr	r1, [pc, #52]	@ (8002210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f0:	4c0a      	ldr	r4, [pc, #40]	@ (800221c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021fe:	f009 f801 	bl	800b204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002202:	f7fe fe1d 	bl	8000e40 <main>
  bx  lr    
 8002206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800220c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002210:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002214:	0800bd20 	.word	0x0800bd20
  ldr r2, =_sbss
 8002218:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800221c:	20005498 	.word	0x20005498

08002220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC_IRQHandler>

08002222 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002226:	2003      	movs	r0, #3
 8002228:	f000 f94c 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222c:	200f      	movs	r0, #15
 800222e:	f000 f805 	bl	800223c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002232:	f7fe ff55 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_InitTick+0x54>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_InitTick+0x58>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002252:	fbb3 f3f1 	udiv	r3, r3, r1
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f967 	bl	800252e <HAL_SYSTICK_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00e      	b.n	8002288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d80a      	bhi.n	8002286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f000 f92f 	bl	80024da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800227c:	4a06      	ldr	r2, [pc, #24]	@ (8002298 <HAL_InitTick+0x5c>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000000 	.word	0x20000000
 8002294:	20000008 	.word	0x20000008
 8002298:	20000004 	.word	0x20000004

0800229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_IncTick+0x20>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_IncTick+0x24>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <HAL_IncTick+0x24>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000008 	.word	0x20000008
 80022c0:	20000a04 	.word	0x20000a04

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000a04 	.word	0x20000a04

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffde 	bl	80022c4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000008 	.word	0x20000008

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <__NVIC_SetPriorityGrouping+0x40>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 800234e:	4313      	orrs	r3, r2
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <__NVIC_SetPriorityGrouping+0x40>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00
 8002368:	05fa0000 	.word	0x05fa0000

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db0b      	blt.n	80023b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4907      	ldr	r1, [pc, #28]	@ (80023c0 <__NVIC_EnableIRQ+0x38>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2001      	movs	r0, #1
 80023aa:	fa00 f202 	lsl.w	r2, r0, r2
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000e100 	.word	0xe000e100

080023c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0a      	blt.n	80023ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	490c      	ldr	r1, [pc, #48]	@ (8002410 <__NVIC_SetPriority+0x4c>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ec:	e00a      	b.n	8002404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4908      	ldr	r1, [pc, #32]	@ (8002414 <__NVIC_SetPriority+0x50>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3b04      	subs	r3, #4
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	440b      	add	r3, r1
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000e100 	.word	0xe000e100
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f1c3 0307 	rsb	r3, r3, #7
 8002432:	2b04      	cmp	r3, #4
 8002434:	bf28      	it	cs
 8002436:	2304      	movcs	r3, #4
 8002438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3304      	adds	r3, #4
 800243e:	2b06      	cmp	r3, #6
 8002440:	d902      	bls.n	8002448 <NVIC_EncodePriority+0x30>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b03      	subs	r3, #3
 8002446:	e000      	b.n	800244a <NVIC_EncodePriority+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43d9      	mvns	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	4313      	orrs	r3, r2
         );
}
 8002472:	4618      	mov	r0, r3
 8002474:	3724      	adds	r7, #36	@ 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002490:	d301      	bcc.n	8002496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <SysTick_Config+0x40>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249e:	210f      	movs	r1, #15
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f7ff ff8e 	bl	80023c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <SysTick_Config+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	@ (80024c0 <SysTick_Config+0x40>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff29 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ec:	f7ff ff3e 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff8e 	bl	8002418 <NVIC_EncodePriority>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff5d 	bl	80023c4 <__NVIC_SetPriority>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff31 	bl	8002388 <__NVIC_EnableIRQ>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffa2 	bl	8002480 <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff feb6 	bl	80022c4 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e099      	b.n	8002698 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002584:	e00f      	b.n	80025a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002586:	f7ff fe9d 	bl	80022c4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b05      	cmp	r3, #5
 8002592:	d908      	bls.n	80025a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e078      	b.n	8002698 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e8      	bne.n	8002586 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4b38      	ldr	r3, [pc, #224]	@ (80026a0 <HAL_DMA_Init+0x158>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d107      	bne.n	8002610 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002608:	4313      	orrs	r3, r2
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f023 0307 	bic.w	r3, r3, #7
 8002626:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	2b04      	cmp	r3, #4
 8002638:	d117      	bne.n	800266a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00e      	beq.n	800266a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fb15 	bl	8002c7c <DMA_CheckFifoParam>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2240      	movs	r2, #64	@ 0x40
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002666:	2301      	movs	r3, #1
 8002668:	e016      	b.n	8002698 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 facc 	bl	8002c10 <DMA_CalcBaseAndBitshift>
 8002678:	4603      	mov	r3, r0
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	223f      	movs	r2, #63	@ 0x3f
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	e010803f 	.word	0xe010803f

080026a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_DMA_Start_IT+0x26>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e048      	b.n	800275c <HAL_DMA_Start_IT+0xb8>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d137      	bne.n	800274e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fa5e 	bl	8002bb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	223f      	movs	r2, #63	@ 0x3f
 80026fe:	409a      	lsls	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0216 	orr.w	r2, r2, #22
 8002712:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002722:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0208 	orr.w	r2, r2, #8
 800273a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e005      	b.n	800275a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002756:	2302      	movs	r3, #2
 8002758:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800275a:	7dfb      	ldrb	r3, [r7, #23]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002770:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002772:	f7ff fda7 	bl	80022c4 <HAL_GetTick>
 8002776:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d008      	beq.n	8002796 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2280      	movs	r2, #128	@ 0x80
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e052      	b.n	800283c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0216 	bic.w	r2, r2, #22
 80027a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_DMA_Abort+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0208 	bic.w	r2, r2, #8
 80027d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e6:	e013      	b.n	8002810 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027e8:	f7ff fd6c 	bl	80022c4 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d90c      	bls.n	8002810 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2203      	movs	r2, #3
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e015      	b.n	800283c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e4      	bne.n	80027e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	223f      	movs	r2, #63	@ 0x3f
 8002824:	409a      	lsls	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d004      	beq.n	8002862 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2280      	movs	r2, #128	@ 0x80
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00c      	b.n	800287c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2205      	movs	r2, #5
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002894:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad0 <HAL_DMA_IRQHandler+0x248>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a8e      	ldr	r2, [pc, #568]	@ (8002ad4 <HAL_DMA_IRQHandler+0x24c>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0a9b      	lsrs	r3, r3, #10
 80028a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	2208      	movs	r2, #8
 80028b4:	409a      	lsls	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d01a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0204 	bic.w	r2, r2, #4
 80028da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e0:	2208      	movs	r2, #8
 80028e2:	409a      	lsls	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f8:	2201      	movs	r2, #1
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d012      	beq.n	800292a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002916:	2201      	movs	r2, #1
 8002918:	409a      	lsls	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	f043 0202 	orr.w	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292e:	2204      	movs	r2, #4
 8002930:	409a      	lsls	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	2204      	movs	r2, #4
 800294e:	409a      	lsls	r2, r3
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002958:	f043 0204 	orr.w	r2, r3, #4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	2210      	movs	r2, #16
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d043      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d03c      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002982:	2210      	movs	r2, #16
 8002984:	409a      	lsls	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d018      	beq.n	80029ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d108      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d024      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
 80029b6:	e01f      	b.n	80029f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
 80029c8:	e016      	b.n	80029f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0208 	bic.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fc:	2220      	movs	r2, #32
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 808f 	beq.w	8002b28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8087 	beq.w	8002b28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	2220      	movs	r2, #32
 8002a20:	409a      	lsls	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b05      	cmp	r3, #5
 8002a30:	d136      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0216 	bic.w	r2, r2, #22
 8002a40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d103      	bne.n	8002a62 <HAL_DMA_IRQHandler+0x1da>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0208 	bic.w	r2, r2, #8
 8002a70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a76:	223f      	movs	r2, #63	@ 0x3f
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d07e      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
        }
        return;
 8002a9e:	e079      	b.n	8002b94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d031      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
 8002acc:	e02c      	b.n	8002b28 <HAL_DMA_IRQHandler+0x2a0>
 8002ace:	bf00      	nop
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d023      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
 8002ae8:	e01e      	b.n	8002b28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10f      	bne.n	8002b18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0210 	bic.w	r2, r2, #16
 8002b06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d032      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2205      	movs	r2, #5
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d307      	bcc.n	8002b70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f2      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x2cc>
 8002b6e:	e000      	b.n	8002b72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
 8002b92:	e000      	b.n	8002b96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b94:	bf00      	nop
    }
  }
}
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b40      	cmp	r3, #64	@ 0x40
 8002be0:	d108      	bne.n	8002bf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bf2:	e007      	b.n	8002c04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	60da      	str	r2, [r3, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	3b10      	subs	r3, #16
 8002c20:	4a13      	ldr	r2, [pc, #76]	@ (8002c70 <DMA_CalcBaseAndBitshift+0x60>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c2a:	4a12      	ldr	r2, [pc, #72]	@ (8002c74 <DMA_CalcBaseAndBitshift+0x64>)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d908      	bls.n	8002c50 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <DMA_CalcBaseAndBitshift+0x68>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	1d1a      	adds	r2, r3, #4
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c4e:	e006      	b.n	8002c5e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <DMA_CalcBaseAndBitshift+0x68>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	aaaaaaab 	.word	0xaaaaaaab
 8002c74:	0800bbd4 	.word	0x0800bbd4
 8002c78:	fffffc00 	.word	0xfffffc00

08002c7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d11f      	bne.n	8002cd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d856      	bhi.n	8002d4a <DMA_CheckFifoParam+0xce>
 8002c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <DMA_CheckFifoParam+0x28>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cc7 	.word	0x08002cc7
 8002cac:	08002cb5 	.word	0x08002cb5
 8002cb0:	08002d4b 	.word	0x08002d4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d046      	beq.n	8002d4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc4:	e043      	b.n	8002d4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cce:	d140      	bne.n	8002d52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd4:	e03d      	b.n	8002d52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cde:	d121      	bne.n	8002d24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d837      	bhi.n	8002d56 <DMA_CheckFifoParam+0xda>
 8002ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <DMA_CheckFifoParam+0x70>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002d03 	.word	0x08002d03
 8002cf4:	08002cfd 	.word	0x08002cfd
 8002cf8:	08002d15 	.word	0x08002d15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002d00:	e030      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d025      	beq.n	8002d5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d12:	e022      	b.n	8002d5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d1c:	d11f      	bne.n	8002d5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d22:	e01c      	b.n	8002d5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d903      	bls.n	8002d32 <DMA_CheckFifoParam+0xb6>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d003      	beq.n	8002d38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d30:	e018      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
      break;
 8002d36:	e015      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e00b      	b.n	8002d62 <DMA_CheckFifoParam+0xe6>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e00a      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e008      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d52:	bf00      	nop
 8002d54:	e006      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e004      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
    }
  } 
  
  return status; 
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop

08002d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	@ 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	e175      	b.n	8003080 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d94:	2201      	movs	r2, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	f040 8164 	bne.w	800307a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d005      	beq.n	8002dca <HAL_GPIO_Init+0x56>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d130      	bne.n	8002e2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e00:	2201      	movs	r2, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 0201 	and.w	r2, r3, #1
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d017      	beq.n	8002e68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2203      	movs	r2, #3
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d123      	bne.n	8002ebc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	08da      	lsrs	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3208      	adds	r2, #8
 8002e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	08da      	lsrs	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3208      	adds	r2, #8
 8002eb6:	69b9      	ldr	r1, [r7, #24]
 8002eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0203 	and.w	r2, r3, #3
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80be 	beq.w	800307a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efe:	4b66      	ldr	r3, [pc, #408]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	4a65      	ldr	r2, [pc, #404]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f0a:	4b63      	ldr	r3, [pc, #396]	@ (8003098 <HAL_GPIO_Init+0x324>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f16:	4a61      	ldr	r2, [pc, #388]	@ (800309c <HAL_GPIO_Init+0x328>)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a58      	ldr	r2, [pc, #352]	@ (80030a0 <HAL_GPIO_Init+0x32c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d037      	beq.n	8002fb2 <HAL_GPIO_Init+0x23e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a57      	ldr	r2, [pc, #348]	@ (80030a4 <HAL_GPIO_Init+0x330>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d031      	beq.n	8002fae <HAL_GPIO_Init+0x23a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a56      	ldr	r2, [pc, #344]	@ (80030a8 <HAL_GPIO_Init+0x334>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d02b      	beq.n	8002faa <HAL_GPIO_Init+0x236>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a55      	ldr	r2, [pc, #340]	@ (80030ac <HAL_GPIO_Init+0x338>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d025      	beq.n	8002fa6 <HAL_GPIO_Init+0x232>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a54      	ldr	r2, [pc, #336]	@ (80030b0 <HAL_GPIO_Init+0x33c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01f      	beq.n	8002fa2 <HAL_GPIO_Init+0x22e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a53      	ldr	r2, [pc, #332]	@ (80030b4 <HAL_GPIO_Init+0x340>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d019      	beq.n	8002f9e <HAL_GPIO_Init+0x22a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	@ (80030b8 <HAL_GPIO_Init+0x344>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <HAL_GPIO_Init+0x226>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a51      	ldr	r2, [pc, #324]	@ (80030bc <HAL_GPIO_Init+0x348>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00d      	beq.n	8002f96 <HAL_GPIO_Init+0x222>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a50      	ldr	r2, [pc, #320]	@ (80030c0 <HAL_GPIO_Init+0x34c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <HAL_GPIO_Init+0x21e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4f      	ldr	r2, [pc, #316]	@ (80030c4 <HAL_GPIO_Init+0x350>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_GPIO_Init+0x21a>
 8002f8a:	2309      	movs	r3, #9
 8002f8c:	e012      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f8e:	230a      	movs	r3, #10
 8002f90:	e010      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f92:	2308      	movs	r3, #8
 8002f94:	e00e      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f96:	2307      	movs	r3, #7
 8002f98:	e00c      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f9a:	2306      	movs	r3, #6
 8002f9c:	e00a      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	e008      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	e006      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e004      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e002      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	f002 0203 	and.w	r2, r2, #3
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	4093      	lsls	r3, r2
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fc4:	4935      	ldr	r1, [pc, #212]	@ (800309c <HAL_GPIO_Init+0x328>)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	3302      	adds	r3, #2
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80030c8 <HAL_GPIO_Init+0x354>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ff6:	4a34      	ldr	r2, [pc, #208]	@ (80030c8 <HAL_GPIO_Init+0x354>)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ffc:	4b32      	ldr	r3, [pc, #200]	@ (80030c8 <HAL_GPIO_Init+0x354>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003020:	4a29      	ldr	r2, [pc, #164]	@ (80030c8 <HAL_GPIO_Init+0x354>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003026:	4b28      	ldr	r3, [pc, #160]	@ (80030c8 <HAL_GPIO_Init+0x354>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800304a:	4a1f      	ldr	r2, [pc, #124]	@ (80030c8 <HAL_GPIO_Init+0x354>)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003050:	4b1d      	ldr	r3, [pc, #116]	@ (80030c8 <HAL_GPIO_Init+0x354>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003074:	4a14      	ldr	r2, [pc, #80]	@ (80030c8 <HAL_GPIO_Init+0x354>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3301      	adds	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	f67f ae86 	bls.w	8002d94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3724      	adds	r7, #36	@ 0x24
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	40013800 	.word	0x40013800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40020400 	.word	0x40020400
 80030a8:	40020800 	.word	0x40020800
 80030ac:	40020c00 	.word	0x40020c00
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40021400 	.word	0x40021400
 80030b8:	40021800 	.word	0x40021800
 80030bc:	40021c00 	.word	0x40021c00
 80030c0:	40022000 	.word	0x40022000
 80030c4:	40022400 	.word	0x40022400
 80030c8:	40013c00 	.word	0x40013c00

080030cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
 80030d8:	4613      	mov	r3, r2
 80030da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030dc:	787b      	ldrb	r3, [r7, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030e8:	e003      	b.n	80030f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	041a      	lsls	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003110:	887a      	ldrh	r2, [r7, #2]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4013      	ands	r3, r2
 8003116:	041a      	lsls	r2, r3, #16
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43d9      	mvns	r1, r3
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	400b      	ands	r3, r1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	619a      	str	r2, [r3, #24]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af02      	add	r7, sp, #8
 8003138:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e108      	b.n	8003356 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe ffbc 	bl	80020dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2203      	movs	r2, #3
 8003168:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003172:	d102      	bne.n	800317a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f004 f916 	bl	80073b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7c1a      	ldrb	r2, [r3, #16]
 800318c:	f88d 2000 	strb.w	r2, [sp]
 8003190:	3304      	adds	r3, #4
 8003192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003194:	f004 f8b2 	bl	80072fc <USB_CoreInit>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0d5      	b.n	8003356 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 f90e 	bl	80073d2 <USB_SetCurrentMode>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0c6      	b.n	8003356 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e04a      	b.n	8003264 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3315      	adds	r3, #21
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3314      	adds	r3, #20
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	b298      	uxth	r0, r3
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	332e      	adds	r3, #46	@ 0x2e
 800320a:	4602      	mov	r2, r0
 800320c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3318      	adds	r3, #24
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	331c      	adds	r3, #28
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3320      	adds	r3, #32
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3324      	adds	r3, #36	@ 0x24
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	3301      	adds	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	791b      	ldrb	r3, [r3, #4]
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	429a      	cmp	r2, r3
 800326c:	d3af      	bcc.n	80031ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
 8003272:	e044      	b.n	80032fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800328a:	7bfa      	ldrb	r2, [r7, #15]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	3301      	adds	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	791b      	ldrb	r3, [r3, #4]
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	429a      	cmp	r2, r3
 8003306:	d3b5      	bcc.n	8003274 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7c1a      	ldrb	r2, [r3, #16]
 8003310:	f88d 2000 	strb.w	r2, [sp]
 8003314:	3304      	adds	r3, #4
 8003316:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003318:	f004 f8a8 	bl	800746c <USB_DevInit>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e013      	b.n	8003356 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7b1b      	ldrb	r3, [r3, #12]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f80b 	bl	8003360 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f004 fa63 	bl	800781a <USB_DevDisconnect>

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800338e:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003390:	4313      	orrs	r3, r2
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	10000003 	.word	0x10000003

080033a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a04      	ldr	r2, [pc, #16]	@ (80033c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40007000 	.word	0x40007000

080033c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033d2:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <HAL_PWREx_EnableOverDrive+0x98>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	4a22      	ldr	r2, [pc, #136]	@ (8003460 <HAL_PWREx_EnableOverDrive+0x98>)
 80033d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <HAL_PWREx_EnableOverDrive+0x98>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003464 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f6:	f7fe ff65 	bl	80022c4 <HAL_GetTick>
 80033fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033fc:	e009      	b.n	8003412 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033fe:	f7fe ff61 	bl	80022c4 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800340c:	d901      	bls.n	8003412 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e022      	b.n	8003458 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003412:	4b14      	ldr	r3, [pc, #80]	@ (8003464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341e:	d1ee      	bne.n	80033fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003420:	4b10      	ldr	r3, [pc, #64]	@ (8003464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0f      	ldr	r2, [pc, #60]	@ (8003464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800342a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800342c:	f7fe ff4a 	bl	80022c4 <HAL_GetTick>
 8003430:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003432:	e009      	b.n	8003448 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003434:	f7fe ff46 	bl	80022c4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003442:	d901      	bls.n	8003448 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e007      	b.n	8003458 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_PWREx_EnableOverDrive+0x9c>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003450:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003454:	d1ee      	bne.n	8003434 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40023800 	.word	0x40023800
 8003464:	40007000 	.word	0x40007000

08003468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e29b      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8087 	beq.w	800359a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800348c:	4b96      	ldr	r3, [pc, #600]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b04      	cmp	r3, #4
 8003496:	d00c      	beq.n	80034b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003498:	4b93      	ldr	r3, [pc, #588]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d112      	bne.n	80034ca <HAL_RCC_OscConfig+0x62>
 80034a4:	4b90      	ldr	r3, [pc, #576]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034b0:	d10b      	bne.n	80034ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b2:	4b8d      	ldr	r3, [pc, #564]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d06c      	beq.n	8003598 <HAL_RCC_OscConfig+0x130>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d168      	bne.n	8003598 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e275      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x7a>
 80034d4:	4b84      	ldr	r3, [pc, #528]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a83      	ldr	r2, [pc, #524]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	e02e      	b.n	8003540 <HAL_RCC_OscConfig+0xd8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x9c>
 80034ea:	4b7f      	ldr	r3, [pc, #508]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7e      	ldr	r2, [pc, #504]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80034f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b7c      	ldr	r3, [pc, #496]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a7b      	ldr	r2, [pc, #492]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80034fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e01d      	b.n	8003540 <HAL_RCC_OscConfig+0xd8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0xc0>
 800350e:	4b76      	ldr	r3, [pc, #472]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a75      	ldr	r2, [pc, #468]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b73      	ldr	r3, [pc, #460]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a72      	ldr	r2, [pc, #456]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0xd8>
 8003528:	4b6f      	ldr	r3, [pc, #444]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a6e      	ldr	r2, [pc, #440]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 800352e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b6c      	ldr	r3, [pc, #432]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a6b      	ldr	r2, [pc, #428]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800353e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe febc 	bl	80022c4 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003550:	f7fe feb8 	bl	80022c4 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	@ 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e229      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b61      	ldr	r3, [pc, #388]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0xe8>
 800356e:	e014      	b.n	800359a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe fea8 	bl	80022c4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe fea4 	bl	80022c4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e215      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	4b57      	ldr	r3, [pc, #348]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x110>
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d069      	beq.n	800367a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035a6:	4b50      	ldr	r3, [pc, #320]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b2:	4b4d      	ldr	r3, [pc, #308]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d11c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x190>
 80035be:	4b4a      	ldr	r3, [pc, #296]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d116      	bne.n	80035f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ca:	4b47      	ldr	r3, [pc, #284]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_RCC_OscConfig+0x17a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e1e9      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e2:	4b41      	ldr	r3, [pc, #260]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	493d      	ldr	r1, [pc, #244]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f6:	e040      	b.n	800367a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d023      	beq.n	8003648 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003600:	4b39      	ldr	r3, [pc, #228]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a38      	ldr	r2, [pc, #224]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fe5a 	bl	80022c4 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003614:	f7fe fe56 	bl	80022c4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1c7      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	4b30      	ldr	r3, [pc, #192]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003632:	4b2d      	ldr	r3, [pc, #180]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4929      	ldr	r1, [pc, #164]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
 8003646:	e018      	b.n	800367a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003648:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a26      	ldr	r2, [pc, #152]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe fe36 	bl	80022c4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365c:	f7fe fe32 	bl	80022c4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1a3      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d038      	beq.n	80036f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d019      	beq.n	80036c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368e:	4b16      	ldr	r3, [pc, #88]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003692:	4a15      	ldr	r2, [pc, #84]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7fe fe13 	bl	80022c4 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a2:	f7fe fe0f 	bl	80022c4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e180      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b4:	4b0c      	ldr	r3, [pc, #48]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80036b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x23a>
 80036c0:	e01a      	b.n	80036f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c2:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80036c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c6:	4a08      	ldr	r2, [pc, #32]	@ (80036e8 <HAL_RCC_OscConfig+0x280>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fe fdf9 	bl	80022c4 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d6:	f7fe fdf5 	bl	80022c4 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d903      	bls.n	80036ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e166      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
 80036e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	4b92      	ldr	r3, [pc, #584]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ee      	bne.n	80036d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80a4 	beq.w	800384e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003706:	4b8c      	ldr	r3, [pc, #560]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10d      	bne.n	800372e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	4b89      	ldr	r3, [pc, #548]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	4a88      	ldr	r2, [pc, #544]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	@ 0x40
 800371e:	4b86      	ldr	r3, [pc, #536]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372e:	4b83      	ldr	r3, [pc, #524]	@ (800393c <HAL_RCC_OscConfig+0x4d4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800373a:	4b80      	ldr	r3, [pc, #512]	@ (800393c <HAL_RCC_OscConfig+0x4d4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a7f      	ldr	r2, [pc, #508]	@ (800393c <HAL_RCC_OscConfig+0x4d4>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7fe fdbd 	bl	80022c4 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374e:	f7fe fdb9 	bl	80022c4 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b64      	cmp	r3, #100	@ 0x64
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e12a      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003760:	4b76      	ldr	r3, [pc, #472]	@ (800393c <HAL_RCC_OscConfig+0x4d4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x31a>
 8003774:	4b70      	ldr	r3, [pc, #448]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	4a6f      	ldr	r2, [pc, #444]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003780:	e02d      	b.n	80037de <HAL_RCC_OscConfig+0x376>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x33c>
 800378a:	4b6b      	ldr	r3, [pc, #428]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a6a      	ldr	r2, [pc, #424]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
 8003796:	4b68      	ldr	r3, [pc, #416]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379a:	4a67      	ldr	r2, [pc, #412]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 800379c:	f023 0304 	bic.w	r3, r3, #4
 80037a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a2:	e01c      	b.n	80037de <HAL_RCC_OscConfig+0x376>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	d10c      	bne.n	80037c6 <HAL_RCC_OscConfig+0x35e>
 80037ac:	4b62      	ldr	r3, [pc, #392]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b0:	4a61      	ldr	r2, [pc, #388]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80037b2:	f043 0304 	orr.w	r3, r3, #4
 80037b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c4:	e00b      	b.n	80037de <HAL_RCC_OscConfig+0x376>
 80037c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d2:	4b59      	ldr	r3, [pc, #356]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	4a58      	ldr	r2, [pc, #352]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d015      	beq.n	8003812 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e6:	f7fe fd6d 	bl	80022c4 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	f7fe fd69 	bl	80022c4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e0d8      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003804:	4b4c      	ldr	r3, [pc, #304]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0ee      	beq.n	80037ee <HAL_RCC_OscConfig+0x386>
 8003810:	e014      	b.n	800383c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7fe fd57 	bl	80022c4 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7fe fd53 	bl	80022c4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e0c2      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003830:	4b41      	ldr	r3, [pc, #260]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1ee      	bne.n	800381a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003842:	4b3d      	ldr	r3, [pc, #244]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	4a3c      	ldr	r2, [pc, #240]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800384c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80ae 	beq.w	80039b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003858:	4b37      	ldr	r3, [pc, #220]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b08      	cmp	r3, #8
 8003862:	d06d      	beq.n	8003940 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d14b      	bne.n	8003904 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b32      	ldr	r3, [pc, #200]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a31      	ldr	r2, [pc, #196]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fe fd24 	bl	80022c4 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7fe fd20 	bl	80022c4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e091      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b29      	ldr	r3, [pc, #164]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	071b      	lsls	r3, r3, #28
 80038ca:	491b      	ldr	r1, [pc, #108]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80038d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fe fcf2 	bl	80022c4 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fe fcee 	bl	80022c4 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e05f      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x47c>
 8003902:	e057      	b.n	80039b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003904:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0b      	ldr	r2, [pc, #44]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fcd8 	bl	80022c4 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe fcd4 	bl	80022c4 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e045      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	4b03      	ldr	r3, [pc, #12]	@ (8003938 <HAL_RCC_OscConfig+0x4d0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x4b0>
 8003936:	e03d      	b.n	80039b4 <HAL_RCC_OscConfig+0x54c>
 8003938:	40023800 	.word	0x40023800
 800393c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003940:	4b1f      	ldr	r3, [pc, #124]	@ (80039c0 <HAL_RCC_OscConfig+0x558>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d030      	beq.n	80039b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d129      	bne.n	80039b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d122      	bne.n	80039b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003970:	4013      	ands	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003976:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003978:	4293      	cmp	r3, r2
 800397a:	d119      	bne.n	80039b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	3b01      	subs	r3, #1
 800398a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d10f      	bne.n	80039b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800

080039c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0d0      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d910      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b67      	ldr	r3, [pc, #412]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 020f 	bic.w	r2, r3, #15
 80039f2:	4965      	ldr	r1, [pc, #404]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b63      	ldr	r3, [pc, #396]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b8      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a24:	4b59      	ldr	r3, [pc, #356]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a58      	ldr	r2, [pc, #352]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a3c:	4b53      	ldr	r3, [pc, #332]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a52      	ldr	r2, [pc, #328]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b50      	ldr	r3, [pc, #320]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	494d      	ldr	r1, [pc, #308]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d040      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b47      	ldr	r3, [pc, #284]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d115      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e073      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	4b3d      	ldr	r3, [pc, #244]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06b      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	4b39      	ldr	r3, [pc, #228]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4936      	ldr	r1, [pc, #216]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fe fc04 	bl	80022c4 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac0:	f7fe fc00 	bl	80022c4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e053      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 020c 	and.w	r2, r3, #12
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b27      	ldr	r3, [pc, #156]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d210      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b24      	ldr	r3, [pc, #144]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 020f 	bic.w	r2, r3, #15
 8003afe:	4922      	ldr	r1, [pc, #136]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e032      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4916      	ldr	r1, [pc, #88]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b42:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490e      	ldr	r1, [pc, #56]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b56:	f000 f821 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490a      	ldr	r1, [pc, #40]	@ (8003b90 <HAL_RCC_ClockConfig+0x1cc>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	4a09      	ldr	r2, [pc, #36]	@ (8003b94 <HAL_RCC_ClockConfig+0x1d0>)
 8003b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b72:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <HAL_RCC_ClockConfig+0x1d4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe fb60 	bl	800223c <HAL_InitTick>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023c00 	.word	0x40023c00
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	0800bbbc 	.word	0x0800bbbc
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000004 	.word	0x20000004

08003b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba0:	b094      	sub	sp, #80	@ 0x50
 8003ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ba8:	2300      	movs	r3, #0
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bac:	2300      	movs	r3, #0
 8003bae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb4:	4b79      	ldr	r3, [pc, #484]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d00d      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x40>
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	f200 80e1 	bhi.w	8003d88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bce:	e0db      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b73      	ldr	r3, [pc, #460]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bd4:	e0db      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd6:	4b73      	ldr	r3, [pc, #460]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bda:	e0d8      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003be6:	4b6d      	ldr	r3, [pc, #436]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d063      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c06:	2300      	movs	r3, #0
 8003c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c0e:	4622      	mov	r2, r4
 8003c10:	462b      	mov	r3, r5
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	0159      	lsls	r1, r3, #5
 8003c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c20:	0150      	lsls	r0, r2, #5
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4621      	mov	r1, r4
 8003c28:	1a51      	subs	r1, r2, r1
 8003c2a:	6139      	str	r1, [r7, #16]
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c40:	4659      	mov	r1, fp
 8003c42:	018b      	lsls	r3, r1, #6
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	018a      	lsls	r2, r1, #6
 8003c4e:	4651      	mov	r1, sl
 8003c50:	ebb2 0801 	subs.w	r8, r2, r1
 8003c54:	4659      	mov	r1, fp
 8003c56:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6e:	4690      	mov	r8, r2
 8003c70:	4699      	mov	r9, r3
 8003c72:	4623      	mov	r3, r4
 8003c74:	eb18 0303 	adds.w	r3, r8, r3
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	462b      	mov	r3, r5
 8003c7c:	eb49 0303 	adc.w	r3, r9, r3
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c8e:	4629      	mov	r1, r5
 8003c90:	024b      	lsls	r3, r1, #9
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c98:	4621      	mov	r1, r4
 8003c9a:	024a      	lsls	r2, r1, #9
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cac:	f7fc fb30 	bl	8000310 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb8:	e058      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cba:	4b38      	ldr	r3, [pc, #224]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	f04f 0000 	mov.w	r0, #0
 8003cdc:	f04f 0100 	mov.w	r1, #0
 8003ce0:	0159      	lsls	r1, r3, #5
 8003ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce6:	0150      	lsls	r0, r2, #5
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4641      	mov	r1, r8
 8003cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d10:	eb63 050b 	sbc.w	r5, r3, fp
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	00eb      	lsls	r3, r5, #3
 8003d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d22:	00e2      	lsls	r2, r4, #3
 8003d24:	4614      	mov	r4, r2
 8003d26:	461d      	mov	r5, r3
 8003d28:	4643      	mov	r3, r8
 8003d2a:	18e3      	adds	r3, r4, r3
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	464b      	mov	r3, r9
 8003d30:	eb45 0303 	adc.w	r3, r5, r3
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d42:	4629      	mov	r1, r5
 8003d44:	028b      	lsls	r3, r1, #10
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	028a      	lsls	r2, r1, #10
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d56:	2200      	movs	r2, #0
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	61fa      	str	r2, [r7, #28]
 8003d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d60:	f7fc fad6 	bl	8000310 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	3301      	adds	r3, #1
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d86:	e002      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3750      	adds	r7, #80	@ 0x50
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	007a1200 	.word	0x007a1200

08003da8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000000 	.word	0x20000000

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc4:	f7ff fff0 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0a9b      	lsrs	r3, r3, #10
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800
 8003de4:	0800bbcc 	.word	0x0800bbcc

08003de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dec:	f7ff ffdc 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0b5b      	lsrs	r3, r3, #13
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4903      	ldr	r1, [pc, #12]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	0800bbcc 	.word	0x0800bbcc

08003e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d012      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e38:	4b69      	ldr	r3, [pc, #420]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a68      	ldr	r2, [pc, #416]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	4b66      	ldr	r3, [pc, #408]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4c:	4964      	ldr	r1, [pc, #400]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d017      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e70:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e78:	4959      	ldr	r1, [pc, #356]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e88:	d101      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d017      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	494a      	ldr	r1, [pc, #296]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec4:	d101      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 808b 	beq.w	800400a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	4a39      	ldr	r2, [pc, #228]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f00:	4b37      	ldr	r3, [pc, #220]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f0c:	4b35      	ldr	r3, [pc, #212]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a34      	ldr	r2, [pc, #208]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f18:	f7fe f9d4 	bl	80022c4 <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f20:	f7fe f9d0 	bl	80022c4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	@ 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e38f      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f32:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f3e:	4b28      	ldr	r3, [pc, #160]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d035      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d02e      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f66:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f7e:	4a18      	ldr	r2, [pc, #96]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f84:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d114      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fe f998 	bl	80022c4 <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	e00a      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f98:	f7fe f994 	bl	80022c4 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e351      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fae:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0ee      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc6:	d111      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fd4:	4b04      	ldr	r3, [pc, #16]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fd6:	400b      	ands	r3, r1
 8003fd8:	4901      	ldr	r1, [pc, #4]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	0ffffcff 	.word	0x0ffffcff
 8003fec:	4bac      	ldr	r3, [pc, #688]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4aab      	ldr	r2, [pc, #684]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ff6:	6093      	str	r3, [r2, #8]
 8003ff8:	4ba9      	ldr	r3, [pc, #676]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004004:	49a6      	ldr	r1, [pc, #664]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	4313      	orrs	r3, r2
 8004008:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d010      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004016:	4ba2      	ldr	r3, [pc, #648]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800401c:	4aa0      	ldr	r2, [pc, #640]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004022:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004026:	4b9e      	ldr	r3, [pc, #632]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004028:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	499b      	ldr	r1, [pc, #620]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004044:	4b96      	ldr	r3, [pc, #600]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004052:	4993      	ldr	r1, [pc, #588]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004066:	4b8e      	ldr	r3, [pc, #568]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004074:	498a      	ldr	r1, [pc, #552]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004088:	4b85      	ldr	r3, [pc, #532]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004096:	4982      	ldr	r1, [pc, #520]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040aa:	4b7d      	ldr	r3, [pc, #500]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b8:	4979      	ldr	r1, [pc, #484]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040cc:	4b74      	ldr	r3, [pc, #464]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d2:	f023 0203 	bic.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	4971      	ldr	r1, [pc, #452]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ee:	4b6c      	ldr	r3, [pc, #432]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f4:	f023 020c 	bic.w	r2, r3, #12
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fc:	4968      	ldr	r1, [pc, #416]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004110:	4b63      	ldr	r3, [pc, #396]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411e:	4960      	ldr	r1, [pc, #384]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004132:	4b5b      	ldr	r3, [pc, #364]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004140:	4957      	ldr	r1, [pc, #348]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004154:	4b52      	ldr	r3, [pc, #328]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004162:	494f      	ldr	r1, [pc, #316]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004176:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004184:	4946      	ldr	r1, [pc, #280]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004198:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a6:	493e      	ldr	r1, [pc, #248]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041ba:	4b39      	ldr	r3, [pc, #228]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c8:	4935      	ldr	r1, [pc, #212]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041dc:	4b30      	ldr	r3, [pc, #192]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ea:	492d      	ldr	r1, [pc, #180]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d011      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041fe:	4b28      	ldr	r3, [pc, #160]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800420c:	4924      	ldr	r1, [pc, #144]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800421c:	d101      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800421e:	2301      	movs	r3, #1
 8004220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800422e:	2301      	movs	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800423e:	4b18      	ldr	r3, [pc, #96]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004244:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424c:	4914      	ldr	r1, [pc, #80]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004260:	4b0f      	ldr	r3, [pc, #60]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004266:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004270:	490b      	ldr	r1, [pc, #44]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00f      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004284:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004294:	4902      	ldr	r1, [pc, #8]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800429c:	e002      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042b0:	4b8a      	ldr	r3, [pc, #552]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c0:	4986      	ldr	r1, [pc, #536]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00b      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042d4:	4b81      	ldr	r3, [pc, #516]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042e4:	497d      	ldr	r1, [pc, #500]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d006      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80d6 	beq.w	80044ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004300:	4b76      	ldr	r3, [pc, #472]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a75      	ldr	r2, [pc, #468]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004306:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800430a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430c:	f7fd ffda 	bl	80022c4 <HAL_GetTick>
 8004310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004314:	f7fd ffd6 	bl	80022c4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e195      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004326:	4b6d      	ldr	r3, [pc, #436]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d021      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11d      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004346:	4b65      	ldr	r3, [pc, #404]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004354:	4b61      	ldr	r3, [pc, #388]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800435a:	0e1b      	lsrs	r3, r3, #24
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	019a      	lsls	r2, r3, #6
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	071b      	lsls	r3, r3, #28
 800437a:	4958      	ldr	r1, [pc, #352]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02e      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ac:	d129      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043ae:	4b4b      	ldr	r3, [pc, #300]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043bc:	4b47      	ldr	r3, [pc, #284]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c2:	0f1b      	lsrs	r3, r3, #28
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	019a      	lsls	r2, r3, #6
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	493e      	ldr	r1, [pc, #248]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043ea:	4b3c      	ldr	r3, [pc, #240]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f0:	f023 021f 	bic.w	r2, r3, #31
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	3b01      	subs	r3, #1
 80043fa:	4938      	ldr	r1, [pc, #224]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01d      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800440e:	4b33      	ldr	r3, [pc, #204]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004414:	0e1b      	lsrs	r3, r3, #24
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800441c:	4b2f      	ldr	r3, [pc, #188]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004422:	0f1b      	lsrs	r3, r3, #28
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	019a      	lsls	r2, r3, #6
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	431a      	orrs	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	071b      	lsls	r3, r3, #28
 8004442:	4926      	ldr	r1, [pc, #152]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	019a      	lsls	r2, r3, #6
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	071b      	lsls	r3, r3, #28
 8004472:	491a      	ldr	r1, [pc, #104]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800447a:	4b18      	ldr	r3, [pc, #96]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004480:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004486:	f7fd ff1d 	bl	80022c4 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800448e:	f7fd ff19 	bl	80022c4 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b64      	cmp	r3, #100	@ 0x64
 800449a:	d901      	bls.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0d8      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044a0:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	f040 80ce 	bne.w	8004650 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044b4:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c0:	f7fd ff00 	bl	80022c4 <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044c6:	e00b      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044c8:	f7fd fefc 	bl	80022c4 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	@ 0x64
 80044d4:	d904      	bls.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0bb      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044e0:	4b5e      	ldr	r3, [pc, #376]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ec:	d0ec      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02e      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d12a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004516:	4b51      	ldr	r3, [pc, #324]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004524:	4b4d      	ldr	r3, [pc, #308]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	0f1b      	lsrs	r3, r3, #28
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	019a      	lsls	r2, r3, #6
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	071b      	lsls	r3, r3, #28
 800454a:	4944      	ldr	r1, [pc, #272]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004552:	4b42      	ldr	r3, [pc, #264]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004558:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004560:	3b01      	subs	r3, #1
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	493d      	ldr	r1, [pc, #244]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d022      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800457c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004580:	d11d      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004582:	4b36      	ldr	r3, [pc, #216]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	0e1b      	lsrs	r3, r3, #24
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004590:	4b32      	ldr	r3, [pc, #200]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	0f1b      	lsrs	r3, r3, #28
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	019a      	lsls	r2, r3, #6
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	431a      	orrs	r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	4929      	ldr	r1, [pc, #164]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d028      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ca:	4b24      	ldr	r3, [pc, #144]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	0e1b      	lsrs	r3, r3, #24
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045d8:	4b20      	ldr	r3, [pc, #128]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	019a      	lsls	r2, r3, #6
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	431a      	orrs	r2, r3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	4917      	ldr	r1, [pc, #92]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800460c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	4911      	ldr	r1, [pc, #68]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800461c:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0e      	ldr	r2, [pc, #56]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004628:	f7fd fe4c 	bl	80022c4 <HAL_GetTick>
 800462c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004630:	f7fd fe48 	bl	80022c4 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	@ 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e007      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004642:	4b06      	ldr	r3, [pc, #24]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800464a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800464e:	d1ef      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800

08004660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e049      	b.n	8004706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fd fabe 	bl	8001c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f000 fd78 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d001      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e054      	b.n	80047d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a26      	ldr	r2, [pc, #152]	@ (80047e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d022      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004752:	d01d      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a22      	ldr	r2, [pc, #136]	@ (80047e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d018      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a21      	ldr	r2, [pc, #132]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d013      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1f      	ldr	r2, [pc, #124]	@ (80047ec <HAL_TIM_Base_Start_IT+0xdc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00e      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1e      	ldr	r2, [pc, #120]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1b      	ldr	r2, [pc, #108]	@ (80047f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d115      	bne.n	80047bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <HAL_TIM_Base_Start_IT+0xec>)
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d015      	beq.n	80047ce <HAL_TIM_Base_Start_IT+0xbe>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a8:	d011      	beq.n	80047ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	e008      	b.n	80047ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e000      	b.n	80047d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40001800 	.word	0x40001800
 80047fc:	00010007 	.word	0x00010007

08004800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e049      	b.n	80048a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fd f992 	bl	8001b50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 fca8 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_TIM_PWM_Start+0x24>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e03c      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d109      	bne.n	80048ee <HAL_TIM_PWM_Start+0x3e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	e02f      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d109      	bne.n	8004908 <HAL_TIM_PWM_Start+0x58>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e022      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b0c      	cmp	r3, #12
 800490c:	d109      	bne.n	8004922 <HAL_TIM_PWM_Start+0x72>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e015      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b10      	cmp	r3, #16
 8004926:	d109      	bne.n	800493c <HAL_TIM_PWM_Start+0x8c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e008      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e092      	b.n	8004a7c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <HAL_TIM_PWM_Start+0xb6>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004964:	e023      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b04      	cmp	r3, #4
 800496a:	d104      	bne.n	8004976 <HAL_TIM_PWM_Start+0xc6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004974:	e01b      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d104      	bne.n	8004986 <HAL_TIM_PWM_Start+0xd6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004984:	e013      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d104      	bne.n	8004996 <HAL_TIM_PWM_Start+0xe6>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004994:	e00b      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b10      	cmp	r3, #16
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_PWM_Start+0xf6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a4:	e003      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2201      	movs	r2, #1
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fef6 	bl	80057a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a30      	ldr	r2, [pc, #192]	@ (8004a84 <HAL_TIM_PWM_Start+0x1d4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_TIM_PWM_Start+0x120>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004a88 <HAL_TIM_PWM_Start+0x1d8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d101      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x124>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <HAL_TIM_PWM_Start+0x126>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a25      	ldr	r2, [pc, #148]	@ (8004a84 <HAL_TIM_PWM_Start+0x1d4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d022      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x18a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fc:	d01d      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x18a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a22      	ldr	r2, [pc, #136]	@ (8004a8c <HAL_TIM_PWM_Start+0x1dc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d018      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x18a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a20      	ldr	r2, [pc, #128]	@ (8004a90 <HAL_TIM_PWM_Start+0x1e0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x18a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1f      	ldr	r2, [pc, #124]	@ (8004a94 <HAL_TIM_PWM_Start+0x1e4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00e      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x18a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a19      	ldr	r2, [pc, #100]	@ (8004a88 <HAL_TIM_PWM_Start+0x1d8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d009      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x18a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a98 <HAL_TIM_PWM_Start+0x1e8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x18a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a19      	ldr	r2, [pc, #100]	@ (8004a9c <HAL_TIM_PWM_Start+0x1ec>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d115      	bne.n	8004a66 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	4b17      	ldr	r3, [pc, #92]	@ (8004aa0 <HAL_TIM_PWM_Start+0x1f0>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b06      	cmp	r3, #6
 8004a4a:	d015      	beq.n	8004a78 <HAL_TIM_PWM_Start+0x1c8>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a52:	d011      	beq.n	8004a78 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a64:	e008      	b.n	8004a78 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e000      	b.n	8004a7a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40010400 	.word	0x40010400
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40000c00 	.word	0x40000c00
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40001800 	.word	0x40001800
 8004aa0:	00010007 	.word	0x00010007

08004aa4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e08f      	b.n	8004bd8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fc fef5 	bl	80018bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6899      	ldr	r1, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8004be0 <HAL_TIM_Encoder_Init+0x13c>)
 8004ae6:	400b      	ands	r3, r1
 8004ae8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f000 fb4d 	bl	8005194 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4b31      	ldr	r3, [pc, #196]	@ (8004be4 <HAL_TIM_Encoder_Init+0x140>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4b2b      	ldr	r3, [pc, #172]	@ (8004be8 <HAL_TIM_Encoder_Init+0x144>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4b2a      	ldr	r3, [pc, #168]	@ (8004bec <HAL_TIM_Encoder_Init+0x148>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	4313      	orrs	r3, r2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	011a      	lsls	r2, r3, #4
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	031b      	lsls	r3, r3, #12
 8004b64:	4313      	orrs	r3, r2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	4313      	orrs	r3, r2
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	fffebff8 	.word	0xfffebff8
 8004be4:	fffffcfc 	.word	0xfffffcfc
 8004be8:	fffff3f3 	.word	0xfffff3f3
 8004bec:	ffff0f0f 	.word	0xffff0f0f

08004bf0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d110      	bne.n	8004c42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d102      	bne.n	8004c2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c26:	7b7b      	ldrb	r3, [r7, #13]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e069      	b.n	8004d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c40:	e031      	b.n	8004ca6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d110      	bne.n	8004c6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c48:	7bbb      	ldrb	r3, [r7, #14]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d102      	bne.n	8004c54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c4e:	7b3b      	ldrb	r3, [r7, #12]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d001      	beq.n	8004c58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e055      	b.n	8004d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c68:	e01d      	b.n	8004ca6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d108      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c70:	7bbb      	ldrb	r3, [r7, #14]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d105      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c76:	7b7b      	ldrb	r3, [r7, #13]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d102      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c7c:	7b3b      	ldrb	r3, [r7, #12]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d001      	beq.n	8004c86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e03e      	b.n	8004d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_TIM_Encoder_Start+0xc4>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d008      	beq.n	8004cc4 <HAL_TIM_Encoder_Start+0xd4>
 8004cb2:	e00f      	b.n	8004cd4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fd73 	bl	80057a8 <TIM_CCxChannelCmd>
      break;
 8004cc2:	e016      	b.n	8004cf2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	2104      	movs	r1, #4
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fd6b 	bl	80057a8 <TIM_CCxChannelCmd>
      break;
 8004cd2:	e00e      	b.n	8004cf2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fd63 	bl	80057a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2104      	movs	r1, #4
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fd5c 	bl	80057a8 <TIM_CCxChannelCmd>
      break;
 8004cf0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0201 	orr.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d020      	beq.n	8004d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0202 	mvn.w	r2, #2
 8004d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f9fe 	bl	8005158 <HAL_TIM_IC_CaptureCallback>
 8004d5c:	e005      	b.n	8004d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9f0 	bl	8005144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fa01 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d020      	beq.n	8004dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01b      	beq.n	8004dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0204 	mvn.w	r2, #4
 8004d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f9d8 	bl	8005158 <HAL_TIM_IC_CaptureCallback>
 8004da8:	e005      	b.n	8004db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f9ca 	bl	8005144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9db 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d020      	beq.n	8004e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01b      	beq.n	8004e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0208 	mvn.w	r2, #8
 8004dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9b2 	bl	8005158 <HAL_TIM_IC_CaptureCallback>
 8004df4:	e005      	b.n	8004e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9a4 	bl	8005144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f9b5 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d020      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01b      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0210 	mvn.w	r2, #16
 8004e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f98c 	bl	8005158 <HAL_TIM_IC_CaptureCallback>
 8004e40:	e005      	b.n	8004e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f97e 	bl	8005144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f98f 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0201 	mvn.w	r2, #1
 8004e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fb fe7e 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d104      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00c      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fd3f 	bl	8005924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00c      	beq.n	8004eca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fd37 	bl	8005938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00c      	beq.n	8004eee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f949 	bl	8005180 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00c      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f06f 0220 	mvn.w	r2, #32
 8004f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fcff 	bl	8005910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e0ff      	b.n	800513a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b14      	cmp	r3, #20
 8004f46:	f200 80f0 	bhi.w	800512a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004fa5 	.word	0x08004fa5
 8004f54:	0800512b 	.word	0x0800512b
 8004f58:	0800512b 	.word	0x0800512b
 8004f5c:	0800512b 	.word	0x0800512b
 8004f60:	08004fe5 	.word	0x08004fe5
 8004f64:	0800512b 	.word	0x0800512b
 8004f68:	0800512b 	.word	0x0800512b
 8004f6c:	0800512b 	.word	0x0800512b
 8004f70:	08005027 	.word	0x08005027
 8004f74:	0800512b 	.word	0x0800512b
 8004f78:	0800512b 	.word	0x0800512b
 8004f7c:	0800512b 	.word	0x0800512b
 8004f80:	08005067 	.word	0x08005067
 8004f84:	0800512b 	.word	0x0800512b
 8004f88:	0800512b 	.word	0x0800512b
 8004f8c:	0800512b 	.word	0x0800512b
 8004f90:	080050a9 	.word	0x080050a9
 8004f94:	0800512b 	.word	0x0800512b
 8004f98:	0800512b 	.word	0x0800512b
 8004f9c:	0800512b 	.word	0x0800512b
 8004fa0:	080050e9 	.word	0x080050e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f99e 	bl	80052ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0208 	orr.w	r2, r2, #8
 8004fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0204 	bic.w	r2, r2, #4
 8004fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6999      	ldr	r1, [r3, #24]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	619a      	str	r2, [r3, #24]
      break;
 8004fe2:	e0a5      	b.n	8005130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f9f0 	bl	80053d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800500e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6999      	ldr	r1, [r3, #24]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	021a      	lsls	r2, r3, #8
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	619a      	str	r2, [r3, #24]
      break;
 8005024:	e084      	b.n	8005130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fa47 	bl	80054c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0208 	orr.w	r2, r2, #8
 8005040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0204 	bic.w	r2, r2, #4
 8005050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69d9      	ldr	r1, [r3, #28]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	61da      	str	r2, [r3, #28]
      break;
 8005064:	e064      	b.n	8005130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fa9d 	bl	80055ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69d9      	ldr	r1, [r3, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	021a      	lsls	r2, r3, #8
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	61da      	str	r2, [r3, #28]
      break;
 80050a6:	e043      	b.n	8005130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fad4 	bl	800565c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0208 	orr.w	r2, r2, #8
 80050c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0204 	bic.w	r2, r2, #4
 80050d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80050e6:	e023      	b.n	8005130 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fb06 	bl	8005700 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005102:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	021a      	lsls	r2, r3, #8
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005128:	e002      	b.n	8005130 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
      break;
 800512e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop

08005144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a46      	ldr	r2, [pc, #280]	@ (80052c0 <TIM_Base_SetConfig+0x12c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b2:	d00f      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a43      	ldr	r2, [pc, #268]	@ (80052c4 <TIM_Base_SetConfig+0x130>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a42      	ldr	r2, [pc, #264]	@ (80052c8 <TIM_Base_SetConfig+0x134>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a41      	ldr	r2, [pc, #260]	@ (80052cc <TIM_Base_SetConfig+0x138>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a40      	ldr	r2, [pc, #256]	@ (80052d0 <TIM_Base_SetConfig+0x13c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d108      	bne.n	80051e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a35      	ldr	r2, [pc, #212]	@ (80052c0 <TIM_Base_SetConfig+0x12c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d02b      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f4:	d027      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a32      	ldr	r2, [pc, #200]	@ (80052c4 <TIM_Base_SetConfig+0x130>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d023      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a31      	ldr	r2, [pc, #196]	@ (80052c8 <TIM_Base_SetConfig+0x134>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01f      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a30      	ldr	r2, [pc, #192]	@ (80052cc <TIM_Base_SetConfig+0x138>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01b      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2f      	ldr	r2, [pc, #188]	@ (80052d0 <TIM_Base_SetConfig+0x13c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d017      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2e      	ldr	r2, [pc, #184]	@ (80052d4 <TIM_Base_SetConfig+0x140>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2d      	ldr	r2, [pc, #180]	@ (80052d8 <TIM_Base_SetConfig+0x144>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00f      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2c      	ldr	r2, [pc, #176]	@ (80052dc <TIM_Base_SetConfig+0x148>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2b      	ldr	r2, [pc, #172]	@ (80052e0 <TIM_Base_SetConfig+0x14c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2a      	ldr	r2, [pc, #168]	@ (80052e4 <TIM_Base_SetConfig+0x150>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a29      	ldr	r2, [pc, #164]	@ (80052e8 <TIM_Base_SetConfig+0x154>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800524c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a10      	ldr	r2, [pc, #64]	@ (80052c0 <TIM_Base_SetConfig+0x12c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0xf8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a12      	ldr	r2, [pc, #72]	@ (80052d0 <TIM_Base_SetConfig+0x13c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d103      	bne.n	8005294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d105      	bne.n	80052b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	611a      	str	r2, [r3, #16]
  }
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40010400 	.word	0x40010400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800
 80052e0:	40001800 	.word	0x40001800
 80052e4:	40001c00 	.word	0x40001c00
 80052e8:	40002000 	.word	0x40002000

080052ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f023 0201 	bic.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4b2b      	ldr	r3, [pc, #172]	@ (80053c4 <TIM_OC1_SetConfig+0xd8>)
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 0302 	bic.w	r3, r3, #2
 8005334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a21      	ldr	r2, [pc, #132]	@ (80053c8 <TIM_OC1_SetConfig+0xdc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_OC1_SetConfig+0x64>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a20      	ldr	r2, [pc, #128]	@ (80053cc <TIM_OC1_SetConfig+0xe0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d10c      	bne.n	800536a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f023 0308 	bic.w	r3, r3, #8
 8005356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a16      	ldr	r2, [pc, #88]	@ (80053c8 <TIM_OC1_SetConfig+0xdc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_OC1_SetConfig+0x8e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a15      	ldr	r2, [pc, #84]	@ (80053cc <TIM_OC1_SetConfig+0xe0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d111      	bne.n	800539e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	621a      	str	r2, [r3, #32]
}
 80053b8:	bf00      	nop
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	fffeff8f 	.word	0xfffeff8f
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40010400 	.word	0x40010400

080053d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f023 0210 	bic.w	r2, r3, #16
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4b2e      	ldr	r3, [pc, #184]	@ (80054b4 <TIM_OC2_SetConfig+0xe4>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0320 	bic.w	r3, r3, #32
 800541a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a23      	ldr	r2, [pc, #140]	@ (80054b8 <TIM_OC2_SetConfig+0xe8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC2_SetConfig+0x68>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a22      	ldr	r2, [pc, #136]	@ (80054bc <TIM_OC2_SetConfig+0xec>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d10d      	bne.n	8005454 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800543e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005452:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a18      	ldr	r2, [pc, #96]	@ (80054b8 <TIM_OC2_SetConfig+0xe8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC2_SetConfig+0x94>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a17      	ldr	r2, [pc, #92]	@ (80054bc <TIM_OC2_SetConfig+0xec>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d113      	bne.n	800548c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800546a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	feff8fff 	.word	0xfeff8fff
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40010400 	.word	0x40010400

080054c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4b2d      	ldr	r3, [pc, #180]	@ (80055a0 <TIM_OC3_SetConfig+0xe0>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a22      	ldr	r2, [pc, #136]	@ (80055a4 <TIM_OC3_SetConfig+0xe4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_OC3_SetConfig+0x66>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a21      	ldr	r2, [pc, #132]	@ (80055a8 <TIM_OC3_SetConfig+0xe8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d10d      	bne.n	8005542 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800552c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a17      	ldr	r2, [pc, #92]	@ (80055a4 <TIM_OC3_SetConfig+0xe4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d003      	beq.n	8005552 <TIM_OC3_SetConfig+0x92>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a16      	ldr	r2, [pc, #88]	@ (80055a8 <TIM_OC3_SetConfig+0xe8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d113      	bne.n	800557a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	621a      	str	r2, [r3, #32]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	fffeff8f 	.word	0xfffeff8f
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40010400 	.word	0x40010400

080055ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005650 <TIM_OC4_SetConfig+0xa4>)
 80055d8:	4013      	ands	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a13      	ldr	r2, [pc, #76]	@ (8005654 <TIM_OC4_SetConfig+0xa8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC4_SetConfig+0x68>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a12      	ldr	r2, [pc, #72]	@ (8005658 <TIM_OC4_SetConfig+0xac>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d109      	bne.n	8005628 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800561a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	019b      	lsls	r3, r3, #6
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	feff8fff 	.word	0xfeff8fff
 8005654:	40010000 	.word	0x40010000
 8005658:	40010400 	.word	0x40010400

0800565c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4b1b      	ldr	r3, [pc, #108]	@ (80056f4 <TIM_OC5_SetConfig+0x98>)
 8005688:	4013      	ands	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800569c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a12      	ldr	r2, [pc, #72]	@ (80056f8 <TIM_OC5_SetConfig+0x9c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC5_SetConfig+0x5e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a11      	ldr	r2, [pc, #68]	@ (80056fc <TIM_OC5_SetConfig+0xa0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d109      	bne.n	80056ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	fffeff8f 	.word	0xfffeff8f
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40010400 	.word	0x40010400

08005700 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4b1c      	ldr	r3, [pc, #112]	@ (800579c <TIM_OC6_SetConfig+0x9c>)
 800572c:	4013      	ands	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	051b      	lsls	r3, r3, #20
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a13      	ldr	r2, [pc, #76]	@ (80057a0 <TIM_OC6_SetConfig+0xa0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d003      	beq.n	8005760 <TIM_OC6_SetConfig+0x60>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a12      	ldr	r2, [pc, #72]	@ (80057a4 <TIM_OC6_SetConfig+0xa4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d109      	bne.n	8005774 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005766:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	029b      	lsls	r3, r3, #10
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	feff8fff 	.word	0xfeff8fff
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40010400 	.word	0x40010400

080057a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2201      	movs	r2, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a1a      	ldr	r2, [r3, #32]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	401a      	ands	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1a      	ldr	r2, [r3, #32]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 031f 	and.w	r3, r3, #31
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	fa01 f303 	lsl.w	r3, r1, r3
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005808:	2302      	movs	r3, #2
 800580a:	e06d      	b.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a30      	ldr	r2, [pc, #192]	@ (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2f      	ldr	r2, [pc, #188]	@ (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d108      	bne.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005846:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005858:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a20      	ldr	r2, [pc, #128]	@ (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d022      	beq.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587e:	d01d      	beq.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1d      	ldr	r2, [pc, #116]	@ (80058fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d018      	beq.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1c      	ldr	r2, [pc, #112]	@ (8005900 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1a      	ldr	r2, [pc, #104]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a15      	ldr	r2, [pc, #84]	@ (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d009      	beq.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a16      	ldr	r2, [pc, #88]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a15      	ldr	r2, [pc, #84]	@ (800590c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d10c      	bne.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800
 8005904:	40000c00 	.word	0x40000c00
 8005908:	40014000 	.word	0x40014000
 800590c:	40001800 	.word	0x40001800

08005910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e040      	b.n	80059e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fc fa6e 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	@ 0x24
 8005978:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fff0 	bl	8006978 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fd89 	bl	80064b0 <UART_SetConfig>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e01b      	b.n	80059e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 f86f 	bl	8006abc <UART_CheckIdleState>
 80059de:	4603      	mov	r3, r0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	@ 0x28
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d177      	bne.n	8005af0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_UART_Transmit+0x24>
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e070      	b.n	8005af2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2221      	movs	r2, #33	@ 0x21
 8005a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a1e:	f7fc fc51 	bl	80022c4 <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3c:	d108      	bne.n	8005a50 <HAL_UART_Transmit+0x68>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e003      	b.n	8005a58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a58:	e02f      	b.n	8005aba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2200      	movs	r2, #0
 8005a62:	2180      	movs	r1, #128	@ 0x80
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f001 f8d1 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e03b      	b.n	8005af2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	3302      	adds	r3, #2
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	e007      	b.n	8005aa8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1c9      	bne.n	8005a5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	2140      	movs	r1, #64	@ 0x40
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f001 f89b 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e005      	b.n	8005af2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e000      	b.n	8005af2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
  }
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	@ 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d165      	bne.n	8005bde <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_UART_Transmit_DMA+0x22>
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e05e      	b.n	8005be0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2221      	movs	r2, #33	@ 0x21
 8005b44:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d027      	beq.n	8005b9e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b52:	4a25      	ldr	r2, [pc, #148]	@ (8005be8 <HAL_UART_Transmit_DMA+0xec>)
 8005b54:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5a:	4a24      	ldr	r2, [pc, #144]	@ (8005bec <HAL_UART_Transmit_DMA+0xf0>)
 8005b5c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b62:	4a23      	ldr	r2, [pc, #140]	@ (8005bf0 <HAL_UART_Transmit_DMA+0xf4>)
 8005b64:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b76:	4619      	mov	r1, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3328      	adds	r3, #40	@ 0x28
 8005b7e:	461a      	mov	r2, r3
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	f7fc fd8f 	bl	80026a4 <HAL_DMA_Start_IT>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2210      	movs	r2, #16
 8005b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e020      	b.n	8005be0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2240      	movs	r2, #64	@ 0x40
 8005ba4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3308      	adds	r3, #8
 8005bac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc6:	623a      	str	r2, [r7, #32]
 8005bc8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	69f9      	ldr	r1, [r7, #28]
 8005bcc:	6a3a      	ldr	r2, [r7, #32]
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e5      	bne.n	8005ba6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e000      	b.n	8005be0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
  }
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3728      	adds	r7, #40	@ 0x28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	08006f3d 	.word	0x08006f3d
 8005bec:	08006fd3 	.word	0x08006fd3
 8005bf0:	08007155 	.word	0x08007155

08005bf4 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08e      	sub	sp, #56	@ 0x38
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e6      	bne.n	8005bfc <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c38:	2b80      	cmp	r3, #128	@ 0x80
 8005c3a:	d137      	bne.n	8005cac <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3308      	adds	r3, #8
 8005c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c5c:	61ba      	str	r2, [r7, #24]
 8005c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6979      	ldr	r1, [r7, #20]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	613b      	str	r3, [r7, #16]
   return(result);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e5      	bne.n	8005c3c <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d019      	beq.n	8005cac <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fc fd6d 	bl	8002764 <HAL_DMA_Abort>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00d      	beq.n	8005cac <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fc ff81 	bl	8002b9c <HAL_DMA_GetError>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d105      	bne.n	8005cac <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e007      	b.n	8005cbc <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3738      	adds	r7, #56	@ 0x38
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b09a      	sub	sp, #104	@ 0x68
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ce0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e5      	bne.n	8005cfe <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d118      	bne.n	8005d6c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f023 0310 	bic.w	r3, r3, #16
 8005d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d5a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e6      	bne.n	8005d3a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d76:	2b40      	cmp	r3, #64	@ 0x40
 8005d78:	d137      	bne.n	8005dea <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3308      	adds	r3, #8
 8005d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3308      	adds	r3, #8
 8005d98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d9a:	61ba      	str	r2, [r7, #24]
 8005d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6979      	ldr	r1, [r7, #20]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	613b      	str	r3, [r7, #16]
   return(result);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d019      	beq.n	8005dea <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dba:	2200      	movs	r2, #0
 8005dbc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fc fcce 	bl	8002764 <HAL_DMA_Abort>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fc fee2 	bl	8002b9c <HAL_DMA_GetError>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d105      	bne.n	8005dea <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2210      	movs	r2, #16
 8005de2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e017      	b.n	8005e1a <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	220f      	movs	r2, #15
 8005df8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0208 	orr.w	r2, r2, #8
 8005e08:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3768      	adds	r7, #104	@ 0x68
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b0ba      	sub	sp, #232	@ 0xe8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e4e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e52:	4013      	ands	r3, r2
 8005e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d115      	bne.n	8005e8c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00f      	beq.n	8005e8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 82ac 	beq.w	80063da <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
      }
      return;
 8005e8a:	e2a6      	b.n	80063da <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8117 	beq.w	80060c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ea2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ea6:	4b85      	ldr	r3, [pc, #532]	@ (80060bc <HAL_UART_IRQHandler+0x298>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 810a 	beq.w	80060c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d011      	beq.n	8005ee0 <HAL_UART_IRQHandler+0xbc>
 8005ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed6:	f043 0201 	orr.w	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d011      	beq.n	8005f10 <HAL_UART_IRQHandler+0xec>
 8005eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2202      	movs	r2, #2
 8005efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f06:	f043 0204 	orr.w	r2, r3, #4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d011      	beq.n	8005f40 <HAL_UART_IRQHandler+0x11c>
 8005f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f36:	f043 0202 	orr.w	r2, r3, #2
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d017      	beq.n	8005f7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d105      	bne.n	8005f64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f72:	f043 0208 	orr.w	r2, r3, #8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d012      	beq.n	8005fae <HAL_UART_IRQHandler+0x18a>
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00c      	beq.n	8005fae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa4:	f043 0220 	orr.w	r2, r3, #32
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8212 	beq.w	80063de <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00d      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff6:	2b40      	cmp	r3, #64	@ 0x40
 8005ff8:	d005      	beq.n	8006006 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ffe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006002:	2b00      	cmp	r3, #0
 8006004:	d04f      	beq.n	80060a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 ff34 	bl	8006e74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006016:	2b40      	cmp	r3, #64	@ 0x40
 8006018:	d141      	bne.n	800609e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3308      	adds	r3, #8
 8006042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006046:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800604a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800605e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1d9      	bne.n	800601a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800606a:	2b00      	cmp	r3, #0
 800606c:	d013      	beq.n	8006096 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006072:	4a13      	ldr	r2, [pc, #76]	@ (80060c0 <HAL_UART_IRQHandler+0x29c>)
 8006074:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800607a:	4618      	mov	r0, r3
 800607c:	f7fc fbe2 	bl	8002844 <HAL_DMA_Abort_IT>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d017      	beq.n	80060b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800608a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006090:	4610      	mov	r0, r2
 8006092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	e00f      	b.n	80060b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f9d4 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	e00b      	b.n	80060b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f9d0 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a4:	e007      	b.n	80060b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f9cc 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80060b4:	e193      	b.n	80063de <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b6:	bf00      	nop
    return;
 80060b8:	e191      	b.n	80063de <HAL_UART_IRQHandler+0x5ba>
 80060ba:	bf00      	nop
 80060bc:	04000120 	.word	0x04000120
 80060c0:	080071d3 	.word	0x080071d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	f040 814c 	bne.w	8006366 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8145 	beq.w	8006366 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 813e 	beq.w	8006366 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2210      	movs	r2, #16
 80060f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fc:	2b40      	cmp	r3, #64	@ 0x40
 80060fe:	f040 80b6 	bne.w	800626e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800610e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 8165 	beq.w	80063e2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800611e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006122:	429a      	cmp	r2, r3
 8006124:	f080 815d 	bcs.w	80063e2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800612e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800613c:	f000 8086 	beq.w	800624c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006154:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800615c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800616a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800616e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006176:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1da      	bne.n	8006140 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800619a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e1      	bne.n	800618a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3308      	adds	r3, #8
 80061cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3308      	adds	r3, #8
 80061e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e3      	bne.n	80061c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800621a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800621c:	f023 0310 	bic.w	r3, r3, #16
 8006220:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800622e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006230:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006234:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800623c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e4      	bne.n	800620c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006246:	4618      	mov	r0, r3
 8006248:	f7fc fa8c 	bl	8002764 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800625e:	b29b      	uxth	r3, r3
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	b29b      	uxth	r3, r3
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fa fb16 	bl	8000898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800626c:	e0b9      	b.n	80063e2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800627a:	b29b      	uxth	r3, r3
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80ab 	beq.w	80063e6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80a6 	beq.w	80063e6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a2:	e853 3f00 	ldrex	r3, [r3]
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e4      	bne.n	800629a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3308      	adds	r3, #8
 80062d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	623b      	str	r3, [r7, #32]
   return(result);
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80062f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e3      	bne.n	80062d0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	60fb      	str	r3, [r7, #12]
   return(result);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f023 0310 	bic.w	r3, r3, #16
 8006330:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800633e:	61fb      	str	r3, [r7, #28]
 8006340:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	69b9      	ldr	r1, [r7, #24]
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	617b      	str	r3, [r7, #20]
   return(result);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e4      	bne.n	800631c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fa fa9a 	bl	8000898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006364:	e03f      	b.n	80063e6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00e      	beq.n	8006390 <HAL_UART_IRQHandler+0x56c>
 8006372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d008      	beq.n	8006390 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006386:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f865 	bl	8006458 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800638e:	e02d      	b.n	80063ec <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00e      	beq.n	80063ba <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01c      	beq.n	80063ea <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
    }
    return;
 80063b8:	e017      	b.n	80063ea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d012      	beq.n	80063ec <HAL_UART_IRQHandler+0x5c8>
 80063c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00c      	beq.n	80063ec <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 ff13 	bl	80071fe <UART_EndTransmit_IT>
    return;
 80063d8:	e008      	b.n	80063ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80063da:	bf00      	nop
 80063dc:	e006      	b.n	80063ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80063de:	bf00      	nop
 80063e0:	e004      	b.n	80063ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80063e2:	bf00      	nop
 80063e4:	e002      	b.n	80063ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80063e6:	bf00      	nop
 80063e8:	e000      	b.n	80063ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80063ea:	bf00      	nop
  }

}
 80063ec:	37e8      	adds	r7, #232	@ 0xe8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop

080063f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006478:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006480:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4313      	orrs	r3, r2
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
	...

080064b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4ba6      	ldr	r3, [pc, #664]	@ (8006774 <UART_SetConfig+0x2c4>)
 80064dc:	4013      	ands	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	6979      	ldr	r1, [r7, #20]
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	430a      	orrs	r2, r1
 8006520:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a94      	ldr	r2, [pc, #592]	@ (8006778 <UART_SetConfig+0x2c8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d120      	bne.n	800656e <UART_SetConfig+0xbe>
 800652c:	4b93      	ldr	r3, [pc, #588]	@ (800677c <UART_SetConfig+0x2cc>)
 800652e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d816      	bhi.n	8006568 <UART_SetConfig+0xb8>
 800653a:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <UART_SetConfig+0x90>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006551 	.word	0x08006551
 8006544:	0800655d 	.word	0x0800655d
 8006548:	08006557 	.word	0x08006557
 800654c:	08006563 	.word	0x08006563
 8006550:	2301      	movs	r3, #1
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e150      	b.n	80067f8 <UART_SetConfig+0x348>
 8006556:	2302      	movs	r3, #2
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e14d      	b.n	80067f8 <UART_SetConfig+0x348>
 800655c:	2304      	movs	r3, #4
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e14a      	b.n	80067f8 <UART_SetConfig+0x348>
 8006562:	2308      	movs	r3, #8
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e147      	b.n	80067f8 <UART_SetConfig+0x348>
 8006568:	2310      	movs	r3, #16
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e144      	b.n	80067f8 <UART_SetConfig+0x348>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a83      	ldr	r2, [pc, #524]	@ (8006780 <UART_SetConfig+0x2d0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d132      	bne.n	80065de <UART_SetConfig+0x12e>
 8006578:	4b80      	ldr	r3, [pc, #512]	@ (800677c <UART_SetConfig+0x2cc>)
 800657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	2b0c      	cmp	r3, #12
 8006584:	d828      	bhi.n	80065d8 <UART_SetConfig+0x128>
 8006586:	a201      	add	r2, pc, #4	@ (adr r2, 800658c <UART_SetConfig+0xdc>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065c1 	.word	0x080065c1
 8006590:	080065d9 	.word	0x080065d9
 8006594:	080065d9 	.word	0x080065d9
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065cd 	.word	0x080065cd
 80065a0:	080065d9 	.word	0x080065d9
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	080065d9 	.word	0x080065d9
 80065ac:	080065c7 	.word	0x080065c7
 80065b0:	080065d9 	.word	0x080065d9
 80065b4:	080065d9 	.word	0x080065d9
 80065b8:	080065d9 	.word	0x080065d9
 80065bc:	080065d3 	.word	0x080065d3
 80065c0:	2300      	movs	r3, #0
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e118      	b.n	80067f8 <UART_SetConfig+0x348>
 80065c6:	2302      	movs	r3, #2
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e115      	b.n	80067f8 <UART_SetConfig+0x348>
 80065cc:	2304      	movs	r3, #4
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e112      	b.n	80067f8 <UART_SetConfig+0x348>
 80065d2:	2308      	movs	r3, #8
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e10f      	b.n	80067f8 <UART_SetConfig+0x348>
 80065d8:	2310      	movs	r3, #16
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e10c      	b.n	80067f8 <UART_SetConfig+0x348>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a68      	ldr	r2, [pc, #416]	@ (8006784 <UART_SetConfig+0x2d4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d120      	bne.n	800662a <UART_SetConfig+0x17a>
 80065e8:	4b64      	ldr	r3, [pc, #400]	@ (800677c <UART_SetConfig+0x2cc>)
 80065ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065f2:	2b30      	cmp	r3, #48	@ 0x30
 80065f4:	d013      	beq.n	800661e <UART_SetConfig+0x16e>
 80065f6:	2b30      	cmp	r3, #48	@ 0x30
 80065f8:	d814      	bhi.n	8006624 <UART_SetConfig+0x174>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d009      	beq.n	8006612 <UART_SetConfig+0x162>
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d810      	bhi.n	8006624 <UART_SetConfig+0x174>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <UART_SetConfig+0x15c>
 8006606:	2b10      	cmp	r3, #16
 8006608:	d006      	beq.n	8006618 <UART_SetConfig+0x168>
 800660a:	e00b      	b.n	8006624 <UART_SetConfig+0x174>
 800660c:	2300      	movs	r3, #0
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e0f2      	b.n	80067f8 <UART_SetConfig+0x348>
 8006612:	2302      	movs	r3, #2
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e0ef      	b.n	80067f8 <UART_SetConfig+0x348>
 8006618:	2304      	movs	r3, #4
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e0ec      	b.n	80067f8 <UART_SetConfig+0x348>
 800661e:	2308      	movs	r3, #8
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e0e9      	b.n	80067f8 <UART_SetConfig+0x348>
 8006624:	2310      	movs	r3, #16
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e0e6      	b.n	80067f8 <UART_SetConfig+0x348>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a56      	ldr	r2, [pc, #344]	@ (8006788 <UART_SetConfig+0x2d8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d120      	bne.n	8006676 <UART_SetConfig+0x1c6>
 8006634:	4b51      	ldr	r3, [pc, #324]	@ (800677c <UART_SetConfig+0x2cc>)
 8006636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800663e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006640:	d013      	beq.n	800666a <UART_SetConfig+0x1ba>
 8006642:	2bc0      	cmp	r3, #192	@ 0xc0
 8006644:	d814      	bhi.n	8006670 <UART_SetConfig+0x1c0>
 8006646:	2b80      	cmp	r3, #128	@ 0x80
 8006648:	d009      	beq.n	800665e <UART_SetConfig+0x1ae>
 800664a:	2b80      	cmp	r3, #128	@ 0x80
 800664c:	d810      	bhi.n	8006670 <UART_SetConfig+0x1c0>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <UART_SetConfig+0x1a8>
 8006652:	2b40      	cmp	r3, #64	@ 0x40
 8006654:	d006      	beq.n	8006664 <UART_SetConfig+0x1b4>
 8006656:	e00b      	b.n	8006670 <UART_SetConfig+0x1c0>
 8006658:	2300      	movs	r3, #0
 800665a:	77fb      	strb	r3, [r7, #31]
 800665c:	e0cc      	b.n	80067f8 <UART_SetConfig+0x348>
 800665e:	2302      	movs	r3, #2
 8006660:	77fb      	strb	r3, [r7, #31]
 8006662:	e0c9      	b.n	80067f8 <UART_SetConfig+0x348>
 8006664:	2304      	movs	r3, #4
 8006666:	77fb      	strb	r3, [r7, #31]
 8006668:	e0c6      	b.n	80067f8 <UART_SetConfig+0x348>
 800666a:	2308      	movs	r3, #8
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e0c3      	b.n	80067f8 <UART_SetConfig+0x348>
 8006670:	2310      	movs	r3, #16
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e0c0      	b.n	80067f8 <UART_SetConfig+0x348>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a44      	ldr	r2, [pc, #272]	@ (800678c <UART_SetConfig+0x2dc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d125      	bne.n	80066cc <UART_SetConfig+0x21c>
 8006680:	4b3e      	ldr	r3, [pc, #248]	@ (800677c <UART_SetConfig+0x2cc>)
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800668a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800668e:	d017      	beq.n	80066c0 <UART_SetConfig+0x210>
 8006690:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006694:	d817      	bhi.n	80066c6 <UART_SetConfig+0x216>
 8006696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800669a:	d00b      	beq.n	80066b4 <UART_SetConfig+0x204>
 800669c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a0:	d811      	bhi.n	80066c6 <UART_SetConfig+0x216>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <UART_SetConfig+0x1fe>
 80066a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066aa:	d006      	beq.n	80066ba <UART_SetConfig+0x20a>
 80066ac:	e00b      	b.n	80066c6 <UART_SetConfig+0x216>
 80066ae:	2300      	movs	r3, #0
 80066b0:	77fb      	strb	r3, [r7, #31]
 80066b2:	e0a1      	b.n	80067f8 <UART_SetConfig+0x348>
 80066b4:	2302      	movs	r3, #2
 80066b6:	77fb      	strb	r3, [r7, #31]
 80066b8:	e09e      	b.n	80067f8 <UART_SetConfig+0x348>
 80066ba:	2304      	movs	r3, #4
 80066bc:	77fb      	strb	r3, [r7, #31]
 80066be:	e09b      	b.n	80067f8 <UART_SetConfig+0x348>
 80066c0:	2308      	movs	r3, #8
 80066c2:	77fb      	strb	r3, [r7, #31]
 80066c4:	e098      	b.n	80067f8 <UART_SetConfig+0x348>
 80066c6:	2310      	movs	r3, #16
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	e095      	b.n	80067f8 <UART_SetConfig+0x348>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006790 <UART_SetConfig+0x2e0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d125      	bne.n	8006722 <UART_SetConfig+0x272>
 80066d6:	4b29      	ldr	r3, [pc, #164]	@ (800677c <UART_SetConfig+0x2cc>)
 80066d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e4:	d017      	beq.n	8006716 <UART_SetConfig+0x266>
 80066e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ea:	d817      	bhi.n	800671c <UART_SetConfig+0x26c>
 80066ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f0:	d00b      	beq.n	800670a <UART_SetConfig+0x25a>
 80066f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f6:	d811      	bhi.n	800671c <UART_SetConfig+0x26c>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <UART_SetConfig+0x254>
 80066fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006700:	d006      	beq.n	8006710 <UART_SetConfig+0x260>
 8006702:	e00b      	b.n	800671c <UART_SetConfig+0x26c>
 8006704:	2301      	movs	r3, #1
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e076      	b.n	80067f8 <UART_SetConfig+0x348>
 800670a:	2302      	movs	r3, #2
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e073      	b.n	80067f8 <UART_SetConfig+0x348>
 8006710:	2304      	movs	r3, #4
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e070      	b.n	80067f8 <UART_SetConfig+0x348>
 8006716:	2308      	movs	r3, #8
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e06d      	b.n	80067f8 <UART_SetConfig+0x348>
 800671c:	2310      	movs	r3, #16
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e06a      	b.n	80067f8 <UART_SetConfig+0x348>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1b      	ldr	r2, [pc, #108]	@ (8006794 <UART_SetConfig+0x2e4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d138      	bne.n	800679e <UART_SetConfig+0x2ee>
 800672c:	4b13      	ldr	r3, [pc, #76]	@ (800677c <UART_SetConfig+0x2cc>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006732:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006736:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800673a:	d017      	beq.n	800676c <UART_SetConfig+0x2bc>
 800673c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006740:	d82a      	bhi.n	8006798 <UART_SetConfig+0x2e8>
 8006742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006746:	d00b      	beq.n	8006760 <UART_SetConfig+0x2b0>
 8006748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800674c:	d824      	bhi.n	8006798 <UART_SetConfig+0x2e8>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <UART_SetConfig+0x2aa>
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006756:	d006      	beq.n	8006766 <UART_SetConfig+0x2b6>
 8006758:	e01e      	b.n	8006798 <UART_SetConfig+0x2e8>
 800675a:	2300      	movs	r3, #0
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e04b      	b.n	80067f8 <UART_SetConfig+0x348>
 8006760:	2302      	movs	r3, #2
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e048      	b.n	80067f8 <UART_SetConfig+0x348>
 8006766:	2304      	movs	r3, #4
 8006768:	77fb      	strb	r3, [r7, #31]
 800676a:	e045      	b.n	80067f8 <UART_SetConfig+0x348>
 800676c:	2308      	movs	r3, #8
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e042      	b.n	80067f8 <UART_SetConfig+0x348>
 8006772:	bf00      	nop
 8006774:	efff69f3 	.word	0xefff69f3
 8006778:	40011000 	.word	0x40011000
 800677c:	40023800 	.word	0x40023800
 8006780:	40004400 	.word	0x40004400
 8006784:	40004800 	.word	0x40004800
 8006788:	40004c00 	.word	0x40004c00
 800678c:	40005000 	.word	0x40005000
 8006790:	40011400 	.word	0x40011400
 8006794:	40007800 	.word	0x40007800
 8006798:	2310      	movs	r3, #16
 800679a:	77fb      	strb	r3, [r7, #31]
 800679c:	e02c      	b.n	80067f8 <UART_SetConfig+0x348>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a72      	ldr	r2, [pc, #456]	@ (800696c <UART_SetConfig+0x4bc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d125      	bne.n	80067f4 <UART_SetConfig+0x344>
 80067a8:	4b71      	ldr	r3, [pc, #452]	@ (8006970 <UART_SetConfig+0x4c0>)
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80067b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067b6:	d017      	beq.n	80067e8 <UART_SetConfig+0x338>
 80067b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067bc:	d817      	bhi.n	80067ee <UART_SetConfig+0x33e>
 80067be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067c2:	d00b      	beq.n	80067dc <UART_SetConfig+0x32c>
 80067c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067c8:	d811      	bhi.n	80067ee <UART_SetConfig+0x33e>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <UART_SetConfig+0x326>
 80067ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067d2:	d006      	beq.n	80067e2 <UART_SetConfig+0x332>
 80067d4:	e00b      	b.n	80067ee <UART_SetConfig+0x33e>
 80067d6:	2300      	movs	r3, #0
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e00d      	b.n	80067f8 <UART_SetConfig+0x348>
 80067dc:	2302      	movs	r3, #2
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e00a      	b.n	80067f8 <UART_SetConfig+0x348>
 80067e2:	2304      	movs	r3, #4
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e007      	b.n	80067f8 <UART_SetConfig+0x348>
 80067e8:	2308      	movs	r3, #8
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e004      	b.n	80067f8 <UART_SetConfig+0x348>
 80067ee:	2310      	movs	r3, #16
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e001      	b.n	80067f8 <UART_SetConfig+0x348>
 80067f4:	2310      	movs	r3, #16
 80067f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006800:	d15b      	bne.n	80068ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006802:	7ffb      	ldrb	r3, [r7, #31]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d828      	bhi.n	800685a <UART_SetConfig+0x3aa>
 8006808:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <UART_SetConfig+0x360>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006835 	.word	0x08006835
 8006814:	0800683d 	.word	0x0800683d
 8006818:	08006845 	.word	0x08006845
 800681c:	0800685b 	.word	0x0800685b
 8006820:	0800684b 	.word	0x0800684b
 8006824:	0800685b 	.word	0x0800685b
 8006828:	0800685b 	.word	0x0800685b
 800682c:	0800685b 	.word	0x0800685b
 8006830:	08006853 	.word	0x08006853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fd fac4 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8006838:	61b8      	str	r0, [r7, #24]
        break;
 800683a:	e013      	b.n	8006864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800683c:	f7fd fad4 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 8006840:	61b8      	str	r0, [r7, #24]
        break;
 8006842:	e00f      	b.n	8006864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006844:	4b4b      	ldr	r3, [pc, #300]	@ (8006974 <UART_SetConfig+0x4c4>)
 8006846:	61bb      	str	r3, [r7, #24]
        break;
 8006848:	e00c      	b.n	8006864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7fd f9a7 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 800684e:	61b8      	str	r0, [r7, #24]
        break;
 8006850:	e008      	b.n	8006864 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006856:	61bb      	str	r3, [r7, #24]
        break;
 8006858:	e004      	b.n	8006864 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	77bb      	strb	r3, [r7, #30]
        break;
 8006862:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d074      	beq.n	8006954 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	005a      	lsls	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	441a      	add	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b0f      	cmp	r3, #15
 8006884:	d916      	bls.n	80068b4 <UART_SetConfig+0x404>
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800688c:	d212      	bcs.n	80068b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f023 030f 	bic.w	r3, r3, #15
 8006896:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	b29b      	uxth	r3, r3
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	89fb      	ldrh	r3, [r7, #14]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	89fa      	ldrh	r2, [r7, #14]
 80068b0:	60da      	str	r2, [r3, #12]
 80068b2:	e04f      	b.n	8006954 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	77bb      	strb	r3, [r7, #30]
 80068b8:	e04c      	b.n	8006954 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068ba:	7ffb      	ldrb	r3, [r7, #31]
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d828      	bhi.n	8006912 <UART_SetConfig+0x462>
 80068c0:	a201      	add	r2, pc, #4	@ (adr r2, 80068c8 <UART_SetConfig+0x418>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	08006913 	.word	0x08006913
 80068d8:	08006903 	.word	0x08006903
 80068dc:	08006913 	.word	0x08006913
 80068e0:	08006913 	.word	0x08006913
 80068e4:	08006913 	.word	0x08006913
 80068e8:	0800690b 	.word	0x0800690b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ec:	f7fd fa68 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 80068f0:	61b8      	str	r0, [r7, #24]
        break;
 80068f2:	e013      	b.n	800691c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f4:	f7fd fa78 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 80068f8:	61b8      	str	r0, [r7, #24]
        break;
 80068fa:	e00f      	b.n	800691c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006974 <UART_SetConfig+0x4c4>)
 80068fe:	61bb      	str	r3, [r7, #24]
        break;
 8006900:	e00c      	b.n	800691c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006902:	f7fd f94b 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8006906:	61b8      	str	r0, [r7, #24]
        break;
 8006908:	e008      	b.n	800691c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800690e:	61bb      	str	r3, [r7, #24]
        break;
 8006910:	e004      	b.n	800691c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	77bb      	strb	r3, [r7, #30]
        break;
 800691a:	bf00      	nop
    }

    if (pclk != 0U)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d018      	beq.n	8006954 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	085a      	lsrs	r2, r3, #1
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	441a      	add	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	fbb2 f3f3 	udiv	r3, r2, r3
 8006934:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b0f      	cmp	r3, #15
 800693a:	d909      	bls.n	8006950 <UART_SetConfig+0x4a0>
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006942:	d205      	bcs.n	8006950 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60da      	str	r2, [r3, #12]
 800694e:	e001      	b.n	8006954 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006960:	7fbb      	ldrb	r3, [r7, #30]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3720      	adds	r7, #32
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40007c00 	.word	0x40007c00
 8006970:	40023800 	.word	0x40023800
 8006974:	00f42400 	.word	0x00f42400

08006978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a76:	d10a      	bne.n	8006a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b098      	sub	sp, #96	@ 0x60
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006acc:	f7fb fbfa 	bl	80022c4 <HAL_GetTick>
 8006ad0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d12e      	bne.n	8006b3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f88c 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d021      	beq.n	8006b3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e062      	b.n	8006c04 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d149      	bne.n	8006be0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b54:	2200      	movs	r2, #0
 8006b56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f856 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d03c      	beq.n	8006be0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	623b      	str	r3, [r7, #32]
   return(result);
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e6      	bne.n	8006b66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0301 	bic.w	r3, r3, #1
 8006bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bb8:	61fa      	str	r2, [r7, #28]
 8006bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e5      	bne.n	8006b98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e011      	b.n	8006c04 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3758      	adds	r7, #88	@ 0x58
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1c:	e04f      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c24:	d04b      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c26:	f7fb fb4d 	bl	80022c4 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d302      	bcc.n	8006c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e04e      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d037      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b80      	cmp	r3, #128	@ 0x80
 8006c52:	d034      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b40      	cmp	r3, #64	@ 0x40
 8006c58:	d031      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d110      	bne.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f8ff 	bl	8006e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2208      	movs	r2, #8
 8006c7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e029      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c98:	d111      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f8e5 	bl	8006e74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e00f      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d0a0      	beq.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b096      	sub	sp, #88	@ 0x58
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2222      	movs	r2, #34	@ 0x22
 8006d10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d028      	beq.n	8006d6e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d20:	4a3e      	ldr	r2, [pc, #248]	@ (8006e1c <UART_Start_Receive_DMA+0x134>)
 8006d22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d28:	4a3d      	ldr	r2, [pc, #244]	@ (8006e20 <UART_Start_Receive_DMA+0x138>)
 8006d2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d30:	4a3c      	ldr	r2, [pc, #240]	@ (8006e24 <UART_Start_Receive_DMA+0x13c>)
 8006d32:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d38:	2200      	movs	r2, #0
 8006d3a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3324      	adds	r3, #36	@ 0x24
 8006d46:	4619      	mov	r1, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	f7fb fca8 	bl	80026a4 <HAL_DMA_Start_IT>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2210      	movs	r2, #16
 8006d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e051      	b.n	8006e12 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d018      	beq.n	8006da8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d96:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e6      	bne.n	8006d76 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006dc8:	637a      	str	r2, [r7, #52]	@ 0x34
 8006dca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006dce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e5      	bne.n	8006da8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3308      	adds	r3, #8
 8006de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	613b      	str	r3, [r7, #16]
   return(result);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dfc:	623a      	str	r2, [r7, #32]
 8006dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	69f9      	ldr	r1, [r7, #28]
 8006e02:	6a3a      	ldr	r2, [r7, #32]
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e5      	bne.n	8006ddc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3758      	adds	r7, #88	@ 0x58
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	08006fef 	.word	0x08006fef
 8006e20:	08007117 	.word	0x08007117
 8006e24:	08007155 	.word	0x08007155

08006e28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	@ 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6979      	ldr	r1, [r7, #20]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e6      	bne.n	8006e30 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006e68:	bf00      	nop
 8006e6a:	3724      	adds	r7, #36	@ 0x24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b095      	sub	sp, #84	@ 0x54
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ea0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e6      	bne.n	8006e7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f023 0301 	bic.w	r3, r3, #1
 8006ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e5      	bne.n	8006eae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d118      	bne.n	8006f1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f023 0310 	bic.w	r3, r3, #16
 8006efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6979      	ldr	r1, [r7, #20]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	613b      	str	r3, [r7, #16]
   return(result);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f30:	bf00      	nop
 8006f32:	3754      	adds	r7, #84	@ 0x54
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b090      	sub	sp, #64	@ 0x40
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f52:	d037      	beq.n	8006fc4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3308      	adds	r3, #8
 8006f62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e5      	bne.n	8006f5c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	69b9      	ldr	r1, [r7, #24]
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	617b      	str	r3, [r7, #20]
   return(result);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e6      	bne.n	8006f90 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fc2:	e002      	b.n	8006fca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006fc4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006fc6:	f7ff fa15 	bl	80063f4 <HAL_UART_TxCpltCallback>
}
 8006fca:	bf00      	nop
 8006fcc:	3740      	adds	r7, #64	@ 0x40
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7ff fa11 	bl	8006408 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b09c      	sub	sp, #112	@ 0x70
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007004:	d071      	beq.n	80070ea <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8007006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007008:	2200      	movs	r2, #0
 800700a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800700e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800701c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800701e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007022:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800702c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800702e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007032:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800703a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e6      	bne.n	800700e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007052:	f023 0301 	bic.w	r3, r3, #1
 8007056:	667b      	str	r3, [r7, #100]	@ 0x64
 8007058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007060:	647a      	str	r2, [r7, #68]	@ 0x44
 8007062:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800706e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e5      	bne.n	8007040 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3308      	adds	r3, #8
 800707a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	623b      	str	r3, [r7, #32]
   return(result);
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800708a:	663b      	str	r3, [r7, #96]	@ 0x60
 800708c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3308      	adds	r3, #8
 8007092:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007094:	633a      	str	r2, [r7, #48]	@ 0x30
 8007096:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800709a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e5      	bne.n	8007074 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070aa:	2220      	movs	r2, #32
 80070ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d118      	bne.n	80070ea <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f023 0310 	bic.w	r3, r3, #16
 80070cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	69b9      	ldr	r1, [r7, #24]
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	617b      	str	r3, [r7, #20]
   return(result);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e6      	bne.n	80070b8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ec:	2200      	movs	r2, #0
 80070ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d107      	bne.n	8007108 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070fe:	4619      	mov	r1, r3
 8007100:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007102:	f7f9 fbc9 	bl	8000898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007106:	e002      	b.n	800710e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007108:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800710a:	f7ff f987 	bl	800641c <HAL_UART_RxCpltCallback>
}
 800710e:	bf00      	nop
 8007110:	3770      	adds	r7, #112	@ 0x70
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007122:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800712e:	2b01      	cmp	r3, #1
 8007130:	d109      	bne.n	8007146 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	b29b      	uxth	r3, r3
 800713c:	4619      	mov	r1, r3
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7f9 fbaa 	bl	8000898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007144:	e002      	b.n	800714c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff f972 	bl	8006430 <HAL_UART_RxHalfCpltCallback>
}
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007166:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800716e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800717a:	2b80      	cmp	r3, #128	@ 0x80
 800717c:	d109      	bne.n	8007192 <UART_DMAError+0x3e>
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b21      	cmp	r3, #33	@ 0x21
 8007182:	d106      	bne.n	8007192 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2200      	movs	r2, #0
 8007188:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800718c:	6978      	ldr	r0, [r7, #20]
 800718e:	f7ff fe4b 	bl	8006e28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800719c:	2b40      	cmp	r3, #64	@ 0x40
 800719e:	d109      	bne.n	80071b4 <UART_DMAError+0x60>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b22      	cmp	r3, #34	@ 0x22
 80071a4:	d106      	bne.n	80071b4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80071ae:	6978      	ldr	r0, [r7, #20]
 80071b0:	f7ff fe60 	bl	8006e74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ba:	f043 0210 	orr.w	r2, r3, #16
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071c4:	6978      	ldr	r0, [r7, #20]
 80071c6:	f7ff f93d 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ca:	bf00      	nop
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff f927 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b088      	sub	sp, #32
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	60bb      	str	r3, [r7, #8]
   return(result);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6979      	ldr	r1, [r7, #20]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	613b      	str	r3, [r7, #16]
   return(result);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e6      	bne.n	8007206 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff f8d5 	bl	80063f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800724a:	bf00      	nop
 800724c:	3720      	adds	r7, #32
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b08c      	sub	sp, #48	@ 0x30
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	4613      	mov	r3, r2
 800725e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007266:	2b20      	cmp	r3, #32
 8007268:	d142      	bne.n	80072f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007270:	88fb      	ldrh	r3, [r7, #6]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e03b      	b.n	80072f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	461a      	mov	r2, r3
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fd2b 	bl	8006ce8 <UART_Start_Receive_DMA>
 8007292:	4603      	mov	r3, r0
 8007294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800729c:	2b00      	cmp	r3, #0
 800729e:	d124      	bne.n	80072ea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d11d      	bne.n	80072e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2210      	movs	r2, #16
 80072ae:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	617b      	str	r3, [r7, #20]
   return(result);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f043 0310 	orr.w	r3, r3, #16
 80072c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6a39      	ldr	r1, [r7, #32]
 80072d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	61fb      	str	r3, [r7, #28]
   return(result);
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e6      	bne.n	80072b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80072e2:	e002      	b.n	80072ea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80072ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072ee:	e000      	b.n	80072f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80072f0:	2302      	movs	r3, #2
  }
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3730      	adds	r7, #48	@ 0x30
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072fc:	b084      	sub	sp, #16
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	f107 001c 	add.w	r0, r7, #28
 800730a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800730e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007312:	2b01      	cmp	r3, #1
 8007314:	d121      	bne.n	800735a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	4b21      	ldr	r3, [pc, #132]	@ (80073ac <USB_CoreInit+0xb0>)
 8007328:	4013      	ands	r3, r2
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800733a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800733e:	2b01      	cmp	r3, #1
 8007340:	d105      	bne.n	800734e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa92 	bl	8007878 <USB_CoreReset>
 8007354:	4603      	mov	r3, r0
 8007356:	73fb      	strb	r3, [r7, #15]
 8007358:	e010      	b.n	800737c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa86 	bl	8007878 <USB_CoreReset>
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800737c:	7fbb      	ldrb	r3, [r7, #30]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d10b      	bne.n	800739a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f043 0206 	orr.w	r2, r3, #6
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f043 0220 	orr.w	r2, r3, #32
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073a6:	b004      	add	sp, #16
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	ffbdffbf 	.word	0xffbdffbf

080073b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f023 0201 	bic.w	r2, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d115      	bne.n	8007420 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007400:	200a      	movs	r0, #10
 8007402:	f7fa ff6b 	bl	80022dc <HAL_Delay>
      ms += 10U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	330a      	adds	r3, #10
 800740a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa25 	bl	800785c <USB_GetMode>
 8007412:	4603      	mov	r3, r0
 8007414:	2b01      	cmp	r3, #1
 8007416:	d01e      	beq.n	8007456 <USB_SetCurrentMode+0x84>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2bc7      	cmp	r3, #199	@ 0xc7
 800741c:	d9f0      	bls.n	8007400 <USB_SetCurrentMode+0x2e>
 800741e:	e01a      	b.n	8007456 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d115      	bne.n	8007452 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007432:	200a      	movs	r0, #10
 8007434:	f7fa ff52 	bl	80022dc <HAL_Delay>
      ms += 10U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	330a      	adds	r3, #10
 800743c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa0c 	bl	800785c <USB_GetMode>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <USB_SetCurrentMode+0x84>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2bc7      	cmp	r3, #199	@ 0xc7
 800744e:	d9f0      	bls.n	8007432 <USB_SetCurrentMode+0x60>
 8007450:	e001      	b.n	8007456 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e005      	b.n	8007462 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2bc8      	cmp	r3, #200	@ 0xc8
 800745a:	d101      	bne.n	8007460 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e000      	b.n	8007462 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800746c:	b084      	sub	sp, #16
 800746e:	b580      	push	{r7, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800747a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007486:	2300      	movs	r3, #0
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	e009      	b.n	80074a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3340      	adds	r3, #64	@ 0x40
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	2200      	movs	r2, #0
 8007498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3301      	adds	r3, #1
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b0e      	cmp	r3, #14
 80074a4:	d9f2      	bls.n	800748c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d11c      	bne.n	80074e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074bc:	f043 0302 	orr.w	r3, r3, #2
 80074c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	e005      	b.n	80074f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074fa:	461a      	mov	r2, r3
 80074fc:	2300      	movs	r3, #0
 80074fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007500:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007504:	2b01      	cmp	r3, #1
 8007506:	d10d      	bne.n	8007524 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007510:	2100      	movs	r1, #0
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f968 	bl	80077e8 <USB_SetDevSpeed>
 8007518:	e008      	b.n	800752c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800751a:	2101      	movs	r1, #1
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f963 	bl	80077e8 <USB_SetDevSpeed>
 8007522:	e003      	b.n	800752c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007524:	2103      	movs	r1, #3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f95e 	bl	80077e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800752c:	2110      	movs	r1, #16
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f8fa 	bl	8007728 <USB_FlushTxFifo>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f924 	bl	800778c <USB_FlushRxFifo>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007554:	461a      	mov	r2, r3
 8007556:	2300      	movs	r3, #0
 8007558:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007560:	461a      	mov	r2, r3
 8007562:	2300      	movs	r3, #0
 8007564:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756c:	461a      	mov	r2, r3
 800756e:	2300      	movs	r3, #0
 8007570:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	e043      	b.n	8007600 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800758a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800758e:	d118      	bne.n	80075c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a2:	461a      	mov	r2, r3
 80075a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e013      	b.n	80075d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b8:	461a      	mov	r2, r3
 80075ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	e008      	b.n	80075d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ce:	461a      	mov	r2, r3
 80075d0:	2300      	movs	r3, #0
 80075d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e0:	461a      	mov	r2, r3
 80075e2:	2300      	movs	r3, #0
 80075e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f2:	461a      	mov	r2, r3
 80075f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	3301      	adds	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007604:	461a      	mov	r2, r3
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4293      	cmp	r3, r2
 800760a:	d3b5      	bcc.n	8007578 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760c:	2300      	movs	r3, #0
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	e043      	b.n	800769a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007628:	d118      	bne.n	800765c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763c:	461a      	mov	r2, r3
 800763e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	e013      	b.n	800766e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007652:	461a      	mov	r2, r3
 8007654:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	e008      	b.n	800766e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007668:	461a      	mov	r2, r3
 800766a:	2300      	movs	r3, #0
 800766c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767a:	461a      	mov	r2, r3
 800767c:	2300      	movs	r3, #0
 800767e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768c:	461a      	mov	r2, r3
 800768e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3301      	adds	r3, #1
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800769e:	461a      	mov	r2, r3
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d3b5      	bcc.n	8007612 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80076c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d105      	bne.n	80076dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f043 0210 	orr.w	r2, r3, #16
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007720 <USB_DevInit+0x2b4>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	f043 0208 	orr.w	r2, r3, #8
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007700:	2b01      	cmp	r3, #1
 8007702:	d105      	bne.n	8007710 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699a      	ldr	r2, [r3, #24]
 8007708:	4b06      	ldr	r3, [pc, #24]	@ (8007724 <USB_DevInit+0x2b8>)
 800770a:	4313      	orrs	r3, r2
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800771c:	b004      	add	sp, #16
 800771e:	4770      	bx	lr
 8007720:	803c3800 	.word	0x803c3800
 8007724:	40000004 	.word	0x40000004

08007728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3301      	adds	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007742:	d901      	bls.n	8007748 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e01b      	b.n	8007780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	daf2      	bge.n	8007736 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	019b      	lsls	r3, r3, #6
 8007758:	f043 0220 	orr.w	r2, r3, #32
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3301      	adds	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800776c:	d901      	bls.n	8007772 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e006      	b.n	8007780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b20      	cmp	r3, #32
 800777c:	d0f0      	beq.n	8007760 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3301      	adds	r3, #1
 800779c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077a4:	d901      	bls.n	80077aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e018      	b.n	80077dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	daf2      	bge.n	8007798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2210      	movs	r2, #16
 80077ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077c8:	d901      	bls.n	80077ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e006      	b.n	80077dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d0f0      	beq.n	80077bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007808:	4313      	orrs	r3, r2
 800780a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007848:	f043 0302 	orr.w	r3, r3, #2
 800784c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	f003 0301 	and.w	r3, r3, #1
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007890:	d901      	bls.n	8007896 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e01b      	b.n	80078ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	daf2      	bge.n	8007884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f043 0201 	orr.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3301      	adds	r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078ba:	d901      	bls.n	80078c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e006      	b.n	80078ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d0f0      	beq.n	80078ae <USB_CoreReset+0x36>

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078da:	b480      	push	{r7}
 80078dc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80078de:	bf00      	nop
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ee:	f3ef 8305 	mrs	r3, IPSR
 80078f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80078f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10f      	bne.n	800791a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078fa:	f3ef 8310 	mrs	r3, PRIMASK
 80078fe:	607b      	str	r3, [r7, #4]
  return(result);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d105      	bne.n	8007912 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007906:	f3ef 8311 	mrs	r3, BASEPRI
 800790a:	603b      	str	r3, [r7, #0]
  return(result);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d007      	beq.n	8007922 <osKernelInitialize+0x3a>
 8007912:	4b0e      	ldr	r3, [pc, #56]	@ (800794c <osKernelInitialize+0x64>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b02      	cmp	r3, #2
 8007918:	d103      	bne.n	8007922 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800791a:	f06f 0305 	mvn.w	r3, #5
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e00c      	b.n	800793c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007922:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <osKernelInitialize+0x64>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800792a:	4b08      	ldr	r3, [pc, #32]	@ (800794c <osKernelInitialize+0x64>)
 800792c:	2201      	movs	r2, #1
 800792e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e002      	b.n	800793c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007936:	f04f 33ff 	mov.w	r3, #4294967295
 800793a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800793c:	68fb      	ldr	r3, [r7, #12]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000a08 	.word	0x20000a08

08007950 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007956:	f3ef 8305 	mrs	r3, IPSR
 800795a:	60bb      	str	r3, [r7, #8]
  return(result);
 800795c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10f      	bne.n	8007982 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007962:	f3ef 8310 	mrs	r3, PRIMASK
 8007966:	607b      	str	r3, [r7, #4]
  return(result);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800796e:	f3ef 8311 	mrs	r3, BASEPRI
 8007972:	603b      	str	r3, [r7, #0]
  return(result);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <osKernelStart+0x3a>
 800797a:	4b0f      	ldr	r3, [pc, #60]	@ (80079b8 <osKernelStart+0x68>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d103      	bne.n	800798a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007982:	f06f 0305 	mvn.w	r3, #5
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e010      	b.n	80079ac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800798a:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <osKernelStart+0x68>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d109      	bne.n	80079a6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007992:	f7ff ffa2 	bl	80078da <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007996:	4b08      	ldr	r3, [pc, #32]	@ (80079b8 <osKernelStart+0x68>)
 8007998:	2202      	movs	r2, #2
 800799a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800799c:	f001 f8ca 	bl	8008b34 <vTaskStartScheduler>
      stat = osOK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e002      	b.n	80079ac <osKernelStart+0x5c>
    } else {
      stat = osError;
 80079a6:	f04f 33ff 	mov.w	r3, #4294967295
 80079aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80079ac:	68fb      	ldr	r3, [r7, #12]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000a08 	.word	0x20000a08

080079bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80079bc:	b580      	push	{r7, lr}
 80079be:	b090      	sub	sp, #64	@ 0x40
 80079c0:	af04      	add	r7, sp, #16
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80079c8:	2300      	movs	r3, #0
 80079ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079cc:	f3ef 8305 	mrs	r3, IPSR
 80079d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80079d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f040 808f 	bne.w	8007af8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079da:	f3ef 8310 	mrs	r3, PRIMASK
 80079de:	61bb      	str	r3, [r7, #24]
  return(result);
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079e6:	f3ef 8311 	mrs	r3, BASEPRI
 80079ea:	617b      	str	r3, [r7, #20]
  return(result);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <osThreadNew+0x3e>
 80079f2:	4b44      	ldr	r3, [pc, #272]	@ (8007b04 <osThreadNew+0x148>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d07e      	beq.n	8007af8 <osThreadNew+0x13c>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d07b      	beq.n	8007af8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007a00:	2380      	movs	r3, #128	@ 0x80
 8007a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007a04:	2318      	movs	r3, #24
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a10:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d045      	beq.n	8007aa4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <osThreadNew+0x6a>
        name = attr->name;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d008      	beq.n	8007a4c <osThreadNew+0x90>
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	2b38      	cmp	r3, #56	@ 0x38
 8007a3e:	d805      	bhi.n	8007a4c <osThreadNew+0x90>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <osThreadNew+0x94>
        return (NULL);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e054      	b.n	8007afa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	089b      	lsrs	r3, r3, #2
 8007a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00e      	beq.n	8007a86 <osThreadNew+0xca>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a6e:	d90a      	bls.n	8007a86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d006      	beq.n	8007a86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <osThreadNew+0xca>
        mem = 1;
 8007a80:	2301      	movs	r3, #1
 8007a82:	623b      	str	r3, [r7, #32]
 8007a84:	e010      	b.n	8007aa8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10c      	bne.n	8007aa8 <osThreadNew+0xec>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d108      	bne.n	8007aa8 <osThreadNew+0xec>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d104      	bne.n	8007aa8 <osThreadNew+0xec>
          mem = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	623b      	str	r3, [r7, #32]
 8007aa2:	e001      	b.n	8007aa8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d110      	bne.n	8007ad0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ab6:	9202      	str	r2, [sp, #8]
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 fe4f 	bl	8008768 <xTaskCreateStatic>
 8007aca:	4603      	mov	r3, r0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	e013      	b.n	8007af8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d110      	bne.n	8007af8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	f107 0310 	add.w	r3, r7, #16
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 fea3 	bl	8008834 <xTaskCreate>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d001      	beq.n	8007af8 <osThreadNew+0x13c>
          hTask = NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007af8:	693b      	ldr	r3, [r7, #16]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3730      	adds	r7, #48	@ 0x30
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000a08 	.word	0x20000a08

08007b08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b10:	f3ef 8305 	mrs	r3, IPSR
 8007b14:	613b      	str	r3, [r7, #16]
  return(result);
 8007b16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10f      	bne.n	8007b3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b20:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d105      	bne.n	8007b34 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b28:	f3ef 8311 	mrs	r3, BASEPRI
 8007b2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <osDelay+0x3c>
 8007b34:	4b0a      	ldr	r3, [pc, #40]	@ (8007b60 <osDelay+0x58>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d103      	bne.n	8007b44 <osDelay+0x3c>
    stat = osErrorISR;
 8007b3c:	f06f 0305 	mvn.w	r3, #5
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e007      	b.n	8007b54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 ffb8 	bl	8008ac4 <vTaskDelay>
    }
  }

  return (stat);
 8007b54:	697b      	ldr	r3, [r7, #20]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000a08 	.word	0x20000a08

08007b64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4a07      	ldr	r2, [pc, #28]	@ (8007b90 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4a06      	ldr	r2, [pc, #24]	@ (8007b94 <vApplicationGetIdleTaskMemory+0x30>)
 8007b7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2280      	movs	r2, #128	@ 0x80
 8007b80:	601a      	str	r2, [r3, #0]
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	20000a0c 	.word	0x20000a0c
 8007b94:	20000a68 	.word	0x20000a68

08007b98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a07      	ldr	r2, [pc, #28]	@ (8007bc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ba8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	4a06      	ldr	r2, [pc, #24]	@ (8007bc8 <vApplicationGetTimerTaskMemory+0x30>)
 8007bae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bb6:	601a      	str	r2, [r3, #0]
}
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	20000c68 	.word	0x20000c68
 8007bc8:	20000cc4 	.word	0x20000cc4

08007bcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f103 0208 	add.w	r2, r3, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f04f 32ff 	mov.w	r2, #4294967295
 8007be4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f103 0208 	add.w	r2, r3, #8
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f103 0208 	add.w	r2, r3, #8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c26:	b480      	push	{r7}
 8007c28:	b085      	sub	sp, #20
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	601a      	str	r2, [r3, #0]
}
 8007c62:	bf00      	nop
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d103      	bne.n	8007c8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	e00c      	b.n	8007ca8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	3308      	adds	r3, #8
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	e002      	b.n	8007c9c <vListInsert+0x2e>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d2f6      	bcs.n	8007c96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	601a      	str	r2, [r3, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6892      	ldr	r2, [r2, #8]
 8007cf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6852      	ldr	r2, [r2, #4]
 8007d00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d103      	bne.n	8007d14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	1e5a      	subs	r2, r3, #1
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10d      	bne.n	8007d64 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4c:	b672      	cpsid	i
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	b662      	cpsie	i
 8007d5c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d5e:	bf00      	nop
 8007d60:	bf00      	nop
 8007d62:	e7fd      	b.n	8007d60 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007d64:	f002 f8aa 	bl	8009ebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d70:	68f9      	ldr	r1, [r7, #12]
 8007d72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d74:	fb01 f303 	mul.w	r3, r1, r3
 8007d78:	441a      	add	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d94:	3b01      	subs	r3, #1
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d9a:	fb01 f303 	mul.w	r3, r1, r3
 8007d9e:	441a      	add	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	22ff      	movs	r2, #255	@ 0xff
 8007da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	22ff      	movs	r2, #255	@ 0xff
 8007db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d114      	bne.n	8007de4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01a      	beq.n	8007df8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3310      	adds	r3, #16
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 f950 	bl	800906c <xTaskRemoveFromEventList>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d012      	beq.n	8007df8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <xQueueGenericReset+0xd4>)
 8007dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	e009      	b.n	8007df8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3310      	adds	r3, #16
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff feef 	bl	8007bcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3324      	adds	r3, #36	@ 0x24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff feea 	bl	8007bcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007df8:	f002 f896 	bl	8009f28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007dfc:	2301      	movs	r3, #1
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	e000ed04 	.word	0xe000ed04

08007e0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08e      	sub	sp, #56	@ 0x38
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10d      	bne.n	8007e3c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	b672      	cpsid	i
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	b662      	cpsie	i
 8007e34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e36:	bf00      	nop
 8007e38:	bf00      	nop
 8007e3a:	e7fd      	b.n	8007e38 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10d      	bne.n	8007e5e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	b672      	cpsid	i
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	b662      	cpsie	i
 8007e56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	e7fd      	b.n	8007e5a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <xQueueGenericCreateStatic+0x5e>
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <xQueueGenericCreateStatic+0x62>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <xQueueGenericCreateStatic+0x64>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10d      	bne.n	8007e90 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e78:	b672      	cpsid	i
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	b662      	cpsie	i
 8007e88:	623b      	str	r3, [r7, #32]
}
 8007e8a:	bf00      	nop
 8007e8c:	bf00      	nop
 8007e8e:	e7fd      	b.n	8007e8c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <xQueueGenericCreateStatic+0x90>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <xQueueGenericCreateStatic+0x94>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <xQueueGenericCreateStatic+0x96>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10d      	bne.n	8007ec2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eaa:	b672      	cpsid	i
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	b662      	cpsie	i
 8007eba:	61fb      	str	r3, [r7, #28]
}
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	e7fd      	b.n	8007ebe <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ec2:	2350      	movs	r3, #80	@ 0x50
 8007ec4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b50      	cmp	r3, #80	@ 0x50
 8007eca:	d00d      	beq.n	8007ee8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed0:	b672      	cpsid	i
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	b662      	cpsie	i
 8007ee0:	61bb      	str	r3, [r7, #24]
}
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
 8007ee6:	e7fd      	b.n	8007ee4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ee8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00d      	beq.n	8007f10 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007efc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	4613      	mov	r3, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f805 	bl	8007f1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3730      	adds	r7, #48	@ 0x30
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d103      	bne.n	8007f36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e002      	b.n	8007f3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f48:	2101      	movs	r1, #1
 8007f4a:	69b8      	ldr	r0, [r7, #24]
 8007f4c:	f7ff fef2 	bl	8007d34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	78fa      	ldrb	r2, [r7, #3]
 8007f54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08e      	sub	sp, #56	@ 0x38
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10d      	bne.n	8007f98 <xQueueGenericSend+0x38>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f80:	b672      	cpsid	i
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	b662      	cpsie	i
 8007f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	e7fd      	b.n	8007f94 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d103      	bne.n	8007fa6 <xQueueGenericSend+0x46>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <xQueueGenericSend+0x4a>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <xQueueGenericSend+0x4c>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10d      	bne.n	8007fcc <xQueueGenericSend+0x6c>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	b672      	cpsid	i
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	b662      	cpsie	i
 8007fc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	e7fd      	b.n	8007fc8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d103      	bne.n	8007fda <xQueueGenericSend+0x7a>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <xQueueGenericSend+0x7e>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e000      	b.n	8007fe0 <xQueueGenericSend+0x80>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10d      	bne.n	8008000 <xQueueGenericSend+0xa0>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	b672      	cpsid	i
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	b662      	cpsie	i
 8007ff8:	623b      	str	r3, [r7, #32]
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	e7fd      	b.n	8007ffc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008000:	f001 f9fc 	bl	80093fc <xTaskGetSchedulerState>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <xQueueGenericSend+0xb0>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <xQueueGenericSend+0xb4>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <xQueueGenericSend+0xb6>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10d      	bne.n	8008036 <xQueueGenericSend+0xd6>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801e:	b672      	cpsid	i
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	b662      	cpsie	i
 800802e:	61fb      	str	r3, [r7, #28]
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	e7fd      	b.n	8008032 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008036:	f001 ff41 	bl	8009ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008042:	429a      	cmp	r2, r3
 8008044:	d302      	bcc.n	800804c <xQueueGenericSend+0xec>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b02      	cmp	r3, #2
 800804a:	d129      	bne.n	80080a0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008052:	f000 fa1b 	bl	800848c <prvCopyDataToQueue>
 8008056:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805c:	2b00      	cmp	r3, #0
 800805e:	d010      	beq.n	8008082 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	3324      	adds	r3, #36	@ 0x24
 8008064:	4618      	mov	r0, r3
 8008066:	f001 f801 	bl	800906c <xTaskRemoveFromEventList>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d013      	beq.n	8008098 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008070:	4b3f      	ldr	r3, [pc, #252]	@ (8008170 <xQueueGenericSend+0x210>)
 8008072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	e00a      	b.n	8008098 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d007      	beq.n	8008098 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008088:	4b39      	ldr	r3, [pc, #228]	@ (8008170 <xQueueGenericSend+0x210>)
 800808a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008098:	f001 ff46 	bl	8009f28 <vPortExitCritical>
				return pdPASS;
 800809c:	2301      	movs	r3, #1
 800809e:	e063      	b.n	8008168 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d103      	bne.n	80080ae <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080a6:	f001 ff3f 	bl	8009f28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e05c      	b.n	8008168 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d106      	bne.n	80080c2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080b4:	f107 0314 	add.w	r3, r7, #20
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 f83d 	bl	8009138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080be:	2301      	movs	r3, #1
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080c2:	f001 ff31 	bl	8009f28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080c6:	f000 fda1 	bl	8008c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ca:	f001 fef7 	bl	8009ebc <vPortEnterCritical>
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080d4:	b25b      	sxtb	r3, r3
 80080d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080da:	d103      	bne.n	80080e4 <xQueueGenericSend+0x184>
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f0:	d103      	bne.n	80080fa <xQueueGenericSend+0x19a>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080fa:	f001 ff15 	bl	8009f28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080fe:	1d3a      	adds	r2, r7, #4
 8008100:	f107 0314 	add.w	r3, r7, #20
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f001 f82c 	bl	8009164 <xTaskCheckForTimeOut>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d124      	bne.n	800815c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008112:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008114:	f000 fab2 	bl	800867c <prvIsQueueFull>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d018      	beq.n	8008150 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	3310      	adds	r3, #16
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4611      	mov	r1, r2
 8008126:	4618      	mov	r0, r3
 8008128:	f000 ff4a 	bl	8008fc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800812c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800812e:	f000 fa3d 	bl	80085ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008132:	f000 fd79 	bl	8008c28 <xTaskResumeAll>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	f47f af7c 	bne.w	8008036 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800813e:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <xQueueGenericSend+0x210>)
 8008140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	e772      	b.n	8008036 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008152:	f000 fa2b 	bl	80085ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008156:	f000 fd67 	bl	8008c28 <xTaskResumeAll>
 800815a:	e76c      	b.n	8008036 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800815c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800815e:	f000 fa25 	bl	80085ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008162:	f000 fd61 	bl	8008c28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008166:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008168:	4618      	mov	r0, r3
 800816a:	3738      	adds	r7, #56	@ 0x38
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08e      	sub	sp, #56	@ 0x38
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10d      	bne.n	80081a8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	b672      	cpsid	i
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	b662      	cpsie	i
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	e7fd      	b.n	80081a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d103      	bne.n	80081b6 <xQueueGenericSendFromISR+0x42>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <xQueueGenericSendFromISR+0x46>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <xQueueGenericSendFromISR+0x48>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10d      	bne.n	80081dc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	623b      	str	r3, [r7, #32]
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	e7fd      	b.n	80081d8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d103      	bne.n	80081ea <xQueueGenericSendFromISR+0x76>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <xQueueGenericSendFromISR+0x7a>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <xQueueGenericSendFromISR+0x7c>
 80081ee:	2300      	movs	r3, #0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10d      	bne.n	8008210 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f8:	b672      	cpsid	i
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	b662      	cpsie	i
 8008208:	61fb      	str	r3, [r7, #28]
}
 800820a:	bf00      	nop
 800820c:	bf00      	nop
 800820e:	e7fd      	b.n	800820c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008210:	f001 ff3c 	bl	800a08c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008214:	f3ef 8211 	mrs	r2, BASEPRI
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	b672      	cpsid	i
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	b662      	cpsie	i
 800822c:	61ba      	str	r2, [r7, #24]
 800822e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008230:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008232:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800823c:	429a      	cmp	r2, r3
 800823e:	d302      	bcc.n	8008246 <xQueueGenericSendFromISR+0xd2>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b02      	cmp	r3, #2
 8008244:	d12c      	bne.n	80082a0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800824c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008256:	f000 f919 	bl	800848c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800825a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800825e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008262:	d112      	bne.n	800828a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008268:	2b00      	cmp	r3, #0
 800826a:	d016      	beq.n	800829a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	3324      	adds	r3, #36	@ 0x24
 8008270:	4618      	mov	r0, r3
 8008272:	f000 fefb 	bl	800906c <xTaskRemoveFromEventList>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00e      	beq.n	800829a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00b      	beq.n	800829a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	e007      	b.n	800829a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800828a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800828e:	3301      	adds	r3, #1
 8008290:	b2db      	uxtb	r3, r3
 8008292:	b25a      	sxtb	r2, r3
 8008294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800829a:	2301      	movs	r3, #1
 800829c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800829e:	e001      	b.n	80082a4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3738      	adds	r7, #56	@ 0x38
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08c      	sub	sp, #48	@ 0x30
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10d      	bne.n	80082f2 <xQueueReceive+0x36>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082da:	b672      	cpsid	i
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	b662      	cpsie	i
 80082ea:	623b      	str	r3, [r7, #32]
}
 80082ec:	bf00      	nop
 80082ee:	bf00      	nop
 80082f0:	e7fd      	b.n	80082ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d103      	bne.n	8008300 <xQueueReceive+0x44>
 80082f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <xQueueReceive+0x48>
 8008300:	2301      	movs	r3, #1
 8008302:	e000      	b.n	8008306 <xQueueReceive+0x4a>
 8008304:	2300      	movs	r3, #0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10d      	bne.n	8008326 <xQueueReceive+0x6a>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830e:	b672      	cpsid	i
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	b662      	cpsie	i
 800831e:	61fb      	str	r3, [r7, #28]
}
 8008320:	bf00      	nop
 8008322:	bf00      	nop
 8008324:	e7fd      	b.n	8008322 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008326:	f001 f869 	bl	80093fc <xTaskGetSchedulerState>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <xQueueReceive+0x7a>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <xQueueReceive+0x7e>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <xQueueReceive+0x80>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10d      	bne.n	800835c <xQueueReceive+0xa0>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	b672      	cpsid	i
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	b662      	cpsie	i
 8008354:	61bb      	str	r3, [r7, #24]
}
 8008356:	bf00      	nop
 8008358:	bf00      	nop
 800835a:	e7fd      	b.n	8008358 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800835c:	f001 fdae 	bl	8009ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008364:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01f      	beq.n	80083ac <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800836c:	68b9      	ldr	r1, [r7, #8]
 800836e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008370:	f000 f8f6 	bl	8008560 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008376:	1e5a      	subs	r2, r3, #1
 8008378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800837c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00f      	beq.n	80083a4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008386:	3310      	adds	r3, #16
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fe6f 	bl	800906c <xTaskRemoveFromEventList>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008394:	4b3c      	ldr	r3, [pc, #240]	@ (8008488 <xQueueReceive+0x1cc>)
 8008396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083a4:	f001 fdc0 	bl	8009f28 <vPortExitCritical>
				return pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e069      	b.n	8008480 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083b2:	f001 fdb9 	bl	8009f28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083b6:	2300      	movs	r3, #0
 80083b8:	e062      	b.n	8008480 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d106      	bne.n	80083ce <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083c0:	f107 0310 	add.w	r3, r7, #16
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 feb7 	bl	8009138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ca:	2301      	movs	r3, #1
 80083cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ce:	f001 fdab 	bl	8009f28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083d2:	f000 fc1b 	bl	8008c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083d6:	f001 fd71 	bl	8009ebc <vPortEnterCritical>
 80083da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d103      	bne.n	80083f0 <xQueueReceive+0x134>
 80083e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083f6:	b25b      	sxtb	r3, r3
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d103      	bne.n	8008406 <xQueueReceive+0x14a>
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008406:	f001 fd8f 	bl	8009f28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800840a:	1d3a      	adds	r2, r7, #4
 800840c:	f107 0310 	add.w	r3, r7, #16
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fea6 	bl	8009164 <xTaskCheckForTimeOut>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d123      	bne.n	8008466 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800841e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008420:	f000 f916 	bl	8008650 <prvIsQueueEmpty>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d017      	beq.n	800845a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	3324      	adds	r3, #36	@ 0x24
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4611      	mov	r1, r2
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fdc4 	bl	8008fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008438:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800843a:	f000 f8b7 	bl	80085ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800843e:	f000 fbf3 	bl	8008c28 <xTaskResumeAll>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d189      	bne.n	800835c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008448:	4b0f      	ldr	r3, [pc, #60]	@ (8008488 <xQueueReceive+0x1cc>)
 800844a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	e780      	b.n	800835c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800845a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800845c:	f000 f8a6 	bl	80085ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008460:	f000 fbe2 	bl	8008c28 <xTaskResumeAll>
 8008464:	e77a      	b.n	800835c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008468:	f000 f8a0 	bl	80085ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800846c:	f000 fbdc 	bl	8008c28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008470:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008472:	f000 f8ed 	bl	8008650 <prvIsQueueEmpty>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	f43f af6f 	beq.w	800835c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800847e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008480:	4618      	mov	r0, r3
 8008482:	3730      	adds	r7, #48	@ 0x30
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	e000ed04 	.word	0xe000ed04

0800848c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008498:	2300      	movs	r3, #0
 800849a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10d      	bne.n	80084c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d14d      	bne.n	800854e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 ffbe 	bl	8009438 <xTaskPriorityDisinherit>
 80084bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	609a      	str	r2, [r3, #8]
 80084c4:	e043      	b.n	800854e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d119      	bne.n	8008500 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6858      	ldr	r0, [r3, #4]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d4:	461a      	mov	r2, r3
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	f002 fec2 	bl	800b260 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e4:	441a      	add	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d32b      	bcc.n	800854e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	e026      	b.n	800854e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	68d8      	ldr	r0, [r3, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008508:	461a      	mov	r2, r3
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	f002 fea8 	bl	800b260 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008518:	425b      	negs	r3, r3
 800851a:	441a      	add	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	68da      	ldr	r2, [r3, #12]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d207      	bcs.n	800853c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008534:	425b      	negs	r3, r3
 8008536:	441a      	add	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b02      	cmp	r3, #2
 8008540:	d105      	bne.n	800854e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	3b01      	subs	r3, #1
 800854c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008556:	697b      	ldr	r3, [r7, #20]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3718      	adds	r7, #24
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	d018      	beq.n	80085a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857a:	441a      	add	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	429a      	cmp	r2, r3
 800858a:	d303      	bcc.n	8008594 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68d9      	ldr	r1, [r3, #12]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859c:	461a      	mov	r2, r3
 800859e:	6838      	ldr	r0, [r7, #0]
 80085a0:	f002 fe5e 	bl	800b260 <memcpy>
	}
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085b4:	f001 fc82 	bl	8009ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085c0:	e011      	b.n	80085e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d012      	beq.n	80085f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3324      	adds	r3, #36	@ 0x24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fd4c 	bl	800906c <xTaskRemoveFromEventList>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085da:	f000 fe2b 	bl	8009234 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dce9      	bgt.n	80085c2 <prvUnlockQueue+0x16>
 80085ee:	e000      	b.n	80085f2 <prvUnlockQueue+0x46>
					break;
 80085f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	22ff      	movs	r2, #255	@ 0xff
 80085f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80085fa:	f001 fc95 	bl	8009f28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085fe:	f001 fc5d 	bl	8009ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008608:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800860a:	e011      	b.n	8008630 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d012      	beq.n	800863a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3310      	adds	r3, #16
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fd27 	bl	800906c <xTaskRemoveFromEventList>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008624:	f000 fe06 	bl	8009234 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	3b01      	subs	r3, #1
 800862c:	b2db      	uxtb	r3, r3
 800862e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008634:	2b00      	cmp	r3, #0
 8008636:	dce9      	bgt.n	800860c <prvUnlockQueue+0x60>
 8008638:	e000      	b.n	800863c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800863a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	22ff      	movs	r2, #255	@ 0xff
 8008640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008644:	f001 fc70 	bl	8009f28 <vPortExitCritical>
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008658:	f001 fc30 	bl	8009ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008664:	2301      	movs	r3, #1
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	e001      	b.n	800866e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800866e:	f001 fc5b 	bl	8009f28 <vPortExitCritical>

	return xReturn;
 8008672:	68fb      	ldr	r3, [r7, #12]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008684:	f001 fc1a 	bl	8009ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008690:	429a      	cmp	r2, r3
 8008692:	d102      	bne.n	800869a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008694:	2301      	movs	r3, #1
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	e001      	b.n	800869e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800869e:	f001 fc43 	bl	8009f28 <vPortExitCritical>

	return xReturn;
 80086a2:	68fb      	ldr	r3, [r7, #12]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
 80086ba:	e014      	b.n	80086e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086bc:	4a0f      	ldr	r2, [pc, #60]	@ (80086fc <vQueueAddToRegistry+0x50>)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10b      	bne.n	80086e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086c8:	490c      	ldr	r1, [pc, #48]	@ (80086fc <vQueueAddToRegistry+0x50>)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086d2:	4a0a      	ldr	r2, [pc, #40]	@ (80086fc <vQueueAddToRegistry+0x50>)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	4413      	add	r3, r2
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086de:	e006      	b.n	80086ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b07      	cmp	r3, #7
 80086ea:	d9e7      	bls.n	80086bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	200010c4 	.word	0x200010c4

08008700 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008710:	f001 fbd4 	bl	8009ebc <vPortEnterCritical>
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800871a:	b25b      	sxtb	r3, r3
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d103      	bne.n	800872a <vQueueWaitForMessageRestricted+0x2a>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008730:	b25b      	sxtb	r3, r3
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d103      	bne.n	8008740 <vQueueWaitForMessageRestricted+0x40>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008740:	f001 fbf2 	bl	8009f28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	2b00      	cmp	r3, #0
 800874a:	d106      	bne.n	800875a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	3324      	adds	r3, #36	@ 0x24
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	4618      	mov	r0, r3
 8008756:	f000 fc5b 	bl	8009010 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800875a:	6978      	ldr	r0, [r7, #20]
 800875c:	f7ff ff26 	bl	80085ac <prvUnlockQueue>
	}
 8008760:	bf00      	nop
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08e      	sub	sp, #56	@ 0x38
 800876c:	af04      	add	r7, sp, #16
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10d      	bne.n	8008798 <xTaskCreateStatic+0x30>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	b672      	cpsid	i
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	b662      	cpsie	i
 8008790:	623b      	str	r3, [r7, #32]
}
 8008792:	bf00      	nop
 8008794:	bf00      	nop
 8008796:	e7fd      	b.n	8008794 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10d      	bne.n	80087ba <xTaskCreateStatic+0x52>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	b672      	cpsid	i
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	b662      	cpsie	i
 80087b2:	61fb      	str	r3, [r7, #28]
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop
 80087b8:	e7fd      	b.n	80087b6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087ba:	235c      	movs	r3, #92	@ 0x5c
 80087bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80087c2:	d00d      	beq.n	80087e0 <xTaskCreateStatic+0x78>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c8:	b672      	cpsid	i
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	b662      	cpsie	i
 80087d8:	61bb      	str	r3, [r7, #24]
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	e7fd      	b.n	80087dc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01e      	beq.n	8008826 <xTaskCreateStatic+0xbe>
 80087e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01b      	beq.n	8008826 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008800:	2300      	movs	r3, #0
 8008802:	9303      	str	r3, [sp, #12]
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	9302      	str	r3, [sp, #8]
 8008808:	f107 0314 	add.w	r3, r7, #20
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f850 	bl	80088be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800881e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008820:	f000 f8e0 	bl	80089e4 <prvAddNewTaskToReadyList>
 8008824:	e001      	b.n	800882a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800882a:	697b      	ldr	r3, [r7, #20]
	}
 800882c:	4618      	mov	r0, r3
 800882e:	3728      	adds	r7, #40	@ 0x28
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08c      	sub	sp, #48	@ 0x30
 8008838:	af04      	add	r7, sp, #16
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	4613      	mov	r3, r2
 8008842:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008844:	88fb      	ldrh	r3, [r7, #6]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4618      	mov	r0, r3
 800884a:	f001 fc65 	bl	800a118 <pvPortMalloc>
 800884e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00e      	beq.n	8008874 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008856:	205c      	movs	r0, #92	@ 0x5c
 8008858:	f001 fc5e 	bl	800a118 <pvPortMalloc>
 800885c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	631a      	str	r2, [r3, #48]	@ 0x30
 800886a:	e005      	b.n	8008878 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800886c:	6978      	ldr	r0, [r7, #20]
 800886e:	f001 fd21 	bl	800a2b4 <vPortFree>
 8008872:	e001      	b.n	8008878 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008874:	2300      	movs	r3, #0
 8008876:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d017      	beq.n	80088ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008886:	88fa      	ldrh	r2, [r7, #6]
 8008888:	2300      	movs	r3, #0
 800888a:	9303      	str	r3, [sp, #12]
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	9302      	str	r3, [sp, #8]
 8008890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f80e 	bl	80088be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088a2:	69f8      	ldr	r0, [r7, #28]
 80088a4:	f000 f89e 	bl	80089e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088a8:	2301      	movs	r3, #1
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	e002      	b.n	80088b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088ae:	f04f 33ff 	mov.w	r3, #4294967295
 80088b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088b4:	69bb      	ldr	r3, [r7, #24]
	}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3720      	adds	r7, #32
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b088      	sub	sp, #32
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	461a      	mov	r2, r3
 80088d6:	21a5      	movs	r1, #165	@ 0xa5
 80088d8:	f002 fc2e 	bl	800b138 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80088e6:	440b      	add	r3, r1
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	f023 0307 	bic.w	r3, r3, #7
 80088f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	f003 0307 	and.w	r3, r3, #7
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00d      	beq.n	800891c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	b672      	cpsid	i
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	b662      	cpsie	i
 8008914:	617b      	str	r3, [r7, #20]
}
 8008916:	bf00      	nop
 8008918:	bf00      	nop
 800891a:	e7fd      	b.n	8008918 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d01f      	beq.n	8008962 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008922:	2300      	movs	r3, #0
 8008924:	61fb      	str	r3, [r7, #28]
 8008926:	e012      	b.n	800894e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	4413      	add	r3, r2
 800892e:	7819      	ldrb	r1, [r3, #0]
 8008930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	4413      	add	r3, r2
 8008936:	3334      	adds	r3, #52	@ 0x34
 8008938:	460a      	mov	r2, r1
 800893a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	4413      	add	r3, r2
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d006      	beq.n	8008956 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	3301      	adds	r3, #1
 800894c:	61fb      	str	r3, [r7, #28]
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	2b0f      	cmp	r3, #15
 8008952:	d9e9      	bls.n	8008928 <prvInitialiseNewTask+0x6a>
 8008954:	e000      	b.n	8008958 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008956:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008960:	e003      	b.n	800896a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800896a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896c:	2b37      	cmp	r3, #55	@ 0x37
 800896e:	d901      	bls.n	8008974 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008970:	2337      	movs	r3, #55	@ 0x37
 8008972:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008978:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800897e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	2200      	movs	r2, #0
 8008984:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	3304      	adds	r3, #4
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff f93e 	bl	8007c0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	3318      	adds	r3, #24
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff f939 	bl	8007c0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800899e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b2:	2200      	movs	r2, #0
 80089b4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	68f9      	ldr	r1, [r7, #12]
 80089c2:	69b8      	ldr	r0, [r7, #24]
 80089c4:	f001 f968 	bl	8009c98 <pxPortInitialiseStack>
 80089c8:	4602      	mov	r2, r0
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089da:	bf00      	nop
 80089dc:	3720      	adds	r7, #32
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089ec:	f001 fa66 	bl	8009ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089f0:	4b2d      	ldr	r3, [pc, #180]	@ (8008aa8 <prvAddNewTaskToReadyList+0xc4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	4a2c      	ldr	r2, [pc, #176]	@ (8008aa8 <prvAddNewTaskToReadyList+0xc4>)
 80089f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089fa:	4b2c      	ldr	r3, [pc, #176]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a02:	4a2a      	ldr	r2, [pc, #168]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a08:	4b27      	ldr	r3, [pc, #156]	@ (8008aa8 <prvAddNewTaskToReadyList+0xc4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d110      	bne.n	8008a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a10:	f000 fc34 	bl	800927c <prvInitialiseTaskLists>
 8008a14:	e00d      	b.n	8008a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a16:	4b26      	ldr	r3, [pc, #152]	@ (8008ab0 <prvAddNewTaskToReadyList+0xcc>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d109      	bne.n	8008a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a1e:	4b23      	ldr	r3, [pc, #140]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d802      	bhi.n	8008a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a32:	4b20      	ldr	r3, [pc, #128]	@ (8008ab4 <prvAddNewTaskToReadyList+0xd0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab4 <prvAddNewTaskToReadyList+0xd0>)
 8008a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ab4 <prvAddNewTaskToReadyList+0xd0>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a48:	4b1b      	ldr	r3, [pc, #108]	@ (8008ab8 <prvAddNewTaskToReadyList+0xd4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d903      	bls.n	8008a58 <prvAddNewTaskToReadyList+0x74>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	4a18      	ldr	r2, [pc, #96]	@ (8008ab8 <prvAddNewTaskToReadyList+0xd4>)
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4a15      	ldr	r2, [pc, #84]	@ (8008abc <prvAddNewTaskToReadyList+0xd8>)
 8008a66:	441a      	add	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4610      	mov	r0, r2
 8008a70:	f7ff f8d9 	bl	8007c26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a74:	f001 fa58 	bl	8009f28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a78:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab0 <prvAddNewTaskToReadyList+0xcc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00e      	beq.n	8008a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a80:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <prvAddNewTaskToReadyList+0xc8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d207      	bcs.n	8008a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac0 <prvAddNewTaskToReadyList+0xdc>)
 8008a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200015d8 	.word	0x200015d8
 8008aac:	20001104 	.word	0x20001104
 8008ab0:	200015e4 	.word	0x200015e4
 8008ab4:	200015f4 	.word	0x200015f4
 8008ab8:	200015e0 	.word	0x200015e0
 8008abc:	20001108 	.word	0x20001108
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008acc:	2300      	movs	r3, #0
 8008ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01a      	beq.n	8008b0c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ad6:	4b15      	ldr	r3, [pc, #84]	@ (8008b2c <vTaskDelay+0x68>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00d      	beq.n	8008afa <vTaskDelay+0x36>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	b672      	cpsid	i
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	b662      	cpsie	i
 8008af2:	60bb      	str	r3, [r7, #8]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008afa:	f000 f887 	bl	8008c0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008afe:	2100      	movs	r1, #0
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fd0d 	bl	8009520 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b06:	f000 f88f 	bl	8008c28 <xTaskResumeAll>
 8008b0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d107      	bne.n	8008b22 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008b12:	4b07      	ldr	r3, [pc, #28]	@ (8008b30 <vTaskDelay+0x6c>)
 8008b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b22:	bf00      	nop
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20001600 	.word	0x20001600
 8008b30:	e000ed04 	.word	0xe000ed04

08008b34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08a      	sub	sp, #40	@ 0x28
 8008b38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b42:	463a      	mov	r2, r7
 8008b44:	1d39      	adds	r1, r7, #4
 8008b46:	f107 0308 	add.w	r3, r7, #8
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff f80a 	bl	8007b64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	9202      	str	r2, [sp, #8]
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	460a      	mov	r2, r1
 8008b62:	4924      	ldr	r1, [pc, #144]	@ (8008bf4 <vTaskStartScheduler+0xc0>)
 8008b64:	4824      	ldr	r0, [pc, #144]	@ (8008bf8 <vTaskStartScheduler+0xc4>)
 8008b66:	f7ff fdff 	bl	8008768 <xTaskCreateStatic>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	4a23      	ldr	r2, [pc, #140]	@ (8008bfc <vTaskStartScheduler+0xc8>)
 8008b6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b70:	4b22      	ldr	r3, [pc, #136]	@ (8008bfc <vTaskStartScheduler+0xc8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	e001      	b.n	8008b82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d102      	bne.n	8008b8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b88:	f000 fd1e 	bl	80095c8 <xTimerCreateTimerTask>
 8008b8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d118      	bne.n	8008bc6 <vTaskStartScheduler+0x92>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b98:	b672      	cpsid	i
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	b662      	cpsie	i
 8008ba8:	613b      	str	r3, [r7, #16]
}
 8008baa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bac:	4b14      	ldr	r3, [pc, #80]	@ (8008c00 <vTaskStartScheduler+0xcc>)
 8008bae:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bb4:	4b13      	ldr	r3, [pc, #76]	@ (8008c04 <vTaskStartScheduler+0xd0>)
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008bba:	4b13      	ldr	r3, [pc, #76]	@ (8008c08 <vTaskStartScheduler+0xd4>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bc0:	f001 f8fe 	bl	8009dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bc4:	e011      	b.n	8008bea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d10d      	bne.n	8008bea <vTaskStartScheduler+0xb6>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	b672      	cpsid	i
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	b662      	cpsie	i
 8008be2:	60fb      	str	r3, [r7, #12]
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop
 8008be8:	e7fd      	b.n	8008be6 <vTaskStartScheduler+0xb2>
}
 8008bea:	bf00      	nop
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	0800bb5c 	.word	0x0800bb5c
 8008bf8:	0800924d 	.word	0x0800924d
 8008bfc:	200015fc 	.word	0x200015fc
 8008c00:	200015f8 	.word	0x200015f8
 8008c04:	200015e4 	.word	0x200015e4
 8008c08:	200015dc 	.word	0x200015dc

08008c0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008c10:	4b04      	ldr	r3, [pc, #16]	@ (8008c24 <vTaskSuspendAll+0x18>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3301      	adds	r3, #1
 8008c16:	4a03      	ldr	r2, [pc, #12]	@ (8008c24 <vTaskSuspendAll+0x18>)
 8008c18:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008c1a:	bf00      	nop
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	20001600 	.word	0x20001600

08008c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c36:	4b43      	ldr	r3, [pc, #268]	@ (8008d44 <xTaskResumeAll+0x11c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10d      	bne.n	8008c5a <xTaskResumeAll+0x32>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	b672      	cpsid	i
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	b662      	cpsie	i
 8008c52:	603b      	str	r3, [r7, #0]
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	e7fd      	b.n	8008c56 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c5a:	f001 f92f 	bl	8009ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c5e:	4b39      	ldr	r3, [pc, #228]	@ (8008d44 <xTaskResumeAll+0x11c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	4a37      	ldr	r2, [pc, #220]	@ (8008d44 <xTaskResumeAll+0x11c>)
 8008c66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c68:	4b36      	ldr	r3, [pc, #216]	@ (8008d44 <xTaskResumeAll+0x11c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d162      	bne.n	8008d36 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c70:	4b35      	ldr	r3, [pc, #212]	@ (8008d48 <xTaskResumeAll+0x120>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d05e      	beq.n	8008d36 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c78:	e02f      	b.n	8008cda <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7a:	4b34      	ldr	r3, [pc, #208]	@ (8008d4c <xTaskResumeAll+0x124>)
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3318      	adds	r3, #24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7ff f82a 	bl	8007ce0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff f825 	bl	8007ce0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8008d50 <xTaskResumeAll+0x128>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d903      	bls.n	8008caa <xTaskResumeAll+0x82>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8008d50 <xTaskResumeAll+0x128>)
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4a27      	ldr	r2, [pc, #156]	@ (8008d54 <xTaskResumeAll+0x12c>)
 8008cb8:	441a      	add	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f7fe ffb0 	bl	8007c26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cca:	4b23      	ldr	r3, [pc, #140]	@ (8008d58 <xTaskResumeAll+0x130>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d302      	bcc.n	8008cda <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008cd4:	4b21      	ldr	r3, [pc, #132]	@ (8008d5c <xTaskResumeAll+0x134>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cda:	4b1c      	ldr	r3, [pc, #112]	@ (8008d4c <xTaskResumeAll+0x124>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1cb      	bne.n	8008c7a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ce8:	f000 fb68 	bl	80093bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008cec:	4b1c      	ldr	r3, [pc, #112]	@ (8008d60 <xTaskResumeAll+0x138>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d010      	beq.n	8008d1a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008cf8:	f000 f846 	bl	8008d88 <xTaskIncrementTick>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8008d02:	4b16      	ldr	r3, [pc, #88]	@ (8008d5c <xTaskResumeAll+0x134>)
 8008d04:	2201      	movs	r2, #1
 8008d06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1f1      	bne.n	8008cf8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8008d14:	4b12      	ldr	r3, [pc, #72]	@ (8008d60 <xTaskResumeAll+0x138>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d1a:	4b10      	ldr	r3, [pc, #64]	@ (8008d5c <xTaskResumeAll+0x134>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d009      	beq.n	8008d36 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d22:	2301      	movs	r3, #1
 8008d24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d26:	4b0f      	ldr	r3, [pc, #60]	@ (8008d64 <xTaskResumeAll+0x13c>)
 8008d28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d36:	f001 f8f7 	bl	8009f28 <vPortExitCritical>

	return xAlreadyYielded;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20001600 	.word	0x20001600
 8008d48:	200015d8 	.word	0x200015d8
 8008d4c:	20001598 	.word	0x20001598
 8008d50:	200015e0 	.word	0x200015e0
 8008d54:	20001108 	.word	0x20001108
 8008d58:	20001104 	.word	0x20001104
 8008d5c:	200015ec 	.word	0x200015ec
 8008d60:	200015e8 	.word	0x200015e8
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d6e:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <xTaskGetTickCount+0x1c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d74:	687b      	ldr	r3, [r7, #4]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	200015dc 	.word	0x200015dc

08008d88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d92:	4b50      	ldr	r3, [pc, #320]	@ (8008ed4 <xTaskIncrementTick+0x14c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f040 808c 	bne.w	8008eb4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8008ed8 <xTaskIncrementTick+0x150>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008da4:	4a4c      	ldr	r2, [pc, #304]	@ (8008ed8 <xTaskIncrementTick+0x150>)
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d123      	bne.n	8008df8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008db0:	4b4a      	ldr	r3, [pc, #296]	@ (8008edc <xTaskIncrementTick+0x154>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00d      	beq.n	8008dd6 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbe:	b672      	cpsid	i
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	b662      	cpsie	i
 8008dce:	603b      	str	r3, [r7, #0]
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <xTaskIncrementTick+0x4a>
 8008dd6:	4b41      	ldr	r3, [pc, #260]	@ (8008edc <xTaskIncrementTick+0x154>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	4b40      	ldr	r3, [pc, #256]	@ (8008ee0 <xTaskIncrementTick+0x158>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a3e      	ldr	r2, [pc, #248]	@ (8008edc <xTaskIncrementTick+0x154>)
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ee0 <xTaskIncrementTick+0x158>)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	4b3e      	ldr	r3, [pc, #248]	@ (8008ee4 <xTaskIncrementTick+0x15c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3301      	adds	r3, #1
 8008df0:	4a3c      	ldr	r2, [pc, #240]	@ (8008ee4 <xTaskIncrementTick+0x15c>)
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	f000 fae2 	bl	80093bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008df8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ee8 <xTaskIncrementTick+0x160>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d349      	bcc.n	8008e96 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e02:	4b36      	ldr	r3, [pc, #216]	@ (8008edc <xTaskIncrementTick+0x154>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d104      	bne.n	8008e16 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e0c:	4b36      	ldr	r3, [pc, #216]	@ (8008ee8 <xTaskIncrementTick+0x160>)
 8008e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e12:	601a      	str	r2, [r3, #0]
					break;
 8008e14:	e03f      	b.n	8008e96 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e16:	4b31      	ldr	r3, [pc, #196]	@ (8008edc <xTaskIncrementTick+0x154>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d203      	bcs.n	8008e36 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8008ee8 <xTaskIncrementTick+0x160>)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e34:	e02f      	b.n	8008e96 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe ff50 	bl	8007ce0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d004      	beq.n	8008e52 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	3318      	adds	r3, #24
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe ff47 	bl	8007ce0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e56:	4b25      	ldr	r3, [pc, #148]	@ (8008eec <xTaskIncrementTick+0x164>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d903      	bls.n	8008e66 <xTaskIncrementTick+0xde>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e62:	4a22      	ldr	r2, [pc, #136]	@ (8008eec <xTaskIncrementTick+0x164>)
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4a1f      	ldr	r2, [pc, #124]	@ (8008ef0 <xTaskIncrementTick+0x168>)
 8008e74:	441a      	add	r2, r3
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f7fe fed2 	bl	8007c26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e86:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef4 <xTaskIncrementTick+0x16c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d3b8      	bcc.n	8008e02 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008e90:	2301      	movs	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e94:	e7b5      	b.n	8008e02 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e96:	4b17      	ldr	r3, [pc, #92]	@ (8008ef4 <xTaskIncrementTick+0x16c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9c:	4914      	ldr	r1, [pc, #80]	@ (8008ef0 <xTaskIncrementTick+0x168>)
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d907      	bls.n	8008ebe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	617b      	str	r3, [r7, #20]
 8008eb2:	e004      	b.n	8008ebe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008eb4:	4b10      	ldr	r3, [pc, #64]	@ (8008ef8 <xTaskIncrementTick+0x170>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	4a0f      	ldr	r2, [pc, #60]	@ (8008ef8 <xTaskIncrementTick+0x170>)
 8008ebc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8008efc <xTaskIncrementTick+0x174>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008eca:	697b      	ldr	r3, [r7, #20]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	20001600 	.word	0x20001600
 8008ed8:	200015dc 	.word	0x200015dc
 8008edc:	20001590 	.word	0x20001590
 8008ee0:	20001594 	.word	0x20001594
 8008ee4:	200015f0 	.word	0x200015f0
 8008ee8:	200015f8 	.word	0x200015f8
 8008eec:	200015e0 	.word	0x200015e0
 8008ef0:	20001108 	.word	0x20001108
 8008ef4:	20001104 	.word	0x20001104
 8008ef8:	200015e8 	.word	0x200015e8
 8008efc:	200015ec 	.word	0x200015ec

08008f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f06:	4b29      	ldr	r3, [pc, #164]	@ (8008fac <vTaskSwitchContext+0xac>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f0e:	4b28      	ldr	r3, [pc, #160]	@ (8008fb0 <vTaskSwitchContext+0xb0>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f14:	e044      	b.n	8008fa0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008f16:	4b26      	ldr	r3, [pc, #152]	@ (8008fb0 <vTaskSwitchContext+0xb0>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f1c:	4b25      	ldr	r3, [pc, #148]	@ (8008fb4 <vTaskSwitchContext+0xb4>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60fb      	str	r3, [r7, #12]
 8008f22:	e013      	b.n	8008f4c <vTaskSwitchContext+0x4c>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10d      	bne.n	8008f46 <vTaskSwitchContext+0x46>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2e:	b672      	cpsid	i
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	b662      	cpsie	i
 8008f3e:	607b      	str	r3, [r7, #4]
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	e7fd      	b.n	8008f42 <vTaskSwitchContext+0x42>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	491a      	ldr	r1, [pc, #104]	@ (8008fb8 <vTaskSwitchContext+0xb8>)
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4613      	mov	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	440b      	add	r3, r1
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0e1      	beq.n	8008f24 <vTaskSwitchContext+0x24>
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4a13      	ldr	r2, [pc, #76]	@ (8008fb8 <vTaskSwitchContext+0xb8>)
 8008f6c:	4413      	add	r3, r2
 8008f6e:	60bb      	str	r3, [r7, #8]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	605a      	str	r2, [r3, #4]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	3308      	adds	r3, #8
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d104      	bne.n	8008f90 <vTaskSwitchContext+0x90>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	605a      	str	r2, [r3, #4]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	4a09      	ldr	r2, [pc, #36]	@ (8008fbc <vTaskSwitchContext+0xbc>)
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	4a06      	ldr	r2, [pc, #24]	@ (8008fb4 <vTaskSwitchContext+0xb4>)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6013      	str	r3, [r2, #0]
}
 8008fa0:	bf00      	nop
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	20001600 	.word	0x20001600
 8008fb0:	200015ec 	.word	0x200015ec
 8008fb4:	200015e0 	.word	0x200015e0
 8008fb8:	20001108 	.word	0x20001108
 8008fbc:	20001104 	.word	0x20001104

08008fc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10d      	bne.n	8008fec <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd4:	b672      	cpsid	i
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	b662      	cpsie	i
 8008fe4:	60fb      	str	r3, [r7, #12]
}
 8008fe6:	bf00      	nop
 8008fe8:	bf00      	nop
 8008fea:	e7fd      	b.n	8008fe8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fec:	4b07      	ldr	r3, [pc, #28]	@ (800900c <vTaskPlaceOnEventList+0x4c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3318      	adds	r3, #24
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7fe fe3a 	bl	8007c6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	6838      	ldr	r0, [r7, #0]
 8008ffe:	f000 fa8f 	bl	8009520 <prvAddCurrentTaskToDelayedList>
}
 8009002:	bf00      	nop
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20001104 	.word	0x20001104

08009010 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10d      	bne.n	800903e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009026:	b672      	cpsid	i
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	b662      	cpsie	i
 8009036:	617b      	str	r3, [r7, #20]
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	e7fd      	b.n	800903a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800903e:	4b0a      	ldr	r3, [pc, #40]	@ (8009068 <vTaskPlaceOnEventListRestricted+0x58>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3318      	adds	r3, #24
 8009044:	4619      	mov	r1, r3
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f7fe fded 	bl	8007c26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009052:	f04f 33ff 	mov.w	r3, #4294967295
 8009056:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009058:	6879      	ldr	r1, [r7, #4]
 800905a:	68b8      	ldr	r0, [r7, #8]
 800905c:	f000 fa60 	bl	8009520 <prvAddCurrentTaskToDelayedList>
	}
 8009060:	bf00      	nop
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	20001104 	.word	0x20001104

0800906c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10d      	bne.n	800909e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009086:	b672      	cpsid	i
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	b662      	cpsie	i
 8009096:	60fb      	str	r3, [r7, #12]
}
 8009098:	bf00      	nop
 800909a:	bf00      	nop
 800909c:	e7fd      	b.n	800909a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	3318      	adds	r3, #24
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe fe1c 	bl	8007ce0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009120 <xTaskRemoveFromEventList+0xb4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d11d      	bne.n	80090ec <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe fe13 	bl	8007ce0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090be:	4b19      	ldr	r3, [pc, #100]	@ (8009124 <xTaskRemoveFromEventList+0xb8>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d903      	bls.n	80090ce <xTaskRemoveFromEventList+0x62>
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ca:	4a16      	ldr	r2, [pc, #88]	@ (8009124 <xTaskRemoveFromEventList+0xb8>)
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4a13      	ldr	r2, [pc, #76]	@ (8009128 <xTaskRemoveFromEventList+0xbc>)
 80090dc:	441a      	add	r2, r3
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7fe fd9e 	bl	8007c26 <vListInsertEnd>
 80090ea:	e005      	b.n	80090f8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	3318      	adds	r3, #24
 80090f0:	4619      	mov	r1, r3
 80090f2:	480e      	ldr	r0, [pc, #56]	@ (800912c <xTaskRemoveFromEventList+0xc0>)
 80090f4:	f7fe fd97 	bl	8007c26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <xTaskRemoveFromEventList+0xc4>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009102:	429a      	cmp	r2, r3
 8009104:	d905      	bls.n	8009112 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009106:	2301      	movs	r3, #1
 8009108:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800910a:	4b0a      	ldr	r3, [pc, #40]	@ (8009134 <xTaskRemoveFromEventList+0xc8>)
 800910c:	2201      	movs	r2, #1
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	e001      	b.n	8009116 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009112:	2300      	movs	r3, #0
 8009114:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009116:	697b      	ldr	r3, [r7, #20]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20001600 	.word	0x20001600
 8009124:	200015e0 	.word	0x200015e0
 8009128:	20001108 	.word	0x20001108
 800912c:	20001598 	.word	0x20001598
 8009130:	20001104 	.word	0x20001104
 8009134:	200015ec 	.word	0x200015ec

08009138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009140:	4b06      	ldr	r3, [pc, #24]	@ (800915c <vTaskInternalSetTimeOutState+0x24>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <vTaskInternalSetTimeOutState+0x28>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	605a      	str	r2, [r3, #4]
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	200015f0 	.word	0x200015f0
 8009160:	200015dc 	.word	0x200015dc

08009164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10d      	bne.n	8009190 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009178:	b672      	cpsid	i
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	b662      	cpsie	i
 8009188:	613b      	str	r3, [r7, #16]
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	e7fd      	b.n	800918c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10d      	bne.n	80091b2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919a:	b672      	cpsid	i
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	b662      	cpsie	i
 80091aa:	60fb      	str	r3, [r7, #12]
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80091b2:	f000 fe83 	bl	8009ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091b6:	4b1d      	ldr	r3, [pc, #116]	@ (800922c <xTaskCheckForTimeOut+0xc8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ce:	d102      	bne.n	80091d6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61fb      	str	r3, [r7, #28]
 80091d4:	e023      	b.n	800921e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	4b15      	ldr	r3, [pc, #84]	@ (8009230 <xTaskCheckForTimeOut+0xcc>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d007      	beq.n	80091f2 <xTaskCheckForTimeOut+0x8e>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d302      	bcc.n	80091f2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091ec:	2301      	movs	r3, #1
 80091ee:	61fb      	str	r3, [r7, #28]
 80091f0:	e015      	b.n	800921e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d20b      	bcs.n	8009214 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	1ad2      	subs	r2, r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff ff95 	bl	8009138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800920e:	2300      	movs	r3, #0
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	e004      	b.n	800921e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800921a:	2301      	movs	r3, #1
 800921c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800921e:	f000 fe83 	bl	8009f28 <vPortExitCritical>

	return xReturn;
 8009222:	69fb      	ldr	r3, [r7, #28]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3720      	adds	r7, #32
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	200015dc 	.word	0x200015dc
 8009230:	200015f0 	.word	0x200015f0

08009234 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009234:	b480      	push	{r7}
 8009236:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009238:	4b03      	ldr	r3, [pc, #12]	@ (8009248 <vTaskMissedYield+0x14>)
 800923a:	2201      	movs	r2, #1
 800923c:	601a      	str	r2, [r3, #0]
}
 800923e:	bf00      	nop
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	200015ec 	.word	0x200015ec

0800924c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009254:	f000 f852 	bl	80092fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009258:	4b06      	ldr	r3, [pc, #24]	@ (8009274 <prvIdleTask+0x28>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d9f9      	bls.n	8009254 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009260:	4b05      	ldr	r3, [pc, #20]	@ (8009278 <prvIdleTask+0x2c>)
 8009262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009270:	e7f0      	b.n	8009254 <prvIdleTask+0x8>
 8009272:	bf00      	nop
 8009274:	20001108 	.word	0x20001108
 8009278:	e000ed04 	.word	0xe000ed04

0800927c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009282:	2300      	movs	r3, #0
 8009284:	607b      	str	r3, [r7, #4]
 8009286:	e00c      	b.n	80092a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4a12      	ldr	r2, [pc, #72]	@ (80092dc <prvInitialiseTaskLists+0x60>)
 8009294:	4413      	add	r3, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fc98 	bl	8007bcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3301      	adds	r3, #1
 80092a0:	607b      	str	r3, [r7, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b37      	cmp	r3, #55	@ 0x37
 80092a6:	d9ef      	bls.n	8009288 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092a8:	480d      	ldr	r0, [pc, #52]	@ (80092e0 <prvInitialiseTaskLists+0x64>)
 80092aa:	f7fe fc8f 	bl	8007bcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092ae:	480d      	ldr	r0, [pc, #52]	@ (80092e4 <prvInitialiseTaskLists+0x68>)
 80092b0:	f7fe fc8c 	bl	8007bcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092b4:	480c      	ldr	r0, [pc, #48]	@ (80092e8 <prvInitialiseTaskLists+0x6c>)
 80092b6:	f7fe fc89 	bl	8007bcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092ba:	480c      	ldr	r0, [pc, #48]	@ (80092ec <prvInitialiseTaskLists+0x70>)
 80092bc:	f7fe fc86 	bl	8007bcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092c0:	480b      	ldr	r0, [pc, #44]	@ (80092f0 <prvInitialiseTaskLists+0x74>)
 80092c2:	f7fe fc83 	bl	8007bcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092c6:	4b0b      	ldr	r3, [pc, #44]	@ (80092f4 <prvInitialiseTaskLists+0x78>)
 80092c8:	4a05      	ldr	r2, [pc, #20]	@ (80092e0 <prvInitialiseTaskLists+0x64>)
 80092ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092cc:	4b0a      	ldr	r3, [pc, #40]	@ (80092f8 <prvInitialiseTaskLists+0x7c>)
 80092ce:	4a05      	ldr	r2, [pc, #20]	@ (80092e4 <prvInitialiseTaskLists+0x68>)
 80092d0:	601a      	str	r2, [r3, #0]
}
 80092d2:	bf00      	nop
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	20001108 	.word	0x20001108
 80092e0:	20001568 	.word	0x20001568
 80092e4:	2000157c 	.word	0x2000157c
 80092e8:	20001598 	.word	0x20001598
 80092ec:	200015ac 	.word	0x200015ac
 80092f0:	200015c4 	.word	0x200015c4
 80092f4:	20001590 	.word	0x20001590
 80092f8:	20001594 	.word	0x20001594

080092fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009302:	e019      	b.n	8009338 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009304:	f000 fdda 	bl	8009ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009308:	4b10      	ldr	r3, [pc, #64]	@ (800934c <prvCheckTasksWaitingTermination+0x50>)
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3304      	adds	r3, #4
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe fce3 	bl	8007ce0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800931a:	4b0d      	ldr	r3, [pc, #52]	@ (8009350 <prvCheckTasksWaitingTermination+0x54>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3b01      	subs	r3, #1
 8009320:	4a0b      	ldr	r2, [pc, #44]	@ (8009350 <prvCheckTasksWaitingTermination+0x54>)
 8009322:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009324:	4b0b      	ldr	r3, [pc, #44]	@ (8009354 <prvCheckTasksWaitingTermination+0x58>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3b01      	subs	r3, #1
 800932a:	4a0a      	ldr	r2, [pc, #40]	@ (8009354 <prvCheckTasksWaitingTermination+0x58>)
 800932c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800932e:	f000 fdfb 	bl	8009f28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f810 	bl	8009358 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009338:	4b06      	ldr	r3, [pc, #24]	@ (8009354 <prvCheckTasksWaitingTermination+0x58>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e1      	bne.n	8009304 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	200015ac 	.word	0x200015ac
 8009350:	200015d8 	.word	0x200015d8
 8009354:	200015c0 	.word	0x200015c0

08009358 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009366:	2b00      	cmp	r3, #0
 8009368:	d108      	bne.n	800937c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936e:	4618      	mov	r0, r3
 8009370:	f000 ffa0 	bl	800a2b4 <vPortFree>
				vPortFree( pxTCB );
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 ff9d 	bl	800a2b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800937a:	e01b      	b.n	80093b4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009382:	2b01      	cmp	r3, #1
 8009384:	d103      	bne.n	800938e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 ff94 	bl	800a2b4 <vPortFree>
	}
 800938c:	e012      	b.n	80093b4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009394:	2b02      	cmp	r3, #2
 8009396:	d00d      	beq.n	80093b4 <prvDeleteTCB+0x5c>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939c:	b672      	cpsid	i
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	b662      	cpsie	i
 80093ac:	60fb      	str	r3, [r7, #12]
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <prvDeleteTCB+0x58>
	}
 80093b4:	bf00      	nop
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093c2:	4b0c      	ldr	r3, [pc, #48]	@ (80093f4 <prvResetNextTaskUnblockTime+0x38>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093cc:	4b0a      	ldr	r3, [pc, #40]	@ (80093f8 <prvResetNextTaskUnblockTime+0x3c>)
 80093ce:	f04f 32ff 	mov.w	r2, #4294967295
 80093d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093d4:	e008      	b.n	80093e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d6:	4b07      	ldr	r3, [pc, #28]	@ (80093f4 <prvResetNextTaskUnblockTime+0x38>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	4a04      	ldr	r2, [pc, #16]	@ (80093f8 <prvResetNextTaskUnblockTime+0x3c>)
 80093e6:	6013      	str	r3, [r2, #0]
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20001590 	.word	0x20001590
 80093f8:	200015f8 	.word	0x200015f8

080093fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009402:	4b0b      	ldr	r3, [pc, #44]	@ (8009430 <xTaskGetSchedulerState+0x34>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d102      	bne.n	8009410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800940a:	2301      	movs	r3, #1
 800940c:	607b      	str	r3, [r7, #4]
 800940e:	e008      	b.n	8009422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009410:	4b08      	ldr	r3, [pc, #32]	@ (8009434 <xTaskGetSchedulerState+0x38>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d102      	bne.n	800941e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009418:	2302      	movs	r3, #2
 800941a:	607b      	str	r3, [r7, #4]
 800941c:	e001      	b.n	8009422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009422:	687b      	ldr	r3, [r7, #4]
	}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	200015e4 	.word	0x200015e4
 8009434:	20001600 	.word	0x20001600

08009438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d05c      	beq.n	8009508 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800944e:	4b31      	ldr	r3, [pc, #196]	@ (8009514 <xTaskPriorityDisinherit+0xdc>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	429a      	cmp	r2, r3
 8009456:	d00d      	beq.n	8009474 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	b672      	cpsid	i
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	b662      	cpsie	i
 800946c:	60fb      	str	r3, [r7, #12]
}
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	e7fd      	b.n	8009470 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10d      	bne.n	8009498 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009480:	b672      	cpsid	i
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	b662      	cpsie	i
 8009490:	60bb      	str	r3, [r7, #8]
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	e7fd      	b.n	8009494 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800949c:	1e5a      	subs	r2, r3, #1
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d02c      	beq.n	8009508 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d128      	bne.n	8009508 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	3304      	adds	r3, #4
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe fc10 	bl	8007ce0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009518 <xTaskPriorityDisinherit+0xe0>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d903      	bls.n	80094e8 <xTaskPriorityDisinherit+0xb0>
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e4:	4a0c      	ldr	r2, [pc, #48]	@ (8009518 <xTaskPriorityDisinherit+0xe0>)
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4a09      	ldr	r2, [pc, #36]	@ (800951c <xTaskPriorityDisinherit+0xe4>)
 80094f6:	441a      	add	r2, r3
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7fe fb91 	bl	8007c26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009504:	2301      	movs	r3, #1
 8009506:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009508:	697b      	ldr	r3, [r7, #20]
	}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	20001104 	.word	0x20001104
 8009518:	200015e0 	.word	0x200015e0
 800951c:	20001108 	.word	0x20001108

08009520 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800952a:	4b21      	ldr	r3, [pc, #132]	@ (80095b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009530:	4b20      	ldr	r3, [pc, #128]	@ (80095b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3304      	adds	r3, #4
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fbd2 	bl	8007ce0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009542:	d10a      	bne.n	800955a <prvAddCurrentTaskToDelayedList+0x3a>
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d007      	beq.n	800955a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800954a:	4b1a      	ldr	r3, [pc, #104]	@ (80095b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3304      	adds	r3, #4
 8009550:	4619      	mov	r1, r3
 8009552:	4819      	ldr	r0, [pc, #100]	@ (80095b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009554:	f7fe fb67 	bl	8007c26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009558:	e026      	b.n	80095a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4413      	add	r3, r2
 8009560:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009562:	4b14      	ldr	r3, [pc, #80]	@ (80095b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	429a      	cmp	r2, r3
 8009570:	d209      	bcs.n	8009586 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009572:	4b12      	ldr	r3, [pc, #72]	@ (80095bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	4b0f      	ldr	r3, [pc, #60]	@ (80095b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3304      	adds	r3, #4
 800957c:	4619      	mov	r1, r3
 800957e:	4610      	mov	r0, r2
 8009580:	f7fe fb75 	bl	8007c6e <vListInsert>
}
 8009584:	e010      	b.n	80095a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009586:	4b0e      	ldr	r3, [pc, #56]	@ (80095c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	4b0a      	ldr	r3, [pc, #40]	@ (80095b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3304      	adds	r3, #4
 8009590:	4619      	mov	r1, r3
 8009592:	4610      	mov	r0, r2
 8009594:	f7fe fb6b 	bl	8007c6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009598:	4b0a      	ldr	r3, [pc, #40]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d202      	bcs.n	80095a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095a2:	4a08      	ldr	r2, [pc, #32]	@ (80095c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	6013      	str	r3, [r2, #0]
}
 80095a8:	bf00      	nop
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	200015dc 	.word	0x200015dc
 80095b4:	20001104 	.word	0x20001104
 80095b8:	200015c4 	.word	0x200015c4
 80095bc:	20001594 	.word	0x20001594
 80095c0:	20001590 	.word	0x20001590
 80095c4:	200015f8 	.word	0x200015f8

080095c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08a      	sub	sp, #40	@ 0x28
 80095cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095d2:	f000 fb21 	bl	8009c18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009650 <xTimerCreateTimerTask+0x88>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d021      	beq.n	8009622 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095e6:	1d3a      	adds	r2, r7, #4
 80095e8:	f107 0108 	add.w	r1, r7, #8
 80095ec:	f107 030c 	add.w	r3, r7, #12
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe fad1 	bl	8007b98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	9202      	str	r2, [sp, #8]
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	2302      	movs	r3, #2
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	2300      	movs	r3, #0
 8009606:	460a      	mov	r2, r1
 8009608:	4912      	ldr	r1, [pc, #72]	@ (8009654 <xTimerCreateTimerTask+0x8c>)
 800960a:	4813      	ldr	r0, [pc, #76]	@ (8009658 <xTimerCreateTimerTask+0x90>)
 800960c:	f7ff f8ac 	bl	8008768 <xTaskCreateStatic>
 8009610:	4603      	mov	r3, r0
 8009612:	4a12      	ldr	r2, [pc, #72]	@ (800965c <xTimerCreateTimerTask+0x94>)
 8009614:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009616:	4b11      	ldr	r3, [pc, #68]	@ (800965c <xTimerCreateTimerTask+0x94>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800961e:	2301      	movs	r3, #1
 8009620:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10d      	bne.n	8009644 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	b672      	cpsid	i
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	b662      	cpsie	i
 800963c:	613b      	str	r3, [r7, #16]
}
 800963e:	bf00      	nop
 8009640:	bf00      	nop
 8009642:	e7fd      	b.n	8009640 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009644:	697b      	ldr	r3, [r7, #20]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	20001634 	.word	0x20001634
 8009654:	0800bb64 	.word	0x0800bb64
 8009658:	080097a1 	.word	0x080097a1
 800965c:	20001638 	.word	0x20001638

08009660 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08a      	sub	sp, #40	@ 0x28
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
 800966c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800966e:	2300      	movs	r3, #0
 8009670:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10d      	bne.n	8009694 <xTimerGenericCommand+0x34>
	__asm volatile
 8009678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967c:	b672      	cpsid	i
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	b662      	cpsie	i
 800968c:	623b      	str	r3, [r7, #32]
}
 800968e:	bf00      	nop
 8009690:	bf00      	nop
 8009692:	e7fd      	b.n	8009690 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009694:	4b19      	ldr	r3, [pc, #100]	@ (80096fc <xTimerGenericCommand+0x9c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d02a      	beq.n	80096f2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2b05      	cmp	r3, #5
 80096ac:	dc18      	bgt.n	80096e0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096ae:	f7ff fea5 	bl	80093fc <xTaskGetSchedulerState>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d109      	bne.n	80096cc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096b8:	4b10      	ldr	r3, [pc, #64]	@ (80096fc <xTimerGenericCommand+0x9c>)
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	f107 0110 	add.w	r1, r7, #16
 80096c0:	2300      	movs	r3, #0
 80096c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096c4:	f7fe fc4c 	bl	8007f60 <xQueueGenericSend>
 80096c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80096ca:	e012      	b.n	80096f2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096cc:	4b0b      	ldr	r3, [pc, #44]	@ (80096fc <xTimerGenericCommand+0x9c>)
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	f107 0110 	add.w	r1, r7, #16
 80096d4:	2300      	movs	r3, #0
 80096d6:	2200      	movs	r2, #0
 80096d8:	f7fe fc42 	bl	8007f60 <xQueueGenericSend>
 80096dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80096de:	e008      	b.n	80096f2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096e0:	4b06      	ldr	r3, [pc, #24]	@ (80096fc <xTimerGenericCommand+0x9c>)
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	f107 0110 	add.w	r1, r7, #16
 80096e8:	2300      	movs	r3, #0
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	f7fe fd42 	bl	8008174 <xQueueGenericSendFromISR>
 80096f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3728      	adds	r7, #40	@ 0x28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	20001634 	.word	0x20001634

08009700 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af02      	add	r7, sp, #8
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800970a:	4b24      	ldr	r3, [pc, #144]	@ (800979c <prvProcessExpiredTimer+0x9c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	3304      	adds	r3, #4
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fae1 	bl	8007ce0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009724:	f003 0304 	and.w	r3, r3, #4
 8009728:	2b00      	cmp	r3, #0
 800972a:	d025      	beq.n	8009778 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	699a      	ldr	r2, [r3, #24]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	18d1      	adds	r1, r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	6978      	ldr	r0, [r7, #20]
 800973a:	f000 f8d7 	bl	80098ec <prvInsertTimerInActiveList>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d022      	beq.n	800978a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009744:	2300      	movs	r3, #0
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	2300      	movs	r3, #0
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	2100      	movs	r1, #0
 800974e:	6978      	ldr	r0, [r7, #20]
 8009750:	f7ff ff86 	bl	8009660 <xTimerGenericCommand>
 8009754:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d116      	bne.n	800978a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009760:	b672      	cpsid	i
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	b662      	cpsie	i
 8009770:	60fb      	str	r3, [r7, #12]
}
 8009772:	bf00      	nop
 8009774:	bf00      	nop
 8009776:	e7fd      	b.n	8009774 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800977e:	f023 0301 	bic.w	r3, r3, #1
 8009782:	b2da      	uxtb	r2, r3
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	6978      	ldr	r0, [r7, #20]
 8009790:	4798      	blx	r3
}
 8009792:	bf00      	nop
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	2000162c 	.word	0x2000162c

080097a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097a8:	f107 0308 	add.w	r3, r7, #8
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 f859 	bl	8009864 <prvGetNextExpireTime>
 80097b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	4619      	mov	r1, r3
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f805 	bl	80097c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097be:	f000 f8d7 	bl	8009970 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097c2:	bf00      	nop
 80097c4:	e7f0      	b.n	80097a8 <prvTimerTask+0x8>
	...

080097c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097d2:	f7ff fa1b 	bl	8008c0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097d6:	f107 0308 	add.w	r3, r7, #8
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f866 	bl	80098ac <prvSampleTimeNow>
 80097e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d130      	bne.n	800984a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <prvProcessTimerOrBlockTask+0x3c>
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d806      	bhi.n	8009804 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097f6:	f7ff fa17 	bl	8008c28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff ff7f 	bl	8009700 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009802:	e024      	b.n	800984e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d008      	beq.n	800981c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800980a:	4b13      	ldr	r3, [pc, #76]	@ (8009858 <prvProcessTimerOrBlockTask+0x90>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <prvProcessTimerOrBlockTask+0x50>
 8009814:	2301      	movs	r3, #1
 8009816:	e000      	b.n	800981a <prvProcessTimerOrBlockTask+0x52>
 8009818:	2300      	movs	r3, #0
 800981a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800981c:	4b0f      	ldr	r3, [pc, #60]	@ (800985c <prvProcessTimerOrBlockTask+0x94>)
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4619      	mov	r1, r3
 800982a:	f7fe ff69 	bl	8008700 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800982e:	f7ff f9fb 	bl	8008c28 <xTaskResumeAll>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009838:	4b09      	ldr	r3, [pc, #36]	@ (8009860 <prvProcessTimerOrBlockTask+0x98>)
 800983a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	f3bf 8f6f 	isb	sy
}
 8009848:	e001      	b.n	800984e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800984a:	f7ff f9ed 	bl	8008c28 <xTaskResumeAll>
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20001630 	.word	0x20001630
 800985c:	20001634 	.word	0x20001634
 8009860:	e000ed04 	.word	0xe000ed04

08009864 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800986c:	4b0e      	ldr	r3, [pc, #56]	@ (80098a8 <prvGetNextExpireTime+0x44>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <prvGetNextExpireTime+0x16>
 8009876:	2201      	movs	r2, #1
 8009878:	e000      	b.n	800987c <prvGetNextExpireTime+0x18>
 800987a:	2200      	movs	r2, #0
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009888:	4b07      	ldr	r3, [pc, #28]	@ (80098a8 <prvGetNextExpireTime+0x44>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	e001      	b.n	8009898 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009898:	68fb      	ldr	r3, [r7, #12]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	2000162c 	.word	0x2000162c

080098ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098b4:	f7ff fa58 	bl	8008d68 <xTaskGetTickCount>
 80098b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098ba:	4b0b      	ldr	r3, [pc, #44]	@ (80098e8 <prvSampleTimeNow+0x3c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d205      	bcs.n	80098d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098c4:	f000 f940 	bl	8009b48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	e002      	b.n	80098d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098d6:	4a04      	ldr	r2, [pc, #16]	@ (80098e8 <prvSampleTimeNow+0x3c>)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098dc:	68fb      	ldr	r3, [r7, #12]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	2000163c 	.word	0x2000163c

080098ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	429a      	cmp	r2, r3
 8009910:	d812      	bhi.n	8009938 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	1ad2      	subs	r2, r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	429a      	cmp	r2, r3
 800991e:	d302      	bcc.n	8009926 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009920:	2301      	movs	r3, #1
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	e01b      	b.n	800995e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009926:	4b10      	ldr	r3, [pc, #64]	@ (8009968 <prvInsertTimerInActiveList+0x7c>)
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3304      	adds	r3, #4
 800992e:	4619      	mov	r1, r3
 8009930:	4610      	mov	r0, r2
 8009932:	f7fe f99c 	bl	8007c6e <vListInsert>
 8009936:	e012      	b.n	800995e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	d206      	bcs.n	800994e <prvInsertTimerInActiveList+0x62>
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	429a      	cmp	r2, r3
 8009946:	d302      	bcc.n	800994e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009948:	2301      	movs	r3, #1
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	e007      	b.n	800995e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800994e:	4b07      	ldr	r3, [pc, #28]	@ (800996c <prvInsertTimerInActiveList+0x80>)
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3304      	adds	r3, #4
 8009956:	4619      	mov	r1, r3
 8009958:	4610      	mov	r0, r2
 800995a:	f7fe f988 	bl	8007c6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800995e:	697b      	ldr	r3, [r7, #20]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20001630 	.word	0x20001630
 800996c:	2000162c 	.word	0x2000162c

08009970 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08e      	sub	sp, #56	@ 0x38
 8009974:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009976:	e0d4      	b.n	8009b22 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	da1b      	bge.n	80099b6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800997e:	1d3b      	adds	r3, r7, #4
 8009980:	3304      	adds	r3, #4
 8009982:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10d      	bne.n	80099a6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998e:	b672      	cpsid	i
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	b662      	cpsie	i
 800999e:	61fb      	str	r3, [r7, #28]
}
 80099a0:	bf00      	nop
 80099a2:	bf00      	nop
 80099a4:	e7fd      	b.n	80099a2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ac:	6850      	ldr	r0, [r2, #4]
 80099ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099b0:	6892      	ldr	r2, [r2, #8]
 80099b2:	4611      	mov	r1, r2
 80099b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f2c0 80b2 	blt.w	8009b22 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d004      	beq.n	80099d4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	3304      	adds	r3, #4
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe f986 	bl	8007ce0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099d4:	463b      	mov	r3, r7
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff ff68 	bl	80098ac <prvSampleTimeNow>
 80099dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b09      	cmp	r3, #9
 80099e2:	f200 809b 	bhi.w	8009b1c <prvProcessReceivedCommands+0x1ac>
 80099e6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <prvProcessReceivedCommands+0x7c>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a8f 	.word	0x08009a8f
 80099fc:	08009aa3 	.word	0x08009aa3
 8009a00:	08009af3 	.word	0x08009af3
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a15 	.word	0x08009a15
 8009a0c:	08009a8f 	.word	0x08009a8f
 8009a10:	08009aa3 	.word	0x08009aa3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a1a:	f043 0301 	orr.w	r3, r3, #1
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	18d1      	adds	r1, r2, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a34:	f7ff ff5a 	bl	80098ec <prvInsertTimerInActiveList>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d070      	beq.n	8009b20 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d065      	beq.n	8009b20 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	441a      	add	r2, r3
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	2300      	movs	r3, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a66:	f7ff fdfb 	bl	8009660 <xTimerGenericCommand>
 8009a6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d156      	bne.n	8009b20 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	b672      	cpsid	i
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	b662      	cpsie	i
 8009a86:	61bb      	str	r3, [r7, #24]
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	e7fd      	b.n	8009a8a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a94:	f023 0301 	bic.w	r3, r3, #1
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009aa0:	e03f      	b.n	8009b22 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aa8:	f043 0301 	orr.w	r3, r3, #1
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10d      	bne.n	8009ade <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac6:	b672      	cpsid	i
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	b662      	cpsie	i
 8009ad6:	617b      	str	r3, [r7, #20]
}
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	e7fd      	b.n	8009ada <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae0:	699a      	ldr	r2, [r3, #24]
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae4:	18d1      	adds	r1, r2, r3
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aec:	f7ff fefe 	bl	80098ec <prvInsertTimerInActiveList>
					break;
 8009af0:	e017      	b.n	8009b22 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d103      	bne.n	8009b08 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b02:	f000 fbd7 	bl	800a2b4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b06:	e00c      	b.n	8009b22 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b0e:	f023 0301 	bic.w	r3, r3, #1
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b1a:	e002      	b.n	8009b22 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009b1c:	bf00      	nop
 8009b1e:	e000      	b.n	8009b22 <prvProcessReceivedCommands+0x1b2>
					break;
 8009b20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b22:	4b08      	ldr	r3, [pc, #32]	@ (8009b44 <prvProcessReceivedCommands+0x1d4>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	1d39      	adds	r1, r7, #4
 8009b28:	2200      	movs	r2, #0
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe fbc6 	bl	80082bc <xQueueReceive>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f47f af20 	bne.w	8009978 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	3730      	adds	r7, #48	@ 0x30
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20001634 	.word	0x20001634

08009b48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b4e:	e04b      	b.n	8009be8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b50:	4b2f      	ldr	r3, [pc, #188]	@ (8009c10 <prvSwitchTimerLists+0xc8>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8009c10 <prvSwitchTimerLists+0xc8>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe f8b9 	bl	8007ce0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b7c:	f003 0304 	and.w	r3, r3, #4
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d031      	beq.n	8009be8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d90e      	bls.n	8009bb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c10 <prvSwitchTimerLists+0xc8>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	4619      	mov	r1, r3
 8009bac:	4610      	mov	r0, r2
 8009bae:	f7fe f85e 	bl	8007c6e <vListInsert>
 8009bb2:	e019      	b.n	8009be8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7ff fd4e 	bl	8009660 <xTimerGenericCommand>
 8009bc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10d      	bne.n	8009be8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd0:	b672      	cpsid	i
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	b662      	cpsie	i
 8009be0:	603b      	str	r3, [r7, #0]
}
 8009be2:	bf00      	nop
 8009be4:	bf00      	nop
 8009be6:	e7fd      	b.n	8009be4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009be8:	4b09      	ldr	r3, [pc, #36]	@ (8009c10 <prvSwitchTimerLists+0xc8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1ae      	bne.n	8009b50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bf2:	4b07      	ldr	r3, [pc, #28]	@ (8009c10 <prvSwitchTimerLists+0xc8>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bf8:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <prvSwitchTimerLists+0xcc>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a04      	ldr	r2, [pc, #16]	@ (8009c10 <prvSwitchTimerLists+0xc8>)
 8009bfe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c00:	4a04      	ldr	r2, [pc, #16]	@ (8009c14 <prvSwitchTimerLists+0xcc>)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	6013      	str	r3, [r2, #0]
}
 8009c06:	bf00      	nop
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	2000162c 	.word	0x2000162c
 8009c14:	20001630 	.word	0x20001630

08009c18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c1e:	f000 f94d 	bl	8009ebc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c22:	4b15      	ldr	r3, [pc, #84]	@ (8009c78 <prvCheckForValidListAndQueue+0x60>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d120      	bne.n	8009c6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c2a:	4814      	ldr	r0, [pc, #80]	@ (8009c7c <prvCheckForValidListAndQueue+0x64>)
 8009c2c:	f7fd ffce 	bl	8007bcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c30:	4813      	ldr	r0, [pc, #76]	@ (8009c80 <prvCheckForValidListAndQueue+0x68>)
 8009c32:	f7fd ffcb 	bl	8007bcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c36:	4b13      	ldr	r3, [pc, #76]	@ (8009c84 <prvCheckForValidListAndQueue+0x6c>)
 8009c38:	4a10      	ldr	r2, [pc, #64]	@ (8009c7c <prvCheckForValidListAndQueue+0x64>)
 8009c3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c3c:	4b12      	ldr	r3, [pc, #72]	@ (8009c88 <prvCheckForValidListAndQueue+0x70>)
 8009c3e:	4a10      	ldr	r2, [pc, #64]	@ (8009c80 <prvCheckForValidListAndQueue+0x68>)
 8009c40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c42:	2300      	movs	r3, #0
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	4b11      	ldr	r3, [pc, #68]	@ (8009c8c <prvCheckForValidListAndQueue+0x74>)
 8009c48:	4a11      	ldr	r2, [pc, #68]	@ (8009c90 <prvCheckForValidListAndQueue+0x78>)
 8009c4a:	2110      	movs	r1, #16
 8009c4c:	200a      	movs	r0, #10
 8009c4e:	f7fe f8dd 	bl	8007e0c <xQueueGenericCreateStatic>
 8009c52:	4603      	mov	r3, r0
 8009c54:	4a08      	ldr	r2, [pc, #32]	@ (8009c78 <prvCheckForValidListAndQueue+0x60>)
 8009c56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c58:	4b07      	ldr	r3, [pc, #28]	@ (8009c78 <prvCheckForValidListAndQueue+0x60>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d005      	beq.n	8009c6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c60:	4b05      	ldr	r3, [pc, #20]	@ (8009c78 <prvCheckForValidListAndQueue+0x60>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	490b      	ldr	r1, [pc, #44]	@ (8009c94 <prvCheckForValidListAndQueue+0x7c>)
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe fd20 	bl	80086ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c6c:	f000 f95c 	bl	8009f28 <vPortExitCritical>
}
 8009c70:	bf00      	nop
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20001634 	.word	0x20001634
 8009c7c:	20001604 	.word	0x20001604
 8009c80:	20001618 	.word	0x20001618
 8009c84:	2000162c 	.word	0x2000162c
 8009c88:	20001630 	.word	0x20001630
 8009c8c:	200016e0 	.word	0x200016e0
 8009c90:	20001640 	.word	0x20001640
 8009c94:	0800bb6c 	.word	0x0800bb6c

08009c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3b04      	subs	r3, #4
 8009ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3b04      	subs	r3, #4
 8009cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	f023 0201 	bic.w	r2, r3, #1
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3b04      	subs	r3, #4
 8009cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8009cfc <pxPortInitialiseStack+0x64>)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3b14      	subs	r3, #20
 8009cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3b04      	subs	r3, #4
 8009cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f06f 0202 	mvn.w	r2, #2
 8009ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3b20      	subs	r3, #32
 8009cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cee:	68fb      	ldr	r3, [r7, #12]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	08009d01 	.word	0x08009d01

08009d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d0a:	4b15      	ldr	r3, [pc, #84]	@ (8009d60 <prvTaskExitError+0x60>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d12:	d00d      	beq.n	8009d30 <prvTaskExitError+0x30>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d18:	b672      	cpsid	i
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	b662      	cpsie	i
 8009d28:	60fb      	str	r3, [r7, #12]
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <prvTaskExitError+0x2c>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d34:	b672      	cpsid	i
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	b662      	cpsie	i
 8009d44:	60bb      	str	r3, [r7, #8]
}
 8009d46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d48:	bf00      	nop
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0fc      	beq.n	8009d4a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d50:	bf00      	nop
 8009d52:	bf00      	nop
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	2000000c 	.word	0x2000000c
	...

08009d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d70:	4b07      	ldr	r3, [pc, #28]	@ (8009d90 <pxCurrentTCBConst2>)
 8009d72:	6819      	ldr	r1, [r3, #0]
 8009d74:	6808      	ldr	r0, [r1, #0]
 8009d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	f380 8809 	msr	PSP, r0
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8811 	msr	BASEPRI, r0
 8009d8a:	4770      	bx	lr
 8009d8c:	f3af 8000 	nop.w

08009d90 <pxCurrentTCBConst2>:
 8009d90:	20001104 	.word	0x20001104
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop

08009d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d98:	4808      	ldr	r0, [pc, #32]	@ (8009dbc <prvPortStartFirstTask+0x24>)
 8009d9a:	6800      	ldr	r0, [r0, #0]
 8009d9c:	6800      	ldr	r0, [r0, #0]
 8009d9e:	f380 8808 	msr	MSP, r0
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8814 	msr	CONTROL, r0
 8009daa:	b662      	cpsie	i
 8009dac:	b661      	cpsie	f
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	df00      	svc	0
 8009db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dba:	bf00      	nop
 8009dbc:	e000ed08 	.word	0xe000ed08

08009dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dc6:	4b37      	ldr	r3, [pc, #220]	@ (8009ea4 <xPortStartScheduler+0xe4>)
 8009dc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	22ff      	movs	r2, #255	@ 0xff
 8009dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	4b2f      	ldr	r3, [pc, #188]	@ (8009ea8 <xPortStartScheduler+0xe8>)
 8009dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dee:	4b2f      	ldr	r3, [pc, #188]	@ (8009eac <xPortStartScheduler+0xec>)
 8009df0:	2207      	movs	r2, #7
 8009df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009df4:	e009      	b.n	8009e0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009df6:	4b2d      	ldr	r3, [pc, #180]	@ (8009eac <xPortStartScheduler+0xec>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8009eac <xPortStartScheduler+0xec>)
 8009dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e12:	2b80      	cmp	r3, #128	@ 0x80
 8009e14:	d0ef      	beq.n	8009df6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e16:	4b25      	ldr	r3, [pc, #148]	@ (8009eac <xPortStartScheduler+0xec>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f1c3 0307 	rsb	r3, r3, #7
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d00d      	beq.n	8009e3e <xPortStartScheduler+0x7e>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e26:	b672      	cpsid	i
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	b662      	cpsie	i
 8009e36:	60bb      	str	r3, [r7, #8]
}
 8009e38:	bf00      	nop
 8009e3a:	bf00      	nop
 8009e3c:	e7fd      	b.n	8009e3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8009eac <xPortStartScheduler+0xec>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	021b      	lsls	r3, r3, #8
 8009e44:	4a19      	ldr	r2, [pc, #100]	@ (8009eac <xPortStartScheduler+0xec>)
 8009e46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e48:	4b18      	ldr	r3, [pc, #96]	@ (8009eac <xPortStartScheduler+0xec>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e50:	4a16      	ldr	r2, [pc, #88]	@ (8009eac <xPortStartScheduler+0xec>)
 8009e52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e5c:	4b14      	ldr	r3, [pc, #80]	@ (8009eb0 <xPortStartScheduler+0xf0>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a13      	ldr	r2, [pc, #76]	@ (8009eb0 <xPortStartScheduler+0xf0>)
 8009e62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e68:	4b11      	ldr	r3, [pc, #68]	@ (8009eb0 <xPortStartScheduler+0xf0>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a10      	ldr	r2, [pc, #64]	@ (8009eb0 <xPortStartScheduler+0xf0>)
 8009e6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009e72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e74:	f000 f8dc 	bl	800a030 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e78:	4b0e      	ldr	r3, [pc, #56]	@ (8009eb4 <xPortStartScheduler+0xf4>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e7e:	f000 f8fb 	bl	800a078 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e82:	4b0d      	ldr	r3, [pc, #52]	@ (8009eb8 <xPortStartScheduler+0xf8>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a0c      	ldr	r2, [pc, #48]	@ (8009eb8 <xPortStartScheduler+0xf8>)
 8009e88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009e8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e8e:	f7ff ff83 	bl	8009d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e92:	f7ff f835 	bl	8008f00 <vTaskSwitchContext>
	prvTaskExitError();
 8009e96:	f7ff ff33 	bl	8009d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	e000e400 	.word	0xe000e400
 8009ea8:	20001730 	.word	0x20001730
 8009eac:	20001734 	.word	0x20001734
 8009eb0:	e000ed20 	.word	0xe000ed20
 8009eb4:	2000000c 	.word	0x2000000c
 8009eb8:	e000ef34 	.word	0xe000ef34

08009ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec6:	b672      	cpsid	i
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	b662      	cpsie	i
 8009ed6:	607b      	str	r3, [r7, #4]
}
 8009ed8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009eda:	4b11      	ldr	r3, [pc, #68]	@ (8009f20 <vPortEnterCritical+0x64>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8009f20 <vPortEnterCritical+0x64>)
 8009ee2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8009f20 <vPortEnterCritical+0x64>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d112      	bne.n	8009f12 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009eec:	4b0d      	ldr	r3, [pc, #52]	@ (8009f24 <vPortEnterCritical+0x68>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00d      	beq.n	8009f12 <vPortEnterCritical+0x56>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efa:	b672      	cpsid	i
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	b662      	cpsie	i
 8009f0a:	603b      	str	r3, [r7, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	bf00      	nop
 8009f10:	e7fd      	b.n	8009f0e <vPortEnterCritical+0x52>
	}
}
 8009f12:	bf00      	nop
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	2000000c 	.word	0x2000000c
 8009f24:	e000ed04 	.word	0xe000ed04

08009f28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f2e:	4b13      	ldr	r3, [pc, #76]	@ (8009f7c <vPortExitCritical+0x54>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10d      	bne.n	8009f52 <vPortExitCritical+0x2a>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3a:	b672      	cpsid	i
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	b662      	cpsie	i
 8009f4a:	607b      	str	r3, [r7, #4]
}
 8009f4c:	bf00      	nop
 8009f4e:	bf00      	nop
 8009f50:	e7fd      	b.n	8009f4e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009f52:	4b0a      	ldr	r3, [pc, #40]	@ (8009f7c <vPortExitCritical+0x54>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	4a08      	ldr	r2, [pc, #32]	@ (8009f7c <vPortExitCritical+0x54>)
 8009f5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f5c:	4b07      	ldr	r3, [pc, #28]	@ (8009f7c <vPortExitCritical+0x54>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d105      	bne.n	8009f70 <vPortExitCritical+0x48>
 8009f64:	2300      	movs	r3, #0
 8009f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f383 8811 	msr	BASEPRI, r3
}
 8009f6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	2000000c 	.word	0x2000000c

08009f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f80:	f3ef 8009 	mrs	r0, PSP
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	4b15      	ldr	r3, [pc, #84]	@ (8009fe0 <pxCurrentTCBConst>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	f01e 0f10 	tst.w	lr, #16
 8009f90:	bf08      	it	eq
 8009f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009fa4:	b672      	cpsid	i
 8009fa6:	f380 8811 	msr	BASEPRI, r0
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	b662      	cpsie	i
 8009fb4:	f7fe ffa4 	bl	8008f00 <vTaskSwitchContext>
 8009fb8:	f04f 0000 	mov.w	r0, #0
 8009fbc:	f380 8811 	msr	BASEPRI, r0
 8009fc0:	bc09      	pop	{r0, r3}
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	6808      	ldr	r0, [r1, #0]
 8009fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	f01e 0f10 	tst.w	lr, #16
 8009fce:	bf08      	it	eq
 8009fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fd4:	f380 8809 	msr	PSP, r0
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop

08009fe0 <pxCurrentTCBConst>:
 8009fe0:	20001104 	.word	0x20001104
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff2:	b672      	cpsid	i
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	b662      	cpsie	i
 800a002:	607b      	str	r3, [r7, #4]
}
 800a004:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a006:	f7fe febf 	bl	8008d88 <xTaskIncrementTick>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d003      	beq.n	800a018 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a010:	4b06      	ldr	r3, [pc, #24]	@ (800a02c <xPortSysTickHandler+0x44>)
 800a012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	2300      	movs	r3, #0
 800a01a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	f383 8811 	msr	BASEPRI, r3
}
 800a022:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	e000ed04 	.word	0xe000ed04

0800a030 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a030:	b480      	push	{r7}
 800a032:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a034:	4b0b      	ldr	r3, [pc, #44]	@ (800a064 <vPortSetupTimerInterrupt+0x34>)
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a03a:	4b0b      	ldr	r3, [pc, #44]	@ (800a068 <vPortSetupTimerInterrupt+0x38>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a040:	4b0a      	ldr	r3, [pc, #40]	@ (800a06c <vPortSetupTimerInterrupt+0x3c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a0a      	ldr	r2, [pc, #40]	@ (800a070 <vPortSetupTimerInterrupt+0x40>)
 800a046:	fba2 2303 	umull	r2, r3, r2, r3
 800a04a:	099b      	lsrs	r3, r3, #6
 800a04c:	4a09      	ldr	r2, [pc, #36]	@ (800a074 <vPortSetupTimerInterrupt+0x44>)
 800a04e:	3b01      	subs	r3, #1
 800a050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a052:	4b04      	ldr	r3, [pc, #16]	@ (800a064 <vPortSetupTimerInterrupt+0x34>)
 800a054:	2207      	movs	r2, #7
 800a056:	601a      	str	r2, [r3, #0]
}
 800a058:	bf00      	nop
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	e000e010 	.word	0xe000e010
 800a068:	e000e018 	.word	0xe000e018
 800a06c:	20000000 	.word	0x20000000
 800a070:	10624dd3 	.word	0x10624dd3
 800a074:	e000e014 	.word	0xe000e014

0800a078 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a078:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a088 <vPortEnableVFP+0x10>
 800a07c:	6801      	ldr	r1, [r0, #0]
 800a07e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a082:	6001      	str	r1, [r0, #0]
 800a084:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a086:	bf00      	nop
 800a088:	e000ed88 	.word	0xe000ed88

0800a08c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a092:	f3ef 8305 	mrs	r3, IPSR
 800a096:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2b0f      	cmp	r3, #15
 800a09c:	d917      	bls.n	800a0ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a09e:	4a1a      	ldr	r2, [pc, #104]	@ (800a108 <vPortValidateInterruptPriority+0x7c>)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0a8:	4b18      	ldr	r3, [pc, #96]	@ (800a10c <vPortValidateInterruptPriority+0x80>)
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	7afa      	ldrb	r2, [r7, #11]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d20d      	bcs.n	800a0ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	b672      	cpsid	i
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	b662      	cpsie	i
 800a0c6:	607b      	str	r3, [r7, #4]
}
 800a0c8:	bf00      	nop
 800a0ca:	bf00      	nop
 800a0cc:	e7fd      	b.n	800a0ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0ce:	4b10      	ldr	r3, [pc, #64]	@ (800a110 <vPortValidateInterruptPriority+0x84>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a114 <vPortValidateInterruptPriority+0x88>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d90d      	bls.n	800a0fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e2:	b672      	cpsid	i
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	b662      	cpsie	i
 800a0f2:	603b      	str	r3, [r7, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop
 800a0f8:	e7fd      	b.n	800a0f6 <vPortValidateInterruptPriority+0x6a>
	}
 800a0fa:	bf00      	nop
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	e000e3f0 	.word	0xe000e3f0
 800a10c:	20001730 	.word	0x20001730
 800a110:	e000ed0c 	.word	0xe000ed0c
 800a114:	20001734 	.word	0x20001734

0800a118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08a      	sub	sp, #40	@ 0x28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a120:	2300      	movs	r3, #0
 800a122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a124:	f7fe fd72 	bl	8008c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a128:	4b5d      	ldr	r3, [pc, #372]	@ (800a2a0 <pvPortMalloc+0x188>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a130:	f000 f920 	bl	800a374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a134:	4b5b      	ldr	r3, [pc, #364]	@ (800a2a4 <pvPortMalloc+0x18c>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4013      	ands	r3, r2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f040 8094 	bne.w	800a26a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d020      	beq.n	800a18a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a148:	2208      	movs	r2, #8
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4413      	add	r3, r2
 800a14e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f003 0307 	and.w	r3, r3, #7
 800a156:	2b00      	cmp	r3, #0
 800a158:	d017      	beq.n	800a18a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f023 0307 	bic.w	r3, r3, #7
 800a160:	3308      	adds	r3, #8
 800a162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00d      	beq.n	800a18a <pvPortMalloc+0x72>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	b672      	cpsid	i
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	b662      	cpsie	i
 800a182:	617b      	str	r3, [r7, #20]
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	e7fd      	b.n	800a186 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d06c      	beq.n	800a26a <pvPortMalloc+0x152>
 800a190:	4b45      	ldr	r3, [pc, #276]	@ (800a2a8 <pvPortMalloc+0x190>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	429a      	cmp	r2, r3
 800a198:	d867      	bhi.n	800a26a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a19a:	4b44      	ldr	r3, [pc, #272]	@ (800a2ac <pvPortMalloc+0x194>)
 800a19c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a19e:	4b43      	ldr	r3, [pc, #268]	@ (800a2ac <pvPortMalloc+0x194>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1a4:	e004      	b.n	800a1b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d903      	bls.n	800a1c2 <pvPortMalloc+0xaa>
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1f1      	bne.n	800a1a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1c2:	4b37      	ldr	r3, [pc, #220]	@ (800a2a0 <pvPortMalloc+0x188>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d04e      	beq.n	800a26a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2208      	movs	r2, #8
 800a1d2:	4413      	add	r3, r2
 800a1d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	1ad2      	subs	r2, r2, r3
 800a1e6:	2308      	movs	r3, #8
 800a1e8:	005b      	lsls	r3, r3, #1
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d922      	bls.n	800a234 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f003 0307 	and.w	r3, r3, #7
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00d      	beq.n	800a21c <pvPortMalloc+0x104>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a204:	b672      	cpsid	i
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	b662      	cpsie	i
 800a214:	613b      	str	r3, [r7, #16]
}
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	e7fd      	b.n	800a218 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	1ad2      	subs	r2, r2, r3
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a22e:	69b8      	ldr	r0, [r7, #24]
 800a230:	f000 f902 	bl	800a438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a234:	4b1c      	ldr	r3, [pc, #112]	@ (800a2a8 <pvPortMalloc+0x190>)
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	4a1a      	ldr	r2, [pc, #104]	@ (800a2a8 <pvPortMalloc+0x190>)
 800a240:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a242:	4b19      	ldr	r3, [pc, #100]	@ (800a2a8 <pvPortMalloc+0x190>)
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b0 <pvPortMalloc+0x198>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d203      	bcs.n	800a256 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a24e:	4b16      	ldr	r3, [pc, #88]	@ (800a2a8 <pvPortMalloc+0x190>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a17      	ldr	r2, [pc, #92]	@ (800a2b0 <pvPortMalloc+0x198>)
 800a254:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	4b12      	ldr	r3, [pc, #72]	@ (800a2a4 <pvPortMalloc+0x18c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	431a      	orrs	r2, r3
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a266:	2200      	movs	r2, #0
 800a268:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a26a:	f7fe fcdd 	bl	8008c28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	f003 0307 	and.w	r3, r3, #7
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00d      	beq.n	800a294 <pvPortMalloc+0x17c>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27c:	b672      	cpsid	i
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	b662      	cpsie	i
 800a28c:	60fb      	str	r3, [r7, #12]
}
 800a28e:	bf00      	nop
 800a290:	bf00      	nop
 800a292:	e7fd      	b.n	800a290 <pvPortMalloc+0x178>
	return pvReturn;
 800a294:	69fb      	ldr	r3, [r7, #28]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3728      	adds	r7, #40	@ 0x28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20005340 	.word	0x20005340
 800a2a4:	2000534c 	.word	0x2000534c
 800a2a8:	20005344 	.word	0x20005344
 800a2ac:	20005338 	.word	0x20005338
 800a2b0:	20005348 	.word	0x20005348

0800a2b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d04e      	beq.n	800a364 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2c6:	2308      	movs	r3, #8
 800a2c8:	425b      	negs	r3, r3
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	4b24      	ldr	r3, [pc, #144]	@ (800a36c <vPortFree+0xb8>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10d      	bne.n	800a2fe <vPortFree+0x4a>
	__asm volatile
 800a2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e6:	b672      	cpsid	i
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	b662      	cpsie	i
 800a2f6:	60fb      	str	r3, [r7, #12]
}
 800a2f8:	bf00      	nop
 800a2fa:	bf00      	nop
 800a2fc:	e7fd      	b.n	800a2fa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00d      	beq.n	800a322 <vPortFree+0x6e>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	b672      	cpsid	i
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	b662      	cpsie	i
 800a31a:	60bb      	str	r3, [r7, #8]
}
 800a31c:	bf00      	nop
 800a31e:	bf00      	nop
 800a320:	e7fd      	b.n	800a31e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	4b11      	ldr	r3, [pc, #68]	@ (800a36c <vPortFree+0xb8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4013      	ands	r3, r2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d019      	beq.n	800a364 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d115      	bne.n	800a364 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <vPortFree+0xb8>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	43db      	mvns	r3, r3
 800a342:	401a      	ands	r2, r3
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a348:	f7fe fc60 	bl	8008c0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	4b07      	ldr	r3, [pc, #28]	@ (800a370 <vPortFree+0xbc>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4413      	add	r3, r2
 800a356:	4a06      	ldr	r2, [pc, #24]	@ (800a370 <vPortFree+0xbc>)
 800a358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a35a:	6938      	ldr	r0, [r7, #16]
 800a35c:	f000 f86c 	bl	800a438 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a360:	f7fe fc62 	bl	8008c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a364:	bf00      	nop
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	2000534c 	.word	0x2000534c
 800a370:	20005344 	.word	0x20005344

0800a374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a37a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a380:	4b27      	ldr	r3, [pc, #156]	@ (800a420 <prvHeapInit+0xac>)
 800a382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00c      	beq.n	800a3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3307      	adds	r3, #7
 800a392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	4a1f      	ldr	r2, [pc, #124]	@ (800a420 <prvHeapInit+0xac>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a424 <prvHeapInit+0xb0>)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3b2:	4b1c      	ldr	r3, [pc, #112]	@ (800a424 <prvHeapInit+0xb0>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0307 	bic.w	r3, r3, #7
 800a3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4a15      	ldr	r2, [pc, #84]	@ (800a428 <prvHeapInit+0xb4>)
 800a3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3d6:	4b14      	ldr	r3, [pc, #80]	@ (800a428 <prvHeapInit+0xb4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3de:	4b12      	ldr	r3, [pc, #72]	@ (800a428 <prvHeapInit+0xb4>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a428 <prvHeapInit+0xb4>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4a0a      	ldr	r2, [pc, #40]	@ (800a42c <prvHeapInit+0xb8>)
 800a402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4a09      	ldr	r2, [pc, #36]	@ (800a430 <prvHeapInit+0xbc>)
 800a40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a40c:	4b09      	ldr	r3, [pc, #36]	@ (800a434 <prvHeapInit+0xc0>)
 800a40e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a412:	601a      	str	r2, [r3, #0]
}
 800a414:	bf00      	nop
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	20001738 	.word	0x20001738
 800a424:	20005338 	.word	0x20005338
 800a428:	20005340 	.word	0x20005340
 800a42c:	20005348 	.word	0x20005348
 800a430:	20005344 	.word	0x20005344
 800a434:	2000534c 	.word	0x2000534c

0800a438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a440:	4b28      	ldr	r3, [pc, #160]	@ (800a4e4 <prvInsertBlockIntoFreeList+0xac>)
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	e002      	b.n	800a44c <prvInsertBlockIntoFreeList+0x14>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	429a      	cmp	r2, r3
 800a454:	d8f7      	bhi.n	800a446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	4413      	add	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d108      	bne.n	800a47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	441a      	add	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	441a      	add	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d118      	bne.n	800a4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	4b15      	ldr	r3, [pc, #84]	@ (800a4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d00d      	beq.n	800a4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	441a      	add	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	e008      	b.n	800a4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	e003      	b.n	800a4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d002      	beq.n	800a4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4d6:	bf00      	nop
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	20005338 	.word	0x20005338
 800a4e8:	20005340 	.word	0x20005340

0800a4ec <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fc81 	bl	800ae00 <malloc>
 800a4fe:	4603      	mov	r3, r0
 800a500:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 800a502:	68fb      	ldr	r3, [r7, #12]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00b      	beq.n	800a532 <ATC_Free+0x26>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d007      	beq.n	800a532 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fc72 	bl	800ae10 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]
  }
}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	8a9b      	ldrh	r3, [r3, #20]
 800a550:	461a      	mov	r2, r3
 800a552:	2100      	movs	r1, #0
 800a554:	f000 fdf0 	bl	800b138 <memset>
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	4613      	mov	r3, r2
 800a56c:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 800a56e:	2300      	movs	r3, #0
 800a570:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	88fa      	ldrh	r2, [r7, #6]
 800a576:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	88fa      	ldrh	r2, [r7, #6]
 800a57e:	68b9      	ldr	r1, [r7, #8]
 800a580:	4618      	mov	r0, r3
 800a582:	f7fb fabb 	bl	8005afc <HAL_UART_Transmit_DMA>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 800a58c:	2301      	movs	r3, #1
 800a58e:	75fb      	strb	r3, [r7, #23]
 800a590:	e000      	b.n	800a594 <ATC_TxRaw+0x34>
      break;
 800a592:	bf00      	nop

  } while (0);

  return answer;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fb ff5e 	bl	800646c <HAL_UART_GetState>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b21      	cmp	r3, #33	@ 0x21
 800a5b4:	d007      	beq.n	800a5c6 <ATC_TxBusy+0x28>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fb ff56 	bl	800646c <HAL_UART_GetState>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b23      	cmp	r3, #35	@ 0x23
 800a5c4:	d101      	bne.n	800a5ca <ATC_TxBusy+0x2c>
  {
    return true;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e000      	b.n	800a5cc <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800a5ca:	2300      	movs	r3, #0
  }
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 800a5e2:	f7f7 fe6f 	bl	80022c4 <HAL_GetTick>
 800a5e6:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	f000 fbf9 	bl	800ade0 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fb ff3a 	bl	800646c <HAL_UART_GetState>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b22      	cmp	r3, #34	@ 0x22
 800a5fc:	d007      	beq.n	800a60e <ATC_TxWait+0x3a>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	f7fb ff32 	bl	800646c <HAL_UART_GetState>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	d102      	bne.n	800a614 <ATC_TxWait+0x40>
    {
      answer = true;
 800a60e:	2301      	movs	r3, #1
 800a610:	73fb      	strb	r3, [r7, #15]
      break;
 800a612:	e01c      	b.n	800a64e <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fb ff27 	bl	800646c <HAL_UART_GetState>
 800a61e:	4603      	mov	r3, r0
 800a620:	2be0      	cmp	r3, #224	@ 0xe0
 800a622:	d014      	beq.n	800a64e <ATC_TxWait+0x7a>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fb ff1f 	bl	800646c <HAL_UART_GetState>
 800a62e:	4603      	mov	r3, r0
 800a630:	2ba0      	cmp	r3, #160	@ 0xa0
 800a632:	d00c      	beq.n	800a64e <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800a634:	f7f7 fe46 	bl	80022c4 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d8d1      	bhi.n	800a5e8 <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fb fad3 	bl	8005bf4 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	8b1b      	ldrh	r3, [r3, #24]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d024      	beq.n	800a6b2 <ATC_CheckEvents+0x5a>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800a668:	2300      	movs	r3, #0
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	e019      	b.n	800a6a2 <ATC_CheckEvents+0x4a>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	68da      	ldr	r2, [r3, #12]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	00db      	lsls	r3, r3, #3
 800a67a:	4413      	add	r3, r2
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4619      	mov	r1, r3
 800a680:	f000 fd94 	bl	800b1ac <strstr>
 800a684:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d007      	beq.n	800a69c <ATC_CheckEvents+0x44>
      {
        hAtc->psEvents[ev].EventCallback(found);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68da      	ldr	r2, [r3, #12]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	00db      	lsls	r3, r3, #3
 800a694:	4413      	add	r3, r2
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	68b8      	ldr	r0, [r7, #8]
 800a69a:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	60fb      	str	r3, [r7, #12]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d3e0      	bcc.n	800a66e <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff ff44 	bl	800a53a <ATC_RxFlush>
  }
}
 800a6b2:	bf00      	nop
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	8b1b      	ldrh	r3, [r3, #24]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d023      	beq.n	800a718 <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	81bb      	strh	r3, [r7, #12]
 800a6d4:	e01b      	b.n	800a70e <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a6da:	89ba      	ldrh	r2, [r7, #12]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	320a      	adds	r2, #10
 800a6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	f000 fd61 	bl	800b1ac <strstr>
 800a6ea:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00a      	beq.n	800a708 <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 800a6fe:	89bb      	ldrh	r3, [r7, #12]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	3301      	adds	r3, #1
 800a704:	73fb      	strb	r3, [r7, #15]
        break;
 800a706:	e007      	b.n	800a718 <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800a708:	89bb      	ldrh	r3, [r7, #12]
 800a70a:	3301      	adds	r3, #1
 800a70c:	81bb      	strh	r3, [r7, #12]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	8adb      	ldrh	r3, [r3, #22]
 800a712:	89ba      	ldrh	r2, [r7, #12]
 800a714:	429a      	cmp	r2, r3
 800a716:	d3de      	bcc.n	800a6d6 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 800a718:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fb feb0 	bl	8006494 <HAL_UART_GetError>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d01f      	beq.n	800a77a <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f04f 32ff 	mov.w	r2, #4294967295
 800a744:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fb faba 	bl	8005cc4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6818      	ldr	r0, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	69d9      	ldr	r1, [r3, #28]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	8a9b      	ldrh	r3, [r3, #20]
 800a75c:	461a      	mov	r2, r3
 800a75e:	f7fc fd78 	bl	8007252 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 0208 	bic.w	r2, r2, #8
 800a778:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fb fe74 	bl	800646c <HAL_UART_GetState>
 800a784:	4603      	mov	r3, r0
 800a786:	2b22      	cmp	r3, #34	@ 0x22
 800a788:	d027      	beq.n	800a7da <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fb fe6c 	bl	800646c <HAL_UART_GetState>
 800a794:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800a796:	2b23      	cmp	r3, #35	@ 0x23
 800a798:	d01f      	beq.n	800a7da <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a4:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fb fa8a 	bl	8005cc4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6818      	ldr	r0, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	69d9      	ldr	r1, [r3, #28]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	8a9b      	ldrh	r3, [r3, #20]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	f7fc fd48 	bl	8007252 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f022 0208 	bic.w	r2, r2, #8
 800a7d8:	601a      	str	r2, [r3, #0]
  }
}
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b086      	sub	sp, #24
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	60f8      	str	r0, [r7, #12]
 800a7ea:	60b9      	str	r1, [r7, #8]
 800a7ec:	603b      	str	r3, [r7, #0]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d075      	beq.n	800a8e8 <ATC_Init+0x106>
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d072      	beq.n	800a8e8 <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800a802:	223c      	movs	r2, #60	@ 0x3c
 800a804:	2100      	movs	r1, #0
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 fc96 	bl	800b138 <memset>
    if (pName != NULL)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d006      	beq.n	800a820 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3304      	adds	r3, #4
 800a816:	2207      	movs	r2, #7
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 fcb3 	bl	800b186 <strncpy>
    }
    hAtc->hUart = hUart;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fe5f 	bl	800a4ec <ATC_Malloc>
 800a82e:	4602      	mov	r2, r0
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d04e      	beq.n	800a8da <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	88fa      	ldrh	r2, [r7, #6]
 800a842:	2100      	movs	r1, #0
 800a844:	4618      	mov	r0, r3
 800a846:	f000 fc77 	bl	800b138 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 800a84a:	88fb      	ldrh	r3, [r7, #6]
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff fe4d 	bl	800a4ec <ATC_Malloc>
 800a852:	4602      	mov	r2, r0
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d03e      	beq.n	800a8de <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a1b      	ldr	r3, [r3, #32]
 800a864:	88fa      	ldrh	r2, [r7, #6]
 800a866:	2100      	movs	r1, #0
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fc65 	bl	800b138 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 800a86e:	88fb      	ldrh	r3, [r7, #6]
 800a870:	4618      	mov	r0, r3
 800a872:	f7ff fe3b 	bl	800a4ec <ATC_Malloc>
 800a876:	4602      	mov	r2, r0
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	d02e      	beq.n	800a8e2 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a888:	88fa      	ldrh	r2, [r7, #6]
 800a88a:	2100      	movs	r1, #0
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fc53 	bl	800b138 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	88fa      	ldrh	r2, [r7, #6]
 800a896:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a2:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6818      	ldr	r0, [r3, #0]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	69d9      	ldr	r1, [r3, #28]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	8a9b      	ldrh	r3, [r3, #20]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	f7fc fcce 	bl	8007252 <HAL_UARTEx_ReceiveToIdle_DMA>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d114      	bne.n	800a8e6 <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f022 0208 	bic.w	r2, r2, #8
 800a8d2:	601a      	str	r2, [r3, #0]
    answer = true;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	75fb      	strb	r3, [r7, #23]
 800a8d8:	e006      	b.n	800a8e8 <ATC_Init+0x106>
      break;
 800a8da:	bf00      	nop
 800a8dc:	e004      	b.n	800a8e8 <ATC_Init+0x106>
      break;
 800a8de:	bf00      	nop
 800a8e0:	e002      	b.n	800a8e8 <ATC_Init+0x106>
      break;
 800a8e2:	bf00      	nop
 800a8e4:	e000      	b.n	800a8e8 <ATC_Init+0x106>
      break;
 800a8e6:	bf00      	nop

  } while (0);

  if (answer == false)
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ea:	f083 0301 	eor.w	r3, r3, #1
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d016      	beq.n	800a922 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	331c      	adds	r3, #28
 800a900:	4618      	mov	r0, r3
 800a902:	f7ff fe03 	bl	800a50c <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d004      	beq.n	800a918 <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3324      	adds	r3, #36	@ 0x24
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff fdfa 	bl	800a50c <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800a918:	223c      	movs	r2, #60	@ 0x3c
 800a91a:	2100      	movs	r1, #0
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 fc0b 	bl	800b138 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 800a922:	7dfb      	ldrb	r3, [r7, #23]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3718      	adds	r7, #24
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff fef4 	bl	800a722 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7ff fe8c 	bl	800a658 <ATC_CheckEvents>
}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800a948:	b590      	push	{r4, r7, lr}
 800a94a:	b08d      	sub	sp, #52	@ 0x34
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 800a956:	2300      	movs	r3, #0
 800a958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f7ff fe1f 	bl	800a59e <ATC_TxBusy>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 800a966:	f06f 0303 	mvn.w	r3, #3
 800a96a:	e0c8      	b.n	800aafe <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 800a96c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a970:	2b05      	cmp	r3, #5
 800a972:	d902      	bls.n	800a97a <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 800a974:	f06f 0304 	mvn.w	r3, #4
 800a978:	e0c1      	b.n	800aafe <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff fed1 	bl	800a722 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800a980:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a984:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800a986:	2300      	movs	r3, #0
 800a988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a98a:	e04b      	b.n	800aa24 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	1d1a      	adds	r2, r3, #4
 800a990:	617a      	str	r2, [r7, #20]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800a996:	69b8      	ldr	r0, [r7, #24]
 800a998:	f7f5 fc5c 	bl	8000254 <strlen>
 800a99c:	4603      	mov	r3, r0
 800a99e:	3301      	adds	r3, #1
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff fda3 	bl	800a4ec <ATC_Malloc>
 800a9a6:	4601      	mov	r1, r0
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9ac:	320a      	adds	r2, #10
 800a9ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9b6:	320a      	adds	r2, #10
 800a9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d119      	bne.n	800a9f4 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a9c6:	e00d      	b.n	800a9e4 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800a9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9cc:	330a      	adds	r3, #10
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff fd99 	bl	800a50c <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800a9da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9de:	3301      	adds	r3, #1
 800a9e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	dcec      	bgt.n	800a9c8 <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 800a9ee:	f06f 0302 	mvn.w	r3, #2
 800a9f2:	e084      	b.n	800aafe <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9f8:	320a      	adds	r2, #10
 800a9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fe:	69b9      	ldr	r1, [r7, #24]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 fc25 	bl	800b250 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa0a:	320a      	adds	r2, #10
 800aa0c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800aa10:	69b8      	ldr	r0, [r7, #24]
 800aa12:	f7f5 fc1f 	bl	8000254 <strlen>
 800aa16:	4603      	mov	r3, r0
 800aa18:	4423      	add	r3, r4
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800aa1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa20:	3301      	adds	r3, #1
 800aa22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa24:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800aa28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	dbae      	blt.n	800a98c <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7ff fd83 	bl	800a53a <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 800aa34:	68b8      	ldr	r0, [r7, #8]
 800aa36:	f7f5 fc0d 	bl	8000254 <strlen>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	461a      	mov	r2, r3
 800aa40:	68b9      	ldr	r1, [r7, #8]
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f7ff fd8c 	bl	800a560 <ATC_TxRaw>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f083 0301 	eor.w	r3, r3, #1
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d003      	beq.n	800aa5c <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 800aa54:	f04f 33ff 	mov.w	r3, #4294967295
 800aa58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800aa5a:	e00d      	b.n	800aa78 <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800aa5c:	6879      	ldr	r1, [r7, #4]
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff fdb8 	bl	800a5d4 <ATC_TxWait>
 800aa64:	4603      	mov	r3, r0
 800aa66:	f083 0301 	eor.w	r3, r3, #1
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 800aa70:	f06f 0301 	mvn.w	r3, #1
 800aa74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800aa76:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 800aa78:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d022      	beq.n	800aac6 <ATC_SendReceive+0x17e>
 800aa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d11f      	bne.n	800aac6 <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 800aa86:	f7f7 fc1d 	bl	80022c4 <HAL_GetTick>
 800aa8a:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800aa8c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800aa96:	e00e      	b.n	800aab6 <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 800aa98:	2001      	movs	r0, #1
 800aa9a:	f000 f9a1 	bl	800ade0 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800aa9e:	6839      	ldr	r1, [r7, #0]
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7ff fe0a 	bl	800a6ba <ATC_CheckResponse>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800aaaa:	7ffb      	ldrb	r3, [r7, #31]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 800aab0:	7ffb      	ldrb	r3, [r7, #31]
 800aab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800aab4:	e007      	b.n	800aac6 <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 800aab6:	f7f7 fc05 	bl	80022c4 <HAL_GetTick>
 800aaba:	4602      	mov	r2, r0
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d8e8      	bhi.n	800aa98 <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800aacc:	2300      	movs	r3, #0
 800aace:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aad2:	e00d      	b.n	800aaf0 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800aad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aad8:	330a      	adds	r3, #10
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7ff fd13 	bl	800a50c <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800aae6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aaea:	3301      	adds	r3, #1
 800aaec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aaf0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aaf4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d3eb      	bcc.n	800aad4 <ATC_SendReceive+0x18c>
  }
  return answer;
 800aafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3734      	adds	r7, #52	@ 0x34
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd90      	pop	{r4, r7, pc}

0800ab06 <ATC_Send>:
  * @param  TxTimeout: Timeout for sending the command.
  * @param  ... , it can use like printf format
  * @retval Response true or false.
  */
bool ATC_Send(ATC_HandleTypeDef *hAtc, const char *pCommand, uint32_t TxTimeout, ...)
{
 800ab06:	b40c      	push	{r2, r3}
 800ab08:	b590      	push	{r4, r7, lr}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800ab12:	2300      	movs	r3, #0
 800ab14:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (ATC_TxBusy(hAtc) == true)
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff fd41 	bl	800a59e <ATC_TxBusy>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d13c      	bne.n	800ab9c <ATC_Send+0x96>
    {
      break;
    }
    ATC_CheckErrors(hAtc);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff fdfd 	bl	800a722 <ATC_CheckErrors>
    va_list args;
    va_start(args, TxTimeout);
 800ab28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab2c:	60fb      	str	r3, [r7, #12]
    int len = vsnprintf((char*)hAtc->pTxBuff, hAtc->Size, pCommand, args);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a18      	ldr	r0, [r3, #32]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	8a9b      	ldrh	r3, [r3, #20]
 800ab36:	4619      	mov	r1, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	f000 faee 	bl	800b11c <vsniprintf>
 800ab40:	6138      	str	r0, [r7, #16]
    va_end(args);
    if ((len < 0) || (len > hAtc->Size))
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	db2e      	blt.n	800aba6 <ATC_Send+0xa0>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	8a9b      	ldrh	r3, [r3, #20]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	4293      	cmp	r3, r2
 800ab52:	dc28      	bgt.n	800aba6 <ATC_Send+0xa0>
    {
      break;
    }
    ATC_RxFlush(hAtc);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff fcf0 	bl	800a53a <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)hAtc->pTxBuff, strlen((char*)hAtc->pTxBuff)) == false)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a1c      	ldr	r4, [r3, #32]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7f5 fb76 	bl	8000254 <strlen>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	4621      	mov	r1, r4
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7ff fcf5 	bl	800a560 <ATC_TxRaw>
 800ab76:	4603      	mov	r3, r0
 800ab78:	f083 0301 	eor.w	r3, r3, #1
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10e      	bne.n	800aba0 <ATC_Send+0x9a>
    {
      break;
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800ab82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff fd25 	bl	800a5d4 <ATC_TxWait>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	f083 0301 	eor.w	r3, r3, #1
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d106      	bne.n	800aba4 <ATC_Send+0x9e>
    {
      break;
    }
    answer = true;
 800ab96:	2301      	movs	r3, #1
 800ab98:	75fb      	strb	r3, [r7, #23]
 800ab9a:	e004      	b.n	800aba6 <ATC_Send+0xa0>
      break;
 800ab9c:	bf00      	nop
 800ab9e:	e002      	b.n	800aba6 <ATC_Send+0xa0>
      break;
 800aba0:	bf00      	nop
 800aba2:	e000      	b.n	800aba6 <ATC_Send+0xa0>
      break;
 800aba4:	bf00      	nop

  } while (0);

  return answer;
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	371c      	adds	r7, #28
 800abac:	46bd      	mov	sp, r7
 800abae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800abb2:	b002      	add	sp, #8
 800abb4:	4770      	bx	lr

0800abb6 <ATC_Receive>:
  * @param  Items: Number of searching strings
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_Receive(ATC_HandleTypeDef *hAtc, char **ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800abb6:	b408      	push	{r3}
 800abb8:	b590      	push	{r4, r7, lr}
 800abba:	b08c      	sub	sp, #48	@ 0x30
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  int answer = ATC_RESP_NOT_FOUND;
 800abc4:	2300      	movs	r3, #0
 800abc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (Items > ATC_RESP_MAX)
 800abc8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800abcc:	2b05      	cmp	r3, #5
 800abce:	d902      	bls.n	800abd6 <ATC_Receive+0x20>
  {
    return ATC_RESP_ITEMS;
 800abd0:	f06f 0304 	mvn.w	r3, #4
 800abd4:	e099      	b.n	800ad0a <ATC_Receive+0x154>
  }
  ATC_CheckErrors(hAtc);
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7ff fda3 	bl	800a722 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800abdc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800abe0:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800abe2:	2300      	movs	r3, #0
 800abe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abe6:	e04b      	b.n	800ac80 <ATC_Receive+0xca>
  {
    char *arg = va_arg(args, char*);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	1d1a      	adds	r2, r3, #4
 800abec:	617a      	str	r2, [r7, #20]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800abf2:	69b8      	ldr	r0, [r7, #24]
 800abf4:	f7f5 fb2e 	bl	8000254 <strlen>
 800abf8:	4603      	mov	r3, r0
 800abfa:	3301      	adds	r3, #1
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff fc75 	bl	800a4ec <ATC_Malloc>
 800ac02:	4601      	mov	r1, r0
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac08:	320a      	adds	r2, #10
 800ac0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac12:	320a      	adds	r2, #10
 800ac14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d119      	bne.n	800ac50 <ATC_Receive+0x9a>
    {
      for (uint8_t j = 0; j < i; j++)
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac22:	e00d      	b.n	800ac40 <ATC_Receive+0x8a>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800ac24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac28:	330a      	adds	r3, #10
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	4413      	add	r3, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7ff fc6b 	bl	800a50c <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800ac36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac46:	429a      	cmp	r2, r3
 800ac48:	dcec      	bgt.n	800ac24 <ATC_Receive+0x6e>
      }
      return ATC_RESP_MEM_ERROR;
 800ac4a:	f06f 0302 	mvn.w	r3, #2
 800ac4e:	e05c      	b.n	800ad0a <ATC_Receive+0x154>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac54:	320a      	adds	r2, #10
 800ac56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5a:	69b9      	ldr	r1, [r7, #24]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 faf7 	bl	800b250 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac66:	320a      	adds	r2, #10
 800ac68:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800ac6c:	69b8      	ldr	r0, [r7, #24]
 800ac6e:	f7f5 faf1 	bl	8000254 <strlen>
 800ac72:	4603      	mov	r3, r0
 800ac74:	4423      	add	r3, r4
 800ac76:	2200      	movs	r2, #0
 800ac78:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800ac7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac80:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ac84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac86:	429a      	cmp	r2, r3
 800ac88:	dbae      	blt.n	800abe8 <ATC_Receive+0x32>
  }
  va_end(args);

  if (Items > 0)
 800ac8a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d01f      	beq.n	800acd2 <ATC_Receive+0x11c>
  {
    uint32_t start_time = HAL_GetTick();
 800ac92:	f7f7 fb17 	bl	80022c4 <HAL_GetTick>
 800ac96:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800ac98:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800aca2:	e00e      	b.n	800acc2 <ATC_Receive+0x10c>
    {
      ATC_Delay(1);
 800aca4:	2001      	movs	r0, #1
 800aca6:	f000 f89b 	bl	800ade0 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f7ff fd04 	bl	800a6ba <ATC_CheckResponse>
 800acb2:	4603      	mov	r3, r0
 800acb4:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800acb6:	7ffb      	ldrb	r3, [r7, #31]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <ATC_Receive+0x10c>
      {
        answer = found_index;
 800acbc:	7ffb      	ldrb	r3, [r7, #31]
 800acbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800acc0:	e007      	b.n	800acd2 <ATC_Receive+0x11c>
    while (HAL_GetTick() - start_time < RxTimeout)
 800acc2:	f7f7 faff 	bl	80022c4 <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d8e8      	bhi.n	800aca4 <ATC_Receive+0xee>
      }
    }
  }
  hAtc->RespCount = 0;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800acd8:	2300      	movs	r3, #0
 800acda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800acde:	e00d      	b.n	800acfc <ATC_Receive+0x146>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800ace0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ace4:	330a      	adds	r3, #10
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	4413      	add	r3, r2
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff fc0d 	bl	800a50c <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800acf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800acf6:	3301      	adds	r3, #1
 800acf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800acfc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ad00:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d3eb      	bcc.n	800ace0 <ATC_Receive+0x12a>
  }
  return answer;
 800ad08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3730      	adds	r7, #48	@ 0x30
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ad14:	b001      	add	sp, #4
 800ad16:	4770      	bx	lr

0800ad18 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 800ad24:	887a      	ldrh	r2, [r7, #2]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	8a9b      	ldrh	r3, [r3, #20]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	8b1b      	ldrh	r3, [r3, #24]
 800ad30:	1acb      	subs	r3, r1, r3
 800ad32:	429a      	cmp	r2, r3
 800ad34:	dd05      	ble.n	800ad42 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	8a9a      	ldrh	r2, [r3, #20]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	8b1b      	ldrh	r3, [r3, #24]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	8b12      	ldrh	r2, [r2, #24]
 800ad4a:	1898      	adds	r0, r3, r2
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	69db      	ldr	r3, [r3, #28]
 800ad50:	887a      	ldrh	r2, [r7, #2]
 800ad52:	4619      	mov	r1, r3
 800ad54:	f000 fa84 	bl	800b260 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	8b1a      	ldrh	r2, [r3, #24]
 800ad5c:	887b      	ldrh	r3, [r7, #2]
 800ad5e:	4413      	add	r3, r2
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	69d9      	ldr	r1, [r3, #28]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	8a9b      	ldrh	r3, [r3, #20]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f7fc fa6d 	bl	8007252 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10c      	bne.n	800ad98 <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 0208 	bic.w	r2, r2, #8
 800ad94:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 800ad96:	e01f      	b.n	800add8 <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f04f 32ff 	mov.w	r2, #4294967295
 800ada2:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fa ff8b 	bl	8005cc4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6818      	ldr	r0, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	69d9      	ldr	r1, [r3, #28]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	8a9b      	ldrh	r3, [r3, #20]
 800adba:	461a      	mov	r2, r3
 800adbc:	f7fc fa49 	bl	8007252 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 0208 	bic.w	r2, r2, #8
 800add6:	601a      	str	r2, [r3, #0]
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7f7 fa77 	bl	80022dc <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800adee:	bf00      	nop
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <atoi>:
 800adf6:	220a      	movs	r2, #10
 800adf8:	2100      	movs	r1, #0
 800adfa:	f000 b939 	b.w	800b070 <strtol>
	...

0800ae00 <malloc>:
 800ae00:	4b02      	ldr	r3, [pc, #8]	@ (800ae0c <malloc+0xc>)
 800ae02:	4601      	mov	r1, r0
 800ae04:	6818      	ldr	r0, [r3, #0]
 800ae06:	f000 b82d 	b.w	800ae64 <_malloc_r>
 800ae0a:	bf00      	nop
 800ae0c:	20000010 	.word	0x20000010

0800ae10 <free>:
 800ae10:	4b02      	ldr	r3, [pc, #8]	@ (800ae1c <free+0xc>)
 800ae12:	4601      	mov	r1, r0
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	f000 ba31 	b.w	800b27c <_free_r>
 800ae1a:	bf00      	nop
 800ae1c:	20000010 	.word	0x20000010

0800ae20 <sbrk_aligned>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	4e0f      	ldr	r6, [pc, #60]	@ (800ae60 <sbrk_aligned+0x40>)
 800ae24:	460c      	mov	r4, r1
 800ae26:	6831      	ldr	r1, [r6, #0]
 800ae28:	4605      	mov	r5, r0
 800ae2a:	b911      	cbnz	r1, 800ae32 <sbrk_aligned+0x12>
 800ae2c:	f000 f9d4 	bl	800b1d8 <_sbrk_r>
 800ae30:	6030      	str	r0, [r6, #0]
 800ae32:	4621      	mov	r1, r4
 800ae34:	4628      	mov	r0, r5
 800ae36:	f000 f9cf 	bl	800b1d8 <_sbrk_r>
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	d103      	bne.n	800ae46 <sbrk_aligned+0x26>
 800ae3e:	f04f 34ff 	mov.w	r4, #4294967295
 800ae42:	4620      	mov	r0, r4
 800ae44:	bd70      	pop	{r4, r5, r6, pc}
 800ae46:	1cc4      	adds	r4, r0, #3
 800ae48:	f024 0403 	bic.w	r4, r4, #3
 800ae4c:	42a0      	cmp	r0, r4
 800ae4e:	d0f8      	beq.n	800ae42 <sbrk_aligned+0x22>
 800ae50:	1a21      	subs	r1, r4, r0
 800ae52:	4628      	mov	r0, r5
 800ae54:	f000 f9c0 	bl	800b1d8 <_sbrk_r>
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d1f2      	bne.n	800ae42 <sbrk_aligned+0x22>
 800ae5c:	e7ef      	b.n	800ae3e <sbrk_aligned+0x1e>
 800ae5e:	bf00      	nop
 800ae60:	20005350 	.word	0x20005350

0800ae64 <_malloc_r>:
 800ae64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae68:	1ccd      	adds	r5, r1, #3
 800ae6a:	f025 0503 	bic.w	r5, r5, #3
 800ae6e:	3508      	adds	r5, #8
 800ae70:	2d0c      	cmp	r5, #12
 800ae72:	bf38      	it	cc
 800ae74:	250c      	movcc	r5, #12
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	4606      	mov	r6, r0
 800ae7a:	db01      	blt.n	800ae80 <_malloc_r+0x1c>
 800ae7c:	42a9      	cmp	r1, r5
 800ae7e:	d904      	bls.n	800ae8a <_malloc_r+0x26>
 800ae80:	230c      	movs	r3, #12
 800ae82:	6033      	str	r3, [r6, #0]
 800ae84:	2000      	movs	r0, #0
 800ae86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af60 <_malloc_r+0xfc>
 800ae8e:	f000 f869 	bl	800af64 <__malloc_lock>
 800ae92:	f8d8 3000 	ldr.w	r3, [r8]
 800ae96:	461c      	mov	r4, r3
 800ae98:	bb44      	cbnz	r4, 800aeec <_malloc_r+0x88>
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7ff ffbf 	bl	800ae20 <sbrk_aligned>
 800aea2:	1c43      	adds	r3, r0, #1
 800aea4:	4604      	mov	r4, r0
 800aea6:	d158      	bne.n	800af5a <_malloc_r+0xf6>
 800aea8:	f8d8 4000 	ldr.w	r4, [r8]
 800aeac:	4627      	mov	r7, r4
 800aeae:	2f00      	cmp	r7, #0
 800aeb0:	d143      	bne.n	800af3a <_malloc_r+0xd6>
 800aeb2:	2c00      	cmp	r4, #0
 800aeb4:	d04b      	beq.n	800af4e <_malloc_r+0xea>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	4639      	mov	r1, r7
 800aeba:	4630      	mov	r0, r6
 800aebc:	eb04 0903 	add.w	r9, r4, r3
 800aec0:	f000 f98a 	bl	800b1d8 <_sbrk_r>
 800aec4:	4581      	cmp	r9, r0
 800aec6:	d142      	bne.n	800af4e <_malloc_r+0xea>
 800aec8:	6821      	ldr	r1, [r4, #0]
 800aeca:	1a6d      	subs	r5, r5, r1
 800aecc:	4629      	mov	r1, r5
 800aece:	4630      	mov	r0, r6
 800aed0:	f7ff ffa6 	bl	800ae20 <sbrk_aligned>
 800aed4:	3001      	adds	r0, #1
 800aed6:	d03a      	beq.n	800af4e <_malloc_r+0xea>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	442b      	add	r3, r5
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	f8d8 3000 	ldr.w	r3, [r8]
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	bb62      	cbnz	r2, 800af40 <_malloc_r+0xdc>
 800aee6:	f8c8 7000 	str.w	r7, [r8]
 800aeea:	e00f      	b.n	800af0c <_malloc_r+0xa8>
 800aeec:	6822      	ldr	r2, [r4, #0]
 800aeee:	1b52      	subs	r2, r2, r5
 800aef0:	d420      	bmi.n	800af34 <_malloc_r+0xd0>
 800aef2:	2a0b      	cmp	r2, #11
 800aef4:	d917      	bls.n	800af26 <_malloc_r+0xc2>
 800aef6:	1961      	adds	r1, r4, r5
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	6025      	str	r5, [r4, #0]
 800aefc:	bf18      	it	ne
 800aefe:	6059      	strne	r1, [r3, #4]
 800af00:	6863      	ldr	r3, [r4, #4]
 800af02:	bf08      	it	eq
 800af04:	f8c8 1000 	streq.w	r1, [r8]
 800af08:	5162      	str	r2, [r4, r5]
 800af0a:	604b      	str	r3, [r1, #4]
 800af0c:	4630      	mov	r0, r6
 800af0e:	f000 f82f 	bl	800af70 <__malloc_unlock>
 800af12:	f104 000b 	add.w	r0, r4, #11
 800af16:	1d23      	adds	r3, r4, #4
 800af18:	f020 0007 	bic.w	r0, r0, #7
 800af1c:	1ac2      	subs	r2, r0, r3
 800af1e:	bf1c      	itt	ne
 800af20:	1a1b      	subne	r3, r3, r0
 800af22:	50a3      	strne	r3, [r4, r2]
 800af24:	e7af      	b.n	800ae86 <_malloc_r+0x22>
 800af26:	6862      	ldr	r2, [r4, #4]
 800af28:	42a3      	cmp	r3, r4
 800af2a:	bf0c      	ite	eq
 800af2c:	f8c8 2000 	streq.w	r2, [r8]
 800af30:	605a      	strne	r2, [r3, #4]
 800af32:	e7eb      	b.n	800af0c <_malloc_r+0xa8>
 800af34:	4623      	mov	r3, r4
 800af36:	6864      	ldr	r4, [r4, #4]
 800af38:	e7ae      	b.n	800ae98 <_malloc_r+0x34>
 800af3a:	463c      	mov	r4, r7
 800af3c:	687f      	ldr	r7, [r7, #4]
 800af3e:	e7b6      	b.n	800aeae <_malloc_r+0x4a>
 800af40:	461a      	mov	r2, r3
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	42a3      	cmp	r3, r4
 800af46:	d1fb      	bne.n	800af40 <_malloc_r+0xdc>
 800af48:	2300      	movs	r3, #0
 800af4a:	6053      	str	r3, [r2, #4]
 800af4c:	e7de      	b.n	800af0c <_malloc_r+0xa8>
 800af4e:	230c      	movs	r3, #12
 800af50:	6033      	str	r3, [r6, #0]
 800af52:	4630      	mov	r0, r6
 800af54:	f000 f80c 	bl	800af70 <__malloc_unlock>
 800af58:	e794      	b.n	800ae84 <_malloc_r+0x20>
 800af5a:	6005      	str	r5, [r0, #0]
 800af5c:	e7d6      	b.n	800af0c <_malloc_r+0xa8>
 800af5e:	bf00      	nop
 800af60:	20005354 	.word	0x20005354

0800af64 <__malloc_lock>:
 800af64:	4801      	ldr	r0, [pc, #4]	@ (800af6c <__malloc_lock+0x8>)
 800af66:	f000 b971 	b.w	800b24c <__retarget_lock_acquire_recursive>
 800af6a:	bf00      	nop
 800af6c:	20005494 	.word	0x20005494

0800af70 <__malloc_unlock>:
 800af70:	4801      	ldr	r0, [pc, #4]	@ (800af78 <__malloc_unlock+0x8>)
 800af72:	f000 b96c 	b.w	800b24e <__retarget_lock_release_recursive>
 800af76:	bf00      	nop
 800af78:	20005494 	.word	0x20005494

0800af7c <_strtol_l.constprop.0>:
 800af7c:	2b24      	cmp	r3, #36	@ 0x24
 800af7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af82:	4686      	mov	lr, r0
 800af84:	4690      	mov	r8, r2
 800af86:	d801      	bhi.n	800af8c <_strtol_l.constprop.0+0x10>
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d106      	bne.n	800af9a <_strtol_l.constprop.0+0x1e>
 800af8c:	f000 f934 	bl	800b1f8 <__errno>
 800af90:	2316      	movs	r3, #22
 800af92:	6003      	str	r3, [r0, #0]
 800af94:	2000      	movs	r0, #0
 800af96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af9a:	4834      	ldr	r0, [pc, #208]	@ (800b06c <_strtol_l.constprop.0+0xf0>)
 800af9c:	460d      	mov	r5, r1
 800af9e:	462a      	mov	r2, r5
 800afa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afa4:	5d06      	ldrb	r6, [r0, r4]
 800afa6:	f016 0608 	ands.w	r6, r6, #8
 800afaa:	d1f8      	bne.n	800af9e <_strtol_l.constprop.0+0x22>
 800afac:	2c2d      	cmp	r4, #45	@ 0x2d
 800afae:	d12d      	bne.n	800b00c <_strtol_l.constprop.0+0x90>
 800afb0:	782c      	ldrb	r4, [r5, #0]
 800afb2:	2601      	movs	r6, #1
 800afb4:	1c95      	adds	r5, r2, #2
 800afb6:	f033 0210 	bics.w	r2, r3, #16
 800afba:	d109      	bne.n	800afd0 <_strtol_l.constprop.0+0x54>
 800afbc:	2c30      	cmp	r4, #48	@ 0x30
 800afbe:	d12a      	bne.n	800b016 <_strtol_l.constprop.0+0x9a>
 800afc0:	782a      	ldrb	r2, [r5, #0]
 800afc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800afc6:	2a58      	cmp	r2, #88	@ 0x58
 800afc8:	d125      	bne.n	800b016 <_strtol_l.constprop.0+0x9a>
 800afca:	786c      	ldrb	r4, [r5, #1]
 800afcc:	2310      	movs	r3, #16
 800afce:	3502      	adds	r5, #2
 800afd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800afd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800afd8:	2200      	movs	r2, #0
 800afda:	fbbc f9f3 	udiv	r9, ip, r3
 800afde:	4610      	mov	r0, r2
 800afe0:	fb03 ca19 	mls	sl, r3, r9, ip
 800afe4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800afe8:	2f09      	cmp	r7, #9
 800afea:	d81b      	bhi.n	800b024 <_strtol_l.constprop.0+0xa8>
 800afec:	463c      	mov	r4, r7
 800afee:	42a3      	cmp	r3, r4
 800aff0:	dd27      	ble.n	800b042 <_strtol_l.constprop.0+0xc6>
 800aff2:	1c57      	adds	r7, r2, #1
 800aff4:	d007      	beq.n	800b006 <_strtol_l.constprop.0+0x8a>
 800aff6:	4581      	cmp	r9, r0
 800aff8:	d320      	bcc.n	800b03c <_strtol_l.constprop.0+0xc0>
 800affa:	d101      	bne.n	800b000 <_strtol_l.constprop.0+0x84>
 800affc:	45a2      	cmp	sl, r4
 800affe:	db1d      	blt.n	800b03c <_strtol_l.constprop.0+0xc0>
 800b000:	fb00 4003 	mla	r0, r0, r3, r4
 800b004:	2201      	movs	r2, #1
 800b006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b00a:	e7eb      	b.n	800afe4 <_strtol_l.constprop.0+0x68>
 800b00c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b00e:	bf04      	itt	eq
 800b010:	782c      	ldrbeq	r4, [r5, #0]
 800b012:	1c95      	addeq	r5, r2, #2
 800b014:	e7cf      	b.n	800afb6 <_strtol_l.constprop.0+0x3a>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1da      	bne.n	800afd0 <_strtol_l.constprop.0+0x54>
 800b01a:	2c30      	cmp	r4, #48	@ 0x30
 800b01c:	bf0c      	ite	eq
 800b01e:	2308      	moveq	r3, #8
 800b020:	230a      	movne	r3, #10
 800b022:	e7d5      	b.n	800afd0 <_strtol_l.constprop.0+0x54>
 800b024:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b028:	2f19      	cmp	r7, #25
 800b02a:	d801      	bhi.n	800b030 <_strtol_l.constprop.0+0xb4>
 800b02c:	3c37      	subs	r4, #55	@ 0x37
 800b02e:	e7de      	b.n	800afee <_strtol_l.constprop.0+0x72>
 800b030:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b034:	2f19      	cmp	r7, #25
 800b036:	d804      	bhi.n	800b042 <_strtol_l.constprop.0+0xc6>
 800b038:	3c57      	subs	r4, #87	@ 0x57
 800b03a:	e7d8      	b.n	800afee <_strtol_l.constprop.0+0x72>
 800b03c:	f04f 32ff 	mov.w	r2, #4294967295
 800b040:	e7e1      	b.n	800b006 <_strtol_l.constprop.0+0x8a>
 800b042:	1c53      	adds	r3, r2, #1
 800b044:	d108      	bne.n	800b058 <_strtol_l.constprop.0+0xdc>
 800b046:	2322      	movs	r3, #34	@ 0x22
 800b048:	f8ce 3000 	str.w	r3, [lr]
 800b04c:	4660      	mov	r0, ip
 800b04e:	f1b8 0f00 	cmp.w	r8, #0
 800b052:	d0a0      	beq.n	800af96 <_strtol_l.constprop.0+0x1a>
 800b054:	1e69      	subs	r1, r5, #1
 800b056:	e006      	b.n	800b066 <_strtol_l.constprop.0+0xea>
 800b058:	b106      	cbz	r6, 800b05c <_strtol_l.constprop.0+0xe0>
 800b05a:	4240      	negs	r0, r0
 800b05c:	f1b8 0f00 	cmp.w	r8, #0
 800b060:	d099      	beq.n	800af96 <_strtol_l.constprop.0+0x1a>
 800b062:	2a00      	cmp	r2, #0
 800b064:	d1f6      	bne.n	800b054 <_strtol_l.constprop.0+0xd8>
 800b066:	f8c8 1000 	str.w	r1, [r8]
 800b06a:	e794      	b.n	800af96 <_strtol_l.constprop.0+0x1a>
 800b06c:	0800bbdd 	.word	0x0800bbdd

0800b070 <strtol>:
 800b070:	4613      	mov	r3, r2
 800b072:	460a      	mov	r2, r1
 800b074:	4601      	mov	r1, r0
 800b076:	4802      	ldr	r0, [pc, #8]	@ (800b080 <strtol+0x10>)
 800b078:	6800      	ldr	r0, [r0, #0]
 800b07a:	f7ff bf7f 	b.w	800af7c <_strtol_l.constprop.0>
 800b07e:	bf00      	nop
 800b080:	20000010 	.word	0x20000010

0800b084 <siprintf>:
 800b084:	b40e      	push	{r1, r2, r3}
 800b086:	b500      	push	{lr}
 800b088:	b09c      	sub	sp, #112	@ 0x70
 800b08a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b08c:	9002      	str	r0, [sp, #8]
 800b08e:	9006      	str	r0, [sp, #24]
 800b090:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b094:	4809      	ldr	r0, [pc, #36]	@ (800b0bc <siprintf+0x38>)
 800b096:	9107      	str	r1, [sp, #28]
 800b098:	9104      	str	r1, [sp, #16]
 800b09a:	4909      	ldr	r1, [pc, #36]	@ (800b0c0 <siprintf+0x3c>)
 800b09c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a0:	9105      	str	r1, [sp, #20]
 800b0a2:	6800      	ldr	r0, [r0, #0]
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	a902      	add	r1, sp, #8
 800b0a8:	f000 f98e 	bl	800b3c8 <_svfiprintf_r>
 800b0ac:	9b02      	ldr	r3, [sp, #8]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	701a      	strb	r2, [r3, #0]
 800b0b2:	b01c      	add	sp, #112	@ 0x70
 800b0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0b8:	b003      	add	sp, #12
 800b0ba:	4770      	bx	lr
 800b0bc:	20000010 	.word	0x20000010
 800b0c0:	ffff0208 	.word	0xffff0208

0800b0c4 <_vsniprintf_r>:
 800b0c4:	b530      	push	{r4, r5, lr}
 800b0c6:	4614      	mov	r4, r2
 800b0c8:	2c00      	cmp	r4, #0
 800b0ca:	b09b      	sub	sp, #108	@ 0x6c
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	da05      	bge.n	800b0de <_vsniprintf_r+0x1a>
 800b0d2:	238b      	movs	r3, #139	@ 0x8b
 800b0d4:	6003      	str	r3, [r0, #0]
 800b0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0da:	b01b      	add	sp, #108	@ 0x6c
 800b0dc:	bd30      	pop	{r4, r5, pc}
 800b0de:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b0e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b0e6:	bf14      	ite	ne
 800b0e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0ec:	4623      	moveq	r3, r4
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	9305      	str	r3, [sp, #20]
 800b0f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0f6:	9100      	str	r1, [sp, #0]
 800b0f8:	9104      	str	r1, [sp, #16]
 800b0fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b0fe:	4669      	mov	r1, sp
 800b100:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b102:	f000 f961 	bl	800b3c8 <_svfiprintf_r>
 800b106:	1c43      	adds	r3, r0, #1
 800b108:	bfbc      	itt	lt
 800b10a:	238b      	movlt	r3, #139	@ 0x8b
 800b10c:	602b      	strlt	r3, [r5, #0]
 800b10e:	2c00      	cmp	r4, #0
 800b110:	d0e3      	beq.n	800b0da <_vsniprintf_r+0x16>
 800b112:	9b00      	ldr	r3, [sp, #0]
 800b114:	2200      	movs	r2, #0
 800b116:	701a      	strb	r2, [r3, #0]
 800b118:	e7df      	b.n	800b0da <_vsniprintf_r+0x16>
	...

0800b11c <vsniprintf>:
 800b11c:	b507      	push	{r0, r1, r2, lr}
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	4613      	mov	r3, r2
 800b122:	460a      	mov	r2, r1
 800b124:	4601      	mov	r1, r0
 800b126:	4803      	ldr	r0, [pc, #12]	@ (800b134 <vsniprintf+0x18>)
 800b128:	6800      	ldr	r0, [r0, #0]
 800b12a:	f7ff ffcb 	bl	800b0c4 <_vsniprintf_r>
 800b12e:	b003      	add	sp, #12
 800b130:	f85d fb04 	ldr.w	pc, [sp], #4
 800b134:	20000010 	.word	0x20000010

0800b138 <memset>:
 800b138:	4402      	add	r2, r0
 800b13a:	4603      	mov	r3, r0
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d100      	bne.n	800b142 <memset+0xa>
 800b140:	4770      	bx	lr
 800b142:	f803 1b01 	strb.w	r1, [r3], #1
 800b146:	e7f9      	b.n	800b13c <memset+0x4>

0800b148 <strchr>:
 800b148:	b2c9      	uxtb	r1, r1
 800b14a:	4603      	mov	r3, r0
 800b14c:	4618      	mov	r0, r3
 800b14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b152:	b112      	cbz	r2, 800b15a <strchr+0x12>
 800b154:	428a      	cmp	r2, r1
 800b156:	d1f9      	bne.n	800b14c <strchr+0x4>
 800b158:	4770      	bx	lr
 800b15a:	2900      	cmp	r1, #0
 800b15c:	bf18      	it	ne
 800b15e:	2000      	movne	r0, #0
 800b160:	4770      	bx	lr

0800b162 <strncmp>:
 800b162:	b510      	push	{r4, lr}
 800b164:	b16a      	cbz	r2, 800b182 <strncmp+0x20>
 800b166:	3901      	subs	r1, #1
 800b168:	1884      	adds	r4, r0, r2
 800b16a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b16e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b172:	429a      	cmp	r2, r3
 800b174:	d103      	bne.n	800b17e <strncmp+0x1c>
 800b176:	42a0      	cmp	r0, r4
 800b178:	d001      	beq.n	800b17e <strncmp+0x1c>
 800b17a:	2a00      	cmp	r2, #0
 800b17c:	d1f5      	bne.n	800b16a <strncmp+0x8>
 800b17e:	1ad0      	subs	r0, r2, r3
 800b180:	bd10      	pop	{r4, pc}
 800b182:	4610      	mov	r0, r2
 800b184:	e7fc      	b.n	800b180 <strncmp+0x1e>

0800b186 <strncpy>:
 800b186:	b510      	push	{r4, lr}
 800b188:	3901      	subs	r1, #1
 800b18a:	4603      	mov	r3, r0
 800b18c:	b132      	cbz	r2, 800b19c <strncpy+0x16>
 800b18e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b192:	f803 4b01 	strb.w	r4, [r3], #1
 800b196:	3a01      	subs	r2, #1
 800b198:	2c00      	cmp	r4, #0
 800b19a:	d1f7      	bne.n	800b18c <strncpy+0x6>
 800b19c:	441a      	add	r2, r3
 800b19e:	2100      	movs	r1, #0
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d100      	bne.n	800b1a6 <strncpy+0x20>
 800b1a4:	bd10      	pop	{r4, pc}
 800b1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1aa:	e7f9      	b.n	800b1a0 <strncpy+0x1a>

0800b1ac <strstr>:
 800b1ac:	780a      	ldrb	r2, [r1, #0]
 800b1ae:	b570      	push	{r4, r5, r6, lr}
 800b1b0:	b96a      	cbnz	r2, 800b1ce <strstr+0x22>
 800b1b2:	bd70      	pop	{r4, r5, r6, pc}
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d109      	bne.n	800b1cc <strstr+0x20>
 800b1b8:	460c      	mov	r4, r1
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0f6      	beq.n	800b1b2 <strstr+0x6>
 800b1c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b1c8:	429e      	cmp	r6, r3
 800b1ca:	d0f7      	beq.n	800b1bc <strstr+0x10>
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	7803      	ldrb	r3, [r0, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1ef      	bne.n	800b1b4 <strstr+0x8>
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	e7ec      	b.n	800b1b2 <strstr+0x6>

0800b1d8 <_sbrk_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4d06      	ldr	r5, [pc, #24]	@ (800b1f4 <_sbrk_r+0x1c>)
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	602b      	str	r3, [r5, #0]
 800b1e4:	f7f6 f87a 	bl	80012dc <_sbrk>
 800b1e8:	1c43      	adds	r3, r0, #1
 800b1ea:	d102      	bne.n	800b1f2 <_sbrk_r+0x1a>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	b103      	cbz	r3, 800b1f2 <_sbrk_r+0x1a>
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	bd38      	pop	{r3, r4, r5, pc}
 800b1f4:	20005490 	.word	0x20005490

0800b1f8 <__errno>:
 800b1f8:	4b01      	ldr	r3, [pc, #4]	@ (800b200 <__errno+0x8>)
 800b1fa:	6818      	ldr	r0, [r3, #0]
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	20000010 	.word	0x20000010

0800b204 <__libc_init_array>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	4d0d      	ldr	r5, [pc, #52]	@ (800b23c <__libc_init_array+0x38>)
 800b208:	4c0d      	ldr	r4, [pc, #52]	@ (800b240 <__libc_init_array+0x3c>)
 800b20a:	1b64      	subs	r4, r4, r5
 800b20c:	10a4      	asrs	r4, r4, #2
 800b20e:	2600      	movs	r6, #0
 800b210:	42a6      	cmp	r6, r4
 800b212:	d109      	bne.n	800b228 <__libc_init_array+0x24>
 800b214:	4d0b      	ldr	r5, [pc, #44]	@ (800b244 <__libc_init_array+0x40>)
 800b216:	4c0c      	ldr	r4, [pc, #48]	@ (800b248 <__libc_init_array+0x44>)
 800b218:	f000 fbb0 	bl	800b97c <_init>
 800b21c:	1b64      	subs	r4, r4, r5
 800b21e:	10a4      	asrs	r4, r4, #2
 800b220:	2600      	movs	r6, #0
 800b222:	42a6      	cmp	r6, r4
 800b224:	d105      	bne.n	800b232 <__libc_init_array+0x2e>
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	f855 3b04 	ldr.w	r3, [r5], #4
 800b22c:	4798      	blx	r3
 800b22e:	3601      	adds	r6, #1
 800b230:	e7ee      	b.n	800b210 <__libc_init_array+0xc>
 800b232:	f855 3b04 	ldr.w	r3, [r5], #4
 800b236:	4798      	blx	r3
 800b238:	3601      	adds	r6, #1
 800b23a:	e7f2      	b.n	800b222 <__libc_init_array+0x1e>
 800b23c:	0800bd18 	.word	0x0800bd18
 800b240:	0800bd18 	.word	0x0800bd18
 800b244:	0800bd18 	.word	0x0800bd18
 800b248:	0800bd1c 	.word	0x0800bd1c

0800b24c <__retarget_lock_acquire_recursive>:
 800b24c:	4770      	bx	lr

0800b24e <__retarget_lock_release_recursive>:
 800b24e:	4770      	bx	lr

0800b250 <strcpy>:
 800b250:	4603      	mov	r3, r0
 800b252:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b256:	f803 2b01 	strb.w	r2, [r3], #1
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	d1f9      	bne.n	800b252 <strcpy+0x2>
 800b25e:	4770      	bx	lr

0800b260 <memcpy>:
 800b260:	440a      	add	r2, r1
 800b262:	4291      	cmp	r1, r2
 800b264:	f100 33ff 	add.w	r3, r0, #4294967295
 800b268:	d100      	bne.n	800b26c <memcpy+0xc>
 800b26a:	4770      	bx	lr
 800b26c:	b510      	push	{r4, lr}
 800b26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b272:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b276:	4291      	cmp	r1, r2
 800b278:	d1f9      	bne.n	800b26e <memcpy+0xe>
 800b27a:	bd10      	pop	{r4, pc}

0800b27c <_free_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4605      	mov	r5, r0
 800b280:	2900      	cmp	r1, #0
 800b282:	d041      	beq.n	800b308 <_free_r+0x8c>
 800b284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b288:	1f0c      	subs	r4, r1, #4
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bfb8      	it	lt
 800b28e:	18e4      	addlt	r4, r4, r3
 800b290:	f7ff fe68 	bl	800af64 <__malloc_lock>
 800b294:	4a1d      	ldr	r2, [pc, #116]	@ (800b30c <_free_r+0x90>)
 800b296:	6813      	ldr	r3, [r2, #0]
 800b298:	b933      	cbnz	r3, 800b2a8 <_free_r+0x2c>
 800b29a:	6063      	str	r3, [r4, #4]
 800b29c:	6014      	str	r4, [r2, #0]
 800b29e:	4628      	mov	r0, r5
 800b2a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2a4:	f7ff be64 	b.w	800af70 <__malloc_unlock>
 800b2a8:	42a3      	cmp	r3, r4
 800b2aa:	d908      	bls.n	800b2be <_free_r+0x42>
 800b2ac:	6820      	ldr	r0, [r4, #0]
 800b2ae:	1821      	adds	r1, r4, r0
 800b2b0:	428b      	cmp	r3, r1
 800b2b2:	bf01      	itttt	eq
 800b2b4:	6819      	ldreq	r1, [r3, #0]
 800b2b6:	685b      	ldreq	r3, [r3, #4]
 800b2b8:	1809      	addeq	r1, r1, r0
 800b2ba:	6021      	streq	r1, [r4, #0]
 800b2bc:	e7ed      	b.n	800b29a <_free_r+0x1e>
 800b2be:	461a      	mov	r2, r3
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	b10b      	cbz	r3, 800b2c8 <_free_r+0x4c>
 800b2c4:	42a3      	cmp	r3, r4
 800b2c6:	d9fa      	bls.n	800b2be <_free_r+0x42>
 800b2c8:	6811      	ldr	r1, [r2, #0]
 800b2ca:	1850      	adds	r0, r2, r1
 800b2cc:	42a0      	cmp	r0, r4
 800b2ce:	d10b      	bne.n	800b2e8 <_free_r+0x6c>
 800b2d0:	6820      	ldr	r0, [r4, #0]
 800b2d2:	4401      	add	r1, r0
 800b2d4:	1850      	adds	r0, r2, r1
 800b2d6:	4283      	cmp	r3, r0
 800b2d8:	6011      	str	r1, [r2, #0]
 800b2da:	d1e0      	bne.n	800b29e <_free_r+0x22>
 800b2dc:	6818      	ldr	r0, [r3, #0]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	6053      	str	r3, [r2, #4]
 800b2e2:	4408      	add	r0, r1
 800b2e4:	6010      	str	r0, [r2, #0]
 800b2e6:	e7da      	b.n	800b29e <_free_r+0x22>
 800b2e8:	d902      	bls.n	800b2f0 <_free_r+0x74>
 800b2ea:	230c      	movs	r3, #12
 800b2ec:	602b      	str	r3, [r5, #0]
 800b2ee:	e7d6      	b.n	800b29e <_free_r+0x22>
 800b2f0:	6820      	ldr	r0, [r4, #0]
 800b2f2:	1821      	adds	r1, r4, r0
 800b2f4:	428b      	cmp	r3, r1
 800b2f6:	bf04      	itt	eq
 800b2f8:	6819      	ldreq	r1, [r3, #0]
 800b2fa:	685b      	ldreq	r3, [r3, #4]
 800b2fc:	6063      	str	r3, [r4, #4]
 800b2fe:	bf04      	itt	eq
 800b300:	1809      	addeq	r1, r1, r0
 800b302:	6021      	streq	r1, [r4, #0]
 800b304:	6054      	str	r4, [r2, #4]
 800b306:	e7ca      	b.n	800b29e <_free_r+0x22>
 800b308:	bd38      	pop	{r3, r4, r5, pc}
 800b30a:	bf00      	nop
 800b30c:	20005354 	.word	0x20005354

0800b310 <__ssputs_r>:
 800b310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b314:	688e      	ldr	r6, [r1, #8]
 800b316:	461f      	mov	r7, r3
 800b318:	42be      	cmp	r6, r7
 800b31a:	680b      	ldr	r3, [r1, #0]
 800b31c:	4682      	mov	sl, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	4690      	mov	r8, r2
 800b322:	d82d      	bhi.n	800b380 <__ssputs_r+0x70>
 800b324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b328:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b32c:	d026      	beq.n	800b37c <__ssputs_r+0x6c>
 800b32e:	6965      	ldr	r5, [r4, #20]
 800b330:	6909      	ldr	r1, [r1, #16]
 800b332:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b336:	eba3 0901 	sub.w	r9, r3, r1
 800b33a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b33e:	1c7b      	adds	r3, r7, #1
 800b340:	444b      	add	r3, r9
 800b342:	106d      	asrs	r5, r5, #1
 800b344:	429d      	cmp	r5, r3
 800b346:	bf38      	it	cc
 800b348:	461d      	movcc	r5, r3
 800b34a:	0553      	lsls	r3, r2, #21
 800b34c:	d527      	bpl.n	800b39e <__ssputs_r+0x8e>
 800b34e:	4629      	mov	r1, r5
 800b350:	f7ff fd88 	bl	800ae64 <_malloc_r>
 800b354:	4606      	mov	r6, r0
 800b356:	b360      	cbz	r0, 800b3b2 <__ssputs_r+0xa2>
 800b358:	6921      	ldr	r1, [r4, #16]
 800b35a:	464a      	mov	r2, r9
 800b35c:	f7ff ff80 	bl	800b260 <memcpy>
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	6126      	str	r6, [r4, #16]
 800b36e:	6165      	str	r5, [r4, #20]
 800b370:	444e      	add	r6, r9
 800b372:	eba5 0509 	sub.w	r5, r5, r9
 800b376:	6026      	str	r6, [r4, #0]
 800b378:	60a5      	str	r5, [r4, #8]
 800b37a:	463e      	mov	r6, r7
 800b37c:	42be      	cmp	r6, r7
 800b37e:	d900      	bls.n	800b382 <__ssputs_r+0x72>
 800b380:	463e      	mov	r6, r7
 800b382:	6820      	ldr	r0, [r4, #0]
 800b384:	4632      	mov	r2, r6
 800b386:	4641      	mov	r1, r8
 800b388:	f000 faa8 	bl	800b8dc <memmove>
 800b38c:	68a3      	ldr	r3, [r4, #8]
 800b38e:	1b9b      	subs	r3, r3, r6
 800b390:	60a3      	str	r3, [r4, #8]
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	4433      	add	r3, r6
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	2000      	movs	r0, #0
 800b39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b39e:	462a      	mov	r2, r5
 800b3a0:	f000 fab6 	bl	800b910 <_realloc_r>
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d1e0      	bne.n	800b36c <__ssputs_r+0x5c>
 800b3aa:	6921      	ldr	r1, [r4, #16]
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	f7ff ff65 	bl	800b27c <_free_r>
 800b3b2:	230c      	movs	r3, #12
 800b3b4:	f8ca 3000 	str.w	r3, [sl]
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3be:	81a3      	strh	r3, [r4, #12]
 800b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c4:	e7e9      	b.n	800b39a <__ssputs_r+0x8a>
	...

0800b3c8 <_svfiprintf_r>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	4698      	mov	r8, r3
 800b3ce:	898b      	ldrh	r3, [r1, #12]
 800b3d0:	061b      	lsls	r3, r3, #24
 800b3d2:	b09d      	sub	sp, #116	@ 0x74
 800b3d4:	4607      	mov	r7, r0
 800b3d6:	460d      	mov	r5, r1
 800b3d8:	4614      	mov	r4, r2
 800b3da:	d510      	bpl.n	800b3fe <_svfiprintf_r+0x36>
 800b3dc:	690b      	ldr	r3, [r1, #16]
 800b3de:	b973      	cbnz	r3, 800b3fe <_svfiprintf_r+0x36>
 800b3e0:	2140      	movs	r1, #64	@ 0x40
 800b3e2:	f7ff fd3f 	bl	800ae64 <_malloc_r>
 800b3e6:	6028      	str	r0, [r5, #0]
 800b3e8:	6128      	str	r0, [r5, #16]
 800b3ea:	b930      	cbnz	r0, 800b3fa <_svfiprintf_r+0x32>
 800b3ec:	230c      	movs	r3, #12
 800b3ee:	603b      	str	r3, [r7, #0]
 800b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f4:	b01d      	add	sp, #116	@ 0x74
 800b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fa:	2340      	movs	r3, #64	@ 0x40
 800b3fc:	616b      	str	r3, [r5, #20]
 800b3fe:	2300      	movs	r3, #0
 800b400:	9309      	str	r3, [sp, #36]	@ 0x24
 800b402:	2320      	movs	r3, #32
 800b404:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b408:	f8cd 800c 	str.w	r8, [sp, #12]
 800b40c:	2330      	movs	r3, #48	@ 0x30
 800b40e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b5ac <_svfiprintf_r+0x1e4>
 800b412:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b416:	f04f 0901 	mov.w	r9, #1
 800b41a:	4623      	mov	r3, r4
 800b41c:	469a      	mov	sl, r3
 800b41e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b422:	b10a      	cbz	r2, 800b428 <_svfiprintf_r+0x60>
 800b424:	2a25      	cmp	r2, #37	@ 0x25
 800b426:	d1f9      	bne.n	800b41c <_svfiprintf_r+0x54>
 800b428:	ebba 0b04 	subs.w	fp, sl, r4
 800b42c:	d00b      	beq.n	800b446 <_svfiprintf_r+0x7e>
 800b42e:	465b      	mov	r3, fp
 800b430:	4622      	mov	r2, r4
 800b432:	4629      	mov	r1, r5
 800b434:	4638      	mov	r0, r7
 800b436:	f7ff ff6b 	bl	800b310 <__ssputs_r>
 800b43a:	3001      	adds	r0, #1
 800b43c:	f000 80a7 	beq.w	800b58e <_svfiprintf_r+0x1c6>
 800b440:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b442:	445a      	add	r2, fp
 800b444:	9209      	str	r2, [sp, #36]	@ 0x24
 800b446:	f89a 3000 	ldrb.w	r3, [sl]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 809f 	beq.w	800b58e <_svfiprintf_r+0x1c6>
 800b450:	2300      	movs	r3, #0
 800b452:	f04f 32ff 	mov.w	r2, #4294967295
 800b456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b45a:	f10a 0a01 	add.w	sl, sl, #1
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	9307      	str	r3, [sp, #28]
 800b462:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b466:	931a      	str	r3, [sp, #104]	@ 0x68
 800b468:	4654      	mov	r4, sl
 800b46a:	2205      	movs	r2, #5
 800b46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b470:	484e      	ldr	r0, [pc, #312]	@ (800b5ac <_svfiprintf_r+0x1e4>)
 800b472:	f7f4 fefd 	bl	8000270 <memchr>
 800b476:	9a04      	ldr	r2, [sp, #16]
 800b478:	b9d8      	cbnz	r0, 800b4b2 <_svfiprintf_r+0xea>
 800b47a:	06d0      	lsls	r0, r2, #27
 800b47c:	bf44      	itt	mi
 800b47e:	2320      	movmi	r3, #32
 800b480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b484:	0711      	lsls	r1, r2, #28
 800b486:	bf44      	itt	mi
 800b488:	232b      	movmi	r3, #43	@ 0x2b
 800b48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b48e:	f89a 3000 	ldrb.w	r3, [sl]
 800b492:	2b2a      	cmp	r3, #42	@ 0x2a
 800b494:	d015      	beq.n	800b4c2 <_svfiprintf_r+0xfa>
 800b496:	9a07      	ldr	r2, [sp, #28]
 800b498:	4654      	mov	r4, sl
 800b49a:	2000      	movs	r0, #0
 800b49c:	f04f 0c0a 	mov.w	ip, #10
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4a6:	3b30      	subs	r3, #48	@ 0x30
 800b4a8:	2b09      	cmp	r3, #9
 800b4aa:	d94b      	bls.n	800b544 <_svfiprintf_r+0x17c>
 800b4ac:	b1b0      	cbz	r0, 800b4dc <_svfiprintf_r+0x114>
 800b4ae:	9207      	str	r2, [sp, #28]
 800b4b0:	e014      	b.n	800b4dc <_svfiprintf_r+0x114>
 800b4b2:	eba0 0308 	sub.w	r3, r0, r8
 800b4b6:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	46a2      	mov	sl, r4
 800b4c0:	e7d2      	b.n	800b468 <_svfiprintf_r+0xa0>
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	1d19      	adds	r1, r3, #4
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	9103      	str	r1, [sp, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	bfbb      	ittet	lt
 800b4ce:	425b      	neglt	r3, r3
 800b4d0:	f042 0202 	orrlt.w	r2, r2, #2
 800b4d4:	9307      	strge	r3, [sp, #28]
 800b4d6:	9307      	strlt	r3, [sp, #28]
 800b4d8:	bfb8      	it	lt
 800b4da:	9204      	strlt	r2, [sp, #16]
 800b4dc:	7823      	ldrb	r3, [r4, #0]
 800b4de:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4e0:	d10a      	bne.n	800b4f8 <_svfiprintf_r+0x130>
 800b4e2:	7863      	ldrb	r3, [r4, #1]
 800b4e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4e6:	d132      	bne.n	800b54e <_svfiprintf_r+0x186>
 800b4e8:	9b03      	ldr	r3, [sp, #12]
 800b4ea:	1d1a      	adds	r2, r3, #4
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	9203      	str	r2, [sp, #12]
 800b4f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4f4:	3402      	adds	r4, #2
 800b4f6:	9305      	str	r3, [sp, #20]
 800b4f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b5bc <_svfiprintf_r+0x1f4>
 800b4fc:	7821      	ldrb	r1, [r4, #0]
 800b4fe:	2203      	movs	r2, #3
 800b500:	4650      	mov	r0, sl
 800b502:	f7f4 feb5 	bl	8000270 <memchr>
 800b506:	b138      	cbz	r0, 800b518 <_svfiprintf_r+0x150>
 800b508:	9b04      	ldr	r3, [sp, #16]
 800b50a:	eba0 000a 	sub.w	r0, r0, sl
 800b50e:	2240      	movs	r2, #64	@ 0x40
 800b510:	4082      	lsls	r2, r0
 800b512:	4313      	orrs	r3, r2
 800b514:	3401      	adds	r4, #1
 800b516:	9304      	str	r3, [sp, #16]
 800b518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b51c:	4824      	ldr	r0, [pc, #144]	@ (800b5b0 <_svfiprintf_r+0x1e8>)
 800b51e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b522:	2206      	movs	r2, #6
 800b524:	f7f4 fea4 	bl	8000270 <memchr>
 800b528:	2800      	cmp	r0, #0
 800b52a:	d036      	beq.n	800b59a <_svfiprintf_r+0x1d2>
 800b52c:	4b21      	ldr	r3, [pc, #132]	@ (800b5b4 <_svfiprintf_r+0x1ec>)
 800b52e:	bb1b      	cbnz	r3, 800b578 <_svfiprintf_r+0x1b0>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	3307      	adds	r3, #7
 800b534:	f023 0307 	bic.w	r3, r3, #7
 800b538:	3308      	adds	r3, #8
 800b53a:	9303      	str	r3, [sp, #12]
 800b53c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b53e:	4433      	add	r3, r6
 800b540:	9309      	str	r3, [sp, #36]	@ 0x24
 800b542:	e76a      	b.n	800b41a <_svfiprintf_r+0x52>
 800b544:	fb0c 3202 	mla	r2, ip, r2, r3
 800b548:	460c      	mov	r4, r1
 800b54a:	2001      	movs	r0, #1
 800b54c:	e7a8      	b.n	800b4a0 <_svfiprintf_r+0xd8>
 800b54e:	2300      	movs	r3, #0
 800b550:	3401      	adds	r4, #1
 800b552:	9305      	str	r3, [sp, #20]
 800b554:	4619      	mov	r1, r3
 800b556:	f04f 0c0a 	mov.w	ip, #10
 800b55a:	4620      	mov	r0, r4
 800b55c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b560:	3a30      	subs	r2, #48	@ 0x30
 800b562:	2a09      	cmp	r2, #9
 800b564:	d903      	bls.n	800b56e <_svfiprintf_r+0x1a6>
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0c6      	beq.n	800b4f8 <_svfiprintf_r+0x130>
 800b56a:	9105      	str	r1, [sp, #20]
 800b56c:	e7c4      	b.n	800b4f8 <_svfiprintf_r+0x130>
 800b56e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b572:	4604      	mov	r4, r0
 800b574:	2301      	movs	r3, #1
 800b576:	e7f0      	b.n	800b55a <_svfiprintf_r+0x192>
 800b578:	ab03      	add	r3, sp, #12
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	462a      	mov	r2, r5
 800b57e:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b8 <_svfiprintf_r+0x1f0>)
 800b580:	a904      	add	r1, sp, #16
 800b582:	4638      	mov	r0, r7
 800b584:	f3af 8000 	nop.w
 800b588:	1c42      	adds	r2, r0, #1
 800b58a:	4606      	mov	r6, r0
 800b58c:	d1d6      	bne.n	800b53c <_svfiprintf_r+0x174>
 800b58e:	89ab      	ldrh	r3, [r5, #12]
 800b590:	065b      	lsls	r3, r3, #25
 800b592:	f53f af2d 	bmi.w	800b3f0 <_svfiprintf_r+0x28>
 800b596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b598:	e72c      	b.n	800b3f4 <_svfiprintf_r+0x2c>
 800b59a:	ab03      	add	r3, sp, #12
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	462a      	mov	r2, r5
 800b5a0:	4b05      	ldr	r3, [pc, #20]	@ (800b5b8 <_svfiprintf_r+0x1f0>)
 800b5a2:	a904      	add	r1, sp, #16
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	f000 f879 	bl	800b69c <_printf_i>
 800b5aa:	e7ed      	b.n	800b588 <_svfiprintf_r+0x1c0>
 800b5ac:	0800bcdd 	.word	0x0800bcdd
 800b5b0:	0800bce7 	.word	0x0800bce7
 800b5b4:	00000000 	.word	0x00000000
 800b5b8:	0800b311 	.word	0x0800b311
 800b5bc:	0800bce3 	.word	0x0800bce3

0800b5c0 <_printf_common>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	4616      	mov	r6, r2
 800b5c6:	4698      	mov	r8, r3
 800b5c8:	688a      	ldr	r2, [r1, #8]
 800b5ca:	690b      	ldr	r3, [r1, #16]
 800b5cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	bfb8      	it	lt
 800b5d4:	4613      	movlt	r3, r2
 800b5d6:	6033      	str	r3, [r6, #0]
 800b5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5dc:	4607      	mov	r7, r0
 800b5de:	460c      	mov	r4, r1
 800b5e0:	b10a      	cbz	r2, 800b5e6 <_printf_common+0x26>
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	6033      	str	r3, [r6, #0]
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	0699      	lsls	r1, r3, #26
 800b5ea:	bf42      	ittt	mi
 800b5ec:	6833      	ldrmi	r3, [r6, #0]
 800b5ee:	3302      	addmi	r3, #2
 800b5f0:	6033      	strmi	r3, [r6, #0]
 800b5f2:	6825      	ldr	r5, [r4, #0]
 800b5f4:	f015 0506 	ands.w	r5, r5, #6
 800b5f8:	d106      	bne.n	800b608 <_printf_common+0x48>
 800b5fa:	f104 0a19 	add.w	sl, r4, #25
 800b5fe:	68e3      	ldr	r3, [r4, #12]
 800b600:	6832      	ldr	r2, [r6, #0]
 800b602:	1a9b      	subs	r3, r3, r2
 800b604:	42ab      	cmp	r3, r5
 800b606:	dc26      	bgt.n	800b656 <_printf_common+0x96>
 800b608:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b60c:	6822      	ldr	r2, [r4, #0]
 800b60e:	3b00      	subs	r3, #0
 800b610:	bf18      	it	ne
 800b612:	2301      	movne	r3, #1
 800b614:	0692      	lsls	r2, r2, #26
 800b616:	d42b      	bmi.n	800b670 <_printf_common+0xb0>
 800b618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b61c:	4641      	mov	r1, r8
 800b61e:	4638      	mov	r0, r7
 800b620:	47c8      	blx	r9
 800b622:	3001      	adds	r0, #1
 800b624:	d01e      	beq.n	800b664 <_printf_common+0xa4>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	6922      	ldr	r2, [r4, #16]
 800b62a:	f003 0306 	and.w	r3, r3, #6
 800b62e:	2b04      	cmp	r3, #4
 800b630:	bf02      	ittt	eq
 800b632:	68e5      	ldreq	r5, [r4, #12]
 800b634:	6833      	ldreq	r3, [r6, #0]
 800b636:	1aed      	subeq	r5, r5, r3
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	bf0c      	ite	eq
 800b63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b640:	2500      	movne	r5, #0
 800b642:	4293      	cmp	r3, r2
 800b644:	bfc4      	itt	gt
 800b646:	1a9b      	subgt	r3, r3, r2
 800b648:	18ed      	addgt	r5, r5, r3
 800b64a:	2600      	movs	r6, #0
 800b64c:	341a      	adds	r4, #26
 800b64e:	42b5      	cmp	r5, r6
 800b650:	d11a      	bne.n	800b688 <_printf_common+0xc8>
 800b652:	2000      	movs	r0, #0
 800b654:	e008      	b.n	800b668 <_printf_common+0xa8>
 800b656:	2301      	movs	r3, #1
 800b658:	4652      	mov	r2, sl
 800b65a:	4641      	mov	r1, r8
 800b65c:	4638      	mov	r0, r7
 800b65e:	47c8      	blx	r9
 800b660:	3001      	adds	r0, #1
 800b662:	d103      	bne.n	800b66c <_printf_common+0xac>
 800b664:	f04f 30ff 	mov.w	r0, #4294967295
 800b668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66c:	3501      	adds	r5, #1
 800b66e:	e7c6      	b.n	800b5fe <_printf_common+0x3e>
 800b670:	18e1      	adds	r1, r4, r3
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	2030      	movs	r0, #48	@ 0x30
 800b676:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b67a:	4422      	add	r2, r4
 800b67c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b680:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b684:	3302      	adds	r3, #2
 800b686:	e7c7      	b.n	800b618 <_printf_common+0x58>
 800b688:	2301      	movs	r3, #1
 800b68a:	4622      	mov	r2, r4
 800b68c:	4641      	mov	r1, r8
 800b68e:	4638      	mov	r0, r7
 800b690:	47c8      	blx	r9
 800b692:	3001      	adds	r0, #1
 800b694:	d0e6      	beq.n	800b664 <_printf_common+0xa4>
 800b696:	3601      	adds	r6, #1
 800b698:	e7d9      	b.n	800b64e <_printf_common+0x8e>
	...

0800b69c <_printf_i>:
 800b69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a0:	7e0f      	ldrb	r7, [r1, #24]
 800b6a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6a4:	2f78      	cmp	r7, #120	@ 0x78
 800b6a6:	4691      	mov	r9, r2
 800b6a8:	4680      	mov	r8, r0
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	469a      	mov	sl, r3
 800b6ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6b2:	d807      	bhi.n	800b6c4 <_printf_i+0x28>
 800b6b4:	2f62      	cmp	r7, #98	@ 0x62
 800b6b6:	d80a      	bhi.n	800b6ce <_printf_i+0x32>
 800b6b8:	2f00      	cmp	r7, #0
 800b6ba:	f000 80d2 	beq.w	800b862 <_printf_i+0x1c6>
 800b6be:	2f58      	cmp	r7, #88	@ 0x58
 800b6c0:	f000 80b9 	beq.w	800b836 <_printf_i+0x19a>
 800b6c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6cc:	e03a      	b.n	800b744 <_printf_i+0xa8>
 800b6ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6d2:	2b15      	cmp	r3, #21
 800b6d4:	d8f6      	bhi.n	800b6c4 <_printf_i+0x28>
 800b6d6:	a101      	add	r1, pc, #4	@ (adr r1, 800b6dc <_printf_i+0x40>)
 800b6d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6dc:	0800b735 	.word	0x0800b735
 800b6e0:	0800b749 	.word	0x0800b749
 800b6e4:	0800b6c5 	.word	0x0800b6c5
 800b6e8:	0800b6c5 	.word	0x0800b6c5
 800b6ec:	0800b6c5 	.word	0x0800b6c5
 800b6f0:	0800b6c5 	.word	0x0800b6c5
 800b6f4:	0800b749 	.word	0x0800b749
 800b6f8:	0800b6c5 	.word	0x0800b6c5
 800b6fc:	0800b6c5 	.word	0x0800b6c5
 800b700:	0800b6c5 	.word	0x0800b6c5
 800b704:	0800b6c5 	.word	0x0800b6c5
 800b708:	0800b849 	.word	0x0800b849
 800b70c:	0800b773 	.word	0x0800b773
 800b710:	0800b803 	.word	0x0800b803
 800b714:	0800b6c5 	.word	0x0800b6c5
 800b718:	0800b6c5 	.word	0x0800b6c5
 800b71c:	0800b86b 	.word	0x0800b86b
 800b720:	0800b6c5 	.word	0x0800b6c5
 800b724:	0800b773 	.word	0x0800b773
 800b728:	0800b6c5 	.word	0x0800b6c5
 800b72c:	0800b6c5 	.word	0x0800b6c5
 800b730:	0800b80b 	.word	0x0800b80b
 800b734:	6833      	ldr	r3, [r6, #0]
 800b736:	1d1a      	adds	r2, r3, #4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6032      	str	r2, [r6, #0]
 800b73c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b740:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b744:	2301      	movs	r3, #1
 800b746:	e09d      	b.n	800b884 <_printf_i+0x1e8>
 800b748:	6833      	ldr	r3, [r6, #0]
 800b74a:	6820      	ldr	r0, [r4, #0]
 800b74c:	1d19      	adds	r1, r3, #4
 800b74e:	6031      	str	r1, [r6, #0]
 800b750:	0606      	lsls	r6, r0, #24
 800b752:	d501      	bpl.n	800b758 <_printf_i+0xbc>
 800b754:	681d      	ldr	r5, [r3, #0]
 800b756:	e003      	b.n	800b760 <_printf_i+0xc4>
 800b758:	0645      	lsls	r5, r0, #25
 800b75a:	d5fb      	bpl.n	800b754 <_printf_i+0xb8>
 800b75c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b760:	2d00      	cmp	r5, #0
 800b762:	da03      	bge.n	800b76c <_printf_i+0xd0>
 800b764:	232d      	movs	r3, #45	@ 0x2d
 800b766:	426d      	negs	r5, r5
 800b768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b76c:	4859      	ldr	r0, [pc, #356]	@ (800b8d4 <_printf_i+0x238>)
 800b76e:	230a      	movs	r3, #10
 800b770:	e011      	b.n	800b796 <_printf_i+0xfa>
 800b772:	6821      	ldr	r1, [r4, #0]
 800b774:	6833      	ldr	r3, [r6, #0]
 800b776:	0608      	lsls	r0, r1, #24
 800b778:	f853 5b04 	ldr.w	r5, [r3], #4
 800b77c:	d402      	bmi.n	800b784 <_printf_i+0xe8>
 800b77e:	0649      	lsls	r1, r1, #25
 800b780:	bf48      	it	mi
 800b782:	b2ad      	uxthmi	r5, r5
 800b784:	2f6f      	cmp	r7, #111	@ 0x6f
 800b786:	4853      	ldr	r0, [pc, #332]	@ (800b8d4 <_printf_i+0x238>)
 800b788:	6033      	str	r3, [r6, #0]
 800b78a:	bf14      	ite	ne
 800b78c:	230a      	movne	r3, #10
 800b78e:	2308      	moveq	r3, #8
 800b790:	2100      	movs	r1, #0
 800b792:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b796:	6866      	ldr	r6, [r4, #4]
 800b798:	60a6      	str	r6, [r4, #8]
 800b79a:	2e00      	cmp	r6, #0
 800b79c:	bfa2      	ittt	ge
 800b79e:	6821      	ldrge	r1, [r4, #0]
 800b7a0:	f021 0104 	bicge.w	r1, r1, #4
 800b7a4:	6021      	strge	r1, [r4, #0]
 800b7a6:	b90d      	cbnz	r5, 800b7ac <_printf_i+0x110>
 800b7a8:	2e00      	cmp	r6, #0
 800b7aa:	d04b      	beq.n	800b844 <_printf_i+0x1a8>
 800b7ac:	4616      	mov	r6, r2
 800b7ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7b2:	fb03 5711 	mls	r7, r3, r1, r5
 800b7b6:	5dc7      	ldrb	r7, [r0, r7]
 800b7b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7bc:	462f      	mov	r7, r5
 800b7be:	42bb      	cmp	r3, r7
 800b7c0:	460d      	mov	r5, r1
 800b7c2:	d9f4      	bls.n	800b7ae <_printf_i+0x112>
 800b7c4:	2b08      	cmp	r3, #8
 800b7c6:	d10b      	bne.n	800b7e0 <_printf_i+0x144>
 800b7c8:	6823      	ldr	r3, [r4, #0]
 800b7ca:	07df      	lsls	r7, r3, #31
 800b7cc:	d508      	bpl.n	800b7e0 <_printf_i+0x144>
 800b7ce:	6923      	ldr	r3, [r4, #16]
 800b7d0:	6861      	ldr	r1, [r4, #4]
 800b7d2:	4299      	cmp	r1, r3
 800b7d4:	bfde      	ittt	le
 800b7d6:	2330      	movle	r3, #48	@ 0x30
 800b7d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7e0:	1b92      	subs	r2, r2, r6
 800b7e2:	6122      	str	r2, [r4, #16]
 800b7e4:	f8cd a000 	str.w	sl, [sp]
 800b7e8:	464b      	mov	r3, r9
 800b7ea:	aa03      	add	r2, sp, #12
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	f7ff fee6 	bl	800b5c0 <_printf_common>
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d14a      	bne.n	800b88e <_printf_i+0x1f2>
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	b004      	add	sp, #16
 800b7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	f043 0320 	orr.w	r3, r3, #32
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	4833      	ldr	r0, [pc, #204]	@ (800b8d8 <_printf_i+0x23c>)
 800b80c:	2778      	movs	r7, #120	@ 0x78
 800b80e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	6831      	ldr	r1, [r6, #0]
 800b816:	061f      	lsls	r7, r3, #24
 800b818:	f851 5b04 	ldr.w	r5, [r1], #4
 800b81c:	d402      	bmi.n	800b824 <_printf_i+0x188>
 800b81e:	065f      	lsls	r7, r3, #25
 800b820:	bf48      	it	mi
 800b822:	b2ad      	uxthmi	r5, r5
 800b824:	6031      	str	r1, [r6, #0]
 800b826:	07d9      	lsls	r1, r3, #31
 800b828:	bf44      	itt	mi
 800b82a:	f043 0320 	orrmi.w	r3, r3, #32
 800b82e:	6023      	strmi	r3, [r4, #0]
 800b830:	b11d      	cbz	r5, 800b83a <_printf_i+0x19e>
 800b832:	2310      	movs	r3, #16
 800b834:	e7ac      	b.n	800b790 <_printf_i+0xf4>
 800b836:	4827      	ldr	r0, [pc, #156]	@ (800b8d4 <_printf_i+0x238>)
 800b838:	e7e9      	b.n	800b80e <_printf_i+0x172>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	f023 0320 	bic.w	r3, r3, #32
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	e7f6      	b.n	800b832 <_printf_i+0x196>
 800b844:	4616      	mov	r6, r2
 800b846:	e7bd      	b.n	800b7c4 <_printf_i+0x128>
 800b848:	6833      	ldr	r3, [r6, #0]
 800b84a:	6825      	ldr	r5, [r4, #0]
 800b84c:	6961      	ldr	r1, [r4, #20]
 800b84e:	1d18      	adds	r0, r3, #4
 800b850:	6030      	str	r0, [r6, #0]
 800b852:	062e      	lsls	r6, r5, #24
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	d501      	bpl.n	800b85c <_printf_i+0x1c0>
 800b858:	6019      	str	r1, [r3, #0]
 800b85a:	e002      	b.n	800b862 <_printf_i+0x1c6>
 800b85c:	0668      	lsls	r0, r5, #25
 800b85e:	d5fb      	bpl.n	800b858 <_printf_i+0x1bc>
 800b860:	8019      	strh	r1, [r3, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	6123      	str	r3, [r4, #16]
 800b866:	4616      	mov	r6, r2
 800b868:	e7bc      	b.n	800b7e4 <_printf_i+0x148>
 800b86a:	6833      	ldr	r3, [r6, #0]
 800b86c:	1d1a      	adds	r2, r3, #4
 800b86e:	6032      	str	r2, [r6, #0]
 800b870:	681e      	ldr	r6, [r3, #0]
 800b872:	6862      	ldr	r2, [r4, #4]
 800b874:	2100      	movs	r1, #0
 800b876:	4630      	mov	r0, r6
 800b878:	f7f4 fcfa 	bl	8000270 <memchr>
 800b87c:	b108      	cbz	r0, 800b882 <_printf_i+0x1e6>
 800b87e:	1b80      	subs	r0, r0, r6
 800b880:	6060      	str	r0, [r4, #4]
 800b882:	6863      	ldr	r3, [r4, #4]
 800b884:	6123      	str	r3, [r4, #16]
 800b886:	2300      	movs	r3, #0
 800b888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b88c:	e7aa      	b.n	800b7e4 <_printf_i+0x148>
 800b88e:	6923      	ldr	r3, [r4, #16]
 800b890:	4632      	mov	r2, r6
 800b892:	4649      	mov	r1, r9
 800b894:	4640      	mov	r0, r8
 800b896:	47d0      	blx	sl
 800b898:	3001      	adds	r0, #1
 800b89a:	d0ad      	beq.n	800b7f8 <_printf_i+0x15c>
 800b89c:	6823      	ldr	r3, [r4, #0]
 800b89e:	079b      	lsls	r3, r3, #30
 800b8a0:	d413      	bmi.n	800b8ca <_printf_i+0x22e>
 800b8a2:	68e0      	ldr	r0, [r4, #12]
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	4298      	cmp	r0, r3
 800b8a8:	bfb8      	it	lt
 800b8aa:	4618      	movlt	r0, r3
 800b8ac:	e7a6      	b.n	800b7fc <_printf_i+0x160>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	4640      	mov	r0, r8
 800b8b6:	47d0      	blx	sl
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d09d      	beq.n	800b7f8 <_printf_i+0x15c>
 800b8bc:	3501      	adds	r5, #1
 800b8be:	68e3      	ldr	r3, [r4, #12]
 800b8c0:	9903      	ldr	r1, [sp, #12]
 800b8c2:	1a5b      	subs	r3, r3, r1
 800b8c4:	42ab      	cmp	r3, r5
 800b8c6:	dcf2      	bgt.n	800b8ae <_printf_i+0x212>
 800b8c8:	e7eb      	b.n	800b8a2 <_printf_i+0x206>
 800b8ca:	2500      	movs	r5, #0
 800b8cc:	f104 0619 	add.w	r6, r4, #25
 800b8d0:	e7f5      	b.n	800b8be <_printf_i+0x222>
 800b8d2:	bf00      	nop
 800b8d4:	0800bcee 	.word	0x0800bcee
 800b8d8:	0800bcff 	.word	0x0800bcff

0800b8dc <memmove>:
 800b8dc:	4288      	cmp	r0, r1
 800b8de:	b510      	push	{r4, lr}
 800b8e0:	eb01 0402 	add.w	r4, r1, r2
 800b8e4:	d902      	bls.n	800b8ec <memmove+0x10>
 800b8e6:	4284      	cmp	r4, r0
 800b8e8:	4623      	mov	r3, r4
 800b8ea:	d807      	bhi.n	800b8fc <memmove+0x20>
 800b8ec:	1e43      	subs	r3, r0, #1
 800b8ee:	42a1      	cmp	r1, r4
 800b8f0:	d008      	beq.n	800b904 <memmove+0x28>
 800b8f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8fa:	e7f8      	b.n	800b8ee <memmove+0x12>
 800b8fc:	4402      	add	r2, r0
 800b8fe:	4601      	mov	r1, r0
 800b900:	428a      	cmp	r2, r1
 800b902:	d100      	bne.n	800b906 <memmove+0x2a>
 800b904:	bd10      	pop	{r4, pc}
 800b906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b90a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b90e:	e7f7      	b.n	800b900 <memmove+0x24>

0800b910 <_realloc_r>:
 800b910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b914:	4680      	mov	r8, r0
 800b916:	4615      	mov	r5, r2
 800b918:	460c      	mov	r4, r1
 800b91a:	b921      	cbnz	r1, 800b926 <_realloc_r+0x16>
 800b91c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b920:	4611      	mov	r1, r2
 800b922:	f7ff ba9f 	b.w	800ae64 <_malloc_r>
 800b926:	b92a      	cbnz	r2, 800b934 <_realloc_r+0x24>
 800b928:	f7ff fca8 	bl	800b27c <_free_r>
 800b92c:	2400      	movs	r4, #0
 800b92e:	4620      	mov	r0, r4
 800b930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b934:	f000 f81a 	bl	800b96c <_malloc_usable_size_r>
 800b938:	4285      	cmp	r5, r0
 800b93a:	4606      	mov	r6, r0
 800b93c:	d802      	bhi.n	800b944 <_realloc_r+0x34>
 800b93e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b942:	d8f4      	bhi.n	800b92e <_realloc_r+0x1e>
 800b944:	4629      	mov	r1, r5
 800b946:	4640      	mov	r0, r8
 800b948:	f7ff fa8c 	bl	800ae64 <_malloc_r>
 800b94c:	4607      	mov	r7, r0
 800b94e:	2800      	cmp	r0, #0
 800b950:	d0ec      	beq.n	800b92c <_realloc_r+0x1c>
 800b952:	42b5      	cmp	r5, r6
 800b954:	462a      	mov	r2, r5
 800b956:	4621      	mov	r1, r4
 800b958:	bf28      	it	cs
 800b95a:	4632      	movcs	r2, r6
 800b95c:	f7ff fc80 	bl	800b260 <memcpy>
 800b960:	4621      	mov	r1, r4
 800b962:	4640      	mov	r0, r8
 800b964:	f7ff fc8a 	bl	800b27c <_free_r>
 800b968:	463c      	mov	r4, r7
 800b96a:	e7e0      	b.n	800b92e <_realloc_r+0x1e>

0800b96c <_malloc_usable_size_r>:
 800b96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b970:	1f18      	subs	r0, r3, #4
 800b972:	2b00      	cmp	r3, #0
 800b974:	bfbc      	itt	lt
 800b976:	580b      	ldrlt	r3, [r1, r0]
 800b978:	18c0      	addlt	r0, r0, r3
 800b97a:	4770      	bx	lr

0800b97c <_init>:
 800b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97e:	bf00      	nop
 800b980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b982:	bc08      	pop	{r3}
 800b984:	469e      	mov	lr, r3
 800b986:	4770      	bx	lr

0800b988 <_fini>:
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	bf00      	nop
 800b98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98e:	bc08      	pop	{r3}
 800b990:	469e      	mov	lr, r3
 800b992:	4770      	bx	lr
