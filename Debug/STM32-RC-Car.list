
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b408  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800b608  0800b608  0000c608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b940  0800b940  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b940  0800b940  0000c940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b948  0800b948  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b948  0800b948  0000c948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b94c  0800b94c  0000c94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800b950  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054dc  20000060  0800b9b0  0000d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000553c  0800b9b0  0000d53c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020722  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b9  00000000  00000000  0002d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  00031f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c8  00000000  00000000  00033a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b907  00000000  00000000  00034ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021900  00000000  00000000  000607f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108fd1  00000000  00000000  000820f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b0c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071cc  00000000  00000000  0018b10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001922d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b5f0 	.word	0x0800b5f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800b5f0 	.word	0x0800b5f0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <MX_DMA_Init+0x48>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a0f      	ldr	r2, [pc, #60]	@ (800059c <MX_DMA_Init+0x48>)
 8000560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <MX_DMA_Init+0x48>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2010      	movs	r0, #16
 8000578:	f002 fc09 	bl	8002d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800057c:	2010      	movs	r0, #16
 800057e:	f002 fc22 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	2011      	movs	r0, #17
 8000588:	f002 fc01 	bl	8002d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800058c:	2011      	movs	r0, #17
 800058e:	f002 fc1a 	bl	8002dc6 <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	//defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 80005a4:	4a08      	ldr	r2, [pc, #32]	@ (80005c8 <MX_FREERTOS_Init+0x28>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4808      	ldr	r0, [pc, #32]	@ (80005cc <MX_FREERTOS_Init+0x2c>)
 80005aa:	f008 f9b3 	bl	8008914 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <MX_FREERTOS_Init+0x30>)
 80005b2:	6013      	str	r3, [r2, #0]
	distanceSensorHandle = osThreadNew(DistanceSensor, NULL, &distanceSensor_attributes);
 80005b4:	4a07      	ldr	r2, [pc, #28]	@ (80005d4 <MX_FREERTOS_Init+0x34>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <MX_FREERTOS_Init+0x38>)
 80005ba:	f008 f9ab 	bl	8008914 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <MX_FREERTOS_Init+0x3c>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	0800b7d4 	.word	0x0800b7d4
 80005cc:	08001661 	.word	0x08001661
 80005d0:	2000007c 	.word	0x2000007c
 80005d4:	0800b7f8 	.word	0x0800b7f8
 80005d8:	08001469 	.word	0x08001469
 80005dc:	20000080 	.word	0x20000080

080005e0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f6:	4b81      	ldr	r3, [pc, #516]	@ (80007fc <MX_GPIO_Init+0x21c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a80      	ldr	r2, [pc, #512]	@ (80007fc <MX_GPIO_Init+0x21c>)
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b7e      	ldr	r3, [pc, #504]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b7b      	ldr	r3, [pc, #492]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a7a      	ldr	r2, [pc, #488]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b78      	ldr	r3, [pc, #480]	@ (80007fc <MX_GPIO_Init+0x21c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000626:	4b75      	ldr	r3, [pc, #468]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a74      	ldr	r2, [pc, #464]	@ (80007fc <MX_GPIO_Init+0x21c>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b72      	ldr	r3, [pc, #456]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b6f      	ldr	r3, [pc, #444]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a6e      	ldr	r2, [pc, #440]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b6c      	ldr	r3, [pc, #432]	@ (80007fc <MX_GPIO_Init+0x21c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b69      	ldr	r3, [pc, #420]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a68      	ldr	r2, [pc, #416]	@ (80007fc <MX_GPIO_Init+0x21c>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b66      	ldr	r3, [pc, #408]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066e:	4b63      	ldr	r3, [pc, #396]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a62      	ldr	r2, [pc, #392]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b60      	ldr	r3, [pc, #384]	@ (80007fc <MX_GPIO_Init+0x21c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	4b5d      	ldr	r3, [pc, #372]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a5c      	ldr	r2, [pc, #368]	@ (80007fc <MX_GPIO_Init+0x21c>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b5a      	ldr	r3, [pc, #360]	@ (80007fc <MX_GPIO_Init+0x21c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2140      	movs	r1, #64	@ 0x40
 80006a2:	4857      	ldr	r0, [pc, #348]	@ (8000800 <MX_GPIO_Init+0x220>)
 80006a4:	f003 f8ea 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006ae:	4855      	ldr	r0, [pc, #340]	@ (8000804 <MX_GPIO_Init+0x224>)
 80006b0:	f003 f8e4 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2141      	movs	r1, #65	@ 0x41
 80006b8:	4853      	ldr	r0, [pc, #332]	@ (8000808 <MX_GPIO_Init+0x228>)
 80006ba:	f003 f8df 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2110      	movs	r1, #16
 80006c2:	4852      	ldr	r0, [pc, #328]	@ (800080c <MX_GPIO_Init+0x22c>)
 80006c4:	f003 f8da 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DETECTOR_TRIGGER_Pin */
  GPIO_InitStruct.Pin = DETECTOR_TRIGGER_Pin;
 80006c8:	2340      	movs	r3, #64	@ 0x40
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DETECTOR_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4848      	ldr	r0, [pc, #288]	@ (8000800 <MX_GPIO_Init+0x220>)
 80006e0:	f002 ff08 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	4845      	ldr	r0, [pc, #276]	@ (8000810 <MX_GPIO_Init+0x230>)
 80006fc:	f002 fefa 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000700:	2332      	movs	r3, #50	@ 0x32
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000710:	230b      	movs	r3, #11
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	483d      	ldr	r0, [pc, #244]	@ (8000810 <MX_GPIO_Init+0x230>)
 800071c:	f002 feea 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000720:	2386      	movs	r3, #134	@ 0x86
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000730:	230b      	movs	r3, #11
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4836      	ldr	r0, [pc, #216]	@ (8000814 <MX_GPIO_Init+0x234>)
 800073c:	f002 feda 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000740:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	482a      	ldr	r0, [pc, #168]	@ (8000804 <MX_GPIO_Init+0x224>)
 800075a:	f002 fecb 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 800075e:	2341      	movs	r3, #65	@ 0x41
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4824      	ldr	r0, [pc, #144]	@ (8000808 <MX_GPIO_Init+0x228>)
 8000776:	f002 febd 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078c:	230b      	movs	r3, #11
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	481b      	ldr	r0, [pc, #108]	@ (8000804 <MX_GPIO_Init+0x224>)
 8000798:	f002 feac 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800079c:	2380      	movs	r3, #128	@ 0x80
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4816      	ldr	r0, [pc, #88]	@ (8000808 <MX_GPIO_Init+0x228>)
 80007b0:	f002 fea0 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007b4:	2310      	movs	r3, #16
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4810      	ldr	r0, [pc, #64]	@ (800080c <MX_GPIO_Init+0x22c>)
 80007cc:	f002 fe92 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e2:	230b      	movs	r3, #11
 80007e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_GPIO_Init+0x228>)
 80007ee:	f002 fe81 	bl	80034f4 <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	@ 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40021000 	.word	0x40021000
 8000804:	40020400 	.word	0x40020400
 8000808:	40021800 	.word	0x40021800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000

08000818 <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6178      	str	r0, [r7, #20]
 8000820:	ed87 0a04 	vstr	s0, [r7, #16]
 8000824:	edc7 0a03 	vstr	s1, [r7, #12]
 8000828:	ed87 1a02 	vstr	s2, [r7, #8]
 800082c:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	615a      	str	r2, [r3, #20]
}
 8000852:	bf00      	nop
 8000854:	371c      	adds	r7, #28
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <pid_reset>:

void pid_reset(PID *pid_data)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 800087e:	b480      	push	{r7}
 8000880:	b089      	sub	sp, #36	@ 0x24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	441a      	add	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008b2:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	ee07 3a90 	vmov	s15, r3
 80008c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008cc:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	ee07 3a90 	vmov	s15, r3
 80008e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ea:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80008fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000906:	db08      	blt.n	800091a <pid_calculate+0x9c>
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	ee07 3a90 	vmov	s15, r3
 8000910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000914:	edc7 7a07 	vstr	s15, [r7, #28]
 8000918:	e016      	b.n	8000948 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	425b      	negs	r3, r3
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000928:	ed97 7a07 	vldr	s14, [r7, #28]
 800092c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000934:	d808      	bhi.n	8000948 <pid_calculate+0xca>
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	425b      	negs	r3, r3
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000944:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 800094e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000952:	edd7 7a07 	vldr	s15, [r7, #28]
 8000956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800095a:	edd7 7a04 	vldr	s15, [r7, #16]
 800095e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000966:	ee17 3a90 	vmov	r3, s15
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	@ 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <Init_Motor>:

MOTOR motorA;
MOTOR motorB;

void Init_Motor(MOTOR *m, TIM_HandleTypeDef *enc, uint32_t axis, TIM_HandleTypeDef* front, TIM_HandleTypeDef* back)
{
 8000976:	b480      	push	{r7}
 8000978:	b085      	sub	sp, #20
 800097a:	af00      	add	r7, sp, #0
 800097c:	60f8      	str	r0, [r7, #12]
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	603b      	str	r3, [r7, #0]
	m->encoder = enc;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	601a      	str	r2, [r3, #0]
	m->axisTimer = axis;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	60da      	str	r2, [r3, #12]
	m->motorBack = back;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	605a      	str	r2, [r3, #4]
	m->motorFront = front;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	609a      	str	r2, [r3, #8]

	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80009a2:	825a      	strh	r2, [r3, #18]

	m->pulse_count = 0;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
	m->measured_speed = 0;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
	m->set_speed = 0;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
    m->actual_PWM = 0;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f849 	bl	8000a68 <motor_update_count>

	m->measured_speed = abs((m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80009de:	fb02 f303 	mul.w	r3, r2, r3
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	8a52      	ldrh	r2, [r2, #18]
 80009e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80009ea:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009ee:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	619a      	str	r2, [r3, #24]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	69d9      	ldr	r1, [r3, #28]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	461a      	mov	r2, r3
 8000a06:	f7ff ff3a 	bl	800087e <pid_calculate>
 8000a0a:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a1a      	ldr	r2, [r3, #32]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	441a      	add	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	621a      	str	r2, [r3, #32]

	if(m->actual_PWM >= 0)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a1b      	ldr	r3, [r3, #32]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db05      	blt.n	8000a2c <motor_calculate_speed+0x64>
	{
		SetMotorSpeed(m, m->actual_PWM);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a1b      	ldr	r3, [r3, #32]
 8000a24:	4619      	mov	r1, r3
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f8c9 	bl	8000bbe <SetMotorSpeed>

	}

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <ResetMotor>:

void ResetMotor(MOTOR *m) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	m->set_speed = 0;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <motor_set_speed>:
enum DIRECTION {
	DEFAULT, FRONT, BACK
};

void motor_set_speed(MOTOR *m, short direction, int set_speed)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	817b      	strh	r3, [r7, #10]
	if(set_speed != m->set_speed)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d004      	beq.n	8000ab8 <motor_set_speed+0x22>
		pid_reset(&(m->pid_controller));
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3324      	adds	r3, #36	@ 0x24
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fed3 	bl	800085e <pid_reset>

	m->set_speed = set_speed;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	61da      	str	r2, [r3, #28]
	m->direction = direction;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	897a      	ldrh	r2, [r7, #10]
 8000ac2:	821a      	strh	r2, [r3, #16]
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <MotorABS>:

void MotorABS(MOTOR* m) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	ResetMotor(m);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ffad 	bl	8000a34 <ResetMotor>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d105      	bne.n	8000aee <MotorABS+0x22>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aec:	e02c      	b.n	8000b48 <MotorABS+0x7c>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d105      	bne.n	8000b02 <MotorABS+0x36>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b00:	e022      	b.n	8000b48 <MotorABS+0x7c>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d105      	bne.n	8000b16 <MotorABS+0x4a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b14:	e018      	b.n	8000b48 <MotorABS+0x7c>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	2b0c      	cmp	r3, #12
 8000b1c:	d105      	bne.n	8000b2a <MotorABS+0x5e>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b28:	e00e      	b.n	8000b48 <MotorABS+0x7c>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d105      	bne.n	8000b3e <MotorABS+0x72>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b3c:	e004      	b.n	8000b48 <MotorABS+0x7c>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	2300      	movs	r3, #0
 8000b46:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d105      	bne.n	8000b5c <MotorABS+0x90>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b5a:	e02c      	b.n	8000bb6 <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d105      	bne.n	8000b70 <MotorABS+0xa4>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b6e:	e022      	b.n	8000bb6 <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d105      	bne.n	8000b84 <MotorABS+0xb8>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b82:	e018      	b.n	8000bb6 <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	2b0c      	cmp	r3, #12
 8000b8a:	d105      	bne.n	8000b98 <MotorABS+0xcc>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	2300      	movs	r3, #0
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b96:	e00e      	b.n	8000bb6 <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	2b10      	cmp	r3, #16
 8000b9e:	d105      	bne.n	8000bac <MotorABS+0xe0>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000baa:	e004      	b.n	8000bb6 <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <SetMotorSpeed>:

void SetMotorSpeed(MOTOR* m, uint16_t speed)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
	switch (m->direction) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	f000 810b 	beq.w	8000dec <SetMotorSpeed+0x22e>
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	f300 8183 	bgt.w	8000ee2 <SetMotorSpeed+0x324>
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <SetMotorSpeed+0x2a>
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f000 8088 	beq.w	8000cf6 <SetMotorSpeed+0x138>
		break;
	}


	//__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed);
}
 8000be6:	e17c      	b.n	8000ee2 <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d304      	bcc.n	8000c00 <SetMotorSpeed+0x42>
			speed = m->motorFront->Instance->ARR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfe:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d105      	bne.n	8000c14 <SetMotorSpeed+0x56>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c12:	e02c      	b.n	8000c6e <SetMotorSpeed+0xb0>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d105      	bne.n	8000c28 <SetMotorSpeed+0x6a>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c26:	e022      	b.n	8000c6e <SetMotorSpeed+0xb0>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d105      	bne.n	8000c3c <SetMotorSpeed+0x7e>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	887b      	ldrh	r3, [r7, #2]
 8000c38:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c3a:	e018      	b.n	8000c6e <SetMotorSpeed+0xb0>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b0c      	cmp	r3, #12
 8000c42:	d105      	bne.n	8000c50 <SetMotorSpeed+0x92>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4e:	e00e      	b.n	8000c6e <SetMotorSpeed+0xb0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	2b10      	cmp	r3, #16
 8000c56:	d105      	bne.n	8000c64 <SetMotorSpeed+0xa6>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	887b      	ldrh	r3, [r7, #2]
 8000c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c62:	e004      	b.n	8000c6e <SetMotorSpeed+0xb0>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		if(speed >= m->motorBack->Instance->ARR)
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d304      	bcc.n	8000c86 <SetMotorSpeed+0xc8>
			speed = m->motorBack->Instance->ARR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c84:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d105      	bne.n	8000c9a <SetMotorSpeed+0xdc>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	887a      	ldrh	r2, [r7, #2]
 8000c96:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000c98:	e123      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d105      	bne.n	8000cae <SetMotorSpeed+0xf0>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000cac:	e119      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d105      	bne.n	8000cc2 <SetMotorSpeed+0x104>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000cc0:	e10f      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	2b0c      	cmp	r3, #12
 8000cc8:	d105      	bne.n	8000cd6 <SetMotorSpeed+0x118>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000cd4:	e105      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	2b10      	cmp	r3, #16
 8000cdc:	d105      	bne.n	8000cea <SetMotorSpeed+0x12c>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000ce8:	e0fb      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000cf4:	e0f5      	b.n	8000ee2 <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d304      	bcc.n	8000d0e <SetMotorSpeed+0x150>
			speed = m->motorFront->Instance->ARR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0c:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <SetMotorSpeed+0x164>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	887a      	ldrh	r2, [r7, #2]
 8000d1e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d20:	e02c      	b.n	8000d7c <SetMotorSpeed+0x1be>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	d105      	bne.n	8000d36 <SetMotorSpeed+0x178>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d34:	e022      	b.n	8000d7c <SetMotorSpeed+0x1be>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b08      	cmp	r3, #8
 8000d3c:	d105      	bne.n	8000d4a <SetMotorSpeed+0x18c>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d48:	e018      	b.n	8000d7c <SetMotorSpeed+0x1be>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	2b0c      	cmp	r3, #12
 8000d50:	d105      	bne.n	8000d5e <SetMotorSpeed+0x1a0>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5c:	e00e      	b.n	8000d7c <SetMotorSpeed+0x1be>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	2b10      	cmp	r3, #16
 8000d64:	d105      	bne.n	8000d72 <SetMotorSpeed+0x1b4>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d70:	e004      	b.n	8000d7c <SetMotorSpeed+0x1be>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d105      	bne.n	8000d90 <SetMotorSpeed+0x1d2>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000d8e:	e0a8      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d105      	bne.n	8000da4 <SetMotorSpeed+0x1e6>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000da2:	e09e      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d105      	bne.n	8000db8 <SetMotorSpeed+0x1fa>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000db6:	e094      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b0c      	cmp	r3, #12
 8000dbe:	d105      	bne.n	8000dcc <SetMotorSpeed+0x20e>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000dca:	e08a      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d105      	bne.n	8000de0 <SetMotorSpeed+0x222>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000dde:	e080      	b.n	8000ee2 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000dea:	e07a      	b.n	8000ee2 <SetMotorSpeed+0x324>
		if(speed >= m->motorBack->Instance->ARR)
 8000dec:	887a      	ldrh	r2, [r7, #2]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d304      	bcc.n	8000e04 <SetMotorSpeed+0x246>
			speed = m->motorBack->Instance->ARR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e02:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <SetMotorSpeed+0x25a>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e16:	e02c      	b.n	8000e72 <SetMotorSpeed+0x2b4>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d105      	bne.n	8000e2c <SetMotorSpeed+0x26e>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e2a:	e022      	b.n	8000e72 <SetMotorSpeed+0x2b4>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	2b08      	cmp	r3, #8
 8000e32:	d105      	bne.n	8000e40 <SetMotorSpeed+0x282>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e3e:	e018      	b.n	8000e72 <SetMotorSpeed+0x2b4>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b0c      	cmp	r3, #12
 8000e46:	d105      	bne.n	8000e54 <SetMotorSpeed+0x296>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	e00e      	b.n	8000e72 <SetMotorSpeed+0x2b4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b10      	cmp	r3, #16
 8000e5a:	d105      	bne.n	8000e68 <SetMotorSpeed+0x2aa>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e66:	e004      	b.n	8000e72 <SetMotorSpeed+0x2b4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d105      	bne.n	8000e86 <SetMotorSpeed+0x2c8>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2200      	movs	r2, #0
 8000e82:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000e84:	e02c      	b.n	8000ee0 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d105      	bne.n	8000e9a <SetMotorSpeed+0x2dc>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2300      	movs	r3, #0
 8000e96:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000e98:	e022      	b.n	8000ee0 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d105      	bne.n	8000eae <SetMotorSpeed+0x2f0>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000eac:	e018      	b.n	8000ee0 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	2b0c      	cmp	r3, #12
 8000eb4:	d105      	bne.n	8000ec2 <SetMotorSpeed+0x304>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000ec0:	e00e      	b.n	8000ee0 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b10      	cmp	r3, #16
 8000ec8:	d105      	bne.n	8000ed6 <SetMotorSpeed+0x318>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000ed4:	e004      	b.n	8000ee0 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000ee0:	bf00      	nop
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <Init_MotorSystem>:

void Init_MotorSystem()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af02      	add	r7, sp, #8
	Init_Motor(&motorA, &htim8, TIM_CHANNEL_1, &htim2, &htim5);
 8000ef6:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <Init_MotorSystem+0x60>)
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <Init_MotorSystem+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	4916      	ldr	r1, [pc, #88]	@ (8000f58 <Init_MotorSystem+0x68>)
 8000f00:	4816      	ldr	r0, [pc, #88]	@ (8000f5c <Init_MotorSystem+0x6c>)
 8000f02:	f7ff fd38 	bl	8000976 <Init_Motor>
	Init_Motor(&motorB, &htim3, TIM_CHANNEL_4, &htim2, &htim5);
 8000f06:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <Init_MotorSystem+0x60>)
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <Init_MotorSystem+0x64>)
 8000f0c:	220c      	movs	r2, #12
 8000f0e:	4914      	ldr	r1, [pc, #80]	@ (8000f60 <Init_MotorSystem+0x70>)
 8000f10:	4814      	ldr	r0, [pc, #80]	@ (8000f64 <Init_MotorSystem+0x74>)
 8000f12:	f7ff fd30 	bl	8000976 <Init_Motor>
	//Init_Motor(&motorB, &htim4, TIM_CHANNEL_1, &htim2, &htim5);

	pid_init(&(motorA.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000f16:	2101      	movs	r1, #1
 8000f18:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8000f68 <Init_MotorSystem+0x78>
 8000f1c:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000f68 <Init_MotorSystem+0x78>
 8000f20:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000f24:	4811      	ldr	r0, [pc, #68]	@ (8000f6c <Init_MotorSystem+0x7c>)
 8000f26:	f7ff fc77 	bl	8000818 <pid_init>
	pid_init(&(motorB.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000f68 <Init_MotorSystem+0x78>
 8000f30:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000f68 <Init_MotorSystem+0x78>
 8000f34:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000f38:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <Init_MotorSystem+0x80>)
 8000f3a:	f7ff fc6d 	bl	8000818 <pid_init>

	MotorABS(&motorA);
 8000f3e:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <Init_MotorSystem+0x6c>)
 8000f40:	f7ff fdc4 	bl	8000acc <MotorABS>
	MotorABS(&motorB);
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <Init_MotorSystem+0x74>)
 8000f46:	f7ff fdc1 	bl	8000acc <MotorABS>
	//SetMotorSpeed(&motorB, 0);
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000028c 	.word	0x2000028c
 8000f54:	200001a8 	.word	0x200001a8
 8000f58:	20000324 	.word	0x20000324
 8000f5c:	200000dc 	.word	0x200000dc
 8000f60:	200001f4 	.word	0x200001f4
 8000f64:	20000118 	.word	0x20000118
 8000f68:	3d4ccccd 	.word	0x3d4ccccd
 8000f6c:	20000100 	.word	0x20000100
 8000f70:	2000013c 	.word	0x2000013c

08000f74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d105      	bne.n	8000f92 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		motor_calculate_speed(&motorA);
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f88:	f7ff fd1e 	bl	80009c8 <motor_calculate_speed>
		motor_calculate_speed(&motorB);
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f8e:	f7ff fd1b 	bl	80009c8 <motor_calculate_speed>
	}
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40001000 	.word	0x40001000
 8000fa0:	200000dc 	.word	0x200000dc
 8000fa4:	20000118 	.word	0x20000118

08000fa8 <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d104      	bne.n	8000fc0 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4812      	ldr	r0, [pc, #72]	@ (8001004 <Set_PWM_Frequency+0x5c>)
 8000fba:	f004 f9e9 	bl	8005390 <HAL_TIM_PWM_Stop>
        return;
 8000fbe:	e01e      	b.n	8000ffe <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <Set_PWM_Frequency+0x60>)
 8000fc2:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <Set_PWM_Frequency+0x5c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim12, period);
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <Set_PWM_Frequency+0x5c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fe6:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <Set_PWM_Frequency+0x5c>)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <Set_PWM_Frequency+0x5c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	0852      	lsrs	r2, r2, #1
 8000ff4:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <Set_PWM_Frequency+0x5c>)
 8000ffa:	f004 f8cf 	bl	800519c <HAL_TIM_PWM_Start>
}
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200003bc 	.word	0x200003bc
 8001008:	05b8d800 	.word	0x05b8d800

0800100c <ProcessCommand>:

int hornOn = 0;
int engineOn = 0;

void ProcessCommand(uint8_t* cmd) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

			if (strcmp((char*)cmd, "INIT") == 0) {
 8001014:	49b5      	ldr	r1, [pc, #724]	@ (80012ec <ProcessCommand+0x2e0>)
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff f912 	bl	8000240 <strcmp>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10d      	bne.n	800103e <ProcessCommand+0x32>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001022:	2101      	movs	r1, #1
 8001024:	48b2      	ldr	r0, [pc, #712]	@ (80012f0 <ProcessCommand+0x2e4>)
 8001026:	f002 fc42 	bl	80038ae <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800102a:	2180      	movs	r1, #128	@ 0x80
 800102c:	48b0      	ldr	r0, [pc, #704]	@ (80012f0 <ProcessCommand+0x2e4>)
 800102e:	f002 fc3e 	bl	80038ae <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001032:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001036:	48ae      	ldr	r0, [pc, #696]	@ (80012f0 <ProcessCommand+0x2e4>)
 8001038:	f002 fc39 	bl	80038ae <HAL_GPIO_TogglePin>
	    }

	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 800103c:	e1f9      	b.n	8001432 <ProcessCommand+0x426>
			else if (strcmp((char*)cmd, "CMD0") == 0) {
 800103e:	49ad      	ldr	r1, [pc, #692]	@ (80012f4 <ProcessCommand+0x2e8>)
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff f8fd 	bl	8000240 <strcmp>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d163      	bne.n	8001114 <ProcessCommand+0x108>
				if (!engineOn) {
 800104c:	4baa      	ldr	r3, [pc, #680]	@ (80012f8 <ProcessCommand+0x2ec>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d12a      	bne.n	80010aa <ProcessCommand+0x9e>
					HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001054:	213c      	movs	r1, #60	@ 0x3c
 8001056:	48a9      	ldr	r0, [pc, #676]	@ (80012fc <ProcessCommand+0x2f0>)
 8001058:	f004 fb22 	bl	80056a0 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800105c:	213c      	movs	r1, #60	@ 0x3c
 800105e:	48a8      	ldr	r0, [pc, #672]	@ (8001300 <ProcessCommand+0x2f4>)
 8001060:	f004 fb1e 	bl	80056a0 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	48a7      	ldr	r0, [pc, #668]	@ (8001304 <ProcessCommand+0x2f8>)
 8001068:	f004 fb1a 	bl	80056a0 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800106c:	213c      	movs	r1, #60	@ 0x3c
 800106e:	48a6      	ldr	r0, [pc, #664]	@ (8001308 <ProcessCommand+0x2fc>)
 8001070:	f004 fb16 	bl	80056a0 <HAL_TIM_Encoder_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001074:	2100      	movs	r1, #0
 8001076:	48a5      	ldr	r0, [pc, #660]	@ (800130c <ProcessCommand+0x300>)
 8001078:	f004 f890 	bl	800519c <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800107c:	210c      	movs	r1, #12
 800107e:	48a3      	ldr	r0, [pc, #652]	@ (800130c <ProcessCommand+0x300>)
 8001080:	f004 f88c 	bl	800519c <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001084:	2100      	movs	r1, #0
 8001086:	48a2      	ldr	r0, [pc, #648]	@ (8001310 <ProcessCommand+0x304>)
 8001088:	f004 f888 	bl	800519c <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800108c:	210c      	movs	r1, #12
 800108e:	48a0      	ldr	r0, [pc, #640]	@ (8001310 <ProcessCommand+0x304>)
 8001090:	f004 f884 	bl	800519c <HAL_TIM_PWM_Start>
					HAL_TIM_Base_Start_IT(&htim6);
 8001094:	489f      	ldr	r0, [pc, #636]	@ (8001314 <ProcessCommand+0x308>)
 8001096:	f003 ff83 	bl	8004fa0 <HAL_TIM_Base_Start_IT>
					HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800109a:	2104      	movs	r1, #4
 800109c:	489e      	ldr	r0, [pc, #632]	@ (8001318 <ProcessCommand+0x30c>)
 800109e:	f004 f87d 	bl	800519c <HAL_TIM_PWM_Start>
					engineOn = 1;
 80010a2:	4b95      	ldr	r3, [pc, #596]	@ (80012f8 <ProcessCommand+0x2ec>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e02c      	b.n	8001104 <ProcessCommand+0xf8>
				ResetMotor(&motorA);
 80010aa:	489c      	ldr	r0, [pc, #624]	@ (800131c <ProcessCommand+0x310>)
 80010ac:	f7ff fcc2 	bl	8000a34 <ResetMotor>
				HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80010b0:	213c      	movs	r1, #60	@ 0x3c
 80010b2:	4892      	ldr	r0, [pc, #584]	@ (80012fc <ProcessCommand+0x2f0>)
 80010b4:	f004 fb82 	bl	80057bc <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 80010b8:	213c      	movs	r1, #60	@ 0x3c
 80010ba:	4891      	ldr	r0, [pc, #580]	@ (8001300 <ProcessCommand+0x2f4>)
 80010bc:	f004 fb7e 	bl	80057bc <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 80010c0:	213c      	movs	r1, #60	@ 0x3c
 80010c2:	4890      	ldr	r0, [pc, #576]	@ (8001304 <ProcessCommand+0x2f8>)
 80010c4:	f004 fb7a 	bl	80057bc <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim8, TIM_CHANNEL_ALL);
 80010c8:	213c      	movs	r1, #60	@ 0x3c
 80010ca:	488f      	ldr	r0, [pc, #572]	@ (8001308 <ProcessCommand+0x2fc>)
 80010cc:	f004 fb76 	bl	80057bc <HAL_TIM_Encoder_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80010d0:	2100      	movs	r1, #0
 80010d2:	488e      	ldr	r0, [pc, #568]	@ (800130c <ProcessCommand+0x300>)
 80010d4:	f004 f95c 	bl	8005390 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80010d8:	210c      	movs	r1, #12
 80010da:	488c      	ldr	r0, [pc, #560]	@ (800130c <ProcessCommand+0x300>)
 80010dc:	f004 f958 	bl	8005390 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 80010e0:	2100      	movs	r1, #0
 80010e2:	488b      	ldr	r0, [pc, #556]	@ (8001310 <ProcessCommand+0x304>)
 80010e4:	f004 f954 	bl	8005390 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 80010e8:	210c      	movs	r1, #12
 80010ea:	4889      	ldr	r0, [pc, #548]	@ (8001310 <ProcessCommand+0x304>)
 80010ec:	f004 f950 	bl	8005390 <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim6);
 80010f0:	4888      	ldr	r0, [pc, #544]	@ (8001314 <ProcessCommand+0x308>)
 80010f2:	f003 ffcd 	bl	8005090 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 80010f6:	2104      	movs	r1, #4
 80010f8:	4887      	ldr	r0, [pc, #540]	@ (8001318 <ProcessCommand+0x30c>)
 80010fa:	f004 f949 	bl	8005390 <HAL_TIM_PWM_Stop>
				engineOn = 0;
 80010fe:	4b7e      	ldr	r3, [pc, #504]	@ (80012f8 <ProcessCommand+0x2ec>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"ENGINE RUNNING\r\n", 16, HAL_MAX_DELAY);
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	2210      	movs	r2, #16
 800110a:	4985      	ldr	r1, [pc, #532]	@ (8001320 <ProcessCommand+0x314>)
 800110c:	4885      	ldr	r0, [pc, #532]	@ (8001324 <ProcessCommand+0x318>)
 800110e:	f005 fd93 	bl	8006c38 <HAL_UART_Transmit>
}
 8001112:	e18e      	b.n	8001432 <ProcessCommand+0x426>
		else if (strcmp((char*)cmd, "CMDA") == 0) {
 8001114:	4984      	ldr	r1, [pc, #528]	@ (8001328 <ProcessCommand+0x31c>)
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff f892 	bl	8000240 <strcmp>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10b      	bne.n	800113a <ProcessCommand+0x12e>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8001122:	2101      	movs	r1, #1
 8001124:	4881      	ldr	r0, [pc, #516]	@ (800132c <ProcessCommand+0x320>)
 8001126:	f002 fbc2 	bl	80038ae <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart3, (uint8_t*)"LIGHTS RUNNING\r\n", 16, HAL_MAX_DELAY);
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2210      	movs	r2, #16
 8001130:	497f      	ldr	r1, [pc, #508]	@ (8001330 <ProcessCommand+0x324>)
 8001132:	487c      	ldr	r0, [pc, #496]	@ (8001324 <ProcessCommand+0x318>)
 8001134:	f005 fd80 	bl	8006c38 <HAL_UART_Transmit>
}
 8001138:	e17b      	b.n	8001432 <ProcessCommand+0x426>
	    else if (strcmp((char*)cmd, "CMDB") == 0) {
 800113a:	497e      	ldr	r1, [pc, #504]	@ (8001334 <ProcessCommand+0x328>)
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f87f 	bl	8000240 <strcmp>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d119      	bne.n	800117c <ProcessCommand+0x170>
	    	if (!hornOn) {
 8001148:	4b7b      	ldr	r3, [pc, #492]	@ (8001338 <ProcessCommand+0x32c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d107      	bne.n	8001160 <ProcessCommand+0x154>
		    	Set_PWM_Frequency(1000);
 8001150:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001154:	f7ff ff28 	bl	8000fa8 <Set_PWM_Frequency>
		    	hornOn = 1;
 8001158:	4b77      	ldr	r3, [pc, #476]	@ (8001338 <ProcessCommand+0x32c>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e005      	b.n	800116c <ProcessCommand+0x160>
	    		Set_PWM_Frequency(0);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ff21 	bl	8000fa8 <Set_PWM_Frequency>
	    		hornOn = 0;
 8001166:	4b74      	ldr	r3, [pc, #464]	@ (8001338 <ProcessCommand+0x32c>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"HORN RUNNING\r\n", 14, HAL_MAX_DELAY);
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	220e      	movs	r2, #14
 8001172:	4972      	ldr	r1, [pc, #456]	@ (800133c <ProcessCommand+0x330>)
 8001174:	486b      	ldr	r0, [pc, #428]	@ (8001324 <ProcessCommand+0x318>)
 8001176:	f005 fd5f 	bl	8006c38 <HAL_UART_Transmit>
}
 800117a:	e15a      	b.n	8001432 <ProcessCommand+0x426>
	    else if (strcmp((char*)cmd, "CMDC") == 0) {
 800117c:	4970      	ldr	r1, [pc, #448]	@ (8001340 <ProcessCommand+0x334>)
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff f85e 	bl	8000240 <strcmp>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10d      	bne.n	80011a6 <ProcessCommand+0x19a>
	    	MotorABS(&motorA);
 800118a:	4864      	ldr	r0, [pc, #400]	@ (800131c <ProcessCommand+0x310>)
 800118c:	f7ff fc9e 	bl	8000acc <MotorABS>
	    	MotorABS(&motorB);
 8001190:	486c      	ldr	r0, [pc, #432]	@ (8001344 <ProcessCommand+0x338>)
 8001192:	f7ff fc9b 	bl	8000acc <MotorABS>
			HAL_UART_Transmit(&huart3, (uint8_t*)"ABS!!!\r\n", 8, HAL_MAX_DELAY);
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	2208      	movs	r2, #8
 800119c:	496a      	ldr	r1, [pc, #424]	@ (8001348 <ProcessCommand+0x33c>)
 800119e:	4861      	ldr	r0, [pc, #388]	@ (8001324 <ProcessCommand+0x318>)
 80011a0:	f005 fd4a 	bl	8006c38 <HAL_UART_Transmit>
}
 80011a4:	e145      	b.n	8001432 <ProcessCommand+0x426>
	    else if (strncmp((char*)cmd, "CMD", 3) == 0) {
 80011a6:	2203      	movs	r2, #3
 80011a8:	4968      	ldr	r1, [pc, #416]	@ (800134c <ProcessCommand+0x340>)
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f00a f9d6 	bl	800b55c <strncmp>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 8136 	bne.w	8001424 <ProcessCommand+0x418>
	        char* modeStr = (char*)cmd + 3;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3303      	adds	r3, #3
 80011bc:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f00a f93c 	bl	800b43c <atoi>
 80011c4:	60b8      	str	r0, [r7, #8]
	        if (mode >= 1 && mode <= 9) {
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f340 8123 	ble.w	8001414 <ProcessCommand+0x408>
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	f300 811f 	bgt.w	8001414 <ProcessCommand+0x408>
	            switch (mode) {
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3b01      	subs	r3, #1
 80011da:	2b08      	cmp	r3, #8
 80011dc:	f200 8117 	bhi.w	800140e <ProcessCommand+0x402>
 80011e0:	a201      	add	r2, pc, #4	@ (adr r2, 80011e8 <ProcessCommand+0x1dc>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	0800120d 	.word	0x0800120d
 80011ec:	08001231 	.word	0x08001231
 80011f0:	08001255 	.word	0x08001255
 80011f4:	08001279 	.word	0x08001279
 80011f8:	080012b3 	.word	0x080012b3
 80011fc:	08001369 	.word	0x08001369
 8001200:	080013a3 	.word	0x080013a3
 8001204:	080013c7 	.word	0x080013c7
 8001208:	080013eb 	.word	0x080013eb
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	2212      	movs	r2, #18
 8001212:	494f      	ldr	r1, [pc, #316]	@ (8001350 <ProcessCommand+0x344>)
 8001214:	4843      	ldr	r0, [pc, #268]	@ (8001324 <ProcessCommand+0x318>)
 8001216:	f005 fd0f 	bl	8006c38 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, DEFAULT, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	483f      	ldr	r0, [pc, #252]	@ (800131c <ProcessCommand+0x310>)
 8001220:	f7ff fc39 	bl	8000a96 <motor_set_speed>
	                    motor_set_speed(&motorB, DEFAULT, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	4846      	ldr	r0, [pc, #280]	@ (8001344 <ProcessCommand+0x338>)
 800122a:	f7ff fc34 	bl	8000a96 <motor_set_speed>
	                    break;
 800122e:	e0ef      	b.n	8001410 <ProcessCommand+0x404>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	2212      	movs	r2, #18
 8001236:	4947      	ldr	r1, [pc, #284]	@ (8001354 <ProcessCommand+0x348>)
 8001238:	483a      	ldr	r0, [pc, #232]	@ (8001324 <ProcessCommand+0x318>)
 800123a:	f005 fcfd 	bl	8006c38 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 93);
 800123e:	225d      	movs	r2, #93	@ 0x5d
 8001240:	2101      	movs	r1, #1
 8001242:	4836      	ldr	r0, [pc, #216]	@ (800131c <ProcessCommand+0x310>)
 8001244:	f7ff fc27 	bl	8000a96 <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 8001248:	2264      	movs	r2, #100	@ 0x64
 800124a:	2101      	movs	r1, #1
 800124c:	483d      	ldr	r0, [pc, #244]	@ (8001344 <ProcessCommand+0x338>)
 800124e:	f7ff fc22 	bl	8000a96 <motor_set_speed>
	                    break;
 8001252:	e0dd      	b.n	8001410 <ProcessCommand+0x404>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	2212      	movs	r2, #18
 800125a:	493f      	ldr	r1, [pc, #252]	@ (8001358 <ProcessCommand+0x34c>)
 800125c:	4831      	ldr	r0, [pc, #196]	@ (8001324 <ProcessCommand+0x318>)
 800125e:	f005 fceb 	bl	8006c38 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 50);
 8001262:	2232      	movs	r2, #50	@ 0x32
 8001264:	2101      	movs	r1, #1
 8001266:	482d      	ldr	r0, [pc, #180]	@ (800131c <ProcessCommand+0x310>)
 8001268:	f7ff fc15 	bl	8000a96 <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 800126c:	2264      	movs	r2, #100	@ 0x64
 800126e:	2101      	movs	r1, #1
 8001270:	4834      	ldr	r0, [pc, #208]	@ (8001344 <ProcessCommand+0x338>)
 8001272:	f7ff fc10 	bl	8000a96 <motor_set_speed>
	                    break;
 8001276:	e0cb      	b.n	8001410 <ProcessCommand+0x404>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2212      	movs	r2, #18
 800127e:	4937      	ldr	r1, [pc, #220]	@ (800135c <ProcessCommand+0x350>)
 8001280:	4828      	ldr	r0, [pc, #160]	@ (8001324 <ProcessCommand+0x318>)
 8001282:	f005 fcd9 	bl	8006c38 <HAL_UART_Transmit>
	                    if (Distance <= 10) {
 8001286:	4b36      	ldr	r3, [pc, #216]	@ (8001360 <ProcessCommand+0x354>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b0a      	cmp	r3, #10
 800128c:	dc06      	bgt.n	800129c <ProcessCommand+0x290>
	                    	MotorABS(&motorA);
 800128e:	4823      	ldr	r0, [pc, #140]	@ (800131c <ProcessCommand+0x310>)
 8001290:	f7ff fc1c 	bl	8000acc <MotorABS>
	                    	MotorABS(&motorB);
 8001294:	482b      	ldr	r0, [pc, #172]	@ (8001344 <ProcessCommand+0x338>)
 8001296:	f7ff fc19 	bl	8000acc <MotorABS>
	                    	break;
 800129a:	e0b9      	b.n	8001410 <ProcessCommand+0x404>
	                    motor_set_speed(&motorA, BACK, 100);
 800129c:	2264      	movs	r2, #100	@ 0x64
 800129e:	2102      	movs	r1, #2
 80012a0:	481e      	ldr	r0, [pc, #120]	@ (800131c <ProcessCommand+0x310>)
 80012a2:	f7ff fbf8 	bl	8000a96 <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 80012a6:	2264      	movs	r2, #100	@ 0x64
 80012a8:	2101      	movs	r1, #1
 80012aa:	4826      	ldr	r0, [pc, #152]	@ (8001344 <ProcessCommand+0x338>)
 80012ac:	f7ff fbf3 	bl	8000a96 <motor_set_speed>
	                    break;
 80012b0:	e0ae      	b.n	8001410 <ProcessCommand+0x404>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	2212      	movs	r2, #18
 80012b8:	492a      	ldr	r1, [pc, #168]	@ (8001364 <ProcessCommand+0x358>)
 80012ba:	481a      	ldr	r0, [pc, #104]	@ (8001324 <ProcessCommand+0x318>)
 80012bc:	f005 fcbc 	bl	8006c38 <HAL_UART_Transmit>
	                    if (Distance <= 10) {
 80012c0:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <ProcessCommand+0x354>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b0a      	cmp	r3, #10
 80012c6:	dc06      	bgt.n	80012d6 <ProcessCommand+0x2ca>
	                    	MotorABS(&motorA);
 80012c8:	4814      	ldr	r0, [pc, #80]	@ (800131c <ProcessCommand+0x310>)
 80012ca:	f7ff fbff 	bl	8000acc <MotorABS>
	                    	MotorABS(&motorB);
 80012ce:	481d      	ldr	r0, [pc, #116]	@ (8001344 <ProcessCommand+0x338>)
 80012d0:	f7ff fbfc 	bl	8000acc <MotorABS>
	                    	break;
 80012d4:	e09c      	b.n	8001410 <ProcessCommand+0x404>
	                    motor_set_speed(&motorA, BACK, 50);
 80012d6:	2232      	movs	r2, #50	@ 0x32
 80012d8:	2102      	movs	r1, #2
 80012da:	4810      	ldr	r0, [pc, #64]	@ (800131c <ProcessCommand+0x310>)
 80012dc:	f7ff fbdb 	bl	8000a96 <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 80012e0:	2264      	movs	r2, #100	@ 0x64
 80012e2:	2102      	movs	r1, #2
 80012e4:	4817      	ldr	r0, [pc, #92]	@ (8001344 <ProcessCommand+0x338>)
 80012e6:	f7ff fbd6 	bl	8000a96 <motor_set_speed>
	                    break;
 80012ea:	e091      	b.n	8001410 <ProcessCommand+0x404>
 80012ec:	0800b640 	.word	0x0800b640
 80012f0:	40020400 	.word	0x40020400
 80012f4:	0800b648 	.word	0x0800b648
 80012f8:	20000158 	.word	0x20000158
 80012fc:	2000015c 	.word	0x2000015c
 8001300:	200001f4 	.word	0x200001f4
 8001304:	20000240 	.word	0x20000240
 8001308:	20000324 	.word	0x20000324
 800130c:	200001a8 	.word	0x200001a8
 8001310:	2000028c 	.word	0x2000028c
 8001314:	200002d8 	.word	0x200002d8
 8001318:	200003bc 	.word	0x200003bc
 800131c:	200000dc 	.word	0x200000dc
 8001320:	0800b650 	.word	0x0800b650
 8001324:	20000490 	.word	0x20000490
 8001328:	0800b664 	.word	0x0800b664
 800132c:	40021800 	.word	0x40021800
 8001330:	0800b66c 	.word	0x0800b66c
 8001334:	0800b680 	.word	0x0800b680
 8001338:	20000154 	.word	0x20000154
 800133c:	0800b688 	.word	0x0800b688
 8001340:	0800b698 	.word	0x0800b698
 8001344:	20000118 	.word	0x20000118
 8001348:	0800b6a0 	.word	0x0800b6a0
 800134c:	0800b6ac 	.word	0x0800b6ac
 8001350:	0800b6b0 	.word	0x0800b6b0
 8001354:	0800b6c4 	.word	0x0800b6c4
 8001358:	0800b6d8 	.word	0x0800b6d8
 800135c:	0800b6ec 	.word	0x0800b6ec
 8001360:	200000d8 	.word	0x200000d8
 8001364:	0800b700 	.word	0x0800b700
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	2212      	movs	r2, #18
 800136e:	4933      	ldr	r1, [pc, #204]	@ (800143c <ProcessCommand+0x430>)
 8001370:	4833      	ldr	r0, [pc, #204]	@ (8001440 <ProcessCommand+0x434>)
 8001372:	f005 fc61 	bl	8006c38 <HAL_UART_Transmit>
	                    if (Distance <= 10) {
 8001376:	4b33      	ldr	r3, [pc, #204]	@ (8001444 <ProcessCommand+0x438>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b0a      	cmp	r3, #10
 800137c:	dc06      	bgt.n	800138c <ProcessCommand+0x380>
	                    	MotorABS(&motorA);
 800137e:	4832      	ldr	r0, [pc, #200]	@ (8001448 <ProcessCommand+0x43c>)
 8001380:	f7ff fba4 	bl	8000acc <MotorABS>
	                    	MotorABS(&motorB);
 8001384:	4831      	ldr	r0, [pc, #196]	@ (800144c <ProcessCommand+0x440>)
 8001386:	f7ff fba1 	bl	8000acc <MotorABS>
	                    	break;
 800138a:	e041      	b.n	8001410 <ProcessCommand+0x404>
	                    motor_set_speed(&motorA, BACK, 100);
 800138c:	2264      	movs	r2, #100	@ 0x64
 800138e:	2102      	movs	r1, #2
 8001390:	482d      	ldr	r0, [pc, #180]	@ (8001448 <ProcessCommand+0x43c>)
 8001392:	f7ff fb80 	bl	8000a96 <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 8001396:	2264      	movs	r2, #100	@ 0x64
 8001398:	2102      	movs	r1, #2
 800139a:	482c      	ldr	r0, [pc, #176]	@ (800144c <ProcessCommand+0x440>)
 800139c:	f7ff fb7b 	bl	8000a96 <motor_set_speed>
	                    break;
 80013a0:	e036      	b.n	8001410 <ProcessCommand+0x404>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	2212      	movs	r2, #18
 80013a8:	4929      	ldr	r1, [pc, #164]	@ (8001450 <ProcessCommand+0x444>)
 80013aa:	4825      	ldr	r0, [pc, #148]	@ (8001440 <ProcessCommand+0x434>)
 80013ac:	f005 fc44 	bl	8006c38 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 80013b0:	2264      	movs	r2, #100	@ 0x64
 80013b2:	2102      	movs	r1, #2
 80013b4:	4824      	ldr	r0, [pc, #144]	@ (8001448 <ProcessCommand+0x43c>)
 80013b6:	f7ff fb6e 	bl	8000a96 <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 50);
 80013ba:	2232      	movs	r2, #50	@ 0x32
 80013bc:	2102      	movs	r1, #2
 80013be:	4823      	ldr	r0, [pc, #140]	@ (800144c <ProcessCommand+0x440>)
 80013c0:	f7ff fb69 	bl	8000a96 <motor_set_speed>
	                    break;
 80013c4:	e024      	b.n	8001410 <ProcessCommand+0x404>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2212      	movs	r2, #18
 80013cc:	4921      	ldr	r1, [pc, #132]	@ (8001454 <ProcessCommand+0x448>)
 80013ce:	481c      	ldr	r0, [pc, #112]	@ (8001440 <ProcessCommand+0x434>)
 80013d0:	f005 fc32 	bl	8006c38 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 80013d4:	2264      	movs	r2, #100	@ 0x64
 80013d6:	2101      	movs	r1, #1
 80013d8:	481b      	ldr	r0, [pc, #108]	@ (8001448 <ProcessCommand+0x43c>)
 80013da:	f7ff fb5c 	bl	8000a96 <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 80013de:	2264      	movs	r2, #100	@ 0x64
 80013e0:	2102      	movs	r1, #2
 80013e2:	481a      	ldr	r0, [pc, #104]	@ (800144c <ProcessCommand+0x440>)
 80013e4:	f7ff fb57 	bl	8000a96 <motor_set_speed>
	                    break;
 80013e8:	e012      	b.n	8001410 <ProcessCommand+0x404>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	2212      	movs	r2, #18
 80013f0:	4919      	ldr	r1, [pc, #100]	@ (8001458 <ProcessCommand+0x44c>)
 80013f2:	4813      	ldr	r0, [pc, #76]	@ (8001440 <ProcessCommand+0x434>)
 80013f4:	f005 fc20 	bl	8006c38 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 80013f8:	2264      	movs	r2, #100	@ 0x64
 80013fa:	2101      	movs	r1, #1
 80013fc:	4812      	ldr	r0, [pc, #72]	@ (8001448 <ProcessCommand+0x43c>)
 80013fe:	f7ff fb4a 	bl	8000a96 <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 50);
 8001402:	2232      	movs	r2, #50	@ 0x32
 8001404:	2101      	movs	r1, #1
 8001406:	4811      	ldr	r0, [pc, #68]	@ (800144c <ProcessCommand+0x440>)
 8001408:	f7ff fb45 	bl	8000a96 <motor_set_speed>
	                    break;
 800140c:	e000      	b.n	8001410 <ProcessCommand+0x404>
	                    break;
 800140e:	bf00      	nop
	            switch (mode) {
 8001410:	bf00      	nop
}
 8001412:	e00e      	b.n	8001432 <ProcessCommand+0x426>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	2215      	movs	r2, #21
 800141a:	4910      	ldr	r1, [pc, #64]	@ (800145c <ProcessCommand+0x450>)
 800141c:	4808      	ldr	r0, [pc, #32]	@ (8001440 <ProcessCommand+0x434>)
 800141e:	f005 fc0b 	bl	8006c38 <HAL_UART_Transmit>
}
 8001422:	e006      	b.n	8001432 <ProcessCommand+0x426>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	2211      	movs	r2, #17
 800142a:	490d      	ldr	r1, [pc, #52]	@ (8001460 <ProcessCommand+0x454>)
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <ProcessCommand+0x434>)
 800142e:	f005 fc03 	bl	8006c38 <HAL_UART_Transmit>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	0800b714 	.word	0x0800b714
 8001440:	20000490 	.word	0x20000490
 8001444:	200000d8 	.word	0x200000d8
 8001448:	200000dc 	.word	0x200000dc
 800144c:	20000118 	.word	0x20000118
 8001450:	0800b728 	.word	0x0800b728
 8001454:	0800b73c 	.word	0x0800b73c
 8001458:	0800b750 	.word	0x0800b750
 800145c:	0800b764 	.word	0x0800b764
 8001460:	0800b77c 	.word	0x0800b77c
 8001464:	00000000 	.word	0x00000000

08001468 <DistanceSensor>:

void DistanceSensor(void*) {
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Start(&htim9);
 8001470:	4873      	ldr	r0, [pc, #460]	@ (8001640 <DistanceSensor+0x1d8>)
 8001472:	f003 fd25 	bl	8004ec0 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2140      	movs	r1, #64	@ 0x40
 800147a:	4872      	ldr	r0, [pc, #456]	@ (8001644 <DistanceSensor+0x1dc>)
 800147c:	f002 f9fe 	bl	800387c <HAL_GPIO_WritePin>

    while (1) {
        // Wysyłanie impulsu trigger
        HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2140      	movs	r1, #64	@ 0x40
 8001484:	486f      	ldr	r0, [pc, #444]	@ (8001644 <DistanceSensor+0x1dc>)
 8001486:	f002 f9f9 	bl	800387c <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COUNTER(&htim9, 0);
 800148a:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <DistanceSensor+0x1d8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	@ 0x24
        while (__HAL_TIM_GET_COUNTER(&htim9) < 10);
 8001492:	bf00      	nop
 8001494:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <DistanceSensor+0x1d8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	2b09      	cmp	r3, #9
 800149c:	d9fa      	bls.n	8001494 <DistanceSensor+0x2c>
        HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2140      	movs	r1, #64	@ 0x40
 80014a2:	4868      	ldr	r0, [pc, #416]	@ (8001644 <DistanceSensor+0x1dc>)
 80014a4:	f002 f9ea 	bl	800387c <HAL_GPIO_WritePin>

        // Pomiar czasu narastającego zbocza ECHO
        pMillis = HAL_GetTick();
 80014a8:	f001 fb66 	bl	8002b78 <HAL_GetTick>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a66      	ldr	r2, [pc, #408]	@ (8001648 <DistanceSensor+0x1e0>)
 80014b0:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DETECTOR_ECHO_GPIO_Port, DETECTOR_ECHO_Pin)) && pMillis + 10 > HAL_GetTick());
 80014b2:	bf00      	nop
 80014b4:	2120      	movs	r1, #32
 80014b6:	4863      	ldr	r0, [pc, #396]	@ (8001644 <DistanceSensor+0x1dc>)
 80014b8:	f002 f9c8 	bl	800384c <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d108      	bne.n	80014d4 <DistanceSensor+0x6c>
 80014c2:	4b61      	ldr	r3, [pc, #388]	@ (8001648 <DistanceSensor+0x1e0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f103 040a 	add.w	r4, r3, #10
 80014ca:	f001 fb55 	bl	8002b78 <HAL_GetTick>
 80014ce:	4603      	mov	r3, r0
 80014d0:	429c      	cmp	r4, r3
 80014d2:	d8ef      	bhi.n	80014b4 <DistanceSensor+0x4c>
        Value1 = __HAL_TIM_GET_COUNTER(&htim9);
 80014d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001640 <DistanceSensor+0x1d8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	4a5c      	ldr	r2, [pc, #368]	@ (800164c <DistanceSensor+0x1e4>)
 80014dc:	6013      	str	r3, [r2, #0]

        // Pomiar czasu opadającego zbocza ECHO
        pMillis = HAL_GetTick();
 80014de:	f001 fb4b 	bl	8002b78 <HAL_GetTick>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a58      	ldr	r2, [pc, #352]	@ (8001648 <DistanceSensor+0x1e0>)
 80014e6:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DETECTOR_ECHO_GPIO_Port, DETECTOR_ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 80014e8:	bf00      	nop
 80014ea:	2120      	movs	r1, #32
 80014ec:	4855      	ldr	r0, [pc, #340]	@ (8001644 <DistanceSensor+0x1dc>)
 80014ee:	f002 f9ad 	bl	800384c <HAL_GPIO_ReadPin>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <DistanceSensor+0xa2>
 80014f8:	4b53      	ldr	r3, [pc, #332]	@ (8001648 <DistanceSensor+0x1e0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8001500:	f001 fb3a 	bl	8002b78 <HAL_GetTick>
 8001504:	4603      	mov	r3, r0
 8001506:	429c      	cmp	r4, r3
 8001508:	d8ef      	bhi.n	80014ea <DistanceSensor+0x82>
        Value2 = __HAL_TIM_GET_COUNTER(&htim9);
 800150a:	4b4d      	ldr	r3, [pc, #308]	@ (8001640 <DistanceSensor+0x1d8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001510:	461a      	mov	r2, r3
 8001512:	4b4f      	ldr	r3, [pc, #316]	@ (8001650 <DistanceSensor+0x1e8>)
 8001514:	601a      	str	r2, [r3, #0]

        // Obliczanie dystansu
        Distance = (Value2 - Value1) * 0.034 / 2;
 8001516:	4b4e      	ldr	r3, [pc, #312]	@ (8001650 <DistanceSensor+0x1e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <DistanceSensor+0x1e4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800152a:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8001638 <DistanceSensor+0x1d0>
 800152e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001532:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001536:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800153a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800153e:	ee17 2a90 	vmov	r2, s15
 8001542:	4b44      	ldr	r3, [pc, #272]	@ (8001654 <DistanceSensor+0x1ec>)
 8001544:	601a      	str	r2, [r3, #0]

        if (Distance > 10 && Distance <= 30) {
 8001546:	4b43      	ldr	r3, [pc, #268]	@ (8001654 <DistanceSensor+0x1ec>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b0a      	cmp	r3, #10
 800154c:	dd2d      	ble.n	80015aa <DistanceSensor+0x142>
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <DistanceSensor+0x1ec>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b1e      	cmp	r3, #30
 8001554:	dc29      	bgt.n	80015aa <DistanceSensor+0x142>
        	// Włączanie dźwięku co 0.5s
        	Set_PWM_Frequency(1000);
 8001556:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800155a:	f7ff fd25 	bl	8000fa8 <Set_PWM_Frequency>
            HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800155e:	2101      	movs	r1, #1
 8001560:	483d      	ldr	r0, [pc, #244]	@ (8001658 <DistanceSensor+0x1f0>)
 8001562:	f002 f9a4 	bl	80038ae <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	483b      	ldr	r0, [pc, #236]	@ (8001658 <DistanceSensor+0x1f0>)
 800156a:	f002 f9a0 	bl	80038ae <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800156e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001572:	4839      	ldr	r0, [pc, #228]	@ (8001658 <DistanceSensor+0x1f0>)
 8001574:	f002 f99b 	bl	80038ae <HAL_GPIO_TogglePin>
            osDelay(500);
 8001578:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800157c:	f007 fa70 	bl	8008a60 <osDelay>
        	Set_PWM_Frequency(0);
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff fd11 	bl	8000fa8 <Set_PWM_Frequency>
            HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001586:	2101      	movs	r1, #1
 8001588:	4833      	ldr	r0, [pc, #204]	@ (8001658 <DistanceSensor+0x1f0>)
 800158a:	f002 f990 	bl	80038ae <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800158e:	2180      	movs	r1, #128	@ 0x80
 8001590:	4831      	ldr	r0, [pc, #196]	@ (8001658 <DistanceSensor+0x1f0>)
 8001592:	f002 f98c 	bl	80038ae <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001596:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800159a:	482f      	ldr	r0, [pc, #188]	@ (8001658 <DistanceSensor+0x1f0>)
 800159c:	f002 f987 	bl	80038ae <HAL_GPIO_TogglePin>
            osDelay(500);
 80015a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015a4:	f007 fa5c 	bl	8008a60 <osDelay>
 80015a8:	e043      	b.n	8001632 <DistanceSensor+0x1ca>
        }

        else if (Distance > 0 && Distance <= 10) {
 80015aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <DistanceSensor+0x1ec>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	dd2b      	ble.n	800160a <DistanceSensor+0x1a2>
 80015b2:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <DistanceSensor+0x1ec>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	dc27      	bgt.n	800160a <DistanceSensor+0x1a2>
            // Włączanie dźwięku i miganie diod co 0.1s
        	Set_PWM_Frequency(1000);
 80015ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015be:	f7ff fcf3 	bl	8000fa8 <Set_PWM_Frequency>
            HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80015c2:	2101      	movs	r1, #1
 80015c4:	4824      	ldr	r0, [pc, #144]	@ (8001658 <DistanceSensor+0x1f0>)
 80015c6:	f002 f972 	bl	80038ae <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015ca:	2180      	movs	r1, #128	@ 0x80
 80015cc:	4822      	ldr	r0, [pc, #136]	@ (8001658 <DistanceSensor+0x1f0>)
 80015ce:	f002 f96e 	bl	80038ae <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015d6:	4820      	ldr	r0, [pc, #128]	@ (8001658 <DistanceSensor+0x1f0>)
 80015d8:	f002 f969 	bl	80038ae <HAL_GPIO_TogglePin>
            osDelay(100);
 80015dc:	2064      	movs	r0, #100	@ 0x64
 80015de:	f007 fa3f 	bl	8008a60 <osDelay>
        	Set_PWM_Frequency(0);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fce0 	bl	8000fa8 <Set_PWM_Frequency>
            HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80015e8:	2101      	movs	r1, #1
 80015ea:	481b      	ldr	r0, [pc, #108]	@ (8001658 <DistanceSensor+0x1f0>)
 80015ec:	f002 f95f 	bl	80038ae <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015f0:	2180      	movs	r1, #128	@ 0x80
 80015f2:	4819      	ldr	r0, [pc, #100]	@ (8001658 <DistanceSensor+0x1f0>)
 80015f4:	f002 f95b 	bl	80038ae <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80015f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015fc:	4816      	ldr	r0, [pc, #88]	@ (8001658 <DistanceSensor+0x1f0>)
 80015fe:	f002 f956 	bl	80038ae <HAL_GPIO_TogglePin>
            osDelay(100);
 8001602:	2064      	movs	r0, #100	@ 0x64
 8001604:	f007 fa2c 	bl	8008a60 <osDelay>
 8001608:	e013      	b.n	8001632 <DistanceSensor+0x1ca>
        }

        else {
            // Wyłączanie diod i buzzera
            HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2101      	movs	r1, #1
 800160e:	4812      	ldr	r0, [pc, #72]	@ (8001658 <DistanceSensor+0x1f0>)
 8001610:	f002 f934 	bl	800387c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2180      	movs	r1, #128	@ 0x80
 8001618:	480f      	ldr	r0, [pc, #60]	@ (8001658 <DistanceSensor+0x1f0>)
 800161a:	f002 f92f 	bl	800387c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001624:	480c      	ldr	r0, [pc, #48]	@ (8001658 <DistanceSensor+0x1f0>)
 8001626:	f002 f929 	bl	800387c <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 800162a:	2100      	movs	r1, #0
 800162c:	480b      	ldr	r0, [pc, #44]	@ (800165c <DistanceSensor+0x1f4>)
 800162e:	f003 feaf 	bl	8005390 <HAL_TIM_PWM_Stop>
        HAL_GPIO_WritePin(DETECTOR_TRIGGER_GPIO_Port, DETECTOR_TRIGGER_Pin, GPIO_PIN_SET);
 8001632:	e725      	b.n	8001480 <DistanceSensor+0x18>
 8001634:	f3af 8000 	nop.w
 8001638:	b020c49c 	.word	0xb020c49c
 800163c:	3fa16872 	.word	0x3fa16872
 8001640:	20000370 	.word	0x20000370
 8001644:	40021000 	.word	0x40021000
 8001648:	200000cc 	.word	0x200000cc
 800164c:	200000d0 	.word	0x200000d0
 8001650:	200000d4 	.word	0x200000d4
 8001654:	200000d8 	.word	0x200000d8
 8001658:	40020400 	.word	0x40020400
 800165c:	200003bc 	.word	0x200003bc

08001660 <ProcessHeartBeat>:
    }
}



void ProcessHeartBeat(void* argument) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
    for (;;) {

    	if (!engineOn)
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <ProcessHeartBeat+0x54>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01f      	beq.n	80016b0 <ProcessHeartBeat+0x50>
    		continue;

    	int16_t data[5] = {motorA.measured_speed, motorB.measured_speed, motorA.set_speed, motorB.set_speed, Distance};
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <ProcessHeartBeat+0x58>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	b21b      	sxth	r3, r3
 8001676:	81bb      	strh	r3, [r7, #12]
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <ProcessHeartBeat+0x5c>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	b21b      	sxth	r3, r3
 800167e:	81fb      	strh	r3, [r7, #14]
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <ProcessHeartBeat+0x58>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	b21b      	sxth	r3, r3
 8001686:	823b      	strh	r3, [r7, #16]
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <ProcessHeartBeat+0x5c>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	b21b      	sxth	r3, r3
 800168e:	827b      	strh	r3, [r7, #18]
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <ProcessHeartBeat+0x60>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b21b      	sxth	r3, r3
 8001696:	82bb      	strh	r3, [r7, #20]
    	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), HAL_MAX_DELAY);
 8001698:	f107 010c 	add.w	r1, r7, #12
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	220a      	movs	r2, #10
 80016a2:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <ProcessHeartBeat+0x64>)
 80016a4:	f005 fac8 	bl	8006c38 <HAL_UART_Transmit>

        osDelay(100);
 80016a8:	2064      	movs	r0, #100	@ 0x64
 80016aa:	f007 f9d9 	bl	8008a60 <osDelay>
 80016ae:	e7db      	b.n	8001668 <ProcessHeartBeat+0x8>
    		continue;
 80016b0:	bf00      	nop
    for (;;) {
 80016b2:	e7d9      	b.n	8001668 <ProcessHeartBeat+0x8>
 80016b4:	20000158 	.word	0x20000158
 80016b8:	200000dc 	.word	0x200000dc
 80016bc:	20000118 	.word	0x20000118
 80016c0:	200000d8 	.word	0x200000d8
 80016c4:	20000408 	.word	0x20000408

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ce:	f001 fa02 	bl	8002ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d2:	f000 f841 	bl	8001758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d6:	f7fe ff83 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016da:	f7fe ff3b 	bl	8000554 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80016de:	f000 ffe1 	bl	80026a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016e2:	f001 f927 	bl	8002934 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 ffad 	bl	8002644 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016ea:	f000 f9fb 	bl	8001ae4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80016ee:	f000 fab7 	bl	8001c60 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016f2:	f000 fb0b 	bl	8001d0c <MX_TIM4_Init>
  MX_TIM8_Init();
 80016f6:	f000 fbfd 	bl	8001ef4 <MX_TIM8_Init>
  MX_TIM2_Init();
 80016fa:	f000 fa4d 	bl	8001b98 <MX_TIM2_Init>
  MX_TIM6_Init();
 80016fe:	f000 fbc1 	bl	8001e84 <MX_TIM6_Init>
  MX_TIM5_Init();
 8001702:	f000 fb59 	bl	8001db8 <MX_TIM5_Init>
  MX_TIM12_Init();
 8001706:	f000 fcab 	bl	8002060 <MX_TIM12_Init>
  MX_TIM9_Init();
 800170a:	f000 fc4d 	bl	8001fa8 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <main+0x80>)
 8001710:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7fe fd9e 	bl	8000254 <strlen>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	480a      	ldr	r0, [pc, #40]	@ (800174c <main+0x84>)
 8001724:	f005 fa88 	bl	8006c38 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	4909      	ldr	r1, [pc, #36]	@ (8001750 <main+0x88>)
 800172c:	4809      	ldr	r0, [pc, #36]	@ (8001754 <main+0x8c>)
 800172e:	f005 fb0c 	bl	8006d4a <HAL_UART_Receive_IT>

  Init_MotorSystem();
 8001732:	f7ff fbdd 	bl	8000ef0 <Init_MotorSystem>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001736:	f007 f883 	bl	8008840 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800173a:	f7fe ff31 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800173e:	f007 f8b3 	bl	80088a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001742:	bf00      	nop
 8001744:	e7fd      	b.n	8001742 <main+0x7a>
 8001746:	bf00      	nop
 8001748:	0800b790 	.word	0x0800b790
 800174c:	20000490 	.word	0x20000490
 8001750:	20000084 	.word	0x20000084
 8001754:	20000408 	.word	0x20000408

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b094      	sub	sp, #80	@ 0x50
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	2234      	movs	r2, #52	@ 0x34
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f009 fef0 	bl	800b54c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800177c:	f002 f9ec 	bl	8003b58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b2c      	ldr	r3, [pc, #176]	@ (8001834 <SystemClock_Config+0xdc>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	4a2b      	ldr	r2, [pc, #172]	@ (8001834 <SystemClock_Config+0xdc>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	@ 0x40
 800178c:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <SystemClock_Config+0xdc>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <SystemClock_Config+0xe0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017a0:	4a25      	ldr	r2, [pc, #148]	@ (8001838 <SystemClock_Config+0xe0>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <SystemClock_Config+0xe0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b4:	2301      	movs	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017b8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80017bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017be:	2302      	movs	r3, #2
 80017c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80017cc:	2360      	movs	r3, #96	@ 0x60
 80017ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017d4:	2304      	movs	r3, #4
 80017d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017d8:	2302      	movs	r3, #2
 80017da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fa19 	bl	8003c18 <HAL_RCC_OscConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017ec:	f000 f860 	bl	80018b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017f0:	f002 f9c2 	bl	8003b78 <HAL_PWREx_EnableOverDrive>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017fa:	f000 f859 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fe:	230f      	movs	r3, #15
 8001800:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001802:	2302      	movs	r3, #2
 8001804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800180a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	2103      	movs	r1, #3
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fcaa 	bl	8004174 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001826:	f000 f843 	bl	80018b0 <Error_Handler>
  }
}
 800182a:	bf00      	nop
 800182c:	3750      	adds	r7, #80	@ 0x50
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000

0800183c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a13      	ldr	r2, [pc, #76]	@ (8001898 <HAL_UART_RxCpltCallback+0x5c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d120      	bne.n	8001890 <HAL_UART_RxCpltCallback+0x54>
		HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	2201      	movs	r2, #1
 8001854:	4911      	ldr	r1, [pc, #68]	@ (800189c <HAL_UART_RxCpltCallback+0x60>)
 8001856:	4812      	ldr	r0, [pc, #72]	@ (80018a0 <HAL_UART_RxCpltCallback+0x64>)
 8001858:	f005 f9ee 	bl	8006c38 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 800185c:	2201      	movs	r2, #1
 800185e:	490f      	ldr	r1, [pc, #60]	@ (800189c <HAL_UART_RxCpltCallback+0x60>)
 8001860:	4810      	ldr	r0, [pc, #64]	@ (80018a4 <HAL_UART_RxCpltCallback+0x68>)
 8001862:	f005 fa72 	bl	8006d4a <HAL_UART_Receive_IT>
		rxBuff[rxIdx++] = rxData[0];
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <HAL_UART_RxCpltCallback+0x6c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	b2d1      	uxtb	r1, r2
 800186e:	4a0e      	ldr	r2, [pc, #56]	@ (80018a8 <HAL_UART_RxCpltCallback+0x6c>)
 8001870:	7011      	strb	r1, [r2, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_UART_RxCpltCallback+0x60>)
 8001876:	7819      	ldrb	r1, [r3, #0]
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <HAL_UART_RxCpltCallback+0x70>)
 800187a:	5499      	strb	r1, [r3, r2]

		if (rxIdx == 4) {
 800187c:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_UART_RxCpltCallback+0x6c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b04      	cmp	r3, #4
 8001882:	d105      	bne.n	8001890 <HAL_UART_RxCpltCallback+0x54>
			//HAL_UART_Transmit(&huart3, rxBuff, rxIdx, HAL_MAX_DELAY);
			ProcessCommand(rxBuff);
 8001884:	4809      	ldr	r0, [pc, #36]	@ (80018ac <HAL_UART_RxCpltCallback+0x70>)
 8001886:	f7ff fbc1 	bl	800100c <ProcessCommand>
			rxIdx = 0;
 800188a:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <HAL_UART_RxCpltCallback+0x6c>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40004400 	.word	0x40004400
 800189c:	20000084 	.word	0x20000084
 80018a0:	20000490 	.word	0x20000490
 80018a4:	20000408 	.word	0x20000408
 80018a8:	200000c8 	.word	0x200000c8
 80018ac:	20000088 	.word	0x20000088

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <Error_Handler+0x8>

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	4a10      	ldr	r2, [pc, #64]	@ (8001908 <HAL_MspInit+0x4c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	210f      	movs	r1, #15
 80018f6:	f06f 0001 	mvn.w	r0, #1
 80018fa:	f001 fa48 	bl	8002d8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <NMI_Handler+0x4>

08001914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <MemManage_Handler+0x4>

08001924 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <UsageFault_Handler+0x4>

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001946:	f001 f903 	bl	8002b50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800194a:	f008 fd03 	bl	800a354 <xTaskGetSchedulerState>
 800194e:	4603      	mov	r3, r0
 8001950:	2b01      	cmp	r3, #1
 8001952:	d001      	beq.n	8001958 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001954:	f009 faf0 	bl	800af38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA1_Stream5_IRQHandler+0x10>)
 8001962:	f001 fb8b 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000518 	.word	0x20000518

08001970 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA1_Stream6_IRQHandler+0x10>)
 8001976:	f001 fb81 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000578 	.word	0x20000578

08001984 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001988:	4803      	ldr	r0, [pc, #12]	@ (8001998 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800198a:	f003 ffbe 	bl	800590a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800198e:	4803      	ldr	r0, [pc, #12]	@ (800199c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001990:	f003 ffbb 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000015c 	.word	0x2000015c
 800199c:	20000370 	.word	0x20000370

080019a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019a6:	f003 ffb0 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000015c 	.word	0x2000015c

080019b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80019ba:	f003 ffa6 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000015c 	.word	0x2000015c

080019c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <TIM1_CC_IRQHandler+0x10>)
 80019ce:	f003 ff9c 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000015c 	.word	0x2000015c

080019dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <TIM2_IRQHandler+0x10>)
 80019e2:	f003 ff92 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200001a8 	.word	0x200001a8

080019f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <TIM3_IRQHandler+0x10>)
 80019f6:	f003 ff88 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200001f4 	.word	0x200001f4

08001a04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a08:	4802      	ldr	r0, [pc, #8]	@ (8001a14 <TIM4_IRQHandler+0x10>)
 8001a0a:	f003 ff7e 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000240 	.word	0x20000240

08001a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <USART2_IRQHandler+0x10>)
 8001a1e:	f005 f9d9 	bl	8006dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000408 	.word	0x20000408

08001a2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <USART3_IRQHandler+0x10>)
 8001a32:	f005 f9cf 	bl	8006dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000490 	.word	0x20000490

08001a40 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a44:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8001a46:	f003 ff60 	bl	800590a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8001a4a:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8001a4c:	f003 ff5d 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000324 	.word	0x20000324
 8001a58:	200003bc 	.word	0x200003bc

08001a5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001a62:	f003 ff52 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000324 	.word	0x20000324

08001a70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001a76:	f003 ff48 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000324 	.word	0x20000324

08001a84 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <TIM8_CC_IRQHandler+0x10>)
 8001a8a:	f003 ff3e 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000324 	.word	0x20000324

08001a98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <TIM5_IRQHandler+0x10>)
 8001a9e:	f003 ff34 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000028c 	.word	0x2000028c

08001aac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <TIM6_DAC_IRQHandler+0x10>)
 8001ab2:	f003 ff2a 	bl	800590a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200002d8 	.word	0x200002d8

08001ac0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <SystemInit+0x20>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aca:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <SystemInit+0x20>)
 8001acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	@ 0x30
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	2224      	movs	r2, #36	@ 0x24
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f009 fd2a 	bl	800b54c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	463b      	mov	r3, r7
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b02:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <MX_TIM1_Init+0xac>)
 8001b04:	4a23      	ldr	r2, [pc, #140]	@ (8001b94 <MX_TIM1_Init+0xb0>)
 8001b06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <MX_TIM1_Init+0xac>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <MX_TIM1_Init+0xac>)
 8001b10:	2210      	movs	r2, #16
 8001b12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <MX_TIM1_Init+0xac>)
 8001b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <MX_TIM1_Init+0xac>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <MX_TIM1_Init+0xac>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_TIM1_Init+0xac>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b36:	2301      	movs	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001b3e:	230f      	movs	r3, #15
 8001b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b46:	2301      	movs	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001b4e:	230f      	movs	r3, #15
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4619      	mov	r1, r3
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <MX_TIM1_Init+0xac>)
 8001b5a:	f003 fcfb 	bl	8005554 <HAL_TIM_Encoder_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001b64:	f7ff fea4 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b74:	463b      	mov	r3, r7
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <MX_TIM1_Init+0xac>)
 8001b7a:	f004 ff63 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b84:	f7ff fe94 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	3730      	adds	r7, #48	@ 0x30
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000015c 	.word	0x2000015c
 8001b94:	40010000 	.word	0x40010000

08001b98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001baa:	463b      	mov	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001bc6:	222f      	movs	r2, #47	@ 0x2f
 8001bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001be4:	481d      	ldr	r0, [pc, #116]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001be6:	f003 fa82 	bl	80050ee <HAL_TIM_PWM_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001bf0:	f7ff fe5e 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	4816      	ldr	r0, [pc, #88]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001c04:	f004 ff1e 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001c0e:	f7ff fe4f 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c12:	2360      	movs	r3, #96	@ 0x60
 8001c14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c22:	463b      	mov	r3, r7
 8001c24:	2200      	movs	r2, #0
 8001c26:	4619      	mov	r1, r3
 8001c28:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001c2a:	f004 f811 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001c34:	f7ff fe3c 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c38:	463b      	mov	r3, r7
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4807      	ldr	r0, [pc, #28]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001c40:	f004 f806 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001c4a:	f7ff fe31 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c4e:	4803      	ldr	r0, [pc, #12]	@ (8001c5c <MX_TIM2_Init+0xc4>)
 8001c50:	f000 fc5a 	bl	8002508 <HAL_TIM_MspPostInit>

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	@ 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200001a8 	.word	0x200001a8

08001c60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	2224      	movs	r2, #36	@ 0x24
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f009 fc6c 	bl	800b54c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	463b      	mov	r3, r7
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <MX_TIM3_Init+0xa4>)
 8001c80:	4a21      	ldr	r2, [pc, #132]	@ (8001d08 <MX_TIM3_Init+0xa8>)
 8001c82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <MX_TIM3_Init+0xa4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <MX_TIM3_Init+0xa4>)
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c90:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <MX_TIM3_Init+0xa4>)
 8001c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <MX_TIM3_Init+0xa4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <MX_TIM3_Init+0xa4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cac:	2301      	movs	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <MX_TIM3_Init+0xa4>)
 8001cd0:	f003 fc40 	bl	8005554 <HAL_TIM_Encoder_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001cda:	f7ff fde9 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4806      	ldr	r0, [pc, #24]	@ (8001d04 <MX_TIM3_Init+0xa4>)
 8001cec:	f004 feaa 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001cf6:	f7ff fddb 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	3730      	adds	r7, #48	@ 0x30
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200001f4 	.word	0x200001f4
 8001d08:	40000400 	.word	0x40000400

08001d0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	@ 0x30
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	2224      	movs	r2, #36	@ 0x24
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f009 fc16 	bl	800b54c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	463b      	mov	r3, r7
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <MX_TIM4_Init+0xa4>)
 8001d2c:	4a21      	ldr	r2, [pc, #132]	@ (8001db4 <MX_TIM4_Init+0xa8>)
 8001d2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d30:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <MX_TIM4_Init+0xa4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001d36:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <MX_TIM4_Init+0xa4>)
 8001d38:	2210      	movs	r2, #16
 8001d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <MX_TIM4_Init+0xa4>)
 8001d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <MX_TIM4_Init+0xa4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <MX_TIM4_Init+0xa4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d50:	2303      	movs	r3, #3
 8001d52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001d60:	230f      	movs	r3, #15
 8001d62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001d70:	230f      	movs	r3, #15
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480d      	ldr	r0, [pc, #52]	@ (8001db0 <MX_TIM4_Init+0xa4>)
 8001d7c:	f003 fbea 	bl	8005554 <HAL_TIM_Encoder_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d86:	f7ff fd93 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	@ (8001db0 <MX_TIM4_Init+0xa4>)
 8001d98:	f004 fe54 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001da2:	f7ff fd85 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	3730      	adds	r7, #48	@ 0x30
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000240 	.word	0x20000240
 8001db4:	40000800 	.word	0x40000800

08001db8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	@ 0x28
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dca:	463b      	mov	r3, r7
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	615a      	str	r2, [r3, #20]
 8001dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001dde:	4a28      	ldr	r2, [pc, #160]	@ (8001e80 <MX_TIM5_Init+0xc8>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001de2:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001de4:	222f      	movs	r2, #47	@ 0x2f
 8001de6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001dee:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001df0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001df4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e02:	481e      	ldr	r0, [pc, #120]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001e04:	f003 f973 	bl	80050ee <HAL_TIM_PWM_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001e0e:	f7ff fd4f 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4816      	ldr	r0, [pc, #88]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001e22:	f004 fe0f 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001e2c:	f7ff fd40 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e30:	2360      	movs	r3, #96	@ 0x60
 8001e32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e40:	463b      	mov	r3, r7
 8001e42:	2200      	movs	r2, #0
 8001e44:	4619      	mov	r1, r3
 8001e46:	480d      	ldr	r0, [pc, #52]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001e48:	f003 ff02 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001e52:	f7ff fd2d 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	220c      	movs	r2, #12
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4807      	ldr	r0, [pc, #28]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001e5e:	f003 fef7 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001e68:	f7ff fd22 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e6c:	4803      	ldr	r0, [pc, #12]	@ (8001e7c <MX_TIM5_Init+0xc4>)
 8001e6e:	f000 fb4b 	bl	8002508 <HAL_TIM_MspPostInit>

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	@ 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000028c 	.word	0x2000028c
 8001e80:	40000c00 	.word	0x40000c00

08001e84 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e94:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <MX_TIM6_Init+0x68>)
 8001e96:	4a16      	ldr	r2, [pc, #88]	@ (8001ef0 <MX_TIM6_Init+0x6c>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <MX_TIM6_Init+0x68>)
 8001e9c:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001ea0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <MX_TIM6_Init+0x68>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001ea8:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <MX_TIM6_Init+0x68>)
 8001eaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_TIM6_Init+0x68>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eb6:	480d      	ldr	r0, [pc, #52]	@ (8001eec <MX_TIM6_Init+0x68>)
 8001eb8:	f002 ffaa 	bl	8004e10 <HAL_TIM_Base_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ec2:	f7ff fcf5 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4806      	ldr	r0, [pc, #24]	@ (8001eec <MX_TIM6_Init+0x68>)
 8001ed4:	f004 fdb6 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001ede:	f7ff fce7 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200002d8 	.word	0x200002d8
 8001ef0:	40001000 	.word	0x40001000

08001ef4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	@ 0x30
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	2224      	movs	r2, #36	@ 0x24
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f009 fb22 	bl	800b54c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f08:	463b      	mov	r3, r7
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f12:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <MX_TIM8_Init+0xac>)
 8001f14:	4a23      	ldr	r2, [pc, #140]	@ (8001fa4 <MX_TIM8_Init+0xb0>)
 8001f16:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f18:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <MX_TIM8_Init+0xac>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <MX_TIM8_Init+0xac>)
 8001f20:	2210      	movs	r2, #16
 8001f22:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <MX_TIM8_Init+0xac>)
 8001f26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f2a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <MX_TIM8_Init+0xac>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f32:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <MX_TIM8_Init+0xac>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <MX_TIM8_Init+0xac>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f46:	2301      	movs	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001f4e:	230f      	movs	r3, #15
 8001f50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001f5e:	230f      	movs	r3, #15
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	4619      	mov	r1, r3
 8001f68:	480d      	ldr	r0, [pc, #52]	@ (8001fa0 <MX_TIM8_Init+0xac>)
 8001f6a:	f003 faf3 	bl	8005554 <HAL_TIM_Encoder_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001f74:	f7ff fc9c 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f84:	463b      	mov	r3, r7
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <MX_TIM8_Init+0xac>)
 8001f8a:	f004 fd5b 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001f94:	f7ff fc8c 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	3730      	adds	r7, #48	@ 0x30
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000324 	.word	0x20000324
 8001fa4:	40010400 	.word	0x40010400

08001fa8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001fc8:	4b23      	ldr	r3, [pc, #140]	@ (8002058 <MX_TIM9_Init+0xb0>)
 8001fca:	4a24      	ldr	r2, [pc, #144]	@ (800205c <MX_TIM9_Init+0xb4>)
 8001fcc:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 95;
 8001fce:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <MX_TIM9_Init+0xb0>)
 8001fd0:	225f      	movs	r2, #95	@ 0x5f
 8001fd2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd4:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <MX_TIM9_Init+0xb0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <MX_TIM9_Init+0xb0>)
 8001fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fe0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8002058 <MX_TIM9_Init+0xb0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <MX_TIM9_Init+0xb0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fee:	481a      	ldr	r0, [pc, #104]	@ (8002058 <MX_TIM9_Init+0xb0>)
 8001ff0:	f002 ff0e 	bl	8004e10 <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 8001ffa:	f7ff fc59 	bl	80018b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002002:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	4813      	ldr	r0, [pc, #76]	@ (8002058 <MX_TIM9_Init+0xb0>)
 800200c:	f003 ff34 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8002016:	f7ff fc4b 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800201a:	480f      	ldr	r0, [pc, #60]	@ (8002058 <MX_TIM9_Init+0xb0>)
 800201c:	f003 fa38 	bl	8005490 <HAL_TIM_IC_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 8002026:	f7ff fc43 	bl	80018b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800202e:	2301      	movs	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800203a:	463b      	mov	r3, r7
 800203c:	2200      	movs	r2, #0
 800203e:	4619      	mov	r1, r3
 8002040:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_TIM9_Init+0xb0>)
 8002042:	f003 fd69 	bl	8005b18 <HAL_TIM_IC_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 800204c:	f7ff fc30 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000370 	.word	0x20000370
 800205c:	40014000 	.word	0x40014000

08002060 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	615a      	str	r2, [r3, #20]
 8002076:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002078:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <MX_TIM12_Init+0x84>)
 800207a:	4a1b      	ldr	r2, [pc, #108]	@ (80020e8 <MX_TIM12_Init+0x88>)
 800207c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 800207e:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <MX_TIM12_Init+0x84>)
 8002080:	225f      	movs	r2, #95	@ 0x5f
 8002082:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002084:	4b17      	ldr	r3, [pc, #92]	@ (80020e4 <MX_TIM12_Init+0x84>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 800208a:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <MX_TIM12_Init+0x84>)
 800208c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002090:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002092:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <MX_TIM12_Init+0x84>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <MX_TIM12_Init+0x84>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800209e:	4811      	ldr	r0, [pc, #68]	@ (80020e4 <MX_TIM12_Init+0x84>)
 80020a0:	f003 f825 	bl	80050ee <HAL_TIM_PWM_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80020aa:	f7ff fc01 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ae:	2360      	movs	r3, #96	@ 0x60
 80020b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2204      	movs	r2, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <MX_TIM12_Init+0x84>)
 80020c6:	f003 fdc3 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80020d0:	f7ff fbee 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80020d4:	4803      	ldr	r0, [pc, #12]	@ (80020e4 <MX_TIM12_Init+0x84>)
 80020d6:	f000 fa17 	bl	8002508 <HAL_TIM_MspPostInit>

}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200003bc 	.word	0x200003bc
 80020e8:	40001800 	.word	0x40001800

080020ec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b090      	sub	sp, #64	@ 0x40
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a93      	ldr	r2, [pc, #588]	@ (8002358 <HAL_TIM_Encoder_MspInit+0x26c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d149      	bne.n	80021a2 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800210e:	4b93      	ldr	r3, [pc, #588]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4a92      	ldr	r2, [pc, #584]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6453      	str	r3, [r2, #68]	@ 0x44
 800211a:	4b90      	ldr	r3, [pc, #576]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002124:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002126:	4b8d      	ldr	r3, [pc, #564]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	4a8c      	ldr	r2, [pc, #560]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 800212c:	f043 0310 	orr.w	r3, r3, #16
 8002130:	6313      	str	r3, [r2, #48]	@ 0x30
 8002132:	4b8a      	ldr	r3, [pc, #552]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 800213e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002150:	2301      	movs	r3, #1
 8002152:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002154:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002158:	4619      	mov	r1, r3
 800215a:	4881      	ldr	r0, [pc, #516]	@ (8002360 <HAL_TIM_Encoder_MspInit+0x274>)
 800215c:	f001 f9ca 	bl	80034f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2105      	movs	r1, #5
 8002164:	2018      	movs	r0, #24
 8002166:	f000 fe12 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800216a:	2018      	movs	r0, #24
 800216c:	f000 fe2b 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2105      	movs	r1, #5
 8002174:	2019      	movs	r0, #25
 8002176:	f000 fe0a 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800217a:	2019      	movs	r0, #25
 800217c:	f000 fe23 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2105      	movs	r1, #5
 8002184:	201a      	movs	r0, #26
 8002186:	f000 fe02 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800218a:	201a      	movs	r0, #26
 800218c:	f000 fe1b 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	2105      	movs	r1, #5
 8002194:	201b      	movs	r0, #27
 8002196:	f000 fdfa 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800219a:	201b      	movs	r0, #27
 800219c:	f000 fe13 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80021a0:	e0d5      	b.n	800234e <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002364 <HAL_TIM_Encoder_MspInit+0x278>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d14c      	bne.n	8002246 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ac:	4b6b      	ldr	r3, [pc, #428]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	4a6a      	ldr	r2, [pc, #424]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b8:	4b68      	ldr	r3, [pc, #416]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	623b      	str	r3, [r7, #32]
 80021c2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b65      	ldr	r3, [pc, #404]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	4a64      	ldr	r2, [pc, #400]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d0:	4b62      	ldr	r3, [pc, #392]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021dc:	4b5f      	ldr	r3, [pc, #380]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	4a5e      	ldr	r2, [pc, #376]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e8:	4b5c      	ldr	r3, [pc, #368]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 80021f4:	2340      	movs	r3, #64	@ 0x40
 80021f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002204:	2302      	movs	r3, #2
 8002206:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800220c:	4619      	mov	r1, r3
 800220e:	4856      	ldr	r0, [pc, #344]	@ (8002368 <HAL_TIM_Encoder_MspInit+0x27c>)
 8002210:	f001 f970 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8002214:	2320      	movs	r3, #32
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002224:	2302      	movs	r3, #2
 8002226:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800222c:	4619      	mov	r1, r3
 800222e:	484f      	ldr	r0, [pc, #316]	@ (800236c <HAL_TIM_Encoder_MspInit+0x280>)
 8002230:	f001 f960 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2105      	movs	r1, #5
 8002238:	201d      	movs	r0, #29
 800223a:	f000 fda8 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800223e:	201d      	movs	r0, #29
 8002240:	f000 fdc1 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 8002244:	e083      	b.n	800234e <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a49      	ldr	r2, [pc, #292]	@ (8002370 <HAL_TIM_Encoder_MspInit+0x284>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d131      	bne.n	80022b4 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002250:	4b42      	ldr	r3, [pc, #264]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	4a41      	ldr	r2, [pc, #260]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	6413      	str	r3, [r2, #64]	@ 0x40
 800225c:	4b3f      	ldr	r3, [pc, #252]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002268:	4b3c      	ldr	r3, [pc, #240]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	4a3b      	ldr	r2, [pc, #236]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6313      	str	r3, [r2, #48]	@ 0x30
 8002274:	4b39      	ldr	r3, [pc, #228]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8002280:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002284:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002292:	2302      	movs	r3, #2
 8002294:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002296:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800229a:	4619      	mov	r1, r3
 800229c:	4835      	ldr	r0, [pc, #212]	@ (8002374 <HAL_TIM_Encoder_MspInit+0x288>)
 800229e:	f001 f929 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2105      	movs	r1, #5
 80022a6:	201e      	movs	r0, #30
 80022a8:	f000 fd71 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022ac:	201e      	movs	r0, #30
 80022ae:	f000 fd8a 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 80022b2:	e04c      	b.n	800234e <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002378 <HAL_TIM_Encoder_MspInit+0x28c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d147      	bne.n	800234e <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022be:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	4a26      	ldr	r2, [pc, #152]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a20      	ldr	r2, [pc, #128]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_TIM_Encoder_MspInit+0x270>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 80022ee:	23c0      	movs	r3, #192	@ 0xc0
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022fe:	2303      	movs	r3, #3
 8002300:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002302:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002306:	4619      	mov	r1, r3
 8002308:	481c      	ldr	r0, [pc, #112]	@ (800237c <HAL_TIM_Encoder_MspInit+0x290>)
 800230a:	f001 f8f3 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2105      	movs	r1, #5
 8002312:	202b      	movs	r0, #43	@ 0x2b
 8002314:	f000 fd3b 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002318:	202b      	movs	r0, #43	@ 0x2b
 800231a:	f000 fd54 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2105      	movs	r1, #5
 8002322:	202c      	movs	r0, #44	@ 0x2c
 8002324:	f000 fd33 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002328:	202c      	movs	r0, #44	@ 0x2c
 800232a:	f000 fd4c 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2105      	movs	r1, #5
 8002332:	202d      	movs	r0, #45	@ 0x2d
 8002334:	f000 fd2b 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002338:	202d      	movs	r0, #45	@ 0x2d
 800233a:	f000 fd44 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2105      	movs	r1, #5
 8002342:	202e      	movs	r0, #46	@ 0x2e
 8002344:	f000 fd23 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002348:	202e      	movs	r0, #46	@ 0x2e
 800234a:	f000 fd3c 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3740      	adds	r7, #64	@ 0x40
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000
 800235c:	40023800 	.word	0x40023800
 8002360:	40021000 	.word	0x40021000
 8002364:	40000400 	.word	0x40000400
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40000800 	.word	0x40000800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40010400 	.word	0x40010400
 800237c:	40020800 	.word	0x40020800

08002380 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002390:	d114      	bne.n	80023bc <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	@ (800242c <HAL_TIM_PWM_MspInit+0xac>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	4a25      	ldr	r2, [pc, #148]	@ (800242c <HAL_TIM_PWM_MspInit+0xac>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6413      	str	r3, [r2, #64]	@ 0x40
 800239e:	4b23      	ldr	r3, [pc, #140]	@ (800242c <HAL_TIM_PWM_MspInit+0xac>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2105      	movs	r1, #5
 80023ae:	201c      	movs	r0, #28
 80023b0:	f000 fced 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023b4:	201c      	movs	r0, #28
 80023b6:	f000 fd06 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80023ba:	e032      	b.n	8002422 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002430 <HAL_TIM_PWM_MspInit+0xb0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d114      	bne.n	80023f0 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023c6:	4b19      	ldr	r3, [pc, #100]	@ (800242c <HAL_TIM_PWM_MspInit+0xac>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a18      	ldr	r2, [pc, #96]	@ (800242c <HAL_TIM_PWM_MspInit+0xac>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b16      	ldr	r3, [pc, #88]	@ (800242c <HAL_TIM_PWM_MspInit+0xac>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2105      	movs	r1, #5
 80023e2:	2032      	movs	r0, #50	@ 0x32
 80023e4:	f000 fcd3 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023e8:	2032      	movs	r0, #50	@ 0x32
 80023ea:	f000 fcec 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 80023ee:	e018      	b.n	8002422 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002434 <HAL_TIM_PWM_MspInit+0xb4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d113      	bne.n	8002422 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <HAL_TIM_PWM_MspInit+0xac>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	4a0b      	ldr	r2, [pc, #44]	@ (800242c <HAL_TIM_PWM_MspInit+0xac>)
 8002400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002404:	6413      	str	r3, [r2, #64]	@ 0x40
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_TIM_PWM_MspInit+0xac>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2105      	movs	r1, #5
 8002416:	202b      	movs	r0, #43	@ 0x2b
 8002418:	f000 fcb9 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800241c:	202b      	movs	r0, #43	@ 0x2b
 800241e:	f000 fcd2 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40000c00 	.word	0x40000c00
 8002434:	40001800 	.word	0x40001800

08002438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM6)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a28      	ldr	r2, [pc, #160]	@ (80024f8 <HAL_TIM_Base_MspInit+0xc0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d114      	bne.n	8002484 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800245a:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <HAL_TIM_Base_MspInit+0xc4>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	4a27      	ldr	r2, [pc, #156]	@ (80024fc <HAL_TIM_Base_MspInit+0xc4>)
 8002460:	f043 0310 	orr.w	r3, r3, #16
 8002464:	6413      	str	r3, [r2, #64]	@ 0x40
 8002466:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <HAL_TIM_Base_MspInit+0xc4>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2105      	movs	r1, #5
 8002476:	2036      	movs	r0, #54	@ 0x36
 8002478:	f000 fc89 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800247c:	2036      	movs	r0, #54	@ 0x36
 800247e:	f000 fca2 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002482:	e034      	b.n	80024ee <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM9)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1d      	ldr	r2, [pc, #116]	@ (8002500 <HAL_TIM_Base_MspInit+0xc8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d12f      	bne.n	80024ee <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800248e:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <HAL_TIM_Base_MspInit+0xc4>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	4a1a      	ldr	r2, [pc, #104]	@ (80024fc <HAL_TIM_Base_MspInit+0xc4>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002498:	6453      	str	r3, [r2, #68]	@ 0x44
 800249a:	4b18      	ldr	r3, [pc, #96]	@ (80024fc <HAL_TIM_Base_MspInit+0xc4>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <HAL_TIM_Base_MspInit+0xc4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <HAL_TIM_Base_MspInit+0xc4>)
 80024ac:	f043 0310 	orr.w	r3, r3, #16
 80024b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b2:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <HAL_TIM_Base_MspInit+0xc4>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DETECTOR_ECHO_Pin;
 80024be:	2320      	movs	r3, #32
 80024c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80024ce:	2303      	movs	r3, #3
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DETECTOR_ECHO_GPIO_Port, &GPIO_InitStruct);
 80024d2:	f107 0314 	add.w	r3, r7, #20
 80024d6:	4619      	mov	r1, r3
 80024d8:	480a      	ldr	r0, [pc, #40]	@ (8002504 <HAL_TIM_Base_MspInit+0xcc>)
 80024da:	f001 f80b 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2105      	movs	r1, #5
 80024e2:	2018      	movs	r0, #24
 80024e4:	f000 fc53 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80024e8:	2018      	movs	r0, #24
 80024ea:	f000 fc6c 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	@ 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40001000 	.word	0x40001000
 80024fc:	40023800 	.word	0x40023800
 8002500:	40014000 	.word	0x40014000
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08c      	sub	sp, #48	@ 0x30
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 031c 	add.w	r3, r7, #28
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002528:	d139      	bne.n	800259e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4a40      	ldr	r2, [pc, #256]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	4b3e      	ldr	r3, [pc, #248]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a3a      	ldr	r2, [pc, #232]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b38      	ldr	r3, [pc, #224]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 800255a:	2320      	movs	r3, #32
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800256a:	2301      	movs	r3, #1
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	482f      	ldr	r0, [pc, #188]	@ (8002634 <HAL_TIM_MspPostInit+0x12c>)
 8002576:	f000 ffbd 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 800257a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258c:	2301      	movs	r3, #1
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4619      	mov	r1, r3
 8002596:	4828      	ldr	r0, [pc, #160]	@ (8002638 <HAL_TIM_MspPostInit+0x130>)
 8002598:	f000 ffac 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800259c:	e043      	b.n	8002626 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a26      	ldr	r2, [pc, #152]	@ (800263c <HAL_TIM_MspPostInit+0x134>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d11c      	bne.n	80025e2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	4a20      	ldr	r2, [pc, #128]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 80025c0:	2309      	movs	r3, #9
 80025c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025d0:	2302      	movs	r3, #2
 80025d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d4:	f107 031c 	add.w	r3, r7, #28
 80025d8:	4619      	mov	r1, r3
 80025da:	4816      	ldr	r0, [pc, #88]	@ (8002634 <HAL_TIM_MspPostInit+0x12c>)
 80025dc:	f000 ff8a 	bl	80034f4 <HAL_GPIO_Init>
}
 80025e0:	e021      	b.n	8002626 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a16      	ldr	r2, [pc, #88]	@ (8002640 <HAL_TIM_MspPostInit+0x138>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d11c      	bne.n	8002626 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ec:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <HAL_TIM_MspPostInit+0x128>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002616:	2309      	movs	r3, #9
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	4619      	mov	r1, r3
 8002620:	4805      	ldr	r0, [pc, #20]	@ (8002638 <HAL_TIM_MspPostInit+0x130>)
 8002622:	f000 ff67 	bl	80034f4 <HAL_GPIO_Init>
}
 8002626:	bf00      	nop
 8002628:	3730      	adds	r7, #48	@ 0x30
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40020000 	.word	0x40020000
 8002638:	40020400 	.word	0x40020400
 800263c:	40000c00 	.word	0x40000c00
 8002640:	40001800 	.word	0x40001800

08002644 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002648:	4b14      	ldr	r3, [pc, #80]	@ (800269c <MX_USART2_UART_Init+0x58>)
 800264a:	4a15      	ldr	r2, [pc, #84]	@ (80026a0 <MX_USART2_UART_Init+0x5c>)
 800264c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800264e:	4b13      	ldr	r3, [pc, #76]	@ (800269c <MX_USART2_UART_Init+0x58>)
 8002650:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_USART2_UART_Init+0x58>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <MX_USART2_UART_Init+0x58>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_USART2_UART_Init+0x58>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <MX_USART2_UART_Init+0x58>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <MX_USART2_UART_Init+0x58>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <MX_USART2_UART_Init+0x58>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <MX_USART2_UART_Init+0x58>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <MX_USART2_UART_Init+0x58>)
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002686:	4805      	ldr	r0, [pc, #20]	@ (800269c <MX_USART2_UART_Init+0x58>)
 8002688:	f004 fa88 	bl	8006b9c <HAL_UART_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002692:	f7ff f90d 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000408 	.word	0x20000408
 80026a0:	40004400 	.word	0x40004400

080026a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026a8:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026aa:	4a15      	ldr	r2, [pc, #84]	@ (8002700 <MX_USART3_UART_Init+0x5c>)
 80026ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026ae:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026b6:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026ca:	220c      	movs	r2, #12
 80026cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d4:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026e6:	4805      	ldr	r0, [pc, #20]	@ (80026fc <MX_USART3_UART_Init+0x58>)
 80026e8:	f004 fa58 	bl	8006b9c <HAL_UART_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80026f2:	f7ff f8dd 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000490 	.word	0x20000490
 8002700:	40004800 	.word	0x40004800

08002704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0b0      	sub	sp, #192	@ 0xc0
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	2290      	movs	r2, #144	@ 0x90
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f008 ff11 	bl	800b54c <memset>
  if(uartHandle->Instance==USART2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a79      	ldr	r2, [pc, #484]	@ (8002914 <HAL_UART_MspInit+0x210>)
 8002730:	4293      	cmp	r3, r2
 8002732:	f040 80a0 	bne.w	8002876 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800273a:	2300      	movs	r3, #0
 800273c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273e:	f107 031c 	add.w	r3, r7, #28
 8002742:	4618      	mov	r0, r3
 8002744:	f001 ff3c 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800274e:	f7ff f8af 	bl	80018b0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002752:	4b71      	ldr	r3, [pc, #452]	@ (8002918 <HAL_UART_MspInit+0x214>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	4a70      	ldr	r2, [pc, #448]	@ (8002918 <HAL_UART_MspInit+0x214>)
 8002758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800275c:	6413      	str	r3, [r2, #64]	@ 0x40
 800275e:	4b6e      	ldr	r3, [pc, #440]	@ (8002918 <HAL_UART_MspInit+0x214>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800276a:	4b6b      	ldr	r3, [pc, #428]	@ (8002918 <HAL_UART_MspInit+0x214>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	4a6a      	ldr	r2, [pc, #424]	@ (8002918 <HAL_UART_MspInit+0x214>)
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	6313      	str	r3, [r2, #48]	@ 0x30
 8002776:	4b68      	ldr	r3, [pc, #416]	@ (8002918 <HAL_UART_MspInit+0x214>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002782:	2360      	movs	r3, #96	@ 0x60
 8002784:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	2303      	movs	r3, #3
 8002796:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800279a:	2307      	movs	r3, #7
 800279c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027a4:	4619      	mov	r1, r3
 80027a6:	485d      	ldr	r0, [pc, #372]	@ (800291c <HAL_UART_MspInit+0x218>)
 80027a8:	f000 fea4 	bl	80034f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80027ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002924 <HAL_UART_MspInit+0x220>)
 80027b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80027b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ba:	4b59      	ldr	r3, [pc, #356]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c0:	4b57      	ldr	r3, [pc, #348]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027c6:	4b56      	ldr	r3, [pc, #344]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ce:	4b54      	ldr	r3, [pc, #336]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027d4:	4b52      	ldr	r3, [pc, #328]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80027da:	4b51      	ldr	r3, [pc, #324]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027ec:	484c      	ldr	r0, [pc, #304]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 80027ee:	f000 fb05 	bl	8002dfc <HAL_DMA_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80027f8:	f7ff f85a 	bl	80018b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a48      	ldr	r2, [pc, #288]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 8002800:	675a      	str	r2, [r3, #116]	@ 0x74
 8002802:	4a47      	ldr	r2, [pc, #284]	@ (8002920 <HAL_UART_MspInit+0x21c>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002808:	4b47      	ldr	r3, [pc, #284]	@ (8002928 <HAL_UART_MspInit+0x224>)
 800280a:	4a48      	ldr	r2, [pc, #288]	@ (800292c <HAL_UART_MspInit+0x228>)
 800280c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800280e:	4b46      	ldr	r3, [pc, #280]	@ (8002928 <HAL_UART_MspInit+0x224>)
 8002810:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002814:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002816:	4b44      	ldr	r3, [pc, #272]	@ (8002928 <HAL_UART_MspInit+0x224>)
 8002818:	2240      	movs	r2, #64	@ 0x40
 800281a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281c:	4b42      	ldr	r3, [pc, #264]	@ (8002928 <HAL_UART_MspInit+0x224>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002822:	4b41      	ldr	r3, [pc, #260]	@ (8002928 <HAL_UART_MspInit+0x224>)
 8002824:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002828:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800282a:	4b3f      	ldr	r3, [pc, #252]	@ (8002928 <HAL_UART_MspInit+0x224>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002830:	4b3d      	ldr	r3, [pc, #244]	@ (8002928 <HAL_UART_MspInit+0x224>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002836:	4b3c      	ldr	r3, [pc, #240]	@ (8002928 <HAL_UART_MspInit+0x224>)
 8002838:	2200      	movs	r2, #0
 800283a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800283c:	4b3a      	ldr	r3, [pc, #232]	@ (8002928 <HAL_UART_MspInit+0x224>)
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002842:	4b39      	ldr	r3, [pc, #228]	@ (8002928 <HAL_UART_MspInit+0x224>)
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002848:	4837      	ldr	r0, [pc, #220]	@ (8002928 <HAL_UART_MspInit+0x224>)
 800284a:	f000 fad7 	bl	8002dfc <HAL_DMA_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8002854:	f7ff f82c 	bl	80018b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a33      	ldr	r2, [pc, #204]	@ (8002928 <HAL_UART_MspInit+0x224>)
 800285c:	671a      	str	r2, [r3, #112]	@ 0x70
 800285e:	4a32      	ldr	r2, [pc, #200]	@ (8002928 <HAL_UART_MspInit+0x224>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	2105      	movs	r1, #5
 8002868:	2026      	movs	r0, #38	@ 0x26
 800286a:	f000 fa90 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800286e:	2026      	movs	r0, #38	@ 0x26
 8002870:	f000 faa9 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002874:	e049      	b.n	800290a <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2d      	ldr	r2, [pc, #180]	@ (8002930 <HAL_UART_MspInit+0x22c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d144      	bne.n	800290a <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002884:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002886:	2300      	movs	r3, #0
 8002888:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4618      	mov	r0, r3
 8002890:	f001 fe96 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_UART_MspInit+0x19a>
      Error_Handler();
 800289a:	f7ff f809 	bl	80018b0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <HAL_UART_MspInit+0x214>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002918 <HAL_UART_MspInit+0x214>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <HAL_UART_MspInit+0x214>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b6:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <HAL_UART_MspInit+0x214>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <HAL_UART_MspInit+0x214>)
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_UART_MspInit+0x214>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028e8:	2307      	movs	r3, #7
 80028ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ee:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80028f2:	4619      	mov	r1, r3
 80028f4:	4809      	ldr	r0, [pc, #36]	@ (800291c <HAL_UART_MspInit+0x218>)
 80028f6:	f000 fdfd 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2105      	movs	r1, #5
 80028fe:	2027      	movs	r0, #39	@ 0x27
 8002900:	f000 fa45 	bl	8002d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002904:	2027      	movs	r0, #39	@ 0x27
 8002906:	f000 fa5e 	bl	8002dc6 <HAL_NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	37c0      	adds	r7, #192	@ 0xc0
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40004400 	.word	0x40004400
 8002918:	40023800 	.word	0x40023800
 800291c:	40020c00 	.word	0x40020c00
 8002920:	20000518 	.word	0x20000518
 8002924:	40026088 	.word	0x40026088
 8002928:	20000578 	.word	0x20000578
 800292c:	400260a0 	.word	0x400260a0
 8002930:	40004800 	.word	0x40004800

08002934 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002938:	4b14      	ldr	r3, [pc, #80]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800293a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800293e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002942:	2206      	movs	r2, #6
 8002944:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002946:	4b11      	ldr	r3, [pc, #68]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002948:	2202      	movs	r2, #2
 800294a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800294c:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800294e:	2200      	movs	r2, #0
 8002950:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002952:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002954:	2202      	movs	r2, #2
 8002956:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800295a:	2201      	movs	r2, #1
 800295c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800295e:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002960:	2200      	movs	r2, #0
 8002962:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002966:	2200      	movs	r2, #0
 8002968:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800296c:	2201      	movs	r2, #1
 800296e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002972:	2200      	movs	r2, #0
 8002974:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002976:	4805      	ldr	r0, [pc, #20]	@ (800298c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002978:	f000 ffb3 	bl	80038e2 <HAL_PCD_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002982:	f7fe ff95 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200005d8 	.word	0x200005d8

08002990 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0ae      	sub	sp, #184	@ 0xb8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2290      	movs	r2, #144	@ 0x90
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f008 fdcb 	bl	800b54c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029be:	d159      	bne.n	8002a74 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80029c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80029c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4618      	mov	r0, r3
 80029d2:	f001 fdf5 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80029dc:	f7fe ff68 	bl	80018b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e0:	4b26      	ldr	r3, [pc, #152]	@ (8002a7c <HAL_PCD_MspInit+0xec>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	4a25      	ldr	r2, [pc, #148]	@ (8002a7c <HAL_PCD_MspInit+0xec>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ec:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <HAL_PCD_MspInit+0xec>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029f8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80029fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a12:	230a      	movs	r3, #10
 8002a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4818      	ldr	r0, [pc, #96]	@ (8002a80 <HAL_PCD_MspInit+0xf0>)
 8002a20:	f000 fd68 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002a24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4810      	ldr	r0, [pc, #64]	@ (8002a80 <HAL_PCD_MspInit+0xf0>)
 8002a40:	f000 fd58 	bl	80034f4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a44:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <HAL_PCD_MspInit+0xec>)
 8002a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a48:	4a0c      	ldr	r2, [pc, #48]	@ (8002a7c <HAL_PCD_MspInit+0xec>)
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a4e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a50:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_PCD_MspInit+0xec>)
 8002a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <HAL_PCD_MspInit+0xec>)
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	4a06      	ldr	r2, [pc, #24]	@ (8002a7c <HAL_PCD_MspInit+0xec>)
 8002a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a66:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <HAL_PCD_MspInit+0xec>)
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002a74:	bf00      	nop
 8002a76:	37b8      	adds	r7, #184	@ 0xb8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020000 	.word	0x40020000

08002a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002abc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a88:	f7ff f81a 	bl	8001ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a8c:	480c      	ldr	r0, [pc, #48]	@ (8002ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a8e:	490d      	ldr	r1, [pc, #52]	@ (8002ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a90:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a94:	e002      	b.n	8002a9c <LoopCopyDataInit>

08002a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9a:	3304      	adds	r3, #4

08002a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa0:	d3f9      	bcc.n	8002a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa8:	e001      	b.n	8002aae <LoopFillZerobss>

08002aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aac:	3204      	adds	r2, #4

08002aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab0:	d3fb      	bcc.n	8002aaa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ab2:	f008 fd6b 	bl	800b58c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ab6:	f7fe fe07 	bl	80016c8 <main>
  bx  lr    
 8002aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002abc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002ac8:	0800b950 	.word	0x0800b950
  ldr r2, =_sbss
 8002acc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002ad0:	2000553c 	.word	0x2000553c

08002ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad4:	e7fe      	b.n	8002ad4 <ADC_IRQHandler>

08002ad6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ada:	2003      	movs	r0, #3
 8002adc:	f000 f94c 	bl	8002d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae0:	200f      	movs	r0, #15
 8002ae2:	f000 f805 	bl	8002af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae6:	f7fe fee9 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_InitTick+0x54>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_InitTick+0x58>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f967 	bl	8002de2 <HAL_SYSTICK_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00e      	b.n	8002b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d80a      	bhi.n	8002b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b24:	2200      	movs	r2, #0
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f000 f92f 	bl	8002d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b30:	4a06      	ldr	r2, [pc, #24]	@ (8002b4c <HAL_InitTick+0x5c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	20000004 	.word	0x20000004

08002b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_IncTick+0x20>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_IncTick+0x24>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a04      	ldr	r2, [pc, #16]	@ (8002b74 <HAL_IncTick+0x24>)
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000008 	.word	0x20000008
 8002b74:	20000ab8 	.word	0x20000ab8

08002b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	@ (8002b8c <HAL_GetTick+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000ab8 	.word	0x20000ab8

08002b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff ffee 	bl	8002b78 <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d005      	beq.n	8002bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_Delay+0x44>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bb6:	bf00      	nop
 8002bb8:	f7ff ffde 	bl	8002b78 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8f7      	bhi.n	8002bb8 <HAL_Delay+0x28>
  {
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000008 	.word	0x20000008

08002bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x40>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c06:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x40>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	60d3      	str	r3, [r2, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00
 8002c1c:	05fa0000 	.word	0x05fa0000

08002c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <__NVIC_GetPriorityGrouping+0x18>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0307 	and.w	r3, r3, #7
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0b      	blt.n	8002c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	@ (8002c74 <__NVIC_EnableIRQ+0x38>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db0a      	blt.n	8002ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	490c      	ldr	r1, [pc, #48]	@ (8002cc4 <__NVIC_SetPriority+0x4c>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca0:	e00a      	b.n	8002cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4908      	ldr	r1, [pc, #32]	@ (8002cc8 <__NVIC_SetPriority+0x50>)
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	761a      	strb	r2, [r3, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	@ 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f1c3 0307 	rsb	r3, r3, #7
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf28      	it	cs
 8002cea:	2304      	movcs	r3, #4
 8002cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d902      	bls.n	8002cfc <NVIC_EncodePriority+0x30>
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3b03      	subs	r3, #3
 8002cfa:	e000      	b.n	8002cfe <NVIC_EncodePriority+0x32>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	401a      	ands	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	4313      	orrs	r3, r2
         );
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	@ 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d44:	d301      	bcc.n	8002d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d46:	2301      	movs	r3, #1
 8002d48:	e00f      	b.n	8002d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <SysTick_Config+0x40>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d52:	210f      	movs	r1, #15
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	f7ff ff8e 	bl	8002c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <SysTick_Config+0x40>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d62:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <SysTick_Config+0x40>)
 8002d64:	2207      	movs	r2, #7
 8002d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	e000e010 	.word	0xe000e010

08002d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff ff29 	bl	8002bd8 <__NVIC_SetPriorityGrouping>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da0:	f7ff ff3e 	bl	8002c20 <__NVIC_GetPriorityGrouping>
 8002da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	6978      	ldr	r0, [r7, #20]
 8002dac:	f7ff ff8e 	bl	8002ccc <NVIC_EncodePriority>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff5d 	bl	8002c78 <__NVIC_SetPriority>
}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff31 	bl	8002c3c <__NVIC_EnableIRQ>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ffa2 	bl	8002d34 <SysTick_Config>
 8002df0:	4603      	mov	r3, r0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e08:	f7ff feb6 	bl	8002b78 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e099      	b.n	8002f4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e38:	e00f      	b.n	8002e5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e3a:	f7ff fe9d 	bl	8002b78 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d908      	bls.n	8002e5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2203      	movs	r2, #3
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e078      	b.n	8002f4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e8      	bne.n	8002e3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4b38      	ldr	r3, [pc, #224]	@ (8002f54 <HAL_DMA_Init+0x158>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d107      	bne.n	8002ec4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0307 	bic.w	r3, r3, #7
 8002eda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d117      	bne.n	8002f1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00e      	beq.n	8002f1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fa7b 	bl	80033fc <DMA_CheckFifoParam>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2240      	movs	r2, #64	@ 0x40
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e016      	b.n	8002f4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa32 	bl	8003390 <DMA_CalcBaseAndBitshift>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f34:	223f      	movs	r2, #63	@ 0x3f
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	e010803f 	.word	0xe010803f

08002f58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f66:	f7ff fe07 	bl	8002b78 <HAL_GetTick>
 8002f6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d008      	beq.n	8002f8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e052      	b.n	8003030 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0216 	bic.w	r2, r2, #22
 8002f98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fa8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d103      	bne.n	8002fba <HAL_DMA_Abort+0x62>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0208 	bic.w	r2, r2, #8
 8002fc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fda:	e013      	b.n	8003004 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fdc:	f7ff fdcc 	bl	8002b78 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d90c      	bls.n	8003004 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e015      	b.n	8003030 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e4      	bne.n	8002fdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003016:	223f      	movs	r2, #63	@ 0x3f
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d004      	beq.n	8003056 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2280      	movs	r2, #128	@ 0x80
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00c      	b.n	8003070 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2205      	movs	r2, #5
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003088:	4b8e      	ldr	r3, [pc, #568]	@ (80032c4 <HAL_DMA_IRQHandler+0x248>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a8e      	ldr	r2, [pc, #568]	@ (80032c8 <HAL_DMA_IRQHandler+0x24c>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0a9b      	lsrs	r3, r3, #10
 8003094:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	2208      	movs	r2, #8
 80030a8:	409a      	lsls	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01a      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	2208      	movs	r2, #8
 80030d6:	409a      	lsls	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ec:	2201      	movs	r2, #1
 80030ee:	409a      	lsls	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d012      	beq.n	800311e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	2201      	movs	r2, #1
 800310c:	409a      	lsls	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003116:	f043 0202 	orr.w	r2, r3, #2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003122:	2204      	movs	r2, #4
 8003124:	409a      	lsls	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	2204      	movs	r2, #4
 8003142:	409a      	lsls	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	2210      	movs	r2, #16
 800315a:	409a      	lsls	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d043      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d03c      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	2210      	movs	r2, #16
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d018      	beq.n	80031be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d108      	bne.n	80031ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d024      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
 80031aa:	e01f      	b.n	80031ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01b      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
 80031bc:	e016      	b.n	80031ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0208 	bic.w	r2, r2, #8
 80031da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	2220      	movs	r2, #32
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 808f 	beq.w	800331c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8087 	beq.w	800331c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	2220      	movs	r2, #32
 8003214:	409a      	lsls	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b05      	cmp	r3, #5
 8003224:	d136      	bne.n	8003294 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0216 	bic.w	r2, r2, #22
 8003234:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003244:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <HAL_DMA_IRQHandler+0x1da>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0208 	bic.w	r2, r2, #8
 8003264:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326a:	223f      	movs	r2, #63	@ 0x3f
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003286:	2b00      	cmp	r3, #0
 8003288:	d07e      	beq.n	8003388 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
        }
        return;
 8003292:	e079      	b.n	8003388 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01d      	beq.n	80032de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10d      	bne.n	80032cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d031      	beq.n	800331c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	e02c      	b.n	800331c <HAL_DMA_IRQHandler+0x2a0>
 80032c2:	bf00      	nop
 80032c4:	20000000 	.word	0x20000000
 80032c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d023      	beq.n	800331c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
 80032dc:	e01e      	b.n	800331c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10f      	bne.n	800330c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0210 	bic.w	r2, r2, #16
 80032fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003320:	2b00      	cmp	r3, #0
 8003322:	d032      	beq.n	800338a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d022      	beq.n	8003376 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2205      	movs	r2, #5
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	3301      	adds	r3, #1
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	429a      	cmp	r2, r3
 8003352:	d307      	bcc.n	8003364 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f2      	bne.n	8003348 <HAL_DMA_IRQHandler+0x2cc>
 8003362:	e000      	b.n	8003366 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003364:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
 8003386:	e000      	b.n	800338a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003388:	bf00      	nop
    }
  }
}
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	3b10      	subs	r3, #16
 80033a0:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <DMA_CalcBaseAndBitshift+0x60>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033aa:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <DMA_CalcBaseAndBitshift+0x64>)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d908      	bls.n	80033d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <DMA_CalcBaseAndBitshift+0x68>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	1d1a      	adds	r2, r3, #4
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80033ce:	e006      	b.n	80033de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <DMA_CalcBaseAndBitshift+0x68>)
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	aaaaaaab 	.word	0xaaaaaaab
 80033f4:	0800b834 	.word	0x0800b834
 80033f8:	fffffc00 	.word	0xfffffc00

080033fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11f      	bne.n	8003456 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d856      	bhi.n	80034ca <DMA_CheckFifoParam+0xce>
 800341c:	a201      	add	r2, pc, #4	@ (adr r2, 8003424 <DMA_CheckFifoParam+0x28>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003435 	.word	0x08003435
 8003428:	08003447 	.word	0x08003447
 800342c:	08003435 	.word	0x08003435
 8003430:	080034cb 	.word	0x080034cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d046      	beq.n	80034ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003444:	e043      	b.n	80034ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800344e:	d140      	bne.n	80034d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003454:	e03d      	b.n	80034d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800345e:	d121      	bne.n	80034a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d837      	bhi.n	80034d6 <DMA_CheckFifoParam+0xda>
 8003466:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <DMA_CheckFifoParam+0x70>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	0800347d 	.word	0x0800347d
 8003470:	08003483 	.word	0x08003483
 8003474:	0800347d 	.word	0x0800347d
 8003478:	08003495 	.word	0x08003495
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      break;
 8003480:	e030      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d025      	beq.n	80034da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003492:	e022      	b.n	80034da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800349c:	d11f      	bne.n	80034de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034a2:	e01c      	b.n	80034de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d903      	bls.n	80034b2 <DMA_CheckFifoParam+0xb6>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d003      	beq.n	80034b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034b0:	e018      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
      break;
 80034b6:	e015      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00e      	beq.n	80034e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
      break;
 80034c8:	e00b      	b.n	80034e2 <DMA_CheckFifoParam+0xe6>
      break;
 80034ca:	bf00      	nop
 80034cc:	e00a      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
      break;
 80034ce:	bf00      	nop
 80034d0:	e008      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
      break;
 80034d2:	bf00      	nop
 80034d4:	e006      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
      break;
 80034d6:	bf00      	nop
 80034d8:	e004      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
      break;
 80034da:	bf00      	nop
 80034dc:	e002      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
      break;
 80034e2:	bf00      	nop
    }
  } 
  
  return status; 
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	@ 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e175      	b.n	8003800 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003514:	2201      	movs	r2, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	f040 8164 	bne.w	80037fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d005      	beq.n	800354a <HAL_GPIO_Init+0x56>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d130      	bne.n	80035ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 0201 	and.w	r2, r3, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d017      	beq.n	80035e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d123      	bne.n	800363c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	08da      	lsrs	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3208      	adds	r2, #8
 80035fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	220f      	movs	r2, #15
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	08da      	lsrs	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3208      	adds	r2, #8
 8003636:	69b9      	ldr	r1, [r7, #24]
 8003638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0203 	and.w	r2, r3, #3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80be 	beq.w	80037fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367e:	4b66      	ldr	r3, [pc, #408]	@ (8003818 <HAL_GPIO_Init+0x324>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	4a65      	ldr	r2, [pc, #404]	@ (8003818 <HAL_GPIO_Init+0x324>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003688:	6453      	str	r3, [r2, #68]	@ 0x44
 800368a:	4b63      	ldr	r3, [pc, #396]	@ (8003818 <HAL_GPIO_Init+0x324>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003696:	4a61      	ldr	r2, [pc, #388]	@ (800381c <HAL_GPIO_Init+0x328>)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	220f      	movs	r2, #15
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a58      	ldr	r2, [pc, #352]	@ (8003820 <HAL_GPIO_Init+0x32c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d037      	beq.n	8003732 <HAL_GPIO_Init+0x23e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a57      	ldr	r2, [pc, #348]	@ (8003824 <HAL_GPIO_Init+0x330>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d031      	beq.n	800372e <HAL_GPIO_Init+0x23a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a56      	ldr	r2, [pc, #344]	@ (8003828 <HAL_GPIO_Init+0x334>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02b      	beq.n	800372a <HAL_GPIO_Init+0x236>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a55      	ldr	r2, [pc, #340]	@ (800382c <HAL_GPIO_Init+0x338>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d025      	beq.n	8003726 <HAL_GPIO_Init+0x232>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a54      	ldr	r2, [pc, #336]	@ (8003830 <HAL_GPIO_Init+0x33c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01f      	beq.n	8003722 <HAL_GPIO_Init+0x22e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a53      	ldr	r2, [pc, #332]	@ (8003834 <HAL_GPIO_Init+0x340>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d019      	beq.n	800371e <HAL_GPIO_Init+0x22a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a52      	ldr	r2, [pc, #328]	@ (8003838 <HAL_GPIO_Init+0x344>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <HAL_GPIO_Init+0x226>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a51      	ldr	r2, [pc, #324]	@ (800383c <HAL_GPIO_Init+0x348>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00d      	beq.n	8003716 <HAL_GPIO_Init+0x222>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a50      	ldr	r2, [pc, #320]	@ (8003840 <HAL_GPIO_Init+0x34c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <HAL_GPIO_Init+0x21e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4f      	ldr	r2, [pc, #316]	@ (8003844 <HAL_GPIO_Init+0x350>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_GPIO_Init+0x21a>
 800370a:	2309      	movs	r3, #9
 800370c:	e012      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800370e:	230a      	movs	r3, #10
 8003710:	e010      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003712:	2308      	movs	r3, #8
 8003714:	e00e      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003716:	2307      	movs	r3, #7
 8003718:	e00c      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800371a:	2306      	movs	r3, #6
 800371c:	e00a      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800371e:	2305      	movs	r3, #5
 8003720:	e008      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003722:	2304      	movs	r3, #4
 8003724:	e006      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003726:	2303      	movs	r3, #3
 8003728:	e004      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800372a:	2302      	movs	r3, #2
 800372c:	e002      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003732:	2300      	movs	r3, #0
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	f002 0203 	and.w	r2, r2, #3
 800373a:	0092      	lsls	r2, r2, #2
 800373c:	4093      	lsls	r3, r2
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003744:	4935      	ldr	r1, [pc, #212]	@ (800381c <HAL_GPIO_Init+0x328>)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	3302      	adds	r3, #2
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003752:	4b3d      	ldr	r3, [pc, #244]	@ (8003848 <HAL_GPIO_Init+0x354>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003776:	4a34      	ldr	r2, [pc, #208]	@ (8003848 <HAL_GPIO_Init+0x354>)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800377c:	4b32      	ldr	r3, [pc, #200]	@ (8003848 <HAL_GPIO_Init+0x354>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a0:	4a29      	ldr	r2, [pc, #164]	@ (8003848 <HAL_GPIO_Init+0x354>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037a6:	4b28      	ldr	r3, [pc, #160]	@ (8003848 <HAL_GPIO_Init+0x354>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003848 <HAL_GPIO_Init+0x354>)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003848 <HAL_GPIO_Init+0x354>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f4:	4a14      	ldr	r2, [pc, #80]	@ (8003848 <HAL_GPIO_Init+0x354>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3301      	adds	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	f67f ae86 	bls.w	8003514 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3724      	adds	r7, #36	@ 0x24
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	40013800 	.word	0x40013800
 8003820:	40020000 	.word	0x40020000
 8003824:	40020400 	.word	0x40020400
 8003828:	40020800 	.word	0x40020800
 800382c:	40020c00 	.word	0x40020c00
 8003830:	40021000 	.word	0x40021000
 8003834:	40021400 	.word	0x40021400
 8003838:	40021800 	.word	0x40021800
 800383c:	40021c00 	.word	0x40021c00
 8003840:	40022000 	.word	0x40022000
 8003844:	40022400 	.word	0x40022400
 8003848:	40013c00 	.word	0x40013c00

0800384c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e001      	b.n	800386e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
 8003888:	4613      	mov	r3, r2
 800388a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800388c:	787b      	ldrb	r3, [r7, #1]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003898:	e003      	b.n	80038a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	619a      	str	r2, [r3, #24]
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b085      	sub	sp, #20
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c0:	887a      	ldrh	r2, [r7, #2]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4013      	ands	r3, r2
 80038c6:	041a      	lsls	r2, r3, #16
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	43d9      	mvns	r1, r3
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	400b      	ands	r3, r1
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	619a      	str	r2, [r3, #24]
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af02      	add	r7, sp, #8
 80038e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e108      	b.n	8003b06 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff f83e 	bl	8002990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2203      	movs	r2, #3
 8003918:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003922:	d102      	bne.n	800392a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f004 fcea 	bl	8008308 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7c1a      	ldrb	r2, [r3, #16]
 800393c:	f88d 2000 	strb.w	r2, [sp]
 8003940:	3304      	adds	r3, #4
 8003942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003944:	f004 fc86 	bl	8008254 <USB_CoreInit>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0d5      	b.n	8003b06 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f004 fce2 	bl	800832a <USB_SetCurrentMode>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0c6      	b.n	8003b06 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003978:	2300      	movs	r3, #0
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e04a      	b.n	8003a14 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3315      	adds	r3, #21
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3314      	adds	r3, #20
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039a6:	7bfa      	ldrb	r2, [r7, #15]
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	b298      	uxth	r0, r3
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	332e      	adds	r3, #46	@ 0x2e
 80039ba:	4602      	mov	r2, r0
 80039bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3318      	adds	r3, #24
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	331c      	adds	r3, #28
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	3320      	adds	r3, #32
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3324      	adds	r3, #36	@ 0x24
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	3301      	adds	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	791b      	ldrb	r3, [r3, #4]
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3af      	bcc.n	800397e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e044      	b.n	8003aae <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a3a:	7bfa      	ldrb	r2, [r7, #15]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a50:	7bfa      	ldrb	r2, [r7, #15]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a66:	7bfa      	ldrb	r2, [r7, #15]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	791b      	ldrb	r3, [r3, #4]
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3b5      	bcc.n	8003a24 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7c1a      	ldrb	r2, [r3, #16]
 8003ac0:	f88d 2000 	strb.w	r2, [sp]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac8:	f004 fc7c 	bl	80083c4 <USB_DevInit>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e013      	b.n	8003b06 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7b1b      	ldrb	r3, [r3, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d102      	bne.n	8003afa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f80b 	bl	8003b10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 fe37 	bl	8008772 <USB_DevDisconnect>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	10000003 	.word	0x10000003

08003b58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a04      	ldr	r2, [pc, #16]	@ (8003b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40007000 	.word	0x40007000

08003b78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	4b23      	ldr	r3, [pc, #140]	@ (8003c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	4a22      	ldr	r2, [pc, #136]	@ (8003c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8e:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba6:	f7fe ffe7 	bl	8002b78 <HAL_GetTick>
 8003baa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bac:	e009      	b.n	8003bc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bae:	f7fe ffe3 	bl	8002b78 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bbc:	d901      	bls.n	8003bc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e022      	b.n	8003c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bc2:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bce:	d1ee      	bne.n	8003bae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bd0:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bdc:	f7fe ffcc 	bl	8002b78 <HAL_GetTick>
 8003be0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003be2:	e009      	b.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003be4:	f7fe ffc8 	bl	8002b78 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bf2:	d901      	bls.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e007      	b.n	8003c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bf8:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c04:	d1ee      	bne.n	8003be4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40007000 	.word	0x40007000

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e29b      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8087 	beq.w	8003d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c3c:	4b96      	ldr	r3, [pc, #600]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d00c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c48:	4b93      	ldr	r3, [pc, #588]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d112      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62>
 8003c54:	4b90      	ldr	r3, [pc, #576]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c60:	d10b      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c62:	4b8d      	ldr	r3, [pc, #564]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d06c      	beq.n	8003d48 <HAL_RCC_OscConfig+0x130>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d168      	bne.n	8003d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e275      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x7a>
 8003c84:	4b84      	ldr	r3, [pc, #528]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a83      	ldr	r2, [pc, #524]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e02e      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x9c>
 8003c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7b      	ldr	r2, [pc, #492]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xc0>
 8003cbe:	4b76      	ldr	r3, [pc, #472]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a75      	ldr	r2, [pc, #468]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b73      	ldr	r3, [pc, #460]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a72      	ldr	r2, [pc, #456]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe ff3e 	bl	8002b78 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fe ff3a 	bl	8002b78 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e229      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b61      	ldr	r3, [pc, #388]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xe8>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe ff2a 	bl	8002b78 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe ff26 	bl	8002b78 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e215      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b57      	ldr	r3, [pc, #348]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x110>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d069      	beq.n	8003e2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d56:	4b50      	ldr	r3, [pc, #320]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b4d      	ldr	r3, [pc, #308]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x190>
 8003d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b47      	ldr	r3, [pc, #284]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e1e9      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d92:	4b41      	ldr	r3, [pc, #260]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	493d      	ldr	r1, [pc, #244]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e040      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d023      	beq.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b39      	ldr	r3, [pc, #228]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a38      	ldr	r2, [pc, #224]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fedc 	bl	8002b78 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc4:	f7fe fed8 	bl	8002b78 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1c7      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd6:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4929      	ldr	r1, [pc, #164]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
 8003df6:	e018      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe feb8 	bl	8002b78 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe feb4 	bl	8002b78 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1a3      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d038      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b16      	ldr	r3, [pc, #88]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e42:	4a15      	ldr	r2, [pc, #84]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe fe95 	bl	8002b78 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e52:	f7fe fe91 	bl	8002b78 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e180      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x23a>
 8003e70:	e01a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e76:	4a08      	ldr	r2, [pc, #32]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fe fe7b 	bl	8002b78 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fe fe77 	bl	8002b78 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d903      	bls.n	8003e9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e166      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
 8003e98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b92      	ldr	r3, [pc, #584]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a4 	beq.w	8003ffe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b8c      	ldr	r3, [pc, #560]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b89      	ldr	r3, [pc, #548]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	4a88      	ldr	r2, [pc, #544]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ece:	4b86      	ldr	r3, [pc, #536]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ede:	4b83      	ldr	r3, [pc, #524]	@ (80040ec <HAL_RCC_OscConfig+0x4d4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003eea:	4b80      	ldr	r3, [pc, #512]	@ (80040ec <HAL_RCC_OscConfig+0x4d4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7f      	ldr	r2, [pc, #508]	@ (80040ec <HAL_RCC_OscConfig+0x4d4>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fe3f 	bl	8002b78 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fe fe3b 	bl	8002b78 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	@ 0x64
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e12a      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f10:	4b76      	ldr	r3, [pc, #472]	@ (80040ec <HAL_RCC_OscConfig+0x4d4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x31a>
 8003f24:	4b70      	ldr	r3, [pc, #448]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	4a6f      	ldr	r2, [pc, #444]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f30:	e02d      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x33c>
 8003f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f46:	4b68      	ldr	r3, [pc, #416]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	4a67      	ldr	r2, [pc, #412]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f52:	e01c      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x35e>
 8003f5c:	4b62      	ldr	r3, [pc, #392]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f60:	4a61      	ldr	r2, [pc, #388]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f68:	4b5f      	ldr	r3, [pc, #380]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6c:	4a5e      	ldr	r2, [pc, #376]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f74:	e00b      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f76:	4b5c      	ldr	r3, [pc, #368]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f82:	4b59      	ldr	r3, [pc, #356]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a58      	ldr	r2, [pc, #352]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fe fdef 	bl	8002b78 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fe fdeb 	bl	8002b78 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0d8      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	4b4c      	ldr	r3, [pc, #304]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ee      	beq.n	8003f9e <HAL_RCC_OscConfig+0x386>
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fdd9 	bl	8002b78 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fe fdd5 	bl	8002b78 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0c2      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	4b41      	ldr	r3, [pc, #260]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80ae 	beq.w	8004164 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004008:	4b37      	ldr	r3, [pc, #220]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d06d      	beq.n	80040f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d14b      	bne.n	80040b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b32      	ldr	r3, [pc, #200]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a31      	ldr	r2, [pc, #196]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fda6 	bl	8002b78 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe fda2 	bl	8002b78 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e091      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	4b29      	ldr	r3, [pc, #164]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	019b      	lsls	r3, r3, #6
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	041b      	lsls	r3, r3, #16
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	071b      	lsls	r3, r3, #28
 800407a:	491b      	ldr	r1, [pc, #108]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004080:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a18      	ldr	r2, [pc, #96]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8004086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe fd74 	bl	8002b78 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe fd70 	bl	8002b78 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e05f      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b10      	ldr	r3, [pc, #64]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x47c>
 80040b2:	e057      	b.n	8004164 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b4:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0b      	ldr	r2, [pc, #44]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 80040ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fe fd5a 	bl	8002b78 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe fd56 	bl	8002b78 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e045      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b03      	ldr	r3, [pc, #12]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4b0>
 80040e6:	e03d      	b.n	8004164 <HAL_RCC_OscConfig+0x54c>
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004170 <HAL_RCC_OscConfig+0x558>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d030      	beq.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d129      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d122      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004126:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004128:	4293      	cmp	r3, r2
 800412a:	d119      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	3b01      	subs	r3, #1
 800413a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d10f      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800

08004174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0d0      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800418c:	4b6a      	ldr	r3, [pc, #424]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d910      	bls.n	80041bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b67      	ldr	r3, [pc, #412]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 020f 	bic.w	r2, r3, #15
 80041a2:	4965      	ldr	r1, [pc, #404]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b63      	ldr	r3, [pc, #396]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0b8      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041d4:	4b59      	ldr	r3, [pc, #356]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a58      	ldr	r2, [pc, #352]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ec:	4b53      	ldr	r3, [pc, #332]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a52      	ldr	r2, [pc, #328]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b50      	ldr	r3, [pc, #320]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	494d      	ldr	r1, [pc, #308]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d040      	beq.n	8004298 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b47      	ldr	r3, [pc, #284]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d115      	bne.n	8004256 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e07f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004236:	4b41      	ldr	r3, [pc, #260]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e073      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004246:	4b3d      	ldr	r3, [pc, #244]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e06b      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004256:	4b39      	ldr	r3, [pc, #228]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 0203 	bic.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4936      	ldr	r1, [pc, #216]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004268:	f7fe fc86 	bl	8002b78 <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	e00a      	b.n	8004286 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004270:	f7fe fc82 	bl	8002b78 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e053      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	4b2d      	ldr	r3, [pc, #180]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 020c 	and.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d1eb      	bne.n	8004270 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004298:	4b27      	ldr	r3, [pc, #156]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d210      	bcs.n	80042c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b24      	ldr	r3, [pc, #144]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 020f 	bic.w	r2, r3, #15
 80042ae:	4922      	ldr	r1, [pc, #136]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e032      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d4:	4b19      	ldr	r3, [pc, #100]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4916      	ldr	r1, [pc, #88]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042f2:	4b12      	ldr	r3, [pc, #72]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	490e      	ldr	r1, [pc, #56]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004306:	f000 f821 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800430a:	4602      	mov	r2, r0
 800430c:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	490a      	ldr	r1, [pc, #40]	@ (8004340 <HAL_RCC_ClockConfig+0x1cc>)
 8004318:	5ccb      	ldrb	r3, [r1, r3]
 800431a:	fa22 f303 	lsr.w	r3, r2, r3
 800431e:	4a09      	ldr	r2, [pc, #36]	@ (8004344 <HAL_RCC_ClockConfig+0x1d0>)
 8004320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004322:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <HAL_RCC_ClockConfig+0x1d4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe fbe2 	bl	8002af0 <HAL_InitTick>

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023c00 	.word	0x40023c00
 800433c:	40023800 	.word	0x40023800
 8004340:	0800b81c 	.word	0x0800b81c
 8004344:	20000000 	.word	0x20000000
 8004348:	20000004 	.word	0x20000004

0800434c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004350:	b094      	sub	sp, #80	@ 0x50
 8004352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	647b      	str	r3, [r7, #68]	@ 0x44
 8004358:	2300      	movs	r3, #0
 800435a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800435c:	2300      	movs	r3, #0
 800435e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004364:	4b79      	ldr	r3, [pc, #484]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b08      	cmp	r3, #8
 800436e:	d00d      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x40>
 8004370:	2b08      	cmp	r3, #8
 8004372:	f200 80e1 	bhi.w	8004538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x34>
 800437a:	2b04      	cmp	r3, #4
 800437c:	d003      	beq.n	8004386 <HAL_RCC_GetSysClockFreq+0x3a>
 800437e:	e0db      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004380:	4b73      	ldr	r3, [pc, #460]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x204>)
 8004382:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004384:	e0db      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004386:	4b73      	ldr	r3, [pc, #460]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x208>)
 8004388:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800438a:	e0d8      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800438c:	4b6f      	ldr	r3, [pc, #444]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004394:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004396:	4b6d      	ldr	r3, [pc, #436]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d063      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b6a      	ldr	r3, [pc, #424]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	2200      	movs	r2, #0
 80043aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043b6:	2300      	movs	r3, #0
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043be:	4622      	mov	r2, r4
 80043c0:	462b      	mov	r3, r5
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	0159      	lsls	r1, r3, #5
 80043cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d0:	0150      	lsls	r0, r2, #5
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4621      	mov	r1, r4
 80043d8:	1a51      	subs	r1, r2, r1
 80043da:	6139      	str	r1, [r7, #16]
 80043dc:	4629      	mov	r1, r5
 80043de:	eb63 0301 	sbc.w	r3, r3, r1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f0:	4659      	mov	r1, fp
 80043f2:	018b      	lsls	r3, r1, #6
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043fa:	4651      	mov	r1, sl
 80043fc:	018a      	lsls	r2, r1, #6
 80043fe:	4651      	mov	r1, sl
 8004400:	ebb2 0801 	subs.w	r8, r2, r1
 8004404:	4659      	mov	r1, fp
 8004406:	eb63 0901 	sbc.w	r9, r3, r1
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800441a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800441e:	4690      	mov	r8, r2
 8004420:	4699      	mov	r9, r3
 8004422:	4623      	mov	r3, r4
 8004424:	eb18 0303 	adds.w	r3, r8, r3
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	462b      	mov	r3, r5
 800442c:	eb49 0303 	adc.w	r3, r9, r3
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800443e:	4629      	mov	r1, r5
 8004440:	024b      	lsls	r3, r1, #9
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004448:	4621      	mov	r1, r4
 800444a:	024a      	lsls	r2, r1, #9
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004456:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800445c:	f7fb ff02 	bl	8000264 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004468:	e058      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446a:	4b38      	ldr	r3, [pc, #224]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	2200      	movs	r2, #0
 8004472:	4618      	mov	r0, r3
 8004474:	4611      	mov	r1, r2
 8004476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004484:	4642      	mov	r2, r8
 8004486:	464b      	mov	r3, r9
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	0159      	lsls	r1, r3, #5
 8004492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004496:	0150      	lsls	r0, r2, #5
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4641      	mov	r1, r8
 800449e:	ebb2 0a01 	subs.w	sl, r2, r1
 80044a2:	4649      	mov	r1, r9
 80044a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044bc:	ebb2 040a 	subs.w	r4, r2, sl
 80044c0:	eb63 050b 	sbc.w	r5, r3, fp
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	00eb      	lsls	r3, r5, #3
 80044ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d2:	00e2      	lsls	r2, r4, #3
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	4643      	mov	r3, r8
 80044da:	18e3      	adds	r3, r4, r3
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	464b      	mov	r3, r9
 80044e0:	eb45 0303 	adc.w	r3, r5, r3
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044f2:	4629      	mov	r1, r5
 80044f4:	028b      	lsls	r3, r1, #10
 80044f6:	4621      	mov	r1, r4
 80044f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044fc:	4621      	mov	r1, r4
 80044fe:	028a      	lsls	r2, r1, #10
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004506:	2200      	movs	r2, #0
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	61fa      	str	r2, [r7, #28]
 800450c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004510:	f7fb fea8 	bl	8000264 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4613      	mov	r3, r2
 800451a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800451c:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	3301      	adds	r3, #1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800452c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800452e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004536:	e002      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004538:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x204>)
 800453a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800453c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800453e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004540:	4618      	mov	r0, r3
 8004542:	3750      	adds	r7, #80	@ 0x50
 8004544:	46bd      	mov	sp, r7
 8004546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	00f42400 	.word	0x00f42400
 8004554:	007a1200 	.word	0x007a1200

08004558 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_RCC_GetHCLKFreq+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000000 	.word	0x20000000

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004574:	f7ff fff0 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0a9b      	lsrs	r3, r3, #10
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4903      	ldr	r1, [pc, #12]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	0800b82c 	.word	0x0800b82c

08004598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800459c:	f7ff ffdc 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	0b5b      	lsrs	r3, r3, #13
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4903      	ldr	r1, [pc, #12]	@ (80045bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40023800 	.word	0x40023800
 80045bc:	0800b82c 	.word	0x0800b82c

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d012      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045e8:	4b69      	ldr	r3, [pc, #420]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a68      	ldr	r2, [pc, #416]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045f2:	6093      	str	r3, [r2, #8]
 80045f4:	4b66      	ldr	r3, [pc, #408]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fc:	4964      	ldr	r1, [pc, #400]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800460a:	2301      	movs	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800461a:	4b5d      	ldr	r3, [pc, #372]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004620:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004628:	4959      	ldr	r1, [pc, #356]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004638:	d101      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800463a:	2301      	movs	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004646:	2301      	movs	r3, #1
 8004648:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d017      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004656:	4b4e      	ldr	r3, [pc, #312]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800465c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	494a      	ldr	r1, [pc, #296]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004674:	d101      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004676:	2301      	movs	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004692:	2301      	movs	r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 808b 	beq.w	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	4a39      	ldr	r2, [pc, #228]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b0:	4b37      	ldr	r3, [pc, #220]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046bc:	4b35      	ldr	r3, [pc, #212]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a34      	ldr	r2, [pc, #208]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fe fa56 	bl	8002b78 <HAL_GetTick>
 80046cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d0:	f7fe fa52 	bl	8002b78 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	@ 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e38f      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ee:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d035      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	429a      	cmp	r2, r3
 800470a:	d02e      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800470c:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004714:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004716:	4b1e      	ldr	r3, [pc, #120]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004720:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004726:	4a1a      	ldr	r2, [pc, #104]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800472e:	4a18      	ldr	r2, [pc, #96]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004734:	4b16      	ldr	r3, [pc, #88]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b01      	cmp	r3, #1
 800473e:	d114      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fe fa1a 	bl	8002b78 <HAL_GetTick>
 8004744:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004746:	e00a      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fe fa16 	bl	8002b78 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e351      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475e:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0ee      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004776:	d111      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004784:	4b04      	ldr	r3, [pc, #16]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004786:	400b      	ands	r3, r1
 8004788:	4901      	ldr	r1, [pc, #4]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
 800478e:	e00b      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004790:	40023800 	.word	0x40023800
 8004794:	40007000 	.word	0x40007000
 8004798:	0ffffcff 	.word	0x0ffffcff
 800479c:	4bac      	ldr	r3, [pc, #688]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4aab      	ldr	r2, [pc, #684]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80047a6:	6093      	str	r3, [r2, #8]
 80047a8:	4ba9      	ldr	r3, [pc, #676]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b4:	49a6      	ldr	r1, [pc, #664]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d010      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047c6:	4ba2      	ldr	r3, [pc, #648]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047cc:	4aa0      	ldr	r2, [pc, #640]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	499b      	ldr	r1, [pc, #620]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047f4:	4b96      	ldr	r3, [pc, #600]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004802:	4993      	ldr	r1, [pc, #588]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004816:	4b8e      	ldr	r3, [pc, #568]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004824:	498a      	ldr	r1, [pc, #552]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004838:	4b85      	ldr	r3, [pc, #532]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004846:	4982      	ldr	r1, [pc, #520]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800485a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	4979      	ldr	r1, [pc, #484]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800487c:	4b74      	ldr	r3, [pc, #464]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488a:	4971      	ldr	r1, [pc, #452]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800489e:	4b6c      	ldr	r3, [pc, #432]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	f023 020c 	bic.w	r2, r3, #12
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ac:	4968      	ldr	r1, [pc, #416]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048c0:	4b63      	ldr	r3, [pc, #396]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ce:	4960      	ldr	r1, [pc, #384]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f0:	4957      	ldr	r1, [pc, #348]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004904:	4b52      	ldr	r3, [pc, #328]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004912:	494f      	ldr	r1, [pc, #316]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004926:	4b4a      	ldr	r3, [pc, #296]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004934:	4946      	ldr	r1, [pc, #280]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004948:	4b41      	ldr	r3, [pc, #260]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004956:	493e      	ldr	r1, [pc, #248]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800496a:	4b39      	ldr	r3, [pc, #228]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004970:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004978:	4935      	ldr	r1, [pc, #212]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800498c:	4b30      	ldr	r3, [pc, #192]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800499a:	492d      	ldr	r1, [pc, #180]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d011      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049ae:	4b28      	ldr	r3, [pc, #160]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049bc:	4924      	ldr	r1, [pc, #144]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049cc:	d101      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ee:	4b18      	ldr	r3, [pc, #96]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fc:	4914      	ldr	r1, [pc, #80]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a16:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a20:	490b      	ldr	r1, [pc, #44]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a34:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a44:	4902      	ldr	r1, [pc, #8]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a4c:	e002      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a60:	4b8a      	ldr	r3, [pc, #552]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	4986      	ldr	r1, [pc, #536]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a84:	4b81      	ldr	r3, [pc, #516]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a8a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a94:	497d      	ldr	r1, [pc, #500]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d006      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80d6 	beq.w	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab0:	4b76      	ldr	r3, [pc, #472]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a75      	ldr	r2, [pc, #468]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abc:	f7fe f85c 	bl	8002b78 <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ac4:	f7fe f858 	bl	8002b78 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e195      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d021      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d11d      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004af6:	4b65      	ldr	r3, [pc, #404]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b04:	4b61      	ldr	r3, [pc, #388]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b0a:	0e1b      	lsrs	r3, r3, #24
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	019a      	lsls	r2, r3, #6
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	061b      	lsls	r3, r3, #24
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	071b      	lsls	r3, r3, #28
 8004b2a:	4958      	ldr	r1, [pc, #352]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d02e      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b5c:	d129      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b6c:	4b47      	ldr	r3, [pc, #284]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b72:	0f1b      	lsrs	r3, r3, #28
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	019a      	lsls	r2, r3, #6
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	493e      	ldr	r1, [pc, #248]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ba0:	f023 021f 	bic.w	r2, r3, #31
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	4938      	ldr	r1, [pc, #224]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01d      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bbe:	4b33      	ldr	r3, [pc, #204]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc4:	0e1b      	lsrs	r3, r3, #24
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd2:	0f1b      	lsrs	r3, r3, #28
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	019a      	lsls	r2, r3, #6
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	431a      	orrs	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	061b      	lsls	r3, r3, #24
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	071b      	lsls	r3, r3, #28
 8004bf2:	4926      	ldr	r1, [pc, #152]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d011      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	019a      	lsls	r2, r3, #6
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	071b      	lsls	r3, r3, #28
 8004c22:	491a      	ldr	r1, [pc, #104]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c2a:	4b18      	ldr	r3, [pc, #96]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a17      	ldr	r2, [pc, #92]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c36:	f7fd ff9f 	bl	8002b78 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c3e:	f7fd ff9b 	bl	8002b78 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b64      	cmp	r3, #100	@ 0x64
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e0d8      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c50:	4b0e      	ldr	r3, [pc, #56]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	f040 80ce 	bne.w	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a08      	ldr	r2, [pc, #32]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fd ff82 	bl	8002b78 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c76:	e00b      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c78:	f7fd ff7e 	bl	8002b78 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	@ 0x64
 8004c84:	d904      	bls.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0bb      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c90:	4b5e      	ldr	r3, [pc, #376]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c9c:	d0ec      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d02e      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d12a      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cc6:	4b51      	ldr	r3, [pc, #324]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cda:	0f1b      	lsrs	r3, r3, #28
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	019a      	lsls	r2, r3, #6
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	061b      	lsls	r3, r3, #24
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	4944      	ldr	r1, [pc, #272]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d02:	4b42      	ldr	r3, [pc, #264]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d08:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	493d      	ldr	r1, [pc, #244]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d022      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d30:	d11d      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d32:	4b36      	ldr	r3, [pc, #216]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d38:	0e1b      	lsrs	r3, r3, #24
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d40:	4b32      	ldr	r3, [pc, #200]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d46:	0f1b      	lsrs	r3, r3, #28
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	019a      	lsls	r2, r3, #6
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	041b      	lsls	r3, r3, #16
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	4929      	ldr	r1, [pc, #164]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d028      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d7a:	4b24      	ldr	r3, [pc, #144]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	0e1b      	lsrs	r3, r3, #24
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d88:	4b20      	ldr	r3, [pc, #128]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	019a      	lsls	r2, r3, #6
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	431a      	orrs	r2, r3
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	061b      	lsls	r3, r3, #24
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	071b      	lsls	r3, r3, #28
 8004dae:	4917      	ldr	r1, [pc, #92]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	4911      	ldr	r1, [pc, #68]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd8:	f7fd fece 	bl	8002b78 <HAL_GetTick>
 8004ddc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004de0:	f7fd feca 	bl	8002b78 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	@ 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e007      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004df2:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dfe:	d1ef      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800

08004e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e049      	b.n	8004eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fd fafe 	bl	8002438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f001 f904 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d001      	beq.n	8004ed8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e04c      	b.n	8004f72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a26      	ldr	r2, [pc, #152]	@ (8004f80 <HAL_TIM_Base_Start+0xc0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d022      	beq.n	8004f30 <HAL_TIM_Base_Start+0x70>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef2:	d01d      	beq.n	8004f30 <HAL_TIM_Base_Start+0x70>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a22      	ldr	r2, [pc, #136]	@ (8004f84 <HAL_TIM_Base_Start+0xc4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_TIM_Base_Start+0x70>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a21      	ldr	r2, [pc, #132]	@ (8004f88 <HAL_TIM_Base_Start+0xc8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_TIM_Base_Start+0x70>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004f8c <HAL_TIM_Base_Start+0xcc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_TIM_Base_Start+0x70>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1e      	ldr	r2, [pc, #120]	@ (8004f90 <HAL_TIM_Base_Start+0xd0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_TIM_Base_Start+0x70>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1c      	ldr	r2, [pc, #112]	@ (8004f94 <HAL_TIM_Base_Start+0xd4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_TIM_Base_Start+0x70>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f98 <HAL_TIM_Base_Start+0xd8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d115      	bne.n	8004f5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	4b19      	ldr	r3, [pc, #100]	@ (8004f9c <HAL_TIM_Base_Start+0xdc>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d015      	beq.n	8004f6e <HAL_TIM_Base_Start+0xae>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f48:	d011      	beq.n	8004f6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	e008      	b.n	8004f6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e000      	b.n	8004f70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40001800 	.word	0x40001800
 8004f9c:	00010007 	.word	0x00010007

08004fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d001      	beq.n	8004fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e054      	b.n	8005062 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a26      	ldr	r2, [pc, #152]	@ (8005070 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d022      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x80>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe2:	d01d      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x80>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a22      	ldr	r2, [pc, #136]	@ (8005074 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x80>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a21      	ldr	r2, [pc, #132]	@ (8005078 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x80>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800507c <HAL_TIM_Base_Start_IT+0xdc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x80>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1e      	ldr	r2, [pc, #120]	@ (8005080 <HAL_TIM_Base_Start_IT+0xe0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x80>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1c      	ldr	r2, [pc, #112]	@ (8005084 <HAL_TIM_Base_Start_IT+0xe4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x80>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <HAL_TIM_Base_Start_IT+0xe8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d115      	bne.n	800504c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	4b19      	ldr	r3, [pc, #100]	@ (800508c <HAL_TIM_Base_Start_IT+0xec>)
 8005028:	4013      	ands	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b06      	cmp	r3, #6
 8005030:	d015      	beq.n	800505e <HAL_TIM_Base_Start_IT+0xbe>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005038:	d011      	beq.n	800505e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	e008      	b.n	800505e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e000      	b.n	8005060 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40010000 	.word	0x40010000
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800
 800507c:	40000c00 	.word	0x40000c00
 8005080:	40010400 	.word	0x40010400
 8005084:	40014000 	.word	0x40014000
 8005088:	40001800 	.word	0x40001800
 800508c:	00010007 	.word	0x00010007

08005090 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10f      	bne.n	80050d8 <HAL_TIM_Base_Stop_IT+0x48>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	f240 4344 	movw	r3, #1092	@ 0x444
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d107      	bne.n	80050d8 <HAL_TIM_Base_Stop_IT+0x48>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e049      	b.n	8005194 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7fd f933 	bl	8002380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3304      	adds	r3, #4
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f000 ff95 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x24>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e03c      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d109      	bne.n	80051da <HAL_TIM_PWM_Start+0x3e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	bf14      	ite	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	2300      	moveq	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	e02f      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d109      	bne.n	80051f4 <HAL_TIM_PWM_Start+0x58>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e022      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d109      	bne.n	800520e <HAL_TIM_PWM_Start+0x72>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b01      	cmp	r3, #1
 8005204:	bf14      	ite	ne
 8005206:	2301      	movne	r3, #1
 8005208:	2300      	moveq	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e015      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b10      	cmp	r3, #16
 8005212:	d109      	bne.n	8005228 <HAL_TIM_PWM_Start+0x8c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	bf14      	ite	ne
 8005220:	2301      	movne	r3, #1
 8005222:	2300      	moveq	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e008      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	bf14      	ite	ne
 8005234:	2301      	movne	r3, #1
 8005236:	2300      	moveq	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e092      	b.n	8005368 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <HAL_TIM_PWM_Start+0xb6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005250:	e023      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b04      	cmp	r3, #4
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0xc6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005260:	e01b      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b08      	cmp	r3, #8
 8005266:	d104      	bne.n	8005272 <HAL_TIM_PWM_Start+0xd6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005270:	e013      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b0c      	cmp	r3, #12
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Start+0xe6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005280:	e00b      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b10      	cmp	r3, #16
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Start+0xf6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005290:	e003      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2201      	movs	r2, #1
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 fba8 	bl	80069f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a30      	ldr	r2, [pc, #192]	@ (8005370 <HAL_TIM_PWM_Start+0x1d4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_TIM_PWM_Start+0x120>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005374 <HAL_TIM_PWM_Start+0x1d8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d101      	bne.n	80052c0 <HAL_TIM_PWM_Start+0x124>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_TIM_PWM_Start+0x126>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a25      	ldr	r2, [pc, #148]	@ (8005370 <HAL_TIM_PWM_Start+0x1d4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <HAL_TIM_PWM_Start+0x18a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e8:	d01d      	beq.n	8005326 <HAL_TIM_PWM_Start+0x18a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a22      	ldr	r2, [pc, #136]	@ (8005378 <HAL_TIM_PWM_Start+0x1dc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <HAL_TIM_PWM_Start+0x18a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a20      	ldr	r2, [pc, #128]	@ (800537c <HAL_TIM_PWM_Start+0x1e0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_TIM_PWM_Start+0x18a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1f      	ldr	r2, [pc, #124]	@ (8005380 <HAL_TIM_PWM_Start+0x1e4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_TIM_PWM_Start+0x18a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a19      	ldr	r2, [pc, #100]	@ (8005374 <HAL_TIM_PWM_Start+0x1d8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_TIM_PWM_Start+0x18a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1b      	ldr	r2, [pc, #108]	@ (8005384 <HAL_TIM_PWM_Start+0x1e8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_TIM_PWM_Start+0x18a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a19      	ldr	r2, [pc, #100]	@ (8005388 <HAL_TIM_PWM_Start+0x1ec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d115      	bne.n	8005352 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	4b17      	ldr	r3, [pc, #92]	@ (800538c <HAL_TIM_PWM_Start+0x1f0>)
 800532e:	4013      	ands	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b06      	cmp	r3, #6
 8005336:	d015      	beq.n	8005364 <HAL_TIM_PWM_Start+0x1c8>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533e:	d011      	beq.n	8005364 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005350:	e008      	b.n	8005364 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e000      	b.n	8005366 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40010000 	.word	0x40010000
 8005374:	40010400 	.word	0x40010400
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40014000 	.word	0x40014000
 8005388:	40001800 	.word	0x40001800
 800538c:	00010007 	.word	0x00010007

08005390 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 fb28 	bl	80069f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a36      	ldr	r2, [pc, #216]	@ (8005488 <HAL_TIM_PWM_Stop+0xf8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_TIM_PWM_Stop+0x2c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a35      	ldr	r2, [pc, #212]	@ (800548c <HAL_TIM_PWM_Stop+0xfc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <HAL_TIM_PWM_Stop+0x30>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_TIM_PWM_Stop+0x32>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d017      	beq.n	80053f6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <HAL_TIM_PWM_Stop+0x66>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6a1a      	ldr	r2, [r3, #32]
 80053dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_PWM_Stop+0x66>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10f      	bne.n	8005426 <HAL_TIM_PWM_Stop+0x96>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005410:	4013      	ands	r3, r2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d107      	bne.n	8005426 <HAL_TIM_PWM_Stop+0x96>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_TIM_PWM_Stop+0xa6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005434:	e023      	b.n	800547e <HAL_TIM_PWM_Stop+0xee>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d104      	bne.n	8005446 <HAL_TIM_PWM_Stop+0xb6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005444:	e01b      	b.n	800547e <HAL_TIM_PWM_Stop+0xee>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b08      	cmp	r3, #8
 800544a:	d104      	bne.n	8005456 <HAL_TIM_PWM_Stop+0xc6>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005454:	e013      	b.n	800547e <HAL_TIM_PWM_Stop+0xee>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d104      	bne.n	8005466 <HAL_TIM_PWM_Stop+0xd6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005464:	e00b      	b.n	800547e <HAL_TIM_PWM_Stop+0xee>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b10      	cmp	r3, #16
 800546a:	d104      	bne.n	8005476 <HAL_TIM_PWM_Stop+0xe6>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005474:	e003      	b.n	800547e <HAL_TIM_PWM_Stop+0xee>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40010000 	.word	0x40010000
 800548c:	40010400 	.word	0x40010400

08005490 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e049      	b.n	8005536 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f841 	bl	800553e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f000 fdc4 	bl	800605c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e08f      	b.n	8005688 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7fc fdb5 	bl	80020ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6899      	ldr	r1, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	4b3e      	ldr	r3, [pc, #248]	@ (8005690 <HAL_TIM_Encoder_Init+0x13c>)
 8005596:	400b      	ands	r3, r1
 8005598:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f000 fd59 	bl	800605c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4b31      	ldr	r3, [pc, #196]	@ (8005694 <HAL_TIM_Encoder_Init+0x140>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	4313      	orrs	r3, r2
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005698 <HAL_TIM_Encoder_Init+0x144>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4b2a      	ldr	r3, [pc, #168]	@ (800569c <HAL_TIM_Encoder_Init+0x148>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	4313      	orrs	r3, r2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	011a      	lsls	r2, r3, #4
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	031b      	lsls	r3, r3, #12
 8005614:	4313      	orrs	r3, r2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005622:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	4313      	orrs	r3, r2
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	fffebff8 	.word	0xfffebff8
 8005694:	fffffcfc 	.word	0xfffffcfc
 8005698:	fffff3f3 	.word	0xfffff3f3
 800569c:	ffff0f0f 	.word	0xffff0f0f

080056a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d110      	bne.n	80056f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d102      	bne.n	80056dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056d6:	7b7b      	ldrb	r3, [r7, #13]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d001      	beq.n	80056e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e069      	b.n	80057b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056f0:	e031      	b.n	8005756 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d110      	bne.n	800571a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d102      	bne.n	8005704 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056fe:	7b3b      	ldrb	r3, [r7, #12]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d001      	beq.n	8005708 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e055      	b.n	80057b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005718:	e01d      	b.n	8005756 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d108      	bne.n	8005732 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005720:	7bbb      	ldrb	r3, [r7, #14]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d105      	bne.n	8005732 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005726:	7b7b      	ldrb	r3, [r7, #13]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d102      	bne.n	8005732 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800572c:	7b3b      	ldrb	r3, [r7, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d001      	beq.n	8005736 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e03e      	b.n	80057b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2202      	movs	r2, #2
 800574a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_TIM_Encoder_Start+0xc4>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d008      	beq.n	8005774 <HAL_TIM_Encoder_Start+0xd4>
 8005762:	e00f      	b.n	8005784 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f001 f943 	bl	80069f8 <TIM_CCxChannelCmd>
      break;
 8005772:	e016      	b.n	80057a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2201      	movs	r2, #1
 800577a:	2104      	movs	r1, #4
 800577c:	4618      	mov	r0, r3
 800577e:	f001 f93b 	bl	80069f8 <TIM_CCxChannelCmd>
      break;
 8005782:	e00e      	b.n	80057a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2201      	movs	r2, #1
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f001 f933 	bl	80069f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2201      	movs	r2, #1
 8005798:	2104      	movs	r1, #4
 800579a:	4618      	mov	r0, r3
 800579c:	f001 f92c 	bl	80069f8 <TIM_CCxChannelCmd>
      break;
 80057a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_TIM_Encoder_Stop+0x18>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d008      	beq.n	80057e4 <HAL_TIM_Encoder_Stop+0x28>
 80057d2:	e00f      	b.n	80057f4 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2200      	movs	r2, #0
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f001 f90b 	bl	80069f8 <TIM_CCxChannelCmd>
      break;
 80057e2:	e016      	b.n	8005812 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	2104      	movs	r1, #4
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 f903 	bl	80069f8 <TIM_CCxChannelCmd>
      break;
 80057f2:	e00e      	b.n	8005812 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2200      	movs	r2, #0
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f001 f8fb 	bl	80069f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	2104      	movs	r1, #4
 800580a:	4618      	mov	r0, r3
 800580c:	f001 f8f4 	bl	80069f8 <TIM_CCxChannelCmd>
      break;
 8005810:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	f241 1311 	movw	r3, #4369	@ 0x1111
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10f      	bne.n	8005842 <HAL_TIM_Encoder_Stop+0x86>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	f240 4344 	movw	r3, #1092	@ 0x444
 800582c:	4013      	ands	r3, r2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d107      	bne.n	8005842 <HAL_TIM_Encoder_Stop+0x86>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_TIM_Encoder_Stop+0x92>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b04      	cmp	r3, #4
 800584c:	d148      	bne.n	80058e0 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <HAL_TIM_Encoder_Stop+0xa2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800585c:	e023      	b.n	80058a6 <HAL_TIM_Encoder_Stop+0xea>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b04      	cmp	r3, #4
 8005862:	d104      	bne.n	800586e <HAL_TIM_Encoder_Stop+0xb2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800586c:	e01b      	b.n	80058a6 <HAL_TIM_Encoder_Stop+0xea>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b08      	cmp	r3, #8
 8005872:	d104      	bne.n	800587e <HAL_TIM_Encoder_Stop+0xc2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800587c:	e013      	b.n	80058a6 <HAL_TIM_Encoder_Stop+0xea>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	d104      	bne.n	800588e <HAL_TIM_Encoder_Stop+0xd2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800588c:	e00b      	b.n	80058a6 <HAL_TIM_Encoder_Stop+0xea>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b10      	cmp	r3, #16
 8005892:	d104      	bne.n	800589e <HAL_TIM_Encoder_Stop+0xe2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800589c:	e003      	b.n	80058a6 <HAL_TIM_Encoder_Stop+0xea>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_Encoder_Stop+0xfa>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b4:	e024      	b.n	8005900 <HAL_TIM_Encoder_Stop+0x144>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_Encoder_Stop+0x10a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c4:	e01c      	b.n	8005900 <HAL_TIM_Encoder_Stop+0x144>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_Encoder_Stop+0x11a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058d4:	e014      	b.n	8005900 <HAL_TIM_Encoder_Stop+0x144>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80058de:	e00f      	b.n	8005900 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d020      	beq.n	800596e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01b      	beq.n	800596e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f06f 0202 	mvn.w	r2, #2
 800593e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fb63 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 800595a:	e005      	b.n	8005968 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fb55 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fb66 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d020      	beq.n	80059ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01b      	beq.n	80059ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f06f 0204 	mvn.w	r2, #4
 800598a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fb3d 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 80059a6:	e005      	b.n	80059b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fb2f 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fb40 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d020      	beq.n	8005a06 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01b      	beq.n	8005a06 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f06f 0208 	mvn.w	r2, #8
 80059d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2204      	movs	r2, #4
 80059dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fb17 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 80059f2:	e005      	b.n	8005a00 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fb09 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fb1a 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d020      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01b      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f06f 0210 	mvn.w	r2, #16
 8005a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2208      	movs	r2, #8
 8005a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 faf1 	bl	8006020 <HAL_TIM_IC_CaptureCallback>
 8005a3e:	e005      	b.n	8005a4c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fae3 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 faf4 	bl	8006034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00c      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f06f 0201 	mvn.w	r2, #1
 8005a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7fb fa7f 	bl	8000f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f001 f868 	bl	8006b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 f860 	bl	8006b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 faae 	bl	8006048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00c      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0220 	mvn.w	r2, #32
 8005b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f001 f828 	bl	8006b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e088      	b.n	8005c48 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d11b      	bne.n	8005b7c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b54:	f000 fd8c 	bl	8006670 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 020c 	bic.w	r2, r2, #12
 8005b66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6999      	ldr	r1, [r3, #24]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	619a      	str	r2, [r3, #24]
 8005b7a:	e060      	b.n	8005c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d11c      	bne.n	8005bbc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005b92:	f000 fe10 	bl	80067b6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699a      	ldr	r2, [r3, #24]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005ba4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6999      	ldr	r1, [r3, #24]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	021a      	lsls	r2, r3, #8
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	619a      	str	r2, [r3, #24]
 8005bba:	e040      	b.n	8005c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d11b      	bne.n	8005bfa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005bd2:	f000 fe5d 	bl	8006890 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 020c 	bic.w	r2, r2, #12
 8005be4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	61da      	str	r2, [r3, #28]
 8005bf8:	e021      	b.n	8005c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b0c      	cmp	r3, #12
 8005bfe:	d11c      	bne.n	8005c3a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c10:	f000 fe7a 	bl	8006908 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69d9      	ldr	r1, [r3, #28]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	61da      	str	r2, [r3, #28]
 8005c38:	e001      	b.n	8005c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e0ff      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b14      	cmp	r3, #20
 8005c7a:	f200 80f0 	bhi.w	8005e5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005cd9 	.word	0x08005cd9
 8005c88:	08005e5f 	.word	0x08005e5f
 8005c8c:	08005e5f 	.word	0x08005e5f
 8005c90:	08005e5f 	.word	0x08005e5f
 8005c94:	08005d19 	.word	0x08005d19
 8005c98:	08005e5f 	.word	0x08005e5f
 8005c9c:	08005e5f 	.word	0x08005e5f
 8005ca0:	08005e5f 	.word	0x08005e5f
 8005ca4:	08005d5b 	.word	0x08005d5b
 8005ca8:	08005e5f 	.word	0x08005e5f
 8005cac:	08005e5f 	.word	0x08005e5f
 8005cb0:	08005e5f 	.word	0x08005e5f
 8005cb4:	08005d9b 	.word	0x08005d9b
 8005cb8:	08005e5f 	.word	0x08005e5f
 8005cbc:	08005e5f 	.word	0x08005e5f
 8005cc0:	08005e5f 	.word	0x08005e5f
 8005cc4:	08005ddd 	.word	0x08005ddd
 8005cc8:	08005e5f 	.word	0x08005e5f
 8005ccc:	08005e5f 	.word	0x08005e5f
 8005cd0:	08005e5f 	.word	0x08005e5f
 8005cd4:	08005e1d 	.word	0x08005e1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fa68 	bl	80061b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0208 	orr.w	r2, r2, #8
 8005cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0204 	bic.w	r2, r2, #4
 8005d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6999      	ldr	r1, [r3, #24]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	619a      	str	r2, [r3, #24]
      break;
 8005d16:	e0a5      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 faba 	bl	8006298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6999      	ldr	r1, [r3, #24]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]
      break;
 8005d58:	e084      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fb11 	bl	8006388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0208 	orr.w	r2, r2, #8
 8005d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0204 	bic.w	r2, r2, #4
 8005d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69d9      	ldr	r1, [r3, #28]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	61da      	str	r2, [r3, #28]
      break;
 8005d98:	e064      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fb67 	bl	8006474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69d9      	ldr	r1, [r3, #28]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	021a      	lsls	r2, r3, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	61da      	str	r2, [r3, #28]
      break;
 8005dda:	e043      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fb9e 	bl	8006524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0208 	orr.w	r2, r2, #8
 8005df6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0204 	bic.w	r2, r2, #4
 8005e06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e1a:	e023      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fbd0 	bl	80065c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	021a      	lsls	r2, r3, #8
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e5c:	e002      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]
      break;
 8005e62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop

08005e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e0b4      	b.n	8005ffe <HAL_TIM_ConfigClockSource+0x186>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4b56      	ldr	r3, [pc, #344]	@ (8006008 <HAL_TIM_ConfigClockSource+0x190>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ecc:	d03e      	beq.n	8005f4c <HAL_TIM_ConfigClockSource+0xd4>
 8005ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed2:	f200 8087 	bhi.w	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eda:	f000 8086 	beq.w	8005fea <HAL_TIM_ConfigClockSource+0x172>
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee2:	d87f      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b70      	cmp	r3, #112	@ 0x70
 8005ee6:	d01a      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0xa6>
 8005ee8:	2b70      	cmp	r3, #112	@ 0x70
 8005eea:	d87b      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b60      	cmp	r3, #96	@ 0x60
 8005eee:	d050      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x11a>
 8005ef0:	2b60      	cmp	r3, #96	@ 0x60
 8005ef2:	d877      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b50      	cmp	r3, #80	@ 0x50
 8005ef6:	d03c      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0xfa>
 8005ef8:	2b50      	cmp	r3, #80	@ 0x50
 8005efa:	d873      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b40      	cmp	r3, #64	@ 0x40
 8005efe:	d058      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8005f00:	2b40      	cmp	r3, #64	@ 0x40
 8005f02:	d86f      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b30      	cmp	r3, #48	@ 0x30
 8005f06:	d064      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f08:	2b30      	cmp	r3, #48	@ 0x30
 8005f0a:	d86b      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	d060      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d867      	bhi.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05c      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d05a      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f1c:	e062      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f2e:	f000 fd43 	bl	80069b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	609a      	str	r2, [r3, #8]
      break;
 8005f4a:	e04f      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f5c:	f000 fd2c 	bl	80069b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f6e:	609a      	str	r2, [r3, #8]
      break;
 8005f70:	e03c      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f000 fbea 	bl	8006758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2150      	movs	r1, #80	@ 0x50
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fcf9 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 8005f90:	e02c      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f000 fc46 	bl	8006830 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2160      	movs	r1, #96	@ 0x60
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fce9 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 8005fb0:	e01c      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f000 fbca 	bl	8006758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2140      	movs	r1, #64	@ 0x40
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fcd9 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 8005fd0:	e00c      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f000 fcd0 	bl	8006982 <TIM_ITRx_SetConfig>
      break;
 8005fe2:	e003      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe8:	e000      	b.n	8005fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	fffeff88 	.word	0xfffeff88

0800600c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a46      	ldr	r2, [pc, #280]	@ (8006188 <TIM_Base_SetConfig+0x12c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d013      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607a:	d00f      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a43      	ldr	r2, [pc, #268]	@ (800618c <TIM_Base_SetConfig+0x130>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00b      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a42      	ldr	r2, [pc, #264]	@ (8006190 <TIM_Base_SetConfig+0x134>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d007      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a41      	ldr	r2, [pc, #260]	@ (8006194 <TIM_Base_SetConfig+0x138>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_Base_SetConfig+0x40>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a40      	ldr	r2, [pc, #256]	@ (8006198 <TIM_Base_SetConfig+0x13c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d108      	bne.n	80060ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a35      	ldr	r2, [pc, #212]	@ (8006188 <TIM_Base_SetConfig+0x12c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d02b      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060bc:	d027      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a32      	ldr	r2, [pc, #200]	@ (800618c <TIM_Base_SetConfig+0x130>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d023      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a31      	ldr	r2, [pc, #196]	@ (8006190 <TIM_Base_SetConfig+0x134>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01f      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a30      	ldr	r2, [pc, #192]	@ (8006194 <TIM_Base_SetConfig+0x138>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d01b      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006198 <TIM_Base_SetConfig+0x13c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d017      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a2e      	ldr	r2, [pc, #184]	@ (800619c <TIM_Base_SetConfig+0x140>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a2d      	ldr	r2, [pc, #180]	@ (80061a0 <TIM_Base_SetConfig+0x144>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00f      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a2c      	ldr	r2, [pc, #176]	@ (80061a4 <TIM_Base_SetConfig+0x148>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00b      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a2b      	ldr	r2, [pc, #172]	@ (80061a8 <TIM_Base_SetConfig+0x14c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d007      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a2a      	ldr	r2, [pc, #168]	@ (80061ac <TIM_Base_SetConfig+0x150>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a29      	ldr	r2, [pc, #164]	@ (80061b0 <TIM_Base_SetConfig+0x154>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a10      	ldr	r2, [pc, #64]	@ (8006188 <TIM_Base_SetConfig+0x12c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0xf8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a12      	ldr	r2, [pc, #72]	@ (8006198 <TIM_Base_SetConfig+0x13c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d103      	bne.n	800615c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	611a      	str	r2, [r3, #16]
  }
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40000c00 	.word	0x40000c00
 8006198:	40010400 	.word	0x40010400
 800619c:	40014000 	.word	0x40014000
 80061a0:	40014400 	.word	0x40014400
 80061a4:	40014800 	.word	0x40014800
 80061a8:	40001800 	.word	0x40001800
 80061ac:	40001c00 	.word	0x40001c00
 80061b0:	40002000 	.word	0x40002000

080061b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f023 0201 	bic.w	r2, r3, #1
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4b2b      	ldr	r3, [pc, #172]	@ (800628c <TIM_OC1_SetConfig+0xd8>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0303 	bic.w	r3, r3, #3
 80061ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 0302 	bic.w	r3, r3, #2
 80061fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a21      	ldr	r2, [pc, #132]	@ (8006290 <TIM_OC1_SetConfig+0xdc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_OC1_SetConfig+0x64>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a20      	ldr	r2, [pc, #128]	@ (8006294 <TIM_OC1_SetConfig+0xe0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10c      	bne.n	8006232 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 0308 	bic.w	r3, r3, #8
 800621e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 0304 	bic.w	r3, r3, #4
 8006230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a16      	ldr	r2, [pc, #88]	@ (8006290 <TIM_OC1_SetConfig+0xdc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d003      	beq.n	8006242 <TIM_OC1_SetConfig+0x8e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a15      	ldr	r2, [pc, #84]	@ (8006294 <TIM_OC1_SetConfig+0xe0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d111      	bne.n	8006266 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	621a      	str	r2, [r3, #32]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	fffeff8f 	.word	0xfffeff8f
 8006290:	40010000 	.word	0x40010000
 8006294:	40010400 	.word	0x40010400

08006298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f023 0210 	bic.w	r2, r3, #16
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4b2e      	ldr	r3, [pc, #184]	@ (800637c <TIM_OC2_SetConfig+0xe4>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0320 	bic.w	r3, r3, #32
 80062e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a23      	ldr	r2, [pc, #140]	@ (8006380 <TIM_OC2_SetConfig+0xe8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_OC2_SetConfig+0x68>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a22      	ldr	r2, [pc, #136]	@ (8006384 <TIM_OC2_SetConfig+0xec>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10d      	bne.n	800631c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800631a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a18      	ldr	r2, [pc, #96]	@ (8006380 <TIM_OC2_SetConfig+0xe8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC2_SetConfig+0x94>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a17      	ldr	r2, [pc, #92]	@ (8006384 <TIM_OC2_SetConfig+0xec>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d113      	bne.n	8006354 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800633a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	feff8fff 	.word	0xfeff8fff
 8006380:	40010000 	.word	0x40010000
 8006384:	40010400 	.word	0x40010400

08006388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006468 <TIM_OC3_SetConfig+0xe0>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a22      	ldr	r2, [pc, #136]	@ (800646c <TIM_OC3_SetConfig+0xe4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d003      	beq.n	80063ee <TIM_OC3_SetConfig+0x66>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a21      	ldr	r2, [pc, #132]	@ (8006470 <TIM_OC3_SetConfig+0xe8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d10d      	bne.n	800640a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a17      	ldr	r2, [pc, #92]	@ (800646c <TIM_OC3_SetConfig+0xe4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d003      	beq.n	800641a <TIM_OC3_SetConfig+0x92>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a16      	ldr	r2, [pc, #88]	@ (8006470 <TIM_OC3_SetConfig+0xe8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d113      	bne.n	8006442 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	621a      	str	r2, [r3, #32]
}
 800645c:	bf00      	nop
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	fffeff8f 	.word	0xfffeff8f
 800646c:	40010000 	.word	0x40010000
 8006470:	40010400 	.word	0x40010400

08006474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4b1e      	ldr	r3, [pc, #120]	@ (8006518 <TIM_OC4_SetConfig+0xa4>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	031b      	lsls	r3, r3, #12
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a13      	ldr	r2, [pc, #76]	@ (800651c <TIM_OC4_SetConfig+0xa8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_OC4_SetConfig+0x68>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a12      	ldr	r2, [pc, #72]	@ (8006520 <TIM_OC4_SetConfig+0xac>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d109      	bne.n	80064f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	019b      	lsls	r3, r3, #6
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	feff8fff 	.word	0xfeff8fff
 800651c:	40010000 	.word	0x40010000
 8006520:	40010400 	.word	0x40010400

08006524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4b1b      	ldr	r3, [pc, #108]	@ (80065bc <TIM_OC5_SetConfig+0x98>)
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006564:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a12      	ldr	r2, [pc, #72]	@ (80065c0 <TIM_OC5_SetConfig+0x9c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_OC5_SetConfig+0x5e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a11      	ldr	r2, [pc, #68]	@ (80065c4 <TIM_OC5_SetConfig+0xa0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d109      	bne.n	8006596 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	fffeff8f 	.word	0xfffeff8f
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40010400 	.word	0x40010400

080065c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006664 <TIM_OC6_SetConfig+0x9c>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800660a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	051b      	lsls	r3, r3, #20
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a13      	ldr	r2, [pc, #76]	@ (8006668 <TIM_OC6_SetConfig+0xa0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_OC6_SetConfig+0x60>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a12      	ldr	r2, [pc, #72]	@ (800666c <TIM_OC6_SetConfig+0xa4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d109      	bne.n	800663c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800662e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	feff8fff 	.word	0xfeff8fff
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400

08006670 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f023 0201 	bic.w	r2, r3, #1
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a28      	ldr	r2, [pc, #160]	@ (800673c <TIM_TI1_SetConfig+0xcc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01b      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a4:	d017      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a25      	ldr	r2, [pc, #148]	@ (8006740 <TIM_TI1_SetConfig+0xd0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4a24      	ldr	r2, [pc, #144]	@ (8006744 <TIM_TI1_SetConfig+0xd4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00f      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4a23      	ldr	r2, [pc, #140]	@ (8006748 <TIM_TI1_SetConfig+0xd8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00b      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4a22      	ldr	r2, [pc, #136]	@ (800674c <TIM_TI1_SetConfig+0xdc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d007      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a21      	ldr	r2, [pc, #132]	@ (8006750 <TIM_TI1_SetConfig+0xe0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_TI1_SetConfig+0x66>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4a20      	ldr	r2, [pc, #128]	@ (8006754 <TIM_TI1_SetConfig+0xe4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d101      	bne.n	80066da <TIM_TI1_SetConfig+0x6a>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <TIM_TI1_SetConfig+0x6c>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d008      	beq.n	80066f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e003      	b.n	80066fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f043 0301 	orr.w	r3, r3, #1
 80066f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	b2db      	uxtb	r3, r3
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f023 030a 	bic.w	r3, r3, #10
 8006714:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f003 030a 	and.w	r3, r3, #10
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40010000 	.word	0x40010000
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	40000c00 	.word	0x40000c00
 800674c:	40010400 	.word	0x40010400
 8006750:	40014000 	.word	0x40014000
 8006754:	40001800 	.word	0x40001800

08006758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	f023 0201 	bic.w	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f023 030a 	bic.w	r3, r3, #10
 8006794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	621a      	str	r2, [r3, #32]
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b087      	sub	sp, #28
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f023 0210 	bic.w	r2, r3, #16
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	031b      	lsls	r3, r3, #12
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006808:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	621a      	str	r2, [r3, #32]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f023 0210 	bic.w	r2, r3, #16
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800685a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	031b      	lsls	r3, r3, #12
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800686c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	621a      	str	r2, [r3, #32]
}
 8006884:	bf00      	nop
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f023 0303 	bic.w	r3, r3, #3
 80068bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80068e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	621a      	str	r2, [r3, #32]
}
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006934:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006946:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	031b      	lsls	r3, r3, #12
 800694c:	b29b      	uxth	r3, r3
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800695a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	031b      	lsls	r3, r3, #12
 8006960:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	f043 0307 	orr.w	r3, r3, #7
 80069a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	609a      	str	r2, [r3, #8]
}
 80069ac:	bf00      	nop
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	021a      	lsls	r2, r3, #8
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	431a      	orrs	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4313      	orrs	r3, r2
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1a      	ldr	r2, [r3, #32]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	401a      	ands	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1a      	ldr	r2, [r3, #32]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 031f 	and.w	r3, r3, #31
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a30:	431a      	orrs	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e06d      	b.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a30      	ldr	r2, [pc, #192]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d108      	bne.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a20      	ldr	r2, [pc, #128]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d022      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d01d      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1c      	ldr	r2, [pc, #112]	@ (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a15      	ldr	r2, [pc, #84]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a16      	ldr	r2, [pc, #88]	@ (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a15      	ldr	r2, [pc, #84]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d10c      	bne.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40010400 	.word	0x40010400
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40000800 	.word	0x40000800
 8006b54:	40000c00 	.word	0x40000c00
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40001800 	.word	0x40001800

08006b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e040      	b.n	8006c30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb fda0 	bl	8002704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2224      	movs	r2, #36	@ 0x24
 8006bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fe6c 	bl	80078c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fc05 	bl	80073f8 <UART_SetConfig>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e01b      	b.n	8006c30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 feeb 	bl	8007a04 <UART_CheckIdleState>
 8006c2e:	4603      	mov	r3, r0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d177      	bne.n	8006d40 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_UART_Transmit+0x24>
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e070      	b.n	8006d42 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2221      	movs	r2, #33	@ 0x21
 8006c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c6e:	f7fb ff83 	bl	8002b78 <HAL_GetTick>
 8006c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	88fa      	ldrh	r2, [r7, #6]
 8006c78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c8c:	d108      	bne.n	8006ca0 <HAL_UART_Transmit+0x68>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d104      	bne.n	8006ca0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	e003      	b.n	8006ca8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ca8:	e02f      	b.n	8006d0a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2180      	movs	r1, #128	@ 0x80
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 ff4d 	bl	8007b54 <UART_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e03b      	b.n	8006d42 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10b      	bne.n	8006ce8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	e007      	b.n	8006cf8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1c9      	bne.n	8006caa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2140      	movs	r1, #64	@ 0x40
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 ff17 	bl	8007b54 <UART_WaitOnFlagUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e005      	b.n	8006d42 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e000      	b.n	8006d42 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006d40:	2302      	movs	r3, #2
  }
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b08a      	sub	sp, #40	@ 0x28
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	4613      	mov	r3, r2
 8006d56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d132      	bne.n	8006dc8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_UART_Receive_IT+0x24>
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e02b      	b.n	8006dca <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d018      	beq.n	8006db8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	613b      	str	r3, [r7, #16]
   return(result);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	623b      	str	r3, [r7, #32]
 8006da6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	69f9      	ldr	r1, [r7, #28]
 8006daa:	6a3a      	ldr	r2, [r7, #32]
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e6      	bne.n	8006d86 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 ff36 	bl	8007c30 <UART_Start_Receive_IT>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	e000      	b.n	8006dca <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006dc8:	2302      	movs	r3, #2
  }
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3728      	adds	r7, #40	@ 0x28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b0ba      	sub	sp, #232	@ 0xe8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006dfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006dfe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e02:	4013      	ands	r3, r2
 8006e04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d115      	bne.n	8006e3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00f      	beq.n	8006e3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d009      	beq.n	8006e3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 82ac 	beq.w	800738a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
      }
      return;
 8006e3a:	e2a6      	b.n	800738a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8117 	beq.w	8007074 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d106      	bne.n	8006e60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e56:	4b85      	ldr	r3, [pc, #532]	@ (800706c <HAL_UART_IRQHandler+0x298>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 810a 	beq.w	8007074 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d011      	beq.n	8006e90 <HAL_UART_IRQHandler+0xbc>
 8006e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e86:	f043 0201 	orr.w	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d011      	beq.n	8006ec0 <HAL_UART_IRQHandler+0xec>
 8006e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00b      	beq.n	8006ec0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2202      	movs	r2, #2
 8006eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eb6:	f043 0204 	orr.w	r2, r3, #4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d011      	beq.n	8006ef0 <HAL_UART_IRQHandler+0x11c>
 8006ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2204      	movs	r2, #4
 8006ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ee6:	f043 0202 	orr.w	r2, r3, #2
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d017      	beq.n	8006f2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2208      	movs	r2, #8
 8006f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f22:	f043 0208 	orr.w	r2, r3, #8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d012      	beq.n	8006f5e <HAL_UART_IRQHandler+0x18a>
 8006f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00c      	beq.n	8006f5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f54:	f043 0220 	orr.w	r2, r3, #32
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8212 	beq.w	800738e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa6:	2b40      	cmp	r3, #64	@ 0x40
 8006fa8:	d005      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d04f      	beq.n	8007056 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 ff00 	bl	8007dbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d141      	bne.n	800704e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800700e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1d9      	bne.n	8006fca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800701a:	2b00      	cmp	r3, #0
 800701c:	d013      	beq.n	8007046 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007022:	4a13      	ldr	r2, [pc, #76]	@ (8007070 <HAL_UART_IRQHandler+0x29c>)
 8007024:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800702a:	4618      	mov	r0, r3
 800702c:	f7fc f804 	bl	8003038 <HAL_DMA_Abort_IT>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d017      	beq.n	8007066 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800703a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	e00f      	b.n	8007066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9b6 	bl	80073b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704c:	e00b      	b.n	8007066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9b2 	bl	80073b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	e007      	b.n	8007066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f9ae 	bl	80073b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007064:	e193      	b.n	800738e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007066:	bf00      	nop
    return;
 8007068:	e191      	b.n	800738e <HAL_UART_IRQHandler+0x5ba>
 800706a:	bf00      	nop
 800706c:	04000120 	.word	0x04000120
 8007070:	08007e85 	.word	0x08007e85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007078:	2b01      	cmp	r3, #1
 800707a:	f040 814c 	bne.w	8007316 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800707e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 8145 	beq.w	8007316 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 813e 	beq.w	8007316 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2210      	movs	r2, #16
 80070a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ac:	2b40      	cmp	r3, #64	@ 0x40
 80070ae:	f040 80b6 	bne.w	800721e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 8165 	beq.w	8007392 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070d2:	429a      	cmp	r2, r3
 80070d4:	f080 815d 	bcs.w	8007392 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ec:	f000 8086 	beq.w	80071fc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800710c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800711a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800711e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007126:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1da      	bne.n	80070f0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800714a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800714c:	f023 0301 	bic.w	r3, r3, #1
 8007150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800715e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007162:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007166:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e1      	bne.n	800713a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3308      	adds	r3, #8
 800717c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800718c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3308      	adds	r3, #8
 8007196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800719a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800719c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e3      	bne.n	8007176 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071cc:	f023 0310 	bic.w	r3, r3, #16
 80071d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e4      	bne.n	80071bc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fb feae 	bl	8002f58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800720e:	b29b      	uxth	r3, r3
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	b29b      	uxth	r3, r3
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f8d8 	bl	80073cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800721c:	e0b9      	b.n	8007392 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800722a:	b29b      	uxth	r3, r3
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 80ab 	beq.w	8007396 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80a6 	beq.w	8007396 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800725e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800726c:	647b      	str	r3, [r7, #68]	@ 0x44
 800726e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800727a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e4      	bne.n	800724a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3308      	adds	r3, #8
 8007286:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	623b      	str	r3, [r7, #32]
   return(result);
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	f023 0301 	bic.w	r3, r3, #1
 8007296:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80072a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e3      	bne.n	8007280 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f023 0310 	bic.w	r3, r3, #16
 80072e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	69b9      	ldr	r1, [r7, #24]
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	617b      	str	r3, [r7, #20]
   return(result);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e4      	bne.n	80072cc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2202      	movs	r2, #2
 8007306:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f85c 	bl	80073cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007314:	e03f      	b.n	8007396 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00e      	beq.n	8007340 <HAL_UART_IRQHandler+0x56c>
 8007322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d008      	beq.n	8007340 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007336:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f853 	bl	80073e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800733e:	e02d      	b.n	800739c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00e      	beq.n	800736a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007354:	2b00      	cmp	r3, #0
 8007356:	d008      	beq.n	800736a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01c      	beq.n	800739a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
    }
    return;
 8007368:	e017      	b.n	800739a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800736a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800736e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d012      	beq.n	800739c <HAL_UART_IRQHandler+0x5c8>
 8007376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800737a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00c      	beq.n	800739c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fd94 	bl	8007eb0 <UART_EndTransmit_IT>
    return;
 8007388:	e008      	b.n	800739c <HAL_UART_IRQHandler+0x5c8>
      return;
 800738a:	bf00      	nop
 800738c:	e006      	b.n	800739c <HAL_UART_IRQHandler+0x5c8>
    return;
 800738e:	bf00      	nop
 8007390:	e004      	b.n	800739c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007392:	bf00      	nop
 8007394:	e002      	b.n	800739c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007396:	bf00      	nop
 8007398:	e000      	b.n	800739c <HAL_UART_IRQHandler+0x5c8>
    return;
 800739a:	bf00      	nop
  }

}
 800739c:	37e8      	adds	r7, #232	@ 0xe8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop

080073a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	4313      	orrs	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4ba6      	ldr	r3, [pc, #664]	@ (80076bc <UART_SetConfig+0x2c4>)
 8007424:	4013      	ands	r3, r2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	6979      	ldr	r1, [r7, #20]
 800742c:	430b      	orrs	r3, r1
 800742e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	430a      	orrs	r2, r1
 8007468:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a94      	ldr	r2, [pc, #592]	@ (80076c0 <UART_SetConfig+0x2c8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d120      	bne.n	80074b6 <UART_SetConfig+0xbe>
 8007474:	4b93      	ldr	r3, [pc, #588]	@ (80076c4 <UART_SetConfig+0x2cc>)
 8007476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b03      	cmp	r3, #3
 8007480:	d816      	bhi.n	80074b0 <UART_SetConfig+0xb8>
 8007482:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0x90>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	08007499 	.word	0x08007499
 800748c:	080074a5 	.word	0x080074a5
 8007490:	0800749f 	.word	0x0800749f
 8007494:	080074ab 	.word	0x080074ab
 8007498:	2301      	movs	r3, #1
 800749a:	77fb      	strb	r3, [r7, #31]
 800749c:	e150      	b.n	8007740 <UART_SetConfig+0x348>
 800749e:	2302      	movs	r3, #2
 80074a0:	77fb      	strb	r3, [r7, #31]
 80074a2:	e14d      	b.n	8007740 <UART_SetConfig+0x348>
 80074a4:	2304      	movs	r3, #4
 80074a6:	77fb      	strb	r3, [r7, #31]
 80074a8:	e14a      	b.n	8007740 <UART_SetConfig+0x348>
 80074aa:	2308      	movs	r3, #8
 80074ac:	77fb      	strb	r3, [r7, #31]
 80074ae:	e147      	b.n	8007740 <UART_SetConfig+0x348>
 80074b0:	2310      	movs	r3, #16
 80074b2:	77fb      	strb	r3, [r7, #31]
 80074b4:	e144      	b.n	8007740 <UART_SetConfig+0x348>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a83      	ldr	r2, [pc, #524]	@ (80076c8 <UART_SetConfig+0x2d0>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d132      	bne.n	8007526 <UART_SetConfig+0x12e>
 80074c0:	4b80      	ldr	r3, [pc, #512]	@ (80076c4 <UART_SetConfig+0x2cc>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c6:	f003 030c 	and.w	r3, r3, #12
 80074ca:	2b0c      	cmp	r3, #12
 80074cc:	d828      	bhi.n	8007520 <UART_SetConfig+0x128>
 80074ce:	a201      	add	r2, pc, #4	@ (adr r2, 80074d4 <UART_SetConfig+0xdc>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	08007509 	.word	0x08007509
 80074d8:	08007521 	.word	0x08007521
 80074dc:	08007521 	.word	0x08007521
 80074e0:	08007521 	.word	0x08007521
 80074e4:	08007515 	.word	0x08007515
 80074e8:	08007521 	.word	0x08007521
 80074ec:	08007521 	.word	0x08007521
 80074f0:	08007521 	.word	0x08007521
 80074f4:	0800750f 	.word	0x0800750f
 80074f8:	08007521 	.word	0x08007521
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007521 	.word	0x08007521
 8007504:	0800751b 	.word	0x0800751b
 8007508:	2300      	movs	r3, #0
 800750a:	77fb      	strb	r3, [r7, #31]
 800750c:	e118      	b.n	8007740 <UART_SetConfig+0x348>
 800750e:	2302      	movs	r3, #2
 8007510:	77fb      	strb	r3, [r7, #31]
 8007512:	e115      	b.n	8007740 <UART_SetConfig+0x348>
 8007514:	2304      	movs	r3, #4
 8007516:	77fb      	strb	r3, [r7, #31]
 8007518:	e112      	b.n	8007740 <UART_SetConfig+0x348>
 800751a:	2308      	movs	r3, #8
 800751c:	77fb      	strb	r3, [r7, #31]
 800751e:	e10f      	b.n	8007740 <UART_SetConfig+0x348>
 8007520:	2310      	movs	r3, #16
 8007522:	77fb      	strb	r3, [r7, #31]
 8007524:	e10c      	b.n	8007740 <UART_SetConfig+0x348>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a68      	ldr	r2, [pc, #416]	@ (80076cc <UART_SetConfig+0x2d4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d120      	bne.n	8007572 <UART_SetConfig+0x17a>
 8007530:	4b64      	ldr	r3, [pc, #400]	@ (80076c4 <UART_SetConfig+0x2cc>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007536:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800753a:	2b30      	cmp	r3, #48	@ 0x30
 800753c:	d013      	beq.n	8007566 <UART_SetConfig+0x16e>
 800753e:	2b30      	cmp	r3, #48	@ 0x30
 8007540:	d814      	bhi.n	800756c <UART_SetConfig+0x174>
 8007542:	2b20      	cmp	r3, #32
 8007544:	d009      	beq.n	800755a <UART_SetConfig+0x162>
 8007546:	2b20      	cmp	r3, #32
 8007548:	d810      	bhi.n	800756c <UART_SetConfig+0x174>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <UART_SetConfig+0x15c>
 800754e:	2b10      	cmp	r3, #16
 8007550:	d006      	beq.n	8007560 <UART_SetConfig+0x168>
 8007552:	e00b      	b.n	800756c <UART_SetConfig+0x174>
 8007554:	2300      	movs	r3, #0
 8007556:	77fb      	strb	r3, [r7, #31]
 8007558:	e0f2      	b.n	8007740 <UART_SetConfig+0x348>
 800755a:	2302      	movs	r3, #2
 800755c:	77fb      	strb	r3, [r7, #31]
 800755e:	e0ef      	b.n	8007740 <UART_SetConfig+0x348>
 8007560:	2304      	movs	r3, #4
 8007562:	77fb      	strb	r3, [r7, #31]
 8007564:	e0ec      	b.n	8007740 <UART_SetConfig+0x348>
 8007566:	2308      	movs	r3, #8
 8007568:	77fb      	strb	r3, [r7, #31]
 800756a:	e0e9      	b.n	8007740 <UART_SetConfig+0x348>
 800756c:	2310      	movs	r3, #16
 800756e:	77fb      	strb	r3, [r7, #31]
 8007570:	e0e6      	b.n	8007740 <UART_SetConfig+0x348>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a56      	ldr	r2, [pc, #344]	@ (80076d0 <UART_SetConfig+0x2d8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d120      	bne.n	80075be <UART_SetConfig+0x1c6>
 800757c:	4b51      	ldr	r3, [pc, #324]	@ (80076c4 <UART_SetConfig+0x2cc>)
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007582:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007586:	2bc0      	cmp	r3, #192	@ 0xc0
 8007588:	d013      	beq.n	80075b2 <UART_SetConfig+0x1ba>
 800758a:	2bc0      	cmp	r3, #192	@ 0xc0
 800758c:	d814      	bhi.n	80075b8 <UART_SetConfig+0x1c0>
 800758e:	2b80      	cmp	r3, #128	@ 0x80
 8007590:	d009      	beq.n	80075a6 <UART_SetConfig+0x1ae>
 8007592:	2b80      	cmp	r3, #128	@ 0x80
 8007594:	d810      	bhi.n	80075b8 <UART_SetConfig+0x1c0>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <UART_SetConfig+0x1a8>
 800759a:	2b40      	cmp	r3, #64	@ 0x40
 800759c:	d006      	beq.n	80075ac <UART_SetConfig+0x1b4>
 800759e:	e00b      	b.n	80075b8 <UART_SetConfig+0x1c0>
 80075a0:	2300      	movs	r3, #0
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e0cc      	b.n	8007740 <UART_SetConfig+0x348>
 80075a6:	2302      	movs	r3, #2
 80075a8:	77fb      	strb	r3, [r7, #31]
 80075aa:	e0c9      	b.n	8007740 <UART_SetConfig+0x348>
 80075ac:	2304      	movs	r3, #4
 80075ae:	77fb      	strb	r3, [r7, #31]
 80075b0:	e0c6      	b.n	8007740 <UART_SetConfig+0x348>
 80075b2:	2308      	movs	r3, #8
 80075b4:	77fb      	strb	r3, [r7, #31]
 80075b6:	e0c3      	b.n	8007740 <UART_SetConfig+0x348>
 80075b8:	2310      	movs	r3, #16
 80075ba:	77fb      	strb	r3, [r7, #31]
 80075bc:	e0c0      	b.n	8007740 <UART_SetConfig+0x348>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a44      	ldr	r2, [pc, #272]	@ (80076d4 <UART_SetConfig+0x2dc>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d125      	bne.n	8007614 <UART_SetConfig+0x21c>
 80075c8:	4b3e      	ldr	r3, [pc, #248]	@ (80076c4 <UART_SetConfig+0x2cc>)
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075d6:	d017      	beq.n	8007608 <UART_SetConfig+0x210>
 80075d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075dc:	d817      	bhi.n	800760e <UART_SetConfig+0x216>
 80075de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075e2:	d00b      	beq.n	80075fc <UART_SetConfig+0x204>
 80075e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075e8:	d811      	bhi.n	800760e <UART_SetConfig+0x216>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <UART_SetConfig+0x1fe>
 80075ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075f2:	d006      	beq.n	8007602 <UART_SetConfig+0x20a>
 80075f4:	e00b      	b.n	800760e <UART_SetConfig+0x216>
 80075f6:	2300      	movs	r3, #0
 80075f8:	77fb      	strb	r3, [r7, #31]
 80075fa:	e0a1      	b.n	8007740 <UART_SetConfig+0x348>
 80075fc:	2302      	movs	r3, #2
 80075fe:	77fb      	strb	r3, [r7, #31]
 8007600:	e09e      	b.n	8007740 <UART_SetConfig+0x348>
 8007602:	2304      	movs	r3, #4
 8007604:	77fb      	strb	r3, [r7, #31]
 8007606:	e09b      	b.n	8007740 <UART_SetConfig+0x348>
 8007608:	2308      	movs	r3, #8
 800760a:	77fb      	strb	r3, [r7, #31]
 800760c:	e098      	b.n	8007740 <UART_SetConfig+0x348>
 800760e:	2310      	movs	r3, #16
 8007610:	77fb      	strb	r3, [r7, #31]
 8007612:	e095      	b.n	8007740 <UART_SetConfig+0x348>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2f      	ldr	r2, [pc, #188]	@ (80076d8 <UART_SetConfig+0x2e0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d125      	bne.n	800766a <UART_SetConfig+0x272>
 800761e:	4b29      	ldr	r3, [pc, #164]	@ (80076c4 <UART_SetConfig+0x2cc>)
 8007620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007624:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007628:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800762c:	d017      	beq.n	800765e <UART_SetConfig+0x266>
 800762e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007632:	d817      	bhi.n	8007664 <UART_SetConfig+0x26c>
 8007634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007638:	d00b      	beq.n	8007652 <UART_SetConfig+0x25a>
 800763a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800763e:	d811      	bhi.n	8007664 <UART_SetConfig+0x26c>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <UART_SetConfig+0x254>
 8007644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007648:	d006      	beq.n	8007658 <UART_SetConfig+0x260>
 800764a:	e00b      	b.n	8007664 <UART_SetConfig+0x26c>
 800764c:	2301      	movs	r3, #1
 800764e:	77fb      	strb	r3, [r7, #31]
 8007650:	e076      	b.n	8007740 <UART_SetConfig+0x348>
 8007652:	2302      	movs	r3, #2
 8007654:	77fb      	strb	r3, [r7, #31]
 8007656:	e073      	b.n	8007740 <UART_SetConfig+0x348>
 8007658:	2304      	movs	r3, #4
 800765a:	77fb      	strb	r3, [r7, #31]
 800765c:	e070      	b.n	8007740 <UART_SetConfig+0x348>
 800765e:	2308      	movs	r3, #8
 8007660:	77fb      	strb	r3, [r7, #31]
 8007662:	e06d      	b.n	8007740 <UART_SetConfig+0x348>
 8007664:	2310      	movs	r3, #16
 8007666:	77fb      	strb	r3, [r7, #31]
 8007668:	e06a      	b.n	8007740 <UART_SetConfig+0x348>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1b      	ldr	r2, [pc, #108]	@ (80076dc <UART_SetConfig+0x2e4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d138      	bne.n	80076e6 <UART_SetConfig+0x2ee>
 8007674:	4b13      	ldr	r3, [pc, #76]	@ (80076c4 <UART_SetConfig+0x2cc>)
 8007676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800767a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800767e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007682:	d017      	beq.n	80076b4 <UART_SetConfig+0x2bc>
 8007684:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007688:	d82a      	bhi.n	80076e0 <UART_SetConfig+0x2e8>
 800768a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800768e:	d00b      	beq.n	80076a8 <UART_SetConfig+0x2b0>
 8007690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007694:	d824      	bhi.n	80076e0 <UART_SetConfig+0x2e8>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <UART_SetConfig+0x2aa>
 800769a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800769e:	d006      	beq.n	80076ae <UART_SetConfig+0x2b6>
 80076a0:	e01e      	b.n	80076e0 <UART_SetConfig+0x2e8>
 80076a2:	2300      	movs	r3, #0
 80076a4:	77fb      	strb	r3, [r7, #31]
 80076a6:	e04b      	b.n	8007740 <UART_SetConfig+0x348>
 80076a8:	2302      	movs	r3, #2
 80076aa:	77fb      	strb	r3, [r7, #31]
 80076ac:	e048      	b.n	8007740 <UART_SetConfig+0x348>
 80076ae:	2304      	movs	r3, #4
 80076b0:	77fb      	strb	r3, [r7, #31]
 80076b2:	e045      	b.n	8007740 <UART_SetConfig+0x348>
 80076b4:	2308      	movs	r3, #8
 80076b6:	77fb      	strb	r3, [r7, #31]
 80076b8:	e042      	b.n	8007740 <UART_SetConfig+0x348>
 80076ba:	bf00      	nop
 80076bc:	efff69f3 	.word	0xefff69f3
 80076c0:	40011000 	.word	0x40011000
 80076c4:	40023800 	.word	0x40023800
 80076c8:	40004400 	.word	0x40004400
 80076cc:	40004800 	.word	0x40004800
 80076d0:	40004c00 	.word	0x40004c00
 80076d4:	40005000 	.word	0x40005000
 80076d8:	40011400 	.word	0x40011400
 80076dc:	40007800 	.word	0x40007800
 80076e0:	2310      	movs	r3, #16
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e02c      	b.n	8007740 <UART_SetConfig+0x348>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a72      	ldr	r2, [pc, #456]	@ (80078b4 <UART_SetConfig+0x4bc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d125      	bne.n	800773c <UART_SetConfig+0x344>
 80076f0:	4b71      	ldr	r3, [pc, #452]	@ (80078b8 <UART_SetConfig+0x4c0>)
 80076f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80076fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80076fe:	d017      	beq.n	8007730 <UART_SetConfig+0x338>
 8007700:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007704:	d817      	bhi.n	8007736 <UART_SetConfig+0x33e>
 8007706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800770a:	d00b      	beq.n	8007724 <UART_SetConfig+0x32c>
 800770c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007710:	d811      	bhi.n	8007736 <UART_SetConfig+0x33e>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <UART_SetConfig+0x326>
 8007716:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800771a:	d006      	beq.n	800772a <UART_SetConfig+0x332>
 800771c:	e00b      	b.n	8007736 <UART_SetConfig+0x33e>
 800771e:	2300      	movs	r3, #0
 8007720:	77fb      	strb	r3, [r7, #31]
 8007722:	e00d      	b.n	8007740 <UART_SetConfig+0x348>
 8007724:	2302      	movs	r3, #2
 8007726:	77fb      	strb	r3, [r7, #31]
 8007728:	e00a      	b.n	8007740 <UART_SetConfig+0x348>
 800772a:	2304      	movs	r3, #4
 800772c:	77fb      	strb	r3, [r7, #31]
 800772e:	e007      	b.n	8007740 <UART_SetConfig+0x348>
 8007730:	2308      	movs	r3, #8
 8007732:	77fb      	strb	r3, [r7, #31]
 8007734:	e004      	b.n	8007740 <UART_SetConfig+0x348>
 8007736:	2310      	movs	r3, #16
 8007738:	77fb      	strb	r3, [r7, #31]
 800773a:	e001      	b.n	8007740 <UART_SetConfig+0x348>
 800773c:	2310      	movs	r3, #16
 800773e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007748:	d15b      	bne.n	8007802 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800774a:	7ffb      	ldrb	r3, [r7, #31]
 800774c:	2b08      	cmp	r3, #8
 800774e:	d828      	bhi.n	80077a2 <UART_SetConfig+0x3aa>
 8007750:	a201      	add	r2, pc, #4	@ (adr r2, 8007758 <UART_SetConfig+0x360>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	0800777d 	.word	0x0800777d
 800775c:	08007785 	.word	0x08007785
 8007760:	0800778d 	.word	0x0800778d
 8007764:	080077a3 	.word	0x080077a3
 8007768:	08007793 	.word	0x08007793
 800776c:	080077a3 	.word	0x080077a3
 8007770:	080077a3 	.word	0x080077a3
 8007774:	080077a3 	.word	0x080077a3
 8007778:	0800779b 	.word	0x0800779b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800777c:	f7fc fef8 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8007780:	61b8      	str	r0, [r7, #24]
        break;
 8007782:	e013      	b.n	80077ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007784:	f7fc ff08 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8007788:	61b8      	str	r0, [r7, #24]
        break;
 800778a:	e00f      	b.n	80077ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800778c:	4b4b      	ldr	r3, [pc, #300]	@ (80078bc <UART_SetConfig+0x4c4>)
 800778e:	61bb      	str	r3, [r7, #24]
        break;
 8007790:	e00c      	b.n	80077ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007792:	f7fc fddb 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8007796:	61b8      	str	r0, [r7, #24]
        break;
 8007798:	e008      	b.n	80077ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800779e:	61bb      	str	r3, [r7, #24]
        break;
 80077a0:	e004      	b.n	80077ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	77bb      	strb	r3, [r7, #30]
        break;
 80077aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d074      	beq.n	800789c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	005a      	lsls	r2, r3, #1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	085b      	lsrs	r3, r3, #1
 80077bc:	441a      	add	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2b0f      	cmp	r3, #15
 80077cc:	d916      	bls.n	80077fc <UART_SetConfig+0x404>
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d4:	d212      	bcs.n	80077fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f023 030f 	bic.w	r3, r3, #15
 80077de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	085b      	lsrs	r3, r3, #1
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	89fb      	ldrh	r3, [r7, #14]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	89fa      	ldrh	r2, [r7, #14]
 80077f8:	60da      	str	r2, [r3, #12]
 80077fa:	e04f      	b.n	800789c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	77bb      	strb	r3, [r7, #30]
 8007800:	e04c      	b.n	800789c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007802:	7ffb      	ldrb	r3, [r7, #31]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d828      	bhi.n	800785a <UART_SetConfig+0x462>
 8007808:	a201      	add	r2, pc, #4	@ (adr r2, 8007810 <UART_SetConfig+0x418>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007835 	.word	0x08007835
 8007814:	0800783d 	.word	0x0800783d
 8007818:	08007845 	.word	0x08007845
 800781c:	0800785b 	.word	0x0800785b
 8007820:	0800784b 	.word	0x0800784b
 8007824:	0800785b 	.word	0x0800785b
 8007828:	0800785b 	.word	0x0800785b
 800782c:	0800785b 	.word	0x0800785b
 8007830:	08007853 	.word	0x08007853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007834:	f7fc fe9c 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8007838:	61b8      	str	r0, [r7, #24]
        break;
 800783a:	e013      	b.n	8007864 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800783c:	f7fc feac 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8007840:	61b8      	str	r0, [r7, #24]
        break;
 8007842:	e00f      	b.n	8007864 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007844:	4b1d      	ldr	r3, [pc, #116]	@ (80078bc <UART_SetConfig+0x4c4>)
 8007846:	61bb      	str	r3, [r7, #24]
        break;
 8007848:	e00c      	b.n	8007864 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784a:	f7fc fd7f 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800784e:	61b8      	str	r0, [r7, #24]
        break;
 8007850:	e008      	b.n	8007864 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007856:	61bb      	str	r3, [r7, #24]
        break;
 8007858:	e004      	b.n	8007864 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	77bb      	strb	r3, [r7, #30]
        break;
 8007862:	bf00      	nop
    }

    if (pclk != 0U)
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d018      	beq.n	800789c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	085a      	lsrs	r2, r3, #1
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	441a      	add	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	2b0f      	cmp	r3, #15
 8007882:	d909      	bls.n	8007898 <UART_SetConfig+0x4a0>
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800788a:	d205      	bcs.n	8007898 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60da      	str	r2, [r3, #12]
 8007896:	e001      	b.n	800789c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80078a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3720      	adds	r7, #32
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40007c00 	.word	0x40007c00
 80078b8:	40023800 	.word	0x40023800
 80078bc:	00f42400 	.word	0x00f42400

080078c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01a      	beq.n	80079d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079be:	d10a      	bne.n	80079d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	605a      	str	r2, [r3, #4]
  }
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b098      	sub	sp, #96	@ 0x60
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a14:	f7fb f8b0 	bl	8002b78 <HAL_GetTick>
 8007a18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0308 	and.w	r3, r3, #8
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d12e      	bne.n	8007a86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a30:	2200      	movs	r2, #0
 8007a32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f88c 	bl	8007b54 <UART_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d021      	beq.n	8007a86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e062      	b.n	8007b4c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d149      	bne.n	8007b28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f856 	bl	8007b54 <UART_WaitOnFlagUntilTimeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d03c      	beq.n	8007b28 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	623b      	str	r3, [r7, #32]
   return(result);
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e6      	bne.n	8007aae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0301 	bic.w	r3, r3, #1
 8007af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3308      	adds	r3, #8
 8007afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b00:	61fa      	str	r2, [r7, #28]
 8007b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	69b9      	ldr	r1, [r7, #24]
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e5      	bne.n	8007ae0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e011      	b.n	8007b4c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3758      	adds	r7, #88	@ 0x58
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	4613      	mov	r3, r2
 8007b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b64:	e04f      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6c:	d04b      	beq.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6e:	f7fb f803 	bl	8002b78 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d302      	bcc.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e04e      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d037      	beq.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b80      	cmp	r3, #128	@ 0x80
 8007b9a:	d034      	beq.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ba0:	d031      	beq.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d110      	bne.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 f8ff 	bl	8007dbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e029      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be0:	d111      	bne.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f8e5 	bl	8007dbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e00f      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69da      	ldr	r2, [r3, #28]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	bf0c      	ite	eq
 8007c16:	2301      	moveq	r3, #1
 8007c18:	2300      	movne	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d0a0      	beq.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b097      	sub	sp, #92	@ 0x5c
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	88fa      	ldrh	r2, [r7, #6]
 8007c48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	88fa      	ldrh	r2, [r7, #6]
 8007c50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c62:	d10e      	bne.n	8007c82 <UART_Start_Receive_IT+0x52>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d105      	bne.n	8007c78 <UART_Start_Receive_IT+0x48>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c76:	e02d      	b.n	8007cd4 <UART_Start_Receive_IT+0xa4>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	22ff      	movs	r2, #255	@ 0xff
 8007c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c80:	e028      	b.n	8007cd4 <UART_Start_Receive_IT+0xa4>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10d      	bne.n	8007ca6 <UART_Start_Receive_IT+0x76>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <UART_Start_Receive_IT+0x6c>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	22ff      	movs	r2, #255	@ 0xff
 8007c96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c9a:	e01b      	b.n	8007cd4 <UART_Start_Receive_IT+0xa4>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	227f      	movs	r2, #127	@ 0x7f
 8007ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007ca4:	e016      	b.n	8007cd4 <UART_Start_Receive_IT+0xa4>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cae:	d10d      	bne.n	8007ccc <UART_Start_Receive_IT+0x9c>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <UART_Start_Receive_IT+0x92>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	227f      	movs	r2, #127	@ 0x7f
 8007cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007cc0:	e008      	b.n	8007cd4 <UART_Start_Receive_IT+0xa4>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	223f      	movs	r2, #63	@ 0x3f
 8007cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007cca:	e003      	b.n	8007cd4 <UART_Start_Receive_IT+0xa4>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2222      	movs	r2, #34	@ 0x22
 8007ce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3308      	adds	r3, #8
 8007d02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d04:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007d06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e5      	bne.n	8007ce4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d20:	d107      	bne.n	8007d32 <UART_Start_Receive_IT+0x102>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d103      	bne.n	8007d32 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4a21      	ldr	r2, [pc, #132]	@ (8007db4 <UART_Start_Receive_IT+0x184>)
 8007d2e:	669a      	str	r2, [r3, #104]	@ 0x68
 8007d30:	e002      	b.n	8007d38 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a20      	ldr	r2, [pc, #128]	@ (8007db8 <UART_Start_Receive_IT+0x188>)
 8007d36:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d019      	beq.n	8007d74 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d50:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d60:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e6      	bne.n	8007d40 <UART_Start_Receive_IT+0x110>
 8007d72:	e018      	b.n	8007da6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	613b      	str	r3, [r7, #16]
   return(result);
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f043 0320 	orr.w	r3, r3, #32
 8007d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d92:	623b      	str	r3, [r7, #32]
 8007d94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	69f9      	ldr	r1, [r7, #28]
 8007d98:	6a3a      	ldr	r2, [r7, #32]
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e6      	bne.n	8007d74 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	375c      	adds	r7, #92	@ 0x5c
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	080080ad 	.word	0x080080ad
 8007db8:	08007f05 	.word	0x08007f05

08007dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b095      	sub	sp, #84	@ 0x54
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007de2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007de4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007de8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3308      	adds	r3, #8
 8007e14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e5      	bne.n	8007df6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d118      	bne.n	8007e64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f023 0310 	bic.w	r3, r3, #16
 8007e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6979      	ldr	r1, [r7, #20]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e6      	bne.n	8007e32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e78:	bf00      	nop
 8007e7a:	3754      	adds	r7, #84	@ 0x54
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7ff fa88 	bl	80073b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea8:	bf00      	nop
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	61bb      	str	r3, [r7, #24]
 8007ed8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6979      	ldr	r1, [r7, #20]
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e6      	bne.n	8007eb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2220      	movs	r2, #32
 8007eee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fa54 	bl	80073a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007efc:	bf00      	nop
 8007efe:	3720      	adds	r7, #32
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b09c      	sub	sp, #112	@ 0x70
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f1c:	2b22      	cmp	r3, #34	@ 0x22
 8007f1e:	f040 80b9 	bne.w	8008094 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007f30:	b2d9      	uxtb	r1, r3
 8007f32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3c:	400a      	ands	r2, r1
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	3b01      	subs	r3, #1
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f040 809c 	bne.w	80080a4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e6      	bne.n	8007f6c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007fbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e5      	bne.n	8007f9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d018      	beq.n	8008026 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	623b      	str	r3, [r7, #32]
   return(result);
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008008:	663b      	str	r3, [r7, #96]	@ 0x60
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008012:	633b      	str	r3, [r7, #48]	@ 0x30
 8008014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e6      	bne.n	8007ff4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800802a:	2b01      	cmp	r3, #1
 800802c:	d12e      	bne.n	800808c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	60fb      	str	r3, [r7, #12]
   return(result);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f023 0310 	bic.w	r3, r3, #16
 8008048:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008052:	61fb      	str	r3, [r7, #28]
 8008054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	69b9      	ldr	r1, [r7, #24]
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	617b      	str	r3, [r7, #20]
   return(result);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e6      	bne.n	8008034 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f003 0310 	and.w	r3, r3, #16
 8008070:	2b10      	cmp	r3, #16
 8008072:	d103      	bne.n	800807c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2210      	movs	r2, #16
 800807a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff f9a1 	bl	80073cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800808a:	e00b      	b.n	80080a4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7f9 fbd5 	bl	800183c <HAL_UART_RxCpltCallback>
}
 8008092:	e007      	b.n	80080a4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699a      	ldr	r2, [r3, #24]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0208 	orr.w	r2, r2, #8
 80080a2:	619a      	str	r2, [r3, #24]
}
 80080a4:	bf00      	nop
 80080a6:	3770      	adds	r7, #112	@ 0x70
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b09c      	sub	sp, #112	@ 0x70
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c4:	2b22      	cmp	r3, #34	@ 0x22
 80080c6:	f040 80b9 	bne.w	800823c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80080da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80080de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80080e2:	4013      	ands	r3, r2
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ee:	1c9a      	adds	r2, r3, #2
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	f040 809c 	bne.w	800824c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008128:	667b      	str	r3, [r7, #100]	@ 0x64
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008132:	657b      	str	r3, [r7, #84]	@ 0x54
 8008134:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008138:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e6      	bne.n	8008114 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	f023 0301 	bic.w	r3, r3, #1
 800815c:	663b      	str	r3, [r7, #96]	@ 0x60
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3308      	adds	r3, #8
 8008164:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008166:	643a      	str	r2, [r7, #64]	@ 0x40
 8008168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800816c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e5      	bne.n	8008146 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d018      	beq.n	80081ce <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e6      	bne.n	800819c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d12e      	bne.n	8008234 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f023 0310 	bic.w	r3, r3, #16
 80081f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081fa:	61bb      	str	r3, [r7, #24]
 80081fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6979      	ldr	r1, [r7, #20]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	613b      	str	r3, [r7, #16]
   return(result);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e6      	bne.n	80081dc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b10      	cmp	r3, #16
 800821a:	d103      	bne.n	8008224 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2210      	movs	r2, #16
 8008222:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff f8cd 	bl	80073cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008232:	e00b      	b.n	800824c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7f9 fb01 	bl	800183c <HAL_UART_RxCpltCallback>
}
 800823a:	e007      	b.n	800824c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0208 	orr.w	r2, r2, #8
 800824a:	619a      	str	r2, [r3, #24]
}
 800824c:	bf00      	nop
 800824e:	3770      	adds	r7, #112	@ 0x70
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008254:	b084      	sub	sp, #16
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	f107 001c 	add.w	r0, r7, #28
 8008262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008266:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800826a:	2b01      	cmp	r3, #1
 800826c:	d121      	bne.n	80082b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008272:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	4b21      	ldr	r3, [pc, #132]	@ (8008304 <USB_CoreInit+0xb0>)
 8008280:	4013      	ands	r3, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008292:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008296:	2b01      	cmp	r3, #1
 8008298:	d105      	bne.n	80082a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa92 	bl	80087d0 <USB_CoreReset>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
 80082b0:	e010      	b.n	80082d4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa86 	bl	80087d0 <USB_CoreReset>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80082d4:	7fbb      	ldrb	r3, [r7, #30]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d10b      	bne.n	80082f2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f043 0206 	orr.w	r2, r3, #6
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f043 0220 	orr.w	r2, r3, #32
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082fe:	b004      	add	sp, #16
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	ffbdffbf 	.word	0xffbdffbf

08008308 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f023 0201 	bic.w	r2, r3, #1
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d115      	bne.n	8008378 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008358:	200a      	movs	r0, #10
 800835a:	f7fa fc19 	bl	8002b90 <HAL_Delay>
      ms += 10U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	330a      	adds	r3, #10
 8008362:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa25 	bl	80087b4 <USB_GetMode>
 800836a:	4603      	mov	r3, r0
 800836c:	2b01      	cmp	r3, #1
 800836e:	d01e      	beq.n	80083ae <USB_SetCurrentMode+0x84>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2bc7      	cmp	r3, #199	@ 0xc7
 8008374:	d9f0      	bls.n	8008358 <USB_SetCurrentMode+0x2e>
 8008376:	e01a      	b.n	80083ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d115      	bne.n	80083aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800838a:	200a      	movs	r0, #10
 800838c:	f7fa fc00 	bl	8002b90 <HAL_Delay>
      ms += 10U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	330a      	adds	r3, #10
 8008394:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa0c 	bl	80087b4 <USB_GetMode>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d005      	beq.n	80083ae <USB_SetCurrentMode+0x84>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80083a6:	d9f0      	bls.n	800838a <USB_SetCurrentMode+0x60>
 80083a8:	e001      	b.n	80083ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e005      	b.n	80083ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2bc8      	cmp	r3, #200	@ 0xc8
 80083b2:	d101      	bne.n	80083b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e000      	b.n	80083ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083c4:	b084      	sub	sp, #16
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b086      	sub	sp, #24
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80083d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]
 80083e2:	e009      	b.n	80083f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	3340      	adds	r3, #64	@ 0x40
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	2200      	movs	r2, #0
 80083f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	3301      	adds	r3, #1
 80083f6:	613b      	str	r3, [r7, #16]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2b0e      	cmp	r3, #14
 80083fc:	d9f2      	bls.n	80083e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008402:	2b00      	cmp	r3, #0
 8008404:	d11c      	bne.n	8008440 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008414:	f043 0302 	orr.w	r3, r3, #2
 8008418:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	e005      	b.n	800844c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008444:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008452:	461a      	mov	r2, r3
 8008454:	2300      	movs	r3, #0
 8008456:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008458:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800845c:	2b01      	cmp	r3, #1
 800845e:	d10d      	bne.n	800847c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008468:	2100      	movs	r1, #0
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f968 	bl	8008740 <USB_SetDevSpeed>
 8008470:	e008      	b.n	8008484 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008472:	2101      	movs	r1, #1
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f963 	bl	8008740 <USB_SetDevSpeed>
 800847a:	e003      	b.n	8008484 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800847c:	2103      	movs	r1, #3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f95e 	bl	8008740 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008484:	2110      	movs	r1, #16
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f8fa 	bl	8008680 <USB_FlushTxFifo>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f924 	bl	80086e4 <USB_FlushRxFifo>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ac:	461a      	mov	r2, r3
 80084ae:	2300      	movs	r3, #0
 80084b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084b8:	461a      	mov	r2, r3
 80084ba:	2300      	movs	r3, #0
 80084bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c4:	461a      	mov	r2, r3
 80084c6:	2300      	movs	r3, #0
 80084c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	e043      	b.n	8008558 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084e6:	d118      	bne.n	800851a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10a      	bne.n	8008504 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084fa:	461a      	mov	r2, r3
 80084fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	e013      	b.n	800852c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008510:	461a      	mov	r2, r3
 8008512:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	e008      	b.n	800852c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008526:	461a      	mov	r2, r3
 8008528:	2300      	movs	r3, #0
 800852a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008538:	461a      	mov	r2, r3
 800853a:	2300      	movs	r3, #0
 800853c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800854a:	461a      	mov	r2, r3
 800854c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008550:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	3301      	adds	r3, #1
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800855c:	461a      	mov	r2, r3
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	4293      	cmp	r3, r2
 8008562:	d3b5      	bcc.n	80084d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008564:	2300      	movs	r3, #0
 8008566:	613b      	str	r3, [r7, #16]
 8008568:	e043      	b.n	80085f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800857c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008580:	d118      	bne.n	80085b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008594:	461a      	mov	r2, r3
 8008596:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	e013      	b.n	80085c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085aa:	461a      	mov	r2, r3
 80085ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	e008      	b.n	80085c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c0:	461a      	mov	r2, r3
 80085c2:	2300      	movs	r3, #0
 80085c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d2:	461a      	mov	r2, r3
 80085d4:	2300      	movs	r3, #0
 80085d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e4:	461a      	mov	r2, r3
 80085e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80085ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	3301      	adds	r3, #1
 80085f0:	613b      	str	r3, [r7, #16]
 80085f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80085f6:	461a      	mov	r2, r3
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d3b5      	bcc.n	800856a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800860c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008610:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800861e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008620:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008624:	2b00      	cmp	r3, #0
 8008626:	d105      	bne.n	8008634 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	f043 0210 	orr.w	r2, r3, #16
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	4b0f      	ldr	r3, [pc, #60]	@ (8008678 <USB_DevInit+0x2b4>)
 800863a:	4313      	orrs	r3, r2
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008640:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	f043 0208 	orr.w	r2, r3, #8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008654:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008658:	2b01      	cmp	r3, #1
 800865a:	d105      	bne.n	8008668 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	4b06      	ldr	r3, [pc, #24]	@ (800867c <USB_DevInit+0x2b8>)
 8008662:	4313      	orrs	r3, r2
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008674:	b004      	add	sp, #16
 8008676:	4770      	bx	lr
 8008678:	803c3800 	.word	0x803c3800
 800867c:	40000004 	.word	0x40000004

08008680 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800869a:	d901      	bls.n	80086a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e01b      	b.n	80086d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	daf2      	bge.n	800868e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	019b      	lsls	r3, r3, #6
 80086b0:	f043 0220 	orr.w	r2, r3, #32
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3301      	adds	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086c4:	d901      	bls.n	80086ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e006      	b.n	80086d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d0f0      	beq.n	80086b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3301      	adds	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086fc:	d901      	bls.n	8008702 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e018      	b.n	8008734 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	daf2      	bge.n	80086f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2210      	movs	r2, #16
 8008712:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008720:	d901      	bls.n	8008726 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e006      	b.n	8008734 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f003 0310 	and.w	r3, r3, #16
 800872e:	2b10      	cmp	r3, #16
 8008730:	d0f0      	beq.n	8008714 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008760:	4313      	orrs	r3, r2
 8008762:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800878c:	f023 0303 	bic.w	r3, r3, #3
 8008790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087a0:	f043 0302 	orr.w	r3, r3, #2
 80087a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	f003 0301 	and.w	r3, r3, #1
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3301      	adds	r3, #1
 80087e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087e8:	d901      	bls.n	80087ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e01b      	b.n	8008826 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	daf2      	bge.n	80087dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	f043 0201 	orr.w	r2, r3, #1
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3301      	adds	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008812:	d901      	bls.n	8008818 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e006      	b.n	8008826 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b01      	cmp	r3, #1
 8008822:	d0f0      	beq.n	8008806 <USB_CoreReset+0x36>

  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008832:	b480      	push	{r7}
 8008834:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008836:	bf00      	nop
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008846:	f3ef 8305 	mrs	r3, IPSR
 800884a:	60bb      	str	r3, [r7, #8]
  return(result);
 800884c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10f      	bne.n	8008872 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008852:	f3ef 8310 	mrs	r3, PRIMASK
 8008856:	607b      	str	r3, [r7, #4]
  return(result);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d105      	bne.n	800886a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800885e:	f3ef 8311 	mrs	r3, BASEPRI
 8008862:	603b      	str	r3, [r7, #0]
  return(result);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <osKernelInitialize+0x3a>
 800886a:	4b0e      	ldr	r3, [pc, #56]	@ (80088a4 <osKernelInitialize+0x64>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d103      	bne.n	800887a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008872:	f06f 0305 	mvn.w	r3, #5
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	e00c      	b.n	8008894 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800887a:	4b0a      	ldr	r3, [pc, #40]	@ (80088a4 <osKernelInitialize+0x64>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d105      	bne.n	800888e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008882:	4b08      	ldr	r3, [pc, #32]	@ (80088a4 <osKernelInitialize+0x64>)
 8008884:	2201      	movs	r2, #1
 8008886:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	e002      	b.n	8008894 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800888e:	f04f 33ff 	mov.w	r3, #4294967295
 8008892:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008894:	68fb      	ldr	r3, [r7, #12]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000abc 	.word	0x20000abc

080088a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088ae:	f3ef 8305 	mrs	r3, IPSR
 80088b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80088b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10f      	bne.n	80088da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ba:	f3ef 8310 	mrs	r3, PRIMASK
 80088be:	607b      	str	r3, [r7, #4]
  return(result);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d105      	bne.n	80088d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088c6:	f3ef 8311 	mrs	r3, BASEPRI
 80088ca:	603b      	str	r3, [r7, #0]
  return(result);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d007      	beq.n	80088e2 <osKernelStart+0x3a>
 80088d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008910 <osKernelStart+0x68>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d103      	bne.n	80088e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80088da:	f06f 0305 	mvn.w	r3, #5
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	e010      	b.n	8008904 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <osKernelStart+0x68>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d109      	bne.n	80088fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80088ea:	f7ff ffa2 	bl	8008832 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80088ee:	4b08      	ldr	r3, [pc, #32]	@ (8008910 <osKernelStart+0x68>)
 80088f0:	2202      	movs	r2, #2
 80088f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80088f4:	f001 f8ca 	bl	8009a8c <vTaskStartScheduler>
      stat = osOK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	e002      	b.n	8008904 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80088fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008902:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008904:	68fb      	ldr	r3, [r7, #12]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20000abc 	.word	0x20000abc

08008914 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b090      	sub	sp, #64	@ 0x40
 8008918:	af04      	add	r7, sp, #16
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008924:	f3ef 8305 	mrs	r3, IPSR
 8008928:	61fb      	str	r3, [r7, #28]
  return(result);
 800892a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800892c:	2b00      	cmp	r3, #0
 800892e:	f040 808f 	bne.w	8008a50 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008932:	f3ef 8310 	mrs	r3, PRIMASK
 8008936:	61bb      	str	r3, [r7, #24]
  return(result);
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d105      	bne.n	800894a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800893e:	f3ef 8311 	mrs	r3, BASEPRI
 8008942:	617b      	str	r3, [r7, #20]
  return(result);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <osThreadNew+0x3e>
 800894a:	4b44      	ldr	r3, [pc, #272]	@ (8008a5c <osThreadNew+0x148>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d07e      	beq.n	8008a50 <osThreadNew+0x13c>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d07b      	beq.n	8008a50 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008958:	2380      	movs	r3, #128	@ 0x80
 800895a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800895c:	2318      	movs	r3, #24
 800895e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8008960:	2300      	movs	r3, #0
 8008962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8008964:	f04f 33ff 	mov.w	r3, #4294967295
 8008968:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d045      	beq.n	80089fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <osThreadNew+0x6a>
        name = attr->name;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800898c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898e:	2b00      	cmp	r3, #0
 8008990:	d008      	beq.n	80089a4 <osThreadNew+0x90>
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	2b38      	cmp	r3, #56	@ 0x38
 8008996:	d805      	bhi.n	80089a4 <osThreadNew+0x90>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <osThreadNew+0x94>
        return (NULL);
 80089a4:	2300      	movs	r3, #0
 80089a6:	e054      	b.n	8008a52 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	089b      	lsrs	r3, r3, #2
 80089b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00e      	beq.n	80089de <osThreadNew+0xca>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	2b5b      	cmp	r3, #91	@ 0x5b
 80089c6:	d90a      	bls.n	80089de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d006      	beq.n	80089de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <osThreadNew+0xca>
        mem = 1;
 80089d8:	2301      	movs	r3, #1
 80089da:	623b      	str	r3, [r7, #32]
 80089dc:	e010      	b.n	8008a00 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10c      	bne.n	8008a00 <osThreadNew+0xec>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d108      	bne.n	8008a00 <osThreadNew+0xec>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d104      	bne.n	8008a00 <osThreadNew+0xec>
          mem = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	623b      	str	r3, [r7, #32]
 80089fa:	e001      	b.n	8008a00 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d110      	bne.n	8008a28 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a0e:	9202      	str	r2, [sp, #8]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fe4f 	bl	80096c0 <xTaskCreateStatic>
 8008a22:	4603      	mov	r3, r0
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	e013      	b.n	8008a50 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d110      	bne.n	8008a50 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	f107 0310 	add.w	r3, r7, #16
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fea3 	bl	800978c <xTaskCreate>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d001      	beq.n	8008a50 <osThreadNew+0x13c>
          hTask = NULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a50:	693b      	ldr	r3, [r7, #16]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3730      	adds	r7, #48	@ 0x30
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000abc 	.word	0x20000abc

08008a60 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a68:	f3ef 8305 	mrs	r3, IPSR
 8008a6c:	613b      	str	r3, [r7, #16]
  return(result);
 8008a6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10f      	bne.n	8008a94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a74:	f3ef 8310 	mrs	r3, PRIMASK
 8008a78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d105      	bne.n	8008a8c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a80:	f3ef 8311 	mrs	r3, BASEPRI
 8008a84:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d007      	beq.n	8008a9c <osDelay+0x3c>
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab8 <osDelay+0x58>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d103      	bne.n	8008a9c <osDelay+0x3c>
    stat = osErrorISR;
 8008a94:	f06f 0305 	mvn.w	r3, #5
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	e007      	b.n	8008aac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <osDelay+0x4c>
      vTaskDelay(ticks);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 ffb8 	bl	8009a1c <vTaskDelay>
    }
  }

  return (stat);
 8008aac:	697b      	ldr	r3, [r7, #20]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000abc 	.word	0x20000abc

08008abc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4a07      	ldr	r2, [pc, #28]	@ (8008ae8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008acc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	4a06      	ldr	r2, [pc, #24]	@ (8008aec <vApplicationGetIdleTaskMemory+0x30>)
 8008ad2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2280      	movs	r2, #128	@ 0x80
 8008ad8:	601a      	str	r2, [r3, #0]
}
 8008ada:	bf00      	nop
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20000ac0 	.word	0x20000ac0
 8008aec:	20000b1c 	.word	0x20000b1c

08008af0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4a07      	ldr	r2, [pc, #28]	@ (8008b1c <vApplicationGetTimerTaskMemory+0x2c>)
 8008b00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4a06      	ldr	r2, [pc, #24]	@ (8008b20 <vApplicationGetTimerTaskMemory+0x30>)
 8008b06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b0e:	601a      	str	r2, [r3, #0]
}
 8008b10:	bf00      	nop
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	20000d1c 	.word	0x20000d1c
 8008b20:	20000d78 	.word	0x20000d78

08008b24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f103 0208 	add.w	r2, r3, #8
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f103 0208 	add.w	r2, r3, #8
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f103 0208 	add.w	r2, r3, #8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	601a      	str	r2, [r3, #0]
}
 8008bba:	bf00      	nop
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bdc:	d103      	bne.n	8008be6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e00c      	b.n	8008c00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3308      	adds	r3, #8
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e002      	b.n	8008bf4 <vListInsert+0x2e>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d2f6      	bcs.n	8008bee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	6892      	ldr	r2, [r2, #8]
 8008c4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6852      	ldr	r2, [r2, #4]
 8008c58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d103      	bne.n	8008c6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	1e5a      	subs	r2, r3, #1
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10d      	bne.n	8008cbc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca4:	b672      	cpsid	i
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	b662      	cpsie	i
 8008cb4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cb6:	bf00      	nop
 8008cb8:	bf00      	nop
 8008cba:	e7fd      	b.n	8008cb8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008cbc:	f002 f8a6 	bl	800ae0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc8:	68f9      	ldr	r1, [r7, #12]
 8008cca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ccc:	fb01 f303 	mul.w	r3, r1, r3
 8008cd0:	441a      	add	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cec:	3b01      	subs	r3, #1
 8008cee:	68f9      	ldr	r1, [r7, #12]
 8008cf0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cf2:	fb01 f303 	mul.w	r3, r1, r3
 8008cf6:	441a      	add	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	22ff      	movs	r2, #255	@ 0xff
 8008d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	22ff      	movs	r2, #255	@ 0xff
 8008d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d114      	bne.n	8008d3c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d01a      	beq.n	8008d50 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3310      	adds	r3, #16
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 f950 	bl	8009fc4 <xTaskRemoveFromEventList>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d012      	beq.n	8008d50 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d60 <xQueueGenericReset+0xd4>)
 8008d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	e009      	b.n	8008d50 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	3310      	adds	r3, #16
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff feef 	bl	8008b24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3324      	adds	r3, #36	@ 0x24
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff feea 	bl	8008b24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d50:	f002 f892 	bl	800ae78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d54:	2301      	movs	r3, #1
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	e000ed04 	.word	0xe000ed04

08008d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08e      	sub	sp, #56	@ 0x38
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10d      	bne.n	8008d94 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7c:	b672      	cpsid	i
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	b662      	cpsie	i
 8008d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d8e:	bf00      	nop
 8008d90:	bf00      	nop
 8008d92:	e7fd      	b.n	8008d90 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10d      	bne.n	8008db6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9e:	b672      	cpsid	i
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	b662      	cpsie	i
 8008dae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	e7fd      	b.n	8008db2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <xQueueGenericCreateStatic+0x5e>
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <xQueueGenericCreateStatic+0x62>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <xQueueGenericCreateStatic+0x64>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10d      	bne.n	8008de8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd0:	b672      	cpsid	i
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	b662      	cpsie	i
 8008de0:	623b      	str	r3, [r7, #32]
}
 8008de2:	bf00      	nop
 8008de4:	bf00      	nop
 8008de6:	e7fd      	b.n	8008de4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <xQueueGenericCreateStatic+0x90>
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <xQueueGenericCreateStatic+0x94>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e000      	b.n	8008dfa <xQueueGenericCreateStatic+0x96>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10d      	bne.n	8008e1a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e02:	b672      	cpsid	i
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	b662      	cpsie	i
 8008e12:	61fb      	str	r3, [r7, #28]
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop
 8008e18:	e7fd      	b.n	8008e16 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e1a:	2350      	movs	r3, #80	@ 0x50
 8008e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b50      	cmp	r3, #80	@ 0x50
 8008e22:	d00d      	beq.n	8008e40 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e28:	b672      	cpsid	i
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	b662      	cpsie	i
 8008e38:	61bb      	str	r3, [r7, #24]
}
 8008e3a:	bf00      	nop
 8008e3c:	bf00      	nop
 8008e3e:	e7fd      	b.n	8008e3c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00d      	beq.n	8008e68 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e54:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	68b9      	ldr	r1, [r7, #8]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 f805 	bl	8008e72 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3730      	adds	r7, #48	@ 0x30
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
 8008e7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d103      	bne.n	8008e8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	e002      	b.n	8008e94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	69b8      	ldr	r0, [r7, #24]
 8008ea4:	f7ff fef2 	bl	8008c8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	78fa      	ldrb	r2, [r7, #3]
 8008eac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008eb0:	bf00      	nop
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08e      	sub	sp, #56	@ 0x38
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10d      	bne.n	8008ef0 <xQueueGenericSend+0x38>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed8:	b672      	cpsid	i
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	b662      	cpsie	i
 8008ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	e7fd      	b.n	8008eec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <xQueueGenericSend+0x46>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <xQueueGenericSend+0x4a>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <xQueueGenericSend+0x4c>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10d      	bne.n	8008f24 <xQueueGenericSend+0x6c>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0c:	b672      	cpsid	i
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	b662      	cpsie	i
 8008f1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	e7fd      	b.n	8008f20 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d103      	bne.n	8008f32 <xQueueGenericSend+0x7a>
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d101      	bne.n	8008f36 <xQueueGenericSend+0x7e>
 8008f32:	2301      	movs	r3, #1
 8008f34:	e000      	b.n	8008f38 <xQueueGenericSend+0x80>
 8008f36:	2300      	movs	r3, #0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10d      	bne.n	8008f58 <xQueueGenericSend+0xa0>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f40:	b672      	cpsid	i
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	b662      	cpsie	i
 8008f50:	623b      	str	r3, [r7, #32]
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	e7fd      	b.n	8008f54 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f58:	f001 f9fc 	bl	800a354 <xTaskGetSchedulerState>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <xQueueGenericSend+0xb0>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <xQueueGenericSend+0xb4>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <xQueueGenericSend+0xb6>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10d      	bne.n	8008f8e <xQueueGenericSend+0xd6>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f76:	b672      	cpsid	i
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	b662      	cpsie	i
 8008f86:	61fb      	str	r3, [r7, #28]
}
 8008f88:	bf00      	nop
 8008f8a:	bf00      	nop
 8008f8c:	e7fd      	b.n	8008f8a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f8e:	f001 ff3d 	bl	800ae0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d302      	bcc.n	8008fa4 <xQueueGenericSend+0xec>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d129      	bne.n	8008ff8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	68b9      	ldr	r1, [r7, #8]
 8008fa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008faa:	f000 fa1b 	bl	80093e4 <prvCopyDataToQueue>
 8008fae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d010      	beq.n	8008fda <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	3324      	adds	r3, #36	@ 0x24
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 f801 	bl	8009fc4 <xTaskRemoveFromEventList>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d013      	beq.n	8008ff0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80090c8 <xQueueGenericSend+0x210>)
 8008fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	e00a      	b.n	8008ff0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d007      	beq.n	8008ff0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fe0:	4b39      	ldr	r3, [pc, #228]	@ (80090c8 <xQueueGenericSend+0x210>)
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ff0:	f001 ff42 	bl	800ae78 <vPortExitCritical>
				return pdPASS;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e063      	b.n	80090c0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d103      	bne.n	8009006 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ffe:	f001 ff3b 	bl	800ae78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009002:	2300      	movs	r3, #0
 8009004:	e05c      	b.n	80090c0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009008:	2b00      	cmp	r3, #0
 800900a:	d106      	bne.n	800901a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800900c:	f107 0314 	add.w	r3, r7, #20
 8009010:	4618      	mov	r0, r3
 8009012:	f001 f83d 	bl	800a090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009016:	2301      	movs	r3, #1
 8009018:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800901a:	f001 ff2d 	bl	800ae78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800901e:	f000 fda1 	bl	8009b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009022:	f001 fef3 	bl	800ae0c <vPortEnterCritical>
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800902c:	b25b      	sxtb	r3, r3
 800902e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009032:	d103      	bne.n	800903c <xQueueGenericSend+0x184>
 8009034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009042:	b25b      	sxtb	r3, r3
 8009044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009048:	d103      	bne.n	8009052 <xQueueGenericSend+0x19a>
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009052:	f001 ff11 	bl	800ae78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009056:	1d3a      	adds	r2, r7, #4
 8009058:	f107 0314 	add.w	r3, r7, #20
 800905c:	4611      	mov	r1, r2
 800905e:	4618      	mov	r0, r3
 8009060:	f001 f82c 	bl	800a0bc <xTaskCheckForTimeOut>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d124      	bne.n	80090b4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800906a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800906c:	f000 fab2 	bl	80095d4 <prvIsQueueFull>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d018      	beq.n	80090a8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	3310      	adds	r3, #16
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f000 ff4a 	bl	8009f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009086:	f000 fa3d 	bl	8009504 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800908a:	f000 fd79 	bl	8009b80 <xTaskResumeAll>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	f47f af7c 	bne.w	8008f8e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8009096:	4b0c      	ldr	r3, [pc, #48]	@ (80090c8 <xQueueGenericSend+0x210>)
 8009098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	e772      	b.n	8008f8e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090aa:	f000 fa2b 	bl	8009504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090ae:	f000 fd67 	bl	8009b80 <xTaskResumeAll>
 80090b2:	e76c      	b.n	8008f8e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090b6:	f000 fa25 	bl	8009504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090ba:	f000 fd61 	bl	8009b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3738      	adds	r7, #56	@ 0x38
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08e      	sub	sp, #56	@ 0x38
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80090de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10d      	bne.n	8009100 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e8:	b672      	cpsid	i
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	b662      	cpsie	i
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80090fa:	bf00      	nop
 80090fc:	bf00      	nop
 80090fe:	e7fd      	b.n	80090fc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d103      	bne.n	800910e <xQueueGenericSendFromISR+0x42>
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <xQueueGenericSendFromISR+0x46>
 800910e:	2301      	movs	r3, #1
 8009110:	e000      	b.n	8009114 <xQueueGenericSendFromISR+0x48>
 8009112:	2300      	movs	r3, #0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10d      	bne.n	8009134 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911c:	b672      	cpsid	i
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	b662      	cpsie	i
 800912c:	623b      	str	r3, [r7, #32]
}
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	e7fd      	b.n	8009130 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d103      	bne.n	8009142 <xQueueGenericSendFromISR+0x76>
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <xQueueGenericSendFromISR+0x7a>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <xQueueGenericSendFromISR+0x7c>
 8009146:	2300      	movs	r3, #0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10d      	bne.n	8009168 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009150:	b672      	cpsid	i
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	b662      	cpsie	i
 8009160:	61fb      	str	r3, [r7, #28]
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	e7fd      	b.n	8009164 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009168:	f001 ff38 	bl	800afdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800916c:	f3ef 8211 	mrs	r2, BASEPRI
 8009170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009174:	b672      	cpsid	i
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	b662      	cpsie	i
 8009184:	61ba      	str	r2, [r7, #24]
 8009186:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009188:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800918a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009194:	429a      	cmp	r2, r3
 8009196:	d302      	bcc.n	800919e <xQueueGenericSendFromISR+0xd2>
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d12c      	bne.n	80091f8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	68b9      	ldr	r1, [r7, #8]
 80091ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ae:	f000 f919 	bl	80093e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80091b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ba:	d112      	bne.n	80091e2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d016      	beq.n	80091f2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	3324      	adds	r3, #36	@ 0x24
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fefb 	bl	8009fc4 <xTaskRemoveFromEventList>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00e      	beq.n	80091f2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00b      	beq.n	80091f2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	e007      	b.n	80091f2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091e6:	3301      	adds	r3, #1
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	b25a      	sxtb	r2, r3
 80091ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80091f2:	2301      	movs	r3, #1
 80091f4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80091f6:	e001      	b.n	80091fc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091f8:	2300      	movs	r3, #0
 80091fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80091fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009206:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800920a:	4618      	mov	r0, r3
 800920c:	3738      	adds	r7, #56	@ 0x38
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08c      	sub	sp, #48	@ 0x30
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009220:	2300      	movs	r3, #0
 8009222:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10d      	bne.n	800924a <xQueueReceive+0x36>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	b672      	cpsid	i
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	b662      	cpsie	i
 8009242:	623b      	str	r3, [r7, #32]
}
 8009244:	bf00      	nop
 8009246:	bf00      	nop
 8009248:	e7fd      	b.n	8009246 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <xQueueReceive+0x44>
 8009250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <xQueueReceive+0x48>
 8009258:	2301      	movs	r3, #1
 800925a:	e000      	b.n	800925e <xQueueReceive+0x4a>
 800925c:	2300      	movs	r3, #0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10d      	bne.n	800927e <xQueueReceive+0x6a>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009266:	b672      	cpsid	i
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	b662      	cpsie	i
 8009276:	61fb      	str	r3, [r7, #28]
}
 8009278:	bf00      	nop
 800927a:	bf00      	nop
 800927c:	e7fd      	b.n	800927a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800927e:	f001 f869 	bl	800a354 <xTaskGetSchedulerState>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <xQueueReceive+0x7a>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <xQueueReceive+0x7e>
 800928e:	2301      	movs	r3, #1
 8009290:	e000      	b.n	8009294 <xQueueReceive+0x80>
 8009292:	2300      	movs	r3, #0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10d      	bne.n	80092b4 <xQueueReceive+0xa0>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	b672      	cpsid	i
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	b662      	cpsie	i
 80092ac:	61bb      	str	r3, [r7, #24]
}
 80092ae:	bf00      	nop
 80092b0:	bf00      	nop
 80092b2:	e7fd      	b.n	80092b0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092b4:	f001 fdaa 	bl	800ae0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01f      	beq.n	8009304 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092c4:	68b9      	ldr	r1, [r7, #8]
 80092c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092c8:	f000 f8f6 	bl	80094b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ce:	1e5a      	subs	r2, r3, #1
 80092d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00f      	beq.n	80092fc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092de:	3310      	adds	r3, #16
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fe6f 	bl	8009fc4 <xTaskRemoveFromEventList>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d007      	beq.n	80092fc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092ec:	4b3c      	ldr	r3, [pc, #240]	@ (80093e0 <xQueueReceive+0x1cc>)
 80092ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092fc:	f001 fdbc 	bl	800ae78 <vPortExitCritical>
				return pdPASS;
 8009300:	2301      	movs	r3, #1
 8009302:	e069      	b.n	80093d8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d103      	bne.n	8009312 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800930a:	f001 fdb5 	bl	800ae78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800930e:	2300      	movs	r3, #0
 8009310:	e062      	b.n	80093d8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d106      	bne.n	8009326 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009318:	f107 0310 	add.w	r3, r7, #16
 800931c:	4618      	mov	r0, r3
 800931e:	f000 feb7 	bl	800a090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009322:	2301      	movs	r3, #1
 8009324:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009326:	f001 fda7 	bl	800ae78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800932a:	f000 fc1b 	bl	8009b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800932e:	f001 fd6d 	bl	800ae0c <vPortEnterCritical>
 8009332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009334:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009338:	b25b      	sxtb	r3, r3
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d103      	bne.n	8009348 <xQueueReceive+0x134>
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800934e:	b25b      	sxtb	r3, r3
 8009350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009354:	d103      	bne.n	800935e <xQueueReceive+0x14a>
 8009356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800935e:	f001 fd8b 	bl	800ae78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009362:	1d3a      	adds	r2, r7, #4
 8009364:	f107 0310 	add.w	r3, r7, #16
 8009368:	4611      	mov	r1, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f000 fea6 	bl	800a0bc <xTaskCheckForTimeOut>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d123      	bne.n	80093be <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009378:	f000 f916 	bl	80095a8 <prvIsQueueEmpty>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d017      	beq.n	80093b2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009384:	3324      	adds	r3, #36	@ 0x24
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	4611      	mov	r1, r2
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fdc4 	bl	8009f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009390:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009392:	f000 f8b7 	bl	8009504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009396:	f000 fbf3 	bl	8009b80 <xTaskResumeAll>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d189      	bne.n	80092b4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80093a0:	4b0f      	ldr	r3, [pc, #60]	@ (80093e0 <xQueueReceive+0x1cc>)
 80093a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	e780      	b.n	80092b4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093b4:	f000 f8a6 	bl	8009504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093b8:	f000 fbe2 	bl	8009b80 <xTaskResumeAll>
 80093bc:	e77a      	b.n	80092b4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093c0:	f000 f8a0 	bl	8009504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093c4:	f000 fbdc 	bl	8009b80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ca:	f000 f8ed 	bl	80095a8 <prvIsQueueEmpty>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f43f af6f 	beq.w	80092b4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3730      	adds	r7, #48	@ 0x30
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093f0:	2300      	movs	r3, #0
 80093f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10d      	bne.n	800941e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d14d      	bne.n	80094a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 ffbe 	bl	800a390 <xTaskPriorityDisinherit>
 8009414:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	609a      	str	r2, [r3, #8]
 800941c:	e043      	b.n	80094a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d119      	bne.n	8009458 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6858      	ldr	r0, [r3, #4]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942c:	461a      	mov	r2, r3
 800942e:	68b9      	ldr	r1, [r7, #8]
 8009430:	f002 f8d0 	bl	800b5d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943c:	441a      	add	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	429a      	cmp	r2, r3
 800944c:	d32b      	bcc.n	80094a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	605a      	str	r2, [r3, #4]
 8009456:	e026      	b.n	80094a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68d8      	ldr	r0, [r3, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009460:	461a      	mov	r2, r3
 8009462:	68b9      	ldr	r1, [r7, #8]
 8009464:	f002 f8b6 	bl	800b5d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68da      	ldr	r2, [r3, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009470:	425b      	negs	r3, r3
 8009472:	441a      	add	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	68da      	ldr	r2, [r3, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d207      	bcs.n	8009494 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948c:	425b      	negs	r3, r3
 800948e:	441a      	add	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d105      	bne.n	80094a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1c5a      	adds	r2, r3, #1
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80094ae:	697b      	ldr	r3, [r7, #20]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3718      	adds	r7, #24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d018      	beq.n	80094fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d2:	441a      	add	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d303      	bcc.n	80094ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68d9      	ldr	r1, [r3, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f4:	461a      	mov	r2, r3
 80094f6:	6838      	ldr	r0, [r7, #0]
 80094f8:	f002 f86c 	bl	800b5d4 <memcpy>
	}
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800950c:	f001 fc7e 	bl	800ae0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009516:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009518:	e011      	b.n	800953e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	d012      	beq.n	8009548 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3324      	adds	r3, #36	@ 0x24
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fd4c 	bl	8009fc4 <xTaskRemoveFromEventList>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009532:	f000 fe2b 	bl	800a18c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009536:	7bfb      	ldrb	r3, [r7, #15]
 8009538:	3b01      	subs	r3, #1
 800953a:	b2db      	uxtb	r3, r3
 800953c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800953e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009542:	2b00      	cmp	r3, #0
 8009544:	dce9      	bgt.n	800951a <prvUnlockQueue+0x16>
 8009546:	e000      	b.n	800954a <prvUnlockQueue+0x46>
					break;
 8009548:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	22ff      	movs	r2, #255	@ 0xff
 800954e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009552:	f001 fc91 	bl	800ae78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009556:	f001 fc59 	bl	800ae0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009560:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009562:	e011      	b.n	8009588 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d012      	beq.n	8009592 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3310      	adds	r3, #16
 8009570:	4618      	mov	r0, r3
 8009572:	f000 fd27 	bl	8009fc4 <xTaskRemoveFromEventList>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800957c:	f000 fe06 	bl	800a18c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	3b01      	subs	r3, #1
 8009584:	b2db      	uxtb	r3, r3
 8009586:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800958c:	2b00      	cmp	r3, #0
 800958e:	dce9      	bgt.n	8009564 <prvUnlockQueue+0x60>
 8009590:	e000      	b.n	8009594 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009592:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	22ff      	movs	r2, #255	@ 0xff
 8009598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800959c:	f001 fc6c 	bl	800ae78 <vPortExitCritical>
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095b0:	f001 fc2c 	bl	800ae0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095bc:	2301      	movs	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	e001      	b.n	80095c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095c6:	f001 fc57 	bl	800ae78 <vPortExitCritical>

	return xReturn;
 80095ca:	68fb      	ldr	r3, [r7, #12]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095dc:	f001 fc16 	bl	800ae0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d102      	bne.n	80095f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80095ec:	2301      	movs	r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	e001      	b.n	80095f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095f6:	f001 fc3f 	bl	800ae78 <vPortExitCritical>

	return xReturn;
 80095fa:	68fb      	ldr	r3, [r7, #12]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	e014      	b.n	800963e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009614:	4a0f      	ldr	r2, [pc, #60]	@ (8009654 <vQueueAddToRegistry+0x50>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009620:	490c      	ldr	r1, [pc, #48]	@ (8009654 <vQueueAddToRegistry+0x50>)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800962a:	4a0a      	ldr	r2, [pc, #40]	@ (8009654 <vQueueAddToRegistry+0x50>)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	4413      	add	r3, r2
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009636:	e006      	b.n	8009646 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3301      	adds	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b07      	cmp	r3, #7
 8009642:	d9e7      	bls.n	8009614 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009644:	bf00      	nop
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	20001178 	.word	0x20001178

08009658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009668:	f001 fbd0 	bl	800ae0c <vPortEnterCritical>
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009672:	b25b      	sxtb	r3, r3
 8009674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009678:	d103      	bne.n	8009682 <vQueueWaitForMessageRestricted+0x2a>
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009688:	b25b      	sxtb	r3, r3
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d103      	bne.n	8009698 <vQueueWaitForMessageRestricted+0x40>
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009698:	f001 fbee 	bl	800ae78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	3324      	adds	r3, #36	@ 0x24
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fc5b 	bl	8009f68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096b2:	6978      	ldr	r0, [r7, #20]
 80096b4:	f7ff ff26 	bl	8009504 <prvUnlockQueue>
	}
 80096b8:	bf00      	nop
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08e      	sub	sp, #56	@ 0x38
 80096c4:	af04      	add	r7, sp, #16
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80096ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10d      	bne.n	80096f0 <xTaskCreateStatic+0x30>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d8:	b672      	cpsid	i
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	b662      	cpsie	i
 80096e8:	623b      	str	r3, [r7, #32]
}
 80096ea:	bf00      	nop
 80096ec:	bf00      	nop
 80096ee:	e7fd      	b.n	80096ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10d      	bne.n	8009712 <xTaskCreateStatic+0x52>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	b672      	cpsid	i
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	b662      	cpsie	i
 800970a:	61fb      	str	r3, [r7, #28]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009712:	235c      	movs	r3, #92	@ 0x5c
 8009714:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	2b5c      	cmp	r3, #92	@ 0x5c
 800971a:	d00d      	beq.n	8009738 <xTaskCreateStatic+0x78>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009720:	b672      	cpsid	i
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	b662      	cpsie	i
 8009730:	61bb      	str	r3, [r7, #24]
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	e7fd      	b.n	8009734 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009738:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800973a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973c:	2b00      	cmp	r3, #0
 800973e:	d01e      	beq.n	800977e <xTaskCreateStatic+0xbe>
 8009740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009742:	2b00      	cmp	r3, #0
 8009744:	d01b      	beq.n	800977e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800974e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	2202      	movs	r2, #2
 8009754:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009758:	2300      	movs	r3, #0
 800975a:	9303      	str	r3, [sp, #12]
 800975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975e:	9302      	str	r3, [sp, #8]
 8009760:	f107 0314 	add.w	r3, r7, #20
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f850 	bl	8009816 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009776:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009778:	f000 f8e0 	bl	800993c <prvAddNewTaskToReadyList>
 800977c:	e001      	b.n	8009782 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800977e:	2300      	movs	r3, #0
 8009780:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009782:	697b      	ldr	r3, [r7, #20]
	}
 8009784:	4618      	mov	r0, r3
 8009786:	3728      	adds	r7, #40	@ 0x28
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08c      	sub	sp, #48	@ 0x30
 8009790:	af04      	add	r7, sp, #16
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	603b      	str	r3, [r7, #0]
 8009798:	4613      	mov	r3, r2
 800979a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800979c:	88fb      	ldrh	r3, [r7, #6]
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 fc61 	bl	800b068 <pvPortMalloc>
 80097a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00e      	beq.n	80097cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097ae:	205c      	movs	r0, #92	@ 0x5c
 80097b0:	f001 fc5a 	bl	800b068 <pvPortMalloc>
 80097b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80097c2:	e005      	b.n	80097d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097c4:	6978      	ldr	r0, [r7, #20]
 80097c6:	f001 fd1d 	bl	800b204 <vPortFree>
 80097ca:	e001      	b.n	80097d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097cc:	2300      	movs	r3, #0
 80097ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d017      	beq.n	8009806 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097de:	88fa      	ldrh	r2, [r7, #6]
 80097e0:	2300      	movs	r3, #0
 80097e2:	9303      	str	r3, [sp, #12]
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ea:	9301      	str	r3, [sp, #4]
 80097ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f80e 	bl	8009816 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097fa:	69f8      	ldr	r0, [r7, #28]
 80097fc:	f000 f89e 	bl	800993c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009800:	2301      	movs	r3, #1
 8009802:	61bb      	str	r3, [r7, #24]
 8009804:	e002      	b.n	800980c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009806:	f04f 33ff 	mov.w	r3, #4294967295
 800980a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800980c:	69bb      	ldr	r3, [r7, #24]
	}
 800980e:	4618      	mov	r0, r3
 8009810:	3720      	adds	r7, #32
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b088      	sub	sp, #32
 800981a:	af00      	add	r7, sp, #0
 800981c:	60f8      	str	r0, [r7, #12]
 800981e:	60b9      	str	r1, [r7, #8]
 8009820:	607a      	str	r2, [r7, #4]
 8009822:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009826:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	461a      	mov	r2, r3
 800982e:	21a5      	movs	r1, #165	@ 0xa5
 8009830:	f001 fe8c 	bl	800b54c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800983e:	440b      	add	r3, r1
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	f023 0307 	bic.w	r3, r3, #7
 800984c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	f003 0307 	and.w	r3, r3, #7
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00d      	beq.n	8009874 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985c:	b672      	cpsid	i
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	b662      	cpsie	i
 800986c:	617b      	str	r3, [r7, #20]
}
 800986e:	bf00      	nop
 8009870:	bf00      	nop
 8009872:	e7fd      	b.n	8009870 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01f      	beq.n	80098ba <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800987a:	2300      	movs	r3, #0
 800987c:	61fb      	str	r3, [r7, #28]
 800987e:	e012      	b.n	80098a6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	4413      	add	r3, r2
 8009886:	7819      	ldrb	r1, [r3, #0]
 8009888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	3334      	adds	r3, #52	@ 0x34
 8009890:	460a      	mov	r2, r1
 8009892:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d006      	beq.n	80098ae <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	3301      	adds	r3, #1
 80098a4:	61fb      	str	r3, [r7, #28]
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	2b0f      	cmp	r3, #15
 80098aa:	d9e9      	bls.n	8009880 <prvInitialiseNewTask+0x6a>
 80098ac:	e000      	b.n	80098b0 <prvInitialiseNewTask+0x9a>
			{
				break;
 80098ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80098b8:	e003      	b.n	80098c2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c4:	2b37      	cmp	r3, #55	@ 0x37
 80098c6:	d901      	bls.n	80098cc <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098c8:	2337      	movs	r3, #55	@ 0x37
 80098ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	2200      	movs	r2, #0
 80098dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	3304      	adds	r3, #4
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff f93e 	bl	8008b64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ea:	3318      	adds	r3, #24
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff f939 	bl	8008b64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80098fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009900:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009906:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990a:	2200      	movs	r2, #0
 800990c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800990e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	68f9      	ldr	r1, [r7, #12]
 800991a:	69b8      	ldr	r0, [r7, #24]
 800991c:	f001 f968 	bl	800abf0 <pxPortInitialiseStack>
 8009920:	4602      	mov	r2, r0
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009932:	bf00      	nop
 8009934:	3720      	adds	r7, #32
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009944:	f001 fa62 	bl	800ae0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009948:	4b2d      	ldr	r3, [pc, #180]	@ (8009a00 <prvAddNewTaskToReadyList+0xc4>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3301      	adds	r3, #1
 800994e:	4a2c      	ldr	r2, [pc, #176]	@ (8009a00 <prvAddNewTaskToReadyList+0xc4>)
 8009950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009952:	4b2c      	ldr	r3, [pc, #176]	@ (8009a04 <prvAddNewTaskToReadyList+0xc8>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d109      	bne.n	800996e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800995a:	4a2a      	ldr	r2, [pc, #168]	@ (8009a04 <prvAddNewTaskToReadyList+0xc8>)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009960:	4b27      	ldr	r3, [pc, #156]	@ (8009a00 <prvAddNewTaskToReadyList+0xc4>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d110      	bne.n	800998a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009968:	f000 fc34 	bl	800a1d4 <prvInitialiseTaskLists>
 800996c:	e00d      	b.n	800998a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800996e:	4b26      	ldr	r3, [pc, #152]	@ (8009a08 <prvAddNewTaskToReadyList+0xcc>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009976:	4b23      	ldr	r3, [pc, #140]	@ (8009a04 <prvAddNewTaskToReadyList+0xc8>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	429a      	cmp	r2, r3
 8009982:	d802      	bhi.n	800998a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009984:	4a1f      	ldr	r2, [pc, #124]	@ (8009a04 <prvAddNewTaskToReadyList+0xc8>)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800998a:	4b20      	ldr	r3, [pc, #128]	@ (8009a0c <prvAddNewTaskToReadyList+0xd0>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3301      	adds	r3, #1
 8009990:	4a1e      	ldr	r2, [pc, #120]	@ (8009a0c <prvAddNewTaskToReadyList+0xd0>)
 8009992:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009994:	4b1d      	ldr	r3, [pc, #116]	@ (8009a0c <prvAddNewTaskToReadyList+0xd0>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009a10 <prvAddNewTaskToReadyList+0xd4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d903      	bls.n	80099b0 <prvAddNewTaskToReadyList+0x74>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ac:	4a18      	ldr	r2, [pc, #96]	@ (8009a10 <prvAddNewTaskToReadyList+0xd4>)
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4a15      	ldr	r2, [pc, #84]	@ (8009a14 <prvAddNewTaskToReadyList+0xd8>)
 80099be:	441a      	add	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7ff f8d9 	bl	8008b7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099cc:	f001 fa54 	bl	800ae78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009a08 <prvAddNewTaskToReadyList+0xcc>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00e      	beq.n	80099f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009a04 <prvAddNewTaskToReadyList+0xc8>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d207      	bcs.n	80099f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009a18 <prvAddNewTaskToReadyList+0xdc>)
 80099e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	2000168c 	.word	0x2000168c
 8009a04:	200011b8 	.word	0x200011b8
 8009a08:	20001698 	.word	0x20001698
 8009a0c:	200016a8 	.word	0x200016a8
 8009a10:	20001694 	.word	0x20001694
 8009a14:	200011bc 	.word	0x200011bc
 8009a18:	e000ed04 	.word	0xe000ed04

08009a1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d01a      	beq.n	8009a64 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a2e:	4b15      	ldr	r3, [pc, #84]	@ (8009a84 <vTaskDelay+0x68>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00d      	beq.n	8009a52 <vTaskDelay+0x36>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	b672      	cpsid	i
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	b662      	cpsie	i
 8009a4a:	60bb      	str	r3, [r7, #8]
}
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	e7fd      	b.n	8009a4e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009a52:	f000 f887 	bl	8009b64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a56:	2100      	movs	r1, #0
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fd0d 	bl	800a478 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a5e:	f000 f88f 	bl	8009b80 <xTaskResumeAll>
 8009a62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d107      	bne.n	8009a7a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009a6a:	4b07      	ldr	r3, [pc, #28]	@ (8009a88 <vTaskDelay+0x6c>)
 8009a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a7a:	bf00      	nop
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	200016b4 	.word	0x200016b4
 8009a88:	e000ed04 	.word	0xe000ed04

08009a8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08a      	sub	sp, #40	@ 0x28
 8009a90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a92:	2300      	movs	r3, #0
 8009a94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a9a:	463a      	mov	r2, r7
 8009a9c:	1d39      	adds	r1, r7, #4
 8009a9e:	f107 0308 	add.w	r3, r7, #8
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff f80a 	bl	8008abc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	9202      	str	r2, [sp, #8]
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	460a      	mov	r2, r1
 8009aba:	4924      	ldr	r1, [pc, #144]	@ (8009b4c <vTaskStartScheduler+0xc0>)
 8009abc:	4824      	ldr	r0, [pc, #144]	@ (8009b50 <vTaskStartScheduler+0xc4>)
 8009abe:	f7ff fdff 	bl	80096c0 <xTaskCreateStatic>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	4a23      	ldr	r2, [pc, #140]	@ (8009b54 <vTaskStartScheduler+0xc8>)
 8009ac6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ac8:	4b22      	ldr	r3, [pc, #136]	@ (8009b54 <vTaskStartScheduler+0xc8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	e001      	b.n	8009ada <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d102      	bne.n	8009ae6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ae0:	f000 fd1e 	bl	800a520 <xTimerCreateTimerTask>
 8009ae4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d118      	bne.n	8009b1e <vTaskStartScheduler+0x92>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af0:	b672      	cpsid	i
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	b662      	cpsie	i
 8009b00:	613b      	str	r3, [r7, #16]
}
 8009b02:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b04:	4b14      	ldr	r3, [pc, #80]	@ (8009b58 <vTaskStartScheduler+0xcc>)
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b0c:	4b13      	ldr	r3, [pc, #76]	@ (8009b5c <vTaskStartScheduler+0xd0>)
 8009b0e:	2201      	movs	r2, #1
 8009b10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b12:	4b13      	ldr	r3, [pc, #76]	@ (8009b60 <vTaskStartScheduler+0xd4>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b18:	f001 f8fa 	bl	800ad10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b1c:	e011      	b.n	8009b42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b24:	d10d      	bne.n	8009b42 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	b672      	cpsid	i
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	b662      	cpsie	i
 8009b3a:	60fb      	str	r3, [r7, #12]
}
 8009b3c:	bf00      	nop
 8009b3e:	bf00      	nop
 8009b40:	e7fd      	b.n	8009b3e <vTaskStartScheduler+0xb2>
}
 8009b42:	bf00      	nop
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	0800b7bc 	.word	0x0800b7bc
 8009b50:	0800a1a5 	.word	0x0800a1a5
 8009b54:	200016b0 	.word	0x200016b0
 8009b58:	200016ac 	.word	0x200016ac
 8009b5c:	20001698 	.word	0x20001698
 8009b60:	20001690 	.word	0x20001690

08009b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b68:	4b04      	ldr	r3, [pc, #16]	@ (8009b7c <vTaskSuspendAll+0x18>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	4a03      	ldr	r2, [pc, #12]	@ (8009b7c <vTaskSuspendAll+0x18>)
 8009b70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009b72:	bf00      	nop
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	200016b4 	.word	0x200016b4

08009b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b8e:	4b43      	ldr	r3, [pc, #268]	@ (8009c9c <xTaskResumeAll+0x11c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10d      	bne.n	8009bb2 <xTaskResumeAll+0x32>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	b672      	cpsid	i
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	b662      	cpsie	i
 8009baa:	603b      	str	r3, [r7, #0]
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	e7fd      	b.n	8009bae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bb2:	f001 f92b 	bl	800ae0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bb6:	4b39      	ldr	r3, [pc, #228]	@ (8009c9c <xTaskResumeAll+0x11c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	4a37      	ldr	r2, [pc, #220]	@ (8009c9c <xTaskResumeAll+0x11c>)
 8009bbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bc0:	4b36      	ldr	r3, [pc, #216]	@ (8009c9c <xTaskResumeAll+0x11c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d162      	bne.n	8009c8e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bc8:	4b35      	ldr	r3, [pc, #212]	@ (8009ca0 <xTaskResumeAll+0x120>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d05e      	beq.n	8009c8e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bd0:	e02f      	b.n	8009c32 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd2:	4b34      	ldr	r3, [pc, #208]	@ (8009ca4 <xTaskResumeAll+0x124>)
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3318      	adds	r3, #24
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff f82a 	bl	8008c38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7ff f825 	bl	8008c38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8009ca8 <xTaskResumeAll+0x128>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d903      	bls.n	8009c02 <xTaskResumeAll+0x82>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8009ca8 <xTaskResumeAll+0x128>)
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4a27      	ldr	r2, [pc, #156]	@ (8009cac <xTaskResumeAll+0x12c>)
 8009c10:	441a      	add	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f7fe ffb0 	bl	8008b7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c22:	4b23      	ldr	r3, [pc, #140]	@ (8009cb0 <xTaskResumeAll+0x130>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d302      	bcc.n	8009c32 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009c2c:	4b21      	ldr	r3, [pc, #132]	@ (8009cb4 <xTaskResumeAll+0x134>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c32:	4b1c      	ldr	r3, [pc, #112]	@ (8009ca4 <xTaskResumeAll+0x124>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1cb      	bne.n	8009bd2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c40:	f000 fb68 	bl	800a314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c44:	4b1c      	ldr	r3, [pc, #112]	@ (8009cb8 <xTaskResumeAll+0x138>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d010      	beq.n	8009c72 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c50:	f000 f846 	bl	8009ce0 <xTaskIncrementTick>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009c5a:	4b16      	ldr	r3, [pc, #88]	@ (8009cb4 <xTaskResumeAll+0x134>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1f1      	bne.n	8009c50 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009c6c:	4b12      	ldr	r3, [pc, #72]	@ (8009cb8 <xTaskResumeAll+0x138>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c72:	4b10      	ldr	r3, [pc, #64]	@ (8009cb4 <xTaskResumeAll+0x134>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009cbc <xTaskResumeAll+0x13c>)
 8009c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c8e:	f001 f8f3 	bl	800ae78 <vPortExitCritical>

	return xAlreadyYielded;
 8009c92:	68bb      	ldr	r3, [r7, #8]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200016b4 	.word	0x200016b4
 8009ca0:	2000168c 	.word	0x2000168c
 8009ca4:	2000164c 	.word	0x2000164c
 8009ca8:	20001694 	.word	0x20001694
 8009cac:	200011bc 	.word	0x200011bc
 8009cb0:	200011b8 	.word	0x200011b8
 8009cb4:	200016a0 	.word	0x200016a0
 8009cb8:	2000169c 	.word	0x2000169c
 8009cbc:	e000ed04 	.word	0xe000ed04

08009cc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cc6:	4b05      	ldr	r3, [pc, #20]	@ (8009cdc <xTaskGetTickCount+0x1c>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ccc:	687b      	ldr	r3, [r7, #4]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20001690 	.word	0x20001690

08009ce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cea:	4b50      	ldr	r3, [pc, #320]	@ (8009e2c <xTaskIncrementTick+0x14c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f040 808c 	bne.w	8009e0c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8009e30 <xTaskIncrementTick+0x150>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8009e30 <xTaskIncrementTick+0x150>)
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d123      	bne.n	8009d50 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d08:	4b4a      	ldr	r3, [pc, #296]	@ (8009e34 <xTaskIncrementTick+0x154>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00d      	beq.n	8009d2e <xTaskIncrementTick+0x4e>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	b672      	cpsid	i
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	b662      	cpsie	i
 8009d26:	603b      	str	r3, [r7, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	e7fd      	b.n	8009d2a <xTaskIncrementTick+0x4a>
 8009d2e:	4b41      	ldr	r3, [pc, #260]	@ (8009e34 <xTaskIncrementTick+0x154>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	4b40      	ldr	r3, [pc, #256]	@ (8009e38 <xTaskIncrementTick+0x158>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a3e      	ldr	r2, [pc, #248]	@ (8009e34 <xTaskIncrementTick+0x154>)
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	4a3e      	ldr	r2, [pc, #248]	@ (8009e38 <xTaskIncrementTick+0x158>)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	4b3e      	ldr	r3, [pc, #248]	@ (8009e3c <xTaskIncrementTick+0x15c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3301      	adds	r3, #1
 8009d48:	4a3c      	ldr	r2, [pc, #240]	@ (8009e3c <xTaskIncrementTick+0x15c>)
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	f000 fae2 	bl	800a314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d50:	4b3b      	ldr	r3, [pc, #236]	@ (8009e40 <xTaskIncrementTick+0x160>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d349      	bcc.n	8009dee <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d5a:	4b36      	ldr	r3, [pc, #216]	@ (8009e34 <xTaskIncrementTick+0x154>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d64:	4b36      	ldr	r3, [pc, #216]	@ (8009e40 <xTaskIncrementTick+0x160>)
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6a:	601a      	str	r2, [r3, #0]
					break;
 8009d6c:	e03f      	b.n	8009dee <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d6e:	4b31      	ldr	r3, [pc, #196]	@ (8009e34 <xTaskIncrementTick+0x154>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d203      	bcs.n	8009d8e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d86:	4a2e      	ldr	r2, [pc, #184]	@ (8009e40 <xTaskIncrementTick+0x160>)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d8c:	e02f      	b.n	8009dee <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	3304      	adds	r3, #4
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe ff50 	bl	8008c38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	3318      	adds	r3, #24
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe ff47 	bl	8008c38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dae:	4b25      	ldr	r3, [pc, #148]	@ (8009e44 <xTaskIncrementTick+0x164>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d903      	bls.n	8009dbe <xTaskIncrementTick+0xde>
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dba:	4a22      	ldr	r2, [pc, #136]	@ (8009e44 <xTaskIncrementTick+0x164>)
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4a1f      	ldr	r2, [pc, #124]	@ (8009e48 <xTaskIncrementTick+0x168>)
 8009dcc:	441a      	add	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	f7fe fed2 	bl	8008b7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dde:	4b1b      	ldr	r3, [pc, #108]	@ (8009e4c <xTaskIncrementTick+0x16c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d3b8      	bcc.n	8009d5a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009de8:	2301      	movs	r3, #1
 8009dea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dec:	e7b5      	b.n	8009d5a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009dee:	4b17      	ldr	r3, [pc, #92]	@ (8009e4c <xTaskIncrementTick+0x16c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df4:	4914      	ldr	r1, [pc, #80]	@ (8009e48 <xTaskIncrementTick+0x168>)
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	440b      	add	r3, r1
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d907      	bls.n	8009e16 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009e06:	2301      	movs	r3, #1
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	e004      	b.n	8009e16 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e0c:	4b10      	ldr	r3, [pc, #64]	@ (8009e50 <xTaskIncrementTick+0x170>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3301      	adds	r3, #1
 8009e12:	4a0f      	ldr	r2, [pc, #60]	@ (8009e50 <xTaskIncrementTick+0x170>)
 8009e14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e16:	4b0f      	ldr	r3, [pc, #60]	@ (8009e54 <xTaskIncrementTick+0x174>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e22:	697b      	ldr	r3, [r7, #20]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	200016b4 	.word	0x200016b4
 8009e30:	20001690 	.word	0x20001690
 8009e34:	20001644 	.word	0x20001644
 8009e38:	20001648 	.word	0x20001648
 8009e3c:	200016a4 	.word	0x200016a4
 8009e40:	200016ac 	.word	0x200016ac
 8009e44:	20001694 	.word	0x20001694
 8009e48:	200011bc 	.word	0x200011bc
 8009e4c:	200011b8 	.word	0x200011b8
 8009e50:	2000169c 	.word	0x2000169c
 8009e54:	200016a0 	.word	0x200016a0

08009e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e5e:	4b29      	ldr	r3, [pc, #164]	@ (8009f04 <vTaskSwitchContext+0xac>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e66:	4b28      	ldr	r3, [pc, #160]	@ (8009f08 <vTaskSwitchContext+0xb0>)
 8009e68:	2201      	movs	r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e6c:	e044      	b.n	8009ef8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009e6e:	4b26      	ldr	r3, [pc, #152]	@ (8009f08 <vTaskSwitchContext+0xb0>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e74:	4b25      	ldr	r3, [pc, #148]	@ (8009f0c <vTaskSwitchContext+0xb4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e013      	b.n	8009ea4 <vTaskSwitchContext+0x4c>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10d      	bne.n	8009e9e <vTaskSwitchContext+0x46>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e86:	b672      	cpsid	i
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	b662      	cpsie	i
 8009e96:	607b      	str	r3, [r7, #4]
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	e7fd      	b.n	8009e9a <vTaskSwitchContext+0x42>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	491a      	ldr	r1, [pc, #104]	@ (8009f10 <vTaskSwitchContext+0xb8>)
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0e1      	beq.n	8009e7c <vTaskSwitchContext+0x24>
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4a13      	ldr	r2, [pc, #76]	@ (8009f10 <vTaskSwitchContext+0xb8>)
 8009ec4:	4413      	add	r3, r2
 8009ec6:	60bb      	str	r3, [r7, #8]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	605a      	str	r2, [r3, #4]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	685a      	ldr	r2, [r3, #4]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	3308      	adds	r3, #8
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d104      	bne.n	8009ee8 <vTaskSwitchContext+0x90>
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	605a      	str	r2, [r3, #4]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	4a09      	ldr	r2, [pc, #36]	@ (8009f14 <vTaskSwitchContext+0xbc>)
 8009ef0:	6013      	str	r3, [r2, #0]
 8009ef2:	4a06      	ldr	r2, [pc, #24]	@ (8009f0c <vTaskSwitchContext+0xb4>)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6013      	str	r3, [r2, #0]
}
 8009ef8:	bf00      	nop
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	200016b4 	.word	0x200016b4
 8009f08:	200016a0 	.word	0x200016a0
 8009f0c:	20001694 	.word	0x20001694
 8009f10:	200011bc 	.word	0x200011bc
 8009f14:	200011b8 	.word	0x200011b8

08009f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10d      	bne.n	8009f44 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2c:	b672      	cpsid	i
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	b662      	cpsie	i
 8009f3c:	60fb      	str	r3, [r7, #12]
}
 8009f3e:	bf00      	nop
 8009f40:	bf00      	nop
 8009f42:	e7fd      	b.n	8009f40 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f44:	4b07      	ldr	r3, [pc, #28]	@ (8009f64 <vTaskPlaceOnEventList+0x4c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3318      	adds	r3, #24
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7fe fe3a 	bl	8008bc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f52:	2101      	movs	r1, #1
 8009f54:	6838      	ldr	r0, [r7, #0]
 8009f56:	f000 fa8f 	bl	800a478 <prvAddCurrentTaskToDelayedList>
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	200011b8 	.word	0x200011b8

08009f68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10d      	bne.n	8009f96 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7e:	b672      	cpsid	i
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	b662      	cpsie	i
 8009f8e:	617b      	str	r3, [r7, #20]
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	e7fd      	b.n	8009f92 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f96:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc0 <vTaskPlaceOnEventListRestricted+0x58>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3318      	adds	r3, #24
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f7fe fded 	bl	8008b7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009faa:	f04f 33ff 	mov.w	r3, #4294967295
 8009fae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009fb0:	6879      	ldr	r1, [r7, #4]
 8009fb2:	68b8      	ldr	r0, [r7, #8]
 8009fb4:	f000 fa60 	bl	800a478 <prvAddCurrentTaskToDelayedList>
	}
 8009fb8:	bf00      	nop
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200011b8 	.word	0x200011b8

08009fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10d      	bne.n	8009ff6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fde:	b672      	cpsid	i
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	b662      	cpsie	i
 8009fee:	60fb      	str	r3, [r7, #12]
}
 8009ff0:	bf00      	nop
 8009ff2:	bf00      	nop
 8009ff4:	e7fd      	b.n	8009ff2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	3318      	adds	r3, #24
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe fe1c 	bl	8008c38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a000:	4b1d      	ldr	r3, [pc, #116]	@ (800a078 <xTaskRemoveFromEventList+0xb4>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d11d      	bne.n	800a044 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	3304      	adds	r3, #4
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe fe13 	bl	8008c38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a016:	4b19      	ldr	r3, [pc, #100]	@ (800a07c <xTaskRemoveFromEventList+0xb8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d903      	bls.n	800a026 <xTaskRemoveFromEventList+0x62>
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a022:	4a16      	ldr	r2, [pc, #88]	@ (800a07c <xTaskRemoveFromEventList+0xb8>)
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a02a:	4613      	mov	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4a13      	ldr	r2, [pc, #76]	@ (800a080 <xTaskRemoveFromEventList+0xbc>)
 800a034:	441a      	add	r2, r3
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	3304      	adds	r3, #4
 800a03a:	4619      	mov	r1, r3
 800a03c:	4610      	mov	r0, r2
 800a03e:	f7fe fd9e 	bl	8008b7e <vListInsertEnd>
 800a042:	e005      	b.n	800a050 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	3318      	adds	r3, #24
 800a048:	4619      	mov	r1, r3
 800a04a:	480e      	ldr	r0, [pc, #56]	@ (800a084 <xTaskRemoveFromEventList+0xc0>)
 800a04c:	f7fe fd97 	bl	8008b7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a054:	4b0c      	ldr	r3, [pc, #48]	@ (800a088 <xTaskRemoveFromEventList+0xc4>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d905      	bls.n	800a06a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a05e:	2301      	movs	r3, #1
 800a060:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a062:	4b0a      	ldr	r3, [pc, #40]	@ (800a08c <xTaskRemoveFromEventList+0xc8>)
 800a064:	2201      	movs	r2, #1
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	e001      	b.n	800a06e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800a06a:	2300      	movs	r3, #0
 800a06c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a06e:	697b      	ldr	r3, [r7, #20]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	200016b4 	.word	0x200016b4
 800a07c:	20001694 	.word	0x20001694
 800a080:	200011bc 	.word	0x200011bc
 800a084:	2000164c 	.word	0x2000164c
 800a088:	200011b8 	.word	0x200011b8
 800a08c:	200016a0 	.word	0x200016a0

0800a090 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a098:	4b06      	ldr	r3, [pc, #24]	@ (800a0b4 <vTaskInternalSetTimeOutState+0x24>)
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0a0:	4b05      	ldr	r3, [pc, #20]	@ (800a0b8 <vTaskInternalSetTimeOutState+0x28>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	605a      	str	r2, [r3, #4]
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	200016a4 	.word	0x200016a4
 800a0b8:	20001690 	.word	0x20001690

0800a0bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10d      	bne.n	800a0e8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d0:	b672      	cpsid	i
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	b662      	cpsie	i
 800a0e0:	613b      	str	r3, [r7, #16]
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10d      	bne.n	800a10a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f2:	b672      	cpsid	i
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	b662      	cpsie	i
 800a102:	60fb      	str	r3, [r7, #12]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800a10a:	f000 fe7f 	bl	800ae0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a10e:	4b1d      	ldr	r3, [pc, #116]	@ (800a184 <xTaskCheckForTimeOut+0xc8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d102      	bne.n	800a12e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a128:	2300      	movs	r3, #0
 800a12a:	61fb      	str	r3, [r7, #28]
 800a12c:	e023      	b.n	800a176 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4b15      	ldr	r3, [pc, #84]	@ (800a188 <xTaskCheckForTimeOut+0xcc>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d007      	beq.n	800a14a <xTaskCheckForTimeOut+0x8e>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	429a      	cmp	r2, r3
 800a142:	d302      	bcc.n	800a14a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a144:	2301      	movs	r3, #1
 800a146:	61fb      	str	r3, [r7, #28]
 800a148:	e015      	b.n	800a176 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	429a      	cmp	r2, r3
 800a152:	d20b      	bcs.n	800a16c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	1ad2      	subs	r2, r2, r3
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff ff95 	bl	800a090 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a166:	2300      	movs	r3, #0
 800a168:	61fb      	str	r3, [r7, #28]
 800a16a:	e004      	b.n	800a176 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2200      	movs	r2, #0
 800a170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a172:	2301      	movs	r3, #1
 800a174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a176:	f000 fe7f 	bl	800ae78 <vPortExitCritical>

	return xReturn;
 800a17a:	69fb      	ldr	r3, [r7, #28]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20001690 	.word	0x20001690
 800a188:	200016a4 	.word	0x200016a4

0800a18c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a190:	4b03      	ldr	r3, [pc, #12]	@ (800a1a0 <vTaskMissedYield+0x14>)
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]
}
 800a196:	bf00      	nop
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	200016a0 	.word	0x200016a0

0800a1a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1ac:	f000 f852 	bl	800a254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1b0:	4b06      	ldr	r3, [pc, #24]	@ (800a1cc <prvIdleTask+0x28>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d9f9      	bls.n	800a1ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1b8:	4b05      	ldr	r3, [pc, #20]	@ (800a1d0 <prvIdleTask+0x2c>)
 800a1ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1c8:	e7f0      	b.n	800a1ac <prvIdleTask+0x8>
 800a1ca:	bf00      	nop
 800a1cc:	200011bc 	.word	0x200011bc
 800a1d0:	e000ed04 	.word	0xe000ed04

0800a1d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1da:	2300      	movs	r3, #0
 800a1dc:	607b      	str	r3, [r7, #4]
 800a1de:	e00c      	b.n	800a1fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4a12      	ldr	r2, [pc, #72]	@ (800a234 <prvInitialiseTaskLists+0x60>)
 800a1ec:	4413      	add	r3, r2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fc98 	bl	8008b24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	607b      	str	r3, [r7, #4]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b37      	cmp	r3, #55	@ 0x37
 800a1fe:	d9ef      	bls.n	800a1e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a200:	480d      	ldr	r0, [pc, #52]	@ (800a238 <prvInitialiseTaskLists+0x64>)
 800a202:	f7fe fc8f 	bl	8008b24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a206:	480d      	ldr	r0, [pc, #52]	@ (800a23c <prvInitialiseTaskLists+0x68>)
 800a208:	f7fe fc8c 	bl	8008b24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a20c:	480c      	ldr	r0, [pc, #48]	@ (800a240 <prvInitialiseTaskLists+0x6c>)
 800a20e:	f7fe fc89 	bl	8008b24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a212:	480c      	ldr	r0, [pc, #48]	@ (800a244 <prvInitialiseTaskLists+0x70>)
 800a214:	f7fe fc86 	bl	8008b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a218:	480b      	ldr	r0, [pc, #44]	@ (800a248 <prvInitialiseTaskLists+0x74>)
 800a21a:	f7fe fc83 	bl	8008b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a21e:	4b0b      	ldr	r3, [pc, #44]	@ (800a24c <prvInitialiseTaskLists+0x78>)
 800a220:	4a05      	ldr	r2, [pc, #20]	@ (800a238 <prvInitialiseTaskLists+0x64>)
 800a222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a224:	4b0a      	ldr	r3, [pc, #40]	@ (800a250 <prvInitialiseTaskLists+0x7c>)
 800a226:	4a05      	ldr	r2, [pc, #20]	@ (800a23c <prvInitialiseTaskLists+0x68>)
 800a228:	601a      	str	r2, [r3, #0]
}
 800a22a:	bf00      	nop
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	200011bc 	.word	0x200011bc
 800a238:	2000161c 	.word	0x2000161c
 800a23c:	20001630 	.word	0x20001630
 800a240:	2000164c 	.word	0x2000164c
 800a244:	20001660 	.word	0x20001660
 800a248:	20001678 	.word	0x20001678
 800a24c:	20001644 	.word	0x20001644
 800a250:	20001648 	.word	0x20001648

0800a254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a25a:	e019      	b.n	800a290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a25c:	f000 fdd6 	bl	800ae0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a260:	4b10      	ldr	r3, [pc, #64]	@ (800a2a4 <prvCheckTasksWaitingTermination+0x50>)
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fe fce3 	bl	8008c38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a272:	4b0d      	ldr	r3, [pc, #52]	@ (800a2a8 <prvCheckTasksWaitingTermination+0x54>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3b01      	subs	r3, #1
 800a278:	4a0b      	ldr	r2, [pc, #44]	@ (800a2a8 <prvCheckTasksWaitingTermination+0x54>)
 800a27a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a27c:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ac <prvCheckTasksWaitingTermination+0x58>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3b01      	subs	r3, #1
 800a282:	4a0a      	ldr	r2, [pc, #40]	@ (800a2ac <prvCheckTasksWaitingTermination+0x58>)
 800a284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a286:	f000 fdf7 	bl	800ae78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f810 	bl	800a2b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a290:	4b06      	ldr	r3, [pc, #24]	@ (800a2ac <prvCheckTasksWaitingTermination+0x58>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e1      	bne.n	800a25c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20001660 	.word	0x20001660
 800a2a8:	2000168c 	.word	0x2000168c
 800a2ac:	20001674 	.word	0x20001674

0800a2b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d108      	bne.n	800a2d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 ff9c 	bl	800b204 <vPortFree>
				vPortFree( pxTCB );
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 ff99 	bl	800b204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2d2:	e01b      	b.n	800a30c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d103      	bne.n	800a2e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 ff90 	bl	800b204 <vPortFree>
	}
 800a2e4:	e012      	b.n	800a30c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d00d      	beq.n	800a30c <prvDeleteTCB+0x5c>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	b672      	cpsid	i
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	b662      	cpsie	i
 800a304:	60fb      	str	r3, [r7, #12]
}
 800a306:	bf00      	nop
 800a308:	bf00      	nop
 800a30a:	e7fd      	b.n	800a308 <prvDeleteTCB+0x58>
	}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a31a:	4b0c      	ldr	r3, [pc, #48]	@ (800a34c <prvResetNextTaskUnblockTime+0x38>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d104      	bne.n	800a32e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a324:	4b0a      	ldr	r3, [pc, #40]	@ (800a350 <prvResetNextTaskUnblockTime+0x3c>)
 800a326:	f04f 32ff 	mov.w	r2, #4294967295
 800a32a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a32c:	e008      	b.n	800a340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a32e:	4b07      	ldr	r3, [pc, #28]	@ (800a34c <prvResetNextTaskUnblockTime+0x38>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	4a04      	ldr	r2, [pc, #16]	@ (800a350 <prvResetNextTaskUnblockTime+0x3c>)
 800a33e:	6013      	str	r3, [r2, #0]
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	20001644 	.word	0x20001644
 800a350:	200016ac 	.word	0x200016ac

0800a354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a35a:	4b0b      	ldr	r3, [pc, #44]	@ (800a388 <xTaskGetSchedulerState+0x34>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d102      	bne.n	800a368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a362:	2301      	movs	r3, #1
 800a364:	607b      	str	r3, [r7, #4]
 800a366:	e008      	b.n	800a37a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a368:	4b08      	ldr	r3, [pc, #32]	@ (800a38c <xTaskGetSchedulerState+0x38>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a370:	2302      	movs	r3, #2
 800a372:	607b      	str	r3, [r7, #4]
 800a374:	e001      	b.n	800a37a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a376:	2300      	movs	r3, #0
 800a378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a37a:	687b      	ldr	r3, [r7, #4]
	}
 800a37c:	4618      	mov	r0, r3
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	20001698 	.word	0x20001698
 800a38c:	200016b4 	.word	0x200016b4

0800a390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d05c      	beq.n	800a460 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3a6:	4b31      	ldr	r3, [pc, #196]	@ (800a46c <xTaskPriorityDisinherit+0xdc>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d00d      	beq.n	800a3cc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b4:	b672      	cpsid	i
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	b662      	cpsie	i
 800a3c4:	60fb      	str	r3, [r7, #12]
}
 800a3c6:	bf00      	nop
 800a3c8:	bf00      	nop
 800a3ca:	e7fd      	b.n	800a3c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10d      	bne.n	800a3f0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d8:	b672      	cpsid	i
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	b662      	cpsie	i
 800a3e8:	60bb      	str	r3, [r7, #8]
}
 800a3ea:	bf00      	nop
 800a3ec:	bf00      	nop
 800a3ee:	e7fd      	b.n	800a3ec <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f4:	1e5a      	subs	r2, r3, #1
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a402:	429a      	cmp	r2, r3
 800a404:	d02c      	beq.n	800a460 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d128      	bne.n	800a460 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	3304      	adds	r3, #4
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fc10 	bl	8008c38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a424:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a430:	4b0f      	ldr	r3, [pc, #60]	@ (800a470 <xTaskPriorityDisinherit+0xe0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	429a      	cmp	r2, r3
 800a436:	d903      	bls.n	800a440 <xTaskPriorityDisinherit+0xb0>
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43c:	4a0c      	ldr	r2, [pc, #48]	@ (800a470 <xTaskPriorityDisinherit+0xe0>)
 800a43e:	6013      	str	r3, [r2, #0]
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a444:	4613      	mov	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	4413      	add	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4a09      	ldr	r2, [pc, #36]	@ (800a474 <xTaskPriorityDisinherit+0xe4>)
 800a44e:	441a      	add	r2, r3
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	3304      	adds	r3, #4
 800a454:	4619      	mov	r1, r3
 800a456:	4610      	mov	r0, r2
 800a458:	f7fe fb91 	bl	8008b7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a45c:	2301      	movs	r3, #1
 800a45e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a460:	697b      	ldr	r3, [r7, #20]
	}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	200011b8 	.word	0x200011b8
 800a470:	20001694 	.word	0x20001694
 800a474:	200011bc 	.word	0x200011bc

0800a478 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a482:	4b21      	ldr	r3, [pc, #132]	@ (800a508 <prvAddCurrentTaskToDelayedList+0x90>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a488:	4b20      	ldr	r3, [pc, #128]	@ (800a50c <prvAddCurrentTaskToDelayedList+0x94>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3304      	adds	r3, #4
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fbd2 	bl	8008c38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49a:	d10a      	bne.n	800a4b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d007      	beq.n	800a4b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a50c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	4819      	ldr	r0, [pc, #100]	@ (800a510 <prvAddCurrentTaskToDelayedList+0x98>)
 800a4ac:	f7fe fb67 	bl	8008b7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4b0:	e026      	b.n	800a500 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a4ba:	4b14      	ldr	r3, [pc, #80]	@ (800a50c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d209      	bcs.n	800a4de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4ca:	4b12      	ldr	r3, [pc, #72]	@ (800a514 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a50c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3304      	adds	r3, #4
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	f7fe fb75 	bl	8008bc6 <vListInsert>
}
 800a4dc:	e010      	b.n	800a500 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4de:	4b0e      	ldr	r3, [pc, #56]	@ (800a518 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	f7fe fb6b 	bl	8008bc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d202      	bcs.n	800a500 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4fa:	4a08      	ldr	r2, [pc, #32]	@ (800a51c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	6013      	str	r3, [r2, #0]
}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20001690 	.word	0x20001690
 800a50c:	200011b8 	.word	0x200011b8
 800a510:	20001678 	.word	0x20001678
 800a514:	20001648 	.word	0x20001648
 800a518:	20001644 	.word	0x20001644
 800a51c:	200016ac 	.word	0x200016ac

0800a520 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08a      	sub	sp, #40	@ 0x28
 800a524:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a526:	2300      	movs	r3, #0
 800a528:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a52a:	f000 fb21 	bl	800ab70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a52e:	4b1e      	ldr	r3, [pc, #120]	@ (800a5a8 <xTimerCreateTimerTask+0x88>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d021      	beq.n	800a57a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a536:	2300      	movs	r3, #0
 800a538:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a53e:	1d3a      	adds	r2, r7, #4
 800a540:	f107 0108 	add.w	r1, r7, #8
 800a544:	f107 030c 	add.w	r3, r7, #12
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fe fad1 	bl	8008af0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	9202      	str	r2, [sp, #8]
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	2302      	movs	r3, #2
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	2300      	movs	r3, #0
 800a55e:	460a      	mov	r2, r1
 800a560:	4912      	ldr	r1, [pc, #72]	@ (800a5ac <xTimerCreateTimerTask+0x8c>)
 800a562:	4813      	ldr	r0, [pc, #76]	@ (800a5b0 <xTimerCreateTimerTask+0x90>)
 800a564:	f7ff f8ac 	bl	80096c0 <xTaskCreateStatic>
 800a568:	4603      	mov	r3, r0
 800a56a:	4a12      	ldr	r2, [pc, #72]	@ (800a5b4 <xTimerCreateTimerTask+0x94>)
 800a56c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a56e:	4b11      	ldr	r3, [pc, #68]	@ (800a5b4 <xTimerCreateTimerTask+0x94>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a576:	2301      	movs	r3, #1
 800a578:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10d      	bne.n	800a59c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a584:	b672      	cpsid	i
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	b662      	cpsie	i
 800a594:	613b      	str	r3, [r7, #16]
}
 800a596:	bf00      	nop
 800a598:	bf00      	nop
 800a59a:	e7fd      	b.n	800a598 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a59c:	697b      	ldr	r3, [r7, #20]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	200016e8 	.word	0x200016e8
 800a5ac:	0800b7c4 	.word	0x0800b7c4
 800a5b0:	0800a6f9 	.word	0x0800a6f9
 800a5b4:	200016ec 	.word	0x200016ec

0800a5b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	@ 0x28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10d      	bne.n	800a5ec <xTimerGenericCommand+0x34>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d4:	b672      	cpsid	i
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	b662      	cpsie	i
 800a5e4:	623b      	str	r3, [r7, #32]
}
 800a5e6:	bf00      	nop
 800a5e8:	bf00      	nop
 800a5ea:	e7fd      	b.n	800a5e8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5ec:	4b19      	ldr	r3, [pc, #100]	@ (800a654 <xTimerGenericCommand+0x9c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d02a      	beq.n	800a64a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2b05      	cmp	r3, #5
 800a604:	dc18      	bgt.n	800a638 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a606:	f7ff fea5 	bl	800a354 <xTaskGetSchedulerState>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d109      	bne.n	800a624 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a610:	4b10      	ldr	r3, [pc, #64]	@ (800a654 <xTimerGenericCommand+0x9c>)
 800a612:	6818      	ldr	r0, [r3, #0]
 800a614:	f107 0110 	add.w	r1, r7, #16
 800a618:	2300      	movs	r3, #0
 800a61a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a61c:	f7fe fc4c 	bl	8008eb8 <xQueueGenericSend>
 800a620:	6278      	str	r0, [r7, #36]	@ 0x24
 800a622:	e012      	b.n	800a64a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a624:	4b0b      	ldr	r3, [pc, #44]	@ (800a654 <xTimerGenericCommand+0x9c>)
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	f107 0110 	add.w	r1, r7, #16
 800a62c:	2300      	movs	r3, #0
 800a62e:	2200      	movs	r2, #0
 800a630:	f7fe fc42 	bl	8008eb8 <xQueueGenericSend>
 800a634:	6278      	str	r0, [r7, #36]	@ 0x24
 800a636:	e008      	b.n	800a64a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a638:	4b06      	ldr	r3, [pc, #24]	@ (800a654 <xTimerGenericCommand+0x9c>)
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	f107 0110 	add.w	r1, r7, #16
 800a640:	2300      	movs	r3, #0
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	f7fe fd42 	bl	80090cc <xQueueGenericSendFromISR>
 800a648:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3728      	adds	r7, #40	@ 0x28
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	200016e8 	.word	0x200016e8

0800a658 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a662:	4b24      	ldr	r3, [pc, #144]	@ (800a6f4 <prvProcessExpiredTimer+0x9c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	3304      	adds	r3, #4
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe fae1 	bl	8008c38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a67c:	f003 0304 	and.w	r3, r3, #4
 800a680:	2b00      	cmp	r3, #0
 800a682:	d025      	beq.n	800a6d0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	699a      	ldr	r2, [r3, #24]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	18d1      	adds	r1, r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	6978      	ldr	r0, [r7, #20]
 800a692:	f000 f8d7 	bl	800a844 <prvInsertTimerInActiveList>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d022      	beq.n	800a6e2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a69c:	2300      	movs	r3, #0
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	6978      	ldr	r0, [r7, #20]
 800a6a8:	f7ff ff86 	bl	800a5b8 <xTimerGenericCommand>
 800a6ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d116      	bne.n	800a6e2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b8:	b672      	cpsid	i
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	b662      	cpsie	i
 800a6c8:	60fb      	str	r3, [r7, #12]
}
 800a6ca:	bf00      	nop
 800a6cc:	bf00      	nop
 800a6ce:	e7fd      	b.n	800a6cc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6d6:	f023 0301 	bic.w	r3, r3, #1
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	6978      	ldr	r0, [r7, #20]
 800a6e8:	4798      	blx	r3
}
 800a6ea:	bf00      	nop
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	200016e0 	.word	0x200016e0

0800a6f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a700:	f107 0308 	add.w	r3, r7, #8
 800a704:	4618      	mov	r0, r3
 800a706:	f000 f859 	bl	800a7bc <prvGetNextExpireTime>
 800a70a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	4619      	mov	r1, r3
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 f805 	bl	800a720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a716:	f000 f8d7 	bl	800a8c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a71a:	bf00      	nop
 800a71c:	e7f0      	b.n	800a700 <prvTimerTask+0x8>
	...

0800a720 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a72a:	f7ff fa1b 	bl	8009b64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a72e:	f107 0308 	add.w	r3, r7, #8
 800a732:	4618      	mov	r0, r3
 800a734:	f000 f866 	bl	800a804 <prvSampleTimeNow>
 800a738:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d130      	bne.n	800a7a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10a      	bne.n	800a75c <prvProcessTimerOrBlockTask+0x3c>
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d806      	bhi.n	800a75c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a74e:	f7ff fa17 	bl	8009b80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a752:	68f9      	ldr	r1, [r7, #12]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff ff7f 	bl	800a658 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a75a:	e024      	b.n	800a7a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d008      	beq.n	800a774 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a762:	4b13      	ldr	r3, [pc, #76]	@ (800a7b0 <prvProcessTimerOrBlockTask+0x90>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <prvProcessTimerOrBlockTask+0x50>
 800a76c:	2301      	movs	r3, #1
 800a76e:	e000      	b.n	800a772 <prvProcessTimerOrBlockTask+0x52>
 800a770:	2300      	movs	r3, #0
 800a772:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a774:	4b0f      	ldr	r3, [pc, #60]	@ (800a7b4 <prvProcessTimerOrBlockTask+0x94>)
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	4619      	mov	r1, r3
 800a782:	f7fe ff69 	bl	8009658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a786:	f7ff f9fb 	bl	8009b80 <xTaskResumeAll>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a790:	4b09      	ldr	r3, [pc, #36]	@ (800a7b8 <prvProcessTimerOrBlockTask+0x98>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
}
 800a7a0:	e001      	b.n	800a7a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a7a2:	f7ff f9ed 	bl	8009b80 <xTaskResumeAll>
}
 800a7a6:	bf00      	nop
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200016e4 	.word	0x200016e4
 800a7b4:	200016e8 	.word	0x200016e8
 800a7b8:	e000ed04 	.word	0xe000ed04

0800a7bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a800 <prvGetNextExpireTime+0x44>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <prvGetNextExpireTime+0x16>
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	e000      	b.n	800a7d4 <prvGetNextExpireTime+0x18>
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d105      	bne.n	800a7ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7e0:	4b07      	ldr	r3, [pc, #28]	@ (800a800 <prvGetNextExpireTime+0x44>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	e001      	b.n	800a7f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	200016e0 	.word	0x200016e0

0800a804 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a80c:	f7ff fa58 	bl	8009cc0 <xTaskGetTickCount>
 800a810:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a812:	4b0b      	ldr	r3, [pc, #44]	@ (800a840 <prvSampleTimeNow+0x3c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d205      	bcs.n	800a828 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a81c:	f000 f940 	bl	800aaa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	e002      	b.n	800a82e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a82e:	4a04      	ldr	r2, [pc, #16]	@ (800a840 <prvSampleTimeNow+0x3c>)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a834:	68fb      	ldr	r3, [r7, #12]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	200016f0 	.word	0x200016f0

0800a844 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	429a      	cmp	r2, r3
 800a868:	d812      	bhi.n	800a890 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	429a      	cmp	r2, r3
 800a876:	d302      	bcc.n	800a87e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a878:	2301      	movs	r3, #1
 800a87a:	617b      	str	r3, [r7, #20]
 800a87c:	e01b      	b.n	800a8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a87e:	4b10      	ldr	r3, [pc, #64]	@ (800a8c0 <prvInsertTimerInActiveList+0x7c>)
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3304      	adds	r3, #4
 800a886:	4619      	mov	r1, r3
 800a888:	4610      	mov	r0, r2
 800a88a:	f7fe f99c 	bl	8008bc6 <vListInsert>
 800a88e:	e012      	b.n	800a8b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	429a      	cmp	r2, r3
 800a896:	d206      	bcs.n	800a8a6 <prvInsertTimerInActiveList+0x62>
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d302      	bcc.n	800a8a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e007      	b.n	800a8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8a6:	4b07      	ldr	r3, [pc, #28]	@ (800a8c4 <prvInsertTimerInActiveList+0x80>)
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	f7fe f988 	bl	8008bc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8b6:	697b      	ldr	r3, [r7, #20]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	200016e4 	.word	0x200016e4
 800a8c4:	200016e0 	.word	0x200016e0

0800a8c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08e      	sub	sp, #56	@ 0x38
 800a8cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8ce:	e0d4      	b.n	800aa7a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	da1b      	bge.n	800a90e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a8d6:	1d3b      	adds	r3, r7, #4
 800a8d8:	3304      	adds	r3, #4
 800a8da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10d      	bne.n	800a8fe <prvProcessReceivedCommands+0x36>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e6:	b672      	cpsid	i
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	b662      	cpsie	i
 800a8f6:	61fb      	str	r3, [r7, #28]
}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	e7fd      	b.n	800a8fa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a904:	6850      	ldr	r0, [r2, #4]
 800a906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a908:	6892      	ldr	r2, [r2, #8]
 800a90a:	4611      	mov	r1, r2
 800a90c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f2c0 80b2 	blt.w	800aa7a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a924:	3304      	adds	r3, #4
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe f986 	bl	8008c38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a92c:	463b      	mov	r3, r7
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff ff68 	bl	800a804 <prvSampleTimeNow>
 800a934:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b09      	cmp	r3, #9
 800a93a:	f200 809b 	bhi.w	800aa74 <prvProcessReceivedCommands+0x1ac>
 800a93e:	a201      	add	r2, pc, #4	@ (adr r2, 800a944 <prvProcessReceivedCommands+0x7c>)
 800a940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a944:	0800a96d 	.word	0x0800a96d
 800a948:	0800a96d 	.word	0x0800a96d
 800a94c:	0800a96d 	.word	0x0800a96d
 800a950:	0800a9e7 	.word	0x0800a9e7
 800a954:	0800a9fb 	.word	0x0800a9fb
 800a958:	0800aa4b 	.word	0x0800aa4b
 800a95c:	0800a96d 	.word	0x0800a96d
 800a960:	0800a96d 	.word	0x0800a96d
 800a964:	0800a9e7 	.word	0x0800a9e7
 800a968:	0800a9fb 	.word	0x0800a9fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a972:	f043 0301 	orr.w	r3, r3, #1
 800a976:	b2da      	uxtb	r2, r3
 800a978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	18d1      	adds	r1, r2, r3
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a98a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a98c:	f7ff ff5a 	bl	800a844 <prvInsertTimerInActiveList>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d070      	beq.n	800aa78 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a99c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d065      	beq.n	800aa78 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	441a      	add	r2, r3
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9be:	f7ff fdfb 	bl	800a5b8 <xTimerGenericCommand>
 800a9c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d156      	bne.n	800aa78 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ce:	b672      	cpsid	i
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	b662      	cpsie	i
 800a9de:	61bb      	str	r3, [r7, #24]
}
 800a9e0:	bf00      	nop
 800a9e2:	bf00      	nop
 800a9e4:	e7fd      	b.n	800a9e2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9ec:	f023 0301 	bic.w	r3, r3, #1
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a9f8:	e03f      	b.n	800aa7a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa00:	f043 0301 	orr.w	r3, r3, #1
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10d      	bne.n	800aa36 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1e:	b672      	cpsid	i
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	b662      	cpsie	i
 800aa2e:	617b      	str	r3, [r7, #20]
}
 800aa30:	bf00      	nop
 800aa32:	bf00      	nop
 800aa34:	e7fd      	b.n	800aa32 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa38:	699a      	ldr	r2, [r3, #24]
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3c:	18d1      	adds	r1, r2, r3
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa44:	f7ff fefe 	bl	800a844 <prvInsertTimerInActiveList>
					break;
 800aa48:	e017      	b.n	800aa7a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa50:	f003 0302 	and.w	r3, r3, #2
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d103      	bne.n	800aa60 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800aa58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa5a:	f000 fbd3 	bl	800b204 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa5e:	e00c      	b.n	800aa7a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa66:	f023 0301 	bic.w	r3, r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aa72:	e002      	b.n	800aa7a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800aa74:	bf00      	nop
 800aa76:	e000      	b.n	800aa7a <prvProcessReceivedCommands+0x1b2>
					break;
 800aa78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa7a:	4b08      	ldr	r3, [pc, #32]	@ (800aa9c <prvProcessReceivedCommands+0x1d4>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	1d39      	adds	r1, r7, #4
 800aa80:	2200      	movs	r2, #0
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fe fbc6 	bl	8009214 <xQueueReceive>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f47f af20 	bne.w	800a8d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aa90:	bf00      	nop
 800aa92:	bf00      	nop
 800aa94:	3730      	adds	r7, #48	@ 0x30
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	200016e8 	.word	0x200016e8

0800aaa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aaa6:	e04b      	b.n	800ab40 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaa8:	4b2f      	ldr	r3, [pc, #188]	@ (800ab68 <prvSwitchTimerLists+0xc8>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab2:	4b2d      	ldr	r3, [pc, #180]	@ (800ab68 <prvSwitchTimerLists+0xc8>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe f8b9 	bl	8008c38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d031      	beq.n	800ab40 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	4413      	add	r3, r2
 800aae4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d90e      	bls.n	800ab0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aafa:	4b1b      	ldr	r3, [pc, #108]	@ (800ab68 <prvSwitchTimerLists+0xc8>)
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3304      	adds	r3, #4
 800ab02:	4619      	mov	r1, r3
 800ab04:	4610      	mov	r0, r2
 800ab06:	f7fe f85e 	bl	8008bc6 <vListInsert>
 800ab0a:	e019      	b.n	800ab40 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	2300      	movs	r3, #0
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	2100      	movs	r1, #0
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f7ff fd4e 	bl	800a5b8 <xTimerGenericCommand>
 800ab1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10d      	bne.n	800ab40 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab28:	b672      	cpsid	i
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	b662      	cpsie	i
 800ab38:	603b      	str	r3, [r7, #0]
}
 800ab3a:	bf00      	nop
 800ab3c:	bf00      	nop
 800ab3e:	e7fd      	b.n	800ab3c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab40:	4b09      	ldr	r3, [pc, #36]	@ (800ab68 <prvSwitchTimerLists+0xc8>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1ae      	bne.n	800aaa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab4a:	4b07      	ldr	r3, [pc, #28]	@ (800ab68 <prvSwitchTimerLists+0xc8>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab50:	4b06      	ldr	r3, [pc, #24]	@ (800ab6c <prvSwitchTimerLists+0xcc>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a04      	ldr	r2, [pc, #16]	@ (800ab68 <prvSwitchTimerLists+0xc8>)
 800ab56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab58:	4a04      	ldr	r2, [pc, #16]	@ (800ab6c <prvSwitchTimerLists+0xcc>)
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	6013      	str	r3, [r2, #0]
}
 800ab5e:	bf00      	nop
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	200016e0 	.word	0x200016e0
 800ab6c:	200016e4 	.word	0x200016e4

0800ab70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab76:	f000 f949 	bl	800ae0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab7a:	4b15      	ldr	r3, [pc, #84]	@ (800abd0 <prvCheckForValidListAndQueue+0x60>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d120      	bne.n	800abc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab82:	4814      	ldr	r0, [pc, #80]	@ (800abd4 <prvCheckForValidListAndQueue+0x64>)
 800ab84:	f7fd ffce 	bl	8008b24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab88:	4813      	ldr	r0, [pc, #76]	@ (800abd8 <prvCheckForValidListAndQueue+0x68>)
 800ab8a:	f7fd ffcb 	bl	8008b24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab8e:	4b13      	ldr	r3, [pc, #76]	@ (800abdc <prvCheckForValidListAndQueue+0x6c>)
 800ab90:	4a10      	ldr	r2, [pc, #64]	@ (800abd4 <prvCheckForValidListAndQueue+0x64>)
 800ab92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab94:	4b12      	ldr	r3, [pc, #72]	@ (800abe0 <prvCheckForValidListAndQueue+0x70>)
 800ab96:	4a10      	ldr	r2, [pc, #64]	@ (800abd8 <prvCheckForValidListAndQueue+0x68>)
 800ab98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	4b11      	ldr	r3, [pc, #68]	@ (800abe4 <prvCheckForValidListAndQueue+0x74>)
 800aba0:	4a11      	ldr	r2, [pc, #68]	@ (800abe8 <prvCheckForValidListAndQueue+0x78>)
 800aba2:	2110      	movs	r1, #16
 800aba4:	200a      	movs	r0, #10
 800aba6:	f7fe f8dd 	bl	8008d64 <xQueueGenericCreateStatic>
 800abaa:	4603      	mov	r3, r0
 800abac:	4a08      	ldr	r2, [pc, #32]	@ (800abd0 <prvCheckForValidListAndQueue+0x60>)
 800abae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800abb0:	4b07      	ldr	r3, [pc, #28]	@ (800abd0 <prvCheckForValidListAndQueue+0x60>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d005      	beq.n	800abc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800abb8:	4b05      	ldr	r3, [pc, #20]	@ (800abd0 <prvCheckForValidListAndQueue+0x60>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	490b      	ldr	r1, [pc, #44]	@ (800abec <prvCheckForValidListAndQueue+0x7c>)
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fd20 	bl	8009604 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abc4:	f000 f958 	bl	800ae78 <vPortExitCritical>
}
 800abc8:	bf00      	nop
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	200016e8 	.word	0x200016e8
 800abd4:	200016b8 	.word	0x200016b8
 800abd8:	200016cc 	.word	0x200016cc
 800abdc:	200016e0 	.word	0x200016e0
 800abe0:	200016e4 	.word	0x200016e4
 800abe4:	20001794 	.word	0x20001794
 800abe8:	200016f4 	.word	0x200016f4
 800abec:	0800b7cc 	.word	0x0800b7cc

0800abf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3b04      	subs	r3, #4
 800ac00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ac08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3b04      	subs	r3, #4
 800ac0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f023 0201 	bic.w	r2, r3, #1
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	3b04      	subs	r3, #4
 800ac1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac20:	4a0c      	ldr	r2, [pc, #48]	@ (800ac54 <pxPortInitialiseStack+0x64>)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3b14      	subs	r3, #20
 800ac2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3b04      	subs	r3, #4
 800ac36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f06f 0202 	mvn.w	r2, #2
 800ac3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3b20      	subs	r3, #32
 800ac44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac46:	68fb      	ldr	r3, [r7, #12]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	0800ac59 	.word	0x0800ac59

0800ac58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac62:	4b15      	ldr	r3, [pc, #84]	@ (800acb8 <prvTaskExitError+0x60>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6a:	d00d      	beq.n	800ac88 <prvTaskExitError+0x30>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac70:	b672      	cpsid	i
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	b662      	cpsie	i
 800ac80:	60fb      	str	r3, [r7, #12]
}
 800ac82:	bf00      	nop
 800ac84:	bf00      	nop
 800ac86:	e7fd      	b.n	800ac84 <prvTaskExitError+0x2c>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac8c:	b672      	cpsid	i
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	b662      	cpsie	i
 800ac9c:	60bb      	str	r3, [r7, #8]
}
 800ac9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aca0:	bf00      	nop
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0fc      	beq.n	800aca2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aca8:	bf00      	nop
 800acaa:	bf00      	nop
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	2000000c 	.word	0x2000000c
 800acbc:	00000000 	.word	0x00000000

0800acc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800acc0:	4b07      	ldr	r3, [pc, #28]	@ (800ace0 <pxCurrentTCBConst2>)
 800acc2:	6819      	ldr	r1, [r3, #0]
 800acc4:	6808      	ldr	r0, [r1, #0]
 800acc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acca:	f380 8809 	msr	PSP, r0
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f04f 0000 	mov.w	r0, #0
 800acd6:	f380 8811 	msr	BASEPRI, r0
 800acda:	4770      	bx	lr
 800acdc:	f3af 8000 	nop.w

0800ace0 <pxCurrentTCBConst2>:
 800ace0:	200011b8 	.word	0x200011b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop

0800ace8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ace8:	4808      	ldr	r0, [pc, #32]	@ (800ad0c <prvPortStartFirstTask+0x24>)
 800acea:	6800      	ldr	r0, [r0, #0]
 800acec:	6800      	ldr	r0, [r0, #0]
 800acee:	f380 8808 	msr	MSP, r0
 800acf2:	f04f 0000 	mov.w	r0, #0
 800acf6:	f380 8814 	msr	CONTROL, r0
 800acfa:	b662      	cpsie	i
 800acfc:	b661      	cpsie	f
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	df00      	svc	0
 800ad08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad0a:	bf00      	nop
 800ad0c:	e000ed08 	.word	0xe000ed08

0800ad10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad16:	4b37      	ldr	r3, [pc, #220]	@ (800adf4 <xPortStartScheduler+0xe4>)
 800ad18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	22ff      	movs	r2, #255	@ 0xff
 800ad26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	4b2f      	ldr	r3, [pc, #188]	@ (800adf8 <xPortStartScheduler+0xe8>)
 800ad3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad3e:	4b2f      	ldr	r3, [pc, #188]	@ (800adfc <xPortStartScheduler+0xec>)
 800ad40:	2207      	movs	r2, #7
 800ad42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad44:	e009      	b.n	800ad5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ad46:	4b2d      	ldr	r3, [pc, #180]	@ (800adfc <xPortStartScheduler+0xec>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	4a2b      	ldr	r2, [pc, #172]	@ (800adfc <xPortStartScheduler+0xec>)
 800ad4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad62:	2b80      	cmp	r3, #128	@ 0x80
 800ad64:	d0ef      	beq.n	800ad46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad66:	4b25      	ldr	r3, [pc, #148]	@ (800adfc <xPortStartScheduler+0xec>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f1c3 0307 	rsb	r3, r3, #7
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	d00d      	beq.n	800ad8e <xPortStartScheduler+0x7e>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad76:	b672      	cpsid	i
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	b662      	cpsie	i
 800ad86:	60bb      	str	r3, [r7, #8]
}
 800ad88:	bf00      	nop
 800ad8a:	bf00      	nop
 800ad8c:	e7fd      	b.n	800ad8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad8e:	4b1b      	ldr	r3, [pc, #108]	@ (800adfc <xPortStartScheduler+0xec>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	4a19      	ldr	r2, [pc, #100]	@ (800adfc <xPortStartScheduler+0xec>)
 800ad96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad98:	4b18      	ldr	r3, [pc, #96]	@ (800adfc <xPortStartScheduler+0xec>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ada0:	4a16      	ldr	r2, [pc, #88]	@ (800adfc <xPortStartScheduler+0xec>)
 800ada2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800adac:	4b14      	ldr	r3, [pc, #80]	@ (800ae00 <xPortStartScheduler+0xf0>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a13      	ldr	r2, [pc, #76]	@ (800ae00 <xPortStartScheduler+0xf0>)
 800adb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800adb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800adb8:	4b11      	ldr	r3, [pc, #68]	@ (800ae00 <xPortStartScheduler+0xf0>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a10      	ldr	r2, [pc, #64]	@ (800ae00 <xPortStartScheduler+0xf0>)
 800adbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800adc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adc4:	f000 f8dc 	bl	800af80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800adc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ae04 <xPortStartScheduler+0xf4>)
 800adca:	2200      	movs	r2, #0
 800adcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800adce:	f000 f8fb 	bl	800afc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800add2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae08 <xPortStartScheduler+0xf8>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a0c      	ldr	r2, [pc, #48]	@ (800ae08 <xPortStartScheduler+0xf8>)
 800add8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800addc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800adde:	f7ff ff83 	bl	800ace8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ade2:	f7ff f839 	bl	8009e58 <vTaskSwitchContext>
	prvTaskExitError();
 800ade6:	f7ff ff37 	bl	800ac58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	e000e400 	.word	0xe000e400
 800adf8:	200017e4 	.word	0x200017e4
 800adfc:	200017e8 	.word	0x200017e8
 800ae00:	e000ed20 	.word	0xe000ed20
 800ae04:	2000000c 	.word	0x2000000c
 800ae08:	e000ef34 	.word	0xe000ef34

0800ae0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae16:	b672      	cpsid	i
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	b662      	cpsie	i
 800ae26:	607b      	str	r3, [r7, #4]
}
 800ae28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae2a:	4b11      	ldr	r3, [pc, #68]	@ (800ae70 <vPortEnterCritical+0x64>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	4a0f      	ldr	r2, [pc, #60]	@ (800ae70 <vPortEnterCritical+0x64>)
 800ae32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae34:	4b0e      	ldr	r3, [pc, #56]	@ (800ae70 <vPortEnterCritical+0x64>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d112      	bne.n	800ae62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ae74 <vPortEnterCritical+0x68>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00d      	beq.n	800ae62 <vPortEnterCritical+0x56>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4a:	b672      	cpsid	i
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	b662      	cpsie	i
 800ae5a:	603b      	str	r3, [r7, #0]
}
 800ae5c:	bf00      	nop
 800ae5e:	bf00      	nop
 800ae60:	e7fd      	b.n	800ae5e <vPortEnterCritical+0x52>
	}
}
 800ae62:	bf00      	nop
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	2000000c 	.word	0x2000000c
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae7e:	4b13      	ldr	r3, [pc, #76]	@ (800aecc <vPortExitCritical+0x54>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10d      	bne.n	800aea2 <vPortExitCritical+0x2a>
	__asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8a:	b672      	cpsid	i
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	b662      	cpsie	i
 800ae9a:	607b      	str	r3, [r7, #4]
}
 800ae9c:	bf00      	nop
 800ae9e:	bf00      	nop
 800aea0:	e7fd      	b.n	800ae9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800aea2:	4b0a      	ldr	r3, [pc, #40]	@ (800aecc <vPortExitCritical+0x54>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	4a08      	ldr	r2, [pc, #32]	@ (800aecc <vPortExitCritical+0x54>)
 800aeaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aeac:	4b07      	ldr	r3, [pc, #28]	@ (800aecc <vPortExitCritical+0x54>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d105      	bne.n	800aec0 <vPortExitCritical+0x48>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	f383 8811 	msr	BASEPRI, r3
}
 800aebe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	2000000c 	.word	0x2000000c

0800aed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aed0:	f3ef 8009 	mrs	r0, PSP
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	4b15      	ldr	r3, [pc, #84]	@ (800af30 <pxCurrentTCBConst>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	f01e 0f10 	tst.w	lr, #16
 800aee0:	bf08      	it	eq
 800aee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeea:	6010      	str	r0, [r2, #0]
 800aeec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aef0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aef4:	b672      	cpsid	i
 800aef6:	f380 8811 	msr	BASEPRI, r0
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	b662      	cpsie	i
 800af04:	f7fe ffa8 	bl	8009e58 <vTaskSwitchContext>
 800af08:	f04f 0000 	mov.w	r0, #0
 800af0c:	f380 8811 	msr	BASEPRI, r0
 800af10:	bc09      	pop	{r0, r3}
 800af12:	6819      	ldr	r1, [r3, #0]
 800af14:	6808      	ldr	r0, [r1, #0]
 800af16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1a:	f01e 0f10 	tst.w	lr, #16
 800af1e:	bf08      	it	eq
 800af20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af24:	f380 8809 	msr	PSP, r0
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop

0800af30 <pxCurrentTCBConst>:
 800af30:	200011b8 	.word	0x200011b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop

0800af38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af42:	b672      	cpsid	i
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	b662      	cpsie	i
 800af52:	607b      	str	r3, [r7, #4]
}
 800af54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af56:	f7fe fec3 	bl	8009ce0 <xTaskIncrementTick>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af60:	4b06      	ldr	r3, [pc, #24]	@ (800af7c <xPortSysTickHandler+0x44>)
 800af62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	2300      	movs	r3, #0
 800af6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	f383 8811 	msr	BASEPRI, r3
}
 800af72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	e000ed04 	.word	0xe000ed04

0800af80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af80:	b480      	push	{r7}
 800af82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af84:	4b0b      	ldr	r3, [pc, #44]	@ (800afb4 <vPortSetupTimerInterrupt+0x34>)
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af8a:	4b0b      	ldr	r3, [pc, #44]	@ (800afb8 <vPortSetupTimerInterrupt+0x38>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af90:	4b0a      	ldr	r3, [pc, #40]	@ (800afbc <vPortSetupTimerInterrupt+0x3c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a0a      	ldr	r2, [pc, #40]	@ (800afc0 <vPortSetupTimerInterrupt+0x40>)
 800af96:	fba2 2303 	umull	r2, r3, r2, r3
 800af9a:	099b      	lsrs	r3, r3, #6
 800af9c:	4a09      	ldr	r2, [pc, #36]	@ (800afc4 <vPortSetupTimerInterrupt+0x44>)
 800af9e:	3b01      	subs	r3, #1
 800afa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afa2:	4b04      	ldr	r3, [pc, #16]	@ (800afb4 <vPortSetupTimerInterrupt+0x34>)
 800afa4:	2207      	movs	r2, #7
 800afa6:	601a      	str	r2, [r3, #0]
}
 800afa8:	bf00      	nop
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	e000e010 	.word	0xe000e010
 800afb8:	e000e018 	.word	0xe000e018
 800afbc:	20000000 	.word	0x20000000
 800afc0:	10624dd3 	.word	0x10624dd3
 800afc4:	e000e014 	.word	0xe000e014

0800afc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afc8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800afd8 <vPortEnableVFP+0x10>
 800afcc:	6801      	ldr	r1, [r0, #0]
 800afce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800afd2:	6001      	str	r1, [r0, #0]
 800afd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afd6:	bf00      	nop
 800afd8:	e000ed88 	.word	0xe000ed88

0800afdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afe2:	f3ef 8305 	mrs	r3, IPSR
 800afe6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2b0f      	cmp	r3, #15
 800afec:	d917      	bls.n	800b01e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afee:	4a1a      	ldr	r2, [pc, #104]	@ (800b058 <vPortValidateInterruptPriority+0x7c>)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4413      	add	r3, r2
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aff8:	4b18      	ldr	r3, [pc, #96]	@ (800b05c <vPortValidateInterruptPriority+0x80>)
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	7afa      	ldrb	r2, [r7, #11]
 800affe:	429a      	cmp	r2, r3
 800b000:	d20d      	bcs.n	800b01e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b006:	b672      	cpsid	i
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	b662      	cpsie	i
 800b016:	607b      	str	r3, [r7, #4]
}
 800b018:	bf00      	nop
 800b01a:	bf00      	nop
 800b01c:	e7fd      	b.n	800b01a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b01e:	4b10      	ldr	r3, [pc, #64]	@ (800b060 <vPortValidateInterruptPriority+0x84>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b026:	4b0f      	ldr	r3, [pc, #60]	@ (800b064 <vPortValidateInterruptPriority+0x88>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d90d      	bls.n	800b04a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b032:	b672      	cpsid	i
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	b662      	cpsie	i
 800b042:	603b      	str	r3, [r7, #0]
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop
 800b048:	e7fd      	b.n	800b046 <vPortValidateInterruptPriority+0x6a>
	}
 800b04a:	bf00      	nop
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	e000e3f0 	.word	0xe000e3f0
 800b05c:	200017e4 	.word	0x200017e4
 800b060:	e000ed0c 	.word	0xe000ed0c
 800b064:	200017e8 	.word	0x200017e8

0800b068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	@ 0x28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b074:	f7fe fd76 	bl	8009b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b078:	4b5d      	ldr	r3, [pc, #372]	@ (800b1f0 <pvPortMalloc+0x188>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b080:	f000 f920 	bl	800b2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b084:	4b5b      	ldr	r3, [pc, #364]	@ (800b1f4 <pvPortMalloc+0x18c>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4013      	ands	r3, r2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 8094 	bne.w	800b1ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d020      	beq.n	800b0da <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800b098:	2208      	movs	r2, #8
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f003 0307 	and.w	r3, r3, #7
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d017      	beq.n	800b0da <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f023 0307 	bic.w	r3, r3, #7
 800b0b0:	3308      	adds	r3, #8
 800b0b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f003 0307 	and.w	r3, r3, #7
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00d      	beq.n	800b0da <pvPortMalloc+0x72>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c2:	b672      	cpsid	i
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	b662      	cpsie	i
 800b0d2:	617b      	str	r3, [r7, #20]
}
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop
 800b0d8:	e7fd      	b.n	800b0d6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d06c      	beq.n	800b1ba <pvPortMalloc+0x152>
 800b0e0:	4b45      	ldr	r3, [pc, #276]	@ (800b1f8 <pvPortMalloc+0x190>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d867      	bhi.n	800b1ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0ea:	4b44      	ldr	r3, [pc, #272]	@ (800b1fc <pvPortMalloc+0x194>)
 800b0ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0ee:	4b43      	ldr	r3, [pc, #268]	@ (800b1fc <pvPortMalloc+0x194>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0f4:	e004      	b.n	800b100 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	429a      	cmp	r2, r3
 800b108:	d903      	bls.n	800b112 <pvPortMalloc+0xaa>
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1f1      	bne.n	800b0f6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b112:	4b37      	ldr	r3, [pc, #220]	@ (800b1f0 <pvPortMalloc+0x188>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b118:	429a      	cmp	r2, r3
 800b11a:	d04e      	beq.n	800b1ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2208      	movs	r2, #8
 800b122:	4413      	add	r3, r2
 800b124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	6a3b      	ldr	r3, [r7, #32]
 800b12c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	1ad2      	subs	r2, r2, r3
 800b136:	2308      	movs	r3, #8
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d922      	bls.n	800b184 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4413      	add	r3, r2
 800b144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	f003 0307 	and.w	r3, r3, #7
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00d      	beq.n	800b16c <pvPortMalloc+0x104>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b154:	b672      	cpsid	i
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	b662      	cpsie	i
 800b164:	613b      	str	r3, [r7, #16]
}
 800b166:	bf00      	nop
 800b168:	bf00      	nop
 800b16a:	e7fd      	b.n	800b168 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	1ad2      	subs	r2, r2, r3
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b17e:	69b8      	ldr	r0, [r7, #24]
 800b180:	f000 f902 	bl	800b388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b184:	4b1c      	ldr	r3, [pc, #112]	@ (800b1f8 <pvPortMalloc+0x190>)
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	4a1a      	ldr	r2, [pc, #104]	@ (800b1f8 <pvPortMalloc+0x190>)
 800b190:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b192:	4b19      	ldr	r3, [pc, #100]	@ (800b1f8 <pvPortMalloc+0x190>)
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	4b1a      	ldr	r3, [pc, #104]	@ (800b200 <pvPortMalloc+0x198>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d203      	bcs.n	800b1a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b19e:	4b16      	ldr	r3, [pc, #88]	@ (800b1f8 <pvPortMalloc+0x190>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a17      	ldr	r2, [pc, #92]	@ (800b200 <pvPortMalloc+0x198>)
 800b1a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	685a      	ldr	r2, [r3, #4]
 800b1aa:	4b12      	ldr	r3, [pc, #72]	@ (800b1f4 <pvPortMalloc+0x18c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b1ba:	f7fe fce1 	bl	8009b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	f003 0307 	and.w	r3, r3, #7
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00d      	beq.n	800b1e4 <pvPortMalloc+0x17c>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1cc:	b672      	cpsid	i
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	b662      	cpsie	i
 800b1dc:	60fb      	str	r3, [r7, #12]
}
 800b1de:	bf00      	nop
 800b1e0:	bf00      	nop
 800b1e2:	e7fd      	b.n	800b1e0 <pvPortMalloc+0x178>
	return pvReturn;
 800b1e4:	69fb      	ldr	r3, [r7, #28]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3728      	adds	r7, #40	@ 0x28
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	200053f4 	.word	0x200053f4
 800b1f4:	20005400 	.word	0x20005400
 800b1f8:	200053f8 	.word	0x200053f8
 800b1fc:	200053ec 	.word	0x200053ec
 800b200:	200053fc 	.word	0x200053fc

0800b204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d04e      	beq.n	800b2b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b216:	2308      	movs	r3, #8
 800b218:	425b      	negs	r3, r3
 800b21a:	697a      	ldr	r2, [r7, #20]
 800b21c:	4413      	add	r3, r2
 800b21e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	4b24      	ldr	r3, [pc, #144]	@ (800b2bc <vPortFree+0xb8>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4013      	ands	r3, r2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10d      	bne.n	800b24e <vPortFree+0x4a>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b236:	b672      	cpsid	i
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	b662      	cpsie	i
 800b246:	60fb      	str	r3, [r7, #12]
}
 800b248:	bf00      	nop
 800b24a:	bf00      	nop
 800b24c:	e7fd      	b.n	800b24a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00d      	beq.n	800b272 <vPortFree+0x6e>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25a:	b672      	cpsid	i
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	b662      	cpsie	i
 800b26a:	60bb      	str	r3, [r7, #8]
}
 800b26c:	bf00      	nop
 800b26e:	bf00      	nop
 800b270:	e7fd      	b.n	800b26e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	4b11      	ldr	r3, [pc, #68]	@ (800b2bc <vPortFree+0xb8>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4013      	ands	r3, r2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d019      	beq.n	800b2b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d115      	bne.n	800b2b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	4b0b      	ldr	r3, [pc, #44]	@ (800b2bc <vPortFree+0xb8>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	43db      	mvns	r3, r3
 800b292:	401a      	ands	r2, r3
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b298:	f7fe fc64 	bl	8009b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	4b07      	ldr	r3, [pc, #28]	@ (800b2c0 <vPortFree+0xbc>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	4a06      	ldr	r2, [pc, #24]	@ (800b2c0 <vPortFree+0xbc>)
 800b2a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b2aa:	6938      	ldr	r0, [r7, #16]
 800b2ac:	f000 f86c 	bl	800b388 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b2b0:	f7fe fc66 	bl	8009b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2b4:	bf00      	nop
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20005400 	.word	0x20005400
 800b2c0:	200053f8 	.word	0x200053f8

0800b2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2d0:	4b27      	ldr	r3, [pc, #156]	@ (800b370 <prvHeapInit+0xac>)
 800b2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f003 0307 	and.w	r3, r3, #7
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00c      	beq.n	800b2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	3307      	adds	r3, #7
 800b2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 0307 	bic.w	r3, r3, #7
 800b2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	4a1f      	ldr	r2, [pc, #124]	@ (800b370 <prvHeapInit+0xac>)
 800b2f4:	4413      	add	r3, r2
 800b2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b374 <prvHeapInit+0xb0>)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b302:	4b1c      	ldr	r3, [pc, #112]	@ (800b374 <prvHeapInit+0xb0>)
 800b304:	2200      	movs	r2, #0
 800b306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	4413      	add	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b310:	2208      	movs	r2, #8
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	1a9b      	subs	r3, r3, r2
 800b316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 0307 	bic.w	r3, r3, #7
 800b31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4a15      	ldr	r2, [pc, #84]	@ (800b378 <prvHeapInit+0xb4>)
 800b324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b326:	4b14      	ldr	r3, [pc, #80]	@ (800b378 <prvHeapInit+0xb4>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2200      	movs	r2, #0
 800b32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b32e:	4b12      	ldr	r3, [pc, #72]	@ (800b378 <prvHeapInit+0xb4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2200      	movs	r2, #0
 800b334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	1ad2      	subs	r2, r2, r3
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b344:	4b0c      	ldr	r3, [pc, #48]	@ (800b378 <prvHeapInit+0xb4>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	4a0a      	ldr	r2, [pc, #40]	@ (800b37c <prvHeapInit+0xb8>)
 800b352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	4a09      	ldr	r2, [pc, #36]	@ (800b380 <prvHeapInit+0xbc>)
 800b35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b35c:	4b09      	ldr	r3, [pc, #36]	@ (800b384 <prvHeapInit+0xc0>)
 800b35e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b362:	601a      	str	r2, [r3, #0]
}
 800b364:	bf00      	nop
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	200017ec 	.word	0x200017ec
 800b374:	200053ec 	.word	0x200053ec
 800b378:	200053f4 	.word	0x200053f4
 800b37c:	200053fc 	.word	0x200053fc
 800b380:	200053f8 	.word	0x200053f8
 800b384:	20005400 	.word	0x20005400

0800b388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b390:	4b28      	ldr	r3, [pc, #160]	@ (800b434 <prvInsertBlockIntoFreeList+0xac>)
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	e002      	b.n	800b39c <prvInsertBlockIntoFreeList+0x14>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d8f7      	bhi.n	800b396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d108      	bne.n	800b3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	441a      	add	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	441a      	add	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d118      	bne.n	800b410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	4b15      	ldr	r3, [pc, #84]	@ (800b438 <prvInsertBlockIntoFreeList+0xb0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d00d      	beq.n	800b406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	441a      	add	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	e008      	b.n	800b418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b406:	4b0c      	ldr	r3, [pc, #48]	@ (800b438 <prvInsertBlockIntoFreeList+0xb0>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	e003      	b.n	800b418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d002      	beq.n	800b426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b426:	bf00      	nop
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	200053ec 	.word	0x200053ec
 800b438:	200053f4 	.word	0x200053f4

0800b43c <atoi>:
 800b43c:	220a      	movs	r2, #10
 800b43e:	2100      	movs	r1, #0
 800b440:	f000 b87a 	b.w	800b538 <strtol>

0800b444 <_strtol_l.constprop.0>:
 800b444:	2b24      	cmp	r3, #36	@ 0x24
 800b446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b44a:	4686      	mov	lr, r0
 800b44c:	4690      	mov	r8, r2
 800b44e:	d801      	bhi.n	800b454 <_strtol_l.constprop.0+0x10>
 800b450:	2b01      	cmp	r3, #1
 800b452:	d106      	bne.n	800b462 <_strtol_l.constprop.0+0x1e>
 800b454:	f000 f894 	bl	800b580 <__errno>
 800b458:	2316      	movs	r3, #22
 800b45a:	6003      	str	r3, [r0, #0]
 800b45c:	2000      	movs	r0, #0
 800b45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b462:	4834      	ldr	r0, [pc, #208]	@ (800b534 <_strtol_l.constprop.0+0xf0>)
 800b464:	460d      	mov	r5, r1
 800b466:	462a      	mov	r2, r5
 800b468:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b46c:	5d06      	ldrb	r6, [r0, r4]
 800b46e:	f016 0608 	ands.w	r6, r6, #8
 800b472:	d1f8      	bne.n	800b466 <_strtol_l.constprop.0+0x22>
 800b474:	2c2d      	cmp	r4, #45	@ 0x2d
 800b476:	d12d      	bne.n	800b4d4 <_strtol_l.constprop.0+0x90>
 800b478:	782c      	ldrb	r4, [r5, #0]
 800b47a:	2601      	movs	r6, #1
 800b47c:	1c95      	adds	r5, r2, #2
 800b47e:	f033 0210 	bics.w	r2, r3, #16
 800b482:	d109      	bne.n	800b498 <_strtol_l.constprop.0+0x54>
 800b484:	2c30      	cmp	r4, #48	@ 0x30
 800b486:	d12a      	bne.n	800b4de <_strtol_l.constprop.0+0x9a>
 800b488:	782a      	ldrb	r2, [r5, #0]
 800b48a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b48e:	2a58      	cmp	r2, #88	@ 0x58
 800b490:	d125      	bne.n	800b4de <_strtol_l.constprop.0+0x9a>
 800b492:	786c      	ldrb	r4, [r5, #1]
 800b494:	2310      	movs	r3, #16
 800b496:	3502      	adds	r5, #2
 800b498:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b49c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	fbbc f9f3 	udiv	r9, ip, r3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b4ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b4b0:	2f09      	cmp	r7, #9
 800b4b2:	d81b      	bhi.n	800b4ec <_strtol_l.constprop.0+0xa8>
 800b4b4:	463c      	mov	r4, r7
 800b4b6:	42a3      	cmp	r3, r4
 800b4b8:	dd27      	ble.n	800b50a <_strtol_l.constprop.0+0xc6>
 800b4ba:	1c57      	adds	r7, r2, #1
 800b4bc:	d007      	beq.n	800b4ce <_strtol_l.constprop.0+0x8a>
 800b4be:	4581      	cmp	r9, r0
 800b4c0:	d320      	bcc.n	800b504 <_strtol_l.constprop.0+0xc0>
 800b4c2:	d101      	bne.n	800b4c8 <_strtol_l.constprop.0+0x84>
 800b4c4:	45a2      	cmp	sl, r4
 800b4c6:	db1d      	blt.n	800b504 <_strtol_l.constprop.0+0xc0>
 800b4c8:	fb00 4003 	mla	r0, r0, r3, r4
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4d2:	e7eb      	b.n	800b4ac <_strtol_l.constprop.0+0x68>
 800b4d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b4d6:	bf04      	itt	eq
 800b4d8:	782c      	ldrbeq	r4, [r5, #0]
 800b4da:	1c95      	addeq	r5, r2, #2
 800b4dc:	e7cf      	b.n	800b47e <_strtol_l.constprop.0+0x3a>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1da      	bne.n	800b498 <_strtol_l.constprop.0+0x54>
 800b4e2:	2c30      	cmp	r4, #48	@ 0x30
 800b4e4:	bf0c      	ite	eq
 800b4e6:	2308      	moveq	r3, #8
 800b4e8:	230a      	movne	r3, #10
 800b4ea:	e7d5      	b.n	800b498 <_strtol_l.constprop.0+0x54>
 800b4ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b4f0:	2f19      	cmp	r7, #25
 800b4f2:	d801      	bhi.n	800b4f8 <_strtol_l.constprop.0+0xb4>
 800b4f4:	3c37      	subs	r4, #55	@ 0x37
 800b4f6:	e7de      	b.n	800b4b6 <_strtol_l.constprop.0+0x72>
 800b4f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b4fc:	2f19      	cmp	r7, #25
 800b4fe:	d804      	bhi.n	800b50a <_strtol_l.constprop.0+0xc6>
 800b500:	3c57      	subs	r4, #87	@ 0x57
 800b502:	e7d8      	b.n	800b4b6 <_strtol_l.constprop.0+0x72>
 800b504:	f04f 32ff 	mov.w	r2, #4294967295
 800b508:	e7e1      	b.n	800b4ce <_strtol_l.constprop.0+0x8a>
 800b50a:	1c53      	adds	r3, r2, #1
 800b50c:	d108      	bne.n	800b520 <_strtol_l.constprop.0+0xdc>
 800b50e:	2322      	movs	r3, #34	@ 0x22
 800b510:	f8ce 3000 	str.w	r3, [lr]
 800b514:	4660      	mov	r0, ip
 800b516:	f1b8 0f00 	cmp.w	r8, #0
 800b51a:	d0a0      	beq.n	800b45e <_strtol_l.constprop.0+0x1a>
 800b51c:	1e69      	subs	r1, r5, #1
 800b51e:	e006      	b.n	800b52e <_strtol_l.constprop.0+0xea>
 800b520:	b106      	cbz	r6, 800b524 <_strtol_l.constprop.0+0xe0>
 800b522:	4240      	negs	r0, r0
 800b524:	f1b8 0f00 	cmp.w	r8, #0
 800b528:	d099      	beq.n	800b45e <_strtol_l.constprop.0+0x1a>
 800b52a:	2a00      	cmp	r2, #0
 800b52c:	d1f6      	bne.n	800b51c <_strtol_l.constprop.0+0xd8>
 800b52e:	f8c8 1000 	str.w	r1, [r8]
 800b532:	e794      	b.n	800b45e <_strtol_l.constprop.0+0x1a>
 800b534:	0800b83d 	.word	0x0800b83d

0800b538 <strtol>:
 800b538:	4613      	mov	r3, r2
 800b53a:	460a      	mov	r2, r1
 800b53c:	4601      	mov	r1, r0
 800b53e:	4802      	ldr	r0, [pc, #8]	@ (800b548 <strtol+0x10>)
 800b540:	6800      	ldr	r0, [r0, #0]
 800b542:	f7ff bf7f 	b.w	800b444 <_strtol_l.constprop.0>
 800b546:	bf00      	nop
 800b548:	20000010 	.word	0x20000010

0800b54c <memset>:
 800b54c:	4402      	add	r2, r0
 800b54e:	4603      	mov	r3, r0
 800b550:	4293      	cmp	r3, r2
 800b552:	d100      	bne.n	800b556 <memset+0xa>
 800b554:	4770      	bx	lr
 800b556:	f803 1b01 	strb.w	r1, [r3], #1
 800b55a:	e7f9      	b.n	800b550 <memset+0x4>

0800b55c <strncmp>:
 800b55c:	b510      	push	{r4, lr}
 800b55e:	b16a      	cbz	r2, 800b57c <strncmp+0x20>
 800b560:	3901      	subs	r1, #1
 800b562:	1884      	adds	r4, r0, r2
 800b564:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b568:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d103      	bne.n	800b578 <strncmp+0x1c>
 800b570:	42a0      	cmp	r0, r4
 800b572:	d001      	beq.n	800b578 <strncmp+0x1c>
 800b574:	2a00      	cmp	r2, #0
 800b576:	d1f5      	bne.n	800b564 <strncmp+0x8>
 800b578:	1ad0      	subs	r0, r2, r3
 800b57a:	bd10      	pop	{r4, pc}
 800b57c:	4610      	mov	r0, r2
 800b57e:	e7fc      	b.n	800b57a <strncmp+0x1e>

0800b580 <__errno>:
 800b580:	4b01      	ldr	r3, [pc, #4]	@ (800b588 <__errno+0x8>)
 800b582:	6818      	ldr	r0, [r3, #0]
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	20000010 	.word	0x20000010

0800b58c <__libc_init_array>:
 800b58c:	b570      	push	{r4, r5, r6, lr}
 800b58e:	4d0d      	ldr	r5, [pc, #52]	@ (800b5c4 <__libc_init_array+0x38>)
 800b590:	4c0d      	ldr	r4, [pc, #52]	@ (800b5c8 <__libc_init_array+0x3c>)
 800b592:	1b64      	subs	r4, r4, r5
 800b594:	10a4      	asrs	r4, r4, #2
 800b596:	2600      	movs	r6, #0
 800b598:	42a6      	cmp	r6, r4
 800b59a:	d109      	bne.n	800b5b0 <__libc_init_array+0x24>
 800b59c:	4d0b      	ldr	r5, [pc, #44]	@ (800b5cc <__libc_init_array+0x40>)
 800b59e:	4c0c      	ldr	r4, [pc, #48]	@ (800b5d0 <__libc_init_array+0x44>)
 800b5a0:	f000 f826 	bl	800b5f0 <_init>
 800b5a4:	1b64      	subs	r4, r4, r5
 800b5a6:	10a4      	asrs	r4, r4, #2
 800b5a8:	2600      	movs	r6, #0
 800b5aa:	42a6      	cmp	r6, r4
 800b5ac:	d105      	bne.n	800b5ba <__libc_init_array+0x2e>
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}
 800b5b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b4:	4798      	blx	r3
 800b5b6:	3601      	adds	r6, #1
 800b5b8:	e7ee      	b.n	800b598 <__libc_init_array+0xc>
 800b5ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5be:	4798      	blx	r3
 800b5c0:	3601      	adds	r6, #1
 800b5c2:	e7f2      	b.n	800b5aa <__libc_init_array+0x1e>
 800b5c4:	0800b948 	.word	0x0800b948
 800b5c8:	0800b948 	.word	0x0800b948
 800b5cc:	0800b948 	.word	0x0800b948
 800b5d0:	0800b94c 	.word	0x0800b94c

0800b5d4 <memcpy>:
 800b5d4:	440a      	add	r2, r1
 800b5d6:	4291      	cmp	r1, r2
 800b5d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5dc:	d100      	bne.n	800b5e0 <memcpy+0xc>
 800b5de:	4770      	bx	lr
 800b5e0:	b510      	push	{r4, lr}
 800b5e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ea:	4291      	cmp	r1, r2
 800b5ec:	d1f9      	bne.n	800b5e2 <memcpy+0xe>
 800b5ee:	bd10      	pop	{r4, pc}

0800b5f0 <_init>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	bf00      	nop
 800b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f6:	bc08      	pop	{r3}
 800b5f8:	469e      	mov	lr, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_fini>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr
