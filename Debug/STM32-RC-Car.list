
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000824c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08008444  08008444  00009444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086fc  080086fc  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  080086fc  080086fc  000096fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008704  08008704  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008704  08008704  00009704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008708  08008708  00009708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800870c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  2000005c  08008768  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08008768  0000ab44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001875b  00000000  00000000  0000a08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ec  00000000  00000000  000227e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00025fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc8  00000000  00000000  00027430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a046  00000000  00000000  000283f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8ee  00000000  00000000  0005243e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff4cd  00000000  00000000  0006cd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c1f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005944  00000000  00000000  0016c23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00171b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800842c 	.word	0x0800842c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	0800842c 	.word	0x0800842c

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b96a 	b.w	8000548 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	460c      	mov	r4, r1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d14e      	bne.n	8000336 <__udivmoddi4+0xaa>
 8000298:	4694      	mov	ip, r2
 800029a:	458c      	cmp	ip, r1
 800029c:	4686      	mov	lr, r0
 800029e:	fab2 f282 	clz	r2, r2
 80002a2:	d962      	bls.n	800036a <__udivmoddi4+0xde>
 80002a4:	b14a      	cbz	r2, 80002ba <__udivmoddi4+0x2e>
 80002a6:	f1c2 0320 	rsb	r3, r2, #32
 80002aa:	4091      	lsls	r1, r2
 80002ac:	fa20 f303 	lsr.w	r3, r0, r3
 80002b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b4:	4319      	orrs	r1, r3
 80002b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002be:	fa1f f68c 	uxth.w	r6, ip
 80002c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ca:	fb07 1114 	mls	r1, r7, r4, r1
 80002ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d2:	fb04 f106 	mul.w	r1, r4, r6
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f104 30ff 	add.w	r0, r4, #4294967295
 80002e2:	f080 8112 	bcs.w	800050a <__udivmoddi4+0x27e>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 810f 	bls.w	800050a <__udivmoddi4+0x27e>
 80002ec:	3c02      	subs	r4, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a59      	subs	r1, r3, r1
 80002f2:	fa1f f38e 	uxth.w	r3, lr
 80002f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002fa:	fb07 1110 	mls	r1, r7, r0, r1
 80002fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000302:	fb00 f606 	mul.w	r6, r0, r6
 8000306:	429e      	cmp	r6, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x94>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000312:	f080 80fc 	bcs.w	800050e <__udivmoddi4+0x282>
 8000316:	429e      	cmp	r6, r3
 8000318:	f240 80f9 	bls.w	800050e <__udivmoddi4+0x282>
 800031c:	4463      	add	r3, ip
 800031e:	3802      	subs	r0, #2
 8000320:	1b9b      	subs	r3, r3, r6
 8000322:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000326:	2100      	movs	r1, #0
 8000328:	b11d      	cbz	r5, 8000332 <__udivmoddi4+0xa6>
 800032a:	40d3      	lsrs	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	e9c5 3200 	strd	r3, r2, [r5]
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d905      	bls.n	8000346 <__udivmoddi4+0xba>
 800033a:	b10d      	cbz	r5, 8000340 <__udivmoddi4+0xb4>
 800033c:	e9c5 0100 	strd	r0, r1, [r5]
 8000340:	2100      	movs	r1, #0
 8000342:	4608      	mov	r0, r1
 8000344:	e7f5      	b.n	8000332 <__udivmoddi4+0xa6>
 8000346:	fab3 f183 	clz	r1, r3
 800034a:	2900      	cmp	r1, #0
 800034c:	d146      	bne.n	80003dc <__udivmoddi4+0x150>
 800034e:	42a3      	cmp	r3, r4
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0xcc>
 8000352:	4290      	cmp	r0, r2
 8000354:	f0c0 80f0 	bcc.w	8000538 <__udivmoddi4+0x2ac>
 8000358:	1a86      	subs	r6, r0, r2
 800035a:	eb64 0303 	sbc.w	r3, r4, r3
 800035e:	2001      	movs	r0, #1
 8000360:	2d00      	cmp	r5, #0
 8000362:	d0e6      	beq.n	8000332 <__udivmoddi4+0xa6>
 8000364:	e9c5 6300 	strd	r6, r3, [r5]
 8000368:	e7e3      	b.n	8000332 <__udivmoddi4+0xa6>
 800036a:	2a00      	cmp	r2, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x204>
 8000370:	eba1 040c 	sub.w	r4, r1, ip
 8000374:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000378:	fa1f f78c 	uxth.w	r7, ip
 800037c:	2101      	movs	r1, #1
 800037e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000382:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000386:	fb08 4416 	mls	r4, r8, r6, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb07 f006 	mul.w	r0, r7, r6
 8000392:	4298      	cmp	r0, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x11c>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f106 34ff 	add.w	r4, r6, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x11a>
 80003a0:	4298      	cmp	r0, r3
 80003a2:	f200 80cd 	bhi.w	8000540 <__udivmoddi4+0x2b4>
 80003a6:	4626      	mov	r6, r4
 80003a8:	1a1c      	subs	r4, r3, r0
 80003aa:	fa1f f38e 	uxth.w	r3, lr
 80003ae:	fbb4 f0f8 	udiv	r0, r4, r8
 80003b2:	fb08 4410 	mls	r4, r8, r0, r4
 80003b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ba:	fb00 f707 	mul.w	r7, r0, r7
 80003be:	429f      	cmp	r7, r3
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x148>
 80003c2:	eb1c 0303 	adds.w	r3, ip, r3
 80003c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x146>
 80003cc:	429f      	cmp	r7, r3
 80003ce:	f200 80b0 	bhi.w	8000532 <__udivmoddi4+0x2a6>
 80003d2:	4620      	mov	r0, r4
 80003d4:	1bdb      	subs	r3, r3, r7
 80003d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003da:	e7a5      	b.n	8000328 <__udivmoddi4+0x9c>
 80003dc:	f1c1 0620 	rsb	r6, r1, #32
 80003e0:	408b      	lsls	r3, r1
 80003e2:	fa22 f706 	lsr.w	r7, r2, r6
 80003e6:	431f      	orrs	r7, r3
 80003e8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003ec:	fa04 f301 	lsl.w	r3, r4, r1
 80003f0:	ea43 030c 	orr.w	r3, r3, ip
 80003f4:	40f4      	lsrs	r4, r6
 80003f6:	fa00 f801 	lsl.w	r8, r0, r1
 80003fa:	0c38      	lsrs	r0, r7, #16
 80003fc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000400:	fbb4 fef0 	udiv	lr, r4, r0
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fb00 441e 	mls	r4, r0, lr, r4
 800040c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000410:	fb0e f90c 	mul.w	r9, lr, ip
 8000414:	45a1      	cmp	r9, r4
 8000416:	fa02 f201 	lsl.w	r2, r2, r1
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x1a6>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000422:	f080 8084 	bcs.w	800052e <__udivmoddi4+0x2a2>
 8000426:	45a1      	cmp	r9, r4
 8000428:	f240 8081 	bls.w	800052e <__udivmoddi4+0x2a2>
 800042c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000430:	443c      	add	r4, r7
 8000432:	eba4 0409 	sub.w	r4, r4, r9
 8000436:	fa1f f983 	uxth.w	r9, r3
 800043a:	fbb4 f3f0 	udiv	r3, r4, r0
 800043e:	fb00 4413 	mls	r4, r0, r3, r4
 8000442:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000446:	fb03 fc0c 	mul.w	ip, r3, ip
 800044a:	45a4      	cmp	ip, r4
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x1d2>
 800044e:	193c      	adds	r4, r7, r4
 8000450:	f103 30ff 	add.w	r0, r3, #4294967295
 8000454:	d267      	bcs.n	8000526 <__udivmoddi4+0x29a>
 8000456:	45a4      	cmp	ip, r4
 8000458:	d965      	bls.n	8000526 <__udivmoddi4+0x29a>
 800045a:	3b02      	subs	r3, #2
 800045c:	443c      	add	r4, r7
 800045e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000462:	fba0 9302 	umull	r9, r3, r0, r2
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	429c      	cmp	r4, r3
 800046c:	46ce      	mov	lr, r9
 800046e:	469c      	mov	ip, r3
 8000470:	d351      	bcc.n	8000516 <__udivmoddi4+0x28a>
 8000472:	d04e      	beq.n	8000512 <__udivmoddi4+0x286>
 8000474:	b155      	cbz	r5, 800048c <__udivmoddi4+0x200>
 8000476:	ebb8 030e 	subs.w	r3, r8, lr
 800047a:	eb64 040c 	sbc.w	r4, r4, ip
 800047e:	fa04 f606 	lsl.w	r6, r4, r6
 8000482:	40cb      	lsrs	r3, r1
 8000484:	431e      	orrs	r6, r3
 8000486:	40cc      	lsrs	r4, r1
 8000488:	e9c5 6400 	strd	r6, r4, [r5]
 800048c:	2100      	movs	r1, #0
 800048e:	e750      	b.n	8000332 <__udivmoddi4+0xa6>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f103 	lsr.w	r1, r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa24 f303 	lsr.w	r3, r4, r3
 80004a0:	4094      	lsls	r4, r2
 80004a2:	430c      	orrs	r4, r1
 80004a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004a8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b4:	fb08 3110 	mls	r1, r8, r0, r3
 80004b8:	0c23      	lsrs	r3, r4, #16
 80004ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004be:	fb00 f107 	mul.w	r1, r0, r7
 80004c2:	4299      	cmp	r1, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x24c>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ce:	d22c      	bcs.n	800052a <__udivmoddi4+0x29e>
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d92a      	bls.n	800052a <__udivmoddi4+0x29e>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e0:	fb08 3311 	mls	r3, r8, r1, r3
 80004e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004e8:	fb01 f307 	mul.w	r3, r1, r7
 80004ec:	42a3      	cmp	r3, r4
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x276>
 80004f0:	eb1c 0404 	adds.w	r4, ip, r4
 80004f4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004f8:	d213      	bcs.n	8000522 <__udivmoddi4+0x296>
 80004fa:	42a3      	cmp	r3, r4
 80004fc:	d911      	bls.n	8000522 <__udivmoddi4+0x296>
 80004fe:	3902      	subs	r1, #2
 8000500:	4464      	add	r4, ip
 8000502:	1ae4      	subs	r4, r4, r3
 8000504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000508:	e739      	b.n	800037e <__udivmoddi4+0xf2>
 800050a:	4604      	mov	r4, r0
 800050c:	e6f0      	b.n	80002f0 <__udivmoddi4+0x64>
 800050e:	4608      	mov	r0, r1
 8000510:	e706      	b.n	8000320 <__udivmoddi4+0x94>
 8000512:	45c8      	cmp	r8, r9
 8000514:	d2ae      	bcs.n	8000474 <__udivmoddi4+0x1e8>
 8000516:	ebb9 0e02 	subs.w	lr, r9, r2
 800051a:	eb63 0c07 	sbc.w	ip, r3, r7
 800051e:	3801      	subs	r0, #1
 8000520:	e7a8      	b.n	8000474 <__udivmoddi4+0x1e8>
 8000522:	4631      	mov	r1, r6
 8000524:	e7ed      	b.n	8000502 <__udivmoddi4+0x276>
 8000526:	4603      	mov	r3, r0
 8000528:	e799      	b.n	800045e <__udivmoddi4+0x1d2>
 800052a:	4630      	mov	r0, r6
 800052c:	e7d4      	b.n	80004d8 <__udivmoddi4+0x24c>
 800052e:	46d6      	mov	lr, sl
 8000530:	e77f      	b.n	8000432 <__udivmoddi4+0x1a6>
 8000532:	4463      	add	r3, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e74d      	b.n	80003d4 <__udivmoddi4+0x148>
 8000538:	4606      	mov	r6, r0
 800053a:	4623      	mov	r3, r4
 800053c:	4608      	mov	r0, r1
 800053e:	e70f      	b.n	8000360 <__udivmoddi4+0xd4>
 8000540:	3e02      	subs	r6, #2
 8000542:	4463      	add	r3, ip
 8000544:	e730      	b.n	80003a8 <__udivmoddi4+0x11c>
 8000546:	bf00      	nop

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <MX_DMA_Init+0x48>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <MX_DMA_Init+0x48>)
 8000558:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <MX_DMA_Init+0x48>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	2010      	movs	r0, #16
 8000570:	f001 fefd 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000574:	2010      	movs	r0, #16
 8000576:	f001 ff16 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	2011      	movs	r0, #17
 8000580:	f001 fef5 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000584:	2011      	movs	r0, #17
 8000586:	f001 ff0e 	bl	80023a6 <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800

08000598 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	@ 0x30
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b77      	ldr	r3, [pc, #476]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a76      	ldr	r2, [pc, #472]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b74      	ldr	r3, [pc, #464]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	4b71      	ldr	r3, [pc, #452]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a70      	ldr	r2, [pc, #448]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b6e      	ldr	r3, [pc, #440]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b6b      	ldr	r3, [pc, #428]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a6a      	ldr	r2, [pc, #424]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b68      	ldr	r3, [pc, #416]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b65      	ldr	r3, [pc, #404]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a64      	ldr	r2, [pc, #400]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b62      	ldr	r3, [pc, #392]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800060e:	4b5f      	ldr	r3, [pc, #380]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a5e      	ldr	r2, [pc, #376]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b5c      	ldr	r3, [pc, #368]	@ (800078c <MX_GPIO_Init+0x1f4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	4b59      	ldr	r3, [pc, #356]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a58      	ldr	r2, [pc, #352]	@ (800078c <MX_GPIO_Init+0x1f4>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b56      	ldr	r3, [pc, #344]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063e:	4b53      	ldr	r3, [pc, #332]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a52      	ldr	r2, [pc, #328]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b50      	ldr	r3, [pc, #320]	@ (800078c <MX_GPIO_Init+0x1f4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f244 0181 	movw	r1, #16513	@ 0x4081
 800065c:	484c      	ldr	r0, [pc, #304]	@ (8000790 <MX_GPIO_Init+0x1f8>)
 800065e:	f002 fc7f 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2141      	movs	r1, #65	@ 0x41
 8000666:	484b      	ldr	r0, [pc, #300]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000668:	f002 fc7a 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2110      	movs	r1, #16
 8000670:	4849      	ldr	r0, [pc, #292]	@ (8000798 <MX_GPIO_Init+0x200>)
 8000672:	f002 fc75 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000676:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800067c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4843      	ldr	r0, [pc, #268]	@ (800079c <MX_GPIO_Init+0x204>)
 800068e:	f002 fabb 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000692:	2332      	movs	r3, #50	@ 0x32
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006a2:	230b      	movs	r3, #11
 80006a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	483b      	ldr	r0, [pc, #236]	@ (800079c <MX_GPIO_Init+0x204>)
 80006ae:	f002 faab 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006b2:	2386      	movs	r3, #134	@ 0x86
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c2:	230b      	movs	r3, #11
 80006c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4834      	ldr	r0, [pc, #208]	@ (80007a0 <MX_GPIO_Init+0x208>)
 80006ce:	f002 fa9b 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006d2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4829      	ldr	r0, [pc, #164]	@ (8000790 <MX_GPIO_Init+0x1f8>)
 80006ec:	f002 fa8c 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 80006f0:	2341      	movs	r3, #65	@ 0x41
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4823      	ldr	r0, [pc, #140]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000708:	f002 fa7e 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071e:	230b      	movs	r3, #11
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4819      	ldr	r0, [pc, #100]	@ (8000790 <MX_GPIO_Init+0x1f8>)
 800072a:	f002 fa6d 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4814      	ldr	r0, [pc, #80]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000742:	f002 fa61 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000746:	2310      	movs	r3, #16
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	480e      	ldr	r0, [pc, #56]	@ (8000798 <MX_GPIO_Init+0x200>)
 800075e:	f002 fa53 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000762:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000774:	230b      	movs	r3, #11
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000780:	f002 fa42 	bl	8002c08 <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3730      	adds	r7, #48	@ 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020400 	.word	0x40020400
 8000794:	40021800 	.word	0x40021800
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020000 	.word	0x40020000

080007a4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <HAL_UARTEx_RxEventCallback+0x28>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d104      	bne.n	80007c4 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 80007ba:	887b      	ldrh	r3, [r7, #2]
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <HAL_UARTEx_RxEventCallback+0x2c>)
 80007c0:	f007 fb93 	bl	8007eea <ATC_IdleLineCallback>
	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40004400 	.word	0x40004400
 80007d0:	20000078 	.word	0x20000078

080007d4 <pid_init>:
	float Kd;			//Wzmocnienie członu różniczkującego*/
	int anti_windup_limit;		//Anti-Windup - ograniczenie członu całkującego*/
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6178      	str	r0, [r7, #20]
 80007dc:	ed87 0a04 	vstr	s0, [r7, #16]
 80007e0:	edc7 0a03 	vstr	s1, [r7, #12]
 80007e4:	ed87 1a02 	vstr	s2, [r7, #8]
 80007e8:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	615a      	str	r2, [r3, #20]
}
 800080e:	bf00      	nop
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <pid_reset>:

void pid_reset(PID *pid_data)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 800083a:	b480      	push	{r7}
 800083c:	b089      	sub	sp, #36	@ 0x24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	441a      	add	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800086a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800086e:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	ed93 7a03 	vldr	s14, [r3, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000888:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a6:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	ee07 3a90 	vmov	s15, r3
 80008b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80008ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c2:	db08      	blt.n	80008d6 <pid_calculate+0x9c>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d0:	edc7 7a07 	vstr	s15, [r7, #28]
 80008d4:	e016      	b.n	8000904 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	425b      	negs	r3, r3
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80008e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f0:	d808      	bhi.n	8000904 <pid_calculate+0xca>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	425b      	negs	r3, r3
 80008f8:	ee07 3a90 	vmov	s15, r3
 80008fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000900:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 800090a:	ed97 7a05 	vldr	s14, [r7, #20]
 800090e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000916:	edd7 7a04 	vldr	s15, [r7, #16]
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000922:	ee17 3a90 	vmov	r3, s15
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	@ 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000948:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f82a 	bl	80009d0 <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000984:	fb02 f303 	mul.w	r3, r2, r3
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	8892      	ldrh	r2, [r2, #4]
 800098c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f103 0018 	add.w	r0, r3, #24
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6919      	ldr	r1, [r3, #16]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f7ff ff49 	bl	800083a <pid_calculate>
 80009a8:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	695a      	ldr	r2, [r3, #20]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	441a      	add	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db04      	blt.n	80009c8 <motor_calculate_speed+0x5a>
	{
		//drv8835_set_motorA_direction(CW);
		drv8835_set_motorA_speed(m->actual_PWM);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f832 	bl	8000a2c <drv8835_set_motorA_speed>
	else
	{
		//drv8835_set_motorA_direction(CCW);
		//drv8835_set_motorA_speed(-m->actual_PWM);
	}
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d004      	beq.n	8000a1c <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3318      	adds	r3, #24
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff feff 	bl	800081a <pid_reset>

	m->set_speed = set_speed;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	611a      	str	r2, [r3, #16]
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000a36:	88fa      	ldrh	r2, [r7, #6]
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <drv8835_set_motorA_speed+0x34>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d303      	bcc.n	8000a4a <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000a42:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <drv8835_set_motorA_speed+0x34>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a48:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000a4a:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <drv8835_set_motorA_speed+0x34>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000134 	.word	0x20000134

08000a64 <drv8835_init>:

void drv8835_init()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	//drv8835_mode_control(Phase_Enable_Mode);
	//drv8835_set_motorA_direction(CCW);
	drv8835_set_motorA_speed(0);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff ffdf 	bl	8000a2c <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <drv8835_init+0x18>)
 8000a72:	f003 fe67 	bl	8004744 <HAL_TIM_PWM_Start>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000134 	.word	0x20000134

08000a80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d102      	bne.n	8000a98 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000a92:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a94:	f7ff ff6b 	bl	800096e <motor_calculate_speed>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40001000 	.word	0x40001000
 8000aa4:	200000b4 	.word	0x200000b4

08000aa8 <ProcessCommand>:
    // Wyślij dane na UART3, aby były widoczne w terminalu
    HAL_UART_Transmit(&huart3, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);  // Dodaj nową linię
}

void ProcessCommand(uint8_t* cmd) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	// Sprawdź, czy komenda to LIGHTS
	    if (strcmp((char*)cmd, "LIGHTS") == 0) {
 8000ab0:	4951      	ldr	r1, [pc, #324]	@ (8000bf8 <ProcessCommand+0x150>)
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fbc0 	bl	8000238 <strcmp>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d104      	bne.n	8000ac8 <ProcessCommand+0x20>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8000abe:	2101      	movs	r1, #1
 8000ac0:	484e      	ldr	r0, [pc, #312]	@ (8000bfc <ProcessCommand+0x154>)
 8000ac2:	f002 fa66 	bl	8002f92 <HAL_GPIO_TogglePin>
	    }
	    // Nieznana komenda
	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000ac6:	e093      	b.n	8000bf0 <ProcessCommand+0x148>
	    else if (strncmp((char*)cmd, "MOTOR", 5) == 0) { // Sprawdź, czy zaczyna się od "MOTOR"
 8000ac8:	2205      	movs	r2, #5
 8000aca:	494d      	ldr	r1, [pc, #308]	@ (8000c00 <ProcessCommand+0x158>)
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f007 fbd6 	bl	800827e <strncmp>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f040 8084 	bne.w	8000be2 <ProcessCommand+0x13a>
	        char* modeStr = (char*)cmd + 5; // Wskaźnik na część po "MOTOR"
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3305      	adds	r3, #5
 8000ade:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);       // Zamiana cyfry trybu na liczbę całkowitą
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f007 fa71 	bl	8007fc8 <atoi>
 8000ae6:	60b8      	str	r0, [r7, #8]
	        if (mode >= 0 && mode <= 8) {   // Sprawdzenie, czy tryb mieści się w zakresie 0-8
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db71      	blt.n	8000bd2 <ProcessCommand+0x12a>
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	dc6e      	bgt.n	8000bd2 <ProcessCommand+0x12a>
	            switch (mode) {
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d868      	bhi.n	8000bcc <ProcessCommand+0x124>
 8000afa:	a201      	add	r2, pc, #4	@ (adr r2, 8000b00 <ProcessCommand+0x58>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b25 	.word	0x08000b25
 8000b04:	08000b3d 	.word	0x08000b3d
 8000b08:	08000b55 	.word	0x08000b55
 8000b0c:	08000b6d 	.word	0x08000b6d
 8000b10:	08000b7d 	.word	0x08000b7d
 8000b14:	08000b8d 	.word	0x08000b8d
 8000b18:	08000b9d 	.word	0x08000b9d
 8000b1c:	08000bad 	.word	0x08000bad
 8000b20:	08000bbd 	.word	0x08000bbd
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	2212      	movs	r2, #18
 8000b2a:	4936      	ldr	r1, [pc, #216]	@ (8000c04 <ProcessCommand+0x15c>)
 8000b2c:	4836      	ldr	r0, [pc, #216]	@ (8000c08 <ProcessCommand+0x160>)
 8000b2e:	f004 fea5 	bl	800587c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	4835      	ldr	r0, [pc, #212]	@ (8000c0c <ProcessCommand+0x164>)
 8000b36:	f7ff ff62 	bl	80009fe <motor_set_speed>
	                    break;
 8000b3a:	e048      	b.n	8000bce <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	2212      	movs	r2, #18
 8000b42:	4933      	ldr	r1, [pc, #204]	@ (8000c10 <ProcessCommand+0x168>)
 8000b44:	4830      	ldr	r0, [pc, #192]	@ (8000c08 <ProcessCommand+0x160>)
 8000b46:	f004 fe99 	bl	800587c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 100);
 8000b4a:	2164      	movs	r1, #100	@ 0x64
 8000b4c:	482f      	ldr	r0, [pc, #188]	@ (8000c0c <ProcessCommand+0x164>)
 8000b4e:	f7ff ff56 	bl	80009fe <motor_set_speed>
	                    break;
 8000b52:	e03c      	b.n	8000bce <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	2212      	movs	r2, #18
 8000b5a:	492e      	ldr	r1, [pc, #184]	@ (8000c14 <ProcessCommand+0x16c>)
 8000b5c:	482a      	ldr	r0, [pc, #168]	@ (8000c08 <ProcessCommand+0x160>)
 8000b5e:	f004 fe8d 	bl	800587c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 75);
 8000b62:	214b      	movs	r1, #75	@ 0x4b
 8000b64:	4829      	ldr	r0, [pc, #164]	@ (8000c0c <ProcessCommand+0x164>)
 8000b66:	f7ff ff4a 	bl	80009fe <motor_set_speed>
	                    break;
 8000b6a:	e030      	b.n	8000bce <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	2212      	movs	r2, #18
 8000b72:	4929      	ldr	r1, [pc, #164]	@ (8000c18 <ProcessCommand+0x170>)
 8000b74:	4824      	ldr	r0, [pc, #144]	@ (8000c08 <ProcessCommand+0x160>)
 8000b76:	f004 fe81 	bl	800587c <HAL_UART_Transmit>
	                    break;
 8000b7a:	e028      	b.n	8000bce <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	2212      	movs	r2, #18
 8000b82:	4926      	ldr	r1, [pc, #152]	@ (8000c1c <ProcessCommand+0x174>)
 8000b84:	4820      	ldr	r0, [pc, #128]	@ (8000c08 <ProcessCommand+0x160>)
 8000b86:	f004 fe79 	bl	800587c <HAL_UART_Transmit>
	                    break;
 8000b8a:	e020      	b.n	8000bce <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	2212      	movs	r2, #18
 8000b92:	4923      	ldr	r1, [pc, #140]	@ (8000c20 <ProcessCommand+0x178>)
 8000b94:	481c      	ldr	r0, [pc, #112]	@ (8000c08 <ProcessCommand+0x160>)
 8000b96:	f004 fe71 	bl	800587c <HAL_UART_Transmit>
	                    break;
 8000b9a:	e018      	b.n	8000bce <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	2212      	movs	r2, #18
 8000ba2:	4920      	ldr	r1, [pc, #128]	@ (8000c24 <ProcessCommand+0x17c>)
 8000ba4:	4818      	ldr	r0, [pc, #96]	@ (8000c08 <ProcessCommand+0x160>)
 8000ba6:	f004 fe69 	bl	800587c <HAL_UART_Transmit>
	                    break;
 8000baa:	e010      	b.n	8000bce <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	2212      	movs	r2, #18
 8000bb2:	491d      	ldr	r1, [pc, #116]	@ (8000c28 <ProcessCommand+0x180>)
 8000bb4:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <ProcessCommand+0x160>)
 8000bb6:	f004 fe61 	bl	800587c <HAL_UART_Transmit>
	                    break;
 8000bba:	e008      	b.n	8000bce <ProcessCommand+0x126>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	2212      	movs	r2, #18
 8000bc2:	491a      	ldr	r1, [pc, #104]	@ (8000c2c <ProcessCommand+0x184>)
 8000bc4:	4810      	ldr	r0, [pc, #64]	@ (8000c08 <ProcessCommand+0x160>)
 8000bc6:	f004 fe59 	bl	800587c <HAL_UART_Transmit>
	                    break;
 8000bca:	e000      	b.n	8000bce <ProcessCommand+0x126>
	                    break; // Nie powinno wystąpić
 8000bcc:	bf00      	nop
	            switch (mode) {
 8000bce:	bf00      	nop
}
 8000bd0:	e00e      	b.n	8000bf0 <ProcessCommand+0x148>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	2215      	movs	r2, #21
 8000bd8:	4915      	ldr	r1, [pc, #84]	@ (8000c30 <ProcessCommand+0x188>)
 8000bda:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <ProcessCommand+0x160>)
 8000bdc:	f004 fe4e 	bl	800587c <HAL_UART_Transmit>
}
 8000be0:	e006      	b.n	8000bf0 <ProcessCommand+0x148>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	2211      	movs	r2, #17
 8000be8:	4912      	ldr	r1, [pc, #72]	@ (8000c34 <ProcessCommand+0x18c>)
 8000bea:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <ProcessCommand+0x160>)
 8000bec:	f004 fe46 	bl	800587c <HAL_UART_Transmit>
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08008448 	.word	0x08008448
 8000bfc:	40021800 	.word	0x40021800
 8000c00:	08008450 	.word	0x08008450
 8000c04:	08008458 	.word	0x08008458
 8000c08:	200003d0 	.word	0x200003d0
 8000c0c:	200000b4 	.word	0x200000b4
 8000c10:	0800846c 	.word	0x0800846c
 8000c14:	08008480 	.word	0x08008480
 8000c18:	08008494 	.word	0x08008494
 8000c1c:	080084a8 	.word	0x080084a8
 8000c20:	080084bc 	.word	0x080084bc
 8000c24:	080084d0 	.word	0x080084d0
 8000c28:	080084e4 	.word	0x080084e4
 8000c2c:	080084f8 	.word	0x080084f8
 8000c30:	0800850c 	.word	0x0800850c
 8000c34:	08008524 	.word	0x08008524

08000c38 <ProcessIncomingData>:

// Funkcja obsługująca przetwarzanie danych przychodzących przez ESP
void ProcessIncomingData() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af02      	add	r7, sp, #8
	char *response = NULL; // Wskaźnik na odebrane dane
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
	    while (1) {
	        // Oczekiwanie na odpowiedź zawierającą +IPD
	        int result = ATC_Receive(&ESP, &response, 5000, 1, "+IPD,");
 8000c42:	4639      	mov	r1, r7
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <ProcessIncomingData+0x8c>)
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c4e:	481e      	ldr	r0, [pc, #120]	@ (8000cc8 <ProcessIncomingData+0x90>)
 8000c50:	f007 f89a 	bl	8007d88 <ATC_Receive>
 8000c54:	60f8      	str	r0, [r7, #12]
	        if (result > 0 && response != NULL) {
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dd2e      	ble.n	8000cba <ProcessIncomingData+0x82>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d02b      	beq.n	8000cba <ProcessIncomingData+0x82>
	            // Przetwarzanie odpowiedzi zawierającej +IPD
	            char *ipdStart = strstr(response, "+IPD,");
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	4917      	ldr	r1, [pc, #92]	@ (8000cc4 <ProcessIncomingData+0x8c>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	f007 fb2e 	bl	80082c8 <strstr>
 8000c6c:	60b8      	str	r0, [r7, #8]
	            if (ipdStart != NULL) {
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d01f      	beq.n	8000cb4 <ProcessIncomingData+0x7c>
	                // Znajdź początek danych (po dwukropku ':')
	                char *dataStart = strchr(ipdStart, ':');
 8000c74:	213a      	movs	r1, #58	@ 0x3a
 8000c76:	68b8      	ldr	r0, [r7, #8]
 8000c78:	f007 faf4 	bl	8008264 <strchr>
 8000c7c:	6078      	str	r0, [r7, #4]
	                if (dataStart != NULL) {
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d017      	beq.n	8000cb4 <ProcessIncomingData+0x7c>
	                    dataStart++; // Przesuń za dwukropek, aby przejść do danych
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3301      	adds	r3, #1
 8000c88:	607b      	str	r3, [r7, #4]
	                    // Wyślij dane na UART3
	                    HAL_UART_Transmit(&huart3, (uint8_t *)dataStart, strlen(dataStart), HAL_MAX_DELAY);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fade 	bl	800024c <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <ProcessIncomingData+0x94>)
 8000c9c:	f004 fdee 	bl	800587c <HAL_UART_Transmit>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Nowa linia dla przejrzystości
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	490a      	ldr	r1, [pc, #40]	@ (8000cd0 <ProcessIncomingData+0x98>)
 8000ca8:	4808      	ldr	r0, [pc, #32]	@ (8000ccc <ProcessIncomingData+0x94>)
 8000caa:	f004 fde7 	bl	800587c <HAL_UART_Transmit>
	                    ProcessCommand((uint8_t *)dataStart);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fefa 	bl	8000aa8 <ProcessCommand>
	                }
	            }
	            ATC_RxFlush(&ESP); // Wyczyść bufor dla nowych danych
 8000cb4:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <ProcessIncomingData+0x90>)
 8000cb6:	f006 fd81 	bl	80077bc <ATC_RxFlush>
	        }

	        // Wywołanie głównej pętli ATC
	        ATC_Loop(&ESP);
 8000cba:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <ProcessIncomingData+0x90>)
 8000cbc:	f006 ff77 	bl	8007bae <ATC_Loop>
	    while (1) {
 8000cc0:	e7bf      	b.n	8000c42 <ProcessIncomingData+0xa>
 8000cc2:	bf00      	nop
 8000cc4:	08008538 	.word	0x08008538
 8000cc8:	20000078 	.word	0x20000078
 8000ccc:	200003d0 	.word	0x200003d0
 8000cd0:	08008444 	.word	0x08008444

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f001 f9ec 	bl	80020b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f8cd 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f7ff fc59 	bl	8000598 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce6:	f7ff fc31 	bl	800054c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000cea:	f000 ffcb 	bl	8001c84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cee:	f001 f911 	bl	8001f14 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000cf2:	f000 ff97 	bl	8001c24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000cf6:	f000 fa83 	bl	8001200 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cfa:	f000 fb3f 	bl	800137c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cfe:	f000 fb93 	bl	8001428 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000d02:	f000 fc85 	bl	8001610 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000d06:	f000 fad5 	bl	80012b4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000d0a:	f000 fc49 	bl	80015a0 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000d0e:	f000 fbe1 	bl	80014d4 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000d12:	f000 fcd7 	bl	80016c4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  ATC_Init(&ESP, &huart2, 512, "ESP");
 8000d16:	4b45      	ldr	r3, [pc, #276]	@ (8000e2c <main+0x158>)
 8000d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d1c:	4944      	ldr	r1, [pc, #272]	@ (8000e30 <main+0x15c>)
 8000d1e:	4845      	ldr	r0, [pc, #276]	@ (8000e34 <main+0x160>)
 8000d20:	f006 fea0 	bl	8007a64 <ATC_Init>
  ATC_SendReceive(&ESP, "AT\r\n", 1000, NULL, 1000, 0);
 8000d24:	2300      	movs	r3, #0
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d34:	4940      	ldr	r1, [pc, #256]	@ (8000e38 <main+0x164>)
 8000d36:	483f      	ldr	r0, [pc, #252]	@ (8000e34 <main+0x160>)
 8000d38:	f006 ff47 	bl	8007bca <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWMODE=1\r\n", 1000, NULL, 1000, 0);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2300      	movs	r3, #0
 8000d48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d4c:	493b      	ldr	r1, [pc, #236]	@ (8000e3c <main+0x168>)
 8000d4e:	4839      	ldr	r0, [pc, #228]	@ (8000e34 <main+0x160>)
 8000d50:	f006 ff3b 	bl	8007bca <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMUX=1\r\n", 1000, NULL, 1000, 0);
 8000d54:	2300      	movs	r3, #0
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d64:	4936      	ldr	r1, [pc, #216]	@ (8000e40 <main+0x16c>)
 8000d66:	4833      	ldr	r0, [pc, #204]	@ (8000e34 <main+0x160>)
 8000d68:	f006 ff2f 	bl	8007bca <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMODE=1\r\n", 1000, NULL, 1000, 0);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2300      	movs	r3, #0
 8000d78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d7c:	4931      	ldr	r1, [pc, #196]	@ (8000e44 <main+0x170>)
 8000d7e:	482d      	ldr	r0, [pc, #180]	@ (8000e34 <main+0x160>)
 8000d80:	f006 ff23 	bl	8007bca <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPSERVER=1,80\r\n", 1000, NULL, 1000, 0);
 8000d84:	2300      	movs	r3, #0
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d94:	492c      	ldr	r1, [pc, #176]	@ (8000e48 <main+0x174>)
 8000d96:	4827      	ldr	r0, [pc, #156]	@ (8000e34 <main+0x160>)
 8000d98:	f006 ff17 	bl	8007bca <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWJAP=\"DeathLock\",\"\"\r\n", 10000, NULL, 10000, 0);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000dac:	4927      	ldr	r1, [pc, #156]	@ (8000e4c <main+0x178>)
 8000dae:	4821      	ldr	r0, [pc, #132]	@ (8000e34 <main+0x160>)
 8000db0:	f006 ff0b 	bl	8007bca <ATC_SendReceive>

  const char *readyMsg = "STM32 ready to receive data from ESP...\r\n";
 8000db4:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <main+0x17c>)
 8000db6:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fa47 	bl	800024c <strlen>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	4822      	ldr	r0, [pc, #136]	@ (8000e54 <main+0x180>)
 8000dca:	f004 fd57 	bl	800587c <HAL_UART_Transmit>



  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000dce:	213c      	movs	r1, #60	@ 0x3c
 8000dd0:	4821      	ldr	r0, [pc, #132]	@ (8000e58 <main+0x184>)
 8000dd2:	f003 fe57 	bl	8004a84 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000dd6:	213c      	movs	r1, #60	@ 0x3c
 8000dd8:	4820      	ldr	r0, [pc, #128]	@ (8000e5c <main+0x188>)
 8000dda:	f003 fe53 	bl	8004a84 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000dde:	213c      	movs	r1, #60	@ 0x3c
 8000de0:	481f      	ldr	r0, [pc, #124]	@ (8000e60 <main+0x18c>)
 8000de2:	f003 fe4f 	bl	8004a84 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000de6:	213c      	movs	r1, #60	@ 0x3c
 8000de8:	481e      	ldr	r0, [pc, #120]	@ (8000e64 <main+0x190>)
 8000dea:	f003 fe4b 	bl	8004a84 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	481d      	ldr	r0, [pc, #116]	@ (8000e68 <main+0x194>)
 8000df2:	f003 fca7 	bl	8004744 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000df6:	210c      	movs	r1, #12
 8000df8:	481b      	ldr	r0, [pc, #108]	@ (8000e68 <main+0x194>)
 8000dfa:	f003 fca3 	bl	8004744 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8000dfe:	481b      	ldr	r0, [pc, #108]	@ (8000e6c <main+0x198>)
 8000e00:	f003 fbd0 	bl	80045a4 <HAL_TIM_Base_Start_IT>

  drv8835_init();
 8000e04:	f7ff fe2e 	bl	8000a64 <drv8835_init>
  motor_init(&motorA, &htim4);
 8000e08:	4915      	ldr	r1, [pc, #84]	@ (8000e60 <main+0x18c>)
 8000e0a:	4819      	ldr	r0, [pc, #100]	@ (8000e70 <main+0x19c>)
 8000e0c:	f7ff fd91 	bl	8000932 <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 8000e10:	2101      	movs	r1, #1
 8000e12:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 8000e74 <main+0x1a0>
 8000e16:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8000e74 <main+0x1a0>
 8000e1a:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000e1e:	4816      	ldr	r0, [pc, #88]	@ (8000e78 <main+0x1a4>)
 8000e20:	f7ff fcd8 	bl	80007d4 <pid_init>
  ProcessIncomingData();
 8000e24:	f7ff ff08 	bl	8000c38 <ProcessIncomingData>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <main+0x154>
 8000e2c:	08008540 	.word	0x08008540
 8000e30:	20000348 	.word	0x20000348
 8000e34:	20000078 	.word	0x20000078
 8000e38:	08008544 	.word	0x08008544
 8000e3c:	0800854c 	.word	0x0800854c
 8000e40:	0800855c 	.word	0x0800855c
 8000e44:	0800856c 	.word	0x0800856c
 8000e48:	0800857c 	.word	0x0800857c
 8000e4c:	08008590 	.word	0x08008590
 8000e50:	080085ac 	.word	0x080085ac
 8000e54:	200003d0 	.word	0x200003d0
 8000e58:	200000e8 	.word	0x200000e8
 8000e5c:	20000180 	.word	0x20000180
 8000e60:	200001cc 	.word	0x200001cc
 8000e64:	200002b0 	.word	0x200002b0
 8000e68:	20000134 	.word	0x20000134
 8000e6c:	20000264 	.word	0x20000264
 8000e70:	200000b4 	.word	0x200000b4
 8000e74:	3d4ccccd 	.word	0x3d4ccccd
 8000e78:	200000cc 	.word	0x200000cc

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	@ 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2234      	movs	r2, #52	@ 0x34
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 f9e2 	bl	8008254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ea0:	f002 f9cc 	bl	800323c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <SystemClock_Config+0xdc>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8000f58 <SystemClock_Config+0xdc>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb0:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <SystemClock_Config+0xdc>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <SystemClock_Config+0xe0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ec4:	4a25      	ldr	r2, [pc, #148]	@ (8000f5c <SystemClock_Config+0xe0>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <SystemClock_Config+0xe0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000edc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ee0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ef0:	2360      	movs	r3, #96	@ 0x60
 8000ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 f9f9 	bl	80032fc <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f10:	f000 f826 	bl	8000f60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f14:	f002 f9a2 	bl	800325c <HAL_PWREx_EnableOverDrive>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f1e:	f000 f81f 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2302      	movs	r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fc8a 	bl	8003858 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f4a:	f000 f809 	bl	8000f60 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	@ 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <Error_Handler+0x8>

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_MspInit+0x44>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <NMI_Handler+0x4>

08000fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100a:	f001 f891 	bl	8002130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <DMA1_Stream5_IRQHandler+0x10>)
 800101a:	f001 fb7f 	bl	800271c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000458 	.word	0x20000458

08001028 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <DMA1_Stream6_IRQHandler+0x10>)
 800102e:	f001 fb75 	bl	800271c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200004b8 	.word	0x200004b8

0800103c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001042:	f003 fdad 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200000e8 	.word	0x200000e8

08001050 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001056:	f003 fda3 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000e8 	.word	0x200000e8

08001064 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800106a:	f003 fd99 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200000e8 	.word	0x200000e8

08001078 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <TIM1_CC_IRQHandler+0x10>)
 800107e:	f003 fd8f 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000e8 	.word	0x200000e8

0800108c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <TIM2_IRQHandler+0x10>)
 8001092:	f003 fd85 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000134 	.word	0x20000134

080010a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <TIM3_IRQHandler+0x10>)
 80010a6:	f003 fd7b 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000180 	.word	0x20000180

080010b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <TIM4_IRQHandler+0x10>)
 80010ba:	f003 fd71 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001cc 	.word	0x200001cc

080010c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <USART2_IRQHandler+0x10>)
 80010ce:	f004 fdf3 	bl	8005cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000348 	.word	0x20000348

080010dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <USART3_IRQHandler+0x10>)
 80010e2:	f004 fde9 	bl	8005cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200003d0 	.word	0x200003d0

080010f0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80010f6:	f003 fd53 	bl	8004ba0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80010fa:	4803      	ldr	r0, [pc, #12]	@ (8001108 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80010fc:	f003 fd50 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200002b0 	.word	0x200002b0
 8001108:	200002fc 	.word	0x200002fc

0800110c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001112:	f003 fd45 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200002b0 	.word	0x200002b0

08001120 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001126:	f003 fd3b 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200002b0 	.word	0x200002b0

08001134 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <TIM8_CC_IRQHandler+0x10>)
 800113a:	f003 fd31 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200002b0 	.word	0x200002b0

08001148 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <TIM5_IRQHandler+0x10>)
 800114e:	f003 fd27 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000218 	.word	0x20000218

0800115c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <TIM6_DAC_IRQHandler+0x10>)
 8001162:	f003 fd1d 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000264 	.word	0x20000264

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f007 f8b8 	bl	8008314 <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20080000 	.word	0x20080000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	200000e4 	.word	0x200000e4
 80011d8:	20000b48 	.word	0x20000b48

080011dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	@ 0x30
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2224      	movs	r2, #36	@ 0x24
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f007 f820 	bl	8008254 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <MX_TIM1_Init+0xac>)
 8001220:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <MX_TIM1_Init+0xb0>)
 8001222:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001224:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_TIM1_Init+0xac>)
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <MX_TIM1_Init+0xac>)
 800122c:	2210      	movs	r2, #16
 800122e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001230:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <MX_TIM1_Init+0xac>)
 8001232:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001236:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_TIM1_Init+0xac>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <MX_TIM1_Init+0xac>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_TIM1_Init+0xac>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124a:	2303      	movs	r3, #3
 800124c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001252:	2301      	movs	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800125a:	230f      	movs	r3, #15
 800125c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001262:	2301      	movs	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800126a:	230f      	movs	r3, #15
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4619      	mov	r1, r3
 8001274:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_TIM1_Init+0xac>)
 8001276:	f003 fb5f 	bl	8004938 <HAL_TIM_Encoder_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001280:	f7ff fe6e 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_TIM1_Init+0xac>)
 8001296:	f004 f9f7 	bl	8005688 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012a0:	f7ff fe5e 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3730      	adds	r7, #48	@ 0x30
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200000e8 	.word	0x200000e8
 80012b0:	40010000 	.word	0x40010000

080012b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
 80012d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d8:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <MX_TIM2_Init+0xc4>)
 80012da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80012e0:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <MX_TIM2_Init+0xc4>)
 80012e2:	222f      	movs	r2, #47	@ 0x2f
 80012e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <MX_TIM2_Init+0xc4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <MX_TIM2_Init+0xc4>)
 80012ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <MX_TIM2_Init+0xc4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_TIM2_Init+0xc4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001300:	481d      	ldr	r0, [pc, #116]	@ (8001378 <MX_TIM2_Init+0xc4>)
 8001302:	f003 f9c7 	bl	8004694 <HAL_TIM_PWM_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800130c:	f7ff fe28 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4816      	ldr	r0, [pc, #88]	@ (8001378 <MX_TIM2_Init+0xc4>)
 8001320:	f004 f9b2 	bl	8005688 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800132a:	f7ff fe19 	bl	8000f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	@ 0x60
 8001330:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <MX_TIM2_Init+0xc4>)
 8001346:	f003 fd33 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001350:	f7ff fe06 	bl	8000f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	220c      	movs	r2, #12
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	@ (8001378 <MX_TIM2_Init+0xc4>)
 800135c:	f003 fd28 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001366:	f7ff fdfb 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800136a:	4803      	ldr	r0, [pc, #12]	@ (8001378 <MX_TIM2_Init+0xc4>)
 800136c:	f000 fbbc 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	@ 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000134 	.word	0x20000134

0800137c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	@ 0x30
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f006 ff62 	bl	8008254 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <MX_TIM3_Init+0xa4>)
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <MX_TIM3_Init+0xa8>)
 800139e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_TIM3_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <MX_TIM3_Init+0xa4>)
 80013a8:	2210      	movs	r2, #16
 80013aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_TIM3_Init+0xa4>)
 80013ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_TIM3_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <MX_TIM3_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c0:	2303      	movs	r3, #3
 80013c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013d0:	230f      	movs	r3, #15
 80013d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80013e0:	230f      	movs	r3, #15
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	@ (8001420 <MX_TIM3_Init+0xa4>)
 80013ec:	f003 faa4 	bl	8004938 <HAL_TIM_Encoder_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013f6:	f7ff fdb3 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	@ (8001420 <MX_TIM3_Init+0xa4>)
 8001408:	f004 f93e 	bl	8005688 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001412:	f7ff fda5 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3730      	adds	r7, #48	@ 0x30
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000180 	.word	0x20000180
 8001424:	40000400 	.word	0x40000400

08001428 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	@ 0x30
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2224      	movs	r2, #36	@ 0x24
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f006 ff0c 	bl	8008254 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <MX_TIM4_Init+0xa4>)
 8001448:	4a21      	ldr	r2, [pc, #132]	@ (80014d0 <MX_TIM4_Init+0xa8>)
 800144a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <MX_TIM4_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <MX_TIM4_Init+0xa4>)
 8001454:	2210      	movs	r2, #16
 8001456:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001458:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_TIM4_Init+0xa4>)
 800145a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800145e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_TIM4_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <MX_TIM4_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800146c:	2303      	movs	r3, #3
 800146e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800147c:	230f      	movs	r3, #15
 800147e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001484:	2301      	movs	r3, #1
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800148c:	230f      	movs	r3, #15
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	@ (80014cc <MX_TIM4_Init+0xa4>)
 8001498:	f003 fa4e 	bl	8004938 <HAL_TIM_Encoder_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80014a2:	f7ff fd5d 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <MX_TIM4_Init+0xa4>)
 80014b4:	f004 f8e8 	bl	8005688 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014be:	f7ff fd4f 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3730      	adds	r7, #48	@ 0x30
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200001cc 	.word	0x200001cc
 80014d0:	40000800 	.word	0x40000800

080014d4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <MX_TIM5_Init+0xc4>)
 80014fa:	4a28      	ldr	r2, [pc, #160]	@ (800159c <MX_TIM5_Init+0xc8>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <MX_TIM5_Init+0xc4>)
 8001500:	222f      	movs	r2, #47	@ 0x2f
 8001502:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <MX_TIM5_Init+0xc4>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <MX_TIM5_Init+0xc4>)
 800150c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001510:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <MX_TIM5_Init+0xc4>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <MX_TIM5_Init+0xc4>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800151e:	481e      	ldr	r0, [pc, #120]	@ (8001598 <MX_TIM5_Init+0xc4>)
 8001520:	f003 f8b8 	bl	8004694 <HAL_TIM_PWM_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800152a:	f7ff fd19 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4816      	ldr	r0, [pc, #88]	@ (8001598 <MX_TIM5_Init+0xc4>)
 800153e:	f004 f8a3 	bl	8005688 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001548:	f7ff fd0a 	bl	8000f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154c:	2360      	movs	r3, #96	@ 0x60
 800154e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	@ (8001598 <MX_TIM5_Init+0xc4>)
 8001564:	f003 fc24 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800156e:	f7ff fcf7 	bl	8000f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	220c      	movs	r2, #12
 8001576:	4619      	mov	r1, r3
 8001578:	4807      	ldr	r0, [pc, #28]	@ (8001598 <MX_TIM5_Init+0xc4>)
 800157a:	f003 fc19 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001584:	f7ff fcec 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001588:	4803      	ldr	r0, [pc, #12]	@ (8001598 <MX_TIM5_Init+0xc4>)
 800158a:	f000 faad 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	@ 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000218 	.word	0x20000218
 800159c:	40000c00 	.word	0x40000c00

080015a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_TIM6_Init+0x68>)
 80015b2:	4a16      	ldr	r2, [pc, #88]	@ (800160c <MX_TIM6_Init+0x6c>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_TIM6_Init+0x68>)
 80015b8:	f242 527f 	movw	r2, #9599	@ 0x257f
 80015bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_TIM6_Init+0x68>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80015c4:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <MX_TIM6_Init+0x68>)
 80015c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_TIM6_Init+0x68>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <MX_TIM6_Init+0x68>)
 80015d4:	f002 ff8e 	bl	80044f4 <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80015de:	f7ff fcbf 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	@ (8001608 <MX_TIM6_Init+0x68>)
 80015f0:	f004 f84a 	bl	8005688 <HAL_TIMEx_MasterConfigSynchronization>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80015fa:	f7ff fcb1 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000264 	.word	0x20000264
 800160c:	40001000 	.word	0x40001000

08001610 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	@ 0x30
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	2224      	movs	r2, #36	@ 0x24
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f006 fe18 	bl	8008254 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800162e:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <MX_TIM8_Init+0xac>)
 8001630:	4a23      	ldr	r2, [pc, #140]	@ (80016c0 <MX_TIM8_Init+0xb0>)
 8001632:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001634:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <MX_TIM8_Init+0xac>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <MX_TIM8_Init+0xac>)
 800163c:	2210      	movs	r2, #16
 800163e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001640:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <MX_TIM8_Init+0xac>)
 8001642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001646:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <MX_TIM8_Init+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800164e:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <MX_TIM8_Init+0xac>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <MX_TIM8_Init+0xac>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800165a:	2303      	movs	r3, #3
 800165c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800166a:	230f      	movs	r3, #15
 800166c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001672:	2301      	movs	r3, #1
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800167a:	230f      	movs	r3, #15
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4619      	mov	r1, r3
 8001684:	480d      	ldr	r0, [pc, #52]	@ (80016bc <MX_TIM8_Init+0xac>)
 8001686:	f003 f957 	bl	8004938 <HAL_TIM_Encoder_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001690:	f7ff fc66 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_TIM8_Init+0xac>)
 80016a6:	f003 ffef 	bl	8005688 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80016b0:	f7ff fc56 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	3730      	adds	r7, #48	@ 0x30
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200002b0 	.word	0x200002b0
 80016c0:	40010400 	.word	0x40010400

080016c4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	615a      	str	r2, [r3, #20]
 80016da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <MX_TIM12_Init+0x84>)
 80016de:	4a1b      	ldr	r2, [pc, #108]	@ (800174c <MX_TIM12_Init+0x88>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <MX_TIM12_Init+0x84>)
 80016e4:	225f      	movs	r2, #95	@ 0x5f
 80016e6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <MX_TIM12_Init+0x84>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <MX_TIM12_Init+0x84>)
 80016f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f6:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <MX_TIM12_Init+0x84>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <MX_TIM12_Init+0x84>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001702:	4811      	ldr	r0, [pc, #68]	@ (8001748 <MX_TIM12_Init+0x84>)
 8001704:	f002 ffc6 	bl	8004694 <HAL_TIM_PWM_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800170e:	f7ff fc27 	bl	8000f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001712:	2360      	movs	r3, #96	@ 0x60
 8001714:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2204      	movs	r2, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4807      	ldr	r0, [pc, #28]	@ (8001748 <MX_TIM12_Init+0x84>)
 800172a:	f003 fb41 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001734:	f7ff fc14 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001738:	4803      	ldr	r0, [pc, #12]	@ (8001748 <MX_TIM12_Init+0x84>)
 800173a:	f000 f9d5 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200002fc 	.word	0x200002fc
 800174c:	40001800 	.word	0x40001800

08001750 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b090      	sub	sp, #64	@ 0x40
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a93      	ldr	r2, [pc, #588]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x26c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d149      	bne.n	8001806 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001772:	4b93      	ldr	r3, [pc, #588]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	4a92      	ldr	r2, [pc, #584]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6453      	str	r3, [r2, #68]	@ 0x44
 800177e:	4b90      	ldr	r3, [pc, #576]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001788:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800178a:	4b8d      	ldr	r3, [pc, #564]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a8c      	ldr	r2, [pc, #560]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001790:	f043 0310 	orr.w	r3, r3, #16
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b8a      	ldr	r3, [pc, #552]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 80017a2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017bc:	4619      	mov	r1, r3
 80017be:	4881      	ldr	r0, [pc, #516]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x274>)
 80017c0:	f001 fa22 	bl	8002c08 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	2018      	movs	r0, #24
 80017ca:	f000 fdd0 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017ce:	2018      	movs	r0, #24
 80017d0:	f000 fde9 	bl	80023a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2019      	movs	r0, #25
 80017da:	f000 fdc8 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017de:	2019      	movs	r0, #25
 80017e0:	f000 fde1 	bl	80023a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	201a      	movs	r0, #26
 80017ea:	f000 fdc0 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017ee:	201a      	movs	r0, #26
 80017f0:	f000 fdd9 	bl	80023a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	201b      	movs	r0, #27
 80017fa:	f000 fdb8 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017fe:	201b      	movs	r0, #27
 8001800:	f000 fdd1 	bl	80023a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001804:	e0d5      	b.n	80019b2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6f      	ldr	r2, [pc, #444]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0x278>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d14c      	bne.n	80018aa <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001810:	4b6b      	ldr	r3, [pc, #428]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a6a      	ldr	r2, [pc, #424]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
 800181c:	4b68      	ldr	r3, [pc, #416]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	623b      	str	r3, [r7, #32]
 8001826:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b65      	ldr	r3, [pc, #404]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182c:	4a64      	ldr	r2, [pc, #400]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6313      	str	r3, [r2, #48]	@ 0x30
 8001834:	4b62      	ldr	r3, [pc, #392]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	4b5f      	ldr	r3, [pc, #380]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001844:	4a5e      	ldr	r2, [pc, #376]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	6313      	str	r3, [r2, #48]	@ 0x30
 800184c:	4b5c      	ldr	r3, [pc, #368]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8001858:	2340      	movs	r3, #64	@ 0x40
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001868:	2302      	movs	r3, #2
 800186a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001870:	4619      	mov	r1, r3
 8001872:	4856      	ldr	r0, [pc, #344]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x27c>)
 8001874:	f001 f9c8 	bl	8002c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001878:	2320      	movs	r3, #32
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001888:	2302      	movs	r3, #2
 800188a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001890:	4619      	mov	r1, r3
 8001892:	484f      	ldr	r0, [pc, #316]	@ (80019d0 <HAL_TIM_Encoder_MspInit+0x280>)
 8001894:	f001 f9b8 	bl	8002c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	201d      	movs	r0, #29
 800189e:	f000 fd66 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018a2:	201d      	movs	r0, #29
 80018a4:	f000 fd7f 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 80018a8:	e083      	b.n	80019b2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a49      	ldr	r2, [pc, #292]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0x284>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d131      	bne.n	8001918 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018b4:	4b42      	ldr	r3, [pc, #264]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	4a41      	ldr	r2, [pc, #260]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c0:	4b3f      	ldr	r3, [pc, #252]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018cc:	4b3c      	ldr	r3, [pc, #240]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	4a3b      	ldr	r2, [pc, #236]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d8:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 80018e4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018f6:	2302      	movs	r3, #2
 80018f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018fe:	4619      	mov	r1, r3
 8001900:	4835      	ldr	r0, [pc, #212]	@ (80019d8 <HAL_TIM_Encoder_MspInit+0x288>)
 8001902:	f001 f981 	bl	8002c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	201e      	movs	r0, #30
 800190c:	f000 fd2f 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001910:	201e      	movs	r0, #30
 8001912:	f000 fd48 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 8001916:	e04c      	b.n	80019b2 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2f      	ldr	r2, [pc, #188]	@ (80019dc <HAL_TIM_Encoder_MspInit+0x28c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d147      	bne.n	80019b2 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001922:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a26      	ldr	r2, [pc, #152]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a20      	ldr	r2, [pc, #128]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x270>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8001952:	23c0      	movs	r3, #192	@ 0xc0
 8001954:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001962:	2303      	movs	r3, #3
 8001964:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800196a:	4619      	mov	r1, r3
 800196c:	481c      	ldr	r0, [pc, #112]	@ (80019e0 <HAL_TIM_Encoder_MspInit+0x290>)
 800196e:	f001 f94b 	bl	8002c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	202b      	movs	r0, #43	@ 0x2b
 8001978:	f000 fcf9 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800197c:	202b      	movs	r0, #43	@ 0x2b
 800197e:	f000 fd12 	bl	80023a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	202c      	movs	r0, #44	@ 0x2c
 8001988:	f000 fcf1 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800198c:	202c      	movs	r0, #44	@ 0x2c
 800198e:	f000 fd0a 	bl	80023a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	202d      	movs	r0, #45	@ 0x2d
 8001998:	f000 fce9 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800199c:	202d      	movs	r0, #45	@ 0x2d
 800199e:	f000 fd02 	bl	80023a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	202e      	movs	r0, #46	@ 0x2e
 80019a8:	f000 fce1 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80019ac:	202e      	movs	r0, #46	@ 0x2e
 80019ae:	f000 fcfa 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3740      	adds	r7, #64	@ 0x40
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40000400 	.word	0x40000400
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40000800 	.word	0x40000800
 80019d8:	40020c00 	.word	0x40020c00
 80019dc:	40010400 	.word	0x40010400
 80019e0:	40020800 	.word	0x40020800

080019e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f4:	d114      	bne.n	8001a20 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f6:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <HAL_TIM_PWM_MspInit+0xac>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	4a25      	ldr	r2, [pc, #148]	@ (8001a90 <HAL_TIM_PWM_MspInit+0xac>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a02:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <HAL_TIM_PWM_MspInit+0xac>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	201c      	movs	r0, #28
 8001a14:	f000 fcab 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a18:	201c      	movs	r0, #28
 8001a1a:	f000 fcc4 	bl	80023a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001a1e:	e032      	b.n	8001a86 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1b      	ldr	r2, [pc, #108]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xb0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d114      	bne.n	8001a54 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_TIM_PWM_MspInit+0xac>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a18      	ldr	r2, [pc, #96]	@ (8001a90 <HAL_TIM_PWM_MspInit+0xac>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_TIM_PWM_MspInit+0xac>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2032      	movs	r0, #50	@ 0x32
 8001a48:	f000 fc91 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a4c:	2032      	movs	r0, #50	@ 0x32
 8001a4e:	f000 fcaa 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 8001a52:	e018      	b.n	8001a86 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0f      	ldr	r2, [pc, #60]	@ (8001a98 <HAL_TIM_PWM_MspInit+0xb4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d113      	bne.n	8001a86 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_TIM_PWM_MspInit+0xac>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <HAL_TIM_PWM_MspInit+0xac>)
 8001a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_TIM_PWM_MspInit+0xac>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	202b      	movs	r0, #43	@ 0x2b
 8001a7c:	f000 fc77 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001a80:	202b      	movs	r0, #43	@ 0x2b
 8001a82:	f000 fc90 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40000c00 	.word	0x40000c00
 8001a98:	40001800 	.word	0x40001800

08001a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <HAL_TIM_Base_MspInit+0x44>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d113      	bne.n	8001ad6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <HAL_TIM_Base_MspInit+0x48>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <HAL_TIM_Base_MspInit+0x48>)
 8001ab4:	f043 0310 	orr.w	r3, r3, #16
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_TIM_Base_MspInit+0x48>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2036      	movs	r0, #54	@ 0x36
 8001acc:	f000 fc4f 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ad0:	2036      	movs	r0, #54	@ 0x36
 8001ad2:	f000 fc68 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40001000 	.word	0x40001000
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	@ 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b08:	d139      	bne.n	8001b7e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b41      	ldr	r3, [pc, #260]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a40      	ldr	r2, [pc, #256]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b3e      	ldr	r3, [pc, #248]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b3b      	ldr	r3, [pc, #236]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a3a      	ldr	r2, [pc, #232]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b38      	ldr	r3, [pc, #224]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	482f      	ldr	r0, [pc, #188]	@ (8001c14 <HAL_TIM_MspPostInit+0x12c>)
 8001b56:	f001 f857 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 8001b5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4828      	ldr	r0, [pc, #160]	@ (8001c18 <HAL_TIM_MspPostInit+0x130>)
 8001b78:	f001 f846 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001b7c:	e043      	b.n	8001c06 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a26      	ldr	r2, [pc, #152]	@ (8001c1c <HAL_TIM_MspPostInit+0x134>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d11c      	bne.n	8001bc2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	4a20      	ldr	r2, [pc, #128]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b94:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001ba0:	2309      	movs	r3, #9
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4816      	ldr	r0, [pc, #88]	@ (8001c14 <HAL_TIM_MspPostInit+0x12c>)
 8001bbc:	f001 f824 	bl	8002c08 <HAL_GPIO_Init>
}
 8001bc0:	e021      	b.n	8001c06 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a16      	ldr	r2, [pc, #88]	@ (8001c20 <HAL_TIM_MspPostInit+0x138>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d11c      	bne.n	8001c06 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <HAL_TIM_MspPostInit+0x128>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001be4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001bf6:	2309      	movs	r3, #9
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <HAL_TIM_MspPostInit+0x130>)
 8001c02:	f001 f801 	bl	8002c08 <HAL_GPIO_Init>
}
 8001c06:	bf00      	nop
 8001c08:	3730      	adds	r7, #48	@ 0x30
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40000c00 	.word	0x40000c00
 8001c20:	40001800 	.word	0x40001800

08001c24 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c28:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c2a:	4a15      	ldr	r2, [pc, #84]	@ (8001c80 <MX_USART2_UART_Init+0x5c>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	@ (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c68:	f003 fdba 	bl	80057e0 <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c72:	f7ff f975 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000348 	.word	0x20000348
 8001c80:	40004400 	.word	0x40004400

08001c84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001c8a:	4a15      	ldr	r2, [pc, #84]	@ (8001ce0 <MX_USART3_UART_Init+0x5c>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_USART3_UART_Init+0x58>)
 8001cc8:	f003 fd8a 	bl	80057e0 <HAL_UART_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cd2:	f7ff f945 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200003d0 	.word	0x200003d0
 8001ce0:	40004800 	.word	0x40004800

08001ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0b0      	sub	sp, #192	@ 0xc0
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	2290      	movs	r2, #144	@ 0x90
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f006 faa5 	bl	8008254 <memset>
  if(uartHandle->Instance==USART2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a79      	ldr	r2, [pc, #484]	@ (8001ef4 <HAL_UART_MspInit+0x210>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f040 80a0 	bne.w	8001e56 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 ffbe 	bl	8003ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d2e:	f7ff f917 	bl	8000f60 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d32:	4b71      	ldr	r3, [pc, #452]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a70      	ldr	r2, [pc, #448]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b68      	ldr	r3, [pc, #416]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d62:	2360      	movs	r3, #96	@ 0x60
 8001d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d80:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d84:	4619      	mov	r1, r3
 8001d86:	485d      	ldr	r0, [pc, #372]	@ (8001efc <HAL_UART_MspInit+0x218>)
 8001d88:	f000 ff3e 	bl	8002c08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001d8e:	4a5d      	ldr	r2, [pc, #372]	@ (8001f04 <HAL_UART_MspInit+0x220>)
 8001d90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d92:	4b5b      	ldr	r3, [pc, #364]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001d94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d9a:	4b59      	ldr	r3, [pc, #356]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da0:	4b57      	ldr	r3, [pc, #348]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001da6:	4b56      	ldr	r3, [pc, #344]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001da8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dae:	4b54      	ldr	r3, [pc, #336]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001db4:	4b52      	ldr	r3, [pc, #328]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001dba:	4b51      	ldr	r3, [pc, #324]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001dcc:	484c      	ldr	r0, [pc, #304]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001dce:	f000 fb05 	bl	80023dc <HAL_DMA_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001dd8:	f7ff f8c2 	bl	8000f60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a48      	ldr	r2, [pc, #288]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001de0:	675a      	str	r2, [r3, #116]	@ 0x74
 8001de2:	4a47      	ldr	r2, [pc, #284]	@ (8001f00 <HAL_UART_MspInit+0x21c>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001de8:	4b47      	ldr	r3, [pc, #284]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001dea:	4a48      	ldr	r2, [pc, #288]	@ (8001f0c <HAL_UART_MspInit+0x228>)
 8001dec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001dee:	4b46      	ldr	r3, [pc, #280]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001df0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001df4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df6:	4b44      	ldr	r3, [pc, #272]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001df8:	2240      	movs	r2, #64	@ 0x40
 8001dfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfc:	4b42      	ldr	r3, [pc, #264]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e02:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001e04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e08:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e10:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e16:	4b3c      	ldr	r3, [pc, #240]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e22:	4b39      	ldr	r3, [pc, #228]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e28:	4837      	ldr	r0, [pc, #220]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001e2a:	f000 fad7 	bl	80023dc <HAL_DMA_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001e34:	f7ff f894 	bl	8000f60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a33      	ldr	r2, [pc, #204]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001e3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e3e:	4a32      	ldr	r2, [pc, #200]	@ (8001f08 <HAL_UART_MspInit+0x224>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2026      	movs	r0, #38	@ 0x26
 8001e4a:	f000 fa90 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e4e:	2026      	movs	r0, #38	@ 0x26
 8001e50:	f000 faa9 	bl	80023a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e54:	e049      	b.n	8001eea <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f10 <HAL_UART_MspInit+0x22c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d144      	bne.n	8001eea <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e64:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 ff18 	bl	8003ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001e7a:	f7ff f871 	bl	8000f60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e96:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_UART_MspInit+0x214>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001eae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ece:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4809      	ldr	r0, [pc, #36]	@ (8001efc <HAL_UART_MspInit+0x218>)
 8001ed6:	f000 fe97 	bl	8002c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2027      	movs	r0, #39	@ 0x27
 8001ee0:	f000 fa45 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ee4:	2027      	movs	r0, #39	@ 0x27
 8001ee6:	f000 fa5e 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	37c0      	adds	r7, #192	@ 0xc0
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40004400 	.word	0x40004400
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	20000458 	.word	0x20000458
 8001f04:	40026088 	.word	0x40026088
 8001f08:	200004b8 	.word	0x200004b8
 8001f0c:	400260a0 	.word	0x400260a0
 8001f10:	40004800 	.word	0x40004800

08001f14 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f22:	2206      	movs	r2, #6
 8001f24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f28:	2202      	movs	r2, #2
 8001f2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f34:	2202      	movs	r2, #2
 8001f36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f58:	f001 f835 	bl	8002fc6 <HAL_PCD_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f62:	f7fe fffd 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000518 	.word	0x20000518

08001f70 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b0ae      	sub	sp, #184	@ 0xb8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2290      	movs	r2, #144	@ 0x90
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f006 f95f 	bl	8008254 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f9e:	d159      	bne.n	8002054 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001fa0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001fa4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fe77 	bl	8003ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fbc:	f7fe ffd0 	bl	8000f60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	4b26      	ldr	r3, [pc, #152]	@ (800205c <HAL_PCD_MspInit+0xec>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	4a25      	ldr	r2, [pc, #148]	@ (800205c <HAL_PCD_MspInit+0xec>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fcc:	4b23      	ldr	r3, [pc, #140]	@ (800205c <HAL_PCD_MspInit+0xec>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fd8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ff2:	230a      	movs	r3, #10
 8001ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4818      	ldr	r0, [pc, #96]	@ (8002060 <HAL_PCD_MspInit+0xf0>)
 8002000:	f000 fe02 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002018:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800201c:	4619      	mov	r1, r3
 800201e:	4810      	ldr	r0, [pc, #64]	@ (8002060 <HAL_PCD_MspInit+0xf0>)
 8002020:	f000 fdf2 	bl	8002c08 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002024:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <HAL_PCD_MspInit+0xec>)
 8002026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002028:	4a0c      	ldr	r2, [pc, #48]	@ (800205c <HAL_PCD_MspInit+0xec>)
 800202a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800202e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002030:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_PCD_MspInit+0xec>)
 8002032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_PCD_MspInit+0xec>)
 800203e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002040:	4a06      	ldr	r2, [pc, #24]	@ (800205c <HAL_PCD_MspInit+0xec>)
 8002042:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002046:	6453      	str	r3, [r2, #68]	@ 0x44
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <HAL_PCD_MspInit+0xec>)
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002054:	bf00      	nop
 8002056:	37b8      	adds	r7, #184	@ 0xb8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000

08002064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800209c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002068:	f7ff f8b8 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800206c:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800206e:	490d      	ldr	r1, [pc, #52]	@ (80020a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002074:	e002      	b.n	800207c <LoopCopyDataInit>

08002076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207a:	3304      	adds	r3, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002080:	d3f9      	bcc.n	8002076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002082:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002084:	4c0a      	ldr	r4, [pc, #40]	@ (80020b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002088:	e001      	b.n	800208e <LoopFillZerobss>

0800208a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800208c:	3204      	adds	r2, #4

0800208e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002090:	d3fb      	bcc.n	800208a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002092:	f006 f945 	bl	8008320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002096:	f7fe fe1d 	bl	8000cd4 <main>
  bx  lr    
 800209a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800209c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80020a8:	0800870c 	.word	0x0800870c
  ldr r2, =_sbss
 80020ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80020b0:	20000b44 	.word	0x20000b44

080020b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC_IRQHandler>

080020b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ba:	2003      	movs	r0, #3
 80020bc:	f000 f94c 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c0:	2000      	movs	r0, #0
 80020c2:	f000 f805 	bl	80020d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c6:	f7fe ff51 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <HAL_InitTick+0x54>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_InitTick+0x58>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f967 	bl	80023c2 <HAL_SYSTICK_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00e      	b.n	800211c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0f      	cmp	r3, #15
 8002102:	d80a      	bhi.n	800211a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002104:	2200      	movs	r2, #0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f000 f92f 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002110:	4a06      	ldr	r2, [pc, #24]	@ (800212c <HAL_InitTick+0x5c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000000 	.word	0x20000000
 8002128:	20000008 	.word	0x20000008
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008
 8002154:	200009f8 	.word	0x200009f8

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200009f8 	.word	0x200009f8

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002196:	bf00      	nop
 8002198:	f7ff ffde 	bl	8002158 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
  {
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000008 	.word	0x20000008

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x40>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x40>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	05fa0000 	.word	0x05fa0000

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	@ (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	@ (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	@ 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	@ 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff3e 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff8e 	bl	80022ac <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff31 	bl	800221c <__NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffa2 	bl	8002314 <SysTick_Config>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff feb6 	bl	8002158 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e099      	b.n	800252c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002418:	e00f      	b.n	800243a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800241a:	f7ff fe9d 	bl	8002158 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b05      	cmp	r3, #5
 8002426:	d908      	bls.n	800243a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2203      	movs	r2, #3
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e078      	b.n	800252c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e8      	bne.n	800241a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <HAL_DMA_Init+0x158>)
 8002454:	4013      	ands	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	2b04      	cmp	r3, #4
 8002492:	d107      	bne.n	80024a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	4313      	orrs	r3, r2
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f023 0307 	bic.w	r3, r3, #7
 80024ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d117      	bne.n	80024fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fb15 	bl	8002b10 <DMA_CheckFifoParam>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2240      	movs	r2, #64	@ 0x40
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024fa:	2301      	movs	r3, #1
 80024fc:	e016      	b.n	800252c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 facc 	bl	8002aa4 <DMA_CalcBaseAndBitshift>
 800250c:	4603      	mov	r3, r0
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002514:	223f      	movs	r2, #63	@ 0x3f
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	e010803f 	.word	0xe010803f

08002538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_DMA_Start_IT+0x26>
 800255a:	2302      	movs	r3, #2
 800255c:	e048      	b.n	80025f0 <HAL_DMA_Start_IT+0xb8>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d137      	bne.n	80025e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2202      	movs	r2, #2
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fa5e 	bl	8002a48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	223f      	movs	r2, #63	@ 0x3f
 8002592:	409a      	lsls	r2, r3
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0216 	orr.w	r2, r2, #22
 80025a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0208 	orr.w	r2, r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e005      	b.n	80025ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002606:	f7ff fda7 	bl	8002158 <HAL_GetTick>
 800260a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d008      	beq.n	800262a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e052      	b.n	80026d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0216 	bic.w	r2, r2, #22
 8002638:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002648:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d103      	bne.n	800265a <HAL_DMA_Abort+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0208 	bic.w	r2, r2, #8
 8002668:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267a:	e013      	b.n	80026a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800267c:	f7ff fd6c 	bl	8002158 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b05      	cmp	r3, #5
 8002688:	d90c      	bls.n	80026a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e015      	b.n	80026d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1e4      	bne.n	800267c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	223f      	movs	r2, #63	@ 0x3f
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d004      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2280      	movs	r2, #128	@ 0x80
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00c      	b.n	8002710 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2205      	movs	r2, #5
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002728:	4b8e      	ldr	r3, [pc, #568]	@ (8002964 <HAL_DMA_IRQHandler+0x248>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a8e      	ldr	r2, [pc, #568]	@ (8002968 <HAL_DMA_IRQHandler+0x24c>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0a9b      	lsrs	r3, r3, #10
 8002734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	2208      	movs	r2, #8
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01a      	beq.n	8002788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0204 	bic.w	r2, r2, #4
 800276e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	2208      	movs	r2, #8
 8002776:	409a      	lsls	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	2201      	movs	r2, #1
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	2201      	movs	r2, #1
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	f043 0202 	orr.w	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c2:	2204      	movs	r2, #4
 80027c4:	409a      	lsls	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	2204      	movs	r2, #4
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f8:	2210      	movs	r2, #16
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d043      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03c      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	2210      	movs	r2, #16
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d018      	beq.n	800285e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d024      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
 800284a:	e01f      	b.n	800288c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
 800285c:	e016      	b.n	800288c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0208 	bic.w	r2, r2, #8
 800287a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002890:	2220      	movs	r2, #32
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 808f 	beq.w	80029bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8087 	beq.w	80029bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	2220      	movs	r2, #32
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d136      	bne.n	8002934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0216 	bic.w	r2, r2, #22
 80028d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <HAL_DMA_IRQHandler+0x1da>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0208 	bic.w	r2, r2, #8
 8002904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	223f      	movs	r2, #63	@ 0x3f
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002926:	2b00      	cmp	r3, #0
 8002928:	d07e      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
        }
        return;
 8002932:	e079      	b.n	8002a28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01d      	beq.n	800297e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	2b00      	cmp	r3, #0
 8002956:	d031      	beq.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
 8002960:	e02c      	b.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000
 8002968:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d023      	beq.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
 800297c:	e01e      	b.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10f      	bne.n	80029ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0210 	bic.w	r2, r2, #16
 800299a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d032      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2205      	movs	r2, #5
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	3301      	adds	r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d307      	bcc.n	8002a04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f2      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x2cc>
 8002a02:	e000      	b.n	8002a06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
 8002a26:	e000      	b.n	8002a2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a28:	bf00      	nop
    }
  }
}
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b40      	cmp	r3, #64	@ 0x40
 8002a74:	d108      	bne.n	8002a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a86:	e007      	b.n	8002a98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	3b10      	subs	r3, #16
 8002ab4:	4a13      	ldr	r2, [pc, #76]	@ (8002b04 <DMA_CalcBaseAndBitshift+0x60>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002abe:	4a12      	ldr	r2, [pc, #72]	@ (8002b08 <DMA_CalcBaseAndBitshift+0x64>)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d908      	bls.n	8002ae4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <DMA_CalcBaseAndBitshift+0x68>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	1d1a      	adds	r2, r3, #4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ae2:	e006      	b.n	8002af2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <DMA_CalcBaseAndBitshift+0x68>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	aaaaaaab 	.word	0xaaaaaaab
 8002b08:	080085f0 	.word	0x080085f0
 8002b0c:	fffffc00 	.word	0xfffffc00

08002b10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11f      	bne.n	8002b6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d856      	bhi.n	8002bde <DMA_CheckFifoParam+0xce>
 8002b30:	a201      	add	r2, pc, #4	@ (adr r2, 8002b38 <DMA_CheckFifoParam+0x28>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b5b 	.word	0x08002b5b
 8002b40:	08002b49 	.word	0x08002b49
 8002b44:	08002bdf 	.word	0x08002bdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d046      	beq.n	8002be2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b58:	e043      	b.n	8002be2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b62:	d140      	bne.n	8002be6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b68:	e03d      	b.n	8002be6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b72:	d121      	bne.n	8002bb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d837      	bhi.n	8002bea <DMA_CheckFifoParam+0xda>
 8002b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b80 <DMA_CheckFifoParam+0x70>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002b91 	.word	0x08002b91
 8002b84:	08002b97 	.word	0x08002b97
 8002b88:	08002b91 	.word	0x08002b91
 8002b8c:	08002ba9 	.word	0x08002ba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e030      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d025      	beq.n	8002bee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba6:	e022      	b.n	8002bee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bb0:	d11f      	bne.n	8002bf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bb6:	e01c      	b.n	8002bf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d903      	bls.n	8002bc6 <DMA_CheckFifoParam+0xb6>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d003      	beq.n	8002bcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bc4:	e018      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8002bca:	e015      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00e      	beq.n	8002bf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e00b      	b.n	8002bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bde:	bf00      	nop
 8002be0:	e00a      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
 8002be4:	e008      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002be6:	bf00      	nop
 8002be8:	e006      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bea:	bf00      	nop
 8002bec:	e004      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e002      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf6:	bf00      	nop
    }
  } 
  
  return status; 
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop

08002c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	@ 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e175      	b.n	8002f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	f040 8164 	bne.w	8002f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d005      	beq.n	8002c5e <HAL_GPIO_Init+0x56>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d130      	bne.n	8002cc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0201 	and.w	r2, r3, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d017      	beq.n	8002cfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d123      	bne.n	8002d50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80be 	beq.w	8002f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <HAL_GPIO_Init+0x324>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	4a65      	ldr	r2, [pc, #404]	@ (8002f2c <HAL_GPIO_Init+0x324>)
 8002d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d9e:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <HAL_GPIO_Init+0x324>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002daa:	4a61      	ldr	r2, [pc, #388]	@ (8002f30 <HAL_GPIO_Init+0x328>)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	@ (8002f34 <HAL_GPIO_Init+0x32c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d037      	beq.n	8002e46 <HAL_GPIO_Init+0x23e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a57      	ldr	r2, [pc, #348]	@ (8002f38 <HAL_GPIO_Init+0x330>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_GPIO_Init+0x23a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a56      	ldr	r2, [pc, #344]	@ (8002f3c <HAL_GPIO_Init+0x334>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x236>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a55      	ldr	r2, [pc, #340]	@ (8002f40 <HAL_GPIO_Init+0x338>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x232>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a54      	ldr	r2, [pc, #336]	@ (8002f44 <HAL_GPIO_Init+0x33c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x22e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a53      	ldr	r2, [pc, #332]	@ (8002f48 <HAL_GPIO_Init+0x340>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x22a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a52      	ldr	r2, [pc, #328]	@ (8002f4c <HAL_GPIO_Init+0x344>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x226>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a51      	ldr	r2, [pc, #324]	@ (8002f50 <HAL_GPIO_Init+0x348>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x222>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a50      	ldr	r2, [pc, #320]	@ (8002f54 <HAL_GPIO_Init+0x34c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x21e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	@ (8002f58 <HAL_GPIO_Init+0x350>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x21a>
 8002e1e:	2309      	movs	r3, #9
 8002e20:	e012      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e22:	230a      	movs	r3, #10
 8002e24:	e010      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e26:	2308      	movs	r3, #8
 8002e28:	e00e      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	e00c      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e00a      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e32:	2305      	movs	r3, #5
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e58:	4935      	ldr	r1, [pc, #212]	@ (8002f30 <HAL_GPIO_Init+0x328>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e66:	4b3d      	ldr	r3, [pc, #244]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8a:	4a34      	ldr	r2, [pc, #208]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e90:	4b32      	ldr	r3, [pc, #200]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb4:	4a29      	ldr	r2, [pc, #164]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eba:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ede:	4a1f      	ldr	r2, [pc, #124]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f08:	4a14      	ldr	r2, [pc, #80]	@ (8002f5c <HAL_GPIO_Init+0x354>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f ae86 	bls.w	8002c28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	@ 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40021400 	.word	0x40021400
 8002f4c:	40021800 	.word	0x40021800
 8002f50:	40021c00 	.word	0x40021c00
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40022400 	.word	0x40022400
 8002f5c:	40013c00 	.word	0x40013c00

08002f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f70:	787b      	ldrb	r3, [r7, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f7c:	e003      	b.n	8002f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	619a      	str	r2, [r3, #24]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b085      	sub	sp, #20
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fa4:	887a      	ldrh	r2, [r7, #2]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	041a      	lsls	r2, r3, #16
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43d9      	mvns	r1, r3
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	400b      	ands	r3, r1
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	619a      	str	r2, [r3, #24]
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af02      	add	r7, sp, #8
 8002fcc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e108      	b.n	80031ea <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe ffbc 	bl	8001f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003006:	d102      	bne.n	800300e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f004 f916 	bl	8007244 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7c1a      	ldrb	r2, [r3, #16]
 8003020:	f88d 2000 	strb.w	r2, [sp]
 8003024:	3304      	adds	r3, #4
 8003026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003028:	f004 f8b2 	bl	8007190 <USB_CoreInit>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2202      	movs	r2, #2
 8003036:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e0d5      	b.n	80031ea <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f004 f90e 	bl	8007266 <USB_SetCurrentMode>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0c6      	b.n	80031ea <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e04a      	b.n	80030f8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	3315      	adds	r3, #21
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	3314      	adds	r3, #20
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	b298      	uxth	r0, r3
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	332e      	adds	r3, #46	@ 0x2e
 800309e:	4602      	mov	r2, r0
 80030a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3318      	adds	r3, #24
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	331c      	adds	r3, #28
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3320      	adds	r3, #32
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3324      	adds	r3, #36	@ 0x24
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	3301      	adds	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	791b      	ldrb	r3, [r3, #4]
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3af      	bcc.n	8003062 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	e044      	b.n	8003192 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	3301      	adds	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	791b      	ldrb	r3, [r3, #4]
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3b5      	bcc.n	8003108 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7c1a      	ldrb	r2, [r3, #16]
 80031a4:	f88d 2000 	strb.w	r2, [sp]
 80031a8:	3304      	adds	r3, #4
 80031aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ac:	f004 f8a8 	bl	8007300 <USB_DevInit>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e013      	b.n	80031ea <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7b1b      	ldrb	r3, [r3, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f80b 	bl	80031f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 fa63 	bl	80076ae <USB_DevDisconnect>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_PCDEx_ActivateLPM+0x44>)
 8003224:	4313      	orrs	r3, r2
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	10000003 	.word	0x10000003

0800323c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003240:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40007000 	.word	0x40007000

0800325c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	4b23      	ldr	r3, [pc, #140]	@ (80032f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	4a22      	ldr	r2, [pc, #136]	@ (80032f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003270:	6413      	str	r3, [r2, #64]	@ 0x40
 8003272:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800327e:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003288:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800328a:	f7fe ff65 	bl	8002158 <HAL_GetTick>
 800328e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003290:	e009      	b.n	80032a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003292:	f7fe ff61 	bl	8002158 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032a0:	d901      	bls.n	80032a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e022      	b.n	80032ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032a6:	4b14      	ldr	r3, [pc, #80]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b2:	d1ee      	bne.n	8003292 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032b4:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0f      	ldr	r2, [pc, #60]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c0:	f7fe ff4a 	bl	8002158 <HAL_GetTick>
 80032c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032c6:	e009      	b.n	80032dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032c8:	f7fe ff46 	bl	8002158 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032d6:	d901      	bls.n	80032dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e007      	b.n	80032ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032dc:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032e8:	d1ee      	bne.n	80032c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40007000 	.word	0x40007000

080032fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003304:	2300      	movs	r3, #0
 8003306:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e29b      	b.n	800384a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8087 	beq.w	800342e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003320:	4b96      	ldr	r3, [pc, #600]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b04      	cmp	r3, #4
 800332a:	d00c      	beq.n	8003346 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332c:	4b93      	ldr	r3, [pc, #588]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b08      	cmp	r3, #8
 8003336:	d112      	bne.n	800335e <HAL_RCC_OscConfig+0x62>
 8003338:	4b90      	ldr	r3, [pc, #576]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003340:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003344:	d10b      	bne.n	800335e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003346:	4b8d      	ldr	r3, [pc, #564]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d06c      	beq.n	800342c <HAL_RCC_OscConfig+0x130>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d168      	bne.n	800342c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e275      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x7a>
 8003368:	4b84      	ldr	r3, [pc, #528]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a83      	ldr	r2, [pc, #524]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	e02e      	b.n	80033d4 <HAL_RCC_OscConfig+0xd8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x9c>
 800337e:	4b7f      	ldr	r3, [pc, #508]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a7e      	ldr	r2, [pc, #504]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b7c      	ldr	r3, [pc, #496]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7b      	ldr	r2, [pc, #492]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003390:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e01d      	b.n	80033d4 <HAL_RCC_OscConfig+0xd8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0xc0>
 80033a2:	4b76      	ldr	r3, [pc, #472]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a75      	ldr	r2, [pc, #468]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b73      	ldr	r3, [pc, #460]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a72      	ldr	r2, [pc, #456]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0xd8>
 80033bc:	4b6f      	ldr	r3, [pc, #444]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6e      	ldr	r2, [pc, #440]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b6c      	ldr	r3, [pc, #432]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6b      	ldr	r2, [pc, #428]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe febc 	bl	8002158 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe feb8 	bl	8002158 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	@ 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e229      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b61      	ldr	r3, [pc, #388]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0xe8>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fea8 	bl	8002158 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe fea4 	bl	8002158 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e215      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	4b57      	ldr	r3, [pc, #348]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x110>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d069      	beq.n	800350e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800343a:	4b50      	ldr	r3, [pc, #320]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b4d      	ldr	r3, [pc, #308]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b08      	cmp	r3, #8
 8003450:	d11c      	bne.n	800348c <HAL_RCC_OscConfig+0x190>
 8003452:	4b4a      	ldr	r3, [pc, #296]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d116      	bne.n	800348c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	4b47      	ldr	r3, [pc, #284]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x17a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e1e9      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b41      	ldr	r3, [pc, #260]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	493d      	ldr	r1, [pc, #244]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	e040      	b.n	800350e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d023      	beq.n	80034dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003494:	4b39      	ldr	r3, [pc, #228]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a38      	ldr	r2, [pc, #224]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe fe5a 	bl	8002158 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fe fe56 	bl	8002158 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e1c7      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	4b30      	ldr	r3, [pc, #192]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4929      	ldr	r1, [pc, #164]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
 80034da:	e018      	b.n	800350e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034dc:	4b27      	ldr	r3, [pc, #156]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a26      	ldr	r2, [pc, #152]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fe36 	bl	8002158 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f0:	f7fe fe32 	bl	8002158 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1a3      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d038      	beq.n	800358c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d019      	beq.n	8003556 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003522:	4b16      	ldr	r3, [pc, #88]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003526:	4a15      	ldr	r2, [pc, #84]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe fe13 	bl	8002158 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe fe0f 	bl	8002158 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e180      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003548:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x23a>
 8003554:	e01a      	b.n	800358c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003556:	4b09      	ldr	r3, [pc, #36]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 8003558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355a:	4a08      	ldr	r2, [pc, #32]	@ (800357c <HAL_RCC_OscConfig+0x280>)
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003562:	f7fe fdf9 	bl	8002158 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356a:	f7fe fdf5 	bl	8002158 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d903      	bls.n	8003580 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e166      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
 800357c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	4b92      	ldr	r3, [pc, #584]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ee      	bne.n	800356a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a4 	beq.w	80036e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359a:	4b8c      	ldr	r3, [pc, #560]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10d      	bne.n	80035c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	4b89      	ldr	r3, [pc, #548]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	4a88      	ldr	r2, [pc, #544]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035b2:	4b86      	ldr	r3, [pc, #536]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c2:	4b83      	ldr	r3, [pc, #524]	@ (80037d0 <HAL_RCC_OscConfig+0x4d4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d118      	bne.n	8003600 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035ce:	4b80      	ldr	r3, [pc, #512]	@ (80037d0 <HAL_RCC_OscConfig+0x4d4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7f      	ldr	r2, [pc, #508]	@ (80037d0 <HAL_RCC_OscConfig+0x4d4>)
 80035d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035da:	f7fe fdbd 	bl	8002158 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e2:	f7fe fdb9 	bl	8002158 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b64      	cmp	r3, #100	@ 0x64
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e12a      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f4:	4b76      	ldr	r3, [pc, #472]	@ (80037d0 <HAL_RCC_OscConfig+0x4d4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x31a>
 8003608:	4b70      	ldr	r3, [pc, #448]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360c:	4a6f      	ldr	r2, [pc, #444]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	@ 0x70
 8003614:	e02d      	b.n	8003672 <HAL_RCC_OscConfig+0x376>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x33c>
 800361e:	4b6b      	ldr	r3, [pc, #428]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003622:	4a6a      	ldr	r2, [pc, #424]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6713      	str	r3, [r2, #112]	@ 0x70
 800362a:	4b68      	ldr	r3, [pc, #416]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362e:	4a67      	ldr	r2, [pc, #412]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6713      	str	r3, [r2, #112]	@ 0x70
 8003636:	e01c      	b.n	8003672 <HAL_RCC_OscConfig+0x376>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b05      	cmp	r3, #5
 800363e:	d10c      	bne.n	800365a <HAL_RCC_OscConfig+0x35e>
 8003640:	4b62      	ldr	r3, [pc, #392]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	4a61      	ldr	r2, [pc, #388]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	6713      	str	r3, [r2, #112]	@ 0x70
 800364c:	4b5f      	ldr	r3, [pc, #380]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003650:	4a5e      	ldr	r2, [pc, #376]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	@ 0x70
 8003658:	e00b      	b.n	8003672 <HAL_RCC_OscConfig+0x376>
 800365a:	4b5c      	ldr	r3, [pc, #368]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	4a5b      	ldr	r2, [pc, #364]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6713      	str	r3, [r2, #112]	@ 0x70
 8003666:	4b59      	ldr	r3, [pc, #356]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	4a58      	ldr	r2, [pc, #352]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d015      	beq.n	80036a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fe fd6d 	bl	8002158 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe fd69 	bl	8002158 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e0d8      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	4b4c      	ldr	r3, [pc, #304]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ee      	beq.n	8003682 <HAL_RCC_OscConfig+0x386>
 80036a4:	e014      	b.n	80036d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fe fd57 	bl	8002158 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fe fd53 	bl	8002158 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0c2      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	4b41      	ldr	r3, [pc, #260]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ee      	bne.n	80036ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d6:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	4a3c      	ldr	r2, [pc, #240]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80ae 	beq.w	8003848 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ec:	4b37      	ldr	r3, [pc, #220]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d06d      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d14b      	bne.n	8003798 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003700:	4b32      	ldr	r3, [pc, #200]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a31      	ldr	r2, [pc, #196]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800370a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe fd24 	bl	8002158 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fd20 	bl	8002158 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e091      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	4b29      	ldr	r3, [pc, #164]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	019b      	lsls	r3, r3, #6
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	3b01      	subs	r3, #1
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375c:	071b      	lsls	r3, r3, #28
 800375e:	491b      	ldr	r1, [pc, #108]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003764:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a18      	ldr	r2, [pc, #96]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800376e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe fcf2 	bl	8002158 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003778:	f7fe fcee 	bl	8002158 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e05f      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x47c>
 8003796:	e057      	b.n	8003848 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003798:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0b      	ldr	r2, [pc, #44]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 800379e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fe fcd8 	bl	8002158 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe fcd4 	bl	8002158 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e045      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x4b0>
 80037ca:	e03d      	b.n	8003848 <HAL_RCC_OscConfig+0x54c>
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003854 <HAL_RCC_OscConfig+0x558>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d030      	beq.n	8003844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d129      	bne.n	8003844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d122      	bne.n	8003844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800380a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800380c:	4293      	cmp	r3, r2
 800380e:	d119      	bne.n	8003844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	3b01      	subs	r3, #1
 800381e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d10f      	bne.n	8003844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d107      	bne.n	8003844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800

08003858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0d0      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003870:	4b6a      	ldr	r3, [pc, #424]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d910      	bls.n	80038a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b67      	ldr	r3, [pc, #412]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 020f 	bic.w	r2, r3, #15
 8003886:	4965      	ldr	r1, [pc, #404]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b63      	ldr	r3, [pc, #396]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0b8      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b8:	4b59      	ldr	r3, [pc, #356]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4a58      	ldr	r2, [pc, #352]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d0:	4b53      	ldr	r3, [pc, #332]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a52      	ldr	r2, [pc, #328]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80038d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b50      	ldr	r3, [pc, #320]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	494d      	ldr	r1, [pc, #308]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d040      	beq.n	800397c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d115      	bne.n	800393a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391a:	4b41      	ldr	r3, [pc, #260]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e073      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e06b      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393a:	4b39      	ldr	r3, [pc, #228]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f023 0203 	bic.w	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4936      	ldr	r1, [pc, #216]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	4313      	orrs	r3, r2
 800394a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800394c:	f7fe fc04 	bl	8002158 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	e00a      	b.n	800396a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003954:	f7fe fc00 	bl	8002158 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e053      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 020c 	and.w	r2, r3, #12
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	429a      	cmp	r2, r3
 800397a:	d1eb      	bne.n	8003954 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800397c:	4b27      	ldr	r3, [pc, #156]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d210      	bcs.n	80039ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b24      	ldr	r3, [pc, #144]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 020f 	bic.w	r2, r3, #15
 8003992:	4922      	ldr	r1, [pc, #136]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b20      	ldr	r3, [pc, #128]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e032      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b8:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4916      	ldr	r1, [pc, #88]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039d6:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	490e      	ldr	r1, [pc, #56]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ea:	f000 f821 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039ee:	4602      	mov	r2, r0
 80039f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	490a      	ldr	r1, [pc, #40]	@ (8003a24 <HAL_RCC_ClockConfig+0x1cc>)
 80039fc:	5ccb      	ldrb	r3, [r1, r3]
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	4a09      	ldr	r2, [pc, #36]	@ (8003a28 <HAL_RCC_ClockConfig+0x1d0>)
 8003a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a06:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_RCC_ClockConfig+0x1d4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fb60 	bl	80020d0 <HAL_InitTick>

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023c00 	.word	0x40023c00
 8003a20:	40023800 	.word	0x40023800
 8003a24:	080085d8 	.word	0x080085d8
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000004 	.word	0x20000004

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a34:	b094      	sub	sp, #80	@ 0x50
 8003a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a40:	2300      	movs	r3, #0
 8003a42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a48:	4b79      	ldr	r3, [pc, #484]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d00d      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x40>
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	f200 80e1 	bhi.w	8003c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a62:	e0db      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b73      	ldr	r3, [pc, #460]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a68:	e0db      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6a:	4b73      	ldr	r3, [pc, #460]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a6e:	e0d8      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a70:	4b6f      	ldr	r3, [pc, #444]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d063      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a86:	4b6a      	ldr	r3, [pc, #424]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	f04f 0000 	mov.w	r0, #0
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	0159      	lsls	r1, r3, #5
 8003ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab4:	0150      	lsls	r0, r2, #5
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4621      	mov	r1, r4
 8003abc:	1a51      	subs	r1, r2, r1
 8003abe:	6139      	str	r1, [r7, #16]
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	018b      	lsls	r3, r1, #6
 8003ad8:	4651      	mov	r1, sl
 8003ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ade:	4651      	mov	r1, sl
 8003ae0:	018a      	lsls	r2, r1, #6
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ae8:	4659      	mov	r1, fp
 8003aea:	eb63 0901 	sbc.w	r9, r3, r1
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b02:	4690      	mov	r8, r2
 8003b04:	4699      	mov	r9, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	eb18 0303 	adds.w	r3, r8, r3
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	462b      	mov	r3, r5
 8003b10:	eb49 0303 	adc.w	r3, r9, r3
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b22:	4629      	mov	r1, r5
 8003b24:	024b      	lsls	r3, r1, #9
 8003b26:	4621      	mov	r1, r4
 8003b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	024a      	lsls	r2, r1, #9
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b36:	2200      	movs	r2, #0
 8003b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b40:	f7fc fb8c 	bl	800025c <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b4c:	e058      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4e:	4b38      	ldr	r3, [pc, #224]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	2200      	movs	r2, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	4611      	mov	r1, r2
 8003b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	f04f 0000 	mov.w	r0, #0
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	0159      	lsls	r1, r3, #5
 8003b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7a:	0150      	lsls	r0, r2, #5
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4641      	mov	r1, r8
 8003b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b86:	4649      	mov	r1, r9
 8003b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	00eb      	lsls	r3, r5, #3
 8003bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb6:	00e2      	lsls	r2, r4, #3
 8003bb8:	4614      	mov	r4, r2
 8003bba:	461d      	mov	r5, r3
 8003bbc:	4643      	mov	r3, r8
 8003bbe:	18e3      	adds	r3, r4, r3
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	eb45 0303 	adc.w	r3, r5, r3
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	028b      	lsls	r3, r1, #10
 8003bda:	4621      	mov	r1, r4
 8003bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be0:	4621      	mov	r1, r4
 8003be2:	028a      	lsls	r2, r1, #10
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bea:	2200      	movs	r2, #0
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	61fa      	str	r2, [r7, #28]
 8003bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf4:	f7fc fb32 	bl	800025c <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3750      	adds	r7, #80	@ 0x50
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	007a1200 	.word	0x007a1200

08003c3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	@ (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000000 	.word	0x20000000

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	080085e8 	.word	0x080085e8

08003c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c80:	f7ff ffdc 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0b5b      	lsrs	r3, r3, #13
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	080085e8 	.word	0x080085e8

08003ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d012      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ccc:	4b69      	ldr	r3, [pc, #420]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a68      	ldr	r2, [pc, #416]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003cd6:	6093      	str	r3, [r2, #8]
 8003cd8:	4b66      	ldr	r3, [pc, #408]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce0:	4964      	ldr	r1, [pc, #400]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d017      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d04:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0c:	4959      	ldr	r1, [pc, #356]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d017      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d40:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	494a      	ldr	r1, [pc, #296]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d58:	d101      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d66:	2301      	movs	r3, #1
 8003d68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 808b 	beq.w	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d88:	4b3a      	ldr	r3, [pc, #232]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	4a39      	ldr	r2, [pc, #228]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d94:	4b37      	ldr	r3, [pc, #220]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003da0:	4b35      	ldr	r3, [pc, #212]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a34      	ldr	r2, [pc, #208]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dac:	f7fe f9d4 	bl	8002158 <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db4:	f7fe f9d0 	bl	8002158 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	@ 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e38f      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd2:	4b28      	ldr	r3, [pc, #160]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d035      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d02e      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df0:	4b20      	ldr	r3, [pc, #128]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e04:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e06:	4b1b      	ldr	r3, [pc, #108]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e12:	4a18      	ldr	r2, [pc, #96]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e18:	4b16      	ldr	r3, [pc, #88]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d114      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fe f998 	bl	8002158 <HAL_GetTick>
 8003e28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fe f994 	bl	8002158 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e351      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ee      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e5a:	d111      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e5c:	4b05      	ldr	r3, [pc, #20]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e6a:	400b      	ands	r3, r1
 8003e6c:	4901      	ldr	r1, [pc, #4]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
 8003e72:	e00b      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	0ffffcff 	.word	0x0ffffcff
 8003e80:	4bac      	ldr	r3, [pc, #688]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4aab      	ldr	r2, [pc, #684]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e86:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e8a:	6093      	str	r3, [r2, #8]
 8003e8c:	4ba9      	ldr	r3, [pc, #676]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e98:	49a6      	ldr	r1, [pc, #664]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d010      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eaa:	4ba2      	ldr	r3, [pc, #648]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eb0:	4aa0      	ldr	r2, [pc, #640]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003eba:	4b9e      	ldr	r3, [pc, #632]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec4:	499b      	ldr	r1, [pc, #620]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed8:	4b96      	ldr	r3, [pc, #600]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee6:	4993      	ldr	r1, [pc, #588]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003efa:	4b8e      	ldr	r3, [pc, #568]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f08:	498a      	ldr	r1, [pc, #552]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f1c:	4b85      	ldr	r3, [pc, #532]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f2a:	4982      	ldr	r1, [pc, #520]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f3e:	4b7d      	ldr	r3, [pc, #500]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f44:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4979      	ldr	r1, [pc, #484]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f60:	4b74      	ldr	r3, [pc, #464]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	4971      	ldr	r1, [pc, #452]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f82:	4b6c      	ldr	r3, [pc, #432]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f88:	f023 020c 	bic.w	r2, r3, #12
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f90:	4968      	ldr	r1, [pc, #416]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fa4:	4b63      	ldr	r3, [pc, #396]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003faa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb2:	4960      	ldr	r1, [pc, #384]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fcc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd4:	4957      	ldr	r1, [pc, #348]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fe8:	4b52      	ldr	r3, [pc, #328]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	494f      	ldr	r1, [pc, #316]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800400a:	4b4a      	ldr	r3, [pc, #296]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004010:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004018:	4946      	ldr	r1, [pc, #280]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800402c:	4b41      	ldr	r3, [pc, #260]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403a:	493e      	ldr	r1, [pc, #248]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800404e:	4b39      	ldr	r3, [pc, #228]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004054:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405c:	4935      	ldr	r1, [pc, #212]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004070:	4b30      	ldr	r3, [pc, #192]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800407e:	492d      	ldr	r1, [pc, #180]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d011      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004092:	4b28      	ldr	r3, [pc, #160]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004098:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a0:	4924      	ldr	r1, [pc, #144]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040b0:	d101      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040b2:	2301      	movs	r3, #1
 80040b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d2:	4b18      	ldr	r3, [pc, #96]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e0:	4914      	ldr	r1, [pc, #80]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004104:	490b      	ldr	r1, [pc, #44]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00f      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004128:	4902      	ldr	r1, [pc, #8]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004130:	e002      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00b      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004144:	4b8a      	ldr	r3, [pc, #552]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004146:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800414a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	4986      	ldr	r1, [pc, #536]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00b      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004168:	4b81      	ldr	r3, [pc, #516]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800416e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004178:	497d      	ldr	r1, [pc, #500]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d006      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 80d6 	beq.w	8004340 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004194:	4b76      	ldr	r3, [pc, #472]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a75      	ldr	r2, [pc, #468]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800419e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fd ffda 	bl	8002158 <HAL_GetTick>
 80041a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041a8:	f7fd ffd6 	bl	8002158 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	@ 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e195      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d021      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11d      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041da:	4b65      	ldr	r3, [pc, #404]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041e8:	4b61      	ldr	r3, [pc, #388]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ee:	0e1b      	lsrs	r3, r3, #24
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	019a      	lsls	r2, r3, #6
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	041b      	lsls	r3, r3, #16
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	071b      	lsls	r3, r3, #28
 800420e:	4958      	ldr	r1, [pc, #352]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02e      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004240:	d129      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004242:	4b4b      	ldr	r3, [pc, #300]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004250:	4b47      	ldr	r3, [pc, #284]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004256:	0f1b      	lsrs	r3, r3, #28
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	019a      	lsls	r2, r3, #6
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	493e      	ldr	r1, [pc, #248]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800427e:	4b3c      	ldr	r3, [pc, #240]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004284:	f023 021f 	bic.w	r2, r3, #31
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	3b01      	subs	r3, #1
 800428e:	4938      	ldr	r1, [pc, #224]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01d      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042a2:	4b33      	ldr	r3, [pc, #204]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a8:	0e1b      	lsrs	r3, r3, #24
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b6:	0f1b      	lsrs	r3, r3, #28
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	019a      	lsls	r2, r3, #6
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	431a      	orrs	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	061b      	lsls	r3, r3, #24
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	071b      	lsls	r3, r3, #28
 80042d6:	4926      	ldr	r1, [pc, #152]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d011      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	019a      	lsls	r2, r3, #6
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	061b      	lsls	r3, r3, #24
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	071b      	lsls	r3, r3, #28
 8004306:	491a      	ldr	r1, [pc, #104]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800430e:	4b18      	ldr	r3, [pc, #96]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a17      	ldr	r2, [pc, #92]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004314:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431a:	f7fd ff1d 	bl	8002158 <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004322:	f7fd ff19 	bl	8002158 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b64      	cmp	r3, #100	@ 0x64
 800432e:	d901      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0d8      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004334:	4b0e      	ldr	r3, [pc, #56]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b01      	cmp	r3, #1
 8004344:	f040 80ce 	bne.w	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004348:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a08      	ldr	r2, [pc, #32]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004354:	f7fd ff00 	bl	8002158 <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800435a:	e00b      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800435c:	f7fd fefc 	bl	8002158 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	@ 0x64
 8004368:	d904      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e0bb      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004374:	4b5e      	ldr	r3, [pc, #376]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800437c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004380:	d0ec      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d02e      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d12a      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043aa:	4b51      	ldr	r3, [pc, #324]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043b8:	4b4d      	ldr	r3, [pc, #308]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043be:	0f1b      	lsrs	r3, r3, #28
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	019a      	lsls	r2, r3, #6
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	041b      	lsls	r3, r3, #16
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	431a      	orrs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	071b      	lsls	r3, r3, #28
 80043de:	4944      	ldr	r1, [pc, #272]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043e6:	4b42      	ldr	r3, [pc, #264]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f4:	3b01      	subs	r3, #1
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	493d      	ldr	r1, [pc, #244]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004414:	d11d      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004416:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441c:	0e1b      	lsrs	r3, r3, #24
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004424:	4b32      	ldr	r3, [pc, #200]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442a:	0f1b      	lsrs	r3, r3, #28
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	019a      	lsls	r2, r3, #6
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	431a      	orrs	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	071b      	lsls	r3, r3, #28
 800444a:	4929      	ldr	r1, [pc, #164]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d028      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800445e:	4b24      	ldr	r3, [pc, #144]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	0e1b      	lsrs	r3, r3, #24
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800446c:	4b20      	ldr	r3, [pc, #128]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	019a      	lsls	r2, r3, #6
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	041b      	lsls	r3, r3, #16
 8004484:	431a      	orrs	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	061b      	lsls	r3, r3, #24
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	071b      	lsls	r3, r3, #28
 8004492:	4917      	ldr	r1, [pc, #92]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800449a:	4b15      	ldr	r3, [pc, #84]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	4911      	ldr	r1, [pc, #68]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044b0:	4b0f      	ldr	r3, [pc, #60]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0e      	ldr	r2, [pc, #56]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044bc:	f7fd fe4c 	bl	8002158 <HAL_GetTick>
 80044c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044c4:	f7fd fe48 	bl	8002158 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	@ 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e007      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044d6:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044e2:	d1ef      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800

080044f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e049      	b.n	800459a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd fabe 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f000 fd78 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d001      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e054      	b.n	8004666 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a26      	ldr	r2, [pc, #152]	@ (8004674 <HAL_TIM_Base_Start_IT+0xd0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d022      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x80>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e6:	d01d      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x80>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a22      	ldr	r2, [pc, #136]	@ (8004678 <HAL_TIM_Base_Start_IT+0xd4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d018      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x80>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a21      	ldr	r2, [pc, #132]	@ (800467c <HAL_TIM_Base_Start_IT+0xd8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d013      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x80>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1f      	ldr	r2, [pc, #124]	@ (8004680 <HAL_TIM_Base_Start_IT+0xdc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00e      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x80>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <HAL_TIM_Base_Start_IT+0xe0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d009      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x80>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1c      	ldr	r2, [pc, #112]	@ (8004688 <HAL_TIM_Base_Start_IT+0xe4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x80>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1b      	ldr	r2, [pc, #108]	@ (800468c <HAL_TIM_Base_Start_IT+0xe8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d115      	bne.n	8004650 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	4b19      	ldr	r3, [pc, #100]	@ (8004690 <HAL_TIM_Base_Start_IT+0xec>)
 800462c:	4013      	ands	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b06      	cmp	r3, #6
 8004634:	d015      	beq.n	8004662 <HAL_TIM_Base_Start_IT+0xbe>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463c:	d011      	beq.n	8004662 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464e:	e008      	b.n	8004662 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e000      	b.n	8004664 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004662:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40010000 	.word	0x40010000
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800
 8004680:	40000c00 	.word	0x40000c00
 8004684:	40010400 	.word	0x40010400
 8004688:	40014000 	.word	0x40014000
 800468c:	40001800 	.word	0x40001800
 8004690:	00010007 	.word	0x00010007

08004694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e049      	b.n	800473a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fd f992 	bl	80019e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f000 fca8 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_TIM_PWM_Start+0x24>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e03c      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d109      	bne.n	8004782 <HAL_TIM_PWM_Start+0x3e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e02f      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d109      	bne.n	800479c <HAL_TIM_PWM_Start+0x58>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e022      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b0c      	cmp	r3, #12
 80047a0:	d109      	bne.n	80047b6 <HAL_TIM_PWM_Start+0x72>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	bf14      	ite	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	2300      	moveq	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e015      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d109      	bne.n	80047d0 <HAL_TIM_PWM_Start+0x8c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e008      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e092      	b.n	8004910 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_PWM_Start+0xb6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047f8:	e023      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xc6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004808:	e01b      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0xd6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004818:	e013      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xe6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004828:	e00b      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b10      	cmp	r3, #16
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0xf6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004838:	e003      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2201      	movs	r2, #1
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fef6 	bl	800563c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a30      	ldr	r2, [pc, #192]	@ (8004918 <HAL_TIM_PWM_Start+0x1d4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_TIM_PWM_Start+0x120>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2f      	ldr	r2, [pc, #188]	@ (800491c <HAL_TIM_PWM_Start+0x1d8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_TIM_PWM_Start+0x124>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_TIM_PWM_Start+0x126>
 8004868:	2300      	movs	r3, #0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a25      	ldr	r2, [pc, #148]	@ (8004918 <HAL_TIM_PWM_Start+0x1d4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <HAL_TIM_PWM_Start+0x18a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004890:	d01d      	beq.n	80048ce <HAL_TIM_PWM_Start+0x18a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a22      	ldr	r2, [pc, #136]	@ (8004920 <HAL_TIM_PWM_Start+0x1dc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_TIM_PWM_Start+0x18a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a20      	ldr	r2, [pc, #128]	@ (8004924 <HAL_TIM_PWM_Start+0x1e0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_TIM_PWM_Start+0x18a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004928 <HAL_TIM_PWM_Start+0x1e4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_TIM_PWM_Start+0x18a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	@ (800491c <HAL_TIM_PWM_Start+0x1d8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_TIM_PWM_Start+0x18a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1b      	ldr	r2, [pc, #108]	@ (800492c <HAL_TIM_PWM_Start+0x1e8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIM_PWM_Start+0x18a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	@ (8004930 <HAL_TIM_PWM_Start+0x1ec>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d115      	bne.n	80048fa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	4b17      	ldr	r3, [pc, #92]	@ (8004934 <HAL_TIM_PWM_Start+0x1f0>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b06      	cmp	r3, #6
 80048de:	d015      	beq.n	800490c <HAL_TIM_PWM_Start+0x1c8>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e6:	d011      	beq.n	800490c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	e008      	b.n	800490c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e000      	b.n	800490e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40010000 	.word	0x40010000
 800491c:	40010400 	.word	0x40010400
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40014000 	.word	0x40014000
 8004930:	40001800 	.word	0x40001800
 8004934:	00010007 	.word	0x00010007

08004938 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e08f      	b.n	8004a6c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fc fef5 	bl	8001750 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2202      	movs	r2, #2
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6899      	ldr	r1, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4b3e      	ldr	r3, [pc, #248]	@ (8004a74 <HAL_TIM_Encoder_Init+0x13c>)
 800497a:	400b      	ands	r3, r1
 800497c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 fb4d 	bl	8005028 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4b31      	ldr	r3, [pc, #196]	@ (8004a78 <HAL_TIM_Encoder_Init+0x140>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	4313      	orrs	r3, r2
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a7c <HAL_TIM_Encoder_Init+0x144>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a80 <HAL_TIM_Encoder_Init+0x148>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	4313      	orrs	r3, r2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	011a      	lsls	r2, r3, #4
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	031b      	lsls	r3, r3, #12
 80049f8:	4313      	orrs	r3, r2
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	fffebff8 	.word	0xfffebff8
 8004a78:	fffffcfc 	.word	0xfffffcfc
 8004a7c:	fffff3f3 	.word	0xfffff3f3
 8004a80:	ffff0f0f 	.word	0xffff0f0f

08004a84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aa4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d110      	bne.n	8004ad6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d102      	bne.n	8004ac0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aba:	7b7b      	ldrb	r3, [r7, #13]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d001      	beq.n	8004ac4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e069      	b.n	8004b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ad4:	e031      	b.n	8004b3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d110      	bne.n	8004afe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004adc:	7bbb      	ldrb	r3, [r7, #14]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d102      	bne.n	8004ae8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ae2:	7b3b      	ldrb	r3, [r7, #12]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d001      	beq.n	8004aec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e055      	b.n	8004b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004afc:	e01d      	b.n	8004b3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d108      	bne.n	8004b16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b04:	7bbb      	ldrb	r3, [r7, #14]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d105      	bne.n	8004b16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b0a:	7b7b      	ldrb	r3, [r7, #13]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d102      	bne.n	8004b16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b10:	7b3b      	ldrb	r3, [r7, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d001      	beq.n	8004b1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e03e      	b.n	8004b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIM_Encoder_Start+0xc4>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d008      	beq.n	8004b58 <HAL_TIM_Encoder_Start+0xd4>
 8004b46:	e00f      	b.n	8004b68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fd73 	bl	800563c <TIM_CCxChannelCmd>
      break;
 8004b56:	e016      	b.n	8004b86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	2104      	movs	r1, #4
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fd6b 	bl	800563c <TIM_CCxChannelCmd>
      break;
 8004b66:	e00e      	b.n	8004b86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fd63 	bl	800563c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	2104      	movs	r1, #4
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fd5c 	bl	800563c <TIM_CCxChannelCmd>
      break;
 8004b84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d020      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0202 	mvn.w	r2, #2
 8004bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f9fe 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f9f0 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fa01 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0204 	mvn.w	r2, #4
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9d8 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9ca 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9db 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d020      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0208 	mvn.w	r2, #8
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f9b2 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f9a4 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f9b5 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d020      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0210 	mvn.w	r2, #16
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f98c 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f97e 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f98f 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0201 	mvn.w	r2, #1
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fb feba 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fd3f 	bl	80057b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fd37 	bl	80057cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00c      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f949 	bl	8005014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0220 	mvn.w	r2, #32
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fcff 	bl	80057a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0ff      	b.n	8004fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b14      	cmp	r3, #20
 8004dda:	f200 80f0 	bhi.w	8004fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dde:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e39 	.word	0x08004e39
 8004de8:	08004fbf 	.word	0x08004fbf
 8004dec:	08004fbf 	.word	0x08004fbf
 8004df0:	08004fbf 	.word	0x08004fbf
 8004df4:	08004e79 	.word	0x08004e79
 8004df8:	08004fbf 	.word	0x08004fbf
 8004dfc:	08004fbf 	.word	0x08004fbf
 8004e00:	08004fbf 	.word	0x08004fbf
 8004e04:	08004ebb 	.word	0x08004ebb
 8004e08:	08004fbf 	.word	0x08004fbf
 8004e0c:	08004fbf 	.word	0x08004fbf
 8004e10:	08004fbf 	.word	0x08004fbf
 8004e14:	08004efb 	.word	0x08004efb
 8004e18:	08004fbf 	.word	0x08004fbf
 8004e1c:	08004fbf 	.word	0x08004fbf
 8004e20:	08004fbf 	.word	0x08004fbf
 8004e24:	08004f3d 	.word	0x08004f3d
 8004e28:	08004fbf 	.word	0x08004fbf
 8004e2c:	08004fbf 	.word	0x08004fbf
 8004e30:	08004fbf 	.word	0x08004fbf
 8004e34:	08004f7d 	.word	0x08004f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f99e 	bl	8005180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0208 	orr.w	r2, r2, #8
 8004e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6999      	ldr	r1, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	619a      	str	r2, [r3, #24]
      break;
 8004e76:	e0a5      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f9f0 	bl	8005264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6999      	ldr	r1, [r3, #24]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	619a      	str	r2, [r3, #24]
      break;
 8004eb8:	e084      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fa47 	bl	8005354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0208 	orr.w	r2, r2, #8
 8004ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0204 	bic.w	r2, r2, #4
 8004ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	61da      	str	r2, [r3, #28]
      break;
 8004ef8:	e064      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fa9d 	bl	8005440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69d9      	ldr	r1, [r3, #28]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	021a      	lsls	r2, r3, #8
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	61da      	str	r2, [r3, #28]
      break;
 8004f3a:	e043      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fad4 	bl	80054f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0208 	orr.w	r2, r2, #8
 8004f56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0204 	bic.w	r2, r2, #4
 8004f66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f7a:	e023      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fb06 	bl	8005594 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	021a      	lsls	r2, r3, #8
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fbc:	e002      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop

08004fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a46      	ldr	r2, [pc, #280]	@ (8005154 <TIM_Base_SetConfig+0x12c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a43      	ldr	r2, [pc, #268]	@ (8005158 <TIM_Base_SetConfig+0x130>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a42      	ldr	r2, [pc, #264]	@ (800515c <TIM_Base_SetConfig+0x134>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a41      	ldr	r2, [pc, #260]	@ (8005160 <TIM_Base_SetConfig+0x138>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a40      	ldr	r2, [pc, #256]	@ (8005164 <TIM_Base_SetConfig+0x13c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a35      	ldr	r2, [pc, #212]	@ (8005154 <TIM_Base_SetConfig+0x12c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d02b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005088:	d027      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a32      	ldr	r2, [pc, #200]	@ (8005158 <TIM_Base_SetConfig+0x130>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d023      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a31      	ldr	r2, [pc, #196]	@ (800515c <TIM_Base_SetConfig+0x134>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01f      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a30      	ldr	r2, [pc, #192]	@ (8005160 <TIM_Base_SetConfig+0x138>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005164 <TIM_Base_SetConfig+0x13c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d017      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005168 <TIM_Base_SetConfig+0x140>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a2d      	ldr	r2, [pc, #180]	@ (800516c <TIM_Base_SetConfig+0x144>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00f      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005170 <TIM_Base_SetConfig+0x148>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005174 <TIM_Base_SetConfig+0x14c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005178 <TIM_Base_SetConfig+0x150>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a29      	ldr	r2, [pc, #164]	@ (800517c <TIM_Base_SetConfig+0x154>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d108      	bne.n	80050ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a10      	ldr	r2, [pc, #64]	@ (8005154 <TIM_Base_SetConfig+0x12c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_Base_SetConfig+0xf8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a12      	ldr	r2, [pc, #72]	@ (8005164 <TIM_Base_SetConfig+0x13c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d103      	bne.n	8005128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b01      	cmp	r3, #1
 8005138:	d105      	bne.n	8005146 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f023 0201 	bic.w	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	611a      	str	r2, [r3, #16]
  }
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40010400 	.word	0x40010400
 8005168:	40014000 	.word	0x40014000
 800516c:	40014400 	.word	0x40014400
 8005170:	40014800 	.word	0x40014800
 8005174:	40001800 	.word	0x40001800
 8005178:	40001c00 	.word	0x40001c00
 800517c:	40002000 	.word	0x40002000

08005180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f023 0201 	bic.w	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005258 <TIM_OC1_SetConfig+0xd8>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f023 0302 	bic.w	r3, r3, #2
 80051c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a21      	ldr	r2, [pc, #132]	@ (800525c <TIM_OC1_SetConfig+0xdc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_OC1_SetConfig+0x64>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a20      	ldr	r2, [pc, #128]	@ (8005260 <TIM_OC1_SetConfig+0xe0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10c      	bne.n	80051fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0308 	bic.w	r3, r3, #8
 80051ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0304 	bic.w	r3, r3, #4
 80051fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a16      	ldr	r2, [pc, #88]	@ (800525c <TIM_OC1_SetConfig+0xdc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_OC1_SetConfig+0x8e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a15      	ldr	r2, [pc, #84]	@ (8005260 <TIM_OC1_SetConfig+0xe0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d111      	bne.n	8005232 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	fffeff8f 	.word	0xfffeff8f
 800525c:	40010000 	.word	0x40010000
 8005260:	40010400 	.word	0x40010400

08005264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f023 0210 	bic.w	r2, r3, #16
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4b2e      	ldr	r3, [pc, #184]	@ (8005348 <TIM_OC2_SetConfig+0xe4>)
 8005290:	4013      	ands	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800529a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f023 0320 	bic.w	r3, r3, #32
 80052ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a23      	ldr	r2, [pc, #140]	@ (800534c <TIM_OC2_SetConfig+0xe8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_OC2_SetConfig+0x68>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a22      	ldr	r2, [pc, #136]	@ (8005350 <TIM_OC2_SetConfig+0xec>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d10d      	bne.n	80052e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a18      	ldr	r2, [pc, #96]	@ (800534c <TIM_OC2_SetConfig+0xe8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_OC2_SetConfig+0x94>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a17      	ldr	r2, [pc, #92]	@ (8005350 <TIM_OC2_SetConfig+0xec>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d113      	bne.n	8005320 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	feff8fff 	.word	0xfeff8fff
 800534c:	40010000 	.word	0x40010000
 8005350:	40010400 	.word	0x40010400

08005354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4b2d      	ldr	r3, [pc, #180]	@ (8005434 <TIM_OC3_SetConfig+0xe0>)
 8005380:	4013      	ands	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800539c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a22      	ldr	r2, [pc, #136]	@ (8005438 <TIM_OC3_SetConfig+0xe4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC3_SetConfig+0x66>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a21      	ldr	r2, [pc, #132]	@ (800543c <TIM_OC3_SetConfig+0xe8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d10d      	bne.n	80053d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a17      	ldr	r2, [pc, #92]	@ (8005438 <TIM_OC3_SetConfig+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_OC3_SetConfig+0x92>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a16      	ldr	r2, [pc, #88]	@ (800543c <TIM_OC3_SetConfig+0xe8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d113      	bne.n	800540e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	621a      	str	r2, [r3, #32]
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	fffeff8f 	.word	0xfffeff8f
 8005438:	40010000 	.word	0x40010000
 800543c:	40010400 	.word	0x40010400

08005440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4b1e      	ldr	r3, [pc, #120]	@ (80054e4 <TIM_OC4_SetConfig+0xa4>)
 800546c:	4013      	ands	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800548a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	031b      	lsls	r3, r3, #12
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a13      	ldr	r2, [pc, #76]	@ (80054e8 <TIM_OC4_SetConfig+0xa8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_OC4_SetConfig+0x68>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a12      	ldr	r2, [pc, #72]	@ (80054ec <TIM_OC4_SetConfig+0xac>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d109      	bne.n	80054bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	feff8fff 	.word	0xfeff8fff
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40010400 	.word	0x40010400

080054f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4b1b      	ldr	r3, [pc, #108]	@ (8005588 <TIM_OC5_SetConfig+0x98>)
 800551c:	4013      	ands	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005530:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	041b      	lsls	r3, r3, #16
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a12      	ldr	r2, [pc, #72]	@ (800558c <TIM_OC5_SetConfig+0x9c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_OC5_SetConfig+0x5e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a11      	ldr	r2, [pc, #68]	@ (8005590 <TIM_OC5_SetConfig+0xa0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d109      	bne.n	8005562 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005554:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	621a      	str	r2, [r3, #32]
}
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	fffeff8f 	.word	0xfffeff8f
 800558c:	40010000 	.word	0x40010000
 8005590:	40010400 	.word	0x40010400

08005594 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4b1c      	ldr	r3, [pc, #112]	@ (8005630 <TIM_OC6_SetConfig+0x9c>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	051b      	lsls	r3, r3, #20
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a13      	ldr	r2, [pc, #76]	@ (8005634 <TIM_OC6_SetConfig+0xa0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC6_SetConfig+0x60>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a12      	ldr	r2, [pc, #72]	@ (8005638 <TIM_OC6_SetConfig+0xa4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d109      	bne.n	8005608 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	029b      	lsls	r3, r3, #10
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	feff8fff 	.word	0xfeff8fff
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400

0800563c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	2201      	movs	r2, #1
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a1a      	ldr	r2, [r3, #32]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	43db      	mvns	r3, r3
 800565e:	401a      	ands	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1a      	ldr	r2, [r3, #32]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	fa01 f303 	lsl.w	r3, r1, r3
 8005674:	431a      	orrs	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800569c:	2302      	movs	r3, #2
 800569e:	e06d      	b.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a30      	ldr	r2, [pc, #192]	@ (8005788 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2f      	ldr	r2, [pc, #188]	@ (800578c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d108      	bne.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a20      	ldr	r2, [pc, #128]	@ (8005788 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d022      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005712:	d01d      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1d      	ldr	r2, [pc, #116]	@ (8005790 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d018      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1c      	ldr	r2, [pc, #112]	@ (8005794 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d013      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1a      	ldr	r2, [pc, #104]	@ (8005798 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00e      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a15      	ldr	r2, [pc, #84]	@ (800578c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d009      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a16      	ldr	r2, [pc, #88]	@ (800579c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a15      	ldr	r2, [pc, #84]	@ (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10c      	bne.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005756:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	4313      	orrs	r3, r2
 8005760:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40010000 	.word	0x40010000
 800578c:	40010400 	.word	0x40010400
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40000c00 	.word	0x40000c00
 800579c:	40014000 	.word	0x40014000
 80057a0:	40001800 	.word	0x40001800

080057a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e040      	b.n	8005874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fc fa6e 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	@ 0x24
 800580c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fff0 	bl	800680c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fd89 	bl	8006344 <UART_SetConfig>
 8005832:	4603      	mov	r3, r0
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e01b      	b.n	8005874 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800584a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800585a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 f86f 	bl	8006950 <UART_CheckIdleState>
 8005872:	4603      	mov	r3, r0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	@ 0x28
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005890:	2b20      	cmp	r3, #32
 8005892:	d177      	bne.n	8005984 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_UART_Transmit+0x24>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e070      	b.n	8005986 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2221      	movs	r2, #33	@ 0x21
 80058b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058b2:	f7fc fc51 	bl	8002158 <HAL_GetTick>
 80058b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d0:	d108      	bne.n	80058e4 <HAL_UART_Transmit+0x68>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d104      	bne.n	80058e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	e003      	b.n	80058ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058ec:	e02f      	b.n	800594e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2200      	movs	r2, #0
 80058f6:	2180      	movs	r1, #128	@ 0x80
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f001 f8d1 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e03b      	b.n	8005986 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005922:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	3302      	adds	r3, #2
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e007      	b.n	800593c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	781a      	ldrb	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3301      	adds	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1c9      	bne.n	80058ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	2140      	movs	r1, #64	@ 0x40
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f001 f89b 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e005      	b.n	8005986 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	@ 0x28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4613      	mov	r3, r2
 800599c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d165      	bne.n	8005a72 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_UART_Transmit_DMA+0x22>
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e05e      	b.n	8005a74 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	88fa      	ldrh	r2, [r7, #6]
 80059c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	88fa      	ldrh	r2, [r7, #6]
 80059c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2221      	movs	r2, #33	@ 0x21
 80059d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d027      	beq.n	8005a32 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e6:	4a25      	ldr	r2, [pc, #148]	@ (8005a7c <HAL_UART_Transmit_DMA+0xec>)
 80059e8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ee:	4a24      	ldr	r2, [pc, #144]	@ (8005a80 <HAL_UART_Transmit_DMA+0xf0>)
 80059f0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f6:	4a23      	ldr	r2, [pc, #140]	@ (8005a84 <HAL_UART_Transmit_DMA+0xf4>)
 80059f8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fe:	2200      	movs	r2, #0
 8005a00:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3328      	adds	r3, #40	@ 0x28
 8005a12:	461a      	mov	r2, r3
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	f7fc fd8f 	bl	8002538 <HAL_DMA_Start_IT>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2210      	movs	r2, #16
 8005a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e020      	b.n	8005a74 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2240      	movs	r2, #64	@ 0x40
 8005a38:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	613b      	str	r3, [r7, #16]
   return(result);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5a:	623a      	str	r2, [r7, #32]
 8005a5c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	69f9      	ldr	r1, [r7, #28]
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e5      	bne.n	8005a3a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
  }
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3728      	adds	r7, #40	@ 0x28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	08006dd1 	.word	0x08006dd1
 8005a80:	08006e67 	.word	0x08006e67
 8005a84:	08006fe9 	.word	0x08006fe9

08005a88 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08e      	sub	sp, #56	@ 0x38
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ab0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e6      	bne.n	8005a90 <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005acc:	2b80      	cmp	r3, #128	@ 0x80
 8005ace:	d137      	bne.n	8005b40 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3308      	adds	r3, #8
 8005aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af0:	61ba      	str	r2, [r7, #24]
 8005af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6979      	ldr	r1, [r7, #20]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	613b      	str	r3, [r7, #16]
   return(result);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d019      	beq.n	8005b40 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b10:	2200      	movs	r2, #0
 8005b12:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fc fd6d 	bl	80025f8 <HAL_DMA_Abort>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fc ff81 	bl	8002a30 <HAL_DMA_GetError>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d105      	bne.n	8005b40 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2210      	movs	r2, #16
 8005b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e007      	b.n	8005b50 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3738      	adds	r7, #56	@ 0x38
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b09a      	sub	sp, #104	@ 0x68
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b74:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b80:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e6      	bne.n	8005b60 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3308      	adds	r3, #8
 8005b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	f023 0301 	bic.w	r3, r3, #1
 8005ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005bb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e5      	bne.n	8005b92 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d118      	bne.n	8005c00 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f023 0310 	bic.w	r3, r3, #16
 8005be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e6      	bne.n	8005bce <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0a:	2b40      	cmp	r3, #64	@ 0x40
 8005c0c:	d137      	bne.n	8005c7e <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c2e:	61ba      	str	r2, [r7, #24]
 8005c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e5      	bne.n	8005c0e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d019      	beq.n	8005c7e <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4e:	2200      	movs	r2, #0
 8005c50:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fc fcce 	bl	80025f8 <HAL_DMA_Abort>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fc fee2 	bl	8002a30 <HAL_DMA_GetError>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d105      	bne.n	8005c7e <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2210      	movs	r2, #16
 8005c76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e017      	b.n	8005cae <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	220f      	movs	r2, #15
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3768      	adds	r7, #104	@ 0x68
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b0ba      	sub	sp, #232	@ 0xe8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ce2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005cec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d115      	bne.n	8005d20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00f      	beq.n	8005d20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d009      	beq.n	8005d20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 82ac 	beq.w	800626e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
      }
      return;
 8005d1e:	e2a6      	b.n	800626e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8117 	beq.w	8005f58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005d3a:	4b85      	ldr	r3, [pc, #532]	@ (8005f50 <HAL_UART_IRQHandler+0x298>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 810a 	beq.w	8005f58 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d011      	beq.n	8005d74 <HAL_UART_IRQHandler+0xbc>
 8005d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00b      	beq.n	8005d74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2201      	movs	r2, #1
 8005d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d6a:	f043 0201 	orr.w	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d011      	beq.n	8005da4 <HAL_UART_IRQHandler+0xec>
 8005d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2202      	movs	r2, #2
 8005d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d9a:	f043 0204 	orr.w	r2, r3, #4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d011      	beq.n	8005dd4 <HAL_UART_IRQHandler+0x11c>
 8005db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dca:	f043 0202 	orr.w	r2, r3, #2
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d017      	beq.n	8005e10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d105      	bne.n	8005df8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00b      	beq.n	8005e10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e06:	f043 0208 	orr.w	r2, r3, #8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d012      	beq.n	8005e42 <HAL_UART_IRQHandler+0x18a>
 8005e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00c      	beq.n	8005e42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8212 	beq.w	8006272 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00d      	beq.n	8005e76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8a:	2b40      	cmp	r3, #64	@ 0x40
 8005e8c:	d005      	beq.n	8005e9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d04f      	beq.n	8005f3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 ff34 	bl	8006d08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eaa:	2b40      	cmp	r3, #64	@ 0x40
 8005eac:	d141      	bne.n	8005f32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005eda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ede:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ee6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1d9      	bne.n	8005eae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d013      	beq.n	8005f2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f06:	4a13      	ldr	r2, [pc, #76]	@ (8005f54 <HAL_UART_IRQHandler+0x29c>)
 8005f08:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fc fbe2 	bl	80026d8 <HAL_DMA_Abort_IT>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d017      	beq.n	8005f4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f24:	4610      	mov	r0, r2
 8005f26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f28:	e00f      	b.n	8005f4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f9d4 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	e00b      	b.n	8005f4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9d0 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f38:	e007      	b.n	8005f4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9cc 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005f48:	e193      	b.n	8006272 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4a:	bf00      	nop
    return;
 8005f4c:	e191      	b.n	8006272 <HAL_UART_IRQHandler+0x5ba>
 8005f4e:	bf00      	nop
 8005f50:	04000120 	.word	0x04000120
 8005f54:	08007067 	.word	0x08007067

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 814c 	bne.w	80061fa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8145 	beq.w	80061fa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 813e 	beq.w	80061fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2210      	movs	r2, #16
 8005f84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	f040 80b6 	bne.w	8006102 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fa2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8165 	beq.w	8006276 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	f080 815d 	bcs.w	8006276 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd0:	f000 8086 	beq.w	80060e0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006002:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800600a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1da      	bne.n	8005fd4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800602e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3308      	adds	r3, #8
 800603e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006042:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006046:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800604a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e1      	bne.n	800601e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800606a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800606c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006070:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800607e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006080:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006084:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800608c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e3      	bne.n	800605a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060b0:	f023 0310 	bic.w	r3, r3, #16
 80060b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e4      	bne.n	80060a0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fc fa8c 	bl	80025f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fa fb52 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006100:	e0b9      	b.n	8006276 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800610e:	b29b      	uxth	r3, r3
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 80ab 	beq.w	800627a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 80a6 	beq.w	800627a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800613c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006142:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006150:	647b      	str	r3, [r7, #68]	@ 0x44
 8006152:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800615e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e4      	bne.n	800612e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3308      	adds	r3, #8
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	623b      	str	r3, [r7, #32]
   return(result);
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3308      	adds	r3, #8
 8006184:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006188:	633a      	str	r2, [r7, #48]	@ 0x30
 800618a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800618e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006190:	e841 2300 	strex	r3, r2, [r1]
 8006194:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e3      	bne.n	8006164 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 0310 	bic.w	r3, r3, #16
 80061c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	69b9      	ldr	r1, [r7, #24]
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	617b      	str	r3, [r7, #20]
   return(result);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e4      	bne.n	80061b0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fa fad6 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061f8:	e03f      	b.n	800627a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00e      	beq.n	8006224 <HAL_UART_IRQHandler+0x56c>
 8006206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800620a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800621a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f865 	bl	80062ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006222:	e02d      	b.n	8006280 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01c      	beq.n	800627e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	4798      	blx	r3
    }
    return;
 800624c:	e017      	b.n	800627e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d012      	beq.n	8006280 <HAL_UART_IRQHandler+0x5c8>
 800625a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00c      	beq.n	8006280 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 ff13 	bl	8007092 <UART_EndTransmit_IT>
    return;
 800626c:	e008      	b.n	8006280 <HAL_UART_IRQHandler+0x5c8>
      return;
 800626e:	bf00      	nop
 8006270:	e006      	b.n	8006280 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006272:	bf00      	nop
 8006274:	e004      	b.n	8006280 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006276:	bf00      	nop
 8006278:	e002      	b.n	8006280 <HAL_UART_IRQHandler+0x5c8>
      return;
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <HAL_UART_IRQHandler+0x5c8>
    return;
 800627e:	bf00      	nop
  }

}
 8006280:	37e8      	adds	r7, #232	@ 0xe8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800630c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006314:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4313      	orrs	r3, r2
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
	...

08006344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4ba6      	ldr	r3, [pc, #664]	@ (8006608 <UART_SetConfig+0x2c4>)
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6812      	ldr	r2, [r2, #0]
 8006376:	6979      	ldr	r1, [r7, #20]
 8006378:	430b      	orrs	r3, r1
 800637a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a94      	ldr	r2, [pc, #592]	@ (800660c <UART_SetConfig+0x2c8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d120      	bne.n	8006402 <UART_SetConfig+0xbe>
 80063c0:	4b93      	ldr	r3, [pc, #588]	@ (8006610 <UART_SetConfig+0x2cc>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d816      	bhi.n	80063fc <UART_SetConfig+0xb8>
 80063ce:	a201      	add	r2, pc, #4	@ (adr r2, 80063d4 <UART_SetConfig+0x90>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063f1 	.word	0x080063f1
 80063dc:	080063eb 	.word	0x080063eb
 80063e0:	080063f7 	.word	0x080063f7
 80063e4:	2301      	movs	r3, #1
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e150      	b.n	800668c <UART_SetConfig+0x348>
 80063ea:	2302      	movs	r3, #2
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e14d      	b.n	800668c <UART_SetConfig+0x348>
 80063f0:	2304      	movs	r3, #4
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e14a      	b.n	800668c <UART_SetConfig+0x348>
 80063f6:	2308      	movs	r3, #8
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e147      	b.n	800668c <UART_SetConfig+0x348>
 80063fc:	2310      	movs	r3, #16
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e144      	b.n	800668c <UART_SetConfig+0x348>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a83      	ldr	r2, [pc, #524]	@ (8006614 <UART_SetConfig+0x2d0>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d132      	bne.n	8006472 <UART_SetConfig+0x12e>
 800640c:	4b80      	ldr	r3, [pc, #512]	@ (8006610 <UART_SetConfig+0x2cc>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006412:	f003 030c 	and.w	r3, r3, #12
 8006416:	2b0c      	cmp	r3, #12
 8006418:	d828      	bhi.n	800646c <UART_SetConfig+0x128>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <UART_SetConfig+0xdc>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006455 	.word	0x08006455
 8006424:	0800646d 	.word	0x0800646d
 8006428:	0800646d 	.word	0x0800646d
 800642c:	0800646d 	.word	0x0800646d
 8006430:	08006461 	.word	0x08006461
 8006434:	0800646d 	.word	0x0800646d
 8006438:	0800646d 	.word	0x0800646d
 800643c:	0800646d 	.word	0x0800646d
 8006440:	0800645b 	.word	0x0800645b
 8006444:	0800646d 	.word	0x0800646d
 8006448:	0800646d 	.word	0x0800646d
 800644c:	0800646d 	.word	0x0800646d
 8006450:	08006467 	.word	0x08006467
 8006454:	2300      	movs	r3, #0
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e118      	b.n	800668c <UART_SetConfig+0x348>
 800645a:	2302      	movs	r3, #2
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e115      	b.n	800668c <UART_SetConfig+0x348>
 8006460:	2304      	movs	r3, #4
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e112      	b.n	800668c <UART_SetConfig+0x348>
 8006466:	2308      	movs	r3, #8
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e10f      	b.n	800668c <UART_SetConfig+0x348>
 800646c:	2310      	movs	r3, #16
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e10c      	b.n	800668c <UART_SetConfig+0x348>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a68      	ldr	r2, [pc, #416]	@ (8006618 <UART_SetConfig+0x2d4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d120      	bne.n	80064be <UART_SetConfig+0x17a>
 800647c:	4b64      	ldr	r3, [pc, #400]	@ (8006610 <UART_SetConfig+0x2cc>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006482:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006486:	2b30      	cmp	r3, #48	@ 0x30
 8006488:	d013      	beq.n	80064b2 <UART_SetConfig+0x16e>
 800648a:	2b30      	cmp	r3, #48	@ 0x30
 800648c:	d814      	bhi.n	80064b8 <UART_SetConfig+0x174>
 800648e:	2b20      	cmp	r3, #32
 8006490:	d009      	beq.n	80064a6 <UART_SetConfig+0x162>
 8006492:	2b20      	cmp	r3, #32
 8006494:	d810      	bhi.n	80064b8 <UART_SetConfig+0x174>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <UART_SetConfig+0x15c>
 800649a:	2b10      	cmp	r3, #16
 800649c:	d006      	beq.n	80064ac <UART_SetConfig+0x168>
 800649e:	e00b      	b.n	80064b8 <UART_SetConfig+0x174>
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e0f2      	b.n	800668c <UART_SetConfig+0x348>
 80064a6:	2302      	movs	r3, #2
 80064a8:	77fb      	strb	r3, [r7, #31]
 80064aa:	e0ef      	b.n	800668c <UART_SetConfig+0x348>
 80064ac:	2304      	movs	r3, #4
 80064ae:	77fb      	strb	r3, [r7, #31]
 80064b0:	e0ec      	b.n	800668c <UART_SetConfig+0x348>
 80064b2:	2308      	movs	r3, #8
 80064b4:	77fb      	strb	r3, [r7, #31]
 80064b6:	e0e9      	b.n	800668c <UART_SetConfig+0x348>
 80064b8:	2310      	movs	r3, #16
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e0e6      	b.n	800668c <UART_SetConfig+0x348>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a56      	ldr	r2, [pc, #344]	@ (800661c <UART_SetConfig+0x2d8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d120      	bne.n	800650a <UART_SetConfig+0x1c6>
 80064c8:	4b51      	ldr	r3, [pc, #324]	@ (8006610 <UART_SetConfig+0x2cc>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80064d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80064d4:	d013      	beq.n	80064fe <UART_SetConfig+0x1ba>
 80064d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80064d8:	d814      	bhi.n	8006504 <UART_SetConfig+0x1c0>
 80064da:	2b80      	cmp	r3, #128	@ 0x80
 80064dc:	d009      	beq.n	80064f2 <UART_SetConfig+0x1ae>
 80064de:	2b80      	cmp	r3, #128	@ 0x80
 80064e0:	d810      	bhi.n	8006504 <UART_SetConfig+0x1c0>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <UART_SetConfig+0x1a8>
 80064e6:	2b40      	cmp	r3, #64	@ 0x40
 80064e8:	d006      	beq.n	80064f8 <UART_SetConfig+0x1b4>
 80064ea:	e00b      	b.n	8006504 <UART_SetConfig+0x1c0>
 80064ec:	2300      	movs	r3, #0
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e0cc      	b.n	800668c <UART_SetConfig+0x348>
 80064f2:	2302      	movs	r3, #2
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e0c9      	b.n	800668c <UART_SetConfig+0x348>
 80064f8:	2304      	movs	r3, #4
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e0c6      	b.n	800668c <UART_SetConfig+0x348>
 80064fe:	2308      	movs	r3, #8
 8006500:	77fb      	strb	r3, [r7, #31]
 8006502:	e0c3      	b.n	800668c <UART_SetConfig+0x348>
 8006504:	2310      	movs	r3, #16
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e0c0      	b.n	800668c <UART_SetConfig+0x348>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a44      	ldr	r2, [pc, #272]	@ (8006620 <UART_SetConfig+0x2dc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d125      	bne.n	8006560 <UART_SetConfig+0x21c>
 8006514:	4b3e      	ldr	r3, [pc, #248]	@ (8006610 <UART_SetConfig+0x2cc>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800651e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006522:	d017      	beq.n	8006554 <UART_SetConfig+0x210>
 8006524:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006528:	d817      	bhi.n	800655a <UART_SetConfig+0x216>
 800652a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800652e:	d00b      	beq.n	8006548 <UART_SetConfig+0x204>
 8006530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006534:	d811      	bhi.n	800655a <UART_SetConfig+0x216>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <UART_SetConfig+0x1fe>
 800653a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800653e:	d006      	beq.n	800654e <UART_SetConfig+0x20a>
 8006540:	e00b      	b.n	800655a <UART_SetConfig+0x216>
 8006542:	2300      	movs	r3, #0
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e0a1      	b.n	800668c <UART_SetConfig+0x348>
 8006548:	2302      	movs	r3, #2
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e09e      	b.n	800668c <UART_SetConfig+0x348>
 800654e:	2304      	movs	r3, #4
 8006550:	77fb      	strb	r3, [r7, #31]
 8006552:	e09b      	b.n	800668c <UART_SetConfig+0x348>
 8006554:	2308      	movs	r3, #8
 8006556:	77fb      	strb	r3, [r7, #31]
 8006558:	e098      	b.n	800668c <UART_SetConfig+0x348>
 800655a:	2310      	movs	r3, #16
 800655c:	77fb      	strb	r3, [r7, #31]
 800655e:	e095      	b.n	800668c <UART_SetConfig+0x348>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a2f      	ldr	r2, [pc, #188]	@ (8006624 <UART_SetConfig+0x2e0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d125      	bne.n	80065b6 <UART_SetConfig+0x272>
 800656a:	4b29      	ldr	r3, [pc, #164]	@ (8006610 <UART_SetConfig+0x2cc>)
 800656c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006578:	d017      	beq.n	80065aa <UART_SetConfig+0x266>
 800657a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800657e:	d817      	bhi.n	80065b0 <UART_SetConfig+0x26c>
 8006580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006584:	d00b      	beq.n	800659e <UART_SetConfig+0x25a>
 8006586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800658a:	d811      	bhi.n	80065b0 <UART_SetConfig+0x26c>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <UART_SetConfig+0x254>
 8006590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006594:	d006      	beq.n	80065a4 <UART_SetConfig+0x260>
 8006596:	e00b      	b.n	80065b0 <UART_SetConfig+0x26c>
 8006598:	2301      	movs	r3, #1
 800659a:	77fb      	strb	r3, [r7, #31]
 800659c:	e076      	b.n	800668c <UART_SetConfig+0x348>
 800659e:	2302      	movs	r3, #2
 80065a0:	77fb      	strb	r3, [r7, #31]
 80065a2:	e073      	b.n	800668c <UART_SetConfig+0x348>
 80065a4:	2304      	movs	r3, #4
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e070      	b.n	800668c <UART_SetConfig+0x348>
 80065aa:	2308      	movs	r3, #8
 80065ac:	77fb      	strb	r3, [r7, #31]
 80065ae:	e06d      	b.n	800668c <UART_SetConfig+0x348>
 80065b0:	2310      	movs	r3, #16
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e06a      	b.n	800668c <UART_SetConfig+0x348>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006628 <UART_SetConfig+0x2e4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d138      	bne.n	8006632 <UART_SetConfig+0x2ee>
 80065c0:	4b13      	ldr	r3, [pc, #76]	@ (8006610 <UART_SetConfig+0x2cc>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80065ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065ce:	d017      	beq.n	8006600 <UART_SetConfig+0x2bc>
 80065d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065d4:	d82a      	bhi.n	800662c <UART_SetConfig+0x2e8>
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065da:	d00b      	beq.n	80065f4 <UART_SetConfig+0x2b0>
 80065dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065e0:	d824      	bhi.n	800662c <UART_SetConfig+0x2e8>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <UART_SetConfig+0x2aa>
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ea:	d006      	beq.n	80065fa <UART_SetConfig+0x2b6>
 80065ec:	e01e      	b.n	800662c <UART_SetConfig+0x2e8>
 80065ee:	2300      	movs	r3, #0
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e04b      	b.n	800668c <UART_SetConfig+0x348>
 80065f4:	2302      	movs	r3, #2
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e048      	b.n	800668c <UART_SetConfig+0x348>
 80065fa:	2304      	movs	r3, #4
 80065fc:	77fb      	strb	r3, [r7, #31]
 80065fe:	e045      	b.n	800668c <UART_SetConfig+0x348>
 8006600:	2308      	movs	r3, #8
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e042      	b.n	800668c <UART_SetConfig+0x348>
 8006606:	bf00      	nop
 8006608:	efff69f3 	.word	0xefff69f3
 800660c:	40011000 	.word	0x40011000
 8006610:	40023800 	.word	0x40023800
 8006614:	40004400 	.word	0x40004400
 8006618:	40004800 	.word	0x40004800
 800661c:	40004c00 	.word	0x40004c00
 8006620:	40005000 	.word	0x40005000
 8006624:	40011400 	.word	0x40011400
 8006628:	40007800 	.word	0x40007800
 800662c:	2310      	movs	r3, #16
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e02c      	b.n	800668c <UART_SetConfig+0x348>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a72      	ldr	r2, [pc, #456]	@ (8006800 <UART_SetConfig+0x4bc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d125      	bne.n	8006688 <UART_SetConfig+0x344>
 800663c:	4b71      	ldr	r3, [pc, #452]	@ (8006804 <UART_SetConfig+0x4c0>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006642:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006646:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800664a:	d017      	beq.n	800667c <UART_SetConfig+0x338>
 800664c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006650:	d817      	bhi.n	8006682 <UART_SetConfig+0x33e>
 8006652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006656:	d00b      	beq.n	8006670 <UART_SetConfig+0x32c>
 8006658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800665c:	d811      	bhi.n	8006682 <UART_SetConfig+0x33e>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <UART_SetConfig+0x326>
 8006662:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006666:	d006      	beq.n	8006676 <UART_SetConfig+0x332>
 8006668:	e00b      	b.n	8006682 <UART_SetConfig+0x33e>
 800666a:	2300      	movs	r3, #0
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e00d      	b.n	800668c <UART_SetConfig+0x348>
 8006670:	2302      	movs	r3, #2
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e00a      	b.n	800668c <UART_SetConfig+0x348>
 8006676:	2304      	movs	r3, #4
 8006678:	77fb      	strb	r3, [r7, #31]
 800667a:	e007      	b.n	800668c <UART_SetConfig+0x348>
 800667c:	2308      	movs	r3, #8
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e004      	b.n	800668c <UART_SetConfig+0x348>
 8006682:	2310      	movs	r3, #16
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e001      	b.n	800668c <UART_SetConfig+0x348>
 8006688:	2310      	movs	r3, #16
 800668a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006694:	d15b      	bne.n	800674e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006696:	7ffb      	ldrb	r3, [r7, #31]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d828      	bhi.n	80066ee <UART_SetConfig+0x3aa>
 800669c:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <UART_SetConfig+0x360>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066ef 	.word	0x080066ef
 80066b4:	080066df 	.word	0x080066df
 80066b8:	080066ef 	.word	0x080066ef
 80066bc:	080066ef 	.word	0x080066ef
 80066c0:	080066ef 	.word	0x080066ef
 80066c4:	080066e7 	.word	0x080066e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c8:	f7fd fac4 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 80066cc:	61b8      	str	r0, [r7, #24]
        break;
 80066ce:	e013      	b.n	80066f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d0:	f7fd fad4 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 80066d4:	61b8      	str	r0, [r7, #24]
        break;
 80066d6:	e00f      	b.n	80066f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006808 <UART_SetConfig+0x4c4>)
 80066da:	61bb      	str	r3, [r7, #24]
        break;
 80066dc:	e00c      	b.n	80066f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066de:	f7fd f9a7 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80066e2:	61b8      	str	r0, [r7, #24]
        break;
 80066e4:	e008      	b.n	80066f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ea:	61bb      	str	r3, [r7, #24]
        break;
 80066ec:	e004      	b.n	80066f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	77bb      	strb	r3, [r7, #30]
        break;
 80066f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d074      	beq.n	80067e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	005a      	lsls	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	441a      	add	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	d916      	bls.n	8006748 <UART_SetConfig+0x404>
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006720:	d212      	bcs.n	8006748 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	b29b      	uxth	r3, r3
 8006726:	f023 030f 	bic.w	r3, r3, #15
 800672a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	b29b      	uxth	r3, r3
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	b29a      	uxth	r2, r3
 8006738:	89fb      	ldrh	r3, [r7, #14]
 800673a:	4313      	orrs	r3, r2
 800673c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	89fa      	ldrh	r2, [r7, #14]
 8006744:	60da      	str	r2, [r3, #12]
 8006746:	e04f      	b.n	80067e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	77bb      	strb	r3, [r7, #30]
 800674c:	e04c      	b.n	80067e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800674e:	7ffb      	ldrb	r3, [r7, #31]
 8006750:	2b08      	cmp	r3, #8
 8006752:	d828      	bhi.n	80067a6 <UART_SetConfig+0x462>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x418>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006781 	.word	0x08006781
 8006760:	08006789 	.word	0x08006789
 8006764:	08006791 	.word	0x08006791
 8006768:	080067a7 	.word	0x080067a7
 800676c:	08006797 	.word	0x08006797
 8006770:	080067a7 	.word	0x080067a7
 8006774:	080067a7 	.word	0x080067a7
 8006778:	080067a7 	.word	0x080067a7
 800677c:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006780:	f7fd fa68 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8006784:	61b8      	str	r0, [r7, #24]
        break;
 8006786:	e013      	b.n	80067b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fd fa78 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 800678c:	61b8      	str	r0, [r7, #24]
        break;
 800678e:	e00f      	b.n	80067b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b1d      	ldr	r3, [pc, #116]	@ (8006808 <UART_SetConfig+0x4c4>)
 8006792:	61bb      	str	r3, [r7, #24]
        break;
 8006794:	e00c      	b.n	80067b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fd f94b 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 800679a:	61b8      	str	r0, [r7, #24]
        break;
 800679c:	e008      	b.n	80067b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a2:	61bb      	str	r3, [r7, #24]
        break;
 80067a4:	e004      	b.n	80067b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	77bb      	strb	r3, [r7, #30]
        break;
 80067ae:	bf00      	nop
    }

    if (pclk != 0U)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	085a      	lsrs	r2, r3, #1
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	441a      	add	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b0f      	cmp	r3, #15
 80067ce:	d909      	bls.n	80067e4 <UART_SetConfig+0x4a0>
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d6:	d205      	bcs.n	80067e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	e001      	b.n	80067e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80067f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40007c00 	.word	0x40007c00
 8006804:	40023800 	.word	0x40023800
 8006808:	00f42400 	.word	0x00f42400

0800680c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01a      	beq.n	8006922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690a:	d10a      	bne.n	8006922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b098      	sub	sp, #96	@ 0x60
 8006954:	af02      	add	r7, sp, #8
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006960:	f7fb fbfa 	bl	8002158 <HAL_GetTick>
 8006964:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b08      	cmp	r3, #8
 8006972:	d12e      	bne.n	80069d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006974:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800697c:	2200      	movs	r2, #0
 800697e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f88c 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d021      	beq.n	80069d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800699c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e6      	bne.n	800698e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e062      	b.n	8006a98 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d149      	bne.n	8006a74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069e8:	2200      	movs	r2, #0
 80069ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f856 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d03c      	beq.n	8006a74 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	623b      	str	r3, [r7, #32]
   return(result);
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a4c:	61fa      	str	r2, [r7, #28]
 8006a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	617b      	str	r3, [r7, #20]
   return(result);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e5      	bne.n	8006a2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e011      	b.n	8006a98 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3758      	adds	r7, #88	@ 0x58
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab0:	e04f      	b.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d04b      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aba:	f7fb fb4d 	bl	8002158 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e04e      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d037      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b80      	cmp	r3, #128	@ 0x80
 8006ae6:	d034      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	d031      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d110      	bne.n	8006b1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2208      	movs	r2, #8
 8006b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f8ff 	bl	8006d08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e029      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b2c:	d111      	bne.n	8006b52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f8e5 	bl	8006d08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e00f      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	bf0c      	ite	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	2300      	movne	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d0a0      	beq.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b096      	sub	sp, #88	@ 0x58
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	88fa      	ldrh	r2, [r7, #6]
 8006b94:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2222      	movs	r2, #34	@ 0x22
 8006ba4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d028      	beq.n	8006c02 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8006cb0 <UART_Start_Receive_DMA+0x134>)
 8006bb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8006cb4 <UART_Start_Receive_DMA+0x138>)
 8006bbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc4:	4a3c      	ldr	r2, [pc, #240]	@ (8006cb8 <UART_Start_Receive_DMA+0x13c>)
 8006bc6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bcc:	2200      	movs	r2, #0
 8006bce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3324      	adds	r3, #36	@ 0x24
 8006bda:	4619      	mov	r1, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be0:	461a      	mov	r2, r3
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	f7fb fca8 	bl	8002538 <HAL_DMA_Start_IT>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e051      	b.n	8006ca6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d018      	beq.n	8006c3c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c2a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e6      	bne.n	8006c0a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	f043 0301 	orr.w	r3, r3, #1
 8006c52:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c5c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3308      	adds	r3, #8
 8006c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c90:	623a      	str	r2, [r7, #32]
 8006c92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	69f9      	ldr	r1, [r7, #28]
 8006c96:	6a3a      	ldr	r2, [r7, #32]
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e5      	bne.n	8006c70 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3758      	adds	r7, #88	@ 0x58
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	08006e83 	.word	0x08006e83
 8006cb4:	08006fab 	.word	0x08006fab
 8006cb8:	08006fe9 	.word	0x08006fe9

08006cbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	@ 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6979      	ldr	r1, [r7, #20]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e6      	bne.n	8006cc4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006cfc:	bf00      	nop
 8006cfe:	3724      	adds	r7, #36	@ 0x24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b095      	sub	sp, #84	@ 0x54
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e6      	bne.n	8006d10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d118      	bne.n	8006db0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0310 	bic.w	r3, r3, #16
 8006d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6979      	ldr	r1, [r7, #20]
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	613b      	str	r3, [r7, #16]
   return(result);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e6      	bne.n	8006d7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006dc4:	bf00      	nop
 8006dc6:	3754      	adds	r7, #84	@ 0x54
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b090      	sub	sp, #64	@ 0x40
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006de6:	d037      	beq.n	8006e58 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e10:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e5      	bne.n	8006df0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	69b9      	ldr	r1, [r7, #24]
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e6      	bne.n	8006e24 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e56:	e002      	b.n	8006e5e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006e58:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e5a:	f7ff fa15 	bl	8006288 <HAL_UART_TxCpltCallback>
}
 8006e5e:	bf00      	nop
 8006e60:	3740      	adds	r7, #64	@ 0x40
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f7ff fa11 	bl	800629c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b09c      	sub	sp, #112	@ 0x70
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e98:	d071      	beq.n	8006f7e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ec0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ec2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ec6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e6      	bne.n	8006ea2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee6:	f023 0301 	bic.w	r3, r3, #1
 8006eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ef4:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ef6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006efa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	623b      	str	r3, [r7, #32]
   return(result);
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f28:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e5      	bne.n	8006f08 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d118      	bne.n	8006f7e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f023 0310 	bic.w	r3, r3, #16
 8006f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	69b9      	ldr	r1, [r7, #24]
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	617b      	str	r3, [r7, #20]
   return(result);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e6      	bne.n	8006f4c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f80:	2200      	movs	r2, #0
 8006f82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d107      	bne.n	8006f9c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f92:	4619      	mov	r1, r3
 8006f94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f96:	f7f9 fc05 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f9a:	e002      	b.n	8006fa2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006f9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f9e:	f7ff f987 	bl	80062b0 <HAL_UART_RxCpltCallback>
}
 8006fa2:	bf00      	nop
 8006fa4:	3770      	adds	r7, #112	@ 0x70
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d109      	bne.n	8006fda <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7f9 fbe6 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fd8:	e002      	b.n	8006fe0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff f972 	bl	80062c4 <HAL_UART_RxHalfCpltCallback>
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ffa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007002:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700e:	2b80      	cmp	r3, #128	@ 0x80
 8007010:	d109      	bne.n	8007026 <UART_DMAError+0x3e>
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b21      	cmp	r3, #33	@ 0x21
 8007016:	d106      	bne.n	8007026 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2200      	movs	r2, #0
 800701c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007020:	6978      	ldr	r0, [r7, #20]
 8007022:	f7ff fe4b 	bl	8006cbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007030:	2b40      	cmp	r3, #64	@ 0x40
 8007032:	d109      	bne.n	8007048 <UART_DMAError+0x60>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b22      	cmp	r3, #34	@ 0x22
 8007038:	d106      	bne.n	8007048 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2200      	movs	r2, #0
 800703e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007042:	6978      	ldr	r0, [r7, #20]
 8007044:	f7ff fe60 	bl	8006d08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800704e:	f043 0210 	orr.w	r2, r3, #16
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007058:	6978      	ldr	r0, [r7, #20]
 800705a:	f7ff f93d 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800705e:	bf00      	nop
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f7ff f927 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b088      	sub	sp, #32
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	61bb      	str	r3, [r7, #24]
 80070ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6979      	ldr	r1, [r7, #20]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	613b      	str	r3, [r7, #16]
   return(result);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e6      	bne.n	800709a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff f8d5 	bl	8006288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070de:	bf00      	nop
 80070e0:	3720      	adds	r7, #32
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b08c      	sub	sp, #48	@ 0x30
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	4613      	mov	r3, r2
 80070f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d142      	bne.n	8007184 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e03b      	b.n	8007186 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	461a      	mov	r2, r3
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff fd2b 	bl	8006b7c <UART_Start_Receive_DMA>
 8007126:	4603      	mov	r3, r0
 8007128:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800712c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007130:	2b00      	cmp	r3, #0
 8007132:	d124      	bne.n	800717e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007138:	2b01      	cmp	r3, #1
 800713a:	d11d      	bne.n	8007178 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2210      	movs	r2, #16
 8007142:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	617b      	str	r3, [r7, #20]
   return(result);
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f043 0310 	orr.w	r3, r3, #16
 8007158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	627b      	str	r3, [r7, #36]	@ 0x24
 8007164:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6a39      	ldr	r1, [r7, #32]
 8007168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e6      	bne.n	8007144 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007176:	e002      	b.n	800717e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800717e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007182:	e000      	b.n	8007186 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007184:	2302      	movs	r3, #2
  }
}
 8007186:	4618      	mov	r0, r3
 8007188:	3730      	adds	r7, #48	@ 0x30
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007190:	b084      	sub	sp, #16
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	f107 001c 	add.w	r0, r7, #28
 800719e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d121      	bne.n	80071ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	4b21      	ldr	r3, [pc, #132]	@ (8007240 <USB_CoreInit+0xb0>)
 80071bc:	4013      	ands	r3, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d105      	bne.n	80071e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa92 	bl	800770c <USB_CoreReset>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	e010      	b.n	8007210 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa86 	bl	800770c <USB_CoreReset>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007208:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007210:	7fbb      	ldrb	r3, [r7, #30]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d10b      	bne.n	800722e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f043 0206 	orr.w	r2, r3, #6
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f043 0220 	orr.w	r2, r3, #32
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800723a:	b004      	add	sp, #16
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	ffbdffbf 	.word	0xffbdffbf

08007244 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f023 0201 	bic.w	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d115      	bne.n	80072b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007294:	200a      	movs	r0, #10
 8007296:	f7fa ff6b 	bl	8002170 <HAL_Delay>
      ms += 10U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	330a      	adds	r3, #10
 800729e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fa25 	bl	80076f0 <USB_GetMode>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d01e      	beq.n	80072ea <USB_SetCurrentMode+0x84>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80072b0:	d9f0      	bls.n	8007294 <USB_SetCurrentMode+0x2e>
 80072b2:	e01a      	b.n	80072ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d115      	bne.n	80072e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072c6:	200a      	movs	r0, #10
 80072c8:	f7fa ff52 	bl	8002170 <HAL_Delay>
      ms += 10U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	330a      	adds	r3, #10
 80072d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa0c 	bl	80076f0 <USB_GetMode>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <USB_SetCurrentMode+0x84>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80072e2:	d9f0      	bls.n	80072c6 <USB_SetCurrentMode+0x60>
 80072e4:	e001      	b.n	80072ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e005      	b.n	80072f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80072ee:	d101      	bne.n	80072f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007300:	b084      	sub	sp, #16
 8007302:	b580      	push	{r7, lr}
 8007304:	b086      	sub	sp, #24
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800730e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	e009      	b.n	8007334 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3340      	adds	r3, #64	@ 0x40
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	2200      	movs	r2, #0
 800732c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	3301      	adds	r3, #1
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2b0e      	cmp	r3, #14
 8007338:	d9f2      	bls.n	8007320 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800733a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800733e:	2b00      	cmp	r3, #0
 8007340:	d11c      	bne.n	800737c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007350:	f043 0302 	orr.w	r3, r3, #2
 8007354:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	e005      	b.n	8007388 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007380:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800738e:	461a      	mov	r2, r3
 8007390:	2300      	movs	r3, #0
 8007392:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007394:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007398:	2b01      	cmp	r3, #1
 800739a:	d10d      	bne.n	80073b8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800739c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073a4:	2100      	movs	r1, #0
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f968 	bl	800767c <USB_SetDevSpeed>
 80073ac:	e008      	b.n	80073c0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073ae:	2101      	movs	r1, #1
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f963 	bl	800767c <USB_SetDevSpeed>
 80073b6:	e003      	b.n	80073c0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073b8:	2103      	movs	r1, #3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f95e 	bl	800767c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073c0:	2110      	movs	r1, #16
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f8fa 	bl	80075bc <USB_FlushTxFifo>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f924 	bl	8007620 <USB_FlushRxFifo>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e8:	461a      	mov	r2, r3
 80073ea:	2300      	movs	r3, #0
 80073ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f4:	461a      	mov	r2, r3
 80073f6:	2300      	movs	r3, #0
 80073f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007400:	461a      	mov	r2, r3
 8007402:	2300      	movs	r3, #0
 8007404:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	e043      	b.n	8007494 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800741e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007422:	d118      	bne.n	8007456 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007436:	461a      	mov	r2, r3
 8007438:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	e013      	b.n	8007468 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800744c:	461a      	mov	r2, r3
 800744e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	e008      	b.n	8007468 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007462:	461a      	mov	r2, r3
 8007464:	2300      	movs	r3, #0
 8007466:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007474:	461a      	mov	r2, r3
 8007476:	2300      	movs	r3, #0
 8007478:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007486:	461a      	mov	r2, r3
 8007488:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800748c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3301      	adds	r3, #1
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007498:	461a      	mov	r2, r3
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	4293      	cmp	r3, r2
 800749e:	d3b5      	bcc.n	800740c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074a0:	2300      	movs	r3, #0
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	e043      	b.n	800752e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074bc:	d118      	bne.n	80074f0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d0:	461a      	mov	r2, r3
 80074d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	e013      	b.n	8007502 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e6:	461a      	mov	r2, r3
 80074e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	e008      	b.n	8007502 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074fc:	461a      	mov	r2, r3
 80074fe:	2300      	movs	r3, #0
 8007500:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750e:	461a      	mov	r2, r3
 8007510:	2300      	movs	r3, #0
 8007512:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007520:	461a      	mov	r2, r3
 8007522:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007526:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	3301      	adds	r3, #1
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007532:	461a      	mov	r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	4293      	cmp	r3, r2
 8007538:	d3b5      	bcc.n	80074a6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800754c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800755a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800755c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	f043 0210 	orr.w	r2, r3, #16
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	4b0f      	ldr	r3, [pc, #60]	@ (80075b4 <USB_DevInit+0x2b4>)
 8007576:	4313      	orrs	r3, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800757c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f043 0208 	orr.w	r2, r3, #8
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007590:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007594:	2b01      	cmp	r3, #1
 8007596:	d105      	bne.n	80075a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699a      	ldr	r2, [r3, #24]
 800759c:	4b06      	ldr	r3, [pc, #24]	@ (80075b8 <USB_DevInit+0x2b8>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075b0:	b004      	add	sp, #16
 80075b2:	4770      	bx	lr
 80075b4:	803c3800 	.word	0x803c3800
 80075b8:	40000004 	.word	0x40000004

080075bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3301      	adds	r3, #1
 80075ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075d6:	d901      	bls.n	80075dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e01b      	b.n	8007614 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	daf2      	bge.n	80075ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	019b      	lsls	r3, r3, #6
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3301      	adds	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007600:	d901      	bls.n	8007606 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e006      	b.n	8007614 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b20      	cmp	r3, #32
 8007610:	d0f0      	beq.n	80075f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007638:	d901      	bls.n	800763e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e018      	b.n	8007670 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	daf2      	bge.n	800762c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2210      	movs	r2, #16
 800764e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3301      	adds	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800765c:	d901      	bls.n	8007662 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e006      	b.n	8007670 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	2b10      	cmp	r3, #16
 800766c:	d0f0      	beq.n	8007650 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	68f9      	ldr	r1, [r7, #12]
 8007698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800769c:	4313      	orrs	r3, r2
 800769e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076c8:	f023 0303 	bic.w	r3, r3, #3
 80076cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076dc:	f043 0302 	orr.w	r3, r3, #2
 80076e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	f003 0301 	and.w	r3, r3, #1
}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3301      	adds	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007724:	d901      	bls.n	800772a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e01b      	b.n	8007762 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	daf2      	bge.n	8007718 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f043 0201 	orr.w	r2, r3, #1
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800774e:	d901      	bls.n	8007754 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e006      	b.n	8007762 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b01      	cmp	r3, #1
 800775e:	d0f0      	beq.n	8007742 <USB_CoreReset+0x36>

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fc28 	bl	8007fd0 <malloc>
 8007780:	4603      	mov	r3, r0
 8007782:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8007784:	68fb      	ldr	r3, [r7, #12]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <ATC_Free+0x26>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fc19 	bl	8007fe0 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
  }
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	8a9b      	ldrh	r3, [r3, #20]
 80077d2:	461a      	mov	r2, r3
 80077d4:	2100      	movs	r1, #0
 80077d6:	f000 fd3d 	bl	8008254 <memset>
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b086      	sub	sp, #24
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	4613      	mov	r3, r2
 80077ee:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 80077f0:	2300      	movs	r3, #0
 80077f2:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	88fa      	ldrh	r2, [r7, #6]
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe f8c4 	bl	8005990 <HAL_UART_Transmit_DMA>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 800780e:	2301      	movs	r3, #1
 8007810:	75fb      	strb	r3, [r7, #23]
 8007812:	e000      	b.n	8007816 <ATC_TxRaw+0x34>
      break;
 8007814:	bf00      	nop

  } while (0);

  return answer;
 8007816:	7dfb      	ldrb	r3, [r7, #23]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe fd67 	bl	8006300 <HAL_UART_GetState>
 8007832:	4603      	mov	r3, r0
 8007834:	2b21      	cmp	r3, #33	@ 0x21
 8007836:	d007      	beq.n	8007848 <ATC_TxBusy+0x28>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe fd5f 	bl	8006300 <HAL_UART_GetState>
 8007842:	4603      	mov	r3, r0
 8007844:	2b23      	cmp	r3, #35	@ 0x23
 8007846:	d101      	bne.n	800784c <ATC_TxBusy+0x2c>
  {
    return true;
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800784c:	2300      	movs	r3, #0
  }
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 8007864:	f7fa fc78 	bl	8002158 <HAL_GetTick>
 8007868:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 800786a:	2001      	movs	r0, #1
 800786c:	f000 fba1 	bl	8007fb2 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe fd43 	bl	8006300 <HAL_UART_GetState>
 800787a:	4603      	mov	r3, r0
 800787c:	2b22      	cmp	r3, #34	@ 0x22
 800787e:	d007      	beq.n	8007890 <ATC_TxWait+0x3a>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe fd3b 	bl	8006300 <HAL_UART_GetState>
 800788a:	4603      	mov	r3, r0
 800788c:	2b20      	cmp	r3, #32
 800788e:	d102      	bne.n	8007896 <ATC_TxWait+0x40>
    {
      answer = true;
 8007890:	2301      	movs	r3, #1
 8007892:	73fb      	strb	r3, [r7, #15]
      break;
 8007894:	e01c      	b.n	80078d0 <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fd30 	bl	8006300 <HAL_UART_GetState>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2be0      	cmp	r3, #224	@ 0xe0
 80078a4:	d014      	beq.n	80078d0 <ATC_TxWait+0x7a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fd28 	bl	8006300 <HAL_UART_GetState>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80078b4:	d00c      	beq.n	80078d0 <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 80078b6:	f7fa fc4f 	bl	8002158 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d8d1      	bhi.n	800786a <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe f8dc 	bl	8005a88 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8b1b      	ldrh	r3, [r3, #24]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d024      	beq.n	8007934 <ATC_CheckEvents+0x5a>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	e019      	b.n	8007924 <ATC_CheckEvents+0x4a>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	4413      	add	r3, r2
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4619      	mov	r1, r3
 8007902:	f000 fce1 	bl	80082c8 <strstr>
 8007906:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <ATC_CheckEvents+0x44>
      {
        hAtc->psEvents[ev].EventCallback(found);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	4413      	add	r3, r2
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	68b8      	ldr	r0, [r7, #8]
 800791c:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	429a      	cmp	r2, r3
 800792c:	d3e0      	bcc.n	80078f0 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff ff44 	bl	80077bc <ATC_RxFlush>
  }
}
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	8b1b      	ldrh	r3, [r3, #24]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d023      	beq.n	800799a <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007952:	2300      	movs	r3, #0
 8007954:	81bb      	strh	r3, [r7, #12]
 8007956:	e01b      	b.n	8007990 <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800795c:	89ba      	ldrh	r2, [r7, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	320a      	adds	r2, #10
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	4619      	mov	r1, r3
 8007968:	f000 fcae 	bl	80082c8 <strstr>
 800796c:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8007980:	89bb      	ldrh	r3, [r7, #12]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	3301      	adds	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]
        break;
 8007988:	e007      	b.n	800799a <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800798a:	89bb      	ldrh	r3, [r7, #12]
 800798c:	3301      	adds	r3, #1
 800798e:	81bb      	strh	r3, [r7, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8adb      	ldrh	r3, [r3, #22]
 8007994:	89ba      	ldrh	r2, [r7, #12]
 8007996:	429a      	cmp	r2, r3
 8007998:	d3de      	bcc.n	8007958 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fe fcb9 	bl	8006328 <HAL_UART_GetError>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01f      	beq.n	80079fc <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f04f 32ff 	mov.w	r2, #4294967295
 80079c6:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe f8c3 	bl	8005b58 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69d9      	ldr	r1, [r3, #28]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	8a9b      	ldrh	r3, [r3, #20]
 80079de:	461a      	mov	r2, r3
 80079e0:	f7ff fb81 	bl	80070e6 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0208 	bic.w	r2, r2, #8
 80079fa:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe fc7d 	bl	8006300 <HAL_UART_GetState>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b22      	cmp	r3, #34	@ 0x22
 8007a0a:	d027      	beq.n	8007a5c <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fc75 	bl	8006300 <HAL_UART_GetState>
 8007a16:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8007a18:	2b23      	cmp	r3, #35	@ 0x23
 8007a1a:	d01f      	beq.n	8007a5c <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f04f 32ff 	mov.w	r2, #4294967295
 8007a26:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe f893 	bl	8005b58 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69d9      	ldr	r1, [r3, #28]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	8a9b      	ldrh	r3, [r3, #20]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f7ff fb51 	bl	80070e6 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0208 	bic.w	r2, r2, #8
 8007a5a:	601a      	str	r2, [r3, #0]
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007a74:	2300      	movs	r3, #0
 8007a76:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d075      	beq.n	8007b6a <ATC_Init+0x106>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d072      	beq.n	8007b6a <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007a84:	223c      	movs	r2, #60	@ 0x3c
 8007a86:	2100      	movs	r1, #0
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fbe3 	bl	8008254 <memset>
    if (pName != NULL)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d006      	beq.n	8007aa2 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3304      	adds	r3, #4
 8007a98:	2207      	movs	r2, #7
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fc00 	bl	80082a2 <strncpy>
    }
    hAtc->hUart = hUart;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff fe5f 	bl	800776e <ATC_Malloc>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d04e      	beq.n	8007b5c <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	88fa      	ldrh	r2, [r7, #6]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fbc4 	bl	8008254 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8007acc:	88fb      	ldrh	r3, [r7, #6]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fe4d 	bl	800776e <ATC_Malloc>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d03e      	beq.n	8007b60 <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	88fa      	ldrh	r2, [r7, #6]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fbb2 	bl	8008254 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff fe3b 	bl	800776e <ATC_Malloc>
 8007af8:	4602      	mov	r2, r0
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d02e      	beq.n	8007b64 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0a:	88fa      	ldrh	r2, [r7, #6]
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fba0 	bl	8008254 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	88fa      	ldrh	r2, [r7, #6]
 8007b18:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f04f 32ff 	mov.w	r2, #4294967295
 8007b24:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	69d9      	ldr	r1, [r3, #28]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8a9b      	ldrh	r3, [r3, #20]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f7ff fad7 	bl	80070e6 <HAL_UARTEx_ReceiveToIdle_DMA>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d114      	bne.n	8007b68 <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0208 	bic.w	r2, r2, #8
 8007b54:	601a      	str	r2, [r3, #0]
    answer = true;
 8007b56:	2301      	movs	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
 8007b5a:	e006      	b.n	8007b6a <ATC_Init+0x106>
      break;
 8007b5c:	bf00      	nop
 8007b5e:	e004      	b.n	8007b6a <ATC_Init+0x106>
      break;
 8007b60:	bf00      	nop
 8007b62:	e002      	b.n	8007b6a <ATC_Init+0x106>
      break;
 8007b64:	bf00      	nop
 8007b66:	e000      	b.n	8007b6a <ATC_Init+0x106>
      break;
 8007b68:	bf00      	nop

  } while (0);

  if (answer == false)
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	f083 0301 	eor.w	r3, r3, #1
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d016      	beq.n	8007ba4 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	331c      	adds	r3, #28
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fe03 	bl	800778e <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d004      	beq.n	8007b9a <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3324      	adds	r3, #36	@ 0x24
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7ff fdfa 	bl	800778e <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007b9a:	223c      	movs	r2, #60	@ 0x3c
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fb58 	bl	8008254 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff fef4 	bl	80079a4 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fe8c 	bl	80078da <ATC_CheckEvents>
}
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8007bca:	b590      	push	{r4, r7, lr}
 8007bcc:	b08d      	sub	sp, #52	@ 0x34
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f7ff fe1f 	bl	8007820 <ATC_TxBusy>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8007be8:	f06f 0303 	mvn.w	r3, #3
 8007bec:	e0c8      	b.n	8007d80 <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 8007bee:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	d902      	bls.n	8007bfc <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 8007bf6:	f06f 0304 	mvn.w	r3, #4
 8007bfa:	e0c1      	b.n	8007d80 <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff fed1 	bl	80079a4 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8007c02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007c06:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c0c:	e04b      	b.n	8007ca6 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	617a      	str	r2, [r7, #20]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8007c18:	69b8      	ldr	r0, [r7, #24]
 8007c1a:	f7f8 fb17 	bl	800024c <strlen>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	3301      	adds	r3, #1
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff fda3 	bl	800776e <ATC_Malloc>
 8007c28:	4601      	mov	r1, r0
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c2e:	320a      	adds	r2, #10
 8007c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c38:	320a      	adds	r2, #10
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d119      	bne.n	8007c76 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 8007c42:	2300      	movs	r3, #0
 8007c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007c48:	e00d      	b.n	8007c66 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8007c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c4e:	330a      	adds	r3, #10
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4413      	add	r3, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff fd99 	bl	800778e <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8007c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c60:	3301      	adds	r3, #1
 8007c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007c66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	dcec      	bgt.n	8007c4a <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 8007c70:	f06f 0302 	mvn.w	r3, #2
 8007c74:	e084      	b.n	8007d80 <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c7a:	320a      	adds	r2, #10
 8007c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c80:	69b9      	ldr	r1, [r7, #24]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fb72 	bl	800836c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c8c:	320a      	adds	r2, #10
 8007c8e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007c92:	69b8      	ldr	r0, [r7, #24]
 8007c94:	f7f8 fada 	bl	800024c <strlen>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	4423      	add	r3, r4
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8007ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ca6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cac:	429a      	cmp	r2, r3
 8007cae:	dbae      	blt.n	8007c0e <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff fd83 	bl	80077bc <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8007cb6:	68b8      	ldr	r0, [r7, #8]
 8007cb8:	f7f8 fac8 	bl	800024c <strlen>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7ff fd8c 	bl	80077e2 <ATC_TxRaw>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f083 0301 	eor.w	r3, r3, #1
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8007cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007cdc:	e00d      	b.n	8007cfa <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff fdb8 	bl	8007856 <ATC_TxWait>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f083 0301 	eor.w	r3, r3, #1
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8007cf2:	f06f 0301 	mvn.w	r3, #1
 8007cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007cf8:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8007cfa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d022      	beq.n	8007d48 <ATC_SendReceive+0x17e>
 8007d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d11f      	bne.n	8007d48 <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 8007d08:	f7fa fa26 	bl	8002158 <HAL_GetTick>
 8007d0c:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 8007d0e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8007d18:	e00e      	b.n	8007d38 <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 8007d1a:	2001      	movs	r0, #1
 8007d1c:	f000 f949 	bl	8007fb2 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff fe0a 	bl	800793c <ATC_CheckResponse>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 8007d2c:	7ffb      	ldrb	r3, [r7, #31]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 8007d32:	7ffb      	ldrb	r3, [r7, #31]
 8007d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d36:	e007      	b.n	8007d48 <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 8007d38:	f7fa fa0e 	bl	8002158 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d8e8      	bhi.n	8007d1a <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d54:	e00d      	b.n	8007d72 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8007d56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d5a:	330a      	adds	r3, #10
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fd13 	bl	800778e <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8007d68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d72:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007d76:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d3eb      	bcc.n	8007d56 <ATC_SendReceive+0x18c>
  }
  return answer;
 8007d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3734      	adds	r7, #52	@ 0x34
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd90      	pop	{r4, r7, pc}

08007d88 <ATC_Receive>:
  * @param  Items: Number of searching strings
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_Receive(ATC_HandleTypeDef *hAtc, char **ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8007d88:	b408      	push	{r3}
 8007d8a:	b590      	push	{r4, r7, lr}
 8007d8c:	b08c      	sub	sp, #48	@ 0x30
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
  int answer = ATC_RESP_NOT_FOUND;
 8007d96:	2300      	movs	r3, #0
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (Items > ATC_RESP_MAX)
 8007d9a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007d9e:	2b05      	cmp	r3, #5
 8007da0:	d902      	bls.n	8007da8 <ATC_Receive+0x20>
  {
    return ATC_RESP_ITEMS;
 8007da2:	f06f 0304 	mvn.w	r3, #4
 8007da6:	e099      	b.n	8007edc <ATC_Receive+0x154>
  }
  ATC_CheckErrors(hAtc);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7ff fdfb 	bl	80079a4 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8007dae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007db2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8007db4:	2300      	movs	r3, #0
 8007db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007db8:	e04b      	b.n	8007e52 <ATC_Receive+0xca>
  {
    char *arg = va_arg(args, char*);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	1d1a      	adds	r2, r3, #4
 8007dbe:	617a      	str	r2, [r7, #20]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8007dc4:	69b8      	ldr	r0, [r7, #24]
 8007dc6:	f7f8 fa41 	bl	800024c <strlen>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	3301      	adds	r3, #1
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff fccd 	bl	800776e <ATC_Malloc>
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dda:	320a      	adds	r2, #10
 8007ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007de4:	320a      	adds	r2, #10
 8007de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d119      	bne.n	8007e22 <ATC_Receive+0x9a>
    {
      for (uint8_t j = 0; j < i; j++)
 8007dee:	2300      	movs	r3, #0
 8007df0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007df4:	e00d      	b.n	8007e12 <ATC_Receive+0x8a>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8007df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dfa:	330a      	adds	r3, #10
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff fcc3 	bl	800778e <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8007e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	dcec      	bgt.n	8007df6 <ATC_Receive+0x6e>
      }
      return ATC_RESP_MEM_ERROR;
 8007e1c:	f06f 0302 	mvn.w	r3, #2
 8007e20:	e05c      	b.n	8007edc <ATC_Receive+0x154>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e26:	320a      	adds	r2, #10
 8007e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2c:	69b9      	ldr	r1, [r7, #24]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fa9c 	bl	800836c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e38:	320a      	adds	r2, #10
 8007e3a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007e3e:	69b8      	ldr	r0, [r7, #24]
 8007e40:	f7f8 fa04 	bl	800024c <strlen>
 8007e44:	4603      	mov	r3, r0
 8007e46:	4423      	add	r3, r4
 8007e48:	2200      	movs	r2, #0
 8007e4a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	3301      	adds	r3, #1
 8007e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e52:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	dbae      	blt.n	8007dba <ATC_Receive+0x32>
  }
  va_end(args);

  if (Items > 0)
 8007e5c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01f      	beq.n	8007ea4 <ATC_Receive+0x11c>
  {
    uint32_t start_time = HAL_GetTick();
 8007e64:	f7fa f978 	bl	8002158 <HAL_GetTick>
 8007e68:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 8007e6a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8007e74:	e00e      	b.n	8007e94 <ATC_Receive+0x10c>
    {
      ATC_Delay(1);
 8007e76:	2001      	movs	r0, #1
 8007e78:	f000 f89b 	bl	8007fb2 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff fd5c 	bl	800793c <ATC_CheckResponse>
 8007e84:	4603      	mov	r3, r0
 8007e86:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 8007e88:	7ffb      	ldrb	r3, [r7, #31]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <ATC_Receive+0x10c>
      {
        answer = found_index;
 8007e8e:	7ffb      	ldrb	r3, [r7, #31]
 8007e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e92:	e007      	b.n	8007ea4 <ATC_Receive+0x11c>
    while (HAL_GetTick() - start_time < RxTimeout)
 8007e94:	f7fa f960 	bl	8002158 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d8e8      	bhi.n	8007e76 <ATC_Receive+0xee>
      }
    }
  }
  hAtc->RespCount = 0;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007eb0:	e00d      	b.n	8007ece <ATC_Receive+0x146>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8007eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007eb6:	330a      	adds	r3, #10
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fc65 	bl	800778e <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8007ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ec8:	3301      	adds	r3, #1
 8007eca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007ece:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007ed2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d3eb      	bcc.n	8007eb2 <ATC_Receive+0x12a>
  }
  return answer;
 8007eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3730      	adds	r7, #48	@ 0x30
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007ee6:	b001      	add	sp, #4
 8007ee8:	4770      	bx	lr

08007eea <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8007ef6:	887a      	ldrh	r2, [r7, #2]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8a9b      	ldrh	r3, [r3, #20]
 8007efc:	4619      	mov	r1, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	8b1b      	ldrh	r3, [r3, #24]
 8007f02:	1acb      	subs	r3, r1, r3
 8007f04:	429a      	cmp	r2, r3
 8007f06:	dd05      	ble.n	8007f14 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	8a9a      	ldrh	r2, [r3, #20]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8b1b      	ldrh	r3, [r3, #24]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	8b12      	ldrh	r2, [r2, #24]
 8007f1c:	1898      	adds	r0, r3, r2
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	887a      	ldrh	r2, [r7, #2]
 8007f24:	4619      	mov	r1, r3
 8007f26:	f000 fa29 	bl	800837c <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8b1a      	ldrh	r2, [r3, #24]
 8007f2e:	887b      	ldrh	r3, [r7, #2]
 8007f30:	4413      	add	r3, r2
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	69d9      	ldr	r1, [r3, #28]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8a9b      	ldrh	r3, [r3, #20]
 8007f44:	461a      	mov	r2, r3
 8007f46:	f7ff f8ce 	bl	80070e6 <HAL_UARTEx_ReceiveToIdle_DMA>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10c      	bne.n	8007f6a <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0208 	bic.w	r2, r2, #8
 8007f66:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8007f68:	e01f      	b.n	8007faa <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295
 8007f74:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fd fdec 	bl	8005b58 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	69d9      	ldr	r1, [r3, #28]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	8a9b      	ldrh	r3, [r3, #20]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f7ff f8aa 	bl	80070e6 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0208 	bic.w	r2, r2, #8
 8007fa8:	601a      	str	r2, [r3, #0]
}
 8007faa:	bf00      	nop
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fa f8d8 	bl	8002170 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <atoi>:
 8007fc8:	220a      	movs	r2, #10
 8007fca:	2100      	movs	r1, #0
 8007fcc:	f000 b938 	b.w	8008240 <strtol>

08007fd0 <malloc>:
 8007fd0:	4b02      	ldr	r3, [pc, #8]	@ (8007fdc <malloc+0xc>)
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	6818      	ldr	r0, [r3, #0]
 8007fd6:	f000 b82d 	b.w	8008034 <_malloc_r>
 8007fda:	bf00      	nop
 8007fdc:	2000000c 	.word	0x2000000c

08007fe0 <free>:
 8007fe0:	4b02      	ldr	r3, [pc, #8]	@ (8007fec <free+0xc>)
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	f000 b9d7 	b.w	8008398 <_free_r>
 8007fea:	bf00      	nop
 8007fec:	2000000c 	.word	0x2000000c

08007ff0 <sbrk_aligned>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	4e0f      	ldr	r6, [pc, #60]	@ (8008030 <sbrk_aligned+0x40>)
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	6831      	ldr	r1, [r6, #0]
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	b911      	cbnz	r1, 8008002 <sbrk_aligned+0x12>
 8007ffc:	f000 f97a 	bl	80082f4 <_sbrk_r>
 8008000:	6030      	str	r0, [r6, #0]
 8008002:	4621      	mov	r1, r4
 8008004:	4628      	mov	r0, r5
 8008006:	f000 f975 	bl	80082f4 <_sbrk_r>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	d103      	bne.n	8008016 <sbrk_aligned+0x26>
 800800e:	f04f 34ff 	mov.w	r4, #4294967295
 8008012:	4620      	mov	r0, r4
 8008014:	bd70      	pop	{r4, r5, r6, pc}
 8008016:	1cc4      	adds	r4, r0, #3
 8008018:	f024 0403 	bic.w	r4, r4, #3
 800801c:	42a0      	cmp	r0, r4
 800801e:	d0f8      	beq.n	8008012 <sbrk_aligned+0x22>
 8008020:	1a21      	subs	r1, r4, r0
 8008022:	4628      	mov	r0, r5
 8008024:	f000 f966 	bl	80082f4 <_sbrk_r>
 8008028:	3001      	adds	r0, #1
 800802a:	d1f2      	bne.n	8008012 <sbrk_aligned+0x22>
 800802c:	e7ef      	b.n	800800e <sbrk_aligned+0x1e>
 800802e:	bf00      	nop
 8008030:	200009fc 	.word	0x200009fc

08008034 <_malloc_r>:
 8008034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008038:	1ccd      	adds	r5, r1, #3
 800803a:	f025 0503 	bic.w	r5, r5, #3
 800803e:	3508      	adds	r5, #8
 8008040:	2d0c      	cmp	r5, #12
 8008042:	bf38      	it	cc
 8008044:	250c      	movcc	r5, #12
 8008046:	2d00      	cmp	r5, #0
 8008048:	4606      	mov	r6, r0
 800804a:	db01      	blt.n	8008050 <_malloc_r+0x1c>
 800804c:	42a9      	cmp	r1, r5
 800804e:	d904      	bls.n	800805a <_malloc_r+0x26>
 8008050:	230c      	movs	r3, #12
 8008052:	6033      	str	r3, [r6, #0]
 8008054:	2000      	movs	r0, #0
 8008056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008130 <_malloc_r+0xfc>
 800805e:	f000 f869 	bl	8008134 <__malloc_lock>
 8008062:	f8d8 3000 	ldr.w	r3, [r8]
 8008066:	461c      	mov	r4, r3
 8008068:	bb44      	cbnz	r4, 80080bc <_malloc_r+0x88>
 800806a:	4629      	mov	r1, r5
 800806c:	4630      	mov	r0, r6
 800806e:	f7ff ffbf 	bl	8007ff0 <sbrk_aligned>
 8008072:	1c43      	adds	r3, r0, #1
 8008074:	4604      	mov	r4, r0
 8008076:	d158      	bne.n	800812a <_malloc_r+0xf6>
 8008078:	f8d8 4000 	ldr.w	r4, [r8]
 800807c:	4627      	mov	r7, r4
 800807e:	2f00      	cmp	r7, #0
 8008080:	d143      	bne.n	800810a <_malloc_r+0xd6>
 8008082:	2c00      	cmp	r4, #0
 8008084:	d04b      	beq.n	800811e <_malloc_r+0xea>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	4639      	mov	r1, r7
 800808a:	4630      	mov	r0, r6
 800808c:	eb04 0903 	add.w	r9, r4, r3
 8008090:	f000 f930 	bl	80082f4 <_sbrk_r>
 8008094:	4581      	cmp	r9, r0
 8008096:	d142      	bne.n	800811e <_malloc_r+0xea>
 8008098:	6821      	ldr	r1, [r4, #0]
 800809a:	1a6d      	subs	r5, r5, r1
 800809c:	4629      	mov	r1, r5
 800809e:	4630      	mov	r0, r6
 80080a0:	f7ff ffa6 	bl	8007ff0 <sbrk_aligned>
 80080a4:	3001      	adds	r0, #1
 80080a6:	d03a      	beq.n	800811e <_malloc_r+0xea>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	442b      	add	r3, r5
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	f8d8 3000 	ldr.w	r3, [r8]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	bb62      	cbnz	r2, 8008110 <_malloc_r+0xdc>
 80080b6:	f8c8 7000 	str.w	r7, [r8]
 80080ba:	e00f      	b.n	80080dc <_malloc_r+0xa8>
 80080bc:	6822      	ldr	r2, [r4, #0]
 80080be:	1b52      	subs	r2, r2, r5
 80080c0:	d420      	bmi.n	8008104 <_malloc_r+0xd0>
 80080c2:	2a0b      	cmp	r2, #11
 80080c4:	d917      	bls.n	80080f6 <_malloc_r+0xc2>
 80080c6:	1961      	adds	r1, r4, r5
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	6025      	str	r5, [r4, #0]
 80080cc:	bf18      	it	ne
 80080ce:	6059      	strne	r1, [r3, #4]
 80080d0:	6863      	ldr	r3, [r4, #4]
 80080d2:	bf08      	it	eq
 80080d4:	f8c8 1000 	streq.w	r1, [r8]
 80080d8:	5162      	str	r2, [r4, r5]
 80080da:	604b      	str	r3, [r1, #4]
 80080dc:	4630      	mov	r0, r6
 80080de:	f000 f82f 	bl	8008140 <__malloc_unlock>
 80080e2:	f104 000b 	add.w	r0, r4, #11
 80080e6:	1d23      	adds	r3, r4, #4
 80080e8:	f020 0007 	bic.w	r0, r0, #7
 80080ec:	1ac2      	subs	r2, r0, r3
 80080ee:	bf1c      	itt	ne
 80080f0:	1a1b      	subne	r3, r3, r0
 80080f2:	50a3      	strne	r3, [r4, r2]
 80080f4:	e7af      	b.n	8008056 <_malloc_r+0x22>
 80080f6:	6862      	ldr	r2, [r4, #4]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	bf0c      	ite	eq
 80080fc:	f8c8 2000 	streq.w	r2, [r8]
 8008100:	605a      	strne	r2, [r3, #4]
 8008102:	e7eb      	b.n	80080dc <_malloc_r+0xa8>
 8008104:	4623      	mov	r3, r4
 8008106:	6864      	ldr	r4, [r4, #4]
 8008108:	e7ae      	b.n	8008068 <_malloc_r+0x34>
 800810a:	463c      	mov	r4, r7
 800810c:	687f      	ldr	r7, [r7, #4]
 800810e:	e7b6      	b.n	800807e <_malloc_r+0x4a>
 8008110:	461a      	mov	r2, r3
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	42a3      	cmp	r3, r4
 8008116:	d1fb      	bne.n	8008110 <_malloc_r+0xdc>
 8008118:	2300      	movs	r3, #0
 800811a:	6053      	str	r3, [r2, #4]
 800811c:	e7de      	b.n	80080dc <_malloc_r+0xa8>
 800811e:	230c      	movs	r3, #12
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	4630      	mov	r0, r6
 8008124:	f000 f80c 	bl	8008140 <__malloc_unlock>
 8008128:	e794      	b.n	8008054 <_malloc_r+0x20>
 800812a:	6005      	str	r5, [r0, #0]
 800812c:	e7d6      	b.n	80080dc <_malloc_r+0xa8>
 800812e:	bf00      	nop
 8008130:	20000a00 	.word	0x20000a00

08008134 <__malloc_lock>:
 8008134:	4801      	ldr	r0, [pc, #4]	@ (800813c <__malloc_lock+0x8>)
 8008136:	f000 b917 	b.w	8008368 <__retarget_lock_acquire_recursive>
 800813a:	bf00      	nop
 800813c:	20000b40 	.word	0x20000b40

08008140 <__malloc_unlock>:
 8008140:	4801      	ldr	r0, [pc, #4]	@ (8008148 <__malloc_unlock+0x8>)
 8008142:	f000 b912 	b.w	800836a <__retarget_lock_release_recursive>
 8008146:	bf00      	nop
 8008148:	20000b40 	.word	0x20000b40

0800814c <_strtol_l.constprop.0>:
 800814c:	2b24      	cmp	r3, #36	@ 0x24
 800814e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008152:	4686      	mov	lr, r0
 8008154:	4690      	mov	r8, r2
 8008156:	d801      	bhi.n	800815c <_strtol_l.constprop.0+0x10>
 8008158:	2b01      	cmp	r3, #1
 800815a:	d106      	bne.n	800816a <_strtol_l.constprop.0+0x1e>
 800815c:	f000 f8da 	bl	8008314 <__errno>
 8008160:	2316      	movs	r3, #22
 8008162:	6003      	str	r3, [r0, #0]
 8008164:	2000      	movs	r0, #0
 8008166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816a:	4834      	ldr	r0, [pc, #208]	@ (800823c <_strtol_l.constprop.0+0xf0>)
 800816c:	460d      	mov	r5, r1
 800816e:	462a      	mov	r2, r5
 8008170:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008174:	5d06      	ldrb	r6, [r0, r4]
 8008176:	f016 0608 	ands.w	r6, r6, #8
 800817a:	d1f8      	bne.n	800816e <_strtol_l.constprop.0+0x22>
 800817c:	2c2d      	cmp	r4, #45	@ 0x2d
 800817e:	d12d      	bne.n	80081dc <_strtol_l.constprop.0+0x90>
 8008180:	782c      	ldrb	r4, [r5, #0]
 8008182:	2601      	movs	r6, #1
 8008184:	1c95      	adds	r5, r2, #2
 8008186:	f033 0210 	bics.w	r2, r3, #16
 800818a:	d109      	bne.n	80081a0 <_strtol_l.constprop.0+0x54>
 800818c:	2c30      	cmp	r4, #48	@ 0x30
 800818e:	d12a      	bne.n	80081e6 <_strtol_l.constprop.0+0x9a>
 8008190:	782a      	ldrb	r2, [r5, #0]
 8008192:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008196:	2a58      	cmp	r2, #88	@ 0x58
 8008198:	d125      	bne.n	80081e6 <_strtol_l.constprop.0+0x9a>
 800819a:	786c      	ldrb	r4, [r5, #1]
 800819c:	2310      	movs	r3, #16
 800819e:	3502      	adds	r5, #2
 80081a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80081a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80081a8:	2200      	movs	r2, #0
 80081aa:	fbbc f9f3 	udiv	r9, ip, r3
 80081ae:	4610      	mov	r0, r2
 80081b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80081b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80081b8:	2f09      	cmp	r7, #9
 80081ba:	d81b      	bhi.n	80081f4 <_strtol_l.constprop.0+0xa8>
 80081bc:	463c      	mov	r4, r7
 80081be:	42a3      	cmp	r3, r4
 80081c0:	dd27      	ble.n	8008212 <_strtol_l.constprop.0+0xc6>
 80081c2:	1c57      	adds	r7, r2, #1
 80081c4:	d007      	beq.n	80081d6 <_strtol_l.constprop.0+0x8a>
 80081c6:	4581      	cmp	r9, r0
 80081c8:	d320      	bcc.n	800820c <_strtol_l.constprop.0+0xc0>
 80081ca:	d101      	bne.n	80081d0 <_strtol_l.constprop.0+0x84>
 80081cc:	45a2      	cmp	sl, r4
 80081ce:	db1d      	blt.n	800820c <_strtol_l.constprop.0+0xc0>
 80081d0:	fb00 4003 	mla	r0, r0, r3, r4
 80081d4:	2201      	movs	r2, #1
 80081d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081da:	e7eb      	b.n	80081b4 <_strtol_l.constprop.0+0x68>
 80081dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80081de:	bf04      	itt	eq
 80081e0:	782c      	ldrbeq	r4, [r5, #0]
 80081e2:	1c95      	addeq	r5, r2, #2
 80081e4:	e7cf      	b.n	8008186 <_strtol_l.constprop.0+0x3a>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1da      	bne.n	80081a0 <_strtol_l.constprop.0+0x54>
 80081ea:	2c30      	cmp	r4, #48	@ 0x30
 80081ec:	bf0c      	ite	eq
 80081ee:	2308      	moveq	r3, #8
 80081f0:	230a      	movne	r3, #10
 80081f2:	e7d5      	b.n	80081a0 <_strtol_l.constprop.0+0x54>
 80081f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80081f8:	2f19      	cmp	r7, #25
 80081fa:	d801      	bhi.n	8008200 <_strtol_l.constprop.0+0xb4>
 80081fc:	3c37      	subs	r4, #55	@ 0x37
 80081fe:	e7de      	b.n	80081be <_strtol_l.constprop.0+0x72>
 8008200:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008204:	2f19      	cmp	r7, #25
 8008206:	d804      	bhi.n	8008212 <_strtol_l.constprop.0+0xc6>
 8008208:	3c57      	subs	r4, #87	@ 0x57
 800820a:	e7d8      	b.n	80081be <_strtol_l.constprop.0+0x72>
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	e7e1      	b.n	80081d6 <_strtol_l.constprop.0+0x8a>
 8008212:	1c53      	adds	r3, r2, #1
 8008214:	d108      	bne.n	8008228 <_strtol_l.constprop.0+0xdc>
 8008216:	2322      	movs	r3, #34	@ 0x22
 8008218:	f8ce 3000 	str.w	r3, [lr]
 800821c:	4660      	mov	r0, ip
 800821e:	f1b8 0f00 	cmp.w	r8, #0
 8008222:	d0a0      	beq.n	8008166 <_strtol_l.constprop.0+0x1a>
 8008224:	1e69      	subs	r1, r5, #1
 8008226:	e006      	b.n	8008236 <_strtol_l.constprop.0+0xea>
 8008228:	b106      	cbz	r6, 800822c <_strtol_l.constprop.0+0xe0>
 800822a:	4240      	negs	r0, r0
 800822c:	f1b8 0f00 	cmp.w	r8, #0
 8008230:	d099      	beq.n	8008166 <_strtol_l.constprop.0+0x1a>
 8008232:	2a00      	cmp	r2, #0
 8008234:	d1f6      	bne.n	8008224 <_strtol_l.constprop.0+0xd8>
 8008236:	f8c8 1000 	str.w	r1, [r8]
 800823a:	e794      	b.n	8008166 <_strtol_l.constprop.0+0x1a>
 800823c:	080085f9 	.word	0x080085f9

08008240 <strtol>:
 8008240:	4613      	mov	r3, r2
 8008242:	460a      	mov	r2, r1
 8008244:	4601      	mov	r1, r0
 8008246:	4802      	ldr	r0, [pc, #8]	@ (8008250 <strtol+0x10>)
 8008248:	6800      	ldr	r0, [r0, #0]
 800824a:	f7ff bf7f 	b.w	800814c <_strtol_l.constprop.0>
 800824e:	bf00      	nop
 8008250:	2000000c 	.word	0x2000000c

08008254 <memset>:
 8008254:	4402      	add	r2, r0
 8008256:	4603      	mov	r3, r0
 8008258:	4293      	cmp	r3, r2
 800825a:	d100      	bne.n	800825e <memset+0xa>
 800825c:	4770      	bx	lr
 800825e:	f803 1b01 	strb.w	r1, [r3], #1
 8008262:	e7f9      	b.n	8008258 <memset+0x4>

08008264 <strchr>:
 8008264:	b2c9      	uxtb	r1, r1
 8008266:	4603      	mov	r3, r0
 8008268:	4618      	mov	r0, r3
 800826a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826e:	b112      	cbz	r2, 8008276 <strchr+0x12>
 8008270:	428a      	cmp	r2, r1
 8008272:	d1f9      	bne.n	8008268 <strchr+0x4>
 8008274:	4770      	bx	lr
 8008276:	2900      	cmp	r1, #0
 8008278:	bf18      	it	ne
 800827a:	2000      	movne	r0, #0
 800827c:	4770      	bx	lr

0800827e <strncmp>:
 800827e:	b510      	push	{r4, lr}
 8008280:	b16a      	cbz	r2, 800829e <strncmp+0x20>
 8008282:	3901      	subs	r1, #1
 8008284:	1884      	adds	r4, r0, r2
 8008286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800828e:	429a      	cmp	r2, r3
 8008290:	d103      	bne.n	800829a <strncmp+0x1c>
 8008292:	42a0      	cmp	r0, r4
 8008294:	d001      	beq.n	800829a <strncmp+0x1c>
 8008296:	2a00      	cmp	r2, #0
 8008298:	d1f5      	bne.n	8008286 <strncmp+0x8>
 800829a:	1ad0      	subs	r0, r2, r3
 800829c:	bd10      	pop	{r4, pc}
 800829e:	4610      	mov	r0, r2
 80082a0:	e7fc      	b.n	800829c <strncmp+0x1e>

080082a2 <strncpy>:
 80082a2:	b510      	push	{r4, lr}
 80082a4:	3901      	subs	r1, #1
 80082a6:	4603      	mov	r3, r0
 80082a8:	b132      	cbz	r2, 80082b8 <strncpy+0x16>
 80082aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80082ae:	f803 4b01 	strb.w	r4, [r3], #1
 80082b2:	3a01      	subs	r2, #1
 80082b4:	2c00      	cmp	r4, #0
 80082b6:	d1f7      	bne.n	80082a8 <strncpy+0x6>
 80082b8:	441a      	add	r2, r3
 80082ba:	2100      	movs	r1, #0
 80082bc:	4293      	cmp	r3, r2
 80082be:	d100      	bne.n	80082c2 <strncpy+0x20>
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	f803 1b01 	strb.w	r1, [r3], #1
 80082c6:	e7f9      	b.n	80082bc <strncpy+0x1a>

080082c8 <strstr>:
 80082c8:	780a      	ldrb	r2, [r1, #0]
 80082ca:	b570      	push	{r4, r5, r6, lr}
 80082cc:	b96a      	cbnz	r2, 80082ea <strstr+0x22>
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d109      	bne.n	80082e8 <strstr+0x20>
 80082d4:	460c      	mov	r4, r1
 80082d6:	4605      	mov	r5, r0
 80082d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0f6      	beq.n	80082ce <strstr+0x6>
 80082e0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80082e4:	429e      	cmp	r6, r3
 80082e6:	d0f7      	beq.n	80082d8 <strstr+0x10>
 80082e8:	3001      	adds	r0, #1
 80082ea:	7803      	ldrb	r3, [r0, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1ef      	bne.n	80082d0 <strstr+0x8>
 80082f0:	4618      	mov	r0, r3
 80082f2:	e7ec      	b.n	80082ce <strstr+0x6>

080082f4 <_sbrk_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d06      	ldr	r5, [pc, #24]	@ (8008310 <_sbrk_r+0x1c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	f7f8 ff36 	bl	8001170 <_sbrk>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_sbrk_r+0x1a>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_sbrk_r+0x1a>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20000b3c 	.word	0x20000b3c

08008314 <__errno>:
 8008314:	4b01      	ldr	r3, [pc, #4]	@ (800831c <__errno+0x8>)
 8008316:	6818      	ldr	r0, [r3, #0]
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	2000000c 	.word	0x2000000c

08008320 <__libc_init_array>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	4d0d      	ldr	r5, [pc, #52]	@ (8008358 <__libc_init_array+0x38>)
 8008324:	4c0d      	ldr	r4, [pc, #52]	@ (800835c <__libc_init_array+0x3c>)
 8008326:	1b64      	subs	r4, r4, r5
 8008328:	10a4      	asrs	r4, r4, #2
 800832a:	2600      	movs	r6, #0
 800832c:	42a6      	cmp	r6, r4
 800832e:	d109      	bne.n	8008344 <__libc_init_array+0x24>
 8008330:	4d0b      	ldr	r5, [pc, #44]	@ (8008360 <__libc_init_array+0x40>)
 8008332:	4c0c      	ldr	r4, [pc, #48]	@ (8008364 <__libc_init_array+0x44>)
 8008334:	f000 f87a 	bl	800842c <_init>
 8008338:	1b64      	subs	r4, r4, r5
 800833a:	10a4      	asrs	r4, r4, #2
 800833c:	2600      	movs	r6, #0
 800833e:	42a6      	cmp	r6, r4
 8008340:	d105      	bne.n	800834e <__libc_init_array+0x2e>
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	f855 3b04 	ldr.w	r3, [r5], #4
 8008348:	4798      	blx	r3
 800834a:	3601      	adds	r6, #1
 800834c:	e7ee      	b.n	800832c <__libc_init_array+0xc>
 800834e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008352:	4798      	blx	r3
 8008354:	3601      	adds	r6, #1
 8008356:	e7f2      	b.n	800833e <__libc_init_array+0x1e>
 8008358:	08008704 	.word	0x08008704
 800835c:	08008704 	.word	0x08008704
 8008360:	08008704 	.word	0x08008704
 8008364:	08008708 	.word	0x08008708

08008368 <__retarget_lock_acquire_recursive>:
 8008368:	4770      	bx	lr

0800836a <__retarget_lock_release_recursive>:
 800836a:	4770      	bx	lr

0800836c <strcpy>:
 800836c:	4603      	mov	r3, r0
 800836e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008372:	f803 2b01 	strb.w	r2, [r3], #1
 8008376:	2a00      	cmp	r2, #0
 8008378:	d1f9      	bne.n	800836e <strcpy+0x2>
 800837a:	4770      	bx	lr

0800837c <memcpy>:
 800837c:	440a      	add	r2, r1
 800837e:	4291      	cmp	r1, r2
 8008380:	f100 33ff 	add.w	r3, r0, #4294967295
 8008384:	d100      	bne.n	8008388 <memcpy+0xc>
 8008386:	4770      	bx	lr
 8008388:	b510      	push	{r4, lr}
 800838a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800838e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008392:	4291      	cmp	r1, r2
 8008394:	d1f9      	bne.n	800838a <memcpy+0xe>
 8008396:	bd10      	pop	{r4, pc}

08008398 <_free_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4605      	mov	r5, r0
 800839c:	2900      	cmp	r1, #0
 800839e:	d041      	beq.n	8008424 <_free_r+0x8c>
 80083a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a4:	1f0c      	subs	r4, r1, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	bfb8      	it	lt
 80083aa:	18e4      	addlt	r4, r4, r3
 80083ac:	f7ff fec2 	bl	8008134 <__malloc_lock>
 80083b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008428 <_free_r+0x90>)
 80083b2:	6813      	ldr	r3, [r2, #0]
 80083b4:	b933      	cbnz	r3, 80083c4 <_free_r+0x2c>
 80083b6:	6063      	str	r3, [r4, #4]
 80083b8:	6014      	str	r4, [r2, #0]
 80083ba:	4628      	mov	r0, r5
 80083bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083c0:	f7ff bebe 	b.w	8008140 <__malloc_unlock>
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	d908      	bls.n	80083da <_free_r+0x42>
 80083c8:	6820      	ldr	r0, [r4, #0]
 80083ca:	1821      	adds	r1, r4, r0
 80083cc:	428b      	cmp	r3, r1
 80083ce:	bf01      	itttt	eq
 80083d0:	6819      	ldreq	r1, [r3, #0]
 80083d2:	685b      	ldreq	r3, [r3, #4]
 80083d4:	1809      	addeq	r1, r1, r0
 80083d6:	6021      	streq	r1, [r4, #0]
 80083d8:	e7ed      	b.n	80083b6 <_free_r+0x1e>
 80083da:	461a      	mov	r2, r3
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b10b      	cbz	r3, 80083e4 <_free_r+0x4c>
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	d9fa      	bls.n	80083da <_free_r+0x42>
 80083e4:	6811      	ldr	r1, [r2, #0]
 80083e6:	1850      	adds	r0, r2, r1
 80083e8:	42a0      	cmp	r0, r4
 80083ea:	d10b      	bne.n	8008404 <_free_r+0x6c>
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	4401      	add	r1, r0
 80083f0:	1850      	adds	r0, r2, r1
 80083f2:	4283      	cmp	r3, r0
 80083f4:	6011      	str	r1, [r2, #0]
 80083f6:	d1e0      	bne.n	80083ba <_free_r+0x22>
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	6053      	str	r3, [r2, #4]
 80083fe:	4408      	add	r0, r1
 8008400:	6010      	str	r0, [r2, #0]
 8008402:	e7da      	b.n	80083ba <_free_r+0x22>
 8008404:	d902      	bls.n	800840c <_free_r+0x74>
 8008406:	230c      	movs	r3, #12
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	e7d6      	b.n	80083ba <_free_r+0x22>
 800840c:	6820      	ldr	r0, [r4, #0]
 800840e:	1821      	adds	r1, r4, r0
 8008410:	428b      	cmp	r3, r1
 8008412:	bf04      	itt	eq
 8008414:	6819      	ldreq	r1, [r3, #0]
 8008416:	685b      	ldreq	r3, [r3, #4]
 8008418:	6063      	str	r3, [r4, #4]
 800841a:	bf04      	itt	eq
 800841c:	1809      	addeq	r1, r1, r0
 800841e:	6021      	streq	r1, [r4, #0]
 8008420:	6054      	str	r4, [r2, #4]
 8008422:	e7ca      	b.n	80083ba <_free_r+0x22>
 8008424:	bd38      	pop	{r3, r4, r5, pc}
 8008426:	bf00      	nop
 8008428:	20000a00 	.word	0x20000a00

0800842c <_init>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	bf00      	nop
 8008430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008432:	bc08      	pop	{r3}
 8008434:	469e      	mov	lr, r3
 8008436:	4770      	bx	lr

08008438 <_fini>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	bf00      	nop
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr
