
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c624  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800c824  0800c824  0000d824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccc0  0800ccc0  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccc0  0800ccc0  0000dcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccc8  0800ccc8  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccc8  0800ccc8  0000dcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cccc  0800cccc  0000dccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800ccd0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005444  2000006c  0800cd3c  0000e06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054b0  0800cd3c  0000e4b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c89  00000000  00000000  0000e09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fbe  00000000  00000000  00030d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  00035ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001624  00000000  00000000  00037980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce56  00000000  00000000  00038fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f58  00000000  00000000  00065dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b19a  00000000  00000000  00089d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00194eec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083b8  00000000  00000000  00194f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0019d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c80c 	.word	0x0800c80c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	0800c80c 	.word	0x0800c80c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <MX_DMA_Init+0x48>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <MX_DMA_Init+0x48>)
 800060c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_DMA_Init+0x48>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	2010      	movs	r0, #16
 8000624:	f002 f8a1 	bl	800276a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000628:	2010      	movs	r0, #16
 800062a:	f002 f8ba 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2105      	movs	r1, #5
 8000632:	2011      	movs	r0, #17
 8000634:	f002 f899 	bl	800276a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000638:	2011      	movs	r0, #17
 800063a:	f002 f8b2 	bl	80027a2 <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
 8000650:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <MX_FREERTOS_Init+0x38>)
 8000652:	2100      	movs	r1, #0
 8000654:	480c      	ldr	r0, [pc, #48]	@ (8000688 <MX_FREERTOS_Init+0x3c>)
 8000656:	f007 fb91 	bl	8007d7c <osThreadNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a0b      	ldr	r2, [pc, #44]	@ (800068c <MX_FREERTOS_Init+0x40>)
 800065e:	6013      	str	r3, [r2, #0]
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 8000660:	4a0b      	ldr	r2, [pc, #44]	@ (8000690 <MX_FREERTOS_Init+0x44>)
 8000662:	2100      	movs	r1, #0
 8000664:	480b      	ldr	r0, [pc, #44]	@ (8000694 <MX_FREERTOS_Init+0x48>)
 8000666:	f007 fb89 	bl	8007d7c <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <MX_FREERTOS_Init+0x4c>)
 800066e:	6013      	str	r3, [r2, #0]
	testScenario = osThreadNew(TESTSCENARIO, NULL, &testScenario_attributes);
 8000670:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <MX_FREERTOS_Init+0x50>)
 8000672:	2100      	movs	r1, #0
 8000674:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <MX_FREERTOS_Init+0x54>)
 8000676:	f007 fb81 	bl	8007d7c <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <MX_FREERTOS_Init+0x58>)
 800067e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0800ca54 	.word	0x0800ca54
 8000688:	08000ded 	.word	0x08000ded
 800068c:	20000088 	.word	0x20000088
 8000690:	0800ca78 	.word	0x0800ca78
 8000694:	08000e91 	.word	0x08000e91
 8000698:	2000008c 	.word	0x2000008c
 800069c:	0800ca9c 	.word	0x0800ca9c
 80006a0:	08000f55 	.word	0x08000f55
 80006a4:	20000090 	.word	0x20000090

080006a8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	@ 0x30
 80006ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b77      	ldr	r3, [pc, #476]	@ (800089c <MX_GPIO_Init+0x1f4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a76      	ldr	r2, [pc, #472]	@ (800089c <MX_GPIO_Init+0x1f4>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b74      	ldr	r3, [pc, #464]	@ (800089c <MX_GPIO_Init+0x1f4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	4b71      	ldr	r3, [pc, #452]	@ (800089c <MX_GPIO_Init+0x1f4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a70      	ldr	r2, [pc, #448]	@ (800089c <MX_GPIO_Init+0x1f4>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b6e      	ldr	r3, [pc, #440]	@ (800089c <MX_GPIO_Init+0x1f4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b6b      	ldr	r3, [pc, #428]	@ (800089c <MX_GPIO_Init+0x1f4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a6a      	ldr	r2, [pc, #424]	@ (800089c <MX_GPIO_Init+0x1f4>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b68      	ldr	r3, [pc, #416]	@ (800089c <MX_GPIO_Init+0x1f4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b65      	ldr	r3, [pc, #404]	@ (800089c <MX_GPIO_Init+0x1f4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a64      	ldr	r2, [pc, #400]	@ (800089c <MX_GPIO_Init+0x1f4>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b62      	ldr	r3, [pc, #392]	@ (800089c <MX_GPIO_Init+0x1f4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071e:	4b5f      	ldr	r3, [pc, #380]	@ (800089c <MX_GPIO_Init+0x1f4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a5e      	ldr	r2, [pc, #376]	@ (800089c <MX_GPIO_Init+0x1f4>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b5c      	ldr	r3, [pc, #368]	@ (800089c <MX_GPIO_Init+0x1f4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	4b59      	ldr	r3, [pc, #356]	@ (800089c <MX_GPIO_Init+0x1f4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a58      	ldr	r2, [pc, #352]	@ (800089c <MX_GPIO_Init+0x1f4>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b56      	ldr	r3, [pc, #344]	@ (800089c <MX_GPIO_Init+0x1f4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	4b53      	ldr	r3, [pc, #332]	@ (800089c <MX_GPIO_Init+0x1f4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a52      	ldr	r2, [pc, #328]	@ (800089c <MX_GPIO_Init+0x1f4>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b50      	ldr	r3, [pc, #320]	@ (800089c <MX_GPIO_Init+0x1f4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f244 0181 	movw	r1, #16513	@ 0x4081
 800076c:	484c      	ldr	r0, [pc, #304]	@ (80008a0 <MX_GPIO_Init+0x1f8>)
 800076e:	f002 fe0d 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2141      	movs	r1, #65	@ 0x41
 8000776:	484b      	ldr	r0, [pc, #300]	@ (80008a4 <MX_GPIO_Init+0x1fc>)
 8000778:	f002 fe08 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2110      	movs	r1, #16
 8000780:	4849      	ldr	r0, [pc, #292]	@ (80008a8 <MX_GPIO_Init+0x200>)
 8000782:	f002 fe03 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000786:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4843      	ldr	r0, [pc, #268]	@ (80008ac <MX_GPIO_Init+0x204>)
 800079e:	f002 fc31 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007a2:	2332      	movs	r3, #50	@ 0x32
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b2:	230b      	movs	r3, #11
 80007b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	483b      	ldr	r0, [pc, #236]	@ (80008ac <MX_GPIO_Init+0x204>)
 80007be:	f002 fc21 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007c2:	2386      	movs	r3, #134	@ 0x86
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4834      	ldr	r0, [pc, #208]	@ (80008b0 <MX_GPIO_Init+0x208>)
 80007de:	f002 fc11 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007e2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4829      	ldr	r0, [pc, #164]	@ (80008a0 <MX_GPIO_Init+0x1f8>)
 80007fc:	f002 fc02 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 8000800:	2341      	movs	r3, #65	@ 0x41
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4823      	ldr	r0, [pc, #140]	@ (80008a4 <MX_GPIO_Init+0x1fc>)
 8000818:	f002 fbf4 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082e:	230b      	movs	r3, #11
 8000830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4819      	ldr	r0, [pc, #100]	@ (80008a0 <MX_GPIO_Init+0x1f8>)
 800083a:	f002 fbe3 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800083e:	2380      	movs	r3, #128	@ 0x80
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <MX_GPIO_Init+0x1fc>)
 8000852:	f002 fbd7 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000856:	2310      	movs	r3, #16
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <MX_GPIO_Init+0x200>)
 800086e:	f002 fbc9 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000872:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000884:	230b      	movs	r3, #11
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_GPIO_Init+0x1fc>)
 8000890:	f002 fbb8 	bl	8003004 <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	@ 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40021800 	.word	0x40021800
 80008a8:	40020c00 	.word	0x40020c00
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020000 	.word	0x40020000

080008b4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <HAL_UARTEx_RxEventCallback+0x28>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d104      	bne.n	80008d4 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <HAL_UARTEx_RxEventCallback+0x2c>)
 80008d0:	f00a fc02 	bl	800b0d8 <ATC_IdleLineCallback>
	}
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40004400 	.word	0x40004400
 80008e0:	20000094 	.word	0x20000094

080008e4 <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6178      	str	r0, [r7, #20]
 80008ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80008f0:	edc7 0a03 	vstr	s1, [r7, #12]
 80008f4:	ed87 1a02 	vstr	s2, [r7, #8]
 80008f8:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	615a      	str	r2, [r3, #20]
}
 800091e:	bf00      	nop
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <pid_reset>:

void pid_reset(PID *pid_data)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 800094a:	b480      	push	{r7}
 800094c:	b089      	sub	sp, #36	@ 0x24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	441a      	add	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800097e:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	ed93 7a03 	vldr	s14, [r3, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000998:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	ed93 7a04 	vldr	s14, [r3, #16]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	ee07 3a90 	vmov	s15, r3
 80009ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b6:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	ee07 3a90 	vmov	s15, r3
 80009c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80009ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	db08      	blt.n	80009e6 <pid_calculate+0x9c>
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	ee07 3a90 	vmov	s15, r3
 80009dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e0:	edc7 7a07 	vstr	s15, [r7, #28]
 80009e4:	e016      	b.n	8000a14 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	425b      	negs	r3, r3
 80009ec:	ee07 3a90 	vmov	s15, r3
 80009f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80009f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a00:	d808      	bhi.n	8000a14 <pid_calculate+0xca>
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	425b      	negs	r3, r3
 8000a08:	ee07 3a90 	vmov	s15, r3
 8000a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a10:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8000a1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a26:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a32:	ee17 3a90 	vmov	r3, s15
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3724      	adds	r7, #36	@ 0x24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000a58:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b084      	sub	sp, #16
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f82a 	bl	8000ae0 <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000a94:	fb02 f303 	mul.w	r3, r2, r3
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	8892      	ldrh	r2, [r2, #4]
 8000a9c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f103 0018 	add.w	r0, r3, #24
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6919      	ldr	r1, [r3, #16]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f7ff ff49 	bl	800094a <pid_calculate>
 8000ab8:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	695a      	ldr	r2, [r3, #20]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	441a      	add	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db04      	blt.n	8000ad8 <motor_calculate_speed+0x5a>
	{
		drv8835_set_motorA_speed(m->actual_PWM);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f832 	bl	8000b3c <drv8835_set_motorA_speed>

	}

}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d004      	beq.n	8000b2c <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3318      	adds	r3, #24
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff feff 	bl	800092a <pid_reset>

	m->set_speed = set_speed;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	611a      	str	r2, [r3, #16]
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000b46:	88fa      	ldrh	r2, [r7, #6]
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <drv8835_set_motorA_speed+0x34>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d303      	bcc.n	8000b5a <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <drv8835_set_motorA_speed+0x34>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b58:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <drv8835_set_motorA_speed+0x34>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	88fa      	ldrh	r2, [r7, #6]
 8000b60:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000154 	.word	0x20000154

08000b74 <drv8835_init>:

void drv8835_init()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	drv8835_set_motorA_speed(0);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff ffdf 	bl	8000b3c <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <drv8835_init+0x18>)
 8000b82:	f003 fff5 	bl	8004b70 <HAL_TIM_PWM_Start>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000154 	.word	0x20000154

08000b90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d102      	bne.n	8000ba8 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000ba2:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ba4:	f7ff ff6b 	bl	8000a7e <motor_calculate_speed>
	}
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40001000 	.word	0x40001000
 8000bb4:	200000d0 	.word	0x200000d0

08000bb8 <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d104      	bne.n	8000bd0 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <Set_PWM_Frequency+0x5c>)
 8000bca:	f004 f8cb 	bl	8004d64 <HAL_TIM_PWM_Stop>
        return;
 8000bce:	e01e      	b.n	8000c0e <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <Set_PWM_Frequency+0x60>)
 8000bd2:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <Set_PWM_Frequency+0x5c>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	fb02 f303 	mul.w	r3, r2, r3
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	3b01      	subs	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <Set_PWM_Frequency+0x64>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bf6:	4a09      	ldr	r2, [pc, #36]	@ (8000c1c <Set_PWM_Frequency+0x64>)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <Set_PWM_Frequency+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	0852      	lsrs	r2, r2, #1
 8000c04:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000c06:	2104      	movs	r1, #4
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <Set_PWM_Frequency+0x5c>)
 8000c0a:	f003 ffb1 	bl	8004b70 <HAL_TIM_PWM_Start>
}
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000031c 	.word	0x2000031c
 8000c18:	05b8d800 	.word	0x05b8d800
 8000c1c:	20000154 	.word	0x20000154

08000c20 <ProcessCommand>:
    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
}

int hornOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	    if (strcmp((char*)cmd, "LIGHTS") == 0) {
 8000c28:	495e      	ldr	r1, [pc, #376]	@ (8000da4 <ProcessCommand+0x184>)
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fb08 	bl	8000240 <strcmp>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d104      	bne.n	8000c40 <ProcessCommand+0x20>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8000c36:	2101      	movs	r1, #1
 8000c38:	485b      	ldr	r0, [pc, #364]	@ (8000da8 <ProcessCommand+0x188>)
 8000c3a:	f002 fbc0 	bl	80033be <HAL_GPIO_TogglePin>
	    }

	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000c3e:	e0ad      	b.n	8000d9c <ProcessCommand+0x17c>
	    else if (strcmp((char*)cmd, "HORN") == 0) {
 8000c40:	495a      	ldr	r1, [pc, #360]	@ (8000dac <ProcessCommand+0x18c>)
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fafc 	bl	8000240 <strcmp>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d112      	bne.n	8000c74 <ProcessCommand+0x54>
	    	if (!hornOn) {
 8000c4e:	4b58      	ldr	r3, [pc, #352]	@ (8000db0 <ProcessCommand+0x190>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d107      	bne.n	8000c66 <ProcessCommand+0x46>
		    	Set_PWM_Frequency(1000);
 8000c56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c5a:	f7ff ffad 	bl	8000bb8 <Set_PWM_Frequency>
		    	hornOn = 1;
 8000c5e:	4b54      	ldr	r3, [pc, #336]	@ (8000db0 <ProcessCommand+0x190>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	e09a      	b.n	8000d9c <ProcessCommand+0x17c>
	    		Set_PWM_Frequency(0);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ffa6 	bl	8000bb8 <Set_PWM_Frequency>
	    		hornOn = 0;
 8000c6c:	4b50      	ldr	r3, [pc, #320]	@ (8000db0 <ProcessCommand+0x190>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	e093      	b.n	8000d9c <ProcessCommand+0x17c>
	    else if (strncmp((char*)cmd, "MOTOR", 5) == 0) {
 8000c74:	2205      	movs	r2, #5
 8000c76:	494f      	ldr	r1, [pc, #316]	@ (8000db4 <ProcessCommand+0x194>)
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f00a fe86 	bl	800b98a <strncmp>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f040 8084 	bne.w	8000d8e <ProcessCommand+0x16e>
	        char* modeStr = (char*)cmd + 5;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3305      	adds	r3, #5
 8000c8a:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f00a fa92 	bl	800b1b6 <atoi>
 8000c92:	60b8      	str	r0, [r7, #8]
	        if (mode >= 0 && mode <= 8) {
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db71      	blt.n	8000d7e <ProcessCommand+0x15e>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	dc6e      	bgt.n	8000d7e <ProcessCommand+0x15e>
	            switch (mode) {
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d868      	bhi.n	8000d78 <ProcessCommand+0x158>
 8000ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cac <ProcessCommand+0x8c>)
 8000ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cac:	08000cd1 	.word	0x08000cd1
 8000cb0:	08000ce9 	.word	0x08000ce9
 8000cb4:	08000d01 	.word	0x08000d01
 8000cb8:	08000d19 	.word	0x08000d19
 8000cbc:	08000d29 	.word	0x08000d29
 8000cc0:	08000d39 	.word	0x08000d39
 8000cc4:	08000d49 	.word	0x08000d49
 8000cc8:	08000d59 	.word	0x08000d59
 8000ccc:	08000d69 	.word	0x08000d69
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd4:	2212      	movs	r2, #18
 8000cd6:	4938      	ldr	r1, [pc, #224]	@ (8000db8 <ProcessCommand+0x198>)
 8000cd8:	4838      	ldr	r0, [pc, #224]	@ (8000dbc <ProcessCommand+0x19c>)
 8000cda:	f005 f865 	bl	8005da8 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 0);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4837      	ldr	r0, [pc, #220]	@ (8000dc0 <ProcessCommand+0x1a0>)
 8000ce2:	f7ff ff14 	bl	8000b0e <motor_set_speed>
	                    break;
 8000ce6:	e048      	b.n	8000d7a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	2212      	movs	r2, #18
 8000cee:	4935      	ldr	r1, [pc, #212]	@ (8000dc4 <ProcessCommand+0x1a4>)
 8000cf0:	4832      	ldr	r0, [pc, #200]	@ (8000dbc <ProcessCommand+0x19c>)
 8000cf2:	f005 f859 	bl	8005da8 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 100);
 8000cf6:	2164      	movs	r1, #100	@ 0x64
 8000cf8:	4831      	ldr	r0, [pc, #196]	@ (8000dc0 <ProcessCommand+0x1a0>)
 8000cfa:	f7ff ff08 	bl	8000b0e <motor_set_speed>
	                    break;
 8000cfe:	e03c      	b.n	8000d7a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2212      	movs	r2, #18
 8000d06:	4930      	ldr	r1, [pc, #192]	@ (8000dc8 <ProcessCommand+0x1a8>)
 8000d08:	482c      	ldr	r0, [pc, #176]	@ (8000dbc <ProcessCommand+0x19c>)
 8000d0a:	f005 f84d 	bl	8005da8 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 75);
 8000d0e:	214b      	movs	r1, #75	@ 0x4b
 8000d10:	482b      	ldr	r0, [pc, #172]	@ (8000dc0 <ProcessCommand+0x1a0>)
 8000d12:	f7ff fefc 	bl	8000b0e <motor_set_speed>
	                    break;
 8000d16:	e030      	b.n	8000d7a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	2212      	movs	r2, #18
 8000d1e:	492b      	ldr	r1, [pc, #172]	@ (8000dcc <ProcessCommand+0x1ac>)
 8000d20:	4826      	ldr	r0, [pc, #152]	@ (8000dbc <ProcessCommand+0x19c>)
 8000d22:	f005 f841 	bl	8005da8 <HAL_UART_Transmit>
	                    break;
 8000d26:	e028      	b.n	8000d7a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	2212      	movs	r2, #18
 8000d2e:	4928      	ldr	r1, [pc, #160]	@ (8000dd0 <ProcessCommand+0x1b0>)
 8000d30:	4822      	ldr	r0, [pc, #136]	@ (8000dbc <ProcessCommand+0x19c>)
 8000d32:	f005 f839 	bl	8005da8 <HAL_UART_Transmit>
	                    break;
 8000d36:	e020      	b.n	8000d7a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	2212      	movs	r2, #18
 8000d3e:	4925      	ldr	r1, [pc, #148]	@ (8000dd4 <ProcessCommand+0x1b4>)
 8000d40:	481e      	ldr	r0, [pc, #120]	@ (8000dbc <ProcessCommand+0x19c>)
 8000d42:	f005 f831 	bl	8005da8 <HAL_UART_Transmit>
	                    break;
 8000d46:	e018      	b.n	8000d7a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	2212      	movs	r2, #18
 8000d4e:	4922      	ldr	r1, [pc, #136]	@ (8000dd8 <ProcessCommand+0x1b8>)
 8000d50:	481a      	ldr	r0, [pc, #104]	@ (8000dbc <ProcessCommand+0x19c>)
 8000d52:	f005 f829 	bl	8005da8 <HAL_UART_Transmit>
	                    break;
 8000d56:	e010      	b.n	8000d7a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	2212      	movs	r2, #18
 8000d5e:	491f      	ldr	r1, [pc, #124]	@ (8000ddc <ProcessCommand+0x1bc>)
 8000d60:	4816      	ldr	r0, [pc, #88]	@ (8000dbc <ProcessCommand+0x19c>)
 8000d62:	f005 f821 	bl	8005da8 <HAL_UART_Transmit>
	                    break;
 8000d66:	e008      	b.n	8000d7a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	2212      	movs	r2, #18
 8000d6e:	491c      	ldr	r1, [pc, #112]	@ (8000de0 <ProcessCommand+0x1c0>)
 8000d70:	4812      	ldr	r0, [pc, #72]	@ (8000dbc <ProcessCommand+0x19c>)
 8000d72:	f005 f819 	bl	8005da8 <HAL_UART_Transmit>
	                    break;
 8000d76:	e000      	b.n	8000d7a <ProcessCommand+0x15a>
	                    break;
 8000d78:	bf00      	nop
	            switch (mode) {
 8000d7a:	bf00      	nop
}
 8000d7c:	e00e      	b.n	8000d9c <ProcessCommand+0x17c>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	2215      	movs	r2, #21
 8000d84:	4917      	ldr	r1, [pc, #92]	@ (8000de4 <ProcessCommand+0x1c4>)
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <ProcessCommand+0x19c>)
 8000d88:	f005 f80e 	bl	8005da8 <HAL_UART_Transmit>
}
 8000d8c:	e006      	b.n	8000d9c <ProcessCommand+0x17c>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	2211      	movs	r2, #17
 8000d94:	4914      	ldr	r1, [pc, #80]	@ (8000de8 <ProcessCommand+0x1c8>)
 8000d96:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <ProcessCommand+0x19c>)
 8000d98:	f005 f806 	bl	8005da8 <HAL_UART_Transmit>
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	0800c850 	.word	0x0800c850
 8000da8:	40021800 	.word	0x40021800
 8000dac:	0800c858 	.word	0x0800c858
 8000db0:	20000100 	.word	0x20000100
 8000db4:	0800c860 	.word	0x0800c860
 8000db8:	0800c868 	.word	0x0800c868
 8000dbc:	200003f0 	.word	0x200003f0
 8000dc0:	200000d0 	.word	0x200000d0
 8000dc4:	0800c87c 	.word	0x0800c87c
 8000dc8:	0800c890 	.word	0x0800c890
 8000dcc:	0800c8a4 	.word	0x0800c8a4
 8000dd0:	0800c8b8 	.word	0x0800c8b8
 8000dd4:	0800c8cc 	.word	0x0800c8cc
 8000dd8:	0800c8e0 	.word	0x0800c8e0
 8000ddc:	0800c8f4 	.word	0x0800c8f4
 8000de0:	0800c908 	.word	0x0800c908
 8000de4:	0800c91c 	.word	0x0800c91c
 8000de8:	0800c934 	.word	0x0800c934

08000dec <ProcessIncomingData>:

void ProcessIncomingData(void* argument) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
	char *response = NULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
	    while (1) {

	        int result = ATC_Receive(&ESP, &response, 5000, 1, "+IPD,");
 8000df8:	f107 0108 	add.w	r1, r7, #8
 8000dfc:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <ProcessIncomingData+0x94>)
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e06:	481f      	ldr	r0, [pc, #124]	@ (8000e84 <ProcessIncomingData+0x98>)
 8000e08:	f00a f8b5 	bl	800af76 <ATC_Receive>
 8000e0c:	6178      	str	r0, [r7, #20]
	        if (result > 0 && response != NULL) {
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dd2e      	ble.n	8000e72 <ProcessIncomingData+0x86>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d02b      	beq.n	8000e72 <ProcessIncomingData+0x86>

	            char *ipdStart = strstr(response, "+IPD,");
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	4918      	ldr	r1, [pc, #96]	@ (8000e80 <ProcessIncomingData+0x94>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f00a fdd8 	bl	800b9d4 <strstr>
 8000e24:	6138      	str	r0, [r7, #16]
	            if (ipdStart != NULL) {
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01f      	beq.n	8000e6c <ProcessIncomingData+0x80>

	                char *dataStart = strchr(ipdStart, ':');
 8000e2c:	213a      	movs	r1, #58	@ 0x3a
 8000e2e:	6938      	ldr	r0, [r7, #16]
 8000e30:	f00a fd9e 	bl	800b970 <strchr>
 8000e34:	60f8      	str	r0, [r7, #12]
	                if (dataStart != NULL) {
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d017      	beq.n	8000e6c <ProcessIncomingData+0x80>
	                    dataStart++;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]

	                    HAL_UART_Transmit(&huart3, (uint8_t *)dataStart, strlen(dataStart), HAL_MAX_DELAY);
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f7ff fa06 	bl	8000254 <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e50:	68f9      	ldr	r1, [r7, #12]
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <ProcessIncomingData+0x9c>)
 8000e54:	f004 ffa8 	bl	8005da8 <HAL_UART_Transmit>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	490b      	ldr	r1, [pc, #44]	@ (8000e8c <ProcessIncomingData+0xa0>)
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <ProcessIncomingData+0x9c>)
 8000e62:	f004 ffa1 	bl	8005da8 <HAL_UART_Transmit>
	                    ProcessCommand((uint8_t *)dataStart);
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff feda 	bl	8000c20 <ProcessCommand>
	                }
	            }
	            ATC_RxFlush(&ESP);
 8000e6c:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <ProcessIncomingData+0x98>)
 8000e6e:	f009 fd44 	bl	800a8fa <ATC_RxFlush>
	        }

	        ATC_Loop(&ESP);
 8000e72:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <ProcessIncomingData+0x98>)
 8000e74:	f009 ff3a 	bl	800acec <ATC_Loop>
	        osDelay(50);
 8000e78:	2032      	movs	r0, #50	@ 0x32
 8000e7a:	f007 f825 	bl	8007ec8 <osDelay>
	    while (1) {
 8000e7e:	e7bb      	b.n	8000df8 <ProcessIncomingData+0xc>
 8000e80:	0800c948 	.word	0x0800c948
 8000e84:	20000094 	.word	0x20000094
 8000e88:	200003f0 	.word	0x200003f0
 8000e8c:	0800c84c 	.word	0x0800c84c

08000e90 <ProcessHeartBeat>:
	    }
}

void ProcessHeartBeat(void* argument) {
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b097      	sub	sp, #92	@ 0x5c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    char heartbeatMessage[32];
    const uint8_t channel = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    const int timeout = 5000;
 8000e9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int lastSpeed = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	657b      	str	r3, [r7, #84]	@ 0x54

    while (1) {

    	if (lastSpeed == motorA.measured_speed)
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <ProcessHeartBeat+0xac>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d041      	beq.n	8000f36 <ProcessHeartBeat+0xa6>
    		continue;

    	lastSpeed = motorA.measured_speed;
 8000eb2:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <ProcessHeartBeat+0xac>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	657b      	str	r3, [r7, #84]	@ 0x54

        sprintf(heartbeatMessage, "HB:%d\r\n", motorA.measured_speed);
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <ProcessHeartBeat+0xac>)
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec0:	491f      	ldr	r1, [pc, #124]	@ (8000f40 <ProcessHeartBeat+0xb0>)
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00a fc1c 	bl	800b700 <siprintf>
        char command[32];
        sprintf(command, "AT+CIPSEND=%d,%d\r\n", channel, strlen(heartbeatMessage));
 8000ec8:	f897 4053 	ldrb.w	r4, [r7, #83]	@ 0x53
 8000ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f9bf 	bl	8000254 <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f107 000c 	add.w	r0, r7, #12
 8000edc:	4622      	mov	r2, r4
 8000ede:	4919      	ldr	r1, [pc, #100]	@ (8000f44 <ProcessHeartBeat+0xb4>)
 8000ee0:	f00a fc0e 	bl	800b700 <siprintf>

        if (ATC_Send(&ESP, command, timeout)) {
 8000ee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4619      	mov	r1, r3
 8000eec:	4816      	ldr	r0, [pc, #88]	@ (8000f48 <ProcessHeartBeat+0xb8>)
 8000eee:	f009 ffea 	bl	800aec6 <ATC_Send>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d013      	beq.n	8000f20 <ProcessHeartBeat+0x90>
            osDelay(50);
 8000ef8:	2032      	movs	r0, #50	@ 0x32
 8000efa:	f006 ffe5 	bl	8007ec8 <osDelay>

            if (!ATC_Send(&ESP, heartbeatMessage, timeout)) {
 8000efe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4810      	ldr	r0, [pc, #64]	@ (8000f48 <ProcessHeartBeat+0xb8>)
 8000f08:	f009 ffdd 	bl	800aec6 <ATC_Send>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <ProcessHeartBeat+0x96>
                printf("Błąd wysyłania heartbeat\n");
 8000f18:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <ProcessHeartBeat+0xbc>)
 8000f1a:	f00a fbe9 	bl	800b6f0 <puts>
 8000f1e:	e002      	b.n	8000f26 <ProcessHeartBeat+0x96>
            }
        } else {
            printf("Błąd komendy AT+CIPSEND\n");
 8000f20:	480b      	ldr	r0, [pc, #44]	@ (8000f50 <ProcessHeartBeat+0xc0>)
 8000f22:	f00a fbe5 	bl	800b6f0 <puts>
        }

        ATC_Loop(&ESP);
 8000f26:	4808      	ldr	r0, [pc, #32]	@ (8000f48 <ProcessHeartBeat+0xb8>)
 8000f28:	f009 fee0 	bl	800acec <ATC_Loop>

        osDelay(500);
 8000f2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f30:	f006 ffca 	bl	8007ec8 <osDelay>
 8000f34:	e7b8      	b.n	8000ea8 <ProcessHeartBeat+0x18>
    		continue;
 8000f36:	bf00      	nop
    while (1) {
 8000f38:	e7b6      	b.n	8000ea8 <ProcessHeartBeat+0x18>
 8000f3a:	bf00      	nop
 8000f3c:	200000d0 	.word	0x200000d0
 8000f40:	0800c950 	.word	0x0800c950
 8000f44:	0800c958 	.word	0x0800c958
 8000f48:	20000094 	.word	0x20000094
 8000f4c:	0800c96c 	.word	0x0800c96c
 8000f50:	0800c988 	.word	0x0800c988

08000f54 <TESTSCENARIO>:
    }
}

void TESTSCENARIO(void*) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

	while(1){
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000f5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f60:	480d      	ldr	r0, [pc, #52]	@ (8000f98 <TESTSCENARIO+0x44>)
 8000f62:	f002 f9fb 	bl	800335c <HAL_GPIO_ReadPin>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f7      	beq.n	8000f5c <TESTSCENARIO+0x8>
			break;
	}

	while(1) {
		motor_set_speed(&motorA, rand() % 100);
 8000f6c:	f00a f9e6 	bl	800b33c <rand>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <TESTSCENARIO+0x48>)
 8000f74:	fb83 1302 	smull	r1, r3, r3, r2
 8000f78:	1159      	asrs	r1, r3, #5
 8000f7a:	17d3      	asrs	r3, r2, #31
 8000f7c:	1acb      	subs	r3, r1, r3
 8000f7e:	2164      	movs	r1, #100	@ 0x64
 8000f80:	fb01 f303 	mul.w	r3, r1, r3
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <TESTSCENARIO+0x4c>)
 8000f8a:	f7ff fdc0 	bl	8000b0e <motor_set_speed>
		osDelay(5000);
 8000f8e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f92:	f006 ff99 	bl	8007ec8 <osDelay>
		motor_set_speed(&motorA, rand() % 100);
 8000f96:	e7e9      	b.n	8000f6c <TESTSCENARIO+0x18>
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	51eb851f 	.word	0x51eb851f
 8000fa0:	200000d0 	.word	0x200000d0

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000faa:	f001 fa82 	bl	80024b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fae:	f000 f8d7 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb2:	f7ff fb79 	bl	80006a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb6:	f7ff fb23 	bl	8000600 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000fba:	f001 f861 	bl	8002080 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fbe:	f001 f9a7 	bl	8002310 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000fc2:	f001 f82d 	bl	8002020 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fc6:	f000 fb19 	bl	80015fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fca:	f000 fbd5 	bl	8001778 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fce:	f000 fc29 	bl	8001824 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000fd2:	f000 fd1b 	bl	8001a0c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000fd6:	f000 fb6b 	bl	80016b0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000fda:	f000 fcdf 	bl	800199c <MX_TIM6_Init>
  MX_TIM5_Init();
 8000fde:	f000 fc77 	bl	80018d0 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000fe2:	f000 fd6d 	bl	8001ac0 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  ATC_Init(&ESP, &huart2, 2048, "ESP");
 8000fe6:	4b49      	ldr	r3, [pc, #292]	@ (800110c <main+0x168>)
 8000fe8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fec:	4948      	ldr	r1, [pc, #288]	@ (8001110 <main+0x16c>)
 8000fee:	4849      	ldr	r0, [pc, #292]	@ (8001114 <main+0x170>)
 8000ff0:	f009 fdd7 	bl	800aba2 <ATC_Init>
  ATC_SendReceive(&ESP, "AT\r\n", 1000, NULL, 1000, 0);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001004:	4944      	ldr	r1, [pc, #272]	@ (8001118 <main+0x174>)
 8001006:	4843      	ldr	r0, [pc, #268]	@ (8001114 <main+0x170>)
 8001008:	f009 fe7e 	bl	800ad08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWMODE=1\r\n", 1000, NULL, 1000, 0);
 800100c:	2300      	movs	r3, #0
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2300      	movs	r3, #0
 8001018:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800101c:	493f      	ldr	r1, [pc, #252]	@ (800111c <main+0x178>)
 800101e:	483d      	ldr	r0, [pc, #244]	@ (8001114 <main+0x170>)
 8001020:	f009 fe72 	bl	800ad08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMUX=1\r\n", 1000, NULL, 1000, 0);
 8001024:	2300      	movs	r3, #0
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001034:	493a      	ldr	r1, [pc, #232]	@ (8001120 <main+0x17c>)
 8001036:	4837      	ldr	r0, [pc, #220]	@ (8001114 <main+0x170>)
 8001038:	f009 fe66 	bl	800ad08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMODE=1\r\n", 1000, NULL, 1000, 0);
 800103c:	2300      	movs	r3, #0
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800104c:	4935      	ldr	r1, [pc, #212]	@ (8001124 <main+0x180>)
 800104e:	4831      	ldr	r0, [pc, #196]	@ (8001114 <main+0x170>)
 8001050:	f009 fe5a 	bl	800ad08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPSERVER=1,80\r\n", 1000, NULL, 1000, 0);
 8001054:	2300      	movs	r3, #0
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001064:	4930      	ldr	r1, [pc, #192]	@ (8001128 <main+0x184>)
 8001066:	482b      	ldr	r0, [pc, #172]	@ (8001114 <main+0x170>)
 8001068:	f009 fe4e 	bl	800ad08 <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWJAP=\"DeathLock\",\"\"\r\n", 10000, NULL, 10000, 0);
 800106c:	2300      	movs	r3, #0
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	f242 7210 	movw	r2, #10000	@ 0x2710
 800107c:	492b      	ldr	r1, [pc, #172]	@ (800112c <main+0x188>)
 800107e:	4825      	ldr	r0, [pc, #148]	@ (8001114 <main+0x170>)
 8001080:	f009 fe42 	bl	800ad08 <ATC_SendReceive>

  const char *readyMsg = "STM32 ready to receive data from ESP...\r\n";
 8001084:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <main+0x18c>)
 8001086:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff f8e3 	bl	8000254 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4826      	ldr	r0, [pc, #152]	@ (8001134 <main+0x190>)
 800109a:	f004 fe85 	bl	8005da8 <HAL_UART_Transmit>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800109e:	213c      	movs	r1, #60	@ 0x3c
 80010a0:	4825      	ldr	r0, [pc, #148]	@ (8001138 <main+0x194>)
 80010a2:	f003 ff85 	bl	8004fb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80010a6:	213c      	movs	r1, #60	@ 0x3c
 80010a8:	4824      	ldr	r0, [pc, #144]	@ (800113c <main+0x198>)
 80010aa:	f003 ff81 	bl	8004fb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	4823      	ldr	r0, [pc, #140]	@ (8001140 <main+0x19c>)
 80010b2:	f003 ff7d 	bl	8004fb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80010b6:	213c      	movs	r1, #60	@ 0x3c
 80010b8:	4822      	ldr	r0, [pc, #136]	@ (8001144 <main+0x1a0>)
 80010ba:	f003 ff79 	bl	8004fb0 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010be:	2100      	movs	r1, #0
 80010c0:	4821      	ldr	r0, [pc, #132]	@ (8001148 <main+0x1a4>)
 80010c2:	f003 fd55 	bl	8004b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80010c6:	210c      	movs	r1, #12
 80010c8:	481f      	ldr	r0, [pc, #124]	@ (8001148 <main+0x1a4>)
 80010ca:	f003 fd51 	bl	8004b70 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 80010ce:	481f      	ldr	r0, [pc, #124]	@ (800114c <main+0x1a8>)
 80010d0:	f003 fc7e 	bl	80049d0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80010d4:	2104      	movs	r1, #4
 80010d6:	481e      	ldr	r0, [pc, #120]	@ (8001150 <main+0x1ac>)
 80010d8:	f003 fd4a 	bl	8004b70 <HAL_TIM_PWM_Start>

  drv8835_init();
 80010dc:	f7ff fd4a 	bl	8000b74 <drv8835_init>
  motor_init(&motorA, &htim4);
 80010e0:	4917      	ldr	r1, [pc, #92]	@ (8001140 <main+0x19c>)
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <main+0x1b0>)
 80010e4:	f7ff fcad 	bl	8000a42 <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 80010e8:	2101      	movs	r1, #1
 80010ea:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 8001158 <main+0x1b4>
 80010ee:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8001158 <main+0x1b4>
 80010f2:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80010f6:	4819      	ldr	r0, [pc, #100]	@ (800115c <main+0x1b8>)
 80010f8:	f7ff fbf4 	bl	80008e4 <pid_init>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010fc:	f006 fdd4 	bl	8007ca8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001100:	f7ff faa4 	bl	800064c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001104:	f006 fe04 	bl	8007d10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <main+0x164>
 800110c:	0800c9a4 	.word	0x0800c9a4
 8001110:	20000368 	.word	0x20000368
 8001114:	20000094 	.word	0x20000094
 8001118:	0800c9a8 	.word	0x0800c9a8
 800111c:	0800c9b0 	.word	0x0800c9b0
 8001120:	0800c9c0 	.word	0x0800c9c0
 8001124:	0800c9d0 	.word	0x0800c9d0
 8001128:	0800c9e0 	.word	0x0800c9e0
 800112c:	0800c9f4 	.word	0x0800c9f4
 8001130:	0800ca10 	.word	0x0800ca10
 8001134:	200003f0 	.word	0x200003f0
 8001138:	20000108 	.word	0x20000108
 800113c:	200001a0 	.word	0x200001a0
 8001140:	200001ec 	.word	0x200001ec
 8001144:	200002d0 	.word	0x200002d0
 8001148:	20000154 	.word	0x20000154
 800114c:	20000284 	.word	0x20000284
 8001150:	2000031c 	.word	0x2000031c
 8001154:	200000d0 	.word	0x200000d0
 8001158:	3d4ccccd 	.word	0x3d4ccccd
 800115c:	200000e8 	.word	0x200000e8

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2234      	movs	r2, #52	@ 0x34
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f00a fbf6 	bl	800b960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001184:	f002 fa70 	bl	8003668 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <SystemClock_Config+0xdc>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <SystemClock_Config+0xdc>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <SystemClock_Config+0xdc>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <SystemClock_Config+0xe0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011a8:	4a25      	ldr	r2, [pc, #148]	@ (8001240 <SystemClock_Config+0xe0>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <SystemClock_Config+0xe0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011bc:	2301      	movs	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011d4:	2360      	movs	r3, #96	@ 0x60
 80011d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011dc:	2304      	movs	r3, #4
 80011de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 fa9d 	bl	8003728 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011f4:	f000 f826 	bl	8001244 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011f8:	f002 fa46 	bl	8003688 <HAL_PWREx_EnableOverDrive>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001202:	f000 f81f 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120a:	2302      	movs	r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2103      	movs	r1, #3
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fd2e 	bl	8003c84 <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800122e:	f000 f809 	bl	8001244 <Error_Handler>
  }
}
 8001232:	bf00      	nop
 8001234:	3750      	adds	r7, #80	@ 0x50
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <Error_Handler+0x8>

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <HAL_MspInit+0x4c>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	4a10      	ldr	r2, [pc, #64]	@ (800129c <HAL_MspInit+0x4c>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	@ 0x40
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <HAL_MspInit+0x4c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	210f      	movs	r1, #15
 800128a:	f06f 0001 	mvn.w	r0, #1
 800128e:	f001 fa6c 	bl	800276a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <NMI_Handler+0x4>

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <MemManage_Handler+0x4>

080012b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012da:	f001 f927 	bl	800252c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012de:	f008 fa6d 	bl	80097bc <xTaskGetSchedulerState>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d001      	beq.n	80012ec <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012e8:	f009 f85e 	bl	800a3a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <DMA1_Stream5_IRQHandler+0x10>)
 80012f6:	f001 fc0f 	bl	8002b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000478 	.word	0x20000478

08001304 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <DMA1_Stream6_IRQHandler+0x10>)
 800130a:	f001 fc05 	bl	8002b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200004d8 	.word	0x200004d8

08001318 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800131e:	f003 fed5 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000108 	.word	0x20000108

0800132c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001332:	f003 fecb 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000108 	.word	0x20000108

08001340 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001346:	f003 fec1 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000108 	.word	0x20000108

08001354 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <TIM1_CC_IRQHandler+0x10>)
 800135a:	f003 feb7 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000108 	.word	0x20000108

08001368 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <TIM2_IRQHandler+0x10>)
 800136e:	f003 fead 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000154 	.word	0x20000154

0800137c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <TIM3_IRQHandler+0x10>)
 8001382:	f003 fea3 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001a0 	.word	0x200001a0

08001390 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <TIM4_IRQHandler+0x10>)
 8001396:	f003 fe99 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001ec 	.word	0x200001ec

080013a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <USART2_IRQHandler+0x10>)
 80013aa:	f004 ff1b 	bl	80061e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000368 	.word	0x20000368

080013b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <USART3_IRQHandler+0x10>)
 80013be:	f004 ff11 	bl	80061e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200003f0 	.word	0x200003f0

080013cc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80013d0:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80013d2:	f003 fe7b 	bl	80050cc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80013d6:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80013d8:	f003 fe78 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200002d0 	.word	0x200002d0
 80013e4:	2000031c 	.word	0x2000031c

080013e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80013ee:	f003 fe6d 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002d0 	.word	0x200002d0

080013fc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001402:	f003 fe63 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002d0 	.word	0x200002d0

08001410 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <TIM8_CC_IRQHandler+0x10>)
 8001416:	f003 fe59 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002d0 	.word	0x200002d0

08001424 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <TIM5_IRQHandler+0x10>)
 800142a:	f003 fe4f 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000238 	.word	0x20000238

08001438 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <TIM6_DAC_IRQHandler+0x10>)
 800143e:	f003 fe45 	bl	80050cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000284 	.word	0x20000284

0800144c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_kill>:

int _kill(int pid, int sig)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001466:	f00a fb21 	bl	800baac <__errno>
 800146a:	4603      	mov	r3, r0
 800146c:	2216      	movs	r2, #22
 800146e:	601a      	str	r2, [r3, #0]
  return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_exit>:

void _exit (int status)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ffe7 	bl	800145c <_kill>
  while (1) {}    /* Make sure we hang here */
 800148e:	bf00      	nop
 8001490:	e7fd      	b.n	800148e <_exit+0x12>

08001492 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e00a      	b.n	80014ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a4:	f3af 8000 	nop.w
 80014a8:	4601      	mov	r1, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	60ba      	str	r2, [r7, #8]
 80014b0:	b2ca      	uxtb	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbf0      	blt.n	80014a4 <_read+0x12>
  }

  return len;
 80014c2:	687b      	ldr	r3, [r7, #4]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e009      	b.n	80014f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	60ba      	str	r2, [r7, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbf1      	blt.n	80014de <_write+0x12>
  }
  return len;
 80014fa:	687b      	ldr	r3, [r7, #4]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <_close>:

int _close(int file)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800152c:	605a      	str	r2, [r3, #4]
  return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_isatty>:

int _isatty(int file)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f00a fa86 	bl	800baac <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20080000 	.word	0x20080000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	20000104 	.word	0x20000104
 80015d4:	200054b0 	.word	0x200054b0

080015d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <SystemInit+0x20>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e2:	4a05      	ldr	r2, [pc, #20]	@ (80015f8 <SystemInit+0x20>)
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	@ 0x30
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	2224      	movs	r2, #36	@ 0x24
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f00a f9a8 	bl	800b960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800161a:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <MX_TIM1_Init+0xac>)
 800161c:	4a23      	ldr	r2, [pc, #140]	@ (80016ac <MX_TIM1_Init+0xb0>)
 800161e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001620:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <MX_TIM1_Init+0xac>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <MX_TIM1_Init+0xac>)
 8001628:	2210      	movs	r2, #16
 800162a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_TIM1_Init+0xac>)
 800162e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <MX_TIM1_Init+0xac>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_TIM1_Init+0xac>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MX_TIM1_Init+0xac>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001646:	2303      	movs	r3, #3
 8001648:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800164e:	2301      	movs	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001656:	230f      	movs	r3, #15
 8001658:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800165e:	2301      	movs	r3, #1
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001666:	230f      	movs	r3, #15
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4619      	mov	r1, r3
 8001670:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <MX_TIM1_Init+0xac>)
 8001672:	f003 fbf7 	bl	8004e64 <HAL_TIM_Encoder_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800167c:	f7ff fde2 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_TIM1_Init+0xac>)
 8001692:	f004 fa8f 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800169c:	f7ff fdd2 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3730      	adds	r7, #48	@ 0x30
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000108 	.word	0x20000108
 80016ac:	40010000 	.word	0x40010000

080016b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <MX_TIM2_Init+0xc4>)
 80016d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80016dc:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <MX_TIM2_Init+0xc4>)
 80016de:	222f      	movs	r2, #47	@ 0x2f
 80016e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <MX_TIM2_Init+0xc4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <MX_TIM2_Init+0xc4>)
 80016ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <MX_TIM2_Init+0xc4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <MX_TIM2_Init+0xc4>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016fc:	481d      	ldr	r0, [pc, #116]	@ (8001774 <MX_TIM2_Init+0xc4>)
 80016fe:	f003 f9df 	bl	8004ac0 <HAL_TIM_PWM_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001708:	f7ff fd9c 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4816      	ldr	r0, [pc, #88]	@ (8001774 <MX_TIM2_Init+0xc4>)
 800171c:	f004 fa4a 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001726:	f7ff fd8d 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172a:	2360      	movs	r3, #96	@ 0x60
 800172c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	@ (8001774 <MX_TIM2_Init+0xc4>)
 8001742:	f003 fdcb 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800174c:	f7ff fd7a 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	220c      	movs	r2, #12
 8001754:	4619      	mov	r1, r3
 8001756:	4807      	ldr	r0, [pc, #28]	@ (8001774 <MX_TIM2_Init+0xc4>)
 8001758:	f003 fdc0 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001762:	f7ff fd6f 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001766:	4803      	ldr	r0, [pc, #12]	@ (8001774 <MX_TIM2_Init+0xc4>)
 8001768:	f000 fbbc 	bl	8001ee4 <HAL_TIM_MspPostInit>

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	@ 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000154 	.word	0x20000154

08001778 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	@ 0x30
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2224      	movs	r2, #36	@ 0x24
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f00a f8ea 	bl	800b960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	463b      	mov	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001796:	4b21      	ldr	r3, [pc, #132]	@ (800181c <MX_TIM3_Init+0xa4>)
 8001798:	4a21      	ldr	r2, [pc, #132]	@ (8001820 <MX_TIM3_Init+0xa8>)
 800179a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <MX_TIM3_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <MX_TIM3_Init+0xa4>)
 80017a4:	2210      	movs	r2, #16
 80017a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <MX_TIM3_Init+0xa4>)
 80017aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <MX_TIM3_Init+0xa4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b6:	4b19      	ldr	r3, [pc, #100]	@ (800181c <MX_TIM3_Init+0xa4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017bc:	2303      	movs	r3, #3
 80017be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017c4:	2301      	movs	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80017cc:	230f      	movs	r3, #15
 80017ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017d4:	2301      	movs	r3, #1
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80017dc:	230f      	movs	r3, #15
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	480d      	ldr	r0, [pc, #52]	@ (800181c <MX_TIM3_Init+0xa4>)
 80017e8:	f003 fb3c 	bl	8004e64 <HAL_TIM_Encoder_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80017f2:	f7ff fd27 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	4619      	mov	r1, r3
 8001802:	4806      	ldr	r0, [pc, #24]	@ (800181c <MX_TIM3_Init+0xa4>)
 8001804:	f004 f9d6 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800180e:	f7ff fd19 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	3730      	adds	r7, #48	@ 0x30
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200001a0 	.word	0x200001a0
 8001820:	40000400 	.word	0x40000400

08001824 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	2224      	movs	r2, #36	@ 0x24
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f00a f894 	bl	800b960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <MX_TIM4_Init+0xa4>)
 8001844:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <MX_TIM4_Init+0xa8>)
 8001846:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <MX_TIM4_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800184e:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <MX_TIM4_Init+0xa4>)
 8001850:	2210      	movs	r2, #16
 8001852:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001854:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <MX_TIM4_Init+0xa4>)
 8001856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800185a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_TIM4_Init+0xa4>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <MX_TIM4_Init+0xa4>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001868:	2303      	movs	r3, #3
 800186a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001870:	2301      	movs	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001878:	230f      	movs	r3, #15
 800187a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001888:	230f      	movs	r3, #15
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_TIM4_Init+0xa4>)
 8001894:	f003 fae6 	bl	8004e64 <HAL_TIM_Encoder_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800189e:	f7ff fcd1 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018aa:	463b      	mov	r3, r7
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <MX_TIM4_Init+0xa4>)
 80018b0:	f004 f980 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018ba:	f7ff fcc3 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	3730      	adds	r7, #48	@ 0x30
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200001ec 	.word	0x200001ec
 80018cc:	40000800 	.word	0x40000800

080018d0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	@ 0x28
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e2:	463b      	mov	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <MX_TIM5_Init+0xc4>)
 80018f6:	4a28      	ldr	r2, [pc, #160]	@ (8001998 <MX_TIM5_Init+0xc8>)
 80018f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <MX_TIM5_Init+0xc4>)
 80018fc:	222f      	movs	r2, #47	@ 0x2f
 80018fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <MX_TIM5_Init+0xc4>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001906:	4b23      	ldr	r3, [pc, #140]	@ (8001994 <MX_TIM5_Init+0xc4>)
 8001908:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800190c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <MX_TIM5_Init+0xc4>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <MX_TIM5_Init+0xc4>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800191a:	481e      	ldr	r0, [pc, #120]	@ (8001994 <MX_TIM5_Init+0xc4>)
 800191c:	f003 f8d0 	bl	8004ac0 <HAL_TIM_PWM_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001926:	f7ff fc8d 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	4816      	ldr	r0, [pc, #88]	@ (8001994 <MX_TIM5_Init+0xc4>)
 800193a:	f004 f93b 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001944:	f7ff fc7e 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001948:	2360      	movs	r3, #96	@ 0x60
 800194a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	480d      	ldr	r0, [pc, #52]	@ (8001994 <MX_TIM5_Init+0xc4>)
 8001960:	f003 fcbc 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800196a:	f7ff fc6b 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800196e:	463b      	mov	r3, r7
 8001970:	220c      	movs	r2, #12
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	@ (8001994 <MX_TIM5_Init+0xc4>)
 8001976:	f003 fcb1 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001980:	f7ff fc60 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <MX_TIM5_Init+0xc4>)
 8001986:	f000 faad 	bl	8001ee4 <HAL_TIM_MspPostInit>

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	@ 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000238 	.word	0x20000238
 8001998:	40000c00 	.word	0x40000c00

0800199c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019ac:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <MX_TIM6_Init+0x68>)
 80019ae:	4a16      	ldr	r2, [pc, #88]	@ (8001a08 <MX_TIM6_Init+0x6c>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80019b2:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <MX_TIM6_Init+0x68>)
 80019b4:	f242 527f 	movw	r2, #9599	@ 0x257f
 80019b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <MX_TIM6_Init+0x68>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80019c0:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <MX_TIM6_Init+0x68>)
 80019c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_TIM6_Init+0x68>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019ce:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <MX_TIM6_Init+0x68>)
 80019d0:	f002 ffa6 	bl	8004920 <HAL_TIM_Base_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80019da:	f7ff fc33 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <MX_TIM6_Init+0x68>)
 80019ec:	f004 f8e2 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80019f6:	f7ff fc25 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000284 	.word	0x20000284
 8001a08:	40001000 	.word	0x40001000

08001a0c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	@ 0x30
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2224      	movs	r2, #36	@ 0x24
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f009 ffa0 	bl	800b960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <MX_TIM8_Init+0xac>)
 8001a2c:	4a23      	ldr	r2, [pc, #140]	@ (8001abc <MX_TIM8_Init+0xb0>)
 8001a2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a30:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <MX_TIM8_Init+0xac>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <MX_TIM8_Init+0xac>)
 8001a38:	2210      	movs	r2, #16
 8001a3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <MX_TIM8_Init+0xac>)
 8001a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <MX_TIM8_Init+0xac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <MX_TIM8_Init+0xac>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <MX_TIM8_Init+0xac>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a56:	2303      	movs	r3, #3
 8001a58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a66:	230f      	movs	r3, #15
 8001a68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001a76:	230f      	movs	r3, #15
 8001a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <MX_TIM8_Init+0xac>)
 8001a82:	f003 f9ef 	bl	8004e64 <HAL_TIM_Encoder_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001a8c:	f7ff fbda 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_TIM8_Init+0xac>)
 8001aa2:	f004 f887 	bl	8005bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001aac:	f7ff fbca 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	@ 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200002d0 	.word	0x200002d0
 8001abc:	40010400 	.word	0x40010400

08001ac0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <MX_TIM12_Init+0x84>)
 8001ada:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <MX_TIM12_Init+0x88>)
 8001adc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <MX_TIM12_Init+0x84>)
 8001ae0:	225f      	movs	r2, #95	@ 0x5f
 8001ae2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <MX_TIM12_Init+0x84>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <MX_TIM12_Init+0x84>)
 8001aec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001af0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <MX_TIM12_Init+0x84>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <MX_TIM12_Init+0x84>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001afe:	4811      	ldr	r0, [pc, #68]	@ (8001b44 <MX_TIM12_Init+0x84>)
 8001b00:	f002 ffde 	bl	8004ac0 <HAL_TIM_PWM_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001b0a:	f7ff fb9b 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0e:	2360      	movs	r3, #96	@ 0x60
 8001b10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2204      	movs	r2, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4807      	ldr	r0, [pc, #28]	@ (8001b44 <MX_TIM12_Init+0x84>)
 8001b26:	f003 fbd9 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001b30:	f7ff fb88 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001b34:	4803      	ldr	r0, [pc, #12]	@ (8001b44 <MX_TIM12_Init+0x84>)
 8001b36:	f000 f9d5 	bl	8001ee4 <HAL_TIM_MspPostInit>

}
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000031c 	.word	0x2000031c
 8001b48:	40001800 	.word	0x40001800

08001b4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b090      	sub	sp, #64	@ 0x40
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a93      	ldr	r2, [pc, #588]	@ (8001db8 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d149      	bne.n	8001c02 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6e:	4b93      	ldr	r3, [pc, #588]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	4a92      	ldr	r2, [pc, #584]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7a:	4b90      	ldr	r3, [pc, #576]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b86:	4b8d      	ldr	r3, [pc, #564]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a8c      	ldr	r2, [pc, #560]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001b8c:	f043 0310 	orr.w	r3, r3, #16
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b8a      	ldr	r3, [pc, #552]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 8001b9e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4881      	ldr	r0, [pc, #516]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0x274>)
 8001bbc:	f001 fa22 	bl	8003004 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	2018      	movs	r0, #24
 8001bc6:	f000 fdd0 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001bca:	2018      	movs	r0, #24
 8001bcc:	f000 fde9 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2105      	movs	r1, #5
 8001bd4:	2019      	movs	r0, #25
 8001bd6:	f000 fdc8 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bda:	2019      	movs	r0, #25
 8001bdc:	f000 fde1 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2105      	movs	r1, #5
 8001be4:	201a      	movs	r0, #26
 8001be6:	f000 fdc0 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001bea:	201a      	movs	r0, #26
 8001bec:	f000 fdd9 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	201b      	movs	r0, #27
 8001bf6:	f000 fdb8 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bfa:	201b      	movs	r0, #27
 8001bfc:	f000 fdd1 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c00:	e0d5      	b.n	8001dae <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6f      	ldr	r2, [pc, #444]	@ (8001dc4 <HAL_TIM_Encoder_MspInit+0x278>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d14c      	bne.n	8001ca6 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	4a6a      	ldr	r2, [pc, #424]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c18:	4b68      	ldr	r3, [pc, #416]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b65      	ldr	r3, [pc, #404]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	4a64      	ldr	r2, [pc, #400]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c30:	4b62      	ldr	r3, [pc, #392]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	4b5f      	ldr	r3, [pc, #380]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c40:	4a5e      	ldr	r2, [pc, #376]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001c42:	f043 0302 	orr.w	r3, r3, #2
 8001c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c48:	4b5c      	ldr	r3, [pc, #368]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8001c54:	2340      	movs	r3, #64	@ 0x40
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c64:	2302      	movs	r3, #2
 8001c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4856      	ldr	r0, [pc, #344]	@ (8001dc8 <HAL_TIM_Encoder_MspInit+0x27c>)
 8001c70:	f001 f9c8 	bl	8003004 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001c74:	2320      	movs	r3, #32
 8001c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c84:	2302      	movs	r3, #2
 8001c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	484f      	ldr	r0, [pc, #316]	@ (8001dcc <HAL_TIM_Encoder_MspInit+0x280>)
 8001c90:	f001 f9b8 	bl	8003004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2105      	movs	r1, #5
 8001c98:	201d      	movs	r0, #29
 8001c9a:	f000 fd66 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c9e:	201d      	movs	r0, #29
 8001ca0:	f000 fd7f 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 8001ca4:	e083      	b.n	8001dae <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a49      	ldr	r2, [pc, #292]	@ (8001dd0 <HAL_TIM_Encoder_MspInit+0x284>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d131      	bne.n	8001d14 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cb0:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	4a41      	ldr	r2, [pc, #260]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd4:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8001ce0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4835      	ldr	r0, [pc, #212]	@ (8001dd4 <HAL_TIM_Encoder_MspInit+0x288>)
 8001cfe:	f001 f981 	bl	8003004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	201e      	movs	r0, #30
 8001d08:	f000 fd2f 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d0c:	201e      	movs	r0, #30
 8001d0e:	f000 fd48 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 8001d12:	e04c      	b.n	8001dae <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd8 <HAL_TIM_Encoder_MspInit+0x28c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d147      	bne.n	8001dae <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d1e:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a26      	ldr	r2, [pc, #152]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8001d4e:	23c0      	movs	r3, #192	@ 0xc0
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d66:	4619      	mov	r1, r3
 8001d68:	481c      	ldr	r0, [pc, #112]	@ (8001ddc <HAL_TIM_Encoder_MspInit+0x290>)
 8001d6a:	f001 f94b 	bl	8003004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2105      	movs	r1, #5
 8001d72:	202b      	movs	r0, #43	@ 0x2b
 8001d74:	f000 fcf9 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001d78:	202b      	movs	r0, #43	@ 0x2b
 8001d7a:	f000 fd12 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2105      	movs	r1, #5
 8001d82:	202c      	movs	r0, #44	@ 0x2c
 8001d84:	f000 fcf1 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001d88:	202c      	movs	r0, #44	@ 0x2c
 8001d8a:	f000 fd0a 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2105      	movs	r1, #5
 8001d92:	202d      	movs	r0, #45	@ 0x2d
 8001d94:	f000 fce9 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001d98:	202d      	movs	r0, #45	@ 0x2d
 8001d9a:	f000 fd02 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2105      	movs	r1, #5
 8001da2:	202e      	movs	r0, #46	@ 0x2e
 8001da4:	f000 fce1 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001da8:	202e      	movs	r0, #46	@ 0x2e
 8001daa:	f000 fcfa 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3740      	adds	r7, #64	@ 0x40
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40010400 	.word	0x40010400
 8001ddc:	40020800 	.word	0x40020800

08001de0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df0:	d114      	bne.n	8001e1c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df2:	4b26      	ldr	r3, [pc, #152]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xac>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	4a25      	ldr	r2, [pc, #148]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xac>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfe:	4b23      	ldr	r3, [pc, #140]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xac>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	201c      	movs	r0, #28
 8001e10:	f000 fcab 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e14:	201c      	movs	r0, #28
 8001e16:	f000 fcc4 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001e1a:	e032      	b.n	8001e82 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1b      	ldr	r2, [pc, #108]	@ (8001e90 <HAL_TIM_PWM_MspInit+0xb0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d114      	bne.n	8001e50 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e26:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xac>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	4a18      	ldr	r2, [pc, #96]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xac>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xac>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2105      	movs	r1, #5
 8001e42:	2032      	movs	r0, #50	@ 0x32
 8001e44:	f000 fc91 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e48:	2032      	movs	r0, #50	@ 0x32
 8001e4a:	f000 fcaa 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 8001e4e:	e018      	b.n	8001e82 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0f      	ldr	r2, [pc, #60]	@ (8001e94 <HAL_TIM_PWM_MspInit+0xb4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xac>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xac>)
 8001e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_TIM_PWM_MspInit+0xac>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2105      	movs	r1, #5
 8001e76:	202b      	movs	r0, #43	@ 0x2b
 8001e78:	f000 fc77 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001e7c:	202b      	movs	r0, #43	@ 0x2b
 8001e7e:	f000 fc90 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40000c00 	.word	0x40000c00
 8001e94:	40001800 	.word	0x40001800

08001e98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <HAL_TIM_Base_MspInit+0x44>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d113      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x48>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x48>)
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_TIM_Base_MspInit+0x48>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	2036      	movs	r0, #54	@ 0x36
 8001ec8:	f000 fc4f 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ecc:	2036      	movs	r0, #54	@ 0x36
 8001ece:	f000 fc68 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40001000 	.word	0x40001000
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	@ 0x30
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f04:	d139      	bne.n	8001f7a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b41      	ldr	r3, [pc, #260]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a40      	ldr	r2, [pc, #256]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b3e      	ldr	r3, [pc, #248]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a3a      	ldr	r2, [pc, #232]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b38      	ldr	r3, [pc, #224]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8001f36:	2320      	movs	r3, #32
 8001f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f46:	2301      	movs	r3, #1
 8001f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	482f      	ldr	r0, [pc, #188]	@ (8002010 <HAL_TIM_MspPostInit+0x12c>)
 8001f52:	f001 f857 	bl	8003004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 8001f56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	4828      	ldr	r0, [pc, #160]	@ (8002014 <HAL_TIM_MspPostInit+0x130>)
 8001f74:	f001 f846 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001f78:	e043      	b.n	8002002 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a26      	ldr	r2, [pc, #152]	@ (8002018 <HAL_TIM_MspPostInit+0x134>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d11c      	bne.n	8001fbe <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b21      	ldr	r3, [pc, #132]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	4a20      	ldr	r2, [pc, #128]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f90:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001f9c:	2309      	movs	r3, #9
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fac:	2302      	movs	r3, #2
 8001fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4816      	ldr	r0, [pc, #88]	@ (8002010 <HAL_TIM_MspPostInit+0x12c>)
 8001fb8:	f001 f824 	bl	8003004 <HAL_GPIO_Init>
}
 8001fbc:	e021      	b.n	8002002 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a16      	ldr	r2, [pc, #88]	@ (800201c <HAL_TIM_MspPostInit+0x138>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d11c      	bne.n	8002002 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	4b10      	ldr	r3, [pc, #64]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <HAL_TIM_MspPostInit+0x128>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ff2:	2309      	movs	r3, #9
 8001ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4805      	ldr	r0, [pc, #20]	@ (8002014 <HAL_TIM_MspPostInit+0x130>)
 8001ffe:	f001 f801 	bl	8003004 <HAL_GPIO_Init>
}
 8002002:	bf00      	nop
 8002004:	3730      	adds	r7, #48	@ 0x30
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40000c00 	.word	0x40000c00
 800201c:	40001800 	.word	0x40001800

08002020 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 8002026:	4a15      	ldr	r2, [pc, #84]	@ (800207c <MX_USART2_UART_Init+0x5c>)
 8002028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800202a:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 800202c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_USART2_UART_Init+0x58>)
 8002064:	f003 fe52 	bl	8005d0c <HAL_UART_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800206e:	f7ff f8e9 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000368 	.word	0x20000368
 800207c:	40004400 	.word	0x40004400

08002080 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <MX_USART3_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 800208c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <MX_USART3_UART_Init+0x58>)
 80020c4:	f003 fe22 	bl	8005d0c <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f7ff f8b9 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200003f0 	.word	0x200003f0
 80020dc:	40004800 	.word	0x40004800

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0b0      	sub	sp, #192	@ 0xc0
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	2290      	movs	r2, #144	@ 0x90
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f009 fc2d 	bl	800b960 <memset>
  if(uartHandle->Instance==USART2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a79      	ldr	r2, [pc, #484]	@ (80022f0 <HAL_UART_MspInit+0x210>)
 800210c:	4293      	cmp	r3, r2
 800210e:	f040 80a0 	bne.w	8002252 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002116:	2300      	movs	r3, #0
 8002118:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4618      	mov	r0, r3
 8002120:	f001 ffd6 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800212a:	f7ff f88b 	bl	8001244 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800212e:	4b71      	ldr	r3, [pc, #452]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	4a70      	ldr	r2, [pc, #448]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 8002134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002138:	6413      	str	r3, [r2, #64]	@ 0x40
 800213a:	4b6e      	ldr	r3, [pc, #440]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	4b6b      	ldr	r3, [pc, #428]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a6a      	ldr	r2, [pc, #424]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b68      	ldr	r3, [pc, #416]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800215e:	2360      	movs	r3, #96	@ 0x60
 8002160:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002176:	2307      	movs	r3, #7
 8002178:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002180:	4619      	mov	r1, r3
 8002182:	485d      	ldr	r0, [pc, #372]	@ (80022f8 <HAL_UART_MspInit+0x218>)
 8002184:	f000 ff3e 	bl	8003004 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002188:	4b5c      	ldr	r3, [pc, #368]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 800218a:	4a5d      	ldr	r2, [pc, #372]	@ (8002300 <HAL_UART_MspInit+0x220>)
 800218c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800218e:	4b5b      	ldr	r3, [pc, #364]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 8002190:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002194:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002196:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219c:	4b57      	ldr	r3, [pc, #348]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a2:	4b56      	ldr	r3, [pc, #344]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 80021a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021aa:	4b54      	ldr	r3, [pc, #336]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b0:	4b52      	ldr	r3, [pc, #328]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021b6:	4b51      	ldr	r3, [pc, #324]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021bc:	4b4f      	ldr	r3, [pc, #316]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c2:	4b4e      	ldr	r3, [pc, #312]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021c8:	484c      	ldr	r0, [pc, #304]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 80021ca:	f000 fb05 	bl	80027d8 <HAL_DMA_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80021d4:	f7ff f836 	bl	8001244 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a48      	ldr	r2, [pc, #288]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 80021dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80021de:	4a47      	ldr	r2, [pc, #284]	@ (80022fc <HAL_UART_MspInit+0x21c>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80021e4:	4b47      	ldr	r3, [pc, #284]	@ (8002304 <HAL_UART_MspInit+0x224>)
 80021e6:	4a48      	ldr	r2, [pc, #288]	@ (8002308 <HAL_UART_MspInit+0x228>)
 80021e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80021ea:	4b46      	ldr	r3, [pc, #280]	@ (8002304 <HAL_UART_MspInit+0x224>)
 80021ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021f2:	4b44      	ldr	r3, [pc, #272]	@ (8002304 <HAL_UART_MspInit+0x224>)
 80021f4:	2240      	movs	r2, #64	@ 0x40
 80021f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f8:	4b42      	ldr	r3, [pc, #264]	@ (8002304 <HAL_UART_MspInit+0x224>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021fe:	4b41      	ldr	r3, [pc, #260]	@ (8002304 <HAL_UART_MspInit+0x224>)
 8002200:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002204:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002206:	4b3f      	ldr	r3, [pc, #252]	@ (8002304 <HAL_UART_MspInit+0x224>)
 8002208:	2200      	movs	r2, #0
 800220a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220c:	4b3d      	ldr	r3, [pc, #244]	@ (8002304 <HAL_UART_MspInit+0x224>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002212:	4b3c      	ldr	r3, [pc, #240]	@ (8002304 <HAL_UART_MspInit+0x224>)
 8002214:	2200      	movs	r2, #0
 8002216:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002218:	4b3a      	ldr	r3, [pc, #232]	@ (8002304 <HAL_UART_MspInit+0x224>)
 800221a:	2200      	movs	r2, #0
 800221c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800221e:	4b39      	ldr	r3, [pc, #228]	@ (8002304 <HAL_UART_MspInit+0x224>)
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002224:	4837      	ldr	r0, [pc, #220]	@ (8002304 <HAL_UART_MspInit+0x224>)
 8002226:	f000 fad7 	bl	80027d8 <HAL_DMA_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8002230:	f7ff f808 	bl	8001244 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a33      	ldr	r2, [pc, #204]	@ (8002304 <HAL_UART_MspInit+0x224>)
 8002238:	671a      	str	r2, [r3, #112]	@ 0x70
 800223a:	4a32      	ldr	r2, [pc, #200]	@ (8002304 <HAL_UART_MspInit+0x224>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2105      	movs	r1, #5
 8002244:	2026      	movs	r0, #38	@ 0x26
 8002246:	f000 fa90 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800224a:	2026      	movs	r0, #38	@ 0x26
 800224c:	f000 faa9 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002250:	e049      	b.n	80022e6 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2d      	ldr	r2, [pc, #180]	@ (800230c <HAL_UART_MspInit+0x22c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d144      	bne.n	80022e6 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800225c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002260:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002262:	2300      	movs	r3, #0
 8002264:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4618      	mov	r0, r3
 800226c:	f001 ff30 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8002276:	f7fe ffe5 	bl	8001244 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800227a:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002284:	6413      	str	r3, [r2, #64]	@ 0x40
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	4a17      	ldr	r2, [pc, #92]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 8002298:	f043 0308 	orr.w	r3, r3, #8
 800229c:	6313      	str	r3, [r2, #48]	@ 0x30
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_UART_MspInit+0x214>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022c4:	2307      	movs	r3, #7
 80022c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80022ce:	4619      	mov	r1, r3
 80022d0:	4809      	ldr	r0, [pc, #36]	@ (80022f8 <HAL_UART_MspInit+0x218>)
 80022d2:	f000 fe97 	bl	8003004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2105      	movs	r1, #5
 80022da:	2027      	movs	r0, #39	@ 0x27
 80022dc:	f000 fa45 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022e0:	2027      	movs	r0, #39	@ 0x27
 80022e2:	f000 fa5e 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	37c0      	adds	r7, #192	@ 0xc0
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40004400 	.word	0x40004400
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	20000478 	.word	0x20000478
 8002300:	40026088 	.word	0x40026088
 8002304:	200004d8 	.word	0x200004d8
 8002308:	400260a0 	.word	0x400260a0
 800230c:	40004800 	.word	0x40004800

08002310 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002314:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002316:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800231a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800231e:	2206      	movs	r2, #6
 8002320:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002324:	2202      	movs	r2, #2
 8002326:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002328:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800232e:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002330:	2202      	movs	r2, #2
 8002332:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002336:	2201      	movs	r2, #1
 8002338:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800233c:	2200      	movs	r2, #0
 800233e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002340:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002342:	2200      	movs	r2, #0
 8002344:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002346:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002348:	2201      	movs	r2, #1
 800234a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800234e:	2200      	movs	r2, #0
 8002350:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	@ (8002368 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002354:	f001 f84d 	bl	80033f2 <HAL_PCD_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800235e:	f7fe ff71 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000538 	.word	0x20000538

0800236c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b0ae      	sub	sp, #184	@ 0xb8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2290      	movs	r2, #144	@ 0x90
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f009 fae7 	bl	800b960 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800239a:	d159      	bne.n	8002450 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800239c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80023a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 fe8f 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80023b8:	f7fe ff44 	bl	8001244 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	4b26      	ldr	r3, [pc, #152]	@ (8002458 <HAL_PCD_MspInit+0xec>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	4a25      	ldr	r2, [pc, #148]	@ (8002458 <HAL_PCD_MspInit+0xec>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c8:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <HAL_PCD_MspInit+0xec>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80023d4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80023d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023ee:	230a      	movs	r3, #10
 80023f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4818      	ldr	r0, [pc, #96]	@ (800245c <HAL_PCD_MspInit+0xf0>)
 80023fc:	f000 fe02 	bl	8003004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002404:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002414:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002418:	4619      	mov	r1, r3
 800241a:	4810      	ldr	r0, [pc, #64]	@ (800245c <HAL_PCD_MspInit+0xf0>)
 800241c:	f000 fdf2 	bl	8003004 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002420:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <HAL_PCD_MspInit+0xec>)
 8002422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002424:	4a0c      	ldr	r2, [pc, #48]	@ (8002458 <HAL_PCD_MspInit+0xec>)
 8002426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800242a:	6353      	str	r3, [r2, #52]	@ 0x34
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_PCD_MspInit+0xec>)
 800242e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <HAL_PCD_MspInit+0xec>)
 800243a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243c:	4a06      	ldr	r2, [pc, #24]	@ (8002458 <HAL_PCD_MspInit+0xec>)
 800243e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002442:	6453      	str	r3, [r2, #68]	@ 0x44
 8002444:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <HAL_PCD_MspInit+0xec>)
 8002446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002450:	bf00      	nop
 8002452:	37b8      	adds	r7, #184	@ 0xb8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40020000 	.word	0x40020000

08002460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002498 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002464:	f7ff f8b8 	bl	80015d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002468:	480c      	ldr	r0, [pc, #48]	@ (800249c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800246a:	490d      	ldr	r1, [pc, #52]	@ (80024a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002470:	e002      	b.n	8002478 <LoopCopyDataInit>

08002472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002476:	3304      	adds	r3, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800247c:	d3f9      	bcc.n	8002472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002480:	4c0a      	ldr	r4, [pc, #40]	@ (80024ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002484:	e001      	b.n	800248a <LoopFillZerobss>

08002486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002488:	3204      	adds	r2, #4

0800248a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800248c:	d3fb      	bcc.n	8002486 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800248e:	f009 fb13 	bl	800bab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002492:	f7fe fd87 	bl	8000fa4 <main>
  bx  lr    
 8002496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002498:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80024a4:	0800ccd0 	.word	0x0800ccd0
  ldr r2, =_sbss
 80024a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80024ac:	200054b0 	.word	0x200054b0

080024b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC_IRQHandler>

080024b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b6:	2003      	movs	r0, #3
 80024b8:	f000 f94c 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024bc:	200f      	movs	r0, #15
 80024be:	f000 f805 	bl	80024cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c2:	f7fe fec5 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d4:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_InitTick+0x54>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_InitTick+0x58>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f967 	bl	80027be <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 f92f 	bl	800276a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4a06      	ldr	r2, [pc, #24]	@ (8002528 <HAL_InitTick+0x5c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000000 	.word	0x20000000
 8002524:	20000008 	.word	0x20000008
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000008 	.word	0x20000008
 8002550:	20000a18 	.word	0x20000a18

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	@ (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000a18 	.word	0x20000a18

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d005      	beq.n	8002592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_Delay+0x44>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002592:	bf00      	nop
 8002594:	f7ff ffde 	bl	8002554 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f7      	bhi.n	8002594 <HAL_Delay+0x28>
  {
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000008 	.word	0x20000008

080025b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <__NVIC_SetPriorityGrouping+0x40>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025d0:	4013      	ands	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e2:	4a04      	ldr	r2, [pc, #16]	@ (80025f4 <__NVIC_SetPriorityGrouping+0x40>)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00
 80025f8:	05fa0000 	.word	0x05fa0000

080025fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002600:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <__NVIC_GetPriorityGrouping+0x18>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0307 	and.w	r3, r3, #7
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0b      	blt.n	8002642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4907      	ldr	r1, [pc, #28]	@ (8002650 <__NVIC_EnableIRQ+0x38>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	@ (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	@ (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	@ 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
         );
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	@ 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002720:	d301      	bcc.n	8002726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2301      	movs	r3, #1
 8002724:	e00f      	b.n	8002746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002726:	4a0a      	ldr	r2, [pc, #40]	@ (8002750 <SysTick_Config+0x40>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272e:	210f      	movs	r1, #15
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f7ff ff8e 	bl	8002654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <SysTick_Config+0x40>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273e:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <SysTick_Config+0x40>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000e010 	.word	0xe000e010

08002754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff29 	bl	80025b4 <__NVIC_SetPriorityGrouping>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800277c:	f7ff ff3e 	bl	80025fc <__NVIC_GetPriorityGrouping>
 8002780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f7ff ff8e 	bl	80026a8 <NVIC_EncodePriority>
 800278c:	4602      	mov	r2, r0
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff5d 	bl	8002654 <__NVIC_SetPriority>
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff31 	bl	8002618 <__NVIC_EnableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ffa2 	bl	8002710 <SysTick_Config>
 80027cc:	4603      	mov	r3, r0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff feb6 	bl	8002554 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e099      	b.n	8002928 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002814:	e00f      	b.n	8002836 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002816:	f7ff fe9d 	bl	8002554 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b05      	cmp	r3, #5
 8002822:	d908      	bls.n	8002836 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2203      	movs	r2, #3
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e078      	b.n	8002928 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e8      	bne.n	8002816 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4b38      	ldr	r3, [pc, #224]	@ (8002930 <HAL_DMA_Init+0x158>)
 8002850:	4013      	ands	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	2b04      	cmp	r3, #4
 800288e:	d107      	bne.n	80028a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	4313      	orrs	r3, r2
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f023 0307 	bic.w	r3, r3, #7
 80028b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d117      	bne.n	80028fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00e      	beq.n	80028fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fb15 	bl	8002f0c <DMA_CheckFifoParam>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2240      	movs	r2, #64	@ 0x40
 80028ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028f6:	2301      	movs	r3, #1
 80028f8:	e016      	b.n	8002928 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 facc 	bl	8002ea0 <DMA_CalcBaseAndBitshift>
 8002908:	4603      	mov	r3, r0
 800290a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	223f      	movs	r2, #63	@ 0x3f
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	e010803f 	.word	0xe010803f

08002934 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_DMA_Start_IT+0x26>
 8002956:	2302      	movs	r3, #2
 8002958:	e048      	b.n	80029ec <HAL_DMA_Start_IT+0xb8>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d137      	bne.n	80029de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2202      	movs	r2, #2
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fa5e 	bl	8002e44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	223f      	movs	r2, #63	@ 0x3f
 800298e:	409a      	lsls	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0216 	orr.w	r2, r2, #22
 80029a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0208 	orr.w	r2, r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e005      	b.n	80029ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a02:	f7ff fda7 	bl	8002554 <HAL_GetTick>
 8002a06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d008      	beq.n	8002a26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2280      	movs	r2, #128	@ 0x80
 8002a18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e052      	b.n	8002acc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0216 	bic.w	r2, r2, #22
 8002a34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <HAL_DMA_Abort+0x62>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0208 	bic.w	r2, r2, #8
 8002a64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a76:	e013      	b.n	8002aa0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a78:	f7ff fd6c 	bl	8002554 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b05      	cmp	r3, #5
 8002a84:	d90c      	bls.n	8002aa0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e015      	b.n	8002acc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e4      	bne.n	8002a78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab2:	223f      	movs	r2, #63	@ 0x3f
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d004      	beq.n	8002af2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2280      	movs	r2, #128	@ 0x80
 8002aec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00c      	b.n	8002b0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2205      	movs	r2, #5
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b24:	4b8e      	ldr	r3, [pc, #568]	@ (8002d60 <HAL_DMA_IRQHandler+0x248>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a8e      	ldr	r2, [pc, #568]	@ (8002d64 <HAL_DMA_IRQHandler+0x24c>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0a9b      	lsrs	r3, r3, #10
 8002b30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	2208      	movs	r2, #8
 8002b44:	409a      	lsls	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01a      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0204 	bic.w	r2, r2, #4
 8002b6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	2208      	movs	r2, #8
 8002b72:	409a      	lsls	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b88:	2201      	movs	r2, #1
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d012      	beq.n	8002bba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb2:	f043 0202 	orr.w	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d012      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bdc:	2204      	movs	r2, #4
 8002bde:	409a      	lsls	r2, r3
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	f043 0204 	orr.w	r2, r3, #4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d043      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d03c      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c12:	2210      	movs	r2, #16
 8002c14:	409a      	lsls	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d108      	bne.n	8002c48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d024      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
 8002c46:	e01f      	b.n	8002c88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4798      	blx	r3
 8002c58:	e016      	b.n	8002c88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0208 	bic.w	r2, r2, #8
 8002c76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 808f 	beq.w	8002db8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8087 	beq.w	8002db8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cae:	2220      	movs	r2, #32
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d136      	bne.n	8002d30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0216 	bic.w	r2, r2, #22
 8002cd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ce0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d103      	bne.n	8002cf2 <HAL_DMA_IRQHandler+0x1da>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0208 	bic.w	r2, r2, #8
 8002d00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d06:	223f      	movs	r2, #63	@ 0x3f
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d07e      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
        }
        return;
 8002d2e:	e079      	b.n	8002e24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01d      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10d      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d031      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e02c      	b.n	8002db8 <HAL_DMA_IRQHandler+0x2a0>
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000
 8002d64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d023      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
 8002d78:	e01e      	b.n	8002db8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10f      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0210 	bic.w	r2, r2, #16
 8002d96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d032      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d022      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2205      	movs	r2, #5
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	3301      	adds	r3, #1
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d307      	bcc.n	8002e00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f2      	bne.n	8002de4 <HAL_DMA_IRQHandler+0x2cc>
 8002dfe:	e000      	b.n	8002e02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
 8002e22:	e000      	b.n	8002e26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e24:	bf00      	nop
    }
  }
}
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b40      	cmp	r3, #64	@ 0x40
 8002e70:	d108      	bne.n	8002e84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e82:	e007      	b.n	8002e94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	60da      	str	r2, [r3, #12]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	3b10      	subs	r3, #16
 8002eb0:	4a13      	ldr	r2, [pc, #76]	@ (8002f00 <DMA_CalcBaseAndBitshift+0x60>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eba:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <DMA_CalcBaseAndBitshift+0x64>)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d908      	bls.n	8002ee0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <DMA_CalcBaseAndBitshift+0x68>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	1d1a      	adds	r2, r3, #4
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ede:	e006      	b.n	8002eee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <DMA_CalcBaseAndBitshift+0x68>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	aaaaaaab 	.word	0xaaaaaaab
 8002f04:	0800cad8 	.word	0x0800cad8
 8002f08:	fffffc00 	.word	0xfffffc00

08002f0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11f      	bne.n	8002f66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d856      	bhi.n	8002fda <DMA_CheckFifoParam+0xce>
 8002f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <DMA_CheckFifoParam+0x28>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08002f57 	.word	0x08002f57
 8002f3c:	08002f45 	.word	0x08002f45
 8002f40:	08002fdb 	.word	0x08002fdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d046      	beq.n	8002fde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f54:	e043      	b.n	8002fde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f5e:	d140      	bne.n	8002fe2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f64:	e03d      	b.n	8002fe2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f6e:	d121      	bne.n	8002fb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d837      	bhi.n	8002fe6 <DMA_CheckFifoParam+0xda>
 8002f76:	a201      	add	r2, pc, #4	@ (adr r2, 8002f7c <DMA_CheckFifoParam+0x70>)
 8002f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002f93 	.word	0x08002f93
 8002f84:	08002f8d 	.word	0x08002f8d
 8002f88:	08002fa5 	.word	0x08002fa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f90:	e030      	b.n	8002ff4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d025      	beq.n	8002fea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa2:	e022      	b.n	8002fea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fac:	d11f      	bne.n	8002fee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fb2:	e01c      	b.n	8002fee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d903      	bls.n	8002fc2 <DMA_CheckFifoParam+0xb6>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d003      	beq.n	8002fc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fc0:	e018      	b.n	8002ff4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc6:	e015      	b.n	8002ff4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd8:	e00b      	b.n	8002ff2 <DMA_CheckFifoParam+0xe6>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e00a      	b.n	8002ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e008      	b.n	8002ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e006      	b.n	8002ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e004      	b.n	8002ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
 8002fec:	e002      	b.n	8002ff4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop

08003004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e175      	b.n	8003310 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003024:	2201      	movs	r2, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	f040 8164 	bne.w	800330a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d005      	beq.n	800305a <HAL_GPIO_Init+0x56>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d130      	bne.n	80030bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003090:	2201      	movs	r2, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 0201 	and.w	r2, r3, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d017      	beq.n	80030f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d123      	bne.n	800314c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	08da      	lsrs	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3208      	adds	r2, #8
 800310c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	08da      	lsrs	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3208      	adds	r2, #8
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80be 	beq.w	800330a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	4b66      	ldr	r3, [pc, #408]	@ (8003328 <HAL_GPIO_Init+0x324>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	4a65      	ldr	r2, [pc, #404]	@ (8003328 <HAL_GPIO_Init+0x324>)
 8003194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003198:	6453      	str	r3, [r2, #68]	@ 0x44
 800319a:	4b63      	ldr	r3, [pc, #396]	@ (8003328 <HAL_GPIO_Init+0x324>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031a6:	4a61      	ldr	r2, [pc, #388]	@ (800332c <HAL_GPIO_Init+0x328>)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3302      	adds	r3, #2
 80031ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	220f      	movs	r2, #15
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a58      	ldr	r2, [pc, #352]	@ (8003330 <HAL_GPIO_Init+0x32c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d037      	beq.n	8003242 <HAL_GPIO_Init+0x23e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a57      	ldr	r2, [pc, #348]	@ (8003334 <HAL_GPIO_Init+0x330>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_GPIO_Init+0x23a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a56      	ldr	r2, [pc, #344]	@ (8003338 <HAL_GPIO_Init+0x334>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02b      	beq.n	800323a <HAL_GPIO_Init+0x236>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a55      	ldr	r2, [pc, #340]	@ (800333c <HAL_GPIO_Init+0x338>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d025      	beq.n	8003236 <HAL_GPIO_Init+0x232>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a54      	ldr	r2, [pc, #336]	@ (8003340 <HAL_GPIO_Init+0x33c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <HAL_GPIO_Init+0x22e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a53      	ldr	r2, [pc, #332]	@ (8003344 <HAL_GPIO_Init+0x340>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x22a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a52      	ldr	r2, [pc, #328]	@ (8003348 <HAL_GPIO_Init+0x344>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x226>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a51      	ldr	r2, [pc, #324]	@ (800334c <HAL_GPIO_Init+0x348>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x222>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a50      	ldr	r2, [pc, #320]	@ (8003350 <HAL_GPIO_Init+0x34c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x21e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4f      	ldr	r2, [pc, #316]	@ (8003354 <HAL_GPIO_Init+0x350>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x21a>
 800321a:	2309      	movs	r3, #9
 800321c:	e012      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800321e:	230a      	movs	r3, #10
 8003220:	e010      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003222:	2308      	movs	r3, #8
 8003224:	e00e      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003226:	2307      	movs	r3, #7
 8003228:	e00c      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800322a:	2306      	movs	r3, #6
 800322c:	e00a      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800322e:	2305      	movs	r3, #5
 8003230:	e008      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003232:	2304      	movs	r3, #4
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003236:	2303      	movs	r3, #3
 8003238:	e004      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800323a:	2302      	movs	r3, #2
 800323c:	e002      	b.n	8003244 <HAL_GPIO_Init+0x240>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_GPIO_Init+0x240>
 8003242:	2300      	movs	r3, #0
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	f002 0203 	and.w	r2, r2, #3
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	4093      	lsls	r3, r2
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003254:	4935      	ldr	r1, [pc, #212]	@ (800332c <HAL_GPIO_Init+0x328>)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	3302      	adds	r3, #2
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003262:	4b3d      	ldr	r3, [pc, #244]	@ (8003358 <HAL_GPIO_Init+0x354>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003286:	4a34      	ldr	r2, [pc, #208]	@ (8003358 <HAL_GPIO_Init+0x354>)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800328c:	4b32      	ldr	r3, [pc, #200]	@ (8003358 <HAL_GPIO_Init+0x354>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b0:	4a29      	ldr	r2, [pc, #164]	@ (8003358 <HAL_GPIO_Init+0x354>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032b6:	4b28      	ldr	r3, [pc, #160]	@ (8003358 <HAL_GPIO_Init+0x354>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032da:	4a1f      	ldr	r2, [pc, #124]	@ (8003358 <HAL_GPIO_Init+0x354>)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <HAL_GPIO_Init+0x354>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003304:	4a14      	ldr	r2, [pc, #80]	@ (8003358 <HAL_GPIO_Init+0x354>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b0f      	cmp	r3, #15
 8003314:	f67f ae86 	bls.w	8003024 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3724      	adds	r7, #36	@ 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40013800 	.word	0x40013800
 8003330:	40020000 	.word	0x40020000
 8003334:	40020400 	.word	0x40020400
 8003338:	40020800 	.word	0x40020800
 800333c:	40020c00 	.word	0x40020c00
 8003340:	40021000 	.word	0x40021000
 8003344:	40021400 	.word	0x40021400
 8003348:	40021800 	.word	0x40021800
 800334c:	40021c00 	.word	0x40021c00
 8003350:	40022000 	.word	0x40022000
 8003354:	40022400 	.word	0x40022400
 8003358:	40013c00 	.word	0x40013c00

0800335c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	e001      	b.n	800337e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033a8:	e003      	b.n	80033b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033aa:	887b      	ldrh	r3, [r7, #2]
 80033ac:	041a      	lsls	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	619a      	str	r2, [r3, #24]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033d0:	887a      	ldrh	r2, [r7, #2]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4013      	ands	r3, r2
 80033d6:	041a      	lsls	r2, r3, #16
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43d9      	mvns	r1, r3
 80033dc:	887b      	ldrh	r3, [r7, #2]
 80033de:	400b      	ands	r3, r1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	619a      	str	r2, [r3, #24]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af02      	add	r7, sp, #8
 80033f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e108      	b.n	8003616 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe ffa4 	bl	800236c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003432:	d102      	bne.n	800343a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f004 f996 	bl	8007770 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7c1a      	ldrb	r2, [r3, #16]
 800344c:	f88d 2000 	strb.w	r2, [sp]
 8003450:	3304      	adds	r3, #4
 8003452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003454:	f004 f932 	bl	80076bc <USB_CoreInit>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0d5      	b.n	8003616 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f004 f98e 	bl	8007792 <USB_SetCurrentMode>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0c6      	b.n	8003616 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	e04a      	b.n	8003524 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	3315      	adds	r3, #21
 800349e:	2201      	movs	r2, #1
 80034a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3314      	adds	r3, #20
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	b298      	uxth	r0, r3
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	332e      	adds	r3, #46	@ 0x2e
 80034ca:	4602      	mov	r2, r0
 80034cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3318      	adds	r3, #24
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	331c      	adds	r3, #28
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	3320      	adds	r3, #32
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3324      	adds	r3, #36	@ 0x24
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	3301      	adds	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	791b      	ldrb	r3, [r3, #4]
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	429a      	cmp	r2, r3
 800352c:	d3af      	bcc.n	800348e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	e044      	b.n	80035be <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	3301      	adds	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	791b      	ldrb	r3, [r3, #4]
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d3b5      	bcc.n	8003534 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7c1a      	ldrb	r2, [r3, #16]
 80035d0:	f88d 2000 	strb.w	r2, [sp]
 80035d4:	3304      	adds	r3, #4
 80035d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d8:	f004 f928 	bl	800782c <USB_DevInit>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e013      	b.n	8003616 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7b1b      	ldrb	r3, [r3, #12]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d102      	bne.n	800360a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f80b 	bl	8003620 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f004 fae3 	bl	8007bda <USB_DevDisconnect>

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800364e:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_PCDEx_ActivateLPM+0x44>)
 8003650:	4313      	orrs	r3, r2
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	10000003 	.word	0x10000003

08003668 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a04      	ldr	r2, [pc, #16]	@ (8003684 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003676:	6013      	str	r3, [r2, #0]
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40007000 	.word	0x40007000

08003688 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	4b23      	ldr	r3, [pc, #140]	@ (8003720 <HAL_PWREx_EnableOverDrive+0x98>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	4a22      	ldr	r2, [pc, #136]	@ (8003720 <HAL_PWREx_EnableOverDrive+0x98>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800369c:	6413      	str	r3, [r2, #64]	@ 0x40
 800369e:	4b20      	ldr	r3, [pc, #128]	@ (8003720 <HAL_PWREx_EnableOverDrive+0x98>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b6:	f7fe ff4d 	bl	8002554 <HAL_GetTick>
 80036ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036bc:	e009      	b.n	80036d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036be:	f7fe ff49 	bl	8002554 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036cc:	d901      	bls.n	80036d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e022      	b.n	8003718 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036d2:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036de:	d1ee      	bne.n	80036be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036e0:	4b10      	ldr	r3, [pc, #64]	@ (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ec:	f7fe ff32 	bl	8002554 <HAL_GetTick>
 80036f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036f2:	e009      	b.n	8003708 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036f4:	f7fe ff2e 	bl	8002554 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003702:	d901      	bls.n	8003708 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e007      	b.n	8003718 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003708:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_PWREx_EnableOverDrive+0x9c>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003714:	d1ee      	bne.n	80036f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000

08003728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e29b      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8087 	beq.w	800385a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800374c:	4b96      	ldr	r3, [pc, #600]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b04      	cmp	r3, #4
 8003756:	d00c      	beq.n	8003772 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003758:	4b93      	ldr	r3, [pc, #588]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d112      	bne.n	800378a <HAL_RCC_OscConfig+0x62>
 8003764:	4b90      	ldr	r3, [pc, #576]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003770:	d10b      	bne.n	800378a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003772:	4b8d      	ldr	r3, [pc, #564]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d06c      	beq.n	8003858 <HAL_RCC_OscConfig+0x130>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d168      	bne.n	8003858 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e275      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x7a>
 8003794:	4b84      	ldr	r3, [pc, #528]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a83      	ldr	r2, [pc, #524]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 800379a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e02e      	b.n	8003800 <HAL_RCC_OscConfig+0xd8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x9c>
 80037aa:	4b7f      	ldr	r3, [pc, #508]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a7e      	ldr	r2, [pc, #504]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b7c      	ldr	r3, [pc, #496]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a7b      	ldr	r2, [pc, #492]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e01d      	b.n	8003800 <HAL_RCC_OscConfig+0xd8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0xc0>
 80037ce:	4b76      	ldr	r3, [pc, #472]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a75      	ldr	r2, [pc, #468]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b73      	ldr	r3, [pc, #460]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a72      	ldr	r2, [pc, #456]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0xd8>
 80037e8:	4b6f      	ldr	r3, [pc, #444]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a6e      	ldr	r2, [pc, #440]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b6c      	ldr	r3, [pc, #432]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6b      	ldr	r2, [pc, #428]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80037fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe fea4 	bl	8002554 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7fe fea0 	bl	8002554 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	@ 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e229      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b61      	ldr	r3, [pc, #388]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0xe8>
 800382e:	e014      	b.n	800385a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe fe90 	bl	8002554 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7fe fe8c 	bl	8002554 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	@ 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e215      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384a:	4b57      	ldr	r3, [pc, #348]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x110>
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d069      	beq.n	800393a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003866:	4b50      	ldr	r3, [pc, #320]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003872:	4b4d      	ldr	r3, [pc, #308]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b08      	cmp	r3, #8
 800387c:	d11c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x190>
 800387e:	4b4a      	ldr	r3, [pc, #296]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d116      	bne.n	80038b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388a:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_RCC_OscConfig+0x17a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e1e9      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a2:	4b41      	ldr	r3, [pc, #260]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	493d      	ldr	r1, [pc, #244]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b6:	e040      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d023      	beq.n	8003908 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c0:	4b39      	ldr	r3, [pc, #228]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a38      	ldr	r2, [pc, #224]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe fe42 	bl	8002554 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d4:	f7fe fe3e 	bl	8002554 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1c7      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	4b30      	ldr	r3, [pc, #192]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f2:	4b2d      	ldr	r3, [pc, #180]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4929      	ldr	r1, [pc, #164]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]
 8003906:	e018      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003908:	4b27      	ldr	r3, [pc, #156]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a26      	ldr	r2, [pc, #152]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fe fe1e 	bl	8002554 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391c:	f7fe fe1a 	bl	8002554 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1a3      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392e:	4b1e      	ldr	r3, [pc, #120]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d038      	beq.n	80039b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d019      	beq.n	8003982 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394e:	4b16      	ldr	r3, [pc, #88]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003952:	4a15      	ldr	r2, [pc, #84]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fe fdfb 	bl	8002554 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003962:	f7fe fdf7 	bl	8002554 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e180      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003974:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x23a>
 8003980:	e01a      	b.n	80039b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003982:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003986:	4a08      	ldr	r2, [pc, #32]	@ (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe fde1 	bl	8002554 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fe fddd 	bl	8002554 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d903      	bls.n	80039ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e166      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
 80039a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b92      	ldr	r3, [pc, #584]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ee      	bne.n	8003996 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80a4 	beq.w	8003b0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c6:	4b8c      	ldr	r3, [pc, #560]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	4b89      	ldr	r3, [pc, #548]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	4a88      	ldr	r2, [pc, #544]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80039de:	4b86      	ldr	r3, [pc, #536]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ee:	4b83      	ldr	r3, [pc, #524]	@ (8003bfc <HAL_RCC_OscConfig+0x4d4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039fa:	4b80      	ldr	r3, [pc, #512]	@ (8003bfc <HAL_RCC_OscConfig+0x4d4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a7f      	ldr	r2, [pc, #508]	@ (8003bfc <HAL_RCC_OscConfig+0x4d4>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a06:	f7fe fda5 	bl	8002554 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7fe fda1 	bl	8002554 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	@ 0x64
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e12a      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a20:	4b76      	ldr	r3, [pc, #472]	@ (8003bfc <HAL_RCC_OscConfig+0x4d4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x31a>
 8003a34:	4b70      	ldr	r3, [pc, #448]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a38:	4a6f      	ldr	r2, [pc, #444]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a40:	e02d      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x33c>
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	4a6a      	ldr	r2, [pc, #424]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a56:	4b68      	ldr	r3, [pc, #416]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	4a67      	ldr	r2, [pc, #412]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a62:	e01c      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCC_OscConfig+0x35e>
 8003a6c:	4b62      	ldr	r3, [pc, #392]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a70:	4a61      	ldr	r2, [pc, #388]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a72:	f043 0304 	orr.w	r3, r3, #4
 8003a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a78:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a84:	e00b      	b.n	8003a9e <HAL_RCC_OscConfig+0x376>
 8003a86:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a92:	4b59      	ldr	r3, [pc, #356]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	4a58      	ldr	r2, [pc, #352]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003a98:	f023 0304 	bic.w	r3, r3, #4
 8003a9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d015      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa6:	f7fe fd55 	bl	8002554 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fe fd51 	bl	8002554 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0d8      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ee      	beq.n	8003aae <HAL_RCC_OscConfig+0x386>
 8003ad0:	e014      	b.n	8003afc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fe fd3f 	bl	8002554 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fe fd3b 	bl	8002554 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0c2      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af0:	4b41      	ldr	r3, [pc, #260]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ee      	bne.n	8003ada <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d105      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a3c      	ldr	r2, [pc, #240]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80ae 	beq.w	8003c74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b18:	4b37      	ldr	r3, [pc, #220]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d06d      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d14b      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2c:	4b32      	ldr	r3, [pc, #200]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a31      	ldr	r2, [pc, #196]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe fd0c 	bl	8002554 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe fd08 	bl	8002554 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e091      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	3b01      	subs	r3, #1
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	491b      	ldr	r1, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a18      	ldr	r2, [pc, #96]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fcda 	bl	8002554 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fe fcd6 	bl	8002554 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e05f      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x47c>
 8003bc2:	e057      	b.n	8003c74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fcc0 	bl	8002554 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe fcbc 	bl	8002554 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e045      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	4b03      	ldr	r3, [pc, #12]	@ (8003bf8 <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4b0>
 8003bf6:	e03d      	b.n	8003c74 <HAL_RCC_OscConfig+0x54c>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c00:	4b1f      	ldr	r3, [pc, #124]	@ (8003c80 <HAL_RCC_OscConfig+0x558>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d030      	beq.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d129      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d122      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c30:	4013      	ands	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d119      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d10f      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d107      	bne.n	8003c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0d0      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d910      	bls.n	8003ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b67      	ldr	r3, [pc, #412]	@ (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 020f 	bic.w	r2, r3, #15
 8003cb2:	4965      	ldr	r1, [pc, #404]	@ (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b63      	ldr	r3, [pc, #396]	@ (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0b8      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d020      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce4:	4b59      	ldr	r3, [pc, #356]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a58      	ldr	r2, [pc, #352]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cfc:	4b53      	ldr	r3, [pc, #332]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4a52      	ldr	r2, [pc, #328]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d08:	4b50      	ldr	r3, [pc, #320]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	494d      	ldr	r1, [pc, #308]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d040      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d115      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e07f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d46:	4b41      	ldr	r3, [pc, #260]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e073      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d56:	4b3d      	ldr	r3, [pc, #244]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06b      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d66:	4b39      	ldr	r3, [pc, #228]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4936      	ldr	r1, [pc, #216]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d78:	f7fe fbec 	bl	8002554 <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d80:	f7fe fbe8 	bl	8002554 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e053      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	4b2d      	ldr	r3, [pc, #180]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 020c 	and.w	r2, r3, #12
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1eb      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da8:	4b27      	ldr	r3, [pc, #156]	@ (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d210      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 020f 	bic.w	r2, r3, #15
 8003dbe:	4922      	ldr	r1, [pc, #136]	@ (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b20      	ldr	r3, [pc, #128]	@ (8003e48 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e032      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de4:	4b19      	ldr	r3, [pc, #100]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4916      	ldr	r1, [pc, #88]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e02:	4b12      	ldr	r3, [pc, #72]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	490e      	ldr	r1, [pc, #56]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e16:	f000 f821 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_RCC_ClockConfig+0x1c8>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	490a      	ldr	r1, [pc, #40]	@ (8003e50 <HAL_RCC_ClockConfig+0x1cc>)
 8003e28:	5ccb      	ldrb	r3, [r1, r3]
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	4a09      	ldr	r2, [pc, #36]	@ (8003e54 <HAL_RCC_ClockConfig+0x1d0>)
 8003e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e32:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <HAL_RCC_ClockConfig+0x1d4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fb48 	bl	80024cc <HAL_InitTick>

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023c00 	.word	0x40023c00
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	0800cac0 	.word	0x0800cac0
 8003e54:	20000000 	.word	0x20000000
 8003e58:	20000004 	.word	0x20000004

08003e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e60:	b094      	sub	sp, #80	@ 0x50
 8003e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e68:	2300      	movs	r3, #0
 8003e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e74:	4b79      	ldr	r3, [pc, #484]	@ (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d00d      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x40>
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	f200 80e1 	bhi.w	8004048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x34>
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e8e:	e0db      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e90:	4b73      	ldr	r3, [pc, #460]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e94:	e0db      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e96:	4b73      	ldr	r3, [pc, #460]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e9a:	e0d8      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ea4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	2200      	movs	r2, #0
 8003eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	0159      	lsls	r1, r3, #5
 8003edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee0:	0150      	lsls	r0, r2, #5
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	1a51      	subs	r1, r2, r1
 8003eea:	6139      	str	r1, [r7, #16]
 8003eec:	4629      	mov	r1, r5
 8003eee:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f00:	4659      	mov	r1, fp
 8003f02:	018b      	lsls	r3, r1, #6
 8003f04:	4651      	mov	r1, sl
 8003f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	018a      	lsls	r2, r1, #6
 8003f0e:	4651      	mov	r1, sl
 8003f10:	ebb2 0801 	subs.w	r8, r2, r1
 8003f14:	4659      	mov	r1, fp
 8003f16:	eb63 0901 	sbc.w	r9, r3, r1
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f2e:	4690      	mov	r8, r2
 8003f30:	4699      	mov	r9, r3
 8003f32:	4623      	mov	r3, r4
 8003f34:	eb18 0303 	adds.w	r3, r8, r3
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	462b      	mov	r3, r5
 8003f3c:	eb49 0303 	adc.w	r3, r9, r3
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f4e:	4629      	mov	r1, r5
 8003f50:	024b      	lsls	r3, r1, #9
 8003f52:	4621      	mov	r1, r4
 8003f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f58:	4621      	mov	r1, r4
 8003f5a:	024a      	lsls	r2, r1, #9
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f62:	2200      	movs	r2, #0
 8003f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f6c:	f7fc f9d0 	bl	8000310 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4613      	mov	r3, r2
 8003f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f78:	e058      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7a:	4b38      	ldr	r3, [pc, #224]	@ (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	2200      	movs	r2, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	4611      	mov	r1, r2
 8003f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f8a:	623b      	str	r3, [r7, #32]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	f04f 0000 	mov.w	r0, #0
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	0159      	lsls	r1, r3, #5
 8003fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa6:	0150      	lsls	r0, r2, #5
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4641      	mov	r1, r8
 8003fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8003fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	00eb      	lsls	r3, r5, #3
 8003fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe2:	00e2      	lsls	r2, r4, #3
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	4643      	mov	r3, r8
 8003fea:	18e3      	adds	r3, r4, r3
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	464b      	mov	r3, r9
 8003ff0:	eb45 0303 	adc.w	r3, r5, r3
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004002:	4629      	mov	r1, r5
 8004004:	028b      	lsls	r3, r1, #10
 8004006:	4621      	mov	r1, r4
 8004008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800400c:	4621      	mov	r1, r4
 800400e:	028a      	lsls	r2, r1, #10
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004016:	2200      	movs	r2, #0
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	61fa      	str	r2, [r7, #28]
 800401c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004020:	f7fc f976 	bl	8000310 <__aeabi_uldivmod>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4613      	mov	r3, r2
 800402a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800402c:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <HAL_RCC_GetSysClockFreq+0x200>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	3301      	adds	r3, #1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800403c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800403e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004046:	e002      	b.n	800404e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004048:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x204>)
 800404a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800404c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004050:	4618      	mov	r0, r3
 8004052:	3750      	adds	r7, #80	@ 0x50
 8004054:	46bd      	mov	sp, r7
 8004056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	00f42400 	.word	0x00f42400
 8004064:	007a1200 	.word	0x007a1200

08004068 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b03      	ldr	r3, [pc, #12]	@ (800407c <HAL_RCC_GetHCLKFreq+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000000 	.word	0x20000000

08004080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004084:	f7ff fff0 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	@ (80040a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0a9b      	lsrs	r3, r3, #10
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4903      	ldr	r1, [pc, #12]	@ (80040a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	0800cad0 	.word	0x0800cad0

080040a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ac:	f7ff ffdc 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0b5b      	lsrs	r3, r3, #13
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	@ (80040cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	0800cad0 	.word	0x0800cad0

080040d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d012      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040f8:	4b69      	ldr	r3, [pc, #420]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a68      	ldr	r2, [pc, #416]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004102:	6093      	str	r3, [r2, #8]
 8004104:	4b66      	ldr	r3, [pc, #408]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410c:	4964      	ldr	r1, [pc, #400]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800411a:	2301      	movs	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d017      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800412a:	4b5d      	ldr	r3, [pc, #372]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004130:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004138:	4959      	ldr	r1, [pc, #356]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004148:	d101      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800414a:	2301      	movs	r3, #1
 800414c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004156:	2301      	movs	r3, #1
 8004158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d017      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004166:	4b4e      	ldr	r3, [pc, #312]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800416c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	494a      	ldr	r1, [pc, #296]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004184:	d101      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004192:	2301      	movs	r3, #1
 8004194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041a2:	2301      	movs	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 808b 	beq.w	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041b4:	4b3a      	ldr	r3, [pc, #232]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	4a39      	ldr	r2, [pc, #228]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041be:	6413      	str	r3, [r2, #64]	@ 0x40
 80041c0:	4b37      	ldr	r3, [pc, #220]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041cc:	4b35      	ldr	r3, [pc, #212]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a34      	ldr	r2, [pc, #208]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d8:	f7fe f9bc 	bl	8002554 <HAL_GetTick>
 80041dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e0:	f7fe f9b8 	bl	8002554 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	@ 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e38f      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041f2:	4b2c      	ldr	r3, [pc, #176]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041fe:	4b28      	ldr	r3, [pc, #160]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004206:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d035      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d02e      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800421c:	4b20      	ldr	r3, [pc, #128]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004224:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004226:	4b1e      	ldr	r3, [pc, #120]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422a:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004230:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004232:	4b1b      	ldr	r3, [pc, #108]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004236:	4a1a      	ldr	r2, [pc, #104]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800423e:	4a18      	ldr	r2, [pc, #96]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004244:	4b16      	ldr	r3, [pc, #88]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d114      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fe f980 	bl	8002554 <HAL_GetTick>
 8004254:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004256:	e00a      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004258:	f7fe f97c 	bl	8002554 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e351      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426e:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ee      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004286:	d111      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004288:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004294:	4b04      	ldr	r3, [pc, #16]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004296:	400b      	ands	r3, r1
 8004298:	4901      	ldr	r1, [pc, #4]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
 800429e:	e00b      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40007000 	.word	0x40007000
 80042a8:	0ffffcff 	.word	0x0ffffcff
 80042ac:	4bac      	ldr	r3, [pc, #688]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4aab      	ldr	r2, [pc, #684]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80042b6:	6093      	str	r3, [r2, #8]
 80042b8:	4ba9      	ldr	r3, [pc, #676]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c4:	49a6      	ldr	r1, [pc, #664]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d010      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042d6:	4ba2      	ldr	r3, [pc, #648]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042dc:	4aa0      	ldr	r2, [pc, #640]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80042e6:	4b9e      	ldr	r3, [pc, #632]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	499b      	ldr	r1, [pc, #620]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004304:	4b96      	ldr	r3, [pc, #600]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004312:	4993      	ldr	r1, [pc, #588]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004326:	4b8e      	ldr	r3, [pc, #568]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004334:	498a      	ldr	r1, [pc, #552]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004348:	4b85      	ldr	r3, [pc, #532]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004356:	4982      	ldr	r1, [pc, #520]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800436a:	4b7d      	ldr	r3, [pc, #500]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004370:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004378:	4979      	ldr	r1, [pc, #484]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800438c:	4b74      	ldr	r3, [pc, #464]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439a:	4971      	ldr	r1, [pc, #452]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b4:	f023 020c 	bic.w	r2, r3, #12
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043bc:	4968      	ldr	r1, [pc, #416]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043d0:	4b63      	ldr	r3, [pc, #396]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043de:	4960      	ldr	r1, [pc, #384]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004400:	4957      	ldr	r1, [pc, #348]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004414:	4b52      	ldr	r3, [pc, #328]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	494f      	ldr	r1, [pc, #316]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004436:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004444:	4946      	ldr	r1, [pc, #280]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004458:	4b41      	ldr	r3, [pc, #260]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004466:	493e      	ldr	r1, [pc, #248]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800447a:	4b39      	ldr	r3, [pc, #228]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004480:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004488:	4935      	ldr	r1, [pc, #212]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800449c:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044aa:	492d      	ldr	r1, [pc, #180]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d011      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044be:	4b28      	ldr	r3, [pc, #160]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044cc:	4924      	ldr	r1, [pc, #144]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044dc:	d101      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044de:	2301      	movs	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044ee:	2301      	movs	r3, #1
 80044f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044fe:	4b18      	ldr	r3, [pc, #96]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004504:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450c:	4914      	ldr	r1, [pc, #80]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00b      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004520:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004526:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004530:	490b      	ldr	r1, [pc, #44]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00f      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004544:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004554:	4902      	ldr	r1, [pc, #8]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800455c:	e002      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004570:	4b8a      	ldr	r3, [pc, #552]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004576:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004580:	4986      	ldr	r1, [pc, #536]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00b      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004594:	4b81      	ldr	r3, [pc, #516]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800459a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a4:	497d      	ldr	r1, [pc, #500]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d006      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80d6 	beq.w	800476c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045c0:	4b76      	ldr	r3, [pc, #472]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a75      	ldr	r2, [pc, #468]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045cc:	f7fd ffc2 	bl	8002554 <HAL_GetTick>
 80045d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045d4:	f7fd ffbe 	bl	8002554 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	@ 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e195      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e6:	4b6d      	ldr	r3, [pc, #436]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d021      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11d      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004606:	4b65      	ldr	r3, [pc, #404]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004614:	4b61      	ldr	r3, [pc, #388]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800461a:	0e1b      	lsrs	r3, r3, #24
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	019a      	lsls	r2, r3, #6
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	041b      	lsls	r3, r3, #16
 800462c:	431a      	orrs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	071b      	lsls	r3, r3, #28
 800463a:	4958      	ldr	r1, [pc, #352]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02e      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800466c:	d129      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800466e:	4b4b      	ldr	r3, [pc, #300]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800467c:	4b47      	ldr	r3, [pc, #284]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004682:	0f1b      	lsrs	r3, r3, #28
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	019a      	lsls	r2, r3, #6
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	061b      	lsls	r3, r3, #24
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	071b      	lsls	r3, r3, #28
 80046a2:	493e      	ldr	r1, [pc, #248]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046aa:	4b3c      	ldr	r3, [pc, #240]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b0:	f023 021f 	bic.w	r2, r3, #31
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	3b01      	subs	r3, #1
 80046ba:	4938      	ldr	r1, [pc, #224]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01d      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046ce:	4b33      	ldr	r3, [pc, #204]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046dc:	4b2f      	ldr	r3, [pc, #188]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e2:	0f1b      	lsrs	r3, r3, #28
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	019a      	lsls	r2, r3, #6
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	431a      	orrs	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	071b      	lsls	r3, r3, #28
 8004702:	4926      	ldr	r1, [pc, #152]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d011      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	019a      	lsls	r2, r3, #6
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	071b      	lsls	r3, r3, #28
 8004732:	491a      	ldr	r1, [pc, #104]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800473a:	4b18      	ldr	r3, [pc, #96]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a17      	ldr	r2, [pc, #92]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004740:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004746:	f7fd ff05 	bl	8002554 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800474e:	f7fd ff01 	bl	8002554 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b64      	cmp	r3, #100	@ 0x64
 800475a:	d901      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e0d8      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004760:	4b0e      	ldr	r3, [pc, #56]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b01      	cmp	r3, #1
 8004770:	f040 80ce 	bne.w	8004910 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004774:	4b09      	ldr	r3, [pc, #36]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a08      	ldr	r2, [pc, #32]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800477e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fd fee8 	bl	8002554 <HAL_GetTick>
 8004784:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004786:	e00b      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004788:	f7fd fee4 	bl	8002554 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	@ 0x64
 8004794:	d904      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e0bb      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047a0:	4b5e      	ldr	r3, [pc, #376]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047ac:	d0ec      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d02e      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d12a      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047d6:	4b51      	ldr	r3, [pc, #324]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047e4:	4b4d      	ldr	r3, [pc, #308]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ea:	0f1b      	lsrs	r3, r3, #28
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	019a      	lsls	r2, r3, #6
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	071b      	lsls	r3, r3, #28
 800480a:	4944      	ldr	r1, [pc, #272]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004812:	4b42      	ldr	r3, [pc, #264]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004818:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	3b01      	subs	r3, #1
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	493d      	ldr	r1, [pc, #244]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d022      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800483c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004840:	d11d      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004842:	4b36      	ldr	r3, [pc, #216]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004848:	0e1b      	lsrs	r3, r3, #24
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004850:	4b32      	ldr	r3, [pc, #200]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004856:	0f1b      	lsrs	r3, r3, #28
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	019a      	lsls	r2, r3, #6
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	041b      	lsls	r3, r3, #16
 800486a:	431a      	orrs	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	061b      	lsls	r3, r3, #24
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	071b      	lsls	r3, r3, #28
 8004876:	4929      	ldr	r1, [pc, #164]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d028      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800488a:	4b24      	ldr	r3, [pc, #144]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004898:	4b20      	ldr	r3, [pc, #128]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	0c1b      	lsrs	r3, r3, #16
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	019a      	lsls	r2, r3, #6
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	431a      	orrs	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	071b      	lsls	r3, r3, #28
 80048be:	4917      	ldr	r1, [pc, #92]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048c6:	4b15      	ldr	r3, [pc, #84]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	4911      	ldr	r1, [pc, #68]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048dc:	4b0f      	ldr	r3, [pc, #60]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a0e      	ldr	r2, [pc, #56]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e8:	f7fd fe34 	bl	8002554 <HAL_GetTick>
 80048ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048f0:	f7fd fe30 	bl	8002554 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	@ 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e007      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800490a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800490e:	d1ef      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800

08004920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e049      	b.n	80049c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fd faa6 	bl	8001e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3304      	adds	r3, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f000 fdf8 	bl	8005554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d001      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e054      	b.n	8004a92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a26      	ldr	r2, [pc, #152]	@ (8004aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d022      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a12:	d01d      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a22      	ldr	r2, [pc, #136]	@ (8004aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d018      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a21      	ldr	r2, [pc, #132]	@ (8004aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8004aac <HAL_TIM_Base_Start_IT+0xdc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_TIM_Base_Start_IT+0x80>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d115      	bne.n	8004a7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	4b19      	ldr	r3, [pc, #100]	@ (8004abc <HAL_TIM_Base_Start_IT+0xec>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b06      	cmp	r3, #6
 8004a60:	d015      	beq.n	8004a8e <HAL_TIM_Base_Start_IT+0xbe>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a68:	d011      	beq.n	8004a8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7a:	e008      	b.n	8004a8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e000      	b.n	8004a90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800
 8004aac:	40000c00 	.word	0x40000c00
 8004ab0:	40010400 	.word	0x40010400
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40001800 	.word	0x40001800
 8004abc:	00010007 	.word	0x00010007

08004ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e049      	b.n	8004b66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fd f97a 	bl	8001de0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f000 fd28 	bl	8005554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_TIM_PWM_Start+0x24>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	e03c      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d109      	bne.n	8004bae <HAL_TIM_PWM_Start+0x3e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	bf14      	ite	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	2300      	moveq	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	e02f      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d109      	bne.n	8004bc8 <HAL_TIM_PWM_Start+0x58>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	bf14      	ite	ne
 8004bc0:	2301      	movne	r3, #1
 8004bc2:	2300      	moveq	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	e022      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d109      	bne.n	8004be2 <HAL_TIM_PWM_Start+0x72>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	bf14      	ite	ne
 8004bda:	2301      	movne	r3, #1
 8004bdc:	2300      	moveq	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	e015      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d109      	bne.n	8004bfc <HAL_TIM_PWM_Start+0x8c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	bf14      	ite	ne
 8004bf4:	2301      	movne	r3, #1
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	e008      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e092      	b.n	8004d3c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_PWM_Start+0xb6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c24:	e023      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_PWM_Start+0xc6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c34:	e01b      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_PWM_Start+0xd6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c44:	e013      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	d104      	bne.n	8004c56 <HAL_TIM_PWM_Start+0xe6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c54:	e00b      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_PWM_Start+0xf6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c64:	e003      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2201      	movs	r2, #1
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 ff76 	bl	8005b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a30      	ldr	r2, [pc, #192]	@ (8004d44 <HAL_TIM_PWM_Start+0x1d4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_TIM_PWM_Start+0x120>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004d48 <HAL_TIM_PWM_Start+0x1d8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d101      	bne.n	8004c94 <HAL_TIM_PWM_Start+0x124>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_TIM_PWM_Start+0x126>
 8004c94:	2300      	movs	r3, #0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a25      	ldr	r2, [pc, #148]	@ (8004d44 <HAL_TIM_PWM_Start+0x1d4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d022      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbc:	d01d      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a22      	ldr	r2, [pc, #136]	@ (8004d4c <HAL_TIM_PWM_Start+0x1dc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d018      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a20      	ldr	r2, [pc, #128]	@ (8004d50 <HAL_TIM_PWM_Start+0x1e0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d54 <HAL_TIM_PWM_Start+0x1e4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00e      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <HAL_TIM_PWM_Start+0x1d8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1b      	ldr	r2, [pc, #108]	@ (8004d58 <HAL_TIM_PWM_Start+0x1e8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <HAL_TIM_PWM_Start+0x1ec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d115      	bne.n	8004d26 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	4b17      	ldr	r3, [pc, #92]	@ (8004d60 <HAL_TIM_PWM_Start+0x1f0>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b06      	cmp	r3, #6
 8004d0a:	d015      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1c8>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d12:	d011      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	e008      	b.n	8004d38 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e000      	b.n	8004d3a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40010400 	.word	0x40010400
 8004d4c:	40000400 	.word	0x40000400
 8004d50:	40000800 	.word	0x40000800
 8004d54:	40000c00 	.word	0x40000c00
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40001800 	.word	0x40001800
 8004d60:	00010007 	.word	0x00010007

08004d64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	6839      	ldr	r1, [r7, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fef6 	bl	8005b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a36      	ldr	r2, [pc, #216]	@ (8004e5c <HAL_TIM_PWM_Stop+0xf8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_PWM_Stop+0x2c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a35      	ldr	r2, [pc, #212]	@ (8004e60 <HAL_TIM_PWM_Stop+0xfc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_PWM_Stop+0x30>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_TIM_PWM_Stop+0x32>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a1a      	ldr	r2, [r3, #32]
 8004da0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10f      	bne.n	8004dca <HAL_TIM_PWM_Stop+0x66>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	f240 4344 	movw	r3, #1092	@ 0x444
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d107      	bne.n	8004dca <HAL_TIM_PWM_Stop+0x66>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10f      	bne.n	8004dfa <HAL_TIM_PWM_Stop+0x96>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	f240 4344 	movw	r3, #1092	@ 0x444
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <HAL_TIM_PWM_Stop+0x96>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_PWM_Stop+0xa6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e08:	e023      	b.n	8004e52 <HAL_TIM_PWM_Stop+0xee>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Stop+0xb6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e18:	e01b      	b.n	8004e52 <HAL_TIM_PWM_Stop+0xee>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_PWM_Stop+0xc6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e28:	e013      	b.n	8004e52 <HAL_TIM_PWM_Stop+0xee>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b0c      	cmp	r3, #12
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Stop+0xd6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e38:	e00b      	b.n	8004e52 <HAL_TIM_PWM_Stop+0xee>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Stop+0xe6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e48:	e003      	b.n	8004e52 <HAL_TIM_PWM_Stop+0xee>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40010400 	.word	0x40010400

08004e64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e08f      	b.n	8004f98 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7fc fe5d 	bl	8001b4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6899      	ldr	r1, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa0 <HAL_TIM_Encoder_Init+0x13c>)
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f000 fb4d 	bl	8005554 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4b31      	ldr	r3, [pc, #196]	@ (8004fa4 <HAL_TIM_Encoder_Init+0x140>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa8 <HAL_TIM_Encoder_Init+0x144>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4b2a      	ldr	r3, [pc, #168]	@ (8004fac <HAL_TIM_Encoder_Init+0x148>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	4313      	orrs	r3, r2
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	011a      	lsls	r2, r3, #4
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	031b      	lsls	r3, r3, #12
 8004f24:	4313      	orrs	r3, r2
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004f32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	4313      	orrs	r3, r2
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	fffebff8 	.word	0xfffebff8
 8004fa4:	fffffcfc 	.word	0xfffffcfc
 8004fa8:	fffff3f3 	.word	0xfffff3f3
 8004fac:	ffff0f0f 	.word	0xffff0f0f

08004fb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d110      	bne.n	8005002 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d102      	bne.n	8004fec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fe6:	7b7b      	ldrb	r3, [r7, #13]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e069      	b.n	80050c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005000:	e031      	b.n	8005066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b04      	cmp	r3, #4
 8005006:	d110      	bne.n	800502a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005008:	7bbb      	ldrb	r3, [r7, #14]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d102      	bne.n	8005014 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800500e:	7b3b      	ldrb	r3, [r7, #12]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d001      	beq.n	8005018 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e055      	b.n	80050c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005028:	e01d      	b.n	8005066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d108      	bne.n	8005042 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005030:	7bbb      	ldrb	r3, [r7, #14]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d105      	bne.n	8005042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005036:	7b7b      	ldrb	r3, [r7, #13]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d102      	bne.n	8005042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800503c:	7b3b      	ldrb	r3, [r7, #12]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d001      	beq.n	8005046 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e03e      	b.n	80050c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2202      	movs	r2, #2
 800505a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_TIM_Encoder_Start+0xc4>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b04      	cmp	r3, #4
 8005070:	d008      	beq.n	8005084 <HAL_TIM_Encoder_Start+0xd4>
 8005072:	e00f      	b.n	8005094 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	2100      	movs	r1, #0
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fd73 	bl	8005b68 <TIM_CCxChannelCmd>
      break;
 8005082:	e016      	b.n	80050b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2201      	movs	r2, #1
 800508a:	2104      	movs	r1, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fd6b 	bl	8005b68 <TIM_CCxChannelCmd>
      break;
 8005092:	e00e      	b.n	80050b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2201      	movs	r2, #1
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fd63 	bl	8005b68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2201      	movs	r2, #1
 80050a8:	2104      	movs	r1, #4
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fd5c 	bl	8005b68 <TIM_CCxChannelCmd>
      break;
 80050b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d020      	beq.n	8005130 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01b      	beq.n	8005130 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0202 	mvn.w	r2, #2
 8005100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9fe 	bl	8005518 <HAL_TIM_IC_CaptureCallback>
 800511c:	e005      	b.n	800512a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f9f0 	bl	8005504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fa01 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d020      	beq.n	800517c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d01b      	beq.n	800517c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0204 	mvn.w	r2, #4
 800514c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f9d8 	bl	8005518 <HAL_TIM_IC_CaptureCallback>
 8005168:	e005      	b.n	8005176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f9ca 	bl	8005504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f9db 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d020      	beq.n	80051c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0208 	mvn.w	r2, #8
 8005198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2204      	movs	r2, #4
 800519e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f9b2 	bl	8005518 <HAL_TIM_IC_CaptureCallback>
 80051b4:	e005      	b.n	80051c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f9a4 	bl	8005504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f9b5 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d020      	beq.n	8005214 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01b      	beq.n	8005214 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0210 	mvn.w	r2, #16
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2208      	movs	r2, #8
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f98c 	bl	8005518 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f97e 	bl	8005504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f98f 	bl	800552c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00c      	beq.n	8005238 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0201 	mvn.w	r2, #1
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb fcac 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00c      	beq.n	8005266 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800525e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fd3f 	bl	8005ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00c      	beq.n	800528a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fd37 	bl	8005cf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00c      	beq.n	80052ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f949 	bl	8005540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00c      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d007      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0220 	mvn.w	r2, #32
 80052ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fcff 	bl	8005cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0ff      	b.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b14      	cmp	r3, #20
 8005306:	f200 80f0 	bhi.w	80054ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800530a:	a201      	add	r2, pc, #4	@ (adr r2, 8005310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005365 	.word	0x08005365
 8005314:	080054eb 	.word	0x080054eb
 8005318:	080054eb 	.word	0x080054eb
 800531c:	080054eb 	.word	0x080054eb
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080054eb 	.word	0x080054eb
 8005328:	080054eb 	.word	0x080054eb
 800532c:	080054eb 	.word	0x080054eb
 8005330:	080053e7 	.word	0x080053e7
 8005334:	080054eb 	.word	0x080054eb
 8005338:	080054eb 	.word	0x080054eb
 800533c:	080054eb 	.word	0x080054eb
 8005340:	08005427 	.word	0x08005427
 8005344:	080054eb 	.word	0x080054eb
 8005348:	080054eb 	.word	0x080054eb
 800534c:	080054eb 	.word	0x080054eb
 8005350:	08005469 	.word	0x08005469
 8005354:	080054eb 	.word	0x080054eb
 8005358:	080054eb 	.word	0x080054eb
 800535c:	080054eb 	.word	0x080054eb
 8005360:	080054a9 	.word	0x080054a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f99e 	bl	80056ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0208 	orr.w	r2, r2, #8
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0204 	bic.w	r2, r2, #4
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	619a      	str	r2, [r3, #24]
      break;
 80053a2:	e0a5      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f9f0 	bl	8005790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6999      	ldr	r1, [r3, #24]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]
      break;
 80053e4:	e084      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fa47 	bl	8005880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0208 	orr.w	r2, r2, #8
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0204 	bic.w	r2, r2, #4
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	61da      	str	r2, [r3, #28]
      break;
 8005424:	e064      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fa9d 	bl	800596c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69d9      	ldr	r1, [r3, #28]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	021a      	lsls	r2, r3, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	61da      	str	r2, [r3, #28]
      break;
 8005466:	e043      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fad4 	bl	8005a1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0204 	bic.w	r2, r2, #4
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80054a6:	e023      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fb06 	bl	8005ac0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80054e8:	e002      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	75fb      	strb	r3, [r7, #23]
      break;
 80054ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop

08005504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a46      	ldr	r2, [pc, #280]	@ (8005680 <TIM_Base_SetConfig+0x12c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005572:	d00f      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a43      	ldr	r2, [pc, #268]	@ (8005684 <TIM_Base_SetConfig+0x130>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a42      	ldr	r2, [pc, #264]	@ (8005688 <TIM_Base_SetConfig+0x134>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a41      	ldr	r2, [pc, #260]	@ (800568c <TIM_Base_SetConfig+0x138>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a40      	ldr	r2, [pc, #256]	@ (8005690 <TIM_Base_SetConfig+0x13c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d108      	bne.n	80055a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a35      	ldr	r2, [pc, #212]	@ (8005680 <TIM_Base_SetConfig+0x12c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d02b      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b4:	d027      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a32      	ldr	r2, [pc, #200]	@ (8005684 <TIM_Base_SetConfig+0x130>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d023      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a31      	ldr	r2, [pc, #196]	@ (8005688 <TIM_Base_SetConfig+0x134>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01f      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a30      	ldr	r2, [pc, #192]	@ (800568c <TIM_Base_SetConfig+0x138>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01b      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005690 <TIM_Base_SetConfig+0x13c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d017      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005694 <TIM_Base_SetConfig+0x140>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005698 <TIM_Base_SetConfig+0x144>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2c      	ldr	r2, [pc, #176]	@ (800569c <TIM_Base_SetConfig+0x148>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2b      	ldr	r2, [pc, #172]	@ (80056a0 <TIM_Base_SetConfig+0x14c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2a      	ldr	r2, [pc, #168]	@ (80056a4 <TIM_Base_SetConfig+0x150>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a29      	ldr	r2, [pc, #164]	@ (80056a8 <TIM_Base_SetConfig+0x154>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d108      	bne.n	8005618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800560c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a10      	ldr	r2, [pc, #64]	@ (8005680 <TIM_Base_SetConfig+0x12c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_Base_SetConfig+0xf8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a12      	ldr	r2, [pc, #72]	@ (8005690 <TIM_Base_SetConfig+0x13c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d103      	bne.n	8005654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b01      	cmp	r3, #1
 8005664:	d105      	bne.n	8005672 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f023 0201 	bic.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	611a      	str	r2, [r3, #16]
  }
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40010400 	.word	0x40010400
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800
 80056a0:	40001800 	.word	0x40001800
 80056a4:	40001c00 	.word	0x40001c00
 80056a8:	40002000 	.word	0x40002000

080056ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f023 0201 	bic.w	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005784 <TIM_OC1_SetConfig+0xd8>)
 80056d8:	4013      	ands	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 0302 	bic.w	r3, r3, #2
 80056f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a21      	ldr	r2, [pc, #132]	@ (8005788 <TIM_OC1_SetConfig+0xdc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_OC1_SetConfig+0x64>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a20      	ldr	r2, [pc, #128]	@ (800578c <TIM_OC1_SetConfig+0xe0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10c      	bne.n	800572a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0308 	bic.w	r3, r3, #8
 8005716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0304 	bic.w	r3, r3, #4
 8005728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a16      	ldr	r2, [pc, #88]	@ (8005788 <TIM_OC1_SetConfig+0xdc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC1_SetConfig+0x8e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a15      	ldr	r2, [pc, #84]	@ (800578c <TIM_OC1_SetConfig+0xe0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d111      	bne.n	800575e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	621a      	str	r2, [r3, #32]
}
 8005778:	bf00      	nop
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	fffeff8f 	.word	0xfffeff8f
 8005788:	40010000 	.word	0x40010000
 800578c:	40010400 	.word	0x40010400

08005790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f023 0210 	bic.w	r2, r3, #16
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005874 <TIM_OC2_SetConfig+0xe4>)
 80057bc:	4013      	ands	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f023 0320 	bic.w	r3, r3, #32
 80057da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a23      	ldr	r2, [pc, #140]	@ (8005878 <TIM_OC2_SetConfig+0xe8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC2_SetConfig+0x68>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a22      	ldr	r2, [pc, #136]	@ (800587c <TIM_OC2_SetConfig+0xec>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10d      	bne.n	8005814 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005812:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a18      	ldr	r2, [pc, #96]	@ (8005878 <TIM_OC2_SetConfig+0xe8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC2_SetConfig+0x94>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a17      	ldr	r2, [pc, #92]	@ (800587c <TIM_OC2_SetConfig+0xec>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d113      	bne.n	800584c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800582a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	feff8fff 	.word	0xfeff8fff
 8005878:	40010000 	.word	0x40010000
 800587c:	40010400 	.word	0x40010400

08005880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005960 <TIM_OC3_SetConfig+0xe0>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a22      	ldr	r2, [pc, #136]	@ (8005964 <TIM_OC3_SetConfig+0xe4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_OC3_SetConfig+0x66>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a21      	ldr	r2, [pc, #132]	@ (8005968 <TIM_OC3_SetConfig+0xe8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10d      	bne.n	8005902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a17      	ldr	r2, [pc, #92]	@ (8005964 <TIM_OC3_SetConfig+0xe4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_OC3_SetConfig+0x92>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a16      	ldr	r2, [pc, #88]	@ (8005968 <TIM_OC3_SetConfig+0xe8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d113      	bne.n	800593a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	fffeff8f 	.word	0xfffeff8f
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400

0800596c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4b1e      	ldr	r3, [pc, #120]	@ (8005a10 <TIM_OC4_SetConfig+0xa4>)
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	031b      	lsls	r3, r3, #12
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a13      	ldr	r2, [pc, #76]	@ (8005a14 <TIM_OC4_SetConfig+0xa8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d003      	beq.n	80059d4 <TIM_OC4_SetConfig+0x68>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a12      	ldr	r2, [pc, #72]	@ (8005a18 <TIM_OC4_SetConfig+0xac>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d109      	bne.n	80059e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	019b      	lsls	r3, r3, #6
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	feff8fff 	.word	0xfeff8fff
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40010400 	.word	0x40010400

08005a1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <TIM_OC5_SetConfig+0x98>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	041b      	lsls	r3, r3, #16
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a12      	ldr	r2, [pc, #72]	@ (8005ab8 <TIM_OC5_SetConfig+0x9c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d003      	beq.n	8005a7a <TIM_OC5_SetConfig+0x5e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a11      	ldr	r2, [pc, #68]	@ (8005abc <TIM_OC5_SetConfig+0xa0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d109      	bne.n	8005a8e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	fffeff8f 	.word	0xfffeff8f
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40010400 	.word	0x40010400

08005ac0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4b1c      	ldr	r3, [pc, #112]	@ (8005b5c <TIM_OC6_SetConfig+0x9c>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	051b      	lsls	r3, r3, #20
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a13      	ldr	r2, [pc, #76]	@ (8005b60 <TIM_OC6_SetConfig+0xa0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_OC6_SetConfig+0x60>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a12      	ldr	r2, [pc, #72]	@ (8005b64 <TIM_OC6_SetConfig+0xa4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d109      	bne.n	8005b34 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	029b      	lsls	r3, r3, #10
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	feff8fff 	.word	0xfeff8fff
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40010400 	.word	0x40010400

08005b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a1a      	ldr	r2, [r3, #32]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e06d      	b.n	8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a30      	ldr	r2, [pc, #192]	@ (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d108      	bne.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a20      	ldr	r2, [pc, #128]	@ (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d022      	beq.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3e:	d01d      	beq.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1d      	ldr	r2, [pc, #116]	@ (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d018      	beq.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00e      	beq.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a15      	ldr	r2, [pc, #84]	@ (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a16      	ldr	r2, [pc, #88]	@ (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a15      	ldr	r2, [pc, #84]	@ (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d10c      	bne.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	40000c00 	.word	0x40000c00
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40001800 	.word	0x40001800

08005cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e040      	b.n	8005da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fc f9d6 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2224      	movs	r2, #36	@ 0x24
 8005d38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fff0 	bl	8006d38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fd89 	bl	8006870 <UART_SetConfig>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e01b      	b.n	8005da0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 f86f 	bl	8006e7c <UART_CheckIdleState>
 8005d9e:	4603      	mov	r3, r0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	@ 0x28
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d177      	bne.n	8005eb0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_UART_Transmit+0x24>
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e070      	b.n	8005eb2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2221      	movs	r2, #33	@ 0x21
 8005ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dde:	f7fc fbb9 	bl	8002554 <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dfc:	d108      	bne.n	8005e10 <HAL_UART_Transmit+0x68>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	e003      	b.n	8005e18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e18:	e02f      	b.n	8005e7a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	@ 0x80
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f001 f8d1 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e03b      	b.n	8005eb2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	3302      	adds	r3, #2
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	e007      	b.n	8005e68 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	781a      	ldrb	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	3301      	adds	r3, #1
 8005e66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1c9      	bne.n	8005e1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2140      	movs	r1, #64	@ 0x40
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f001 f89b 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e005      	b.n	8005eb2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	@ 0x28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d165      	bne.n	8005f9e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <HAL_UART_Transmit_DMA+0x22>
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e05e      	b.n	8005fa0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2221      	movs	r2, #33	@ 0x21
 8005f04:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d027      	beq.n	8005f5e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	4a25      	ldr	r2, [pc, #148]	@ (8005fa8 <HAL_UART_Transmit_DMA+0xec>)
 8005f14:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1a:	4a24      	ldr	r2, [pc, #144]	@ (8005fac <HAL_UART_Transmit_DMA+0xf0>)
 8005f1c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f22:	4a23      	ldr	r2, [pc, #140]	@ (8005fb0 <HAL_UART_Transmit_DMA+0xf4>)
 8005f24:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f36:	4619      	mov	r1, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3328      	adds	r3, #40	@ 0x28
 8005f3e:	461a      	mov	r2, r3
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	f7fc fcf7 	bl	8002934 <HAL_DMA_Start_IT>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e020      	b.n	8005fa0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2240      	movs	r2, #64	@ 0x40
 8005f64:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	613b      	str	r3, [r7, #16]
   return(result);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3308      	adds	r3, #8
 8005f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f86:	623a      	str	r2, [r7, #32]
 8005f88:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	69f9      	ldr	r1, [r7, #28]
 8005f8c:	6a3a      	ldr	r2, [r7, #32]
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e5      	bne.n	8005f66 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3728      	adds	r7, #40	@ 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	080072fd 	.word	0x080072fd
 8005fac:	08007393 	.word	0x08007393
 8005fb0:	08007515 	.word	0x08007515

08005fb4 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08e      	sub	sp, #56	@ 0x38
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fdc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e6      	bne.n	8005fbc <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff8:	2b80      	cmp	r3, #128	@ 0x80
 8005ffa:	d137      	bne.n	800606c <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3308      	adds	r3, #8
 8006002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	60bb      	str	r3, [r7, #8]
   return(result);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006012:	633b      	str	r3, [r7, #48]	@ 0x30
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800601c:	61ba      	str	r2, [r7, #24]
 800601e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6979      	ldr	r1, [r7, #20]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	613b      	str	r3, [r7, #16]
   return(result);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e5      	bne.n	8005ffc <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006034:	2b00      	cmp	r3, #0
 8006036:	d019      	beq.n	800606c <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603c:	2200      	movs	r2, #0
 800603e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006044:	4618      	mov	r0, r3
 8006046:	f7fc fcd5 	bl	80029f4 <HAL_DMA_Abort>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00d      	beq.n	800606c <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006054:	4618      	mov	r0, r3
 8006056:	f7fc fee9 	bl	8002e2c <HAL_DMA_GetError>
 800605a:	4603      	mov	r3, r0
 800605c:	2b20      	cmp	r3, #32
 800605e:	d105      	bne.n	800606c <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2210      	movs	r2, #16
 8006064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e007      	b.n	800607c <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3738      	adds	r7, #56	@ 0x38
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b09a      	sub	sp, #104	@ 0x68
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800609a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800609c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80060ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80060b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80060b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e6      	bne.n	800608c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3308      	adds	r3, #8
 80060dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060de:	643a      	str	r2, [r7, #64]	@ 0x40
 80060e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d118      	bne.n	800612c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	61fb      	str	r3, [r7, #28]
   return(result);
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f023 0310 	bic.w	r3, r3, #16
 800610e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800611a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800611e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	d137      	bne.n	80061aa <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3308      	adds	r3, #8
 8006140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	60bb      	str	r3, [r7, #8]
   return(result);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3308      	adds	r3, #8
 8006158:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800615a:	61ba      	str	r2, [r7, #24]
 800615c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6979      	ldr	r1, [r7, #20]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	613b      	str	r3, [r7, #16]
   return(result);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e5      	bne.n	800613a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006172:	2b00      	cmp	r3, #0
 8006174:	d019      	beq.n	80061aa <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800617a:	2200      	movs	r2, #0
 800617c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006182:	4618      	mov	r0, r3
 8006184:	f7fc fc36 	bl	80029f4 <HAL_DMA_Abort>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00d      	beq.n	80061aa <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006192:	4618      	mov	r0, r3
 8006194:	f7fc fe4a 	bl	8002e2c <HAL_DMA_GetError>
 8006198:	4603      	mov	r3, r0
 800619a:	2b20      	cmp	r3, #32
 800619c:	d105      	bne.n	80061aa <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2210      	movs	r2, #16
 80061a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e017      	b.n	80061da <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	220f      	movs	r2, #15
 80061b8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699a      	ldr	r2, [r3, #24]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0208 	orr.w	r2, r2, #8
 80061c8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3768      	adds	r7, #104	@ 0x68
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b0ba      	sub	sp, #232	@ 0xe8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800620a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800620e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006212:	4013      	ands	r3, r2
 8006214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800621c:	2b00      	cmp	r3, #0
 800621e:	d115      	bne.n	800624c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00f      	beq.n	800624c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	d009      	beq.n	800624c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 82ac 	beq.w	800679a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
      }
      return;
 800624a:	e2a6      	b.n	800679a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800624c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8117 	beq.w	8006484 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006262:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006266:	4b85      	ldr	r3, [pc, #532]	@ (800647c <HAL_UART_IRQHandler+0x298>)
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 810a 	beq.w	8006484 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d011      	beq.n	80062a0 <HAL_UART_IRQHandler+0xbc>
 800627c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2201      	movs	r2, #1
 800628e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006296:	f043 0201 	orr.w	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d011      	beq.n	80062d0 <HAL_UART_IRQHandler+0xec>
 80062ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2202      	movs	r2, #2
 80062be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c6:	f043 0204 	orr.w	r2, r3, #4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d011      	beq.n	8006300 <HAL_UART_IRQHandler+0x11c>
 80062dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2204      	movs	r2, #4
 80062ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062f6:	f043 0202 	orr.w	r2, r3, #2
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d017      	beq.n	800633c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d105      	bne.n	8006324 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800631c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2208      	movs	r2, #8
 800632a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006332:	f043 0208 	orr.w	r2, r3, #8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800633c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006344:	2b00      	cmp	r3, #0
 8006346:	d012      	beq.n	800636e <HAL_UART_IRQHandler+0x18a>
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800634c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00c      	beq.n	800636e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800635c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006364:	f043 0220 	orr.w	r2, r3, #32
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8212 	beq.w	800679e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800637a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637e:	f003 0320 	and.w	r3, r3, #32
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00d      	beq.n	80063a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b6:	2b40      	cmp	r3, #64	@ 0x40
 80063b8:	d005      	beq.n	80063c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d04f      	beq.n	8006466 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 ff34 	bl	8007234 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d6:	2b40      	cmp	r3, #64	@ 0x40
 80063d8:	d141      	bne.n	800645e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006406:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800640a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800641e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1d9      	bne.n	80063da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800642a:	2b00      	cmp	r3, #0
 800642c:	d013      	beq.n	8006456 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006432:	4a13      	ldr	r2, [pc, #76]	@ (8006480 <HAL_UART_IRQHandler+0x29c>)
 8006434:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800643a:	4618      	mov	r0, r3
 800643c:	f7fc fb4a 	bl	8002ad4 <HAL_DMA_Abort_IT>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d017      	beq.n	8006476 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800644a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006450:	4610      	mov	r0, r2
 8006452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006454:	e00f      	b.n	8006476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9d4 	bl	8006804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	e00b      	b.n	8006476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9d0 	bl	8006804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e007      	b.n	8006476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f9cc 	bl	8006804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006474:	e193      	b.n	800679e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006476:	bf00      	nop
    return;
 8006478:	e191      	b.n	800679e <HAL_UART_IRQHandler+0x5ba>
 800647a:	bf00      	nop
 800647c:	04000120 	.word	0x04000120
 8006480:	08007593 	.word	0x08007593

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006488:	2b01      	cmp	r3, #1
 800648a:	f040 814c 	bne.w	8006726 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006492:	f003 0310 	and.w	r3, r3, #16
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8145 	beq.w	8006726 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800649c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 813e 	beq.w	8006726 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2210      	movs	r2, #16
 80064b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064bc:	2b40      	cmp	r3, #64	@ 0x40
 80064be:	f040 80b6 	bne.w	800662e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8165 	beq.w	80067a2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80064de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064e2:	429a      	cmp	r2, r3
 80064e4:	f080 815d 	bcs.w	80067a2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fc:	f000 8086 	beq.w	800660c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800651c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800652a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800652e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1da      	bne.n	8006500 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800655a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3308      	adds	r3, #8
 800656a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800656e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e1      	bne.n	800654a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3308      	adds	r3, #8
 800658c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800659c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3308      	adds	r3, #8
 80065a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e3      	bne.n	8006586 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065dc:	f023 0310 	bic.w	r3, r3, #16
 80065e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e4      	bne.n	80065cc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006606:	4618      	mov	r0, r3
 8006608:	f7fc f9f4 	bl	80029f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800661e:	b29b      	uxth	r3, r3
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	b29b      	uxth	r3, r3
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fa f944 	bl	80008b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800662c:	e0b9      	b.n	80067a2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800663a:	b29b      	uxth	r3, r3
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80ab 	beq.w	80067a6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80a6 	beq.w	80067a6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800666e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800667c:	647b      	str	r3, [r7, #68]	@ 0x44
 800667e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800668a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e4      	bne.n	800665a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3308      	adds	r3, #8
 8006696:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	623b      	str	r3, [r7, #32]
   return(result);
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	f023 0301 	bic.w	r3, r3, #1
 80066a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80066b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e3      	bne.n	8006690 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f023 0310 	bic.w	r3, r3, #16
 80066f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	69b9      	ldr	r1, [r7, #24]
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	617b      	str	r3, [r7, #20]
   return(result);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e4      	bne.n	80066dc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7fa f8c8 	bl	80008b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006724:	e03f      	b.n	80067a6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00e      	beq.n	8006750 <HAL_UART_IRQHandler+0x56c>
 8006732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d008      	beq.n	8006750 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006746:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f865 	bl	8006818 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800674e:	e02d      	b.n	80067ac <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00e      	beq.n	800677a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800675c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01c      	beq.n	80067aa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
    }
    return;
 8006778:	e017      	b.n	80067aa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800677a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	d012      	beq.n	80067ac <HAL_UART_IRQHandler+0x5c8>
 8006786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800678a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00c      	beq.n	80067ac <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 ff13 	bl	80075be <UART_EndTransmit_IT>
    return;
 8006798:	e008      	b.n	80067ac <HAL_UART_IRQHandler+0x5c8>
      return;
 800679a:	bf00      	nop
 800679c:	e006      	b.n	80067ac <HAL_UART_IRQHandler+0x5c8>
    return;
 800679e:	bf00      	nop
 80067a0:	e004      	b.n	80067ac <HAL_UART_IRQHandler+0x5c8>
      return;
 80067a2:	bf00      	nop
 80067a4:	e002      	b.n	80067ac <HAL_UART_IRQHandler+0x5c8>
      return;
 80067a6:	bf00      	nop
 80067a8:	e000      	b.n	80067ac <HAL_UART_IRQHandler+0x5c8>
    return;
 80067aa:	bf00      	nop
  }

}
 80067ac:	37e8      	adds	r7, #232	@ 0xe8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop

080067b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006838:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006840:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4313      	orrs	r3, r2
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4ba6      	ldr	r3, [pc, #664]	@ (8006b34 <UART_SetConfig+0x2c4>)
 800689c:	4013      	ands	r3, r2
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	6979      	ldr	r1, [r7, #20]
 80068a4:	430b      	orrs	r3, r1
 80068a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	430a      	orrs	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a94      	ldr	r2, [pc, #592]	@ (8006b38 <UART_SetConfig+0x2c8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d120      	bne.n	800692e <UART_SetConfig+0xbe>
 80068ec:	4b93      	ldr	r3, [pc, #588]	@ (8006b3c <UART_SetConfig+0x2cc>)
 80068ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d816      	bhi.n	8006928 <UART_SetConfig+0xb8>
 80068fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006900 <UART_SetConfig+0x90>)
 80068fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006900:	08006911 	.word	0x08006911
 8006904:	0800691d 	.word	0x0800691d
 8006908:	08006917 	.word	0x08006917
 800690c:	08006923 	.word	0x08006923
 8006910:	2301      	movs	r3, #1
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e150      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006916:	2302      	movs	r3, #2
 8006918:	77fb      	strb	r3, [r7, #31]
 800691a:	e14d      	b.n	8006bb8 <UART_SetConfig+0x348>
 800691c:	2304      	movs	r3, #4
 800691e:	77fb      	strb	r3, [r7, #31]
 8006920:	e14a      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006922:	2308      	movs	r3, #8
 8006924:	77fb      	strb	r3, [r7, #31]
 8006926:	e147      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006928:	2310      	movs	r3, #16
 800692a:	77fb      	strb	r3, [r7, #31]
 800692c:	e144      	b.n	8006bb8 <UART_SetConfig+0x348>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a83      	ldr	r2, [pc, #524]	@ (8006b40 <UART_SetConfig+0x2d0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d132      	bne.n	800699e <UART_SetConfig+0x12e>
 8006938:	4b80      	ldr	r3, [pc, #512]	@ (8006b3c <UART_SetConfig+0x2cc>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800693e:	f003 030c 	and.w	r3, r3, #12
 8006942:	2b0c      	cmp	r3, #12
 8006944:	d828      	bhi.n	8006998 <UART_SetConfig+0x128>
 8006946:	a201      	add	r2, pc, #4	@ (adr r2, 800694c <UART_SetConfig+0xdc>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	08006981 	.word	0x08006981
 8006950:	08006999 	.word	0x08006999
 8006954:	08006999 	.word	0x08006999
 8006958:	08006999 	.word	0x08006999
 800695c:	0800698d 	.word	0x0800698d
 8006960:	08006999 	.word	0x08006999
 8006964:	08006999 	.word	0x08006999
 8006968:	08006999 	.word	0x08006999
 800696c:	08006987 	.word	0x08006987
 8006970:	08006999 	.word	0x08006999
 8006974:	08006999 	.word	0x08006999
 8006978:	08006999 	.word	0x08006999
 800697c:	08006993 	.word	0x08006993
 8006980:	2300      	movs	r3, #0
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e118      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006986:	2302      	movs	r3, #2
 8006988:	77fb      	strb	r3, [r7, #31]
 800698a:	e115      	b.n	8006bb8 <UART_SetConfig+0x348>
 800698c:	2304      	movs	r3, #4
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	e112      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006992:	2308      	movs	r3, #8
 8006994:	77fb      	strb	r3, [r7, #31]
 8006996:	e10f      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006998:	2310      	movs	r3, #16
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e10c      	b.n	8006bb8 <UART_SetConfig+0x348>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a68      	ldr	r2, [pc, #416]	@ (8006b44 <UART_SetConfig+0x2d4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d120      	bne.n	80069ea <UART_SetConfig+0x17a>
 80069a8:	4b64      	ldr	r3, [pc, #400]	@ (8006b3c <UART_SetConfig+0x2cc>)
 80069aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069b2:	2b30      	cmp	r3, #48	@ 0x30
 80069b4:	d013      	beq.n	80069de <UART_SetConfig+0x16e>
 80069b6:	2b30      	cmp	r3, #48	@ 0x30
 80069b8:	d814      	bhi.n	80069e4 <UART_SetConfig+0x174>
 80069ba:	2b20      	cmp	r3, #32
 80069bc:	d009      	beq.n	80069d2 <UART_SetConfig+0x162>
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d810      	bhi.n	80069e4 <UART_SetConfig+0x174>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <UART_SetConfig+0x15c>
 80069c6:	2b10      	cmp	r3, #16
 80069c8:	d006      	beq.n	80069d8 <UART_SetConfig+0x168>
 80069ca:	e00b      	b.n	80069e4 <UART_SetConfig+0x174>
 80069cc:	2300      	movs	r3, #0
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e0f2      	b.n	8006bb8 <UART_SetConfig+0x348>
 80069d2:	2302      	movs	r3, #2
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e0ef      	b.n	8006bb8 <UART_SetConfig+0x348>
 80069d8:	2304      	movs	r3, #4
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e0ec      	b.n	8006bb8 <UART_SetConfig+0x348>
 80069de:	2308      	movs	r3, #8
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e0e9      	b.n	8006bb8 <UART_SetConfig+0x348>
 80069e4:	2310      	movs	r3, #16
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e0e6      	b.n	8006bb8 <UART_SetConfig+0x348>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a56      	ldr	r2, [pc, #344]	@ (8006b48 <UART_SetConfig+0x2d8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d120      	bne.n	8006a36 <UART_SetConfig+0x1c6>
 80069f4:	4b51      	ldr	r3, [pc, #324]	@ (8006b3c <UART_SetConfig+0x2cc>)
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a00:	d013      	beq.n	8006a2a <UART_SetConfig+0x1ba>
 8006a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a04:	d814      	bhi.n	8006a30 <UART_SetConfig+0x1c0>
 8006a06:	2b80      	cmp	r3, #128	@ 0x80
 8006a08:	d009      	beq.n	8006a1e <UART_SetConfig+0x1ae>
 8006a0a:	2b80      	cmp	r3, #128	@ 0x80
 8006a0c:	d810      	bhi.n	8006a30 <UART_SetConfig+0x1c0>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <UART_SetConfig+0x1a8>
 8006a12:	2b40      	cmp	r3, #64	@ 0x40
 8006a14:	d006      	beq.n	8006a24 <UART_SetConfig+0x1b4>
 8006a16:	e00b      	b.n	8006a30 <UART_SetConfig+0x1c0>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e0cc      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e0c9      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a24:	2304      	movs	r3, #4
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e0c6      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	77fb      	strb	r3, [r7, #31]
 8006a2e:	e0c3      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a30:	2310      	movs	r3, #16
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e0c0      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a44      	ldr	r2, [pc, #272]	@ (8006b4c <UART_SetConfig+0x2dc>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d125      	bne.n	8006a8c <UART_SetConfig+0x21c>
 8006a40:	4b3e      	ldr	r3, [pc, #248]	@ (8006b3c <UART_SetConfig+0x2cc>)
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a4e:	d017      	beq.n	8006a80 <UART_SetConfig+0x210>
 8006a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a54:	d817      	bhi.n	8006a86 <UART_SetConfig+0x216>
 8006a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a5a:	d00b      	beq.n	8006a74 <UART_SetConfig+0x204>
 8006a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a60:	d811      	bhi.n	8006a86 <UART_SetConfig+0x216>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <UART_SetConfig+0x1fe>
 8006a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a6a:	d006      	beq.n	8006a7a <UART_SetConfig+0x20a>
 8006a6c:	e00b      	b.n	8006a86 <UART_SetConfig+0x216>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	77fb      	strb	r3, [r7, #31]
 8006a72:	e0a1      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a74:	2302      	movs	r3, #2
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e09e      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e09b      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a80:	2308      	movs	r3, #8
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e098      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a86:	2310      	movs	r3, #16
 8006a88:	77fb      	strb	r3, [r7, #31]
 8006a8a:	e095      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a2f      	ldr	r2, [pc, #188]	@ (8006b50 <UART_SetConfig+0x2e0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d125      	bne.n	8006ae2 <UART_SetConfig+0x272>
 8006a96:	4b29      	ldr	r3, [pc, #164]	@ (8006b3c <UART_SetConfig+0x2cc>)
 8006a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006aa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006aa4:	d017      	beq.n	8006ad6 <UART_SetConfig+0x266>
 8006aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006aaa:	d817      	bhi.n	8006adc <UART_SetConfig+0x26c>
 8006aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ab0:	d00b      	beq.n	8006aca <UART_SetConfig+0x25a>
 8006ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ab6:	d811      	bhi.n	8006adc <UART_SetConfig+0x26c>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <UART_SetConfig+0x254>
 8006abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac0:	d006      	beq.n	8006ad0 <UART_SetConfig+0x260>
 8006ac2:	e00b      	b.n	8006adc <UART_SetConfig+0x26c>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e076      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006aca:	2302      	movs	r3, #2
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e073      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e070      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e06d      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006adc:	2310      	movs	r3, #16
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e06a      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b54 <UART_SetConfig+0x2e4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d138      	bne.n	8006b5e <UART_SetConfig+0x2ee>
 8006aec:	4b13      	ldr	r3, [pc, #76]	@ (8006b3c <UART_SetConfig+0x2cc>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006af6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006afa:	d017      	beq.n	8006b2c <UART_SetConfig+0x2bc>
 8006afc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b00:	d82a      	bhi.n	8006b58 <UART_SetConfig+0x2e8>
 8006b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b06:	d00b      	beq.n	8006b20 <UART_SetConfig+0x2b0>
 8006b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b0c:	d824      	bhi.n	8006b58 <UART_SetConfig+0x2e8>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <UART_SetConfig+0x2aa>
 8006b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b16:	d006      	beq.n	8006b26 <UART_SetConfig+0x2b6>
 8006b18:	e01e      	b.n	8006b58 <UART_SetConfig+0x2e8>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e04b      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006b20:	2302      	movs	r3, #2
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	e048      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006b26:	2304      	movs	r3, #4
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e045      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e042      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006b32:	bf00      	nop
 8006b34:	efff69f3 	.word	0xefff69f3
 8006b38:	40011000 	.word	0x40011000
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	40004400 	.word	0x40004400
 8006b44:	40004800 	.word	0x40004800
 8006b48:	40004c00 	.word	0x40004c00
 8006b4c:	40005000 	.word	0x40005000
 8006b50:	40011400 	.word	0x40011400
 8006b54:	40007800 	.word	0x40007800
 8006b58:	2310      	movs	r3, #16
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e02c      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a72      	ldr	r2, [pc, #456]	@ (8006d2c <UART_SetConfig+0x4bc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d125      	bne.n	8006bb4 <UART_SetConfig+0x344>
 8006b68:	4b71      	ldr	r3, [pc, #452]	@ (8006d30 <UART_SetConfig+0x4c0>)
 8006b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006b72:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b76:	d017      	beq.n	8006ba8 <UART_SetConfig+0x338>
 8006b78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b7c:	d817      	bhi.n	8006bae <UART_SetConfig+0x33e>
 8006b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b82:	d00b      	beq.n	8006b9c <UART_SetConfig+0x32c>
 8006b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b88:	d811      	bhi.n	8006bae <UART_SetConfig+0x33e>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <UART_SetConfig+0x326>
 8006b8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b92:	d006      	beq.n	8006ba2 <UART_SetConfig+0x332>
 8006b94:	e00b      	b.n	8006bae <UART_SetConfig+0x33e>
 8006b96:	2300      	movs	r3, #0
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e00d      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e00a      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006ba2:	2304      	movs	r3, #4
 8006ba4:	77fb      	strb	r3, [r7, #31]
 8006ba6:	e007      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006ba8:	2308      	movs	r3, #8
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e004      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006bae:	2310      	movs	r3, #16
 8006bb0:	77fb      	strb	r3, [r7, #31]
 8006bb2:	e001      	b.n	8006bb8 <UART_SetConfig+0x348>
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bc0:	d15b      	bne.n	8006c7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006bc2:	7ffb      	ldrb	r3, [r7, #31]
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d828      	bhi.n	8006c1a <UART_SetConfig+0x3aa>
 8006bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <UART_SetConfig+0x360>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006bf5 	.word	0x08006bf5
 8006bd4:	08006bfd 	.word	0x08006bfd
 8006bd8:	08006c05 	.word	0x08006c05
 8006bdc:	08006c1b 	.word	0x08006c1b
 8006be0:	08006c0b 	.word	0x08006c0b
 8006be4:	08006c1b 	.word	0x08006c1b
 8006be8:	08006c1b 	.word	0x08006c1b
 8006bec:	08006c1b 	.word	0x08006c1b
 8006bf0:	08006c13 	.word	0x08006c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf4:	f7fd fa44 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8006bf8:	61b8      	str	r0, [r7, #24]
        break;
 8006bfa:	e013      	b.n	8006c24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bfc:	f7fd fa54 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 8006c00:	61b8      	str	r0, [r7, #24]
        break;
 8006c02:	e00f      	b.n	8006c24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c04:	4b4b      	ldr	r3, [pc, #300]	@ (8006d34 <UART_SetConfig+0x4c4>)
 8006c06:	61bb      	str	r3, [r7, #24]
        break;
 8006c08:	e00c      	b.n	8006c24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c0a:	f7fd f927 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8006c0e:	61b8      	str	r0, [r7, #24]
        break;
 8006c10:	e008      	b.n	8006c24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c16:	61bb      	str	r3, [r7, #24]
        break;
 8006c18:	e004      	b.n	8006c24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	77bb      	strb	r3, [r7, #30]
        break;
 8006c22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d074      	beq.n	8006d14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	005a      	lsls	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	441a      	add	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b0f      	cmp	r3, #15
 8006c44:	d916      	bls.n	8006c74 <UART_SetConfig+0x404>
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4c:	d212      	bcs.n	8006c74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f023 030f 	bic.w	r3, r3, #15
 8006c56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	89fb      	ldrh	r3, [r7, #14]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	89fa      	ldrh	r2, [r7, #14]
 8006c70:	60da      	str	r2, [r3, #12]
 8006c72:	e04f      	b.n	8006d14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	77bb      	strb	r3, [r7, #30]
 8006c78:	e04c      	b.n	8006d14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c7a:	7ffb      	ldrb	r3, [r7, #31]
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d828      	bhi.n	8006cd2 <UART_SetConfig+0x462>
 8006c80:	a201      	add	r2, pc, #4	@ (adr r2, 8006c88 <UART_SetConfig+0x418>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cd3 	.word	0x08006cd3
 8006c98:	08006cc3 	.word	0x08006cc3
 8006c9c:	08006cd3 	.word	0x08006cd3
 8006ca0:	08006cd3 	.word	0x08006cd3
 8006ca4:	08006cd3 	.word	0x08006cd3
 8006ca8:	08006ccb 	.word	0x08006ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cac:	f7fd f9e8 	bl	8004080 <HAL_RCC_GetPCLK1Freq>
 8006cb0:	61b8      	str	r0, [r7, #24]
        break;
 8006cb2:	e013      	b.n	8006cdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb4:	f7fd f9f8 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 8006cb8:	61b8      	str	r0, [r7, #24]
        break;
 8006cba:	e00f      	b.n	8006cdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8006d34 <UART_SetConfig+0x4c4>)
 8006cbe:	61bb      	str	r3, [r7, #24]
        break;
 8006cc0:	e00c      	b.n	8006cdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fd f8cb 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8006cc6:	61b8      	str	r0, [r7, #24]
        break;
 8006cc8:	e008      	b.n	8006cdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cce:	61bb      	str	r3, [r7, #24]
        break;
 8006cd0:	e004      	b.n	8006cdc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	77bb      	strb	r3, [r7, #30]
        break;
 8006cda:	bf00      	nop
    }

    if (pclk != 0U)
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d018      	beq.n	8006d14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	085a      	lsrs	r2, r3, #1
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	441a      	add	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b0f      	cmp	r3, #15
 8006cfa:	d909      	bls.n	8006d10 <UART_SetConfig+0x4a0>
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d02:	d205      	bcs.n	8006d10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	e001      	b.n	8006d14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006d20:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	40007c00 	.word	0x40007c00
 8006d30:	40023800 	.word	0x40023800
 8006d34:	00f42400 	.word	0x00f42400

08006d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00a      	beq.n	8006dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01a      	beq.n	8006e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e36:	d10a      	bne.n	8006e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	605a      	str	r2, [r3, #4]
  }
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b098      	sub	sp, #96	@ 0x60
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e8c:	f7fb fb62 	bl	8002554 <HAL_GetTick>
 8006e90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0308 	and.w	r3, r3, #8
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d12e      	bne.n	8006efe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f88c 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d021      	beq.n	8006efe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e6      	bne.n	8006eba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e062      	b.n	8006fc4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d149      	bne.n	8006fa0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f14:	2200      	movs	r2, #0
 8006f16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f856 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d03c      	beq.n	8006fa0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	623b      	str	r3, [r7, #32]
   return(result);
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e6      	bne.n	8006f26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0301 	bic.w	r3, r3, #1
 8006f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3308      	adds	r3, #8
 8006f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f78:	61fa      	str	r2, [r7, #28]
 8006f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	69b9      	ldr	r1, [r7, #24]
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	617b      	str	r3, [r7, #20]
   return(result);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e5      	bne.n	8006f58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e011      	b.n	8006fc4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3758      	adds	r7, #88	@ 0x58
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fdc:	e04f      	b.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d04b      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7fb fab5 	bl	8002554 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e04e      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d037      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b80      	cmp	r3, #128	@ 0x80
 8007012:	d034      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d031      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b08      	cmp	r3, #8
 8007026:	d110      	bne.n	800704a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2208      	movs	r2, #8
 800702e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f8ff 	bl	8007234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2208      	movs	r2, #8
 800703a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e029      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007058:	d111      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f8e5 	bl	8007234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e00f      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4013      	ands	r3, r2
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	429a      	cmp	r2, r3
 800709a:	d0a0      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b096      	sub	sp, #88	@ 0x58
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2222      	movs	r2, #34	@ 0x22
 80070d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d028      	beq.n	800712e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e0:	4a3e      	ldr	r2, [pc, #248]	@ (80071dc <UART_Start_Receive_DMA+0x134>)
 80070e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e8:	4a3d      	ldr	r2, [pc, #244]	@ (80071e0 <UART_Start_Receive_DMA+0x138>)
 80070ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070f0:	4a3c      	ldr	r2, [pc, #240]	@ (80071e4 <UART_Start_Receive_DMA+0x13c>)
 80070f2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070f8:	2200      	movs	r2, #0
 80070fa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3324      	adds	r3, #36	@ 0x24
 8007106:	4619      	mov	r1, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710c:	461a      	mov	r2, r3
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	f7fb fc10 	bl	8002934 <HAL_DMA_Start_IT>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2210      	movs	r2, #16
 800711e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e051      	b.n	80071d2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d018      	beq.n	8007168 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800714a:	657b      	str	r3, [r7, #84]	@ 0x54
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007156:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800715a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e6      	bne.n	8007136 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007188:	637a      	str	r2, [r7, #52]	@ 0x34
 800718a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800718e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3308      	adds	r3, #8
 80071a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	613b      	str	r3, [r7, #16]
   return(result);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3308      	adds	r3, #8
 80071ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071bc:	623a      	str	r2, [r7, #32]
 80071be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	69f9      	ldr	r1, [r7, #28]
 80071c2:	6a3a      	ldr	r2, [r7, #32]
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e5      	bne.n	800719c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3758      	adds	r7, #88	@ 0x58
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	080073af 	.word	0x080073af
 80071e0:	080074d7 	.word	0x080074d7
 80071e4:	08007515 	.word	0x08007515

080071e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b089      	sub	sp, #36	@ 0x24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	61bb      	str	r3, [r7, #24]
 8007210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6979      	ldr	r1, [r7, #20]
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	613b      	str	r3, [r7, #16]
   return(result);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e6      	bne.n	80071f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007228:	bf00      	nop
 800722a:	3724      	adds	r7, #36	@ 0x24
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b095      	sub	sp, #84	@ 0x54
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007250:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800725a:	643b      	str	r3, [r7, #64]	@ 0x40
 800725c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007260:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e6      	bne.n	800723c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3308      	adds	r3, #8
 8007274:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	61fb      	str	r3, [r7, #28]
   return(result);
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3308      	adds	r3, #8
 800728c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800728e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007290:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e5      	bne.n	800726e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d118      	bne.n	80072dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f023 0310 	bic.w	r3, r3, #16
 80072be:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6979      	ldr	r1, [r7, #20]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	613b      	str	r3, [r7, #16]
   return(result);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e6      	bne.n	80072aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2220      	movs	r2, #32
 80072e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80072f0:	bf00      	nop
 80072f2:	3754      	adds	r7, #84	@ 0x54
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b090      	sub	sp, #64	@ 0x40
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007308:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007312:	d037      	beq.n	8007384 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007316:	2200      	movs	r2, #0
 8007318:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800731c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3308      	adds	r3, #8
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	623b      	str	r3, [r7, #32]
   return(result);
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007332:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800733c:	633a      	str	r2, [r7, #48]	@ 0x30
 800733e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800734a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	60fb      	str	r3, [r7, #12]
   return(result);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
 8007366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736e:	61fb      	str	r3, [r7, #28]
 8007370:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	69b9      	ldr	r1, [r7, #24]
 8007374:	69fa      	ldr	r2, [r7, #28]
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	617b      	str	r3, [r7, #20]
   return(result);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e6      	bne.n	8007350 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007382:	e002      	b.n	800738a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007384:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007386:	f7ff fa15 	bl	80067b4 <HAL_UART_TxCpltCallback>
}
 800738a:	bf00      	nop
 800738c:	3740      	adds	r7, #64	@ 0x40
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7ff fa11 	bl	80067c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b09c      	sub	sp, #112	@ 0x70
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073c4:	d071      	beq.n	80074aa <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80073c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073c8:	2200      	movs	r2, #0
 80073ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e6      	bne.n	80073ce <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3308      	adds	r3, #8
 8007406:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007412:	f023 0301 	bic.w	r3, r3, #1
 8007416:	667b      	str	r3, [r7, #100]	@ 0x64
 8007418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3308      	adds	r3, #8
 800741e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007420:	647a      	str	r2, [r7, #68]	@ 0x44
 8007422:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800742e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e5      	bne.n	8007400 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	623b      	str	r3, [r7, #32]
   return(result);
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800744a:	663b      	str	r3, [r7, #96]	@ 0x60
 800744c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007454:	633a      	str	r2, [r7, #48]	@ 0x30
 8007456:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800745a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e5      	bne.n	8007434 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800746a:	2220      	movs	r2, #32
 800746c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007474:	2b01      	cmp	r3, #1
 8007476:	d118      	bne.n	80074aa <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	60fb      	str	r3, [r7, #12]
   return(result);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f023 0310 	bic.w	r3, r3, #16
 800748c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800748e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007496:	61fb      	str	r3, [r7, #28]
 8007498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	69b9      	ldr	r1, [r7, #24]
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	617b      	str	r3, [r7, #20]
   return(result);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e6      	bne.n	8007478 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ac:	2200      	movs	r2, #0
 80074ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d107      	bne.n	80074c8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074be:	4619      	mov	r1, r3
 80074c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074c2:	f7f9 f9f7 	bl	80008b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074c6:	e002      	b.n	80074ce <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80074c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074ca:	f7ff f987 	bl	80067dc <HAL_UART_RxCpltCallback>
}
 80074ce:	bf00      	nop
 80074d0:	3770      	adds	r7, #112	@ 0x70
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2201      	movs	r2, #1
 80074e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d109      	bne.n	8007506 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074f8:	085b      	lsrs	r3, r3, #1
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	4619      	mov	r1, r3
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7f9 f9d8 	bl	80008b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007504:	e002      	b.n	800750c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff f972 	bl	80067f0 <HAL_UART_RxHalfCpltCallback>
}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007520:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007526:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800752e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753a:	2b80      	cmp	r3, #128	@ 0x80
 800753c:	d109      	bne.n	8007552 <UART_DMAError+0x3e>
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b21      	cmp	r3, #33	@ 0x21
 8007542:	d106      	bne.n	8007552 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2200      	movs	r2, #0
 8007548:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800754c:	6978      	ldr	r0, [r7, #20]
 800754e:	f7ff fe4b 	bl	80071e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755c:	2b40      	cmp	r3, #64	@ 0x40
 800755e:	d109      	bne.n	8007574 <UART_DMAError+0x60>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b22      	cmp	r3, #34	@ 0x22
 8007564:	d106      	bne.n	8007574 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2200      	movs	r2, #0
 800756a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800756e:	6978      	ldr	r0, [r7, #20]
 8007570:	f7ff fe60 	bl	8007234 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800757a:	f043 0210 	orr.w	r2, r3, #16
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007584:	6978      	ldr	r0, [r7, #20]
 8007586:	f7ff f93d 	bl	8006804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800758a:	bf00      	nop
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff f927 	bl	8006804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075b6:	bf00      	nop
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b088      	sub	sp, #32
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6979      	ldr	r1, [r7, #20]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	613b      	str	r3, [r7, #16]
   return(result);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e6      	bne.n	80075c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff f8d5 	bl	80067b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800760a:	bf00      	nop
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b08c      	sub	sp, #48	@ 0x30
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	4613      	mov	r3, r2
 800761e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007626:	2b20      	cmp	r3, #32
 8007628:	d142      	bne.n	80076b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e03b      	b.n	80076b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	461a      	mov	r2, r3
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff fd2b 	bl	80070a8 <UART_Start_Receive_DMA>
 8007652:	4603      	mov	r3, r0
 8007654:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007658:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800765c:	2b00      	cmp	r3, #0
 800765e:	d124      	bne.n	80076aa <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007664:	2b01      	cmp	r3, #1
 8007666:	d11d      	bne.n	80076a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2210      	movs	r2, #16
 800766e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	617b      	str	r3, [r7, #20]
   return(result);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f043 0310 	orr.w	r3, r3, #16
 8007684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007690:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6a39      	ldr	r1, [r7, #32]
 8007694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	61fb      	str	r3, [r7, #28]
   return(result);
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80076a2:	e002      	b.n	80076aa <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80076aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076ae:	e000      	b.n	80076b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
  }
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3730      	adds	r7, #48	@ 0x30
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076bc:	b084      	sub	sp, #16
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	f107 001c 	add.w	r0, r7, #28
 80076ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d121      	bne.n	800771a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	4b21      	ldr	r3, [pc, #132]	@ (800776c <USB_CoreInit+0xb0>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d105      	bne.n	800770e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa92 	bl	8007c38 <USB_CoreReset>
 8007714:	4603      	mov	r3, r0
 8007716:	73fb      	strb	r3, [r7, #15]
 8007718:	e010      	b.n	800773c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa86 	bl	8007c38 <USB_CoreReset>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800773c:	7fbb      	ldrb	r3, [r7, #30]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10b      	bne.n	800775a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f043 0206 	orr.w	r2, r3, #6
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f043 0220 	orr.w	r2, r3, #32
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800775a:	7bfb      	ldrb	r3, [r7, #15]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007766:	b004      	add	sp, #16
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	ffbdffbf 	.word	0xffbdffbf

08007770 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f023 0201 	bic.w	r2, r3, #1
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d115      	bne.n	80077e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077c0:	200a      	movs	r0, #10
 80077c2:	f7fa fed3 	bl	800256c <HAL_Delay>
      ms += 10U;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	330a      	adds	r3, #10
 80077ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fa25 	bl	8007c1c <USB_GetMode>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d01e      	beq.n	8007816 <USB_SetCurrentMode+0x84>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2bc7      	cmp	r3, #199	@ 0xc7
 80077dc:	d9f0      	bls.n	80077c0 <USB_SetCurrentMode+0x2e>
 80077de:	e01a      	b.n	8007816 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d115      	bne.n	8007812 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077f2:	200a      	movs	r0, #10
 80077f4:	f7fa feba 	bl	800256c <HAL_Delay>
      ms += 10U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	330a      	adds	r3, #10
 80077fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa0c 	bl	8007c1c <USB_GetMode>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <USB_SetCurrentMode+0x84>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2bc7      	cmp	r3, #199	@ 0xc7
 800780e:	d9f0      	bls.n	80077f2 <USB_SetCurrentMode+0x60>
 8007810:	e001      	b.n	8007816 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e005      	b.n	8007822 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2bc8      	cmp	r3, #200	@ 0xc8
 800781a:	d101      	bne.n	8007820 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800782c:	b084      	sub	sp, #16
 800782e:	b580      	push	{r7, lr}
 8007830:	b086      	sub	sp, #24
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800783a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007846:	2300      	movs	r3, #0
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	e009      	b.n	8007860 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	3340      	adds	r3, #64	@ 0x40
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	2200      	movs	r2, #0
 8007858:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	3301      	adds	r3, #1
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b0e      	cmp	r3, #14
 8007864:	d9f2      	bls.n	800784c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007866:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800786a:	2b00      	cmp	r3, #0
 800786c:	d11c      	bne.n	80078a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800787c:	f043 0302 	orr.w	r3, r3, #2
 8007880:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007886:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	e005      	b.n	80078b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078ba:	461a      	mov	r2, r3
 80078bc:	2300      	movs	r3, #0
 80078be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d10d      	bne.n	80078e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078d0:	2100      	movs	r1, #0
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f968 	bl	8007ba8 <USB_SetDevSpeed>
 80078d8:	e008      	b.n	80078ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078da:	2101      	movs	r1, #1
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f963 	bl	8007ba8 <USB_SetDevSpeed>
 80078e2:	e003      	b.n	80078ec <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078e4:	2103      	movs	r1, #3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f95e 	bl	8007ba8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078ec:	2110      	movs	r1, #16
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f8fa 	bl	8007ae8 <USB_FlushTxFifo>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f924 	bl	8007b4c <USB_FlushRxFifo>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007914:	461a      	mov	r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007920:	461a      	mov	r2, r3
 8007922:	2300      	movs	r3, #0
 8007924:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800792c:	461a      	mov	r2, r3
 800792e:	2300      	movs	r3, #0
 8007930:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007932:	2300      	movs	r3, #0
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	e043      	b.n	80079c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800794a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800794e:	d118      	bne.n	8007982 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007962:	461a      	mov	r2, r3
 8007964:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	e013      	b.n	8007994 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007978:	461a      	mov	r2, r3
 800797a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	e008      	b.n	8007994 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800798e:	461a      	mov	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a0:	461a      	mov	r2, r3
 80079a2:	2300      	movs	r3, #0
 80079a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b2:	461a      	mov	r2, r3
 80079b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	3301      	adds	r3, #1
 80079be:	613b      	str	r3, [r7, #16]
 80079c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079c4:	461a      	mov	r2, r3
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d3b5      	bcc.n	8007938 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079cc:	2300      	movs	r3, #0
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	e043      	b.n	8007a5a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079e8:	d118      	bne.n	8007a1c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fc:	461a      	mov	r2, r3
 80079fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	e013      	b.n	8007a2e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a12:	461a      	mov	r2, r3
 8007a14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	e008      	b.n	8007a2e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a28:	461a      	mov	r2, r3
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	3301      	adds	r3, #1
 8007a58:	613b      	str	r3, [r7, #16]
 8007a5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a5e:	461a      	mov	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d3b5      	bcc.n	80079d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	f043 0210 	orr.w	r2, r3, #16
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699a      	ldr	r2, [r3, #24]
 8007aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae0 <USB_DevInit+0x2b4>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007aa8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f043 0208 	orr.w	r2, r3, #8
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007abc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d105      	bne.n	8007ad0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699a      	ldr	r2, [r3, #24]
 8007ac8:	4b06      	ldr	r3, [pc, #24]	@ (8007ae4 <USB_DevInit+0x2b8>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007adc:	b004      	add	sp, #16
 8007ade:	4770      	bx	lr
 8007ae0:	803c3800 	.word	0x803c3800
 8007ae4:	40000004 	.word	0x40000004

08007ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b02:	d901      	bls.n	8007b08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e01b      	b.n	8007b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	daf2      	bge.n	8007af6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	019b      	lsls	r3, r3, #6
 8007b18:	f043 0220 	orr.w	r2, r3, #32
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3301      	adds	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b2c:	d901      	bls.n	8007b32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e006      	b.n	8007b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d0f0      	beq.n	8007b20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b64:	d901      	bls.n	8007b6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e018      	b.n	8007b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	daf2      	bge.n	8007b58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2210      	movs	r2, #16
 8007b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b88:	d901      	bls.n	8007b8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e006      	b.n	8007b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0310 	and.w	r3, r3, #16
 8007b96:	2b10      	cmp	r3, #16
 8007b98:	d0f0      	beq.n	8007b7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bf4:	f023 0303 	bic.w	r3, r3, #3
 8007bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c08:	f043 0302 	orr.w	r3, r3, #2
 8007c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f003 0301 	and.w	r3, r3, #1
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c50:	d901      	bls.n	8007c56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e01b      	b.n	8007c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	daf2      	bge.n	8007c44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f043 0201 	orr.w	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3301      	adds	r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c7a:	d901      	bls.n	8007c80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e006      	b.n	8007c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d0f0      	beq.n	8007c6e <USB_CoreReset+0x36>

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c9a:	b480      	push	{r7}
 8007c9c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007c9e:	bf00      	nop
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cae:	f3ef 8305 	mrs	r3, IPSR
 8007cb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10f      	bne.n	8007cda <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cba:	f3ef 8310 	mrs	r3, PRIMASK
 8007cbe:	607b      	str	r3, [r7, #4]
  return(result);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8007cca:	603b      	str	r3, [r7, #0]
  return(result);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d007      	beq.n	8007ce2 <osKernelInitialize+0x3a>
 8007cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d0c <osKernelInitialize+0x64>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d103      	bne.n	8007ce2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007cda:	f06f 0305 	mvn.w	r3, #5
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e00c      	b.n	8007cfc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8007d0c <osKernelInitialize+0x64>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d105      	bne.n	8007cf6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cea:	4b08      	ldr	r3, [pc, #32]	@ (8007d0c <osKernelInitialize+0x64>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	e002      	b.n	8007cfc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	20000a1c 	.word	0x20000a1c

08007d10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d16:	f3ef 8305 	mrs	r3, IPSR
 8007d1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10f      	bne.n	8007d42 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d22:	f3ef 8310 	mrs	r3, PRIMASK
 8007d26:	607b      	str	r3, [r7, #4]
  return(result);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d105      	bne.n	8007d3a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8007d32:	603b      	str	r3, [r7, #0]
  return(result);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d007      	beq.n	8007d4a <osKernelStart+0x3a>
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007d78 <osKernelStart+0x68>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d103      	bne.n	8007d4a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007d42:	f06f 0305 	mvn.w	r3, #5
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e010      	b.n	8007d6c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d78 <osKernelStart+0x68>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d109      	bne.n	8007d66 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d52:	f7ff ffa2 	bl	8007c9a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d56:	4b08      	ldr	r3, [pc, #32]	@ (8007d78 <osKernelStart+0x68>)
 8007d58:	2202      	movs	r2, #2
 8007d5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d5c:	f001 f8ca 	bl	8008ef4 <vTaskStartScheduler>
      stat = osOK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e002      	b.n	8007d6c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007d66:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20000a1c 	.word	0x20000a1c

08007d7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b090      	sub	sp, #64	@ 0x40
 8007d80:	af04      	add	r7, sp, #16
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d8c:	f3ef 8305 	mrs	r3, IPSR
 8007d90:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d92:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f040 808f 	bne.w	8007eb8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d105      	bne.n	8007db2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007da6:	f3ef 8311 	mrs	r3, BASEPRI
 8007daa:	617b      	str	r3, [r7, #20]
  return(result);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <osThreadNew+0x3e>
 8007db2:	4b44      	ldr	r3, [pc, #272]	@ (8007ec4 <osThreadNew+0x148>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d07e      	beq.n	8007eb8 <osThreadNew+0x13c>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d07b      	beq.n	8007eb8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007dc0:	2380      	movs	r3, #128	@ 0x80
 8007dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007dc4:	2318      	movs	r3, #24
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d045      	beq.n	8007e64 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <osThreadNew+0x6a>
        name = attr->name;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <osThreadNew+0x90>
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	2b38      	cmp	r3, #56	@ 0x38
 8007dfe:	d805      	bhi.n	8007e0c <osThreadNew+0x90>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <osThreadNew+0x94>
        return (NULL);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e054      	b.n	8007eba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	089b      	lsrs	r3, r3, #2
 8007e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00e      	beq.n	8007e46 <osThreadNew+0xca>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b5b      	cmp	r3, #91	@ 0x5b
 8007e2e:	d90a      	bls.n	8007e46 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d006      	beq.n	8007e46 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <osThreadNew+0xca>
        mem = 1;
 8007e40:	2301      	movs	r3, #1
 8007e42:	623b      	str	r3, [r7, #32]
 8007e44:	e010      	b.n	8007e68 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10c      	bne.n	8007e68 <osThreadNew+0xec>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d108      	bne.n	8007e68 <osThreadNew+0xec>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <osThreadNew+0xec>
          mem = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	623b      	str	r3, [r7, #32]
 8007e62:	e001      	b.n	8007e68 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d110      	bne.n	8007e90 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e76:	9202      	str	r2, [sp, #8]
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fe4f 	bl	8008b28 <xTaskCreateStatic>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	613b      	str	r3, [r7, #16]
 8007e8e:	e013      	b.n	8007eb8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d110      	bne.n	8007eb8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	f107 0310 	add.w	r3, r7, #16
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 fea3 	bl	8008bf4 <xTaskCreate>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d001      	beq.n	8007eb8 <osThreadNew+0x13c>
          hTask = NULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007eb8:	693b      	ldr	r3, [r7, #16]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3730      	adds	r7, #48	@ 0x30
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000a1c 	.word	0x20000a1c

08007ec8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ed0:	f3ef 8305 	mrs	r3, IPSR
 8007ed4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ed6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10f      	bne.n	8007efc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007edc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d105      	bne.n	8007ef4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8007eec:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d007      	beq.n	8007f04 <osDelay+0x3c>
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8007f20 <osDelay+0x58>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d103      	bne.n	8007f04 <osDelay+0x3c>
    stat = osErrorISR;
 8007efc:	f06f 0305 	mvn.w	r3, #5
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e007      	b.n	8007f14 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 ffb8 	bl	8008e84 <vTaskDelay>
    }
  }

  return (stat);
 8007f14:	697b      	ldr	r3, [r7, #20]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000a1c 	.word	0x20000a1c

08007f24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a07      	ldr	r2, [pc, #28]	@ (8007f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	4a06      	ldr	r2, [pc, #24]	@ (8007f54 <vApplicationGetIdleTaskMemory+0x30>)
 8007f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2280      	movs	r2, #128	@ 0x80
 8007f40:	601a      	str	r2, [r3, #0]
}
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	20000a20 	.word	0x20000a20
 8007f54:	20000a7c 	.word	0x20000a7c

08007f58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4a07      	ldr	r2, [pc, #28]	@ (8007f84 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	4a06      	ldr	r2, [pc, #24]	@ (8007f88 <vApplicationGetTimerTaskMemory+0x30>)
 8007f6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f76:	601a      	str	r2, [r3, #0]
}
 8007f78:	bf00      	nop
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	20000c7c 	.word	0x20000c7c
 8007f88:	20000cd8 	.word	0x20000cd8

08007f8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f103 0208 	add.w	r2, r3, #8
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f103 0208 	add.w	r2, r3, #8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f103 0208 	add.w	r2, r3, #8
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fda:	bf00      	nop
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	601a      	str	r2, [r3, #0]
}
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008044:	d103      	bne.n	800804e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e00c      	b.n	8008068 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3308      	adds	r3, #8
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	e002      	b.n	800805c <vListInsert+0x2e>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	429a      	cmp	r2, r3
 8008066:	d2f6      	bcs.n	8008056 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
}
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6892      	ldr	r2, [r2, #8]
 80080b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6852      	ldr	r2, [r2, #4]
 80080c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d103      	bne.n	80080d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	1e5a      	subs	r2, r3, #1
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10d      	bne.n	8008124 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800811e:	bf00      	nop
 8008120:	bf00      	nop
 8008122:	e7fd      	b.n	8008120 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008124:	f002 f8aa 	bl	800a27c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008130:	68f9      	ldr	r1, [r7, #12]
 8008132:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008134:	fb01 f303 	mul.w	r3, r1, r3
 8008138:	441a      	add	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008154:	3b01      	subs	r3, #1
 8008156:	68f9      	ldr	r1, [r7, #12]
 8008158:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800815a:	fb01 f303 	mul.w	r3, r1, r3
 800815e:	441a      	add	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	22ff      	movs	r2, #255	@ 0xff
 8008168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	22ff      	movs	r2, #255	@ 0xff
 8008170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d114      	bne.n	80081a4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01a      	beq.n	80081b8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3310      	adds	r3, #16
 8008186:	4618      	mov	r0, r3
 8008188:	f001 f950 	bl	800942c <xTaskRemoveFromEventList>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d012      	beq.n	80081b8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008192:	4b0d      	ldr	r3, [pc, #52]	@ (80081c8 <xQueueGenericReset+0xd4>)
 8008194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	e009      	b.n	80081b8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3310      	adds	r3, #16
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff feef 	bl	8007f8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3324      	adds	r3, #36	@ 0x24
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff feea 	bl	8007f8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80081b8:	f002 f896 	bl	800a2e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80081bc:	2301      	movs	r3, #1
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08e      	sub	sp, #56	@ 0x38
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10d      	bne.n	80081fc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	b672      	cpsid	i
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	b662      	cpsie	i
 80081f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	e7fd      	b.n	80081f8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10d      	bne.n	800821e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	b672      	cpsid	i
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	b662      	cpsie	i
 8008216:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <xQueueGenericCreateStatic+0x5e>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <xQueueGenericCreateStatic+0x62>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <xQueueGenericCreateStatic+0x64>
 800822e:	2300      	movs	r3, #0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10d      	bne.n	8008250 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008238:	b672      	cpsid	i
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	b662      	cpsie	i
 8008248:	623b      	str	r3, [r7, #32]
}
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	e7fd      	b.n	800824c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <xQueueGenericCreateStatic+0x90>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <xQueueGenericCreateStatic+0x94>
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <xQueueGenericCreateStatic+0x96>
 8008260:	2300      	movs	r3, #0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10d      	bne.n	8008282 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826a:	b672      	cpsid	i
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	b662      	cpsie	i
 800827a:	61fb      	str	r3, [r7, #28]
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	e7fd      	b.n	800827e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008282:	2350      	movs	r3, #80	@ 0x50
 8008284:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b50      	cmp	r3, #80	@ 0x50
 800828a:	d00d      	beq.n	80082a8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008290:	b672      	cpsid	i
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	b662      	cpsie	i
 80082a0:	61bb      	str	r3, [r7, #24]
}
 80082a2:	bf00      	nop
 80082a4:	bf00      	nop
 80082a6:	e7fd      	b.n	80082a4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80082ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00d      	beq.n	80082d0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80082c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	4613      	mov	r3, r2
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	68b9      	ldr	r1, [r7, #8]
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 f805 	bl	80082da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3730      	adds	r7, #48	@ 0x30
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	69ba      	ldr	r2, [r7, #24]
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	e002      	b.n	80082fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008308:	2101      	movs	r1, #1
 800830a:	69b8      	ldr	r0, [r7, #24]
 800830c:	f7ff fef2 	bl	80080f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008318:	bf00      	nop
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08e      	sub	sp, #56	@ 0x38
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800832e:	2300      	movs	r3, #0
 8008330:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10d      	bne.n	8008358 <xQueueGenericSend+0x38>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	b672      	cpsid	i
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	b662      	cpsie	i
 8008350:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	e7fd      	b.n	8008354 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d103      	bne.n	8008366 <xQueueGenericSend+0x46>
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <xQueueGenericSend+0x4a>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <xQueueGenericSend+0x4c>
 800836a:	2300      	movs	r3, #0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10d      	bne.n	800838c <xQueueGenericSend+0x6c>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	b672      	cpsid	i
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	b662      	cpsie	i
 8008384:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d103      	bne.n	800839a <xQueueGenericSend+0x7a>
 8008392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008396:	2b01      	cmp	r3, #1
 8008398:	d101      	bne.n	800839e <xQueueGenericSend+0x7e>
 800839a:	2301      	movs	r3, #1
 800839c:	e000      	b.n	80083a0 <xQueueGenericSend+0x80>
 800839e:	2300      	movs	r3, #0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10d      	bne.n	80083c0 <xQueueGenericSend+0xa0>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a8:	b672      	cpsid	i
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	b662      	cpsie	i
 80083b8:	623b      	str	r3, [r7, #32]
}
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	e7fd      	b.n	80083bc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083c0:	f001 f9fc 	bl	80097bc <xTaskGetSchedulerState>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <xQueueGenericSend+0xb0>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <xQueueGenericSend+0xb4>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e000      	b.n	80083d6 <xQueueGenericSend+0xb6>
 80083d4:	2300      	movs	r3, #0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10d      	bne.n	80083f6 <xQueueGenericSend+0xd6>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	b672      	cpsid	i
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	b662      	cpsie	i
 80083ee:	61fb      	str	r3, [r7, #28]
}
 80083f0:	bf00      	nop
 80083f2:	bf00      	nop
 80083f4:	e7fd      	b.n	80083f2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083f6:	f001 ff41 	bl	800a27c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008402:	429a      	cmp	r2, r3
 8008404:	d302      	bcc.n	800840c <xQueueGenericSend+0xec>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d129      	bne.n	8008460 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008412:	f000 fa1b 	bl	800884c <prvCopyDataToQueue>
 8008416:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	d010      	beq.n	8008442 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	3324      	adds	r3, #36	@ 0x24
 8008424:	4618      	mov	r0, r3
 8008426:	f001 f801 	bl	800942c <xTaskRemoveFromEventList>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d013      	beq.n	8008458 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008430:	4b3f      	ldr	r3, [pc, #252]	@ (8008530 <xQueueGenericSend+0x210>)
 8008432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	e00a      	b.n	8008458 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d007      	beq.n	8008458 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008448:	4b39      	ldr	r3, [pc, #228]	@ (8008530 <xQueueGenericSend+0x210>)
 800844a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008458:	f001 ff46 	bl	800a2e8 <vPortExitCritical>
				return pdPASS;
 800845c:	2301      	movs	r3, #1
 800845e:	e063      	b.n	8008528 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008466:	f001 ff3f 	bl	800a2e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800846a:	2300      	movs	r3, #0
 800846c:	e05c      	b.n	8008528 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800846e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008470:	2b00      	cmp	r3, #0
 8008472:	d106      	bne.n	8008482 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008474:	f107 0314 	add.w	r3, r7, #20
 8008478:	4618      	mov	r0, r3
 800847a:	f001 f83d 	bl	80094f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800847e:	2301      	movs	r3, #1
 8008480:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008482:	f001 ff31 	bl	800a2e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008486:	f000 fda1 	bl	8008fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800848a:	f001 fef7 	bl	800a27c <vPortEnterCritical>
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008494:	b25b      	sxtb	r3, r3
 8008496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849a:	d103      	bne.n	80084a4 <xQueueGenericSend+0x184>
 800849c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084aa:	b25b      	sxtb	r3, r3
 80084ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b0:	d103      	bne.n	80084ba <xQueueGenericSend+0x19a>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084ba:	f001 ff15 	bl	800a2e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084be:	1d3a      	adds	r2, r7, #4
 80084c0:	f107 0314 	add.w	r3, r7, #20
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 f82c 	bl	8009524 <xTaskCheckForTimeOut>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d124      	bne.n	800851c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084d4:	f000 fab2 	bl	8008a3c <prvIsQueueFull>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d018      	beq.n	8008510 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	3310      	adds	r3, #16
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	4611      	mov	r1, r2
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 ff4a 	bl	8009380 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084ee:	f000 fa3d 	bl	800896c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084f2:	f000 fd79 	bl	8008fe8 <xTaskResumeAll>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f47f af7c 	bne.w	80083f6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80084fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008530 <xQueueGenericSend+0x210>)
 8008500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	e772      	b.n	80083f6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008510:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008512:	f000 fa2b 	bl	800896c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008516:	f000 fd67 	bl	8008fe8 <xTaskResumeAll>
 800851a:	e76c      	b.n	80083f6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800851c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800851e:	f000 fa25 	bl	800896c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008522:	f000 fd61 	bl	8008fe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008526:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008528:	4618      	mov	r0, r3
 800852a:	3738      	adds	r7, #56	@ 0x38
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	e000ed04 	.word	0xe000ed04

08008534 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08e      	sub	sp, #56	@ 0x38
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10d      	bne.n	8008568 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008550:	b672      	cpsid	i
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	b662      	cpsie	i
 8008560:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	e7fd      	b.n	8008564 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <xQueueGenericSendFromISR+0x42>
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <xQueueGenericSendFromISR+0x46>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <xQueueGenericSendFromISR+0x48>
 800857a:	2300      	movs	r3, #0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10d      	bne.n	800859c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008584:	b672      	cpsid	i
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	b662      	cpsie	i
 8008594:	623b      	str	r3, [r7, #32]
}
 8008596:	bf00      	nop
 8008598:	bf00      	nop
 800859a:	e7fd      	b.n	8008598 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d103      	bne.n	80085aa <xQueueGenericSendFromISR+0x76>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <xQueueGenericSendFromISR+0x7a>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e000      	b.n	80085b0 <xQueueGenericSendFromISR+0x7c>
 80085ae:	2300      	movs	r3, #0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10d      	bne.n	80085d0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b8:	b672      	cpsid	i
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	b662      	cpsie	i
 80085c8:	61fb      	str	r3, [r7, #28]
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	e7fd      	b.n	80085cc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085d0:	f001 ff3c 	bl	800a44c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085d4:	f3ef 8211 	mrs	r2, BASEPRI
 80085d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085dc:	b672      	cpsid	i
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	b662      	cpsie	i
 80085ec:	61ba      	str	r2, [r7, #24]
 80085ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d302      	bcc.n	8008606 <xQueueGenericSendFromISR+0xd2>
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d12c      	bne.n	8008660 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800860c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	68b9      	ldr	r1, [r7, #8]
 8008614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008616:	f000 f919 	bl	800884c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800861a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008622:	d112      	bne.n	800864a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	d016      	beq.n	800865a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	3324      	adds	r3, #36	@ 0x24
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fefb 	bl	800942c <xTaskRemoveFromEventList>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00e      	beq.n	800865a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00b      	beq.n	800865a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	e007      	b.n	800865a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800864a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800864e:	3301      	adds	r3, #1
 8008650:	b2db      	uxtb	r3, r3
 8008652:	b25a      	sxtb	r2, r3
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800865a:	2301      	movs	r3, #1
 800865c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800865e:	e001      	b.n	8008664 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008660:	2300      	movs	r3, #0
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
 8008664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008666:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800866e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008672:	4618      	mov	r0, r3
 8008674:	3738      	adds	r7, #56	@ 0x38
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08c      	sub	sp, #48	@ 0x30
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008688:	2300      	movs	r3, #0
 800868a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10d      	bne.n	80086b2 <xQueueReceive+0x36>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869a:	b672      	cpsid	i
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	b662      	cpsie	i
 80086aa:	623b      	str	r3, [r7, #32]
}
 80086ac:	bf00      	nop
 80086ae:	bf00      	nop
 80086b0:	e7fd      	b.n	80086ae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <xQueueReceive+0x44>
 80086b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <xQueueReceive+0x48>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e000      	b.n	80086c6 <xQueueReceive+0x4a>
 80086c4:	2300      	movs	r3, #0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10d      	bne.n	80086e6 <xQueueReceive+0x6a>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ce:	b672      	cpsid	i
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	b662      	cpsie	i
 80086de:	61fb      	str	r3, [r7, #28]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086e6:	f001 f869 	bl	80097bc <xTaskGetSchedulerState>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <xQueueReceive+0x7a>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <xQueueReceive+0x7e>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <xQueueReceive+0x80>
 80086fa:	2300      	movs	r3, #0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10d      	bne.n	800871c <xQueueReceive+0xa0>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	b672      	cpsid	i
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	b662      	cpsie	i
 8008714:	61bb      	str	r3, [r7, #24]
}
 8008716:	bf00      	nop
 8008718:	bf00      	nop
 800871a:	e7fd      	b.n	8008718 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800871c:	f001 fdae 	bl	800a27c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008724:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008728:	2b00      	cmp	r3, #0
 800872a:	d01f      	beq.n	800876c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008730:	f000 f8f6 	bl	8008920 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	1e5a      	subs	r2, r3, #1
 8008738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00f      	beq.n	8008764 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	3310      	adds	r3, #16
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fe6f 	bl	800942c <xTaskRemoveFromEventList>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d007      	beq.n	8008764 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008754:	4b3c      	ldr	r3, [pc, #240]	@ (8008848 <xQueueReceive+0x1cc>)
 8008756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008764:	f001 fdc0 	bl	800a2e8 <vPortExitCritical>
				return pdPASS;
 8008768:	2301      	movs	r3, #1
 800876a:	e069      	b.n	8008840 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d103      	bne.n	800877a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008772:	f001 fdb9 	bl	800a2e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008776:	2300      	movs	r3, #0
 8008778:	e062      	b.n	8008840 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800877a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d106      	bne.n	800878e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008780:	f107 0310 	add.w	r3, r7, #16
 8008784:	4618      	mov	r0, r3
 8008786:	f000 feb7 	bl	80094f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800878a:	2301      	movs	r3, #1
 800878c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800878e:	f001 fdab 	bl	800a2e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008792:	f000 fc1b 	bl	8008fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008796:	f001 fd71 	bl	800a27c <vPortEnterCritical>
 800879a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087a0:	b25b      	sxtb	r3, r3
 80087a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a6:	d103      	bne.n	80087b0 <xQueueReceive+0x134>
 80087a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087b6:	b25b      	sxtb	r3, r3
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d103      	bne.n	80087c6 <xQueueReceive+0x14a>
 80087be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087c6:	f001 fd8f 	bl	800a2e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087ca:	1d3a      	adds	r2, r7, #4
 80087cc:	f107 0310 	add.w	r3, r7, #16
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fea6 	bl	8009524 <xTaskCheckForTimeOut>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d123      	bne.n	8008826 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087e0:	f000 f916 	bl	8008a10 <prvIsQueueEmpty>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d017      	beq.n	800881a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ec:	3324      	adds	r3, #36	@ 0x24
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	4611      	mov	r1, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 fdc4 	bl	8009380 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087fa:	f000 f8b7 	bl	800896c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087fe:	f000 fbf3 	bl	8008fe8 <xTaskResumeAll>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d189      	bne.n	800871c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008808:	4b0f      	ldr	r3, [pc, #60]	@ (8008848 <xQueueReceive+0x1cc>)
 800880a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	e780      	b.n	800871c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800881a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800881c:	f000 f8a6 	bl	800896c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008820:	f000 fbe2 	bl	8008fe8 <xTaskResumeAll>
 8008824:	e77a      	b.n	800871c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008828:	f000 f8a0 	bl	800896c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800882c:	f000 fbdc 	bl	8008fe8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008830:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008832:	f000 f8ed 	bl	8008a10 <prvIsQueueEmpty>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	f43f af6f 	beq.w	800871c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800883e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008840:	4618      	mov	r0, r3
 8008842:	3730      	adds	r7, #48	@ 0x30
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008858:	2300      	movs	r3, #0
 800885a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008860:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10d      	bne.n	8008886 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d14d      	bne.n	800890e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 ffbe 	bl	80097f8 <xTaskPriorityDisinherit>
 800887c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	609a      	str	r2, [r3, #8]
 8008884:	e043      	b.n	800890e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d119      	bne.n	80088c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6858      	ldr	r0, [r3, #4]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008894:	461a      	mov	r2, r3
 8008896:	68b9      	ldr	r1, [r7, #8]
 8008898:	f003 f93d 	bl	800bb16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a4:	441a      	add	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d32b      	bcc.n	800890e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	605a      	str	r2, [r3, #4]
 80088be:	e026      	b.n	800890e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	68d8      	ldr	r0, [r3, #12]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c8:	461a      	mov	r2, r3
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	f003 f923 	bl	800bb16 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d8:	425b      	negs	r3, r3
 80088da:	441a      	add	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	68da      	ldr	r2, [r3, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d207      	bcs.n	80088fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f4:	425b      	negs	r3, r3
 80088f6:	441a      	add	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d105      	bne.n	800890e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	3b01      	subs	r3, #1
 800890c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008916:	697b      	ldr	r3, [r7, #20]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	d018      	beq.n	8008964 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68da      	ldr	r2, [r3, #12]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893a:	441a      	add	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	429a      	cmp	r2, r3
 800894a:	d303      	bcc.n	8008954 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68d9      	ldr	r1, [r3, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895c:	461a      	mov	r2, r3
 800895e:	6838      	ldr	r0, [r7, #0]
 8008960:	f003 f8d9 	bl	800bb16 <memcpy>
	}
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008974:	f001 fc82 	bl	800a27c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800897e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008980:	e011      	b.n	80089a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	d012      	beq.n	80089b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3324      	adds	r3, #36	@ 0x24
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fd4c 	bl	800942c <xTaskRemoveFromEventList>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800899a:	f000 fe2b 	bl	80095f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dce9      	bgt.n	8008982 <prvUnlockQueue+0x16>
 80089ae:	e000      	b.n	80089b2 <prvUnlockQueue+0x46>
					break;
 80089b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	22ff      	movs	r2, #255	@ 0xff
 80089b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80089ba:	f001 fc95 	bl	800a2e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089be:	f001 fc5d 	bl	800a27c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ca:	e011      	b.n	80089f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d012      	beq.n	80089fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3310      	adds	r3, #16
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 fd27 	bl	800942c <xTaskRemoveFromEventList>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089e4:	f000 fe06 	bl	80095f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dce9      	bgt.n	80089cc <prvUnlockQueue+0x60>
 80089f8:	e000      	b.n	80089fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	22ff      	movs	r2, #255	@ 0xff
 8008a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a04:	f001 fc70 	bl	800a2e8 <vPortExitCritical>
}
 8008a08:	bf00      	nop
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a18:	f001 fc30 	bl	800a27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d102      	bne.n	8008a2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	e001      	b.n	8008a2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a2e:	f001 fc5b 	bl	800a2e8 <vPortExitCritical>

	return xReturn;
 8008a32:	68fb      	ldr	r3, [r7, #12]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a44:	f001 fc1a 	bl	800a27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d102      	bne.n	8008a5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a54:	2301      	movs	r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	e001      	b.n	8008a5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a5e:	f001 fc43 	bl	800a2e8 <vPortExitCritical>

	return xReturn;
 8008a62:	68fb      	ldr	r3, [r7, #12]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e014      	b.n	8008aa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8008abc <vQueueAddToRegistry+0x50>)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a88:	490c      	ldr	r1, [pc, #48]	@ (8008abc <vQueueAddToRegistry+0x50>)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a92:	4a0a      	ldr	r2, [pc, #40]	@ (8008abc <vQueueAddToRegistry+0x50>)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	4413      	add	r3, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a9e:	e006      	b.n	8008aae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b07      	cmp	r3, #7
 8008aaa:	d9e7      	bls.n	8008a7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008aac:	bf00      	nop
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	200010d8 	.word	0x200010d8

08008ac0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ad0:	f001 fbd4 	bl	800a27c <vPortEnterCritical>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ada:	b25b      	sxtb	r3, r3
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae0:	d103      	bne.n	8008aea <vQueueWaitForMessageRestricted+0x2a>
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008af0:	b25b      	sxtb	r3, r3
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d103      	bne.n	8008b00 <vQueueWaitForMessageRestricted+0x40>
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b00:	f001 fbf2 	bl	800a2e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d106      	bne.n	8008b1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	3324      	adds	r3, #36	@ 0x24
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 fc5b 	bl	80093d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b1a:	6978      	ldr	r0, [r7, #20]
 8008b1c:	f7ff ff26 	bl	800896c <prvUnlockQueue>
	}
 8008b20:	bf00      	nop
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08e      	sub	sp, #56	@ 0x38
 8008b2c:	af04      	add	r7, sp, #16
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
 8008b34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10d      	bne.n	8008b58 <xTaskCreateStatic+0x30>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b40:	b672      	cpsid	i
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	b662      	cpsie	i
 8008b50:	623b      	str	r3, [r7, #32]
}
 8008b52:	bf00      	nop
 8008b54:	bf00      	nop
 8008b56:	e7fd      	b.n	8008b54 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10d      	bne.n	8008b7a <xTaskCreateStatic+0x52>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	b672      	cpsid	i
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	b662      	cpsie	i
 8008b72:	61fb      	str	r3, [r7, #28]
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	e7fd      	b.n	8008b76 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b7a:	235c      	movs	r3, #92	@ 0x5c
 8008b7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b82:	d00d      	beq.n	8008ba0 <xTaskCreateStatic+0x78>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b88:	b672      	cpsid	i
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	b662      	cpsie	i
 8008b98:	61bb      	str	r3, [r7, #24]
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ba0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01e      	beq.n	8008be6 <xTaskCreateStatic+0xbe>
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01b      	beq.n	8008be6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bb6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9303      	str	r3, [sp, #12]
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc6:	9302      	str	r3, [sp, #8]
 8008bc8:	f107 0314 	add.w	r3, r7, #20
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 f850 	bl	8008c7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008be0:	f000 f8e0 	bl	8008da4 <prvAddNewTaskToReadyList>
 8008be4:	e001      	b.n	8008bea <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008bea:	697b      	ldr	r3, [r7, #20]
	}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3728      	adds	r7, #40	@ 0x28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08c      	sub	sp, #48	@ 0x30
 8008bf8:	af04      	add	r7, sp, #16
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	603b      	str	r3, [r7, #0]
 8008c00:	4613      	mov	r3, r2
 8008c02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 fc65 	bl	800a4d8 <pvPortMalloc>
 8008c0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00e      	beq.n	8008c34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c16:	205c      	movs	r0, #92	@ 0x5c
 8008c18:	f001 fc5e 	bl	800a4d8 <pvPortMalloc>
 8008c1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c2a:	e005      	b.n	8008c38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c2c:	6978      	ldr	r0, [r7, #20]
 8008c2e:	f001 fd21 	bl	800a674 <vPortFree>
 8008c32:	e001      	b.n	8008c38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d017      	beq.n	8008c6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c46:	88fa      	ldrh	r2, [r7, #6]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9303      	str	r3, [sp, #12]
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	9302      	str	r3, [sp, #8]
 8008c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	68b9      	ldr	r1, [r7, #8]
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 f80e 	bl	8008c7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c62:	69f8      	ldr	r0, [r7, #28]
 8008c64:	f000 f89e 	bl	8008da4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	61bb      	str	r3, [r7, #24]
 8008c6c:	e002      	b.n	8008c74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c74:	69bb      	ldr	r3, [r7, #24]
	}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b088      	sub	sp, #32
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	461a      	mov	r2, r3
 8008c96:	21a5      	movs	r1, #165	@ 0xa5
 8008c98:	f002 fe62 	bl	800b960 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008ca6:	440b      	add	r3, r1
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	f023 0307 	bic.w	r3, r3, #7
 8008cb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00d      	beq.n	8008cdc <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	b672      	cpsid	i
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	b662      	cpsie	i
 8008cd4:	617b      	str	r3, [r7, #20]
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	e7fd      	b.n	8008cd8 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d01f      	beq.n	8008d22 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	e012      	b.n	8008d0e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	7819      	ldrb	r1, [r3, #0]
 8008cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3334      	adds	r3, #52	@ 0x34
 8008cf8:	460a      	mov	r2, r1
 8008cfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	4413      	add	r3, r2
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d006      	beq.n	8008d16 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	61fb      	str	r3, [r7, #28]
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	2b0f      	cmp	r3, #15
 8008d12:	d9e9      	bls.n	8008ce8 <prvInitialiseNewTask+0x6a>
 8008d14:	e000      	b.n	8008d18 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008d16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d20:	e003      	b.n	8008d2a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2c:	2b37      	cmp	r3, #55	@ 0x37
 8008d2e:	d901      	bls.n	8008d34 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d30:	2337      	movs	r3, #55	@ 0x37
 8008d32:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d38:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d3e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d42:	2200      	movs	r2, #0
 8008d44:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	3304      	adds	r3, #4
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff f93e 	bl	8007fcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d52:	3318      	adds	r3, #24
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7ff f939 	bl	8007fcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d6e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d72:	2200      	movs	r2, #0
 8008d74:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	68f9      	ldr	r1, [r7, #12]
 8008d82:	69b8      	ldr	r0, [r7, #24]
 8008d84:	f001 f968 	bl	800a058 <pxPortInitialiseStack>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d9a:	bf00      	nop
 8008d9c:	3720      	adds	r7, #32
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008dac:	f001 fa66 	bl	800a27c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008db0:	4b2d      	ldr	r3, [pc, #180]	@ (8008e68 <prvAddNewTaskToReadyList+0xc4>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3301      	adds	r3, #1
 8008db6:	4a2c      	ldr	r2, [pc, #176]	@ (8008e68 <prvAddNewTaskToReadyList+0xc4>)
 8008db8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008dba:	4b2c      	ldr	r3, [pc, #176]	@ (8008e6c <prvAddNewTaskToReadyList+0xc8>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d109      	bne.n	8008dd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e6c <prvAddNewTaskToReadyList+0xc8>)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008dc8:	4b27      	ldr	r3, [pc, #156]	@ (8008e68 <prvAddNewTaskToReadyList+0xc4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d110      	bne.n	8008df2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008dd0:	f000 fc34 	bl	800963c <prvInitialiseTaskLists>
 8008dd4:	e00d      	b.n	8008df2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008dd6:	4b26      	ldr	r3, [pc, #152]	@ (8008e70 <prvAddNewTaskToReadyList+0xcc>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d109      	bne.n	8008df2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dde:	4b23      	ldr	r3, [pc, #140]	@ (8008e6c <prvAddNewTaskToReadyList+0xc8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d802      	bhi.n	8008df2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008dec:	4a1f      	ldr	r2, [pc, #124]	@ (8008e6c <prvAddNewTaskToReadyList+0xc8>)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008df2:	4b20      	ldr	r3, [pc, #128]	@ (8008e74 <prvAddNewTaskToReadyList+0xd0>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3301      	adds	r3, #1
 8008df8:	4a1e      	ldr	r2, [pc, #120]	@ (8008e74 <prvAddNewTaskToReadyList+0xd0>)
 8008dfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8008e74 <prvAddNewTaskToReadyList+0xd0>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e08:	4b1b      	ldr	r3, [pc, #108]	@ (8008e78 <prvAddNewTaskToReadyList+0xd4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d903      	bls.n	8008e18 <prvAddNewTaskToReadyList+0x74>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e14:	4a18      	ldr	r2, [pc, #96]	@ (8008e78 <prvAddNewTaskToReadyList+0xd4>)
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4a15      	ldr	r2, [pc, #84]	@ (8008e7c <prvAddNewTaskToReadyList+0xd8>)
 8008e26:	441a      	add	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f7ff f8d9 	bl	8007fe6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e34:	f001 fa58 	bl	800a2e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e38:	4b0d      	ldr	r3, [pc, #52]	@ (8008e70 <prvAddNewTaskToReadyList+0xcc>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00e      	beq.n	8008e5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e40:	4b0a      	ldr	r3, [pc, #40]	@ (8008e6c <prvAddNewTaskToReadyList+0xc8>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d207      	bcs.n	8008e5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e80 <prvAddNewTaskToReadyList+0xdc>)
 8008e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e5e:	bf00      	nop
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200015ec 	.word	0x200015ec
 8008e6c:	20001118 	.word	0x20001118
 8008e70:	200015f8 	.word	0x200015f8
 8008e74:	20001608 	.word	0x20001608
 8008e78:	200015f4 	.word	0x200015f4
 8008e7c:	2000111c 	.word	0x2000111c
 8008e80:	e000ed04 	.word	0xe000ed04

08008e84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d01a      	beq.n	8008ecc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e96:	4b15      	ldr	r3, [pc, #84]	@ (8008eec <vTaskDelay+0x68>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00d      	beq.n	8008eba <vTaskDelay+0x36>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	b672      	cpsid	i
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	b662      	cpsie	i
 8008eb2:	60bb      	str	r3, [r7, #8]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008eba:	f000 f887 	bl	8008fcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fd0d 	bl	80098e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ec6:	f000 f88f 	bl	8008fe8 <xTaskResumeAll>
 8008eca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d107      	bne.n	8008ee2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008ed2:	4b07      	ldr	r3, [pc, #28]	@ (8008ef0 <vTaskDelay+0x6c>)
 8008ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ee2:	bf00      	nop
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20001614 	.word	0x20001614
 8008ef0:	e000ed04 	.word	0xe000ed04

08008ef4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	@ 0x28
 8008ef8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f02:	463a      	mov	r2, r7
 8008f04:	1d39      	adds	r1, r7, #4
 8008f06:	f107 0308 	add.w	r3, r7, #8
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff f80a 	bl	8007f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	9202      	str	r2, [sp, #8]
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	460a      	mov	r2, r1
 8008f22:	4924      	ldr	r1, [pc, #144]	@ (8008fb4 <vTaskStartScheduler+0xc0>)
 8008f24:	4824      	ldr	r0, [pc, #144]	@ (8008fb8 <vTaskStartScheduler+0xc4>)
 8008f26:	f7ff fdff 	bl	8008b28 <xTaskCreateStatic>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4a23      	ldr	r2, [pc, #140]	@ (8008fbc <vTaskStartScheduler+0xc8>)
 8008f2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f30:	4b22      	ldr	r3, [pc, #136]	@ (8008fbc <vTaskStartScheduler+0xc8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	e001      	b.n	8008f42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d102      	bne.n	8008f4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f48:	f000 fd1e 	bl	8009988 <xTimerCreateTimerTask>
 8008f4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d118      	bne.n	8008f86 <vTaskStartScheduler+0x92>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f58:	b672      	cpsid	i
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	b662      	cpsie	i
 8008f68:	613b      	str	r3, [r7, #16]
}
 8008f6a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f6c:	4b14      	ldr	r3, [pc, #80]	@ (8008fc0 <vTaskStartScheduler+0xcc>)
 8008f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f74:	4b13      	ldr	r3, [pc, #76]	@ (8008fc4 <vTaskStartScheduler+0xd0>)
 8008f76:	2201      	movs	r2, #1
 8008f78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f7a:	4b13      	ldr	r3, [pc, #76]	@ (8008fc8 <vTaskStartScheduler+0xd4>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f80:	f001 f8fe 	bl	800a180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f84:	e011      	b.n	8008faa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8c:	d10d      	bne.n	8008faa <vTaskStartScheduler+0xb6>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f92:	b672      	cpsid	i
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	b662      	cpsie	i
 8008fa2:	60fb      	str	r3, [r7, #12]
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	e7fd      	b.n	8008fa6 <vTaskStartScheduler+0xb2>
}
 8008faa:	bf00      	nop
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	0800ca3c 	.word	0x0800ca3c
 8008fb8:	0800960d 	.word	0x0800960d
 8008fbc:	20001610 	.word	0x20001610
 8008fc0:	2000160c 	.word	0x2000160c
 8008fc4:	200015f8 	.word	0x200015f8
 8008fc8:	200015f0 	.word	0x200015f0

08008fcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008fd0:	4b04      	ldr	r3, [pc, #16]	@ (8008fe4 <vTaskSuspendAll+0x18>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	4a03      	ldr	r2, [pc, #12]	@ (8008fe4 <vTaskSuspendAll+0x18>)
 8008fd8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008fda:	bf00      	nop
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	20001614 	.word	0x20001614

08008fe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ff6:	4b43      	ldr	r3, [pc, #268]	@ (8009104 <xTaskResumeAll+0x11c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10d      	bne.n	800901a <xTaskResumeAll+0x32>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	b672      	cpsid	i
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	b662      	cpsie	i
 8009012:	603b      	str	r3, [r7, #0]
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	e7fd      	b.n	8009016 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800901a:	f001 f92f 	bl	800a27c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800901e:	4b39      	ldr	r3, [pc, #228]	@ (8009104 <xTaskResumeAll+0x11c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3b01      	subs	r3, #1
 8009024:	4a37      	ldr	r2, [pc, #220]	@ (8009104 <xTaskResumeAll+0x11c>)
 8009026:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009028:	4b36      	ldr	r3, [pc, #216]	@ (8009104 <xTaskResumeAll+0x11c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d162      	bne.n	80090f6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009030:	4b35      	ldr	r3, [pc, #212]	@ (8009108 <xTaskResumeAll+0x120>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d05e      	beq.n	80090f6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009038:	e02f      	b.n	800909a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800903a:	4b34      	ldr	r3, [pc, #208]	@ (800910c <xTaskResumeAll+0x124>)
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3318      	adds	r3, #24
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff f82a 	bl	80080a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3304      	adds	r3, #4
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff f825 	bl	80080a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800905a:	4b2d      	ldr	r3, [pc, #180]	@ (8009110 <xTaskResumeAll+0x128>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d903      	bls.n	800906a <xTaskResumeAll+0x82>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009066:	4a2a      	ldr	r2, [pc, #168]	@ (8009110 <xTaskResumeAll+0x128>)
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4a27      	ldr	r2, [pc, #156]	@ (8009114 <xTaskResumeAll+0x12c>)
 8009078:	441a      	add	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	3304      	adds	r3, #4
 800907e:	4619      	mov	r1, r3
 8009080:	4610      	mov	r0, r2
 8009082:	f7fe ffb0 	bl	8007fe6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908a:	4b23      	ldr	r3, [pc, #140]	@ (8009118 <xTaskResumeAll+0x130>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	429a      	cmp	r2, r3
 8009092:	d302      	bcc.n	800909a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009094:	4b21      	ldr	r3, [pc, #132]	@ (800911c <xTaskResumeAll+0x134>)
 8009096:	2201      	movs	r2, #1
 8009098:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800909a:	4b1c      	ldr	r3, [pc, #112]	@ (800910c <xTaskResumeAll+0x124>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1cb      	bne.n	800903a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090a8:	f000 fb68 	bl	800977c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80090ac:	4b1c      	ldr	r3, [pc, #112]	@ (8009120 <xTaskResumeAll+0x138>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d010      	beq.n	80090da <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090b8:	f000 f846 	bl	8009148 <xTaskIncrementTick>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d002      	beq.n	80090c8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80090c2:	4b16      	ldr	r3, [pc, #88]	@ (800911c <xTaskResumeAll+0x134>)
 80090c4:	2201      	movs	r2, #1
 80090c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1f1      	bne.n	80090b8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80090d4:	4b12      	ldr	r3, [pc, #72]	@ (8009120 <xTaskResumeAll+0x138>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090da:	4b10      	ldr	r3, [pc, #64]	@ (800911c <xTaskResumeAll+0x134>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d009      	beq.n	80090f6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009124 <xTaskResumeAll+0x13c>)
 80090e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090f6:	f001 f8f7 	bl	800a2e8 <vPortExitCritical>

	return xAlreadyYielded;
 80090fa:	68bb      	ldr	r3, [r7, #8]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	20001614 	.word	0x20001614
 8009108:	200015ec 	.word	0x200015ec
 800910c:	200015ac 	.word	0x200015ac
 8009110:	200015f4 	.word	0x200015f4
 8009114:	2000111c 	.word	0x2000111c
 8009118:	20001118 	.word	0x20001118
 800911c:	20001600 	.word	0x20001600
 8009120:	200015fc 	.word	0x200015fc
 8009124:	e000ed04 	.word	0xe000ed04

08009128 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800912e:	4b05      	ldr	r3, [pc, #20]	@ (8009144 <xTaskGetTickCount+0x1c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009134:	687b      	ldr	r3, [r7, #4]
}
 8009136:	4618      	mov	r0, r3
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	200015f0 	.word	0x200015f0

08009148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009152:	4b50      	ldr	r3, [pc, #320]	@ (8009294 <xTaskIncrementTick+0x14c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f040 808c 	bne.w	8009274 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800915c:	4b4e      	ldr	r3, [pc, #312]	@ (8009298 <xTaskIncrementTick+0x150>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3301      	adds	r3, #1
 8009162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009164:	4a4c      	ldr	r2, [pc, #304]	@ (8009298 <xTaskIncrementTick+0x150>)
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d123      	bne.n	80091b8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009170:	4b4a      	ldr	r3, [pc, #296]	@ (800929c <xTaskIncrementTick+0x154>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00d      	beq.n	8009196 <xTaskIncrementTick+0x4e>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917e:	b672      	cpsid	i
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	b662      	cpsie	i
 800918e:	603b      	str	r3, [r7, #0]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <xTaskIncrementTick+0x4a>
 8009196:	4b41      	ldr	r3, [pc, #260]	@ (800929c <xTaskIncrementTick+0x154>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	4b40      	ldr	r3, [pc, #256]	@ (80092a0 <xTaskIncrementTick+0x158>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a3e      	ldr	r2, [pc, #248]	@ (800929c <xTaskIncrementTick+0x154>)
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	4a3e      	ldr	r2, [pc, #248]	@ (80092a0 <xTaskIncrementTick+0x158>)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	4b3e      	ldr	r3, [pc, #248]	@ (80092a4 <xTaskIncrementTick+0x15c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3301      	adds	r3, #1
 80091b0:	4a3c      	ldr	r2, [pc, #240]	@ (80092a4 <xTaskIncrementTick+0x15c>)
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	f000 fae2 	bl	800977c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091b8:	4b3b      	ldr	r3, [pc, #236]	@ (80092a8 <xTaskIncrementTick+0x160>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d349      	bcc.n	8009256 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c2:	4b36      	ldr	r3, [pc, #216]	@ (800929c <xTaskIncrementTick+0x154>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d104      	bne.n	80091d6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091cc:	4b36      	ldr	r3, [pc, #216]	@ (80092a8 <xTaskIncrementTick+0x160>)
 80091ce:	f04f 32ff 	mov.w	r2, #4294967295
 80091d2:	601a      	str	r2, [r3, #0]
					break;
 80091d4:	e03f      	b.n	8009256 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d6:	4b31      	ldr	r3, [pc, #196]	@ (800929c <xTaskIncrementTick+0x154>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d203      	bcs.n	80091f6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091ee:	4a2e      	ldr	r2, [pc, #184]	@ (80092a8 <xTaskIncrementTick+0x160>)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091f4:	e02f      	b.n	8009256 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe ff50 	bl	80080a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	3318      	adds	r3, #24
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe ff47 	bl	80080a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009216:	4b25      	ldr	r3, [pc, #148]	@ (80092ac <xTaskIncrementTick+0x164>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d903      	bls.n	8009226 <xTaskIncrementTick+0xde>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009222:	4a22      	ldr	r2, [pc, #136]	@ (80092ac <xTaskIncrementTick+0x164>)
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4a1f      	ldr	r2, [pc, #124]	@ (80092b0 <xTaskIncrementTick+0x168>)
 8009234:	441a      	add	r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	3304      	adds	r3, #4
 800923a:	4619      	mov	r1, r3
 800923c:	4610      	mov	r0, r2
 800923e:	f7fe fed2 	bl	8007fe6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009246:	4b1b      	ldr	r3, [pc, #108]	@ (80092b4 <xTaskIncrementTick+0x16c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924c:	429a      	cmp	r2, r3
 800924e:	d3b8      	bcc.n	80091c2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009250:	2301      	movs	r3, #1
 8009252:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009254:	e7b5      	b.n	80091c2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009256:	4b17      	ldr	r3, [pc, #92]	@ (80092b4 <xTaskIncrementTick+0x16c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925c:	4914      	ldr	r1, [pc, #80]	@ (80092b0 <xTaskIncrementTick+0x168>)
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d907      	bls.n	800927e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800926e:	2301      	movs	r3, #1
 8009270:	617b      	str	r3, [r7, #20]
 8009272:	e004      	b.n	800927e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009274:	4b10      	ldr	r3, [pc, #64]	@ (80092b8 <xTaskIncrementTick+0x170>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3301      	adds	r3, #1
 800927a:	4a0f      	ldr	r2, [pc, #60]	@ (80092b8 <xTaskIncrementTick+0x170>)
 800927c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800927e:	4b0f      	ldr	r3, [pc, #60]	@ (80092bc <xTaskIncrementTick+0x174>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009286:	2301      	movs	r3, #1
 8009288:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800928a:	697b      	ldr	r3, [r7, #20]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	20001614 	.word	0x20001614
 8009298:	200015f0 	.word	0x200015f0
 800929c:	200015a4 	.word	0x200015a4
 80092a0:	200015a8 	.word	0x200015a8
 80092a4:	20001604 	.word	0x20001604
 80092a8:	2000160c 	.word	0x2000160c
 80092ac:	200015f4 	.word	0x200015f4
 80092b0:	2000111c 	.word	0x2000111c
 80092b4:	20001118 	.word	0x20001118
 80092b8:	200015fc 	.word	0x200015fc
 80092bc:	20001600 	.word	0x20001600

080092c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092c6:	4b29      	ldr	r3, [pc, #164]	@ (800936c <vTaskSwitchContext+0xac>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092ce:	4b28      	ldr	r3, [pc, #160]	@ (8009370 <vTaskSwitchContext+0xb0>)
 80092d0:	2201      	movs	r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092d4:	e044      	b.n	8009360 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80092d6:	4b26      	ldr	r3, [pc, #152]	@ (8009370 <vTaskSwitchContext+0xb0>)
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092dc:	4b25      	ldr	r3, [pc, #148]	@ (8009374 <vTaskSwitchContext+0xb4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e013      	b.n	800930c <vTaskSwitchContext+0x4c>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10d      	bne.n	8009306 <vTaskSwitchContext+0x46>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ee:	b672      	cpsid	i
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	b662      	cpsie	i
 80092fe:	607b      	str	r3, [r7, #4]
}
 8009300:	bf00      	nop
 8009302:	bf00      	nop
 8009304:	e7fd      	b.n	8009302 <vTaskSwitchContext+0x42>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3b01      	subs	r3, #1
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	491a      	ldr	r1, [pc, #104]	@ (8009378 <vTaskSwitchContext+0xb8>)
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0e1      	beq.n	80092e4 <vTaskSwitchContext+0x24>
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4a13      	ldr	r2, [pc, #76]	@ (8009378 <vTaskSwitchContext+0xb8>)
 800932c:	4413      	add	r3, r2
 800932e:	60bb      	str	r3, [r7, #8]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	3308      	adds	r3, #8
 8009342:	429a      	cmp	r2, r3
 8009344:	d104      	bne.n	8009350 <vTaskSwitchContext+0x90>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	605a      	str	r2, [r3, #4]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	4a09      	ldr	r2, [pc, #36]	@ (800937c <vTaskSwitchContext+0xbc>)
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	4a06      	ldr	r2, [pc, #24]	@ (8009374 <vTaskSwitchContext+0xb4>)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6013      	str	r3, [r2, #0]
}
 8009360:	bf00      	nop
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	20001614 	.word	0x20001614
 8009370:	20001600 	.word	0x20001600
 8009374:	200015f4 	.word	0x200015f4
 8009378:	2000111c 	.word	0x2000111c
 800937c:	20001118 	.word	0x20001118

08009380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10d      	bne.n	80093ac <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009394:	b672      	cpsid	i
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	b662      	cpsie	i
 80093a4:	60fb      	str	r3, [r7, #12]
}
 80093a6:	bf00      	nop
 80093a8:	bf00      	nop
 80093aa:	e7fd      	b.n	80093a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093ac:	4b07      	ldr	r3, [pc, #28]	@ (80093cc <vTaskPlaceOnEventList+0x4c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3318      	adds	r3, #24
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fe fe3a 	bl	800802e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093ba:	2101      	movs	r1, #1
 80093bc:	6838      	ldr	r0, [r7, #0]
 80093be:	f000 fa8f 	bl	80098e0 <prvAddCurrentTaskToDelayedList>
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20001118 	.word	0x20001118

080093d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10d      	bne.n	80093fe <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e6:	b672      	cpsid	i
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	b662      	cpsie	i
 80093f6:	617b      	str	r3, [r7, #20]
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	e7fd      	b.n	80093fa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009428 <vTaskPlaceOnEventListRestricted+0x58>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3318      	adds	r3, #24
 8009404:	4619      	mov	r1, r3
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f7fe fded 	bl	8007fe6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009412:	f04f 33ff 	mov.w	r3, #4294967295
 8009416:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	68b8      	ldr	r0, [r7, #8]
 800941c:	f000 fa60 	bl	80098e0 <prvAddCurrentTaskToDelayedList>
	}
 8009420:	bf00      	nop
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20001118 	.word	0x20001118

0800942c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10d      	bne.n	800945e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009446:	b672      	cpsid	i
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	b662      	cpsie	i
 8009456:	60fb      	str	r3, [r7, #12]
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	e7fd      	b.n	800945a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3318      	adds	r3, #24
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fe1c 	bl	80080a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009468:	4b1d      	ldr	r3, [pc, #116]	@ (80094e0 <xTaskRemoveFromEventList+0xb4>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d11d      	bne.n	80094ac <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	3304      	adds	r3, #4
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fe13 	bl	80080a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800947e:	4b19      	ldr	r3, [pc, #100]	@ (80094e4 <xTaskRemoveFromEventList+0xb8>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d903      	bls.n	800948e <xTaskRemoveFromEventList+0x62>
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948a:	4a16      	ldr	r2, [pc, #88]	@ (80094e4 <xTaskRemoveFromEventList+0xb8>)
 800948c:	6013      	str	r3, [r2, #0]
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4a13      	ldr	r2, [pc, #76]	@ (80094e8 <xTaskRemoveFromEventList+0xbc>)
 800949c:	441a      	add	r2, r3
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	3304      	adds	r3, #4
 80094a2:	4619      	mov	r1, r3
 80094a4:	4610      	mov	r0, r2
 80094a6:	f7fe fd9e 	bl	8007fe6 <vListInsertEnd>
 80094aa:	e005      	b.n	80094b8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	3318      	adds	r3, #24
 80094b0:	4619      	mov	r1, r3
 80094b2:	480e      	ldr	r0, [pc, #56]	@ (80094ec <xTaskRemoveFromEventList+0xc0>)
 80094b4:	f7fe fd97 	bl	8007fe6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094bc:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <xTaskRemoveFromEventList+0xc4>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d905      	bls.n	80094d2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094c6:	2301      	movs	r3, #1
 80094c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094ca:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <xTaskRemoveFromEventList+0xc8>)
 80094cc:	2201      	movs	r2, #1
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	e001      	b.n	80094d6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80094d6:	697b      	ldr	r3, [r7, #20]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	20001614 	.word	0x20001614
 80094e4:	200015f4 	.word	0x200015f4
 80094e8:	2000111c 	.word	0x2000111c
 80094ec:	200015ac 	.word	0x200015ac
 80094f0:	20001118 	.word	0x20001118
 80094f4:	20001600 	.word	0x20001600

080094f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009500:	4b06      	ldr	r3, [pc, #24]	@ (800951c <vTaskInternalSetTimeOutState+0x24>)
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009508:	4b05      	ldr	r3, [pc, #20]	@ (8009520 <vTaskInternalSetTimeOutState+0x28>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	605a      	str	r2, [r3, #4]
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	20001604 	.word	0x20001604
 8009520:	200015f0 	.word	0x200015f0

08009524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10d      	bne.n	8009550 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009538:	b672      	cpsid	i
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	b662      	cpsie	i
 8009548:	613b      	str	r3, [r7, #16]
}
 800954a:	bf00      	nop
 800954c:	bf00      	nop
 800954e:	e7fd      	b.n	800954c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10d      	bne.n	8009572 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955a:	b672      	cpsid	i
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	b662      	cpsie	i
 800956a:	60fb      	str	r3, [r7, #12]
}
 800956c:	bf00      	nop
 800956e:	bf00      	nop
 8009570:	e7fd      	b.n	800956e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009572:	f000 fe83 	bl	800a27c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009576:	4b1d      	ldr	r3, [pc, #116]	@ (80095ec <xTaskCheckForTimeOut+0xc8>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958e:	d102      	bne.n	8009596 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009590:	2300      	movs	r3, #0
 8009592:	61fb      	str	r3, [r7, #28]
 8009594:	e023      	b.n	80095de <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	4b15      	ldr	r3, [pc, #84]	@ (80095f0 <xTaskCheckForTimeOut+0xcc>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d007      	beq.n	80095b2 <xTaskCheckForTimeOut+0x8e>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d302      	bcc.n	80095b2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095ac:	2301      	movs	r3, #1
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e015      	b.n	80095de <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d20b      	bcs.n	80095d4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	1ad2      	subs	r2, r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7ff ff95 	bl	80094f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
 80095d2:	e004      	b.n	80095de <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2200      	movs	r2, #0
 80095d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095da:	2301      	movs	r3, #1
 80095dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80095de:	f000 fe83 	bl	800a2e8 <vPortExitCritical>

	return xReturn;
 80095e2:	69fb      	ldr	r3, [r7, #28]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3720      	adds	r7, #32
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	200015f0 	.word	0x200015f0
 80095f0:	20001604 	.word	0x20001604

080095f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095f8:	4b03      	ldr	r3, [pc, #12]	@ (8009608 <vTaskMissedYield+0x14>)
 80095fa:	2201      	movs	r2, #1
 80095fc:	601a      	str	r2, [r3, #0]
}
 80095fe:	bf00      	nop
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	20001600 	.word	0x20001600

0800960c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009614:	f000 f852 	bl	80096bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009618:	4b06      	ldr	r3, [pc, #24]	@ (8009634 <prvIdleTask+0x28>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d9f9      	bls.n	8009614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009620:	4b05      	ldr	r3, [pc, #20]	@ (8009638 <prvIdleTask+0x2c>)
 8009622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009630:	e7f0      	b.n	8009614 <prvIdleTask+0x8>
 8009632:	bf00      	nop
 8009634:	2000111c 	.word	0x2000111c
 8009638:	e000ed04 	.word	0xe000ed04

0800963c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009642:	2300      	movs	r3, #0
 8009644:	607b      	str	r3, [r7, #4]
 8009646:	e00c      	b.n	8009662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4a12      	ldr	r2, [pc, #72]	@ (800969c <prvInitialiseTaskLists+0x60>)
 8009654:	4413      	add	r3, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe fc98 	bl	8007f8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3301      	adds	r3, #1
 8009660:	607b      	str	r3, [r7, #4]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b37      	cmp	r3, #55	@ 0x37
 8009666:	d9ef      	bls.n	8009648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009668:	480d      	ldr	r0, [pc, #52]	@ (80096a0 <prvInitialiseTaskLists+0x64>)
 800966a:	f7fe fc8f 	bl	8007f8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800966e:	480d      	ldr	r0, [pc, #52]	@ (80096a4 <prvInitialiseTaskLists+0x68>)
 8009670:	f7fe fc8c 	bl	8007f8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009674:	480c      	ldr	r0, [pc, #48]	@ (80096a8 <prvInitialiseTaskLists+0x6c>)
 8009676:	f7fe fc89 	bl	8007f8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800967a:	480c      	ldr	r0, [pc, #48]	@ (80096ac <prvInitialiseTaskLists+0x70>)
 800967c:	f7fe fc86 	bl	8007f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009680:	480b      	ldr	r0, [pc, #44]	@ (80096b0 <prvInitialiseTaskLists+0x74>)
 8009682:	f7fe fc83 	bl	8007f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009686:	4b0b      	ldr	r3, [pc, #44]	@ (80096b4 <prvInitialiseTaskLists+0x78>)
 8009688:	4a05      	ldr	r2, [pc, #20]	@ (80096a0 <prvInitialiseTaskLists+0x64>)
 800968a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800968c:	4b0a      	ldr	r3, [pc, #40]	@ (80096b8 <prvInitialiseTaskLists+0x7c>)
 800968e:	4a05      	ldr	r2, [pc, #20]	@ (80096a4 <prvInitialiseTaskLists+0x68>)
 8009690:	601a      	str	r2, [r3, #0]
}
 8009692:	bf00      	nop
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	2000111c 	.word	0x2000111c
 80096a0:	2000157c 	.word	0x2000157c
 80096a4:	20001590 	.word	0x20001590
 80096a8:	200015ac 	.word	0x200015ac
 80096ac:	200015c0 	.word	0x200015c0
 80096b0:	200015d8 	.word	0x200015d8
 80096b4:	200015a4 	.word	0x200015a4
 80096b8:	200015a8 	.word	0x200015a8

080096bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096c2:	e019      	b.n	80096f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096c4:	f000 fdda 	bl	800a27c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096c8:	4b10      	ldr	r3, [pc, #64]	@ (800970c <prvCheckTasksWaitingTermination+0x50>)
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fe fce3 	bl	80080a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096da:	4b0d      	ldr	r3, [pc, #52]	@ (8009710 <prvCheckTasksWaitingTermination+0x54>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3b01      	subs	r3, #1
 80096e0:	4a0b      	ldr	r2, [pc, #44]	@ (8009710 <prvCheckTasksWaitingTermination+0x54>)
 80096e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009714 <prvCheckTasksWaitingTermination+0x58>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009714 <prvCheckTasksWaitingTermination+0x58>)
 80096ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096ee:	f000 fdfb 	bl	800a2e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f810 	bl	8009718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096f8:	4b06      	ldr	r3, [pc, #24]	@ (8009714 <prvCheckTasksWaitingTermination+0x58>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e1      	bne.n	80096c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009700:	bf00      	nop
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	200015c0 	.word	0x200015c0
 8009710:	200015ec 	.word	0x200015ec
 8009714:	200015d4 	.word	0x200015d4

08009718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009726:	2b00      	cmp	r3, #0
 8009728:	d108      	bne.n	800973c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800972e:	4618      	mov	r0, r3
 8009730:	f000 ffa0 	bl	800a674 <vPortFree>
				vPortFree( pxTCB );
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 ff9d 	bl	800a674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800973a:	e01b      	b.n	8009774 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009742:	2b01      	cmp	r3, #1
 8009744:	d103      	bne.n	800974e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 ff94 	bl	800a674 <vPortFree>
	}
 800974c:	e012      	b.n	8009774 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009754:	2b02      	cmp	r3, #2
 8009756:	d00d      	beq.n	8009774 <prvDeleteTCB+0x5c>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975c:	b672      	cpsid	i
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	b662      	cpsie	i
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	bf00      	nop
 8009772:	e7fd      	b.n	8009770 <prvDeleteTCB+0x58>
	}
 8009774:	bf00      	nop
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009782:	4b0c      	ldr	r3, [pc, #48]	@ (80097b4 <prvResetNextTaskUnblockTime+0x38>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800978c:	4b0a      	ldr	r3, [pc, #40]	@ (80097b8 <prvResetNextTaskUnblockTime+0x3c>)
 800978e:	f04f 32ff 	mov.w	r2, #4294967295
 8009792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009794:	e008      	b.n	80097a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009796:	4b07      	ldr	r3, [pc, #28]	@ (80097b4 <prvResetNextTaskUnblockTime+0x38>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	4a04      	ldr	r2, [pc, #16]	@ (80097b8 <prvResetNextTaskUnblockTime+0x3c>)
 80097a6:	6013      	str	r3, [r2, #0]
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	200015a4 	.word	0x200015a4
 80097b8:	2000160c 	.word	0x2000160c

080097bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097c2:	4b0b      	ldr	r3, [pc, #44]	@ (80097f0 <xTaskGetSchedulerState+0x34>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097ca:	2301      	movs	r3, #1
 80097cc:	607b      	str	r3, [r7, #4]
 80097ce:	e008      	b.n	80097e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097d0:	4b08      	ldr	r3, [pc, #32]	@ (80097f4 <xTaskGetSchedulerState+0x38>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d102      	bne.n	80097de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097d8:	2302      	movs	r3, #2
 80097da:	607b      	str	r3, [r7, #4]
 80097dc:	e001      	b.n	80097e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097de:	2300      	movs	r3, #0
 80097e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097e2:	687b      	ldr	r3, [r7, #4]
	}
 80097e4:	4618      	mov	r0, r3
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	200015f8 	.word	0x200015f8
 80097f4:	20001614 	.word	0x20001614

080097f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009804:	2300      	movs	r3, #0
 8009806:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d05c      	beq.n	80098c8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800980e:	4b31      	ldr	r3, [pc, #196]	@ (80098d4 <xTaskPriorityDisinherit+0xdc>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	429a      	cmp	r2, r3
 8009816:	d00d      	beq.n	8009834 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	b672      	cpsid	i
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	b662      	cpsie	i
 800982c:	60fb      	str	r3, [r7, #12]
}
 800982e:	bf00      	nop
 8009830:	bf00      	nop
 8009832:	e7fd      	b.n	8009830 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10d      	bne.n	8009858 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009840:	b672      	cpsid	i
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	b662      	cpsie	i
 8009850:	60bb      	str	r3, [r7, #8]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800985c:	1e5a      	subs	r2, r3, #1
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800986a:	429a      	cmp	r2, r3
 800986c:	d02c      	beq.n	80098c8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009872:	2b00      	cmp	r3, #0
 8009874:	d128      	bne.n	80098c8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	3304      	adds	r3, #4
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fc10 	bl	80080a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009898:	4b0f      	ldr	r3, [pc, #60]	@ (80098d8 <xTaskPriorityDisinherit+0xe0>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	429a      	cmp	r2, r3
 800989e:	d903      	bls.n	80098a8 <xTaskPriorityDisinherit+0xb0>
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a4:	4a0c      	ldr	r2, [pc, #48]	@ (80098d8 <xTaskPriorityDisinherit+0xe0>)
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4a09      	ldr	r2, [pc, #36]	@ (80098dc <xTaskPriorityDisinherit+0xe4>)
 80098b6:	441a      	add	r2, r3
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	3304      	adds	r3, #4
 80098bc:	4619      	mov	r1, r3
 80098be:	4610      	mov	r0, r2
 80098c0:	f7fe fb91 	bl	8007fe6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098c4:	2301      	movs	r3, #1
 80098c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098c8:	697b      	ldr	r3, [r7, #20]
	}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20001118 	.word	0x20001118
 80098d8:	200015f4 	.word	0x200015f4
 80098dc:	2000111c 	.word	0x2000111c

080098e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098ea:	4b21      	ldr	r3, [pc, #132]	@ (8009970 <prvAddCurrentTaskToDelayedList+0x90>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098f0:	4b20      	ldr	r3, [pc, #128]	@ (8009974 <prvAddCurrentTaskToDelayedList+0x94>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3304      	adds	r3, #4
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fe fbd2 	bl	80080a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009902:	d10a      	bne.n	800991a <prvAddCurrentTaskToDelayedList+0x3a>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d007      	beq.n	800991a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800990a:	4b1a      	ldr	r3, [pc, #104]	@ (8009974 <prvAddCurrentTaskToDelayedList+0x94>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3304      	adds	r3, #4
 8009910:	4619      	mov	r1, r3
 8009912:	4819      	ldr	r0, [pc, #100]	@ (8009978 <prvAddCurrentTaskToDelayedList+0x98>)
 8009914:	f7fe fb67 	bl	8007fe6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009918:	e026      	b.n	8009968 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4413      	add	r3, r2
 8009920:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009922:	4b14      	ldr	r3, [pc, #80]	@ (8009974 <prvAddCurrentTaskToDelayedList+0x94>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	429a      	cmp	r2, r3
 8009930:	d209      	bcs.n	8009946 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009932:	4b12      	ldr	r3, [pc, #72]	@ (800997c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	4b0f      	ldr	r3, [pc, #60]	@ (8009974 <prvAddCurrentTaskToDelayedList+0x94>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3304      	adds	r3, #4
 800993c:	4619      	mov	r1, r3
 800993e:	4610      	mov	r0, r2
 8009940:	f7fe fb75 	bl	800802e <vListInsert>
}
 8009944:	e010      	b.n	8009968 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009946:	4b0e      	ldr	r3, [pc, #56]	@ (8009980 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4b0a      	ldr	r3, [pc, #40]	@ (8009974 <prvAddCurrentTaskToDelayedList+0x94>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3304      	adds	r3, #4
 8009950:	4619      	mov	r1, r3
 8009952:	4610      	mov	r0, r2
 8009954:	f7fe fb6b 	bl	800802e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009958:	4b0a      	ldr	r3, [pc, #40]	@ (8009984 <prvAddCurrentTaskToDelayedList+0xa4>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	429a      	cmp	r2, r3
 8009960:	d202      	bcs.n	8009968 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009962:	4a08      	ldr	r2, [pc, #32]	@ (8009984 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6013      	str	r3, [r2, #0]
}
 8009968:	bf00      	nop
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	200015f0 	.word	0x200015f0
 8009974:	20001118 	.word	0x20001118
 8009978:	200015d8 	.word	0x200015d8
 800997c:	200015a8 	.word	0x200015a8
 8009980:	200015a4 	.word	0x200015a4
 8009984:	2000160c 	.word	0x2000160c

08009988 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08a      	sub	sp, #40	@ 0x28
 800998c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009992:	f000 fb21 	bl	8009fd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009996:	4b1e      	ldr	r3, [pc, #120]	@ (8009a10 <xTimerCreateTimerTask+0x88>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d021      	beq.n	80099e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099a6:	1d3a      	adds	r2, r7, #4
 80099a8:	f107 0108 	add.w	r1, r7, #8
 80099ac:	f107 030c 	add.w	r3, r7, #12
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fe fad1 	bl	8007f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	9202      	str	r2, [sp, #8]
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	2302      	movs	r3, #2
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	2300      	movs	r3, #0
 80099c6:	460a      	mov	r2, r1
 80099c8:	4912      	ldr	r1, [pc, #72]	@ (8009a14 <xTimerCreateTimerTask+0x8c>)
 80099ca:	4813      	ldr	r0, [pc, #76]	@ (8009a18 <xTimerCreateTimerTask+0x90>)
 80099cc:	f7ff f8ac 	bl	8008b28 <xTaskCreateStatic>
 80099d0:	4603      	mov	r3, r0
 80099d2:	4a12      	ldr	r2, [pc, #72]	@ (8009a1c <xTimerCreateTimerTask+0x94>)
 80099d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099d6:	4b11      	ldr	r3, [pc, #68]	@ (8009a1c <xTimerCreateTimerTask+0x94>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099de:	2301      	movs	r3, #1
 80099e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10d      	bne.n	8009a04 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ec:	b672      	cpsid	i
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	b662      	cpsie	i
 80099fc:	613b      	str	r3, [r7, #16]
}
 80099fe:	bf00      	nop
 8009a00:	bf00      	nop
 8009a02:	e7fd      	b.n	8009a00 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009a04:	697b      	ldr	r3, [r7, #20]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20001648 	.word	0x20001648
 8009a14:	0800ca44 	.word	0x0800ca44
 8009a18:	08009b61 	.word	0x08009b61
 8009a1c:	2000164c 	.word	0x2000164c

08009a20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08a      	sub	sp, #40	@ 0x28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10d      	bne.n	8009a54 <xTimerGenericCommand+0x34>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3c:	b672      	cpsid	i
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	b662      	cpsie	i
 8009a4c:	623b      	str	r3, [r7, #32]
}
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	e7fd      	b.n	8009a50 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a54:	4b19      	ldr	r3, [pc, #100]	@ (8009abc <xTimerGenericCommand+0x9c>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d02a      	beq.n	8009ab2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b05      	cmp	r3, #5
 8009a6c:	dc18      	bgt.n	8009aa0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a6e:	f7ff fea5 	bl	80097bc <xTaskGetSchedulerState>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d109      	bne.n	8009a8c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a78:	4b10      	ldr	r3, [pc, #64]	@ (8009abc <xTimerGenericCommand+0x9c>)
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	f107 0110 	add.w	r1, r7, #16
 8009a80:	2300      	movs	r3, #0
 8009a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a84:	f7fe fc4c 	bl	8008320 <xQueueGenericSend>
 8009a88:	6278      	str	r0, [r7, #36]	@ 0x24
 8009a8a:	e012      	b.n	8009ab2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009abc <xTimerGenericCommand+0x9c>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	f107 0110 	add.w	r1, r7, #16
 8009a94:	2300      	movs	r3, #0
 8009a96:	2200      	movs	r2, #0
 8009a98:	f7fe fc42 	bl	8008320 <xQueueGenericSend>
 8009a9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009a9e:	e008      	b.n	8009ab2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009aa0:	4b06      	ldr	r3, [pc, #24]	@ (8009abc <xTimerGenericCommand+0x9c>)
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	f107 0110 	add.w	r1, r7, #16
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	f7fe fd42 	bl	8008534 <xQueueGenericSendFromISR>
 8009ab0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3728      	adds	r7, #40	@ 0x28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20001648 	.word	0x20001648

08009ac0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af02      	add	r7, sp, #8
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aca:	4b24      	ldr	r3, [pc, #144]	@ (8009b5c <prvProcessExpiredTimer+0x9c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fe fae1 	bl	80080a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d025      	beq.n	8009b38 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	699a      	ldr	r2, [r3, #24]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	18d1      	adds	r1, r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	6978      	ldr	r0, [r7, #20]
 8009afa:	f000 f8d7 	bl	8009cac <prvInsertTimerInActiveList>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d022      	beq.n	8009b4a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b04:	2300      	movs	r3, #0
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	6978      	ldr	r0, [r7, #20]
 8009b10:	f7ff ff86 	bl	8009a20 <xTimerGenericCommand>
 8009b14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d116      	bne.n	8009b4a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b20:	b672      	cpsid	i
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	b662      	cpsie	i
 8009b30:	60fb      	str	r3, [r7, #12]
}
 8009b32:	bf00      	nop
 8009b34:	bf00      	nop
 8009b36:	e7fd      	b.n	8009b34 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b3e:	f023 0301 	bic.w	r3, r3, #1
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	6978      	ldr	r0, [r7, #20]
 8009b50:	4798      	blx	r3
}
 8009b52:	bf00      	nop
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20001640 	.word	0x20001640

08009b60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 f859 	bl	8009c24 <prvGetNextExpireTime>
 8009b72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4619      	mov	r1, r3
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f805 	bl	8009b88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b7e:	f000 f8d7 	bl	8009d30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b82:	bf00      	nop
 8009b84:	e7f0      	b.n	8009b68 <prvTimerTask+0x8>
	...

08009b88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b92:	f7ff fa1b 	bl	8008fcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b96:	f107 0308 	add.w	r3, r7, #8
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 f866 	bl	8009c6c <prvSampleTimeNow>
 8009ba0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d130      	bne.n	8009c0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <prvProcessTimerOrBlockTask+0x3c>
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d806      	bhi.n	8009bc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bb6:	f7ff fa17 	bl	8008fe8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ff7f 	bl	8009ac0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bc2:	e024      	b.n	8009c0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d008      	beq.n	8009bdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bca:	4b13      	ldr	r3, [pc, #76]	@ (8009c18 <prvProcessTimerOrBlockTask+0x90>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d101      	bne.n	8009bd8 <prvProcessTimerOrBlockTask+0x50>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e000      	b.n	8009bda <prvProcessTimerOrBlockTask+0x52>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8009c1c <prvProcessTimerOrBlockTask+0x94>)
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	4619      	mov	r1, r3
 8009bea:	f7fe ff69 	bl	8008ac0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009bee:	f7ff f9fb 	bl	8008fe8 <xTaskResumeAll>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009bf8:	4b09      	ldr	r3, [pc, #36]	@ (8009c20 <prvProcessTimerOrBlockTask+0x98>)
 8009bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	f3bf 8f6f 	isb	sy
}
 8009c08:	e001      	b.n	8009c0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c0a:	f7ff f9ed 	bl	8008fe8 <xTaskResumeAll>
}
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20001644 	.word	0x20001644
 8009c1c:	20001648 	.word	0x20001648
 8009c20:	e000ed04 	.word	0xe000ed04

08009c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c68 <prvGetNextExpireTime+0x44>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <prvGetNextExpireTime+0x16>
 8009c36:	2201      	movs	r2, #1
 8009c38:	e000      	b.n	8009c3c <prvGetNextExpireTime+0x18>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d105      	bne.n	8009c54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c48:	4b07      	ldr	r3, [pc, #28]	@ (8009c68 <prvGetNextExpireTime+0x44>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	e001      	b.n	8009c58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c58:	68fb      	ldr	r3, [r7, #12]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	20001640 	.word	0x20001640

08009c6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c74:	f7ff fa58 	bl	8009128 <xTaskGetTickCount>
 8009c78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca8 <prvSampleTimeNow+0x3c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d205      	bcs.n	8009c90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c84:	f000 f940 	bl	8009f08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	e002      	b.n	8009c96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c96:	4a04      	ldr	r2, [pc, #16]	@ (8009ca8 <prvSampleTimeNow+0x3c>)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20001650 	.word	0x20001650

08009cac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d812      	bhi.n	8009cf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	1ad2      	subs	r2, r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d302      	bcc.n	8009ce6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	617b      	str	r3, [r7, #20]
 8009ce4:	e01b      	b.n	8009d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ce6:	4b10      	ldr	r3, [pc, #64]	@ (8009d28 <prvInsertTimerInActiveList+0x7c>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4619      	mov	r1, r3
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	f7fe f99c 	bl	800802e <vListInsert>
 8009cf6:	e012      	b.n	8009d1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d206      	bcs.n	8009d0e <prvInsertTimerInActiveList+0x62>
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d302      	bcc.n	8009d0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	e007      	b.n	8009d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d0e:	4b07      	ldr	r3, [pc, #28]	@ (8009d2c <prvInsertTimerInActiveList+0x80>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4619      	mov	r1, r3
 8009d18:	4610      	mov	r0, r2
 8009d1a:	f7fe f988 	bl	800802e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d1e:	697b      	ldr	r3, [r7, #20]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20001644 	.word	0x20001644
 8009d2c:	20001640 	.word	0x20001640

08009d30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08e      	sub	sp, #56	@ 0x38
 8009d34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d36:	e0d4      	b.n	8009ee2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	da1b      	bge.n	8009d76 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d3e:	1d3b      	adds	r3, r7, #4
 8009d40:	3304      	adds	r3, #4
 8009d42:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10d      	bne.n	8009d66 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4e:	b672      	cpsid	i
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	b662      	cpsie	i
 8009d5e:	61fb      	str	r3, [r7, #28]
}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	e7fd      	b.n	8009d62 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d6c:	6850      	ldr	r0, [r2, #4]
 8009d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d70:	6892      	ldr	r2, [r2, #8]
 8009d72:	4611      	mov	r1, r2
 8009d74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f2c0 80b2 	blt.w	8009ee2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fe f986 	bl	80080a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d94:	463b      	mov	r3, r7
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff ff68 	bl	8009c6c <prvSampleTimeNow>
 8009d9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b09      	cmp	r3, #9
 8009da2:	f200 809b 	bhi.w	8009edc <prvProcessReceivedCommands+0x1ac>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <prvProcessReceivedCommands+0x7c>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dd5 	.word	0x08009dd5
 8009db0:	08009dd5 	.word	0x08009dd5
 8009db4:	08009dd5 	.word	0x08009dd5
 8009db8:	08009e4f 	.word	0x08009e4f
 8009dbc:	08009e63 	.word	0x08009e63
 8009dc0:	08009eb3 	.word	0x08009eb3
 8009dc4:	08009dd5 	.word	0x08009dd5
 8009dc8:	08009dd5 	.word	0x08009dd5
 8009dcc:	08009e4f 	.word	0x08009e4f
 8009dd0:	08009e63 	.word	0x08009e63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dda:	f043 0301 	orr.w	r3, r3, #1
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	18d1      	adds	r1, r2, r3
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009df4:	f7ff ff5a 	bl	8009cac <prvInsertTimerInActiveList>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d070      	beq.n	8009ee0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d065      	beq.n	8009ee0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	441a      	add	r2, r3
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	2300      	movs	r3, #0
 8009e22:	2100      	movs	r1, #0
 8009e24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e26:	f7ff fdfb 	bl	8009a20 <xTimerGenericCommand>
 8009e2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d156      	bne.n	8009ee0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e36:	b672      	cpsid	i
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	b662      	cpsie	i
 8009e46:	61bb      	str	r3, [r7, #24]
}
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	e7fd      	b.n	8009e4a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e54:	f023 0301 	bic.w	r3, r3, #1
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e60:	e03f      	b.n	8009ee2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e68:	f043 0301 	orr.w	r3, r3, #1
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10d      	bne.n	8009e9e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e86:	b672      	cpsid	i
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	b662      	cpsie	i
 8009e96:	617b      	str	r3, [r7, #20]
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	e7fd      	b.n	8009e9a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea0:	699a      	ldr	r2, [r3, #24]
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea4:	18d1      	adds	r1, r2, r3
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009eac:	f7ff fefe 	bl	8009cac <prvInsertTimerInActiveList>
					break;
 8009eb0:	e017      	b.n	8009ee2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d103      	bne.n	8009ec8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009ec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ec2:	f000 fbd7 	bl	800a674 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ec6:	e00c      	b.n	8009ee2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ece:	f023 0301 	bic.w	r3, r3, #1
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009eda:	e002      	b.n	8009ee2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009edc:	bf00      	nop
 8009ede:	e000      	b.n	8009ee2 <prvProcessReceivedCommands+0x1b2>
					break;
 8009ee0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ee2:	4b08      	ldr	r3, [pc, #32]	@ (8009f04 <prvProcessReceivedCommands+0x1d4>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	1d39      	adds	r1, r7, #4
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fe fbc6 	bl	800867c <xQueueReceive>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f47f af20 	bne.w	8009d38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	3730      	adds	r7, #48	@ 0x30
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20001648 	.word	0x20001648

08009f08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f0e:	e04b      	b.n	8009fa8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f10:	4b2f      	ldr	r3, [pc, #188]	@ (8009fd0 <prvSwitchTimerLists+0xc8>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8009fd0 <prvSwitchTimerLists+0xc8>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3304      	adds	r3, #4
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fe f8b9 	bl	80080a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d031      	beq.n	8009fa8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d90e      	bls.n	8009f74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f62:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd0 <prvSwitchTimerLists+0xc8>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	f7fe f85e 	bl	800802e <vListInsert>
 8009f72:	e019      	b.n	8009fa8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f74:	2300      	movs	r3, #0
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff fd4e 	bl	8009a20 <xTimerGenericCommand>
 8009f84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10d      	bne.n	8009fa8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f90:	b672      	cpsid	i
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	b662      	cpsie	i
 8009fa0:	603b      	str	r3, [r7, #0]
}
 8009fa2:	bf00      	nop
 8009fa4:	bf00      	nop
 8009fa6:	e7fd      	b.n	8009fa4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fa8:	4b09      	ldr	r3, [pc, #36]	@ (8009fd0 <prvSwitchTimerLists+0xc8>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1ae      	bne.n	8009f10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fb2:	4b07      	ldr	r3, [pc, #28]	@ (8009fd0 <prvSwitchTimerLists+0xc8>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fb8:	4b06      	ldr	r3, [pc, #24]	@ (8009fd4 <prvSwitchTimerLists+0xcc>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a04      	ldr	r2, [pc, #16]	@ (8009fd0 <prvSwitchTimerLists+0xc8>)
 8009fbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fc0:	4a04      	ldr	r2, [pc, #16]	@ (8009fd4 <prvSwitchTimerLists+0xcc>)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	6013      	str	r3, [r2, #0]
}
 8009fc6:	bf00      	nop
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	20001640 	.word	0x20001640
 8009fd4:	20001644 	.word	0x20001644

08009fd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009fde:	f000 f94d 	bl	800a27c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009fe2:	4b15      	ldr	r3, [pc, #84]	@ (800a038 <prvCheckForValidListAndQueue+0x60>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d120      	bne.n	800a02c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009fea:	4814      	ldr	r0, [pc, #80]	@ (800a03c <prvCheckForValidListAndQueue+0x64>)
 8009fec:	f7fd ffce 	bl	8007f8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ff0:	4813      	ldr	r0, [pc, #76]	@ (800a040 <prvCheckForValidListAndQueue+0x68>)
 8009ff2:	f7fd ffcb 	bl	8007f8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ff6:	4b13      	ldr	r3, [pc, #76]	@ (800a044 <prvCheckForValidListAndQueue+0x6c>)
 8009ff8:	4a10      	ldr	r2, [pc, #64]	@ (800a03c <prvCheckForValidListAndQueue+0x64>)
 8009ffa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ffc:	4b12      	ldr	r3, [pc, #72]	@ (800a048 <prvCheckForValidListAndQueue+0x70>)
 8009ffe:	4a10      	ldr	r2, [pc, #64]	@ (800a040 <prvCheckForValidListAndQueue+0x68>)
 800a000:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a002:	2300      	movs	r3, #0
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	4b11      	ldr	r3, [pc, #68]	@ (800a04c <prvCheckForValidListAndQueue+0x74>)
 800a008:	4a11      	ldr	r2, [pc, #68]	@ (800a050 <prvCheckForValidListAndQueue+0x78>)
 800a00a:	2110      	movs	r1, #16
 800a00c:	200a      	movs	r0, #10
 800a00e:	f7fe f8dd 	bl	80081cc <xQueueGenericCreateStatic>
 800a012:	4603      	mov	r3, r0
 800a014:	4a08      	ldr	r2, [pc, #32]	@ (800a038 <prvCheckForValidListAndQueue+0x60>)
 800a016:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a018:	4b07      	ldr	r3, [pc, #28]	@ (800a038 <prvCheckForValidListAndQueue+0x60>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d005      	beq.n	800a02c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a020:	4b05      	ldr	r3, [pc, #20]	@ (800a038 <prvCheckForValidListAndQueue+0x60>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	490b      	ldr	r1, [pc, #44]	@ (800a054 <prvCheckForValidListAndQueue+0x7c>)
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fd20 	bl	8008a6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a02c:	f000 f95c 	bl	800a2e8 <vPortExitCritical>
}
 800a030:	bf00      	nop
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	20001648 	.word	0x20001648
 800a03c:	20001618 	.word	0x20001618
 800a040:	2000162c 	.word	0x2000162c
 800a044:	20001640 	.word	0x20001640
 800a048:	20001644 	.word	0x20001644
 800a04c:	200016f4 	.word	0x200016f4
 800a050:	20001654 	.word	0x20001654
 800a054:	0800ca4c 	.word	0x0800ca4c

0800a058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3b04      	subs	r3, #4
 800a068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3b04      	subs	r3, #4
 800a076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f023 0201 	bic.w	r2, r3, #1
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3b04      	subs	r3, #4
 800a086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a088:	4a0c      	ldr	r2, [pc, #48]	@ (800a0bc <pxPortInitialiseStack+0x64>)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3b14      	subs	r3, #20
 800a092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3b04      	subs	r3, #4
 800a09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f06f 0202 	mvn.w	r2, #2
 800a0a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3b20      	subs	r3, #32
 800a0ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	0800a0c1 	.word	0x0800a0c1

0800a0c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0ca:	4b15      	ldr	r3, [pc, #84]	@ (800a120 <prvTaskExitError+0x60>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d2:	d00d      	beq.n	800a0f0 <prvTaskExitError+0x30>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d8:	b672      	cpsid	i
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	b662      	cpsie	i
 800a0e8:	60fb      	str	r3, [r7, #12]
}
 800a0ea:	bf00      	nop
 800a0ec:	bf00      	nop
 800a0ee:	e7fd      	b.n	800a0ec <prvTaskExitError+0x2c>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	b672      	cpsid	i
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	b662      	cpsie	i
 800a104:	60bb      	str	r3, [r7, #8]
}
 800a106:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a108:	bf00      	nop
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0fc      	beq.n	800a10a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a110:	bf00      	nop
 800a112:	bf00      	nop
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	2000000c 	.word	0x2000000c
	...

0800a130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a130:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <pxCurrentTCBConst2>)
 800a132:	6819      	ldr	r1, [r3, #0]
 800a134:	6808      	ldr	r0, [r1, #0]
 800a136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13a:	f380 8809 	msr	PSP, r0
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f04f 0000 	mov.w	r0, #0
 800a146:	f380 8811 	msr	BASEPRI, r0
 800a14a:	4770      	bx	lr
 800a14c:	f3af 8000 	nop.w

0800a150 <pxCurrentTCBConst2>:
 800a150:	20001118 	.word	0x20001118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a154:	bf00      	nop
 800a156:	bf00      	nop

0800a158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a158:	4808      	ldr	r0, [pc, #32]	@ (800a17c <prvPortStartFirstTask+0x24>)
 800a15a:	6800      	ldr	r0, [r0, #0]
 800a15c:	6800      	ldr	r0, [r0, #0]
 800a15e:	f380 8808 	msr	MSP, r0
 800a162:	f04f 0000 	mov.w	r0, #0
 800a166:	f380 8814 	msr	CONTROL, r0
 800a16a:	b662      	cpsie	i
 800a16c:	b661      	cpsie	f
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	df00      	svc	0
 800a178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a17a:	bf00      	nop
 800a17c:	e000ed08 	.word	0xe000ed08

0800a180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a186:	4b37      	ldr	r3, [pc, #220]	@ (800a264 <xPortStartScheduler+0xe4>)
 800a188:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	22ff      	movs	r2, #255	@ 0xff
 800a196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	4b2f      	ldr	r3, [pc, #188]	@ (800a268 <xPortStartScheduler+0xe8>)
 800a1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1ae:	4b2f      	ldr	r3, [pc, #188]	@ (800a26c <xPortStartScheduler+0xec>)
 800a1b0:	2207      	movs	r2, #7
 800a1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1b4:	e009      	b.n	800a1ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a1b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a26c <xPortStartScheduler+0xec>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	4a2b      	ldr	r2, [pc, #172]	@ (800a26c <xPortStartScheduler+0xec>)
 800a1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1ca:	78fb      	ldrb	r3, [r7, #3]
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1d2:	2b80      	cmp	r3, #128	@ 0x80
 800a1d4:	d0ef      	beq.n	800a1b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1d6:	4b25      	ldr	r3, [pc, #148]	@ (800a26c <xPortStartScheduler+0xec>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f1c3 0307 	rsb	r3, r3, #7
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d00d      	beq.n	800a1fe <xPortStartScheduler+0x7e>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e6:	b672      	cpsid	i
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	b662      	cpsie	i
 800a1f6:	60bb      	str	r3, [r7, #8]
}
 800a1f8:	bf00      	nop
 800a1fa:	bf00      	nop
 800a1fc:	e7fd      	b.n	800a1fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a26c <xPortStartScheduler+0xec>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	021b      	lsls	r3, r3, #8
 800a204:	4a19      	ldr	r2, [pc, #100]	@ (800a26c <xPortStartScheduler+0xec>)
 800a206:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a208:	4b18      	ldr	r3, [pc, #96]	@ (800a26c <xPortStartScheduler+0xec>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a210:	4a16      	ldr	r2, [pc, #88]	@ (800a26c <xPortStartScheduler+0xec>)
 800a212:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	b2da      	uxtb	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a21c:	4b14      	ldr	r3, [pc, #80]	@ (800a270 <xPortStartScheduler+0xf0>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a13      	ldr	r2, [pc, #76]	@ (800a270 <xPortStartScheduler+0xf0>)
 800a222:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a226:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a228:	4b11      	ldr	r3, [pc, #68]	@ (800a270 <xPortStartScheduler+0xf0>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a10      	ldr	r2, [pc, #64]	@ (800a270 <xPortStartScheduler+0xf0>)
 800a22e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a232:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a234:	f000 f8dc 	bl	800a3f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a238:	4b0e      	ldr	r3, [pc, #56]	@ (800a274 <xPortStartScheduler+0xf4>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a23e:	f000 f8fb 	bl	800a438 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a242:	4b0d      	ldr	r3, [pc, #52]	@ (800a278 <xPortStartScheduler+0xf8>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a0c      	ldr	r2, [pc, #48]	@ (800a278 <xPortStartScheduler+0xf8>)
 800a248:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a24c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a24e:	f7ff ff83 	bl	800a158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a252:	f7ff f835 	bl	80092c0 <vTaskSwitchContext>
	prvTaskExitError();
 800a256:	f7ff ff33 	bl	800a0c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	e000e400 	.word	0xe000e400
 800a268:	20001744 	.word	0x20001744
 800a26c:	20001748 	.word	0x20001748
 800a270:	e000ed20 	.word	0xe000ed20
 800a274:	2000000c 	.word	0x2000000c
 800a278:	e000ef34 	.word	0xe000ef34

0800a27c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a286:	b672      	cpsid	i
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	b662      	cpsie	i
 800a296:	607b      	str	r3, [r7, #4]
}
 800a298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a29a:	4b11      	ldr	r3, [pc, #68]	@ (800a2e0 <vPortEnterCritical+0x64>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	4a0f      	ldr	r2, [pc, #60]	@ (800a2e0 <vPortEnterCritical+0x64>)
 800a2a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a2e0 <vPortEnterCritical+0x64>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d112      	bne.n	800a2d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e4 <vPortEnterCritical+0x68>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00d      	beq.n	800a2d2 <vPortEnterCritical+0x56>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ba:	b672      	cpsid	i
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	b662      	cpsie	i
 800a2ca:	603b      	str	r3, [r7, #0]
}
 800a2cc:	bf00      	nop
 800a2ce:	bf00      	nop
 800a2d0:	e7fd      	b.n	800a2ce <vPortEnterCritical+0x52>
	}
}
 800a2d2:	bf00      	nop
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	2000000c 	.word	0x2000000c
 800a2e4:	e000ed04 	.word	0xe000ed04

0800a2e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2ee:	4b13      	ldr	r3, [pc, #76]	@ (800a33c <vPortExitCritical+0x54>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10d      	bne.n	800a312 <vPortExitCritical+0x2a>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	b672      	cpsid	i
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	b662      	cpsie	i
 800a30a:	607b      	str	r3, [r7, #4]
}
 800a30c:	bf00      	nop
 800a30e:	bf00      	nop
 800a310:	e7fd      	b.n	800a30e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a312:	4b0a      	ldr	r3, [pc, #40]	@ (800a33c <vPortExitCritical+0x54>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	3b01      	subs	r3, #1
 800a318:	4a08      	ldr	r2, [pc, #32]	@ (800a33c <vPortExitCritical+0x54>)
 800a31a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a31c:	4b07      	ldr	r3, [pc, #28]	@ (800a33c <vPortExitCritical+0x54>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d105      	bne.n	800a330 <vPortExitCritical+0x48>
 800a324:	2300      	movs	r3, #0
 800a326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	f383 8811 	msr	BASEPRI, r3
}
 800a32e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	2000000c 	.word	0x2000000c

0800a340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a340:	f3ef 8009 	mrs	r0, PSP
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	4b15      	ldr	r3, [pc, #84]	@ (800a3a0 <pxCurrentTCBConst>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	f01e 0f10 	tst.w	lr, #16
 800a350:	bf08      	it	eq
 800a352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35a:	6010      	str	r0, [r2, #0]
 800a35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a360:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a364:	b672      	cpsid	i
 800a366:	f380 8811 	msr	BASEPRI, r0
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	b662      	cpsie	i
 800a374:	f7fe ffa4 	bl	80092c0 <vTaskSwitchContext>
 800a378:	f04f 0000 	mov.w	r0, #0
 800a37c:	f380 8811 	msr	BASEPRI, r0
 800a380:	bc09      	pop	{r0, r3}
 800a382:	6819      	ldr	r1, [r3, #0]
 800a384:	6808      	ldr	r0, [r1, #0]
 800a386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38a:	f01e 0f10 	tst.w	lr, #16
 800a38e:	bf08      	it	eq
 800a390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a394:	f380 8809 	msr	PSP, r0
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop

0800a3a0 <pxCurrentTCBConst>:
 800a3a0:	20001118 	.word	0x20001118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop

0800a3a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b2:	b672      	cpsid	i
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	b662      	cpsie	i
 800a3c2:	607b      	str	r3, [r7, #4]
}
 800a3c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3c6:	f7fe febf 	bl	8009148 <xTaskIncrementTick>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3d0:	4b06      	ldr	r3, [pc, #24]	@ (800a3ec <xPortSysTickHandler+0x44>)
 800a3d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	f383 8811 	msr	BASEPRI, r3
}
 800a3e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	e000ed04 	.word	0xe000ed04

0800a3f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a424 <vPortSetupTimerInterrupt+0x34>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a428 <vPortSetupTimerInterrupt+0x38>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a400:	4b0a      	ldr	r3, [pc, #40]	@ (800a42c <vPortSetupTimerInterrupt+0x3c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a0a      	ldr	r2, [pc, #40]	@ (800a430 <vPortSetupTimerInterrupt+0x40>)
 800a406:	fba2 2303 	umull	r2, r3, r2, r3
 800a40a:	099b      	lsrs	r3, r3, #6
 800a40c:	4a09      	ldr	r2, [pc, #36]	@ (800a434 <vPortSetupTimerInterrupt+0x44>)
 800a40e:	3b01      	subs	r3, #1
 800a410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a412:	4b04      	ldr	r3, [pc, #16]	@ (800a424 <vPortSetupTimerInterrupt+0x34>)
 800a414:	2207      	movs	r2, #7
 800a416:	601a      	str	r2, [r3, #0]
}
 800a418:	bf00      	nop
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	e000e010 	.word	0xe000e010
 800a428:	e000e018 	.word	0xe000e018
 800a42c:	20000000 	.word	0x20000000
 800a430:	10624dd3 	.word	0x10624dd3
 800a434:	e000e014 	.word	0xe000e014

0800a438 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a438:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a448 <vPortEnableVFP+0x10>
 800a43c:	6801      	ldr	r1, [r0, #0]
 800a43e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a442:	6001      	str	r1, [r0, #0]
 800a444:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a446:	bf00      	nop
 800a448:	e000ed88 	.word	0xe000ed88

0800a44c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a452:	f3ef 8305 	mrs	r3, IPSR
 800a456:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b0f      	cmp	r3, #15
 800a45c:	d917      	bls.n	800a48e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a45e:	4a1a      	ldr	r2, [pc, #104]	@ (800a4c8 <vPortValidateInterruptPriority+0x7c>)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4413      	add	r3, r2
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a468:	4b18      	ldr	r3, [pc, #96]	@ (800a4cc <vPortValidateInterruptPriority+0x80>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	7afa      	ldrb	r2, [r7, #11]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d20d      	bcs.n	800a48e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a476:	b672      	cpsid	i
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	b662      	cpsie	i
 800a486:	607b      	str	r3, [r7, #4]
}
 800a488:	bf00      	nop
 800a48a:	bf00      	nop
 800a48c:	e7fd      	b.n	800a48a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a48e:	4b10      	ldr	r3, [pc, #64]	@ (800a4d0 <vPortValidateInterruptPriority+0x84>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a496:	4b0f      	ldr	r3, [pc, #60]	@ (800a4d4 <vPortValidateInterruptPriority+0x88>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d90d      	bls.n	800a4ba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	b672      	cpsid	i
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	b662      	cpsie	i
 800a4b2:	603b      	str	r3, [r7, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <vPortValidateInterruptPriority+0x6a>
	}
 800a4ba:	bf00      	nop
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	e000e3f0 	.word	0xe000e3f0
 800a4cc:	20001744 	.word	0x20001744
 800a4d0:	e000ed0c 	.word	0xe000ed0c
 800a4d4:	20001748 	.word	0x20001748

0800a4d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08a      	sub	sp, #40	@ 0x28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4e4:	f7fe fd72 	bl	8008fcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4e8:	4b5d      	ldr	r3, [pc, #372]	@ (800a660 <pvPortMalloc+0x188>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4f0:	f000 f920 	bl	800a734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4f4:	4b5b      	ldr	r3, [pc, #364]	@ (800a664 <pvPortMalloc+0x18c>)
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f040 8094 	bne.w	800a62a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d020      	beq.n	800a54a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a508:	2208      	movs	r2, #8
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4413      	add	r3, r2
 800a50e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f003 0307 	and.w	r3, r3, #7
 800a516:	2b00      	cmp	r3, #0
 800a518:	d017      	beq.n	800a54a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f023 0307 	bic.w	r3, r3, #7
 800a520:	3308      	adds	r3, #8
 800a522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00d      	beq.n	800a54a <pvPortMalloc+0x72>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	b672      	cpsid	i
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	b662      	cpsie	i
 800a542:	617b      	str	r3, [r7, #20]
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop
 800a548:	e7fd      	b.n	800a546 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d06c      	beq.n	800a62a <pvPortMalloc+0x152>
 800a550:	4b45      	ldr	r3, [pc, #276]	@ (800a668 <pvPortMalloc+0x190>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	429a      	cmp	r2, r3
 800a558:	d867      	bhi.n	800a62a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a55a:	4b44      	ldr	r3, [pc, #272]	@ (800a66c <pvPortMalloc+0x194>)
 800a55c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a55e:	4b43      	ldr	r3, [pc, #268]	@ (800a66c <pvPortMalloc+0x194>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a564:	e004      	b.n	800a570 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	429a      	cmp	r2, r3
 800a578:	d903      	bls.n	800a582 <pvPortMalloc+0xaa>
 800a57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1f1      	bne.n	800a566 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a582:	4b37      	ldr	r3, [pc, #220]	@ (800a660 <pvPortMalloc+0x188>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a588:	429a      	cmp	r2, r3
 800a58a:	d04e      	beq.n	800a62a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a58c:	6a3b      	ldr	r3, [r7, #32]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2208      	movs	r2, #8
 800a592:	4413      	add	r3, r2
 800a594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	1ad2      	subs	r2, r2, r3
 800a5a6:	2308      	movs	r3, #8
 800a5a8:	005b      	lsls	r3, r3, #1
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d922      	bls.n	800a5f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	f003 0307 	and.w	r3, r3, #7
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00d      	beq.n	800a5dc <pvPortMalloc+0x104>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c4:	b672      	cpsid	i
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	b662      	cpsie	i
 800a5d4:	613b      	str	r3, [r7, #16]
}
 800a5d6:	bf00      	nop
 800a5d8:	bf00      	nop
 800a5da:	e7fd      	b.n	800a5d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	1ad2      	subs	r2, r2, r3
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5ee:	69b8      	ldr	r0, [r7, #24]
 800a5f0:	f000 f902 	bl	800a7f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a668 <pvPortMalloc+0x190>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a668 <pvPortMalloc+0x190>)
 800a600:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a602:	4b19      	ldr	r3, [pc, #100]	@ (800a668 <pvPortMalloc+0x190>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	4b1a      	ldr	r3, [pc, #104]	@ (800a670 <pvPortMalloc+0x198>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d203      	bcs.n	800a616 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a60e:	4b16      	ldr	r3, [pc, #88]	@ (800a668 <pvPortMalloc+0x190>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a17      	ldr	r2, [pc, #92]	@ (800a670 <pvPortMalloc+0x198>)
 800a614:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	4b12      	ldr	r3, [pc, #72]	@ (800a664 <pvPortMalloc+0x18c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	431a      	orrs	r2, r3
 800a620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a622:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a62a:	f7fe fcdd 	bl	8008fe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	f003 0307 	and.w	r3, r3, #7
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00d      	beq.n	800a654 <pvPortMalloc+0x17c>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63c:	b672      	cpsid	i
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	b662      	cpsie	i
 800a64c:	60fb      	str	r3, [r7, #12]
}
 800a64e:	bf00      	nop
 800a650:	bf00      	nop
 800a652:	e7fd      	b.n	800a650 <pvPortMalloc+0x178>
	return pvReturn;
 800a654:	69fb      	ldr	r3, [r7, #28]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3728      	adds	r7, #40	@ 0x28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20005354 	.word	0x20005354
 800a664:	20005360 	.word	0x20005360
 800a668:	20005358 	.word	0x20005358
 800a66c:	2000534c 	.word	0x2000534c
 800a670:	2000535c 	.word	0x2000535c

0800a674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d04e      	beq.n	800a724 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a686:	2308      	movs	r3, #8
 800a688:	425b      	negs	r3, r3
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	4413      	add	r3, r2
 800a68e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	4b24      	ldr	r3, [pc, #144]	@ (800a72c <vPortFree+0xb8>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4013      	ands	r3, r2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10d      	bne.n	800a6be <vPortFree+0x4a>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a6:	b672      	cpsid	i
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	b662      	cpsie	i
 800a6b6:	60fb      	str	r3, [r7, #12]
}
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
 800a6bc:	e7fd      	b.n	800a6ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00d      	beq.n	800a6e2 <vPortFree+0x6e>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ca:	b672      	cpsid	i
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	b662      	cpsie	i
 800a6da:	60bb      	str	r3, [r7, #8]
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	e7fd      	b.n	800a6de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	4b11      	ldr	r3, [pc, #68]	@ (800a72c <vPortFree+0xb8>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d019      	beq.n	800a724 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d115      	bne.n	800a724 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a72c <vPortFree+0xb8>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	43db      	mvns	r3, r3
 800a702:	401a      	ands	r2, r3
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a708:	f7fe fc60 	bl	8008fcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	4b07      	ldr	r3, [pc, #28]	@ (800a730 <vPortFree+0xbc>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4413      	add	r3, r2
 800a716:	4a06      	ldr	r2, [pc, #24]	@ (800a730 <vPortFree+0xbc>)
 800a718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a71a:	6938      	ldr	r0, [r7, #16]
 800a71c:	f000 f86c 	bl	800a7f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a720:	f7fe fc62 	bl	8008fe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a724:	bf00      	nop
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	20005360 	.word	0x20005360
 800a730:	20005358 	.word	0x20005358

0800a734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a73a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a73e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a740:	4b27      	ldr	r3, [pc, #156]	@ (800a7e0 <prvHeapInit+0xac>)
 800a742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	3307      	adds	r3, #7
 800a752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f023 0307 	bic.w	r3, r3, #7
 800a75a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	4a1f      	ldr	r2, [pc, #124]	@ (800a7e0 <prvHeapInit+0xac>)
 800a764:	4413      	add	r3, r2
 800a766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a76c:	4a1d      	ldr	r2, [pc, #116]	@ (800a7e4 <prvHeapInit+0xb0>)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a772:	4b1c      	ldr	r3, [pc, #112]	@ (800a7e4 <prvHeapInit+0xb0>)
 800a774:	2200      	movs	r2, #0
 800a776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	4413      	add	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a780:	2208      	movs	r2, #8
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	1a9b      	subs	r3, r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0307 	bic.w	r3, r3, #7
 800a78e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	4a15      	ldr	r2, [pc, #84]	@ (800a7e8 <prvHeapInit+0xb4>)
 800a794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a796:	4b14      	ldr	r3, [pc, #80]	@ (800a7e8 <prvHeapInit+0xb4>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2200      	movs	r2, #0
 800a79c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a79e:	4b12      	ldr	r3, [pc, #72]	@ (800a7e8 <prvHeapInit+0xb4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	1ad2      	subs	r2, r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e8 <prvHeapInit+0xb4>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a7ec <prvHeapInit+0xb8>)
 800a7c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	4a09      	ldr	r2, [pc, #36]	@ (800a7f0 <prvHeapInit+0xbc>)
 800a7ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7cc:	4b09      	ldr	r3, [pc, #36]	@ (800a7f4 <prvHeapInit+0xc0>)
 800a7ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a7d2:	601a      	str	r2, [r3, #0]
}
 800a7d4:	bf00      	nop
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	2000174c 	.word	0x2000174c
 800a7e4:	2000534c 	.word	0x2000534c
 800a7e8:	20005354 	.word	0x20005354
 800a7ec:	2000535c 	.word	0x2000535c
 800a7f0:	20005358 	.word	0x20005358
 800a7f4:	20005360 	.word	0x20005360

0800a7f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a800:	4b28      	ldr	r3, [pc, #160]	@ (800a8a4 <prvInsertBlockIntoFreeList+0xac>)
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	e002      	b.n	800a80c <prvInsertBlockIntoFreeList+0x14>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	429a      	cmp	r2, r3
 800a814:	d8f7      	bhi.n	800a806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	4413      	add	r3, r2
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	429a      	cmp	r2, r3
 800a826:	d108      	bne.n	800a83a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	441a      	add	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	441a      	add	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d118      	bne.n	800a880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4b15      	ldr	r3, [pc, #84]	@ (800a8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d00d      	beq.n	800a876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	441a      	add	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	e008      	b.n	800a888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a876:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	e003      	b.n	800a888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d002      	beq.n	800a896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a896:	bf00      	nop
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	2000534c 	.word	0x2000534c
 800a8a8:	20005354 	.word	0x20005354

0800a8ac <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fc81 	bl	800b1c0 <malloc>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00b      	beq.n	800a8f2 <ATC_Free+0x26>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fc72 	bl	800b1d0 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	601a      	str	r2, [r3, #0]
  }
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	8a9b      	ldrh	r3, [r3, #20]
 800a910:	461a      	mov	r2, r3
 800a912:	2100      	movs	r1, #0
 800a914:	f001 f824 	bl	800b960 <memset>
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	4613      	mov	r3, r2
 800a92c:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 800a92e:	2300      	movs	r3, #0
 800a930:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	88fa      	ldrh	r2, [r7, #6]
 800a936:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	88fa      	ldrh	r2, [r7, #6]
 800a93e:	68b9      	ldr	r1, [r7, #8]
 800a940:	4618      	mov	r0, r3
 800a942:	f7fb fabb 	bl	8005ebc <HAL_UART_Transmit_DMA>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 800a94c:	2301      	movs	r3, #1
 800a94e:	75fb      	strb	r3, [r7, #23]
 800a950:	e000      	b.n	800a954 <ATC_TxRaw+0x34>
      break;
 800a952:	bf00      	nop

  } while (0);

  return answer;
 800a954:	7dfb      	ldrb	r3, [r7, #23]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fb ff5e 	bl	800682c <HAL_UART_GetState>
 800a970:	4603      	mov	r3, r0
 800a972:	2b21      	cmp	r3, #33	@ 0x21
 800a974:	d007      	beq.n	800a986 <ATC_TxBusy+0x28>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fb ff56 	bl	800682c <HAL_UART_GetState>
 800a980:	4603      	mov	r3, r0
 800a982:	2b23      	cmp	r3, #35	@ 0x23
 800a984:	d101      	bne.n	800a98a <ATC_TxBusy+0x2c>
  {
    return true;
 800a986:	2301      	movs	r3, #1
 800a988:	e000      	b.n	800a98c <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800a98a:	2300      	movs	r3, #0
  }
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 800a9a2:	f7f7 fdd7 	bl	8002554 <HAL_GetTick>
 800a9a6:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	f000 fbf9 	bl	800b1a0 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fb ff3a 	bl	800682c <HAL_UART_GetState>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b22      	cmp	r3, #34	@ 0x22
 800a9bc:	d007      	beq.n	800a9ce <ATC_TxWait+0x3a>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fb ff32 	bl	800682c <HAL_UART_GetState>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b20      	cmp	r3, #32
 800a9cc:	d102      	bne.n	800a9d4 <ATC_TxWait+0x40>
    {
      answer = true;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9d2:	e01c      	b.n	800aa0e <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fb ff27 	bl	800682c <HAL_UART_GetState>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2be0      	cmp	r3, #224	@ 0xe0
 800a9e2:	d014      	beq.n	800aa0e <ATC_TxWait+0x7a>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fb ff1f 	bl	800682c <HAL_UART_GetState>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2ba0      	cmp	r3, #160	@ 0xa0
 800a9f2:	d00c      	beq.n	800aa0e <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800a9f4:	f7f7 fdae 	bl	8002554 <HAL_GetTick>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d8d1      	bhi.n	800a9a8 <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fb fad3 	bl	8005fb4 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	8b1b      	ldrh	r3, [r3, #24]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d024      	beq.n	800aa72 <ATC_CheckEvents+0x5a>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	e019      	b.n	800aa62 <ATC_CheckEvents+0x4a>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	00db      	lsls	r3, r3, #3
 800aa3a:	4413      	add	r3, r2
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	f000 ffc8 	bl	800b9d4 <strstr>
 800aa44:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d007      	beq.n	800aa5c <ATC_CheckEvents+0x44>
      {
        hAtc->psEvents[ev].EventCallback(found);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68da      	ldr	r2, [r3, #12]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	4413      	add	r3, r2
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	68b8      	ldr	r0, [r7, #8]
 800aa5a:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d3e0      	bcc.n	800aa2e <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7ff ff44 	bl	800a8fa <ATC_RxFlush>
  }
}
 800aa72:	bf00      	nop
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	8b1b      	ldrh	r3, [r3, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d023      	beq.n	800aad8 <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800aa90:	2300      	movs	r3, #0
 800aa92:	81bb      	strh	r3, [r7, #12]
 800aa94:	e01b      	b.n	800aace <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aa9a:	89ba      	ldrh	r2, [r7, #12]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	320a      	adds	r2, #10
 800aaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	f000 ff95 	bl	800b9d4 <strstr>
 800aaaa:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00a      	beq.n	800aac8 <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 800aabe:	89bb      	ldrh	r3, [r7, #12]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	3301      	adds	r3, #1
 800aac4:	73fb      	strb	r3, [r7, #15]
        break;
 800aac6:	e007      	b.n	800aad8 <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800aac8:	89bb      	ldrh	r3, [r7, #12]
 800aaca:	3301      	adds	r3, #1
 800aacc:	81bb      	strh	r3, [r7, #12]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	8adb      	ldrh	r3, [r3, #22]
 800aad2:	89ba      	ldrh	r2, [r7, #12]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d3de      	bcc.n	800aa96 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b082      	sub	sp, #8
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fb feb0 	bl	8006854 <HAL_UART_GetError>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d01f      	beq.n	800ab3a <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f04f 32ff 	mov.w	r2, #4294967295
 800ab04:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fb faba 	bl	8006084 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6818      	ldr	r0, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	69d9      	ldr	r1, [r3, #28]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	8a9b      	ldrh	r3, [r3, #20]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	f7fc fd78 	bl	8007612 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 0208 	bic.w	r2, r2, #8
 800ab38:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fb fe74 	bl	800682c <HAL_UART_GetState>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b22      	cmp	r3, #34	@ 0x22
 800ab48:	d027      	beq.n	800ab9a <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fb fe6c 	bl	800682c <HAL_UART_GetState>
 800ab54:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800ab56:	2b23      	cmp	r3, #35	@ 0x23
 800ab58:	d01f      	beq.n	800ab9a <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f04f 32ff 	mov.w	r2, #4294967295
 800ab64:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fb fa8a 	bl	8006084 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6818      	ldr	r0, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	69d9      	ldr	r1, [r3, #28]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8a9b      	ldrh	r3, [r3, #20]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	f7fc fd48 	bl	8007612 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f022 0208 	bic.w	r2, r2, #8
 800ab98:	601a      	str	r2, [r3, #0]
  }
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b086      	sub	sp, #24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	60b9      	str	r1, [r7, #8]
 800abac:	603b      	str	r3, [r7, #0]
 800abae:	4613      	mov	r3, r2
 800abb0:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 800abb2:	2300      	movs	r3, #0
 800abb4:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d075      	beq.n	800aca8 <ATC_Init+0x106>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d072      	beq.n	800aca8 <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800abc2:	223c      	movs	r2, #60	@ 0x3c
 800abc4:	2100      	movs	r1, #0
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 feca 	bl	800b960 <memset>
    if (pName != NULL)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d006      	beq.n	800abe0 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	3304      	adds	r3, #4
 800abd6:	2207      	movs	r2, #7
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 fee7 	bl	800b9ae <strncpy>
    }
    hAtc->hUart = hUart;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 800abe6:	88fb      	ldrh	r3, [r7, #6]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7ff fe5f 	bl	800a8ac <ATC_Malloc>
 800abee:	4602      	mov	r2, r0
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d04e      	beq.n	800ac9a <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	88fa      	ldrh	r2, [r7, #6]
 800ac02:	2100      	movs	r1, #0
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 feab 	bl	800b960 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 800ac0a:	88fb      	ldrh	r3, [r7, #6]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7ff fe4d 	bl	800a8ac <ATC_Malloc>
 800ac12:	4602      	mov	r2, r0
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d03e      	beq.n	800ac9e <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	88fa      	ldrh	r2, [r7, #6]
 800ac26:	2100      	movs	r1, #0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f000 fe99 	bl	800b960 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 800ac2e:	88fb      	ldrh	r3, [r7, #6]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7ff fe3b 	bl	800a8ac <ATC_Malloc>
 800ac36:	4602      	mov	r2, r0
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d02e      	beq.n	800aca2 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac48:	88fa      	ldrh	r2, [r7, #6]
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f000 fe87 	bl	800b960 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	88fa      	ldrh	r2, [r7, #6]
 800ac56:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac62:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	69d9      	ldr	r1, [r3, #28]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	8a9b      	ldrh	r3, [r3, #20]
 800ac70:	461a      	mov	r2, r3
 800ac72:	f7fc fcce 	bl	8007612 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d114      	bne.n	800aca6 <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f022 0208 	bic.w	r2, r2, #8
 800ac92:	601a      	str	r2, [r3, #0]
    answer = true;
 800ac94:	2301      	movs	r3, #1
 800ac96:	75fb      	strb	r3, [r7, #23]
 800ac98:	e006      	b.n	800aca8 <ATC_Init+0x106>
      break;
 800ac9a:	bf00      	nop
 800ac9c:	e004      	b.n	800aca8 <ATC_Init+0x106>
      break;
 800ac9e:	bf00      	nop
 800aca0:	e002      	b.n	800aca8 <ATC_Init+0x106>
      break;
 800aca2:	bf00      	nop
 800aca4:	e000      	b.n	800aca8 <ATC_Init+0x106>
      break;
 800aca6:	bf00      	nop

  } while (0);

  if (answer == false)
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	f083 0301 	eor.w	r3, r3, #1
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d016      	beq.n	800ace2 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d004      	beq.n	800acc6 <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	331c      	adds	r3, #28
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fe03 	bl	800a8cc <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acca:	2b00      	cmp	r3, #0
 800accc:	d004      	beq.n	800acd8 <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3324      	adds	r3, #36	@ 0x24
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7ff fdfa 	bl	800a8cc <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 800acd8:	223c      	movs	r2, #60	@ 0x3c
 800acda:	2100      	movs	r1, #0
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 fe3f 	bl	800b960 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff fef4 	bl	800aae2 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff fe8c 	bl	800aa18 <ATC_CheckEvents>
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800ad08:	b590      	push	{r4, r7, lr}
 800ad0a:	b08d      	sub	sp, #52	@ 0x34
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 800ad16:	2300      	movs	r3, #0
 800ad18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f7ff fe1f 	bl	800a95e <ATC_TxBusy>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 800ad26:	f06f 0303 	mvn.w	r3, #3
 800ad2a:	e0c8      	b.n	800aebe <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 800ad2c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800ad30:	2b05      	cmp	r3, #5
 800ad32:	d902      	bls.n	800ad3a <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 800ad34:	f06f 0304 	mvn.w	r3, #4
 800ad38:	e0c1      	b.n	800aebe <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff fed1 	bl	800aae2 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800ad40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ad44:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800ad46:	2300      	movs	r3, #0
 800ad48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad4a:	e04b      	b.n	800ade4 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	1d1a      	adds	r2, r3, #4
 800ad50:	617a      	str	r2, [r7, #20]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800ad56:	69b8      	ldr	r0, [r7, #24]
 800ad58:	f7f5 fa7c 	bl	8000254 <strlen>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	3301      	adds	r3, #1
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7ff fda3 	bl	800a8ac <ATC_Malloc>
 800ad66:	4601      	mov	r1, r0
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad6c:	320a      	adds	r2, #10
 800ad6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad76:	320a      	adds	r2, #10
 800ad78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d119      	bne.n	800adb4 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 800ad80:	2300      	movs	r3, #0
 800ad82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad86:	e00d      	b.n	800ada4 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800ad88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad8c:	330a      	adds	r3, #10
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	4413      	add	r3, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fd99 	bl	800a8cc <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800ad9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad9e:	3301      	adds	r3, #1
 800ada0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ada4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ada8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adaa:	429a      	cmp	r2, r3
 800adac:	dcec      	bgt.n	800ad88 <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 800adae:	f06f 0302 	mvn.w	r3, #2
 800adb2:	e084      	b.n	800aebe <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adb8:	320a      	adds	r2, #10
 800adba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adbe:	69b9      	ldr	r1, [r7, #24]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f000 fea0 	bl	800bb06 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adca:	320a      	adds	r2, #10
 800adcc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800add0:	69b8      	ldr	r0, [r7, #24]
 800add2:	f7f5 fa3f 	bl	8000254 <strlen>
 800add6:	4603      	mov	r3, r0
 800add8:	4423      	add	r3, r4
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade0:	3301      	adds	r3, #1
 800ade2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ade4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800ade8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adea:	429a      	cmp	r2, r3
 800adec:	dbae      	blt.n	800ad4c <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f7ff fd83 	bl	800a8fa <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 800adf4:	68b8      	ldr	r0, [r7, #8]
 800adf6:	f7f5 fa2d 	bl	8000254 <strlen>
 800adfa:	4603      	mov	r3, r0
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	461a      	mov	r2, r3
 800ae00:	68b9      	ldr	r1, [r7, #8]
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f7ff fd8c 	bl	800a920 <ATC_TxRaw>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	f083 0301 	eor.w	r3, r3, #1
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 800ae14:	f04f 33ff 	mov.w	r3, #4294967295
 800ae18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800ae1a:	e00d      	b.n	800ae38 <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800ae1c:	6879      	ldr	r1, [r7, #4]
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7ff fdb8 	bl	800a994 <ATC_TxWait>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f083 0301 	eor.w	r3, r3, #1
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 800ae30:	f06f 0301 	mvn.w	r3, #1
 800ae34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800ae36:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 800ae38:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d022      	beq.n	800ae86 <ATC_SendReceive+0x17e>
 800ae40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d11f      	bne.n	800ae86 <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 800ae46:	f7f7 fb85 	bl	8002554 <HAL_GetTick>
 800ae4a:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800ae4c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800ae56:	e00e      	b.n	800ae76 <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 800ae58:	2001      	movs	r0, #1
 800ae5a:	f000 f9a1 	bl	800b1a0 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f7ff fe0a 	bl	800aa7a <ATC_CheckResponse>
 800ae66:	4603      	mov	r3, r0
 800ae68:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800ae6a:	7ffb      	ldrb	r3, [r7, #31]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 800ae70:	7ffb      	ldrb	r3, [r7, #31]
 800ae72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ae74:	e007      	b.n	800ae86 <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 800ae76:	f7f7 fb6d 	bl	8002554 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d8e8      	bhi.n	800ae58 <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ae92:	e00d      	b.n	800aeb0 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800ae94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae98:	330a      	adds	r3, #10
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7ff fd13 	bl	800a8cc <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800aea6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aeaa:	3301      	adds	r3, #1
 800aeac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aeb0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aeb4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d3eb      	bcc.n	800ae94 <ATC_SendReceive+0x18c>
  }
  return answer;
 800aebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3734      	adds	r7, #52	@ 0x34
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd90      	pop	{r4, r7, pc}

0800aec6 <ATC_Send>:
  * @param  TxTimeout: Timeout for sending the command.
  * @param  ... , it can use like printf format
  * @retval Response true or false.
  */
bool ATC_Send(ATC_HandleTypeDef *hAtc, const char *pCommand, uint32_t TxTimeout, ...)
{
 800aec6:	b40c      	push	{r2, r3}
 800aec8:	b590      	push	{r4, r7, lr}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800aed2:	2300      	movs	r3, #0
 800aed4:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (ATC_TxBusy(hAtc) == true)
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7ff fd41 	bl	800a95e <ATC_TxBusy>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d13c      	bne.n	800af5c <ATC_Send+0x96>
    {
      break;
    }
    ATC_CheckErrors(hAtc);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff fdfd 	bl	800aae2 <ATC_CheckErrors>
    va_list args;
    va_start(args, TxTimeout);
 800aee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aeec:	60fb      	str	r3, [r7, #12]
    int len = vsnprintf((char*)hAtc->pTxBuff, hAtc->Size, pCommand, args);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a18      	ldr	r0, [r3, #32]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	8a9b      	ldrh	r3, [r3, #20]
 800aef6:	4619      	mov	r1, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	f000 fc8e 	bl	800b81c <vsniprintf>
 800af00:	6138      	str	r0, [r7, #16]
    va_end(args);
    if ((len < 0) || (len > hAtc->Size))
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	db2e      	blt.n	800af66 <ATC_Send+0xa0>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	8a9b      	ldrh	r3, [r3, #20]
 800af0c:	461a      	mov	r2, r3
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	4293      	cmp	r3, r2
 800af12:	dc28      	bgt.n	800af66 <ATC_Send+0xa0>
    {
      break;
    }
    ATC_RxFlush(hAtc);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff fcf0 	bl	800a8fa <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)hAtc->pTxBuff, strlen((char*)hAtc->pTxBuff)) == false)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a1c      	ldr	r4, [r3, #32]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	4618      	mov	r0, r3
 800af24:	f7f5 f996 	bl	8000254 <strlen>
 800af28:	4603      	mov	r3, r0
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	461a      	mov	r2, r3
 800af2e:	4621      	mov	r1, r4
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff fcf5 	bl	800a920 <ATC_TxRaw>
 800af36:	4603      	mov	r3, r0
 800af38:	f083 0301 	eor.w	r3, r3, #1
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10e      	bne.n	800af60 <ATC_Send+0x9a>
    {
      break;
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 800af42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7ff fd25 	bl	800a994 <ATC_TxWait>
 800af4a:	4603      	mov	r3, r0
 800af4c:	f083 0301 	eor.w	r3, r3, #1
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d106      	bne.n	800af64 <ATC_Send+0x9e>
    {
      break;
    }
    answer = true;
 800af56:	2301      	movs	r3, #1
 800af58:	75fb      	strb	r3, [r7, #23]
 800af5a:	e004      	b.n	800af66 <ATC_Send+0xa0>
      break;
 800af5c:	bf00      	nop
 800af5e:	e002      	b.n	800af66 <ATC_Send+0xa0>
      break;
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <ATC_Send+0xa0>
      break;
 800af64:	bf00      	nop

  } while (0);

  return answer;
 800af66:	7dfb      	ldrb	r3, [r7, #23]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	371c      	adds	r7, #28
 800af6c:	46bd      	mov	sp, r7
 800af6e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800af72:	b002      	add	sp, #8
 800af74:	4770      	bx	lr

0800af76 <ATC_Receive>:
  * @param  Items: Number of searching strings
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_Receive(ATC_HandleTypeDef *hAtc, char **ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800af76:	b408      	push	{r3}
 800af78:	b590      	push	{r4, r7, lr}
 800af7a:	b08c      	sub	sp, #48	@ 0x30
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
  int answer = ATC_RESP_NOT_FOUND;
 800af84:	2300      	movs	r3, #0
 800af86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (Items > ATC_RESP_MAX)
 800af88:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800af8c:	2b05      	cmp	r3, #5
 800af8e:	d902      	bls.n	800af96 <ATC_Receive+0x20>
  {
    return ATC_RESP_ITEMS;
 800af90:	f06f 0304 	mvn.w	r3, #4
 800af94:	e099      	b.n	800b0ca <ATC_Receive+0x154>
  }
  ATC_CheckErrors(hAtc);
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f7ff fda3 	bl	800aae2 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800af9c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800afa0:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800afa2:	2300      	movs	r3, #0
 800afa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afa6:	e04b      	b.n	800b040 <ATC_Receive+0xca>
  {
    char *arg = va_arg(args, char*);
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	1d1a      	adds	r2, r3, #4
 800afac:	617a      	str	r2, [r7, #20]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800afb2:	69b8      	ldr	r0, [r7, #24]
 800afb4:	f7f5 f94e 	bl	8000254 <strlen>
 800afb8:	4603      	mov	r3, r0
 800afba:	3301      	adds	r3, #1
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fc75 	bl	800a8ac <ATC_Malloc>
 800afc2:	4601      	mov	r1, r0
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afc8:	320a      	adds	r2, #10
 800afca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afd2:	320a      	adds	r2, #10
 800afd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d119      	bne.n	800b010 <ATC_Receive+0x9a>
    {
      for (uint8_t j = 0; j < i; j++)
 800afdc:	2300      	movs	r3, #0
 800afde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800afe2:	e00d      	b.n	800b000 <ATC_Receive+0x8a>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 800afe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800afe8:	330a      	adds	r3, #10
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4413      	add	r3, r2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff fc6b 	bl	800a8cc <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 800aff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800affa:	3301      	adds	r3, #1
 800affc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b006:	429a      	cmp	r2, r3
 800b008:	dcec      	bgt.n	800afe4 <ATC_Receive+0x6e>
      }
      return ATC_RESP_MEM_ERROR;
 800b00a:	f06f 0302 	mvn.w	r3, #2
 800b00e:	e05c      	b.n	800b0ca <ATC_Receive+0x154>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b014:	320a      	adds	r2, #10
 800b016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01a:	69b9      	ldr	r1, [r7, #24]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fd72 	bl	800bb06 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b026:	320a      	adds	r2, #10
 800b028:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800b02c:	69b8      	ldr	r0, [r7, #24]
 800b02e:	f7f5 f911 	bl	8000254 <strlen>
 800b032:	4603      	mov	r3, r0
 800b034:	4423      	add	r3, r4
 800b036:	2200      	movs	r2, #0
 800b038:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800b03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03c:	3301      	adds	r3, #1
 800b03e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b040:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800b044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b046:	429a      	cmp	r2, r3
 800b048:	dbae      	blt.n	800afa8 <ATC_Receive+0x32>
  }
  va_end(args);

  if (Items > 0)
 800b04a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d01f      	beq.n	800b092 <ATC_Receive+0x11c>
  {
    uint32_t start_time = HAL_GetTick();
 800b052:	f7f7 fa7f 	bl	8002554 <HAL_GetTick>
 800b056:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800b058:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800b062:	e00e      	b.n	800b082 <ATC_Receive+0x10c>
    {
      ATC_Delay(1);
 800b064:	2001      	movs	r0, #1
 800b066:	f000 f89b 	bl	800b1a0 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7ff fd04 	bl	800aa7a <ATC_CheckResponse>
 800b072:	4603      	mov	r3, r0
 800b074:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 800b076:	7ffb      	ldrb	r3, [r7, #31]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <ATC_Receive+0x10c>
      {
        answer = found_index;
 800b07c:	7ffb      	ldrb	r3, [r7, #31]
 800b07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b080:	e007      	b.n	800b092 <ATC_Receive+0x11c>
    while (HAL_GetTick() - start_time < RxTimeout)
 800b082:	f7f7 fa67 	bl	8002554 <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d8e8      	bhi.n	800b064 <ATC_Receive+0xee>
      }
    }
  }
  hAtc->RespCount = 0;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800b098:	2300      	movs	r3, #0
 800b09a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b09e:	e00d      	b.n	800b0bc <ATC_Receive+0x146>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 800b0a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b0a4:	330a      	adds	r3, #10
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7ff fc0d 	bl	800a8cc <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 800b0b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b0bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b0c0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d3eb      	bcc.n	800b0a0 <ATC_Receive+0x12a>
  }
  return answer;
 800b0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3730      	adds	r7, #48	@ 0x30
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800b0d4:	b001      	add	sp, #4
 800b0d6:	4770      	bx	lr

0800b0d8 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 800b0e4:	887a      	ldrh	r2, [r7, #2]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	8a9b      	ldrh	r3, [r3, #20]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	8b1b      	ldrh	r3, [r3, #24]
 800b0f0:	1acb      	subs	r3, r1, r3
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	dd05      	ble.n	800b102 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	8a9a      	ldrh	r2, [r3, #20]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	8b1b      	ldrh	r3, [r3, #24]
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	8b12      	ldrh	r2, [r2, #24]
 800b10a:	1898      	adds	r0, r3, r2
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	887a      	ldrh	r2, [r7, #2]
 800b112:	4619      	mov	r1, r3
 800b114:	f000 fcff 	bl	800bb16 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	8b1a      	ldrh	r2, [r3, #24]
 800b11c:	887b      	ldrh	r3, [r7, #2]
 800b11e:	4413      	add	r3, r2
 800b120:	b29a      	uxth	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6818      	ldr	r0, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	69d9      	ldr	r1, [r3, #28]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	8a9b      	ldrh	r3, [r3, #20]
 800b132:	461a      	mov	r2, r3
 800b134:	f7fc fa6d 	bl	8007612 <HAL_UARTEx_ReceiveToIdle_DMA>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10c      	bne.n	800b158 <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f022 0208 	bic.w	r2, r2, #8
 800b154:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 800b156:	e01f      	b.n	800b198 <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f04f 32ff 	mov.w	r2, #4294967295
 800b162:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fa ff8b 	bl	8006084 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6818      	ldr	r0, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	69d9      	ldr	r1, [r3, #28]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	8a9b      	ldrh	r3, [r3, #20]
 800b17a:	461a      	mov	r2, r3
 800b17c:	f7fc fa49 	bl	8007612 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f022 0208 	bic.w	r2, r2, #8
 800b196:	601a      	str	r2, [r3, #0]
}
 800b198:	bf00      	nop
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7f7 f9df 	bl	800256c <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <atoi>:
 800b1b6:	220a      	movs	r2, #10
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	f000 b977 	b.w	800b4ac <strtol>
	...

0800b1c0 <malloc>:
 800b1c0:	4b02      	ldr	r3, [pc, #8]	@ (800b1cc <malloc+0xc>)
 800b1c2:	4601      	mov	r1, r0
 800b1c4:	6818      	ldr	r0, [r3, #0]
 800b1c6:	f000 b82d 	b.w	800b224 <_malloc_r>
 800b1ca:	bf00      	nop
 800b1cc:	2000001c 	.word	0x2000001c

0800b1d0 <free>:
 800b1d0:	4b02      	ldr	r3, [pc, #8]	@ (800b1dc <free+0xc>)
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	f000 bccb 	b.w	800bb70 <_free_r>
 800b1da:	bf00      	nop
 800b1dc:	2000001c 	.word	0x2000001c

0800b1e0 <sbrk_aligned>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	4e0f      	ldr	r6, [pc, #60]	@ (800b220 <sbrk_aligned+0x40>)
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	6831      	ldr	r1, [r6, #0]
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	b911      	cbnz	r1, 800b1f2 <sbrk_aligned+0x12>
 800b1ec:	f000 fc3c 	bl	800ba68 <_sbrk_r>
 800b1f0:	6030      	str	r0, [r6, #0]
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	f000 fc37 	bl	800ba68 <_sbrk_r>
 800b1fa:	1c43      	adds	r3, r0, #1
 800b1fc:	d103      	bne.n	800b206 <sbrk_aligned+0x26>
 800b1fe:	f04f 34ff 	mov.w	r4, #4294967295
 800b202:	4620      	mov	r0, r4
 800b204:	bd70      	pop	{r4, r5, r6, pc}
 800b206:	1cc4      	adds	r4, r0, #3
 800b208:	f024 0403 	bic.w	r4, r4, #3
 800b20c:	42a0      	cmp	r0, r4
 800b20e:	d0f8      	beq.n	800b202 <sbrk_aligned+0x22>
 800b210:	1a21      	subs	r1, r4, r0
 800b212:	4628      	mov	r0, r5
 800b214:	f000 fc28 	bl	800ba68 <_sbrk_r>
 800b218:	3001      	adds	r0, #1
 800b21a:	d1f2      	bne.n	800b202 <sbrk_aligned+0x22>
 800b21c:	e7ef      	b.n	800b1fe <sbrk_aligned+0x1e>
 800b21e:	bf00      	nop
 800b220:	20005364 	.word	0x20005364

0800b224 <_malloc_r>:
 800b224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b228:	1ccd      	adds	r5, r1, #3
 800b22a:	f025 0503 	bic.w	r5, r5, #3
 800b22e:	3508      	adds	r5, #8
 800b230:	2d0c      	cmp	r5, #12
 800b232:	bf38      	it	cc
 800b234:	250c      	movcc	r5, #12
 800b236:	2d00      	cmp	r5, #0
 800b238:	4606      	mov	r6, r0
 800b23a:	db01      	blt.n	800b240 <_malloc_r+0x1c>
 800b23c:	42a9      	cmp	r1, r5
 800b23e:	d904      	bls.n	800b24a <_malloc_r+0x26>
 800b240:	230c      	movs	r3, #12
 800b242:	6033      	str	r3, [r6, #0]
 800b244:	2000      	movs	r0, #0
 800b246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b320 <_malloc_r+0xfc>
 800b24e:	f000 f869 	bl	800b324 <__malloc_lock>
 800b252:	f8d8 3000 	ldr.w	r3, [r8]
 800b256:	461c      	mov	r4, r3
 800b258:	bb44      	cbnz	r4, 800b2ac <_malloc_r+0x88>
 800b25a:	4629      	mov	r1, r5
 800b25c:	4630      	mov	r0, r6
 800b25e:	f7ff ffbf 	bl	800b1e0 <sbrk_aligned>
 800b262:	1c43      	adds	r3, r0, #1
 800b264:	4604      	mov	r4, r0
 800b266:	d158      	bne.n	800b31a <_malloc_r+0xf6>
 800b268:	f8d8 4000 	ldr.w	r4, [r8]
 800b26c:	4627      	mov	r7, r4
 800b26e:	2f00      	cmp	r7, #0
 800b270:	d143      	bne.n	800b2fa <_malloc_r+0xd6>
 800b272:	2c00      	cmp	r4, #0
 800b274:	d04b      	beq.n	800b30e <_malloc_r+0xea>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	4639      	mov	r1, r7
 800b27a:	4630      	mov	r0, r6
 800b27c:	eb04 0903 	add.w	r9, r4, r3
 800b280:	f000 fbf2 	bl	800ba68 <_sbrk_r>
 800b284:	4581      	cmp	r9, r0
 800b286:	d142      	bne.n	800b30e <_malloc_r+0xea>
 800b288:	6821      	ldr	r1, [r4, #0]
 800b28a:	1a6d      	subs	r5, r5, r1
 800b28c:	4629      	mov	r1, r5
 800b28e:	4630      	mov	r0, r6
 800b290:	f7ff ffa6 	bl	800b1e0 <sbrk_aligned>
 800b294:	3001      	adds	r0, #1
 800b296:	d03a      	beq.n	800b30e <_malloc_r+0xea>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	442b      	add	r3, r5
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	f8d8 3000 	ldr.w	r3, [r8]
 800b2a2:	685a      	ldr	r2, [r3, #4]
 800b2a4:	bb62      	cbnz	r2, 800b300 <_malloc_r+0xdc>
 800b2a6:	f8c8 7000 	str.w	r7, [r8]
 800b2aa:	e00f      	b.n	800b2cc <_malloc_r+0xa8>
 800b2ac:	6822      	ldr	r2, [r4, #0]
 800b2ae:	1b52      	subs	r2, r2, r5
 800b2b0:	d420      	bmi.n	800b2f4 <_malloc_r+0xd0>
 800b2b2:	2a0b      	cmp	r2, #11
 800b2b4:	d917      	bls.n	800b2e6 <_malloc_r+0xc2>
 800b2b6:	1961      	adds	r1, r4, r5
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	6025      	str	r5, [r4, #0]
 800b2bc:	bf18      	it	ne
 800b2be:	6059      	strne	r1, [r3, #4]
 800b2c0:	6863      	ldr	r3, [r4, #4]
 800b2c2:	bf08      	it	eq
 800b2c4:	f8c8 1000 	streq.w	r1, [r8]
 800b2c8:	5162      	str	r2, [r4, r5]
 800b2ca:	604b      	str	r3, [r1, #4]
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f000 f82f 	bl	800b330 <__malloc_unlock>
 800b2d2:	f104 000b 	add.w	r0, r4, #11
 800b2d6:	1d23      	adds	r3, r4, #4
 800b2d8:	f020 0007 	bic.w	r0, r0, #7
 800b2dc:	1ac2      	subs	r2, r0, r3
 800b2de:	bf1c      	itt	ne
 800b2e0:	1a1b      	subne	r3, r3, r0
 800b2e2:	50a3      	strne	r3, [r4, r2]
 800b2e4:	e7af      	b.n	800b246 <_malloc_r+0x22>
 800b2e6:	6862      	ldr	r2, [r4, #4]
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	bf0c      	ite	eq
 800b2ec:	f8c8 2000 	streq.w	r2, [r8]
 800b2f0:	605a      	strne	r2, [r3, #4]
 800b2f2:	e7eb      	b.n	800b2cc <_malloc_r+0xa8>
 800b2f4:	4623      	mov	r3, r4
 800b2f6:	6864      	ldr	r4, [r4, #4]
 800b2f8:	e7ae      	b.n	800b258 <_malloc_r+0x34>
 800b2fa:	463c      	mov	r4, r7
 800b2fc:	687f      	ldr	r7, [r7, #4]
 800b2fe:	e7b6      	b.n	800b26e <_malloc_r+0x4a>
 800b300:	461a      	mov	r2, r3
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	42a3      	cmp	r3, r4
 800b306:	d1fb      	bne.n	800b300 <_malloc_r+0xdc>
 800b308:	2300      	movs	r3, #0
 800b30a:	6053      	str	r3, [r2, #4]
 800b30c:	e7de      	b.n	800b2cc <_malloc_r+0xa8>
 800b30e:	230c      	movs	r3, #12
 800b310:	6033      	str	r3, [r6, #0]
 800b312:	4630      	mov	r0, r6
 800b314:	f000 f80c 	bl	800b330 <__malloc_unlock>
 800b318:	e794      	b.n	800b244 <_malloc_r+0x20>
 800b31a:	6005      	str	r5, [r0, #0]
 800b31c:	e7d6      	b.n	800b2cc <_malloc_r+0xa8>
 800b31e:	bf00      	nop
 800b320:	20005368 	.word	0x20005368

0800b324 <__malloc_lock>:
 800b324:	4801      	ldr	r0, [pc, #4]	@ (800b32c <__malloc_lock+0x8>)
 800b326:	f000 bbec 	b.w	800bb02 <__retarget_lock_acquire_recursive>
 800b32a:	bf00      	nop
 800b32c:	200054ac 	.word	0x200054ac

0800b330 <__malloc_unlock>:
 800b330:	4801      	ldr	r0, [pc, #4]	@ (800b338 <__malloc_unlock+0x8>)
 800b332:	f000 bbe7 	b.w	800bb04 <__retarget_lock_release_recursive>
 800b336:	bf00      	nop
 800b338:	200054ac 	.word	0x200054ac

0800b33c <rand>:
 800b33c:	4b16      	ldr	r3, [pc, #88]	@ (800b398 <rand+0x5c>)
 800b33e:	b510      	push	{r4, lr}
 800b340:	681c      	ldr	r4, [r3, #0]
 800b342:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b344:	b9b3      	cbnz	r3, 800b374 <rand+0x38>
 800b346:	2018      	movs	r0, #24
 800b348:	f7ff ff3a 	bl	800b1c0 <malloc>
 800b34c:	4602      	mov	r2, r0
 800b34e:	6320      	str	r0, [r4, #48]	@ 0x30
 800b350:	b920      	cbnz	r0, 800b35c <rand+0x20>
 800b352:	4b12      	ldr	r3, [pc, #72]	@ (800b39c <rand+0x60>)
 800b354:	4812      	ldr	r0, [pc, #72]	@ (800b3a0 <rand+0x64>)
 800b356:	2152      	movs	r1, #82	@ 0x52
 800b358:	f000 fbec 	bl	800bb34 <__assert_func>
 800b35c:	4911      	ldr	r1, [pc, #68]	@ (800b3a4 <rand+0x68>)
 800b35e:	4b12      	ldr	r3, [pc, #72]	@ (800b3a8 <rand+0x6c>)
 800b360:	e9c0 1300 	strd	r1, r3, [r0]
 800b364:	4b11      	ldr	r3, [pc, #68]	@ (800b3ac <rand+0x70>)
 800b366:	6083      	str	r3, [r0, #8]
 800b368:	230b      	movs	r3, #11
 800b36a:	8183      	strh	r3, [r0, #12]
 800b36c:	2100      	movs	r1, #0
 800b36e:	2001      	movs	r0, #1
 800b370:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b374:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b376:	480e      	ldr	r0, [pc, #56]	@ (800b3b0 <rand+0x74>)
 800b378:	690b      	ldr	r3, [r1, #16]
 800b37a:	694c      	ldr	r4, [r1, #20]
 800b37c:	4a0d      	ldr	r2, [pc, #52]	@ (800b3b4 <rand+0x78>)
 800b37e:	4358      	muls	r0, r3
 800b380:	fb02 0004 	mla	r0, r2, r4, r0
 800b384:	fba3 3202 	umull	r3, r2, r3, r2
 800b388:	3301      	adds	r3, #1
 800b38a:	eb40 0002 	adc.w	r0, r0, r2
 800b38e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b392:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b396:	bd10      	pop	{r4, pc}
 800b398:	2000001c 	.word	0x2000001c
 800b39c:	0800cae0 	.word	0x0800cae0
 800b3a0:	0800caf7 	.word	0x0800caf7
 800b3a4:	abcd330e 	.word	0xabcd330e
 800b3a8:	e66d1234 	.word	0xe66d1234
 800b3ac:	0005deec 	.word	0x0005deec
 800b3b0:	5851f42d 	.word	0x5851f42d
 800b3b4:	4c957f2d 	.word	0x4c957f2d

0800b3b8 <_strtol_l.constprop.0>:
 800b3b8:	2b24      	cmp	r3, #36	@ 0x24
 800b3ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3be:	4686      	mov	lr, r0
 800b3c0:	4690      	mov	r8, r2
 800b3c2:	d801      	bhi.n	800b3c8 <_strtol_l.constprop.0+0x10>
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d106      	bne.n	800b3d6 <_strtol_l.constprop.0+0x1e>
 800b3c8:	f000 fb70 	bl	800baac <__errno>
 800b3cc:	2316      	movs	r3, #22
 800b3ce:	6003      	str	r3, [r0, #0]
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d6:	4834      	ldr	r0, [pc, #208]	@ (800b4a8 <_strtol_l.constprop.0+0xf0>)
 800b3d8:	460d      	mov	r5, r1
 800b3da:	462a      	mov	r2, r5
 800b3dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3e0:	5d06      	ldrb	r6, [r0, r4]
 800b3e2:	f016 0608 	ands.w	r6, r6, #8
 800b3e6:	d1f8      	bne.n	800b3da <_strtol_l.constprop.0+0x22>
 800b3e8:	2c2d      	cmp	r4, #45	@ 0x2d
 800b3ea:	d12d      	bne.n	800b448 <_strtol_l.constprop.0+0x90>
 800b3ec:	782c      	ldrb	r4, [r5, #0]
 800b3ee:	2601      	movs	r6, #1
 800b3f0:	1c95      	adds	r5, r2, #2
 800b3f2:	f033 0210 	bics.w	r2, r3, #16
 800b3f6:	d109      	bne.n	800b40c <_strtol_l.constprop.0+0x54>
 800b3f8:	2c30      	cmp	r4, #48	@ 0x30
 800b3fa:	d12a      	bne.n	800b452 <_strtol_l.constprop.0+0x9a>
 800b3fc:	782a      	ldrb	r2, [r5, #0]
 800b3fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b402:	2a58      	cmp	r2, #88	@ 0x58
 800b404:	d125      	bne.n	800b452 <_strtol_l.constprop.0+0x9a>
 800b406:	786c      	ldrb	r4, [r5, #1]
 800b408:	2310      	movs	r3, #16
 800b40a:	3502      	adds	r5, #2
 800b40c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b410:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b414:	2200      	movs	r2, #0
 800b416:	fbbc f9f3 	udiv	r9, ip, r3
 800b41a:	4610      	mov	r0, r2
 800b41c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b420:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b424:	2f09      	cmp	r7, #9
 800b426:	d81b      	bhi.n	800b460 <_strtol_l.constprop.0+0xa8>
 800b428:	463c      	mov	r4, r7
 800b42a:	42a3      	cmp	r3, r4
 800b42c:	dd27      	ble.n	800b47e <_strtol_l.constprop.0+0xc6>
 800b42e:	1c57      	adds	r7, r2, #1
 800b430:	d007      	beq.n	800b442 <_strtol_l.constprop.0+0x8a>
 800b432:	4581      	cmp	r9, r0
 800b434:	d320      	bcc.n	800b478 <_strtol_l.constprop.0+0xc0>
 800b436:	d101      	bne.n	800b43c <_strtol_l.constprop.0+0x84>
 800b438:	45a2      	cmp	sl, r4
 800b43a:	db1d      	blt.n	800b478 <_strtol_l.constprop.0+0xc0>
 800b43c:	fb00 4003 	mla	r0, r0, r3, r4
 800b440:	2201      	movs	r2, #1
 800b442:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b446:	e7eb      	b.n	800b420 <_strtol_l.constprop.0+0x68>
 800b448:	2c2b      	cmp	r4, #43	@ 0x2b
 800b44a:	bf04      	itt	eq
 800b44c:	782c      	ldrbeq	r4, [r5, #0]
 800b44e:	1c95      	addeq	r5, r2, #2
 800b450:	e7cf      	b.n	800b3f2 <_strtol_l.constprop.0+0x3a>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1da      	bne.n	800b40c <_strtol_l.constprop.0+0x54>
 800b456:	2c30      	cmp	r4, #48	@ 0x30
 800b458:	bf0c      	ite	eq
 800b45a:	2308      	moveq	r3, #8
 800b45c:	230a      	movne	r3, #10
 800b45e:	e7d5      	b.n	800b40c <_strtol_l.constprop.0+0x54>
 800b460:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b464:	2f19      	cmp	r7, #25
 800b466:	d801      	bhi.n	800b46c <_strtol_l.constprop.0+0xb4>
 800b468:	3c37      	subs	r4, #55	@ 0x37
 800b46a:	e7de      	b.n	800b42a <_strtol_l.constprop.0+0x72>
 800b46c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b470:	2f19      	cmp	r7, #25
 800b472:	d804      	bhi.n	800b47e <_strtol_l.constprop.0+0xc6>
 800b474:	3c57      	subs	r4, #87	@ 0x57
 800b476:	e7d8      	b.n	800b42a <_strtol_l.constprop.0+0x72>
 800b478:	f04f 32ff 	mov.w	r2, #4294967295
 800b47c:	e7e1      	b.n	800b442 <_strtol_l.constprop.0+0x8a>
 800b47e:	1c53      	adds	r3, r2, #1
 800b480:	d108      	bne.n	800b494 <_strtol_l.constprop.0+0xdc>
 800b482:	2322      	movs	r3, #34	@ 0x22
 800b484:	f8ce 3000 	str.w	r3, [lr]
 800b488:	4660      	mov	r0, ip
 800b48a:	f1b8 0f00 	cmp.w	r8, #0
 800b48e:	d0a0      	beq.n	800b3d2 <_strtol_l.constprop.0+0x1a>
 800b490:	1e69      	subs	r1, r5, #1
 800b492:	e006      	b.n	800b4a2 <_strtol_l.constprop.0+0xea>
 800b494:	b106      	cbz	r6, 800b498 <_strtol_l.constprop.0+0xe0>
 800b496:	4240      	negs	r0, r0
 800b498:	f1b8 0f00 	cmp.w	r8, #0
 800b49c:	d099      	beq.n	800b3d2 <_strtol_l.constprop.0+0x1a>
 800b49e:	2a00      	cmp	r2, #0
 800b4a0:	d1f6      	bne.n	800b490 <_strtol_l.constprop.0+0xd8>
 800b4a2:	f8c8 1000 	str.w	r1, [r8]
 800b4a6:	e794      	b.n	800b3d2 <_strtol_l.constprop.0+0x1a>
 800b4a8:	0800cb50 	.word	0x0800cb50

0800b4ac <strtol>:
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	460a      	mov	r2, r1
 800b4b0:	4601      	mov	r1, r0
 800b4b2:	4802      	ldr	r0, [pc, #8]	@ (800b4bc <strtol+0x10>)
 800b4b4:	6800      	ldr	r0, [r0, #0]
 800b4b6:	f7ff bf7f 	b.w	800b3b8 <_strtol_l.constprop.0>
 800b4ba:	bf00      	nop
 800b4bc:	2000001c 	.word	0x2000001c

0800b4c0 <std>:
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	b510      	push	{r4, lr}
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b4ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ce:	6083      	str	r3, [r0, #8]
 800b4d0:	8181      	strh	r1, [r0, #12]
 800b4d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b4d4:	81c2      	strh	r2, [r0, #14]
 800b4d6:	6183      	str	r3, [r0, #24]
 800b4d8:	4619      	mov	r1, r3
 800b4da:	2208      	movs	r2, #8
 800b4dc:	305c      	adds	r0, #92	@ 0x5c
 800b4de:	f000 fa3f 	bl	800b960 <memset>
 800b4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b518 <std+0x58>)
 800b4e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b51c <std+0x5c>)
 800b4e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b4ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b520 <std+0x60>)
 800b4ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b4ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b524 <std+0x64>)
 800b4f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b4f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b528 <std+0x68>)
 800b4f4:	6224      	str	r4, [r4, #32]
 800b4f6:	429c      	cmp	r4, r3
 800b4f8:	d006      	beq.n	800b508 <std+0x48>
 800b4fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b4fe:	4294      	cmp	r4, r2
 800b500:	d002      	beq.n	800b508 <std+0x48>
 800b502:	33d0      	adds	r3, #208	@ 0xd0
 800b504:	429c      	cmp	r4, r3
 800b506:	d105      	bne.n	800b514 <std+0x54>
 800b508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b510:	f000 baf6 	b.w	800bb00 <__retarget_lock_init_recursive>
 800b514:	bd10      	pop	{r4, pc}
 800b516:	bf00      	nop
 800b518:	0800b741 	.word	0x0800b741
 800b51c:	0800b763 	.word	0x0800b763
 800b520:	0800b79b 	.word	0x0800b79b
 800b524:	0800b7bf 	.word	0x0800b7bf
 800b528:	2000536c 	.word	0x2000536c

0800b52c <stdio_exit_handler>:
 800b52c:	4a02      	ldr	r2, [pc, #8]	@ (800b538 <stdio_exit_handler+0xc>)
 800b52e:	4903      	ldr	r1, [pc, #12]	@ (800b53c <stdio_exit_handler+0x10>)
 800b530:	4803      	ldr	r0, [pc, #12]	@ (800b540 <stdio_exit_handler+0x14>)
 800b532:	f000 b869 	b.w	800b608 <_fwalk_sglue>
 800b536:	bf00      	nop
 800b538:	20000010 	.word	0x20000010
 800b53c:	0800c2d9 	.word	0x0800c2d9
 800b540:	20000020 	.word	0x20000020

0800b544 <cleanup_stdio>:
 800b544:	6841      	ldr	r1, [r0, #4]
 800b546:	4b0c      	ldr	r3, [pc, #48]	@ (800b578 <cleanup_stdio+0x34>)
 800b548:	4299      	cmp	r1, r3
 800b54a:	b510      	push	{r4, lr}
 800b54c:	4604      	mov	r4, r0
 800b54e:	d001      	beq.n	800b554 <cleanup_stdio+0x10>
 800b550:	f000 fec2 	bl	800c2d8 <_fflush_r>
 800b554:	68a1      	ldr	r1, [r4, #8]
 800b556:	4b09      	ldr	r3, [pc, #36]	@ (800b57c <cleanup_stdio+0x38>)
 800b558:	4299      	cmp	r1, r3
 800b55a:	d002      	beq.n	800b562 <cleanup_stdio+0x1e>
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 febb 	bl	800c2d8 <_fflush_r>
 800b562:	68e1      	ldr	r1, [r4, #12]
 800b564:	4b06      	ldr	r3, [pc, #24]	@ (800b580 <cleanup_stdio+0x3c>)
 800b566:	4299      	cmp	r1, r3
 800b568:	d004      	beq.n	800b574 <cleanup_stdio+0x30>
 800b56a:	4620      	mov	r0, r4
 800b56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b570:	f000 beb2 	b.w	800c2d8 <_fflush_r>
 800b574:	bd10      	pop	{r4, pc}
 800b576:	bf00      	nop
 800b578:	2000536c 	.word	0x2000536c
 800b57c:	200053d4 	.word	0x200053d4
 800b580:	2000543c 	.word	0x2000543c

0800b584 <global_stdio_init.part.0>:
 800b584:	b510      	push	{r4, lr}
 800b586:	4b0b      	ldr	r3, [pc, #44]	@ (800b5b4 <global_stdio_init.part.0+0x30>)
 800b588:	4c0b      	ldr	r4, [pc, #44]	@ (800b5b8 <global_stdio_init.part.0+0x34>)
 800b58a:	4a0c      	ldr	r2, [pc, #48]	@ (800b5bc <global_stdio_init.part.0+0x38>)
 800b58c:	601a      	str	r2, [r3, #0]
 800b58e:	4620      	mov	r0, r4
 800b590:	2200      	movs	r2, #0
 800b592:	2104      	movs	r1, #4
 800b594:	f7ff ff94 	bl	800b4c0 <std>
 800b598:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b59c:	2201      	movs	r2, #1
 800b59e:	2109      	movs	r1, #9
 800b5a0:	f7ff ff8e 	bl	800b4c0 <std>
 800b5a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b5a8:	2202      	movs	r2, #2
 800b5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5ae:	2112      	movs	r1, #18
 800b5b0:	f7ff bf86 	b.w	800b4c0 <std>
 800b5b4:	200054a4 	.word	0x200054a4
 800b5b8:	2000536c 	.word	0x2000536c
 800b5bc:	0800b52d 	.word	0x0800b52d

0800b5c0 <__sfp_lock_acquire>:
 800b5c0:	4801      	ldr	r0, [pc, #4]	@ (800b5c8 <__sfp_lock_acquire+0x8>)
 800b5c2:	f000 ba9e 	b.w	800bb02 <__retarget_lock_acquire_recursive>
 800b5c6:	bf00      	nop
 800b5c8:	200054ad 	.word	0x200054ad

0800b5cc <__sfp_lock_release>:
 800b5cc:	4801      	ldr	r0, [pc, #4]	@ (800b5d4 <__sfp_lock_release+0x8>)
 800b5ce:	f000 ba99 	b.w	800bb04 <__retarget_lock_release_recursive>
 800b5d2:	bf00      	nop
 800b5d4:	200054ad 	.word	0x200054ad

0800b5d8 <__sinit>:
 800b5d8:	b510      	push	{r4, lr}
 800b5da:	4604      	mov	r4, r0
 800b5dc:	f7ff fff0 	bl	800b5c0 <__sfp_lock_acquire>
 800b5e0:	6a23      	ldr	r3, [r4, #32]
 800b5e2:	b11b      	cbz	r3, 800b5ec <__sinit+0x14>
 800b5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5e8:	f7ff bff0 	b.w	800b5cc <__sfp_lock_release>
 800b5ec:	4b04      	ldr	r3, [pc, #16]	@ (800b600 <__sinit+0x28>)
 800b5ee:	6223      	str	r3, [r4, #32]
 800b5f0:	4b04      	ldr	r3, [pc, #16]	@ (800b604 <__sinit+0x2c>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1f5      	bne.n	800b5e4 <__sinit+0xc>
 800b5f8:	f7ff ffc4 	bl	800b584 <global_stdio_init.part.0>
 800b5fc:	e7f2      	b.n	800b5e4 <__sinit+0xc>
 800b5fe:	bf00      	nop
 800b600:	0800b545 	.word	0x0800b545
 800b604:	200054a4 	.word	0x200054a4

0800b608 <_fwalk_sglue>:
 800b608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b60c:	4607      	mov	r7, r0
 800b60e:	4688      	mov	r8, r1
 800b610:	4614      	mov	r4, r2
 800b612:	2600      	movs	r6, #0
 800b614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b618:	f1b9 0901 	subs.w	r9, r9, #1
 800b61c:	d505      	bpl.n	800b62a <_fwalk_sglue+0x22>
 800b61e:	6824      	ldr	r4, [r4, #0]
 800b620:	2c00      	cmp	r4, #0
 800b622:	d1f7      	bne.n	800b614 <_fwalk_sglue+0xc>
 800b624:	4630      	mov	r0, r6
 800b626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b62a:	89ab      	ldrh	r3, [r5, #12]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d907      	bls.n	800b640 <_fwalk_sglue+0x38>
 800b630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b634:	3301      	adds	r3, #1
 800b636:	d003      	beq.n	800b640 <_fwalk_sglue+0x38>
 800b638:	4629      	mov	r1, r5
 800b63a:	4638      	mov	r0, r7
 800b63c:	47c0      	blx	r8
 800b63e:	4306      	orrs	r6, r0
 800b640:	3568      	adds	r5, #104	@ 0x68
 800b642:	e7e9      	b.n	800b618 <_fwalk_sglue+0x10>

0800b644 <_puts_r>:
 800b644:	6a03      	ldr	r3, [r0, #32]
 800b646:	b570      	push	{r4, r5, r6, lr}
 800b648:	6884      	ldr	r4, [r0, #8]
 800b64a:	4605      	mov	r5, r0
 800b64c:	460e      	mov	r6, r1
 800b64e:	b90b      	cbnz	r3, 800b654 <_puts_r+0x10>
 800b650:	f7ff ffc2 	bl	800b5d8 <__sinit>
 800b654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b656:	07db      	lsls	r3, r3, #31
 800b658:	d405      	bmi.n	800b666 <_puts_r+0x22>
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	0598      	lsls	r0, r3, #22
 800b65e:	d402      	bmi.n	800b666 <_puts_r+0x22>
 800b660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b662:	f000 fa4e 	bl	800bb02 <__retarget_lock_acquire_recursive>
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	0719      	lsls	r1, r3, #28
 800b66a:	d502      	bpl.n	800b672 <_puts_r+0x2e>
 800b66c:	6923      	ldr	r3, [r4, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d135      	bne.n	800b6de <_puts_r+0x9a>
 800b672:	4621      	mov	r1, r4
 800b674:	4628      	mov	r0, r5
 800b676:	f000 f91d 	bl	800b8b4 <__swsetup_r>
 800b67a:	b380      	cbz	r0, 800b6de <_puts_r+0x9a>
 800b67c:	f04f 35ff 	mov.w	r5, #4294967295
 800b680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b682:	07da      	lsls	r2, r3, #31
 800b684:	d405      	bmi.n	800b692 <_puts_r+0x4e>
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	059b      	lsls	r3, r3, #22
 800b68a:	d402      	bmi.n	800b692 <_puts_r+0x4e>
 800b68c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b68e:	f000 fa39 	bl	800bb04 <__retarget_lock_release_recursive>
 800b692:	4628      	mov	r0, r5
 800b694:	bd70      	pop	{r4, r5, r6, pc}
 800b696:	2b00      	cmp	r3, #0
 800b698:	da04      	bge.n	800b6a4 <_puts_r+0x60>
 800b69a:	69a2      	ldr	r2, [r4, #24]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	dc17      	bgt.n	800b6d0 <_puts_r+0x8c>
 800b6a0:	290a      	cmp	r1, #10
 800b6a2:	d015      	beq.n	800b6d0 <_puts_r+0x8c>
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	6022      	str	r2, [r4, #0]
 800b6aa:	7019      	strb	r1, [r3, #0]
 800b6ac:	68a3      	ldr	r3, [r4, #8]
 800b6ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	60a3      	str	r3, [r4, #8]
 800b6b6:	2900      	cmp	r1, #0
 800b6b8:	d1ed      	bne.n	800b696 <_puts_r+0x52>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	da11      	bge.n	800b6e2 <_puts_r+0x9e>
 800b6be:	4622      	mov	r2, r4
 800b6c0:	210a      	movs	r1, #10
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f000 f8b8 	bl	800b838 <__swbuf_r>
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d0d7      	beq.n	800b67c <_puts_r+0x38>
 800b6cc:	250a      	movs	r5, #10
 800b6ce:	e7d7      	b.n	800b680 <_puts_r+0x3c>
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f000 f8b0 	bl	800b838 <__swbuf_r>
 800b6d8:	3001      	adds	r0, #1
 800b6da:	d1e7      	bne.n	800b6ac <_puts_r+0x68>
 800b6dc:	e7ce      	b.n	800b67c <_puts_r+0x38>
 800b6de:	3e01      	subs	r6, #1
 800b6e0:	e7e4      	b.n	800b6ac <_puts_r+0x68>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	6022      	str	r2, [r4, #0]
 800b6e8:	220a      	movs	r2, #10
 800b6ea:	701a      	strb	r2, [r3, #0]
 800b6ec:	e7ee      	b.n	800b6cc <_puts_r+0x88>
	...

0800b6f0 <puts>:
 800b6f0:	4b02      	ldr	r3, [pc, #8]	@ (800b6fc <puts+0xc>)
 800b6f2:	4601      	mov	r1, r0
 800b6f4:	6818      	ldr	r0, [r3, #0]
 800b6f6:	f7ff bfa5 	b.w	800b644 <_puts_r>
 800b6fa:	bf00      	nop
 800b6fc:	2000001c 	.word	0x2000001c

0800b700 <siprintf>:
 800b700:	b40e      	push	{r1, r2, r3}
 800b702:	b500      	push	{lr}
 800b704:	b09c      	sub	sp, #112	@ 0x70
 800b706:	ab1d      	add	r3, sp, #116	@ 0x74
 800b708:	9002      	str	r0, [sp, #8]
 800b70a:	9006      	str	r0, [sp, #24]
 800b70c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b710:	4809      	ldr	r0, [pc, #36]	@ (800b738 <siprintf+0x38>)
 800b712:	9107      	str	r1, [sp, #28]
 800b714:	9104      	str	r1, [sp, #16]
 800b716:	4909      	ldr	r1, [pc, #36]	@ (800b73c <siprintf+0x3c>)
 800b718:	f853 2b04 	ldr.w	r2, [r3], #4
 800b71c:	9105      	str	r1, [sp, #20]
 800b71e:	6800      	ldr	r0, [r0, #0]
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	a902      	add	r1, sp, #8
 800b724:	f000 faca 	bl	800bcbc <_svfiprintf_r>
 800b728:	9b02      	ldr	r3, [sp, #8]
 800b72a:	2200      	movs	r2, #0
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	b01c      	add	sp, #112	@ 0x70
 800b730:	f85d eb04 	ldr.w	lr, [sp], #4
 800b734:	b003      	add	sp, #12
 800b736:	4770      	bx	lr
 800b738:	2000001c 	.word	0x2000001c
 800b73c:	ffff0208 	.word	0xffff0208

0800b740 <__sread>:
 800b740:	b510      	push	{r4, lr}
 800b742:	460c      	mov	r4, r1
 800b744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b748:	f000 f97c 	bl	800ba44 <_read_r>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	bfab      	itete	ge
 800b750:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b752:	89a3      	ldrhlt	r3, [r4, #12]
 800b754:	181b      	addge	r3, r3, r0
 800b756:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b75a:	bfac      	ite	ge
 800b75c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b75e:	81a3      	strhlt	r3, [r4, #12]
 800b760:	bd10      	pop	{r4, pc}

0800b762 <__swrite>:
 800b762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b766:	461f      	mov	r7, r3
 800b768:	898b      	ldrh	r3, [r1, #12]
 800b76a:	05db      	lsls	r3, r3, #23
 800b76c:	4605      	mov	r5, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	4616      	mov	r6, r2
 800b772:	d505      	bpl.n	800b780 <__swrite+0x1e>
 800b774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b778:	2302      	movs	r3, #2
 800b77a:	2200      	movs	r2, #0
 800b77c:	f000 f950 	bl	800ba20 <_lseek_r>
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	4628      	mov	r0, r5
 800b792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b796:	f000 b977 	b.w	800ba88 <_write_r>

0800b79a <__sseek>:
 800b79a:	b510      	push	{r4, lr}
 800b79c:	460c      	mov	r4, r1
 800b79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a2:	f000 f93d 	bl	800ba20 <_lseek_r>
 800b7a6:	1c43      	adds	r3, r0, #1
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	bf15      	itete	ne
 800b7ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7b6:	81a3      	strheq	r3, [r4, #12]
 800b7b8:	bf18      	it	ne
 800b7ba:	81a3      	strhne	r3, [r4, #12]
 800b7bc:	bd10      	pop	{r4, pc}

0800b7be <__sclose>:
 800b7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c2:	f000 b91d 	b.w	800ba00 <_close_r>

0800b7c6 <_vsniprintf_r>:
 800b7c6:	b530      	push	{r4, r5, lr}
 800b7c8:	4614      	mov	r4, r2
 800b7ca:	2c00      	cmp	r4, #0
 800b7cc:	b09b      	sub	sp, #108	@ 0x6c
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	da05      	bge.n	800b7e0 <_vsniprintf_r+0x1a>
 800b7d4:	238b      	movs	r3, #139	@ 0x8b
 800b7d6:	6003      	str	r3, [r0, #0]
 800b7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7dc:	b01b      	add	sp, #108	@ 0x6c
 800b7de:	bd30      	pop	{r4, r5, pc}
 800b7e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b7e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b7e8:	bf14      	ite	ne
 800b7ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7ee:	4623      	moveq	r3, r4
 800b7f0:	9302      	str	r3, [sp, #8]
 800b7f2:	9305      	str	r3, [sp, #20]
 800b7f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b7f8:	9100      	str	r1, [sp, #0]
 800b7fa:	9104      	str	r1, [sp, #16]
 800b7fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b800:	4669      	mov	r1, sp
 800b802:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b804:	f000 fa5a 	bl	800bcbc <_svfiprintf_r>
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	bfbc      	itt	lt
 800b80c:	238b      	movlt	r3, #139	@ 0x8b
 800b80e:	602b      	strlt	r3, [r5, #0]
 800b810:	2c00      	cmp	r4, #0
 800b812:	d0e3      	beq.n	800b7dc <_vsniprintf_r+0x16>
 800b814:	9b00      	ldr	r3, [sp, #0]
 800b816:	2200      	movs	r2, #0
 800b818:	701a      	strb	r2, [r3, #0]
 800b81a:	e7df      	b.n	800b7dc <_vsniprintf_r+0x16>

0800b81c <vsniprintf>:
 800b81c:	b507      	push	{r0, r1, r2, lr}
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	4613      	mov	r3, r2
 800b822:	460a      	mov	r2, r1
 800b824:	4601      	mov	r1, r0
 800b826:	4803      	ldr	r0, [pc, #12]	@ (800b834 <vsniprintf+0x18>)
 800b828:	6800      	ldr	r0, [r0, #0]
 800b82a:	f7ff ffcc 	bl	800b7c6 <_vsniprintf_r>
 800b82e:	b003      	add	sp, #12
 800b830:	f85d fb04 	ldr.w	pc, [sp], #4
 800b834:	2000001c 	.word	0x2000001c

0800b838 <__swbuf_r>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	460e      	mov	r6, r1
 800b83c:	4614      	mov	r4, r2
 800b83e:	4605      	mov	r5, r0
 800b840:	b118      	cbz	r0, 800b84a <__swbuf_r+0x12>
 800b842:	6a03      	ldr	r3, [r0, #32]
 800b844:	b90b      	cbnz	r3, 800b84a <__swbuf_r+0x12>
 800b846:	f7ff fec7 	bl	800b5d8 <__sinit>
 800b84a:	69a3      	ldr	r3, [r4, #24]
 800b84c:	60a3      	str	r3, [r4, #8]
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	071a      	lsls	r2, r3, #28
 800b852:	d501      	bpl.n	800b858 <__swbuf_r+0x20>
 800b854:	6923      	ldr	r3, [r4, #16]
 800b856:	b943      	cbnz	r3, 800b86a <__swbuf_r+0x32>
 800b858:	4621      	mov	r1, r4
 800b85a:	4628      	mov	r0, r5
 800b85c:	f000 f82a 	bl	800b8b4 <__swsetup_r>
 800b860:	b118      	cbz	r0, 800b86a <__swbuf_r+0x32>
 800b862:	f04f 37ff 	mov.w	r7, #4294967295
 800b866:	4638      	mov	r0, r7
 800b868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	6922      	ldr	r2, [r4, #16]
 800b86e:	1a98      	subs	r0, r3, r2
 800b870:	6963      	ldr	r3, [r4, #20]
 800b872:	b2f6      	uxtb	r6, r6
 800b874:	4283      	cmp	r3, r0
 800b876:	4637      	mov	r7, r6
 800b878:	dc05      	bgt.n	800b886 <__swbuf_r+0x4e>
 800b87a:	4621      	mov	r1, r4
 800b87c:	4628      	mov	r0, r5
 800b87e:	f000 fd2b 	bl	800c2d8 <_fflush_r>
 800b882:	2800      	cmp	r0, #0
 800b884:	d1ed      	bne.n	800b862 <__swbuf_r+0x2a>
 800b886:	68a3      	ldr	r3, [r4, #8]
 800b888:	3b01      	subs	r3, #1
 800b88a:	60a3      	str	r3, [r4, #8]
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	1c5a      	adds	r2, r3, #1
 800b890:	6022      	str	r2, [r4, #0]
 800b892:	701e      	strb	r6, [r3, #0]
 800b894:	6962      	ldr	r2, [r4, #20]
 800b896:	1c43      	adds	r3, r0, #1
 800b898:	429a      	cmp	r2, r3
 800b89a:	d004      	beq.n	800b8a6 <__swbuf_r+0x6e>
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	07db      	lsls	r3, r3, #31
 800b8a0:	d5e1      	bpl.n	800b866 <__swbuf_r+0x2e>
 800b8a2:	2e0a      	cmp	r6, #10
 800b8a4:	d1df      	bne.n	800b866 <__swbuf_r+0x2e>
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	f000 fd15 	bl	800c2d8 <_fflush_r>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d0d9      	beq.n	800b866 <__swbuf_r+0x2e>
 800b8b2:	e7d6      	b.n	800b862 <__swbuf_r+0x2a>

0800b8b4 <__swsetup_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4b29      	ldr	r3, [pc, #164]	@ (800b95c <__swsetup_r+0xa8>)
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	6818      	ldr	r0, [r3, #0]
 800b8bc:	460c      	mov	r4, r1
 800b8be:	b118      	cbz	r0, 800b8c8 <__swsetup_r+0x14>
 800b8c0:	6a03      	ldr	r3, [r0, #32]
 800b8c2:	b90b      	cbnz	r3, 800b8c8 <__swsetup_r+0x14>
 800b8c4:	f7ff fe88 	bl	800b5d8 <__sinit>
 800b8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8cc:	0719      	lsls	r1, r3, #28
 800b8ce:	d422      	bmi.n	800b916 <__swsetup_r+0x62>
 800b8d0:	06da      	lsls	r2, r3, #27
 800b8d2:	d407      	bmi.n	800b8e4 <__swsetup_r+0x30>
 800b8d4:	2209      	movs	r2, #9
 800b8d6:	602a      	str	r2, [r5, #0]
 800b8d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8dc:	81a3      	strh	r3, [r4, #12]
 800b8de:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e2:	e033      	b.n	800b94c <__swsetup_r+0x98>
 800b8e4:	0758      	lsls	r0, r3, #29
 800b8e6:	d512      	bpl.n	800b90e <__swsetup_r+0x5a>
 800b8e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8ea:	b141      	cbz	r1, 800b8fe <__swsetup_r+0x4a>
 800b8ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8f0:	4299      	cmp	r1, r3
 800b8f2:	d002      	beq.n	800b8fa <__swsetup_r+0x46>
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f000 f93b 	bl	800bb70 <_free_r>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	2300      	movs	r3, #0
 800b908:	6063      	str	r3, [r4, #4]
 800b90a:	6923      	ldr	r3, [r4, #16]
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f043 0308 	orr.w	r3, r3, #8
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	6923      	ldr	r3, [r4, #16]
 800b918:	b94b      	cbnz	r3, 800b92e <__swsetup_r+0x7a>
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b924:	d003      	beq.n	800b92e <__swsetup_r+0x7a>
 800b926:	4621      	mov	r1, r4
 800b928:	4628      	mov	r0, r5
 800b92a:	f000 fd35 	bl	800c398 <__smakebuf_r>
 800b92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b932:	f013 0201 	ands.w	r2, r3, #1
 800b936:	d00a      	beq.n	800b94e <__swsetup_r+0x9a>
 800b938:	2200      	movs	r2, #0
 800b93a:	60a2      	str	r2, [r4, #8]
 800b93c:	6962      	ldr	r2, [r4, #20]
 800b93e:	4252      	negs	r2, r2
 800b940:	61a2      	str	r2, [r4, #24]
 800b942:	6922      	ldr	r2, [r4, #16]
 800b944:	b942      	cbnz	r2, 800b958 <__swsetup_r+0xa4>
 800b946:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b94a:	d1c5      	bne.n	800b8d8 <__swsetup_r+0x24>
 800b94c:	bd38      	pop	{r3, r4, r5, pc}
 800b94e:	0799      	lsls	r1, r3, #30
 800b950:	bf58      	it	pl
 800b952:	6962      	ldrpl	r2, [r4, #20]
 800b954:	60a2      	str	r2, [r4, #8]
 800b956:	e7f4      	b.n	800b942 <__swsetup_r+0x8e>
 800b958:	2000      	movs	r0, #0
 800b95a:	e7f7      	b.n	800b94c <__swsetup_r+0x98>
 800b95c:	2000001c 	.word	0x2000001c

0800b960 <memset>:
 800b960:	4402      	add	r2, r0
 800b962:	4603      	mov	r3, r0
 800b964:	4293      	cmp	r3, r2
 800b966:	d100      	bne.n	800b96a <memset+0xa>
 800b968:	4770      	bx	lr
 800b96a:	f803 1b01 	strb.w	r1, [r3], #1
 800b96e:	e7f9      	b.n	800b964 <memset+0x4>

0800b970 <strchr>:
 800b970:	b2c9      	uxtb	r1, r1
 800b972:	4603      	mov	r3, r0
 800b974:	4618      	mov	r0, r3
 800b976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b97a:	b112      	cbz	r2, 800b982 <strchr+0x12>
 800b97c:	428a      	cmp	r2, r1
 800b97e:	d1f9      	bne.n	800b974 <strchr+0x4>
 800b980:	4770      	bx	lr
 800b982:	2900      	cmp	r1, #0
 800b984:	bf18      	it	ne
 800b986:	2000      	movne	r0, #0
 800b988:	4770      	bx	lr

0800b98a <strncmp>:
 800b98a:	b510      	push	{r4, lr}
 800b98c:	b16a      	cbz	r2, 800b9aa <strncmp+0x20>
 800b98e:	3901      	subs	r1, #1
 800b990:	1884      	adds	r4, r0, r2
 800b992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b996:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d103      	bne.n	800b9a6 <strncmp+0x1c>
 800b99e:	42a0      	cmp	r0, r4
 800b9a0:	d001      	beq.n	800b9a6 <strncmp+0x1c>
 800b9a2:	2a00      	cmp	r2, #0
 800b9a4:	d1f5      	bne.n	800b992 <strncmp+0x8>
 800b9a6:	1ad0      	subs	r0, r2, r3
 800b9a8:	bd10      	pop	{r4, pc}
 800b9aa:	4610      	mov	r0, r2
 800b9ac:	e7fc      	b.n	800b9a8 <strncmp+0x1e>

0800b9ae <strncpy>:
 800b9ae:	b510      	push	{r4, lr}
 800b9b0:	3901      	subs	r1, #1
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	b132      	cbz	r2, 800b9c4 <strncpy+0x16>
 800b9b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b9ba:	f803 4b01 	strb.w	r4, [r3], #1
 800b9be:	3a01      	subs	r2, #1
 800b9c0:	2c00      	cmp	r4, #0
 800b9c2:	d1f7      	bne.n	800b9b4 <strncpy+0x6>
 800b9c4:	441a      	add	r2, r3
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d100      	bne.n	800b9ce <strncpy+0x20>
 800b9cc:	bd10      	pop	{r4, pc}
 800b9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b9d2:	e7f9      	b.n	800b9c8 <strncpy+0x1a>

0800b9d4 <strstr>:
 800b9d4:	780a      	ldrb	r2, [r1, #0]
 800b9d6:	b570      	push	{r4, r5, r6, lr}
 800b9d8:	b96a      	cbnz	r2, 800b9f6 <strstr+0x22>
 800b9da:	bd70      	pop	{r4, r5, r6, pc}
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d109      	bne.n	800b9f4 <strstr+0x20>
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0f6      	beq.n	800b9da <strstr+0x6>
 800b9ec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b9f0:	429e      	cmp	r6, r3
 800b9f2:	d0f7      	beq.n	800b9e4 <strstr+0x10>
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	7803      	ldrb	r3, [r0, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d1ef      	bne.n	800b9dc <strstr+0x8>
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	e7ec      	b.n	800b9da <strstr+0x6>

0800ba00 <_close_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d06      	ldr	r5, [pc, #24]	@ (800ba1c <_close_r+0x1c>)
 800ba04:	2300      	movs	r3, #0
 800ba06:	4604      	mov	r4, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	602b      	str	r3, [r5, #0]
 800ba0c:	f7f5 fd7a 	bl	8001504 <_close>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d102      	bne.n	800ba1a <_close_r+0x1a>
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	b103      	cbz	r3, 800ba1a <_close_r+0x1a>
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	200054a8 	.word	0x200054a8

0800ba20 <_lseek_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d07      	ldr	r5, [pc, #28]	@ (800ba40 <_lseek_r+0x20>)
 800ba24:	4604      	mov	r4, r0
 800ba26:	4608      	mov	r0, r1
 800ba28:	4611      	mov	r1, r2
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	602a      	str	r2, [r5, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	f7f5 fd8f 	bl	8001552 <_lseek>
 800ba34:	1c43      	adds	r3, r0, #1
 800ba36:	d102      	bne.n	800ba3e <_lseek_r+0x1e>
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	b103      	cbz	r3, 800ba3e <_lseek_r+0x1e>
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	bd38      	pop	{r3, r4, r5, pc}
 800ba40:	200054a8 	.word	0x200054a8

0800ba44 <_read_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4d07      	ldr	r5, [pc, #28]	@ (800ba64 <_read_r+0x20>)
 800ba48:	4604      	mov	r4, r0
 800ba4a:	4608      	mov	r0, r1
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	2200      	movs	r2, #0
 800ba50:	602a      	str	r2, [r5, #0]
 800ba52:	461a      	mov	r2, r3
 800ba54:	f7f5 fd1d 	bl	8001492 <_read>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d102      	bne.n	800ba62 <_read_r+0x1e>
 800ba5c:	682b      	ldr	r3, [r5, #0]
 800ba5e:	b103      	cbz	r3, 800ba62 <_read_r+0x1e>
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	200054a8 	.word	0x200054a8

0800ba68 <_sbrk_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d06      	ldr	r5, [pc, #24]	@ (800ba84 <_sbrk_r+0x1c>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4604      	mov	r4, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	602b      	str	r3, [r5, #0]
 800ba74:	f7f5 fd7a 	bl	800156c <_sbrk>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_sbrk_r+0x1a>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_sbrk_r+0x1a>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	200054a8 	.word	0x200054a8

0800ba88 <_write_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d07      	ldr	r5, [pc, #28]	@ (800baa8 <_write_r+0x20>)
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	4608      	mov	r0, r1
 800ba90:	4611      	mov	r1, r2
 800ba92:	2200      	movs	r2, #0
 800ba94:	602a      	str	r2, [r5, #0]
 800ba96:	461a      	mov	r2, r3
 800ba98:	f7f5 fd18 	bl	80014cc <_write>
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	d102      	bne.n	800baa6 <_write_r+0x1e>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	b103      	cbz	r3, 800baa6 <_write_r+0x1e>
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	bd38      	pop	{r3, r4, r5, pc}
 800baa8:	200054a8 	.word	0x200054a8

0800baac <__errno>:
 800baac:	4b01      	ldr	r3, [pc, #4]	@ (800bab4 <__errno+0x8>)
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	2000001c 	.word	0x2000001c

0800bab8 <__libc_init_array>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	4d0d      	ldr	r5, [pc, #52]	@ (800baf0 <__libc_init_array+0x38>)
 800babc:	4c0d      	ldr	r4, [pc, #52]	@ (800baf4 <__libc_init_array+0x3c>)
 800babe:	1b64      	subs	r4, r4, r5
 800bac0:	10a4      	asrs	r4, r4, #2
 800bac2:	2600      	movs	r6, #0
 800bac4:	42a6      	cmp	r6, r4
 800bac6:	d109      	bne.n	800badc <__libc_init_array+0x24>
 800bac8:	4d0b      	ldr	r5, [pc, #44]	@ (800baf8 <__libc_init_array+0x40>)
 800baca:	4c0c      	ldr	r4, [pc, #48]	@ (800bafc <__libc_init_array+0x44>)
 800bacc:	f000 fe9e 	bl	800c80c <_init>
 800bad0:	1b64      	subs	r4, r4, r5
 800bad2:	10a4      	asrs	r4, r4, #2
 800bad4:	2600      	movs	r6, #0
 800bad6:	42a6      	cmp	r6, r4
 800bad8:	d105      	bne.n	800bae6 <__libc_init_array+0x2e>
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bae0:	4798      	blx	r3
 800bae2:	3601      	adds	r6, #1
 800bae4:	e7ee      	b.n	800bac4 <__libc_init_array+0xc>
 800bae6:	f855 3b04 	ldr.w	r3, [r5], #4
 800baea:	4798      	blx	r3
 800baec:	3601      	adds	r6, #1
 800baee:	e7f2      	b.n	800bad6 <__libc_init_array+0x1e>
 800baf0:	0800ccc8 	.word	0x0800ccc8
 800baf4:	0800ccc8 	.word	0x0800ccc8
 800baf8:	0800ccc8 	.word	0x0800ccc8
 800bafc:	0800cccc 	.word	0x0800cccc

0800bb00 <__retarget_lock_init_recursive>:
 800bb00:	4770      	bx	lr

0800bb02 <__retarget_lock_acquire_recursive>:
 800bb02:	4770      	bx	lr

0800bb04 <__retarget_lock_release_recursive>:
 800bb04:	4770      	bx	lr

0800bb06 <strcpy>:
 800bb06:	4603      	mov	r3, r0
 800bb08:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb0c:	f803 2b01 	strb.w	r2, [r3], #1
 800bb10:	2a00      	cmp	r2, #0
 800bb12:	d1f9      	bne.n	800bb08 <strcpy+0x2>
 800bb14:	4770      	bx	lr

0800bb16 <memcpy>:
 800bb16:	440a      	add	r2, r1
 800bb18:	4291      	cmp	r1, r2
 800bb1a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb1e:	d100      	bne.n	800bb22 <memcpy+0xc>
 800bb20:	4770      	bx	lr
 800bb22:	b510      	push	{r4, lr}
 800bb24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb2c:	4291      	cmp	r1, r2
 800bb2e:	d1f9      	bne.n	800bb24 <memcpy+0xe>
 800bb30:	bd10      	pop	{r4, pc}
	...

0800bb34 <__assert_func>:
 800bb34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb36:	4614      	mov	r4, r2
 800bb38:	461a      	mov	r2, r3
 800bb3a:	4b09      	ldr	r3, [pc, #36]	@ (800bb60 <__assert_func+0x2c>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4605      	mov	r5, r0
 800bb40:	68d8      	ldr	r0, [r3, #12]
 800bb42:	b954      	cbnz	r4, 800bb5a <__assert_func+0x26>
 800bb44:	4b07      	ldr	r3, [pc, #28]	@ (800bb64 <__assert_func+0x30>)
 800bb46:	461c      	mov	r4, r3
 800bb48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb4c:	9100      	str	r1, [sp, #0]
 800bb4e:	462b      	mov	r3, r5
 800bb50:	4905      	ldr	r1, [pc, #20]	@ (800bb68 <__assert_func+0x34>)
 800bb52:	f000 fbe9 	bl	800c328 <fiprintf>
 800bb56:	f000 fc97 	bl	800c488 <abort>
 800bb5a:	4b04      	ldr	r3, [pc, #16]	@ (800bb6c <__assert_func+0x38>)
 800bb5c:	e7f4      	b.n	800bb48 <__assert_func+0x14>
 800bb5e:	bf00      	nop
 800bb60:	2000001c 	.word	0x2000001c
 800bb64:	0800cc8b 	.word	0x0800cc8b
 800bb68:	0800cc5d 	.word	0x0800cc5d
 800bb6c:	0800cc50 	.word	0x0800cc50

0800bb70 <_free_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4605      	mov	r5, r0
 800bb74:	2900      	cmp	r1, #0
 800bb76:	d041      	beq.n	800bbfc <_free_r+0x8c>
 800bb78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb7c:	1f0c      	subs	r4, r1, #4
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	bfb8      	it	lt
 800bb82:	18e4      	addlt	r4, r4, r3
 800bb84:	f7ff fbce 	bl	800b324 <__malloc_lock>
 800bb88:	4a1d      	ldr	r2, [pc, #116]	@ (800bc00 <_free_r+0x90>)
 800bb8a:	6813      	ldr	r3, [r2, #0]
 800bb8c:	b933      	cbnz	r3, 800bb9c <_free_r+0x2c>
 800bb8e:	6063      	str	r3, [r4, #4]
 800bb90:	6014      	str	r4, [r2, #0]
 800bb92:	4628      	mov	r0, r5
 800bb94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb98:	f7ff bbca 	b.w	800b330 <__malloc_unlock>
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	d908      	bls.n	800bbb2 <_free_r+0x42>
 800bba0:	6820      	ldr	r0, [r4, #0]
 800bba2:	1821      	adds	r1, r4, r0
 800bba4:	428b      	cmp	r3, r1
 800bba6:	bf01      	itttt	eq
 800bba8:	6819      	ldreq	r1, [r3, #0]
 800bbaa:	685b      	ldreq	r3, [r3, #4]
 800bbac:	1809      	addeq	r1, r1, r0
 800bbae:	6021      	streq	r1, [r4, #0]
 800bbb0:	e7ed      	b.n	800bb8e <_free_r+0x1e>
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	b10b      	cbz	r3, 800bbbc <_free_r+0x4c>
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	d9fa      	bls.n	800bbb2 <_free_r+0x42>
 800bbbc:	6811      	ldr	r1, [r2, #0]
 800bbbe:	1850      	adds	r0, r2, r1
 800bbc0:	42a0      	cmp	r0, r4
 800bbc2:	d10b      	bne.n	800bbdc <_free_r+0x6c>
 800bbc4:	6820      	ldr	r0, [r4, #0]
 800bbc6:	4401      	add	r1, r0
 800bbc8:	1850      	adds	r0, r2, r1
 800bbca:	4283      	cmp	r3, r0
 800bbcc:	6011      	str	r1, [r2, #0]
 800bbce:	d1e0      	bne.n	800bb92 <_free_r+0x22>
 800bbd0:	6818      	ldr	r0, [r3, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	6053      	str	r3, [r2, #4]
 800bbd6:	4408      	add	r0, r1
 800bbd8:	6010      	str	r0, [r2, #0]
 800bbda:	e7da      	b.n	800bb92 <_free_r+0x22>
 800bbdc:	d902      	bls.n	800bbe4 <_free_r+0x74>
 800bbde:	230c      	movs	r3, #12
 800bbe0:	602b      	str	r3, [r5, #0]
 800bbe2:	e7d6      	b.n	800bb92 <_free_r+0x22>
 800bbe4:	6820      	ldr	r0, [r4, #0]
 800bbe6:	1821      	adds	r1, r4, r0
 800bbe8:	428b      	cmp	r3, r1
 800bbea:	bf04      	itt	eq
 800bbec:	6819      	ldreq	r1, [r3, #0]
 800bbee:	685b      	ldreq	r3, [r3, #4]
 800bbf0:	6063      	str	r3, [r4, #4]
 800bbf2:	bf04      	itt	eq
 800bbf4:	1809      	addeq	r1, r1, r0
 800bbf6:	6021      	streq	r1, [r4, #0]
 800bbf8:	6054      	str	r4, [r2, #4]
 800bbfa:	e7ca      	b.n	800bb92 <_free_r+0x22>
 800bbfc:	bd38      	pop	{r3, r4, r5, pc}
 800bbfe:	bf00      	nop
 800bc00:	20005368 	.word	0x20005368

0800bc04 <__ssputs_r>:
 800bc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc08:	688e      	ldr	r6, [r1, #8]
 800bc0a:	461f      	mov	r7, r3
 800bc0c:	42be      	cmp	r6, r7
 800bc0e:	680b      	ldr	r3, [r1, #0]
 800bc10:	4682      	mov	sl, r0
 800bc12:	460c      	mov	r4, r1
 800bc14:	4690      	mov	r8, r2
 800bc16:	d82d      	bhi.n	800bc74 <__ssputs_r+0x70>
 800bc18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc20:	d026      	beq.n	800bc70 <__ssputs_r+0x6c>
 800bc22:	6965      	ldr	r5, [r4, #20]
 800bc24:	6909      	ldr	r1, [r1, #16]
 800bc26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc2a:	eba3 0901 	sub.w	r9, r3, r1
 800bc2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc32:	1c7b      	adds	r3, r7, #1
 800bc34:	444b      	add	r3, r9
 800bc36:	106d      	asrs	r5, r5, #1
 800bc38:	429d      	cmp	r5, r3
 800bc3a:	bf38      	it	cc
 800bc3c:	461d      	movcc	r5, r3
 800bc3e:	0553      	lsls	r3, r2, #21
 800bc40:	d527      	bpl.n	800bc92 <__ssputs_r+0x8e>
 800bc42:	4629      	mov	r1, r5
 800bc44:	f7ff faee 	bl	800b224 <_malloc_r>
 800bc48:	4606      	mov	r6, r0
 800bc4a:	b360      	cbz	r0, 800bca6 <__ssputs_r+0xa2>
 800bc4c:	6921      	ldr	r1, [r4, #16]
 800bc4e:	464a      	mov	r2, r9
 800bc50:	f7ff ff61 	bl	800bb16 <memcpy>
 800bc54:	89a3      	ldrh	r3, [r4, #12]
 800bc56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc5e:	81a3      	strh	r3, [r4, #12]
 800bc60:	6126      	str	r6, [r4, #16]
 800bc62:	6165      	str	r5, [r4, #20]
 800bc64:	444e      	add	r6, r9
 800bc66:	eba5 0509 	sub.w	r5, r5, r9
 800bc6a:	6026      	str	r6, [r4, #0]
 800bc6c:	60a5      	str	r5, [r4, #8]
 800bc6e:	463e      	mov	r6, r7
 800bc70:	42be      	cmp	r6, r7
 800bc72:	d900      	bls.n	800bc76 <__ssputs_r+0x72>
 800bc74:	463e      	mov	r6, r7
 800bc76:	6820      	ldr	r0, [r4, #0]
 800bc78:	4632      	mov	r2, r6
 800bc7a:	4641      	mov	r1, r8
 800bc7c:	f000 fbc8 	bl	800c410 <memmove>
 800bc80:	68a3      	ldr	r3, [r4, #8]
 800bc82:	1b9b      	subs	r3, r3, r6
 800bc84:	60a3      	str	r3, [r4, #8]
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	4433      	add	r3, r6
 800bc8a:	6023      	str	r3, [r4, #0]
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc92:	462a      	mov	r2, r5
 800bc94:	f000 fbff 	bl	800c496 <_realloc_r>
 800bc98:	4606      	mov	r6, r0
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d1e0      	bne.n	800bc60 <__ssputs_r+0x5c>
 800bc9e:	6921      	ldr	r1, [r4, #16]
 800bca0:	4650      	mov	r0, sl
 800bca2:	f7ff ff65 	bl	800bb70 <_free_r>
 800bca6:	230c      	movs	r3, #12
 800bca8:	f8ca 3000 	str.w	r3, [sl]
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcb2:	81a3      	strh	r3, [r4, #12]
 800bcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb8:	e7e9      	b.n	800bc8e <__ssputs_r+0x8a>
	...

0800bcbc <_svfiprintf_r>:
 800bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	4698      	mov	r8, r3
 800bcc2:	898b      	ldrh	r3, [r1, #12]
 800bcc4:	061b      	lsls	r3, r3, #24
 800bcc6:	b09d      	sub	sp, #116	@ 0x74
 800bcc8:	4607      	mov	r7, r0
 800bcca:	460d      	mov	r5, r1
 800bccc:	4614      	mov	r4, r2
 800bcce:	d510      	bpl.n	800bcf2 <_svfiprintf_r+0x36>
 800bcd0:	690b      	ldr	r3, [r1, #16]
 800bcd2:	b973      	cbnz	r3, 800bcf2 <_svfiprintf_r+0x36>
 800bcd4:	2140      	movs	r1, #64	@ 0x40
 800bcd6:	f7ff faa5 	bl	800b224 <_malloc_r>
 800bcda:	6028      	str	r0, [r5, #0]
 800bcdc:	6128      	str	r0, [r5, #16]
 800bcde:	b930      	cbnz	r0, 800bcee <_svfiprintf_r+0x32>
 800bce0:	230c      	movs	r3, #12
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	f04f 30ff 	mov.w	r0, #4294967295
 800bce8:	b01d      	add	sp, #116	@ 0x74
 800bcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcee:	2340      	movs	r3, #64	@ 0x40
 800bcf0:	616b      	str	r3, [r5, #20]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcf6:	2320      	movs	r3, #32
 800bcf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd00:	2330      	movs	r3, #48	@ 0x30
 800bd02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bea0 <_svfiprintf_r+0x1e4>
 800bd06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd0a:	f04f 0901 	mov.w	r9, #1
 800bd0e:	4623      	mov	r3, r4
 800bd10:	469a      	mov	sl, r3
 800bd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd16:	b10a      	cbz	r2, 800bd1c <_svfiprintf_r+0x60>
 800bd18:	2a25      	cmp	r2, #37	@ 0x25
 800bd1a:	d1f9      	bne.n	800bd10 <_svfiprintf_r+0x54>
 800bd1c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd20:	d00b      	beq.n	800bd3a <_svfiprintf_r+0x7e>
 800bd22:	465b      	mov	r3, fp
 800bd24:	4622      	mov	r2, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f7ff ff6b 	bl	800bc04 <__ssputs_r>
 800bd2e:	3001      	adds	r0, #1
 800bd30:	f000 80a7 	beq.w	800be82 <_svfiprintf_r+0x1c6>
 800bd34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd36:	445a      	add	r2, fp
 800bd38:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 809f 	beq.w	800be82 <_svfiprintf_r+0x1c6>
 800bd44:	2300      	movs	r3, #0
 800bd46:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd4e:	f10a 0a01 	add.w	sl, sl, #1
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	9307      	str	r3, [sp, #28]
 800bd56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd5c:	4654      	mov	r4, sl
 800bd5e:	2205      	movs	r2, #5
 800bd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd64:	484e      	ldr	r0, [pc, #312]	@ (800bea0 <_svfiprintf_r+0x1e4>)
 800bd66:	f7f4 fa83 	bl	8000270 <memchr>
 800bd6a:	9a04      	ldr	r2, [sp, #16]
 800bd6c:	b9d8      	cbnz	r0, 800bda6 <_svfiprintf_r+0xea>
 800bd6e:	06d0      	lsls	r0, r2, #27
 800bd70:	bf44      	itt	mi
 800bd72:	2320      	movmi	r3, #32
 800bd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd78:	0711      	lsls	r1, r2, #28
 800bd7a:	bf44      	itt	mi
 800bd7c:	232b      	movmi	r3, #43	@ 0x2b
 800bd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd82:	f89a 3000 	ldrb.w	r3, [sl]
 800bd86:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd88:	d015      	beq.n	800bdb6 <_svfiprintf_r+0xfa>
 800bd8a:	9a07      	ldr	r2, [sp, #28]
 800bd8c:	4654      	mov	r4, sl
 800bd8e:	2000      	movs	r0, #0
 800bd90:	f04f 0c0a 	mov.w	ip, #10
 800bd94:	4621      	mov	r1, r4
 800bd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd9a:	3b30      	subs	r3, #48	@ 0x30
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	d94b      	bls.n	800be38 <_svfiprintf_r+0x17c>
 800bda0:	b1b0      	cbz	r0, 800bdd0 <_svfiprintf_r+0x114>
 800bda2:	9207      	str	r2, [sp, #28]
 800bda4:	e014      	b.n	800bdd0 <_svfiprintf_r+0x114>
 800bda6:	eba0 0308 	sub.w	r3, r0, r8
 800bdaa:	fa09 f303 	lsl.w	r3, r9, r3
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	9304      	str	r3, [sp, #16]
 800bdb2:	46a2      	mov	sl, r4
 800bdb4:	e7d2      	b.n	800bd5c <_svfiprintf_r+0xa0>
 800bdb6:	9b03      	ldr	r3, [sp, #12]
 800bdb8:	1d19      	adds	r1, r3, #4
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	9103      	str	r1, [sp, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	bfbb      	ittet	lt
 800bdc2:	425b      	neglt	r3, r3
 800bdc4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdc8:	9307      	strge	r3, [sp, #28]
 800bdca:	9307      	strlt	r3, [sp, #28]
 800bdcc:	bfb8      	it	lt
 800bdce:	9204      	strlt	r2, [sp, #16]
 800bdd0:	7823      	ldrb	r3, [r4, #0]
 800bdd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdd4:	d10a      	bne.n	800bdec <_svfiprintf_r+0x130>
 800bdd6:	7863      	ldrb	r3, [r4, #1]
 800bdd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdda:	d132      	bne.n	800be42 <_svfiprintf_r+0x186>
 800bddc:	9b03      	ldr	r3, [sp, #12]
 800bdde:	1d1a      	adds	r2, r3, #4
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	9203      	str	r2, [sp, #12]
 800bde4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bde8:	3402      	adds	r4, #2
 800bdea:	9305      	str	r3, [sp, #20]
 800bdec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800beb0 <_svfiprintf_r+0x1f4>
 800bdf0:	7821      	ldrb	r1, [r4, #0]
 800bdf2:	2203      	movs	r2, #3
 800bdf4:	4650      	mov	r0, sl
 800bdf6:	f7f4 fa3b 	bl	8000270 <memchr>
 800bdfa:	b138      	cbz	r0, 800be0c <_svfiprintf_r+0x150>
 800bdfc:	9b04      	ldr	r3, [sp, #16]
 800bdfe:	eba0 000a 	sub.w	r0, r0, sl
 800be02:	2240      	movs	r2, #64	@ 0x40
 800be04:	4082      	lsls	r2, r0
 800be06:	4313      	orrs	r3, r2
 800be08:	3401      	adds	r4, #1
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be10:	4824      	ldr	r0, [pc, #144]	@ (800bea4 <_svfiprintf_r+0x1e8>)
 800be12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be16:	2206      	movs	r2, #6
 800be18:	f7f4 fa2a 	bl	8000270 <memchr>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d036      	beq.n	800be8e <_svfiprintf_r+0x1d2>
 800be20:	4b21      	ldr	r3, [pc, #132]	@ (800bea8 <_svfiprintf_r+0x1ec>)
 800be22:	bb1b      	cbnz	r3, 800be6c <_svfiprintf_r+0x1b0>
 800be24:	9b03      	ldr	r3, [sp, #12]
 800be26:	3307      	adds	r3, #7
 800be28:	f023 0307 	bic.w	r3, r3, #7
 800be2c:	3308      	adds	r3, #8
 800be2e:	9303      	str	r3, [sp, #12]
 800be30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be32:	4433      	add	r3, r6
 800be34:	9309      	str	r3, [sp, #36]	@ 0x24
 800be36:	e76a      	b.n	800bd0e <_svfiprintf_r+0x52>
 800be38:	fb0c 3202 	mla	r2, ip, r2, r3
 800be3c:	460c      	mov	r4, r1
 800be3e:	2001      	movs	r0, #1
 800be40:	e7a8      	b.n	800bd94 <_svfiprintf_r+0xd8>
 800be42:	2300      	movs	r3, #0
 800be44:	3401      	adds	r4, #1
 800be46:	9305      	str	r3, [sp, #20]
 800be48:	4619      	mov	r1, r3
 800be4a:	f04f 0c0a 	mov.w	ip, #10
 800be4e:	4620      	mov	r0, r4
 800be50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be54:	3a30      	subs	r2, #48	@ 0x30
 800be56:	2a09      	cmp	r2, #9
 800be58:	d903      	bls.n	800be62 <_svfiprintf_r+0x1a6>
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d0c6      	beq.n	800bdec <_svfiprintf_r+0x130>
 800be5e:	9105      	str	r1, [sp, #20]
 800be60:	e7c4      	b.n	800bdec <_svfiprintf_r+0x130>
 800be62:	fb0c 2101 	mla	r1, ip, r1, r2
 800be66:	4604      	mov	r4, r0
 800be68:	2301      	movs	r3, #1
 800be6a:	e7f0      	b.n	800be4e <_svfiprintf_r+0x192>
 800be6c:	ab03      	add	r3, sp, #12
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	462a      	mov	r2, r5
 800be72:	4b0e      	ldr	r3, [pc, #56]	@ (800beac <_svfiprintf_r+0x1f0>)
 800be74:	a904      	add	r1, sp, #16
 800be76:	4638      	mov	r0, r7
 800be78:	f3af 8000 	nop.w
 800be7c:	1c42      	adds	r2, r0, #1
 800be7e:	4606      	mov	r6, r0
 800be80:	d1d6      	bne.n	800be30 <_svfiprintf_r+0x174>
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	065b      	lsls	r3, r3, #25
 800be86:	f53f af2d 	bmi.w	800bce4 <_svfiprintf_r+0x28>
 800be8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be8c:	e72c      	b.n	800bce8 <_svfiprintf_r+0x2c>
 800be8e:	ab03      	add	r3, sp, #12
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	462a      	mov	r2, r5
 800be94:	4b05      	ldr	r3, [pc, #20]	@ (800beac <_svfiprintf_r+0x1f0>)
 800be96:	a904      	add	r1, sp, #16
 800be98:	4638      	mov	r0, r7
 800be9a:	f000 f879 	bl	800bf90 <_printf_i>
 800be9e:	e7ed      	b.n	800be7c <_svfiprintf_r+0x1c0>
 800bea0:	0800cc8c 	.word	0x0800cc8c
 800bea4:	0800cc96 	.word	0x0800cc96
 800bea8:	00000000 	.word	0x00000000
 800beac:	0800bc05 	.word	0x0800bc05
 800beb0:	0800cc92 	.word	0x0800cc92

0800beb4 <_printf_common>:
 800beb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beb8:	4616      	mov	r6, r2
 800beba:	4698      	mov	r8, r3
 800bebc:	688a      	ldr	r2, [r1, #8]
 800bebe:	690b      	ldr	r3, [r1, #16]
 800bec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bec4:	4293      	cmp	r3, r2
 800bec6:	bfb8      	it	lt
 800bec8:	4613      	movlt	r3, r2
 800beca:	6033      	str	r3, [r6, #0]
 800becc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bed0:	4607      	mov	r7, r0
 800bed2:	460c      	mov	r4, r1
 800bed4:	b10a      	cbz	r2, 800beda <_printf_common+0x26>
 800bed6:	3301      	adds	r3, #1
 800bed8:	6033      	str	r3, [r6, #0]
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	0699      	lsls	r1, r3, #26
 800bede:	bf42      	ittt	mi
 800bee0:	6833      	ldrmi	r3, [r6, #0]
 800bee2:	3302      	addmi	r3, #2
 800bee4:	6033      	strmi	r3, [r6, #0]
 800bee6:	6825      	ldr	r5, [r4, #0]
 800bee8:	f015 0506 	ands.w	r5, r5, #6
 800beec:	d106      	bne.n	800befc <_printf_common+0x48>
 800beee:	f104 0a19 	add.w	sl, r4, #25
 800bef2:	68e3      	ldr	r3, [r4, #12]
 800bef4:	6832      	ldr	r2, [r6, #0]
 800bef6:	1a9b      	subs	r3, r3, r2
 800bef8:	42ab      	cmp	r3, r5
 800befa:	dc26      	bgt.n	800bf4a <_printf_common+0x96>
 800befc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf00:	6822      	ldr	r2, [r4, #0]
 800bf02:	3b00      	subs	r3, #0
 800bf04:	bf18      	it	ne
 800bf06:	2301      	movne	r3, #1
 800bf08:	0692      	lsls	r2, r2, #26
 800bf0a:	d42b      	bmi.n	800bf64 <_printf_common+0xb0>
 800bf0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf10:	4641      	mov	r1, r8
 800bf12:	4638      	mov	r0, r7
 800bf14:	47c8      	blx	r9
 800bf16:	3001      	adds	r0, #1
 800bf18:	d01e      	beq.n	800bf58 <_printf_common+0xa4>
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	6922      	ldr	r2, [r4, #16]
 800bf1e:	f003 0306 	and.w	r3, r3, #6
 800bf22:	2b04      	cmp	r3, #4
 800bf24:	bf02      	ittt	eq
 800bf26:	68e5      	ldreq	r5, [r4, #12]
 800bf28:	6833      	ldreq	r3, [r6, #0]
 800bf2a:	1aed      	subeq	r5, r5, r3
 800bf2c:	68a3      	ldr	r3, [r4, #8]
 800bf2e:	bf0c      	ite	eq
 800bf30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf34:	2500      	movne	r5, #0
 800bf36:	4293      	cmp	r3, r2
 800bf38:	bfc4      	itt	gt
 800bf3a:	1a9b      	subgt	r3, r3, r2
 800bf3c:	18ed      	addgt	r5, r5, r3
 800bf3e:	2600      	movs	r6, #0
 800bf40:	341a      	adds	r4, #26
 800bf42:	42b5      	cmp	r5, r6
 800bf44:	d11a      	bne.n	800bf7c <_printf_common+0xc8>
 800bf46:	2000      	movs	r0, #0
 800bf48:	e008      	b.n	800bf5c <_printf_common+0xa8>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	4652      	mov	r2, sl
 800bf4e:	4641      	mov	r1, r8
 800bf50:	4638      	mov	r0, r7
 800bf52:	47c8      	blx	r9
 800bf54:	3001      	adds	r0, #1
 800bf56:	d103      	bne.n	800bf60 <_printf_common+0xac>
 800bf58:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf60:	3501      	adds	r5, #1
 800bf62:	e7c6      	b.n	800bef2 <_printf_common+0x3e>
 800bf64:	18e1      	adds	r1, r4, r3
 800bf66:	1c5a      	adds	r2, r3, #1
 800bf68:	2030      	movs	r0, #48	@ 0x30
 800bf6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf6e:	4422      	add	r2, r4
 800bf70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf78:	3302      	adds	r3, #2
 800bf7a:	e7c7      	b.n	800bf0c <_printf_common+0x58>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	4622      	mov	r2, r4
 800bf80:	4641      	mov	r1, r8
 800bf82:	4638      	mov	r0, r7
 800bf84:	47c8      	blx	r9
 800bf86:	3001      	adds	r0, #1
 800bf88:	d0e6      	beq.n	800bf58 <_printf_common+0xa4>
 800bf8a:	3601      	adds	r6, #1
 800bf8c:	e7d9      	b.n	800bf42 <_printf_common+0x8e>
	...

0800bf90 <_printf_i>:
 800bf90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf94:	7e0f      	ldrb	r7, [r1, #24]
 800bf96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf98:	2f78      	cmp	r7, #120	@ 0x78
 800bf9a:	4691      	mov	r9, r2
 800bf9c:	4680      	mov	r8, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	469a      	mov	sl, r3
 800bfa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bfa6:	d807      	bhi.n	800bfb8 <_printf_i+0x28>
 800bfa8:	2f62      	cmp	r7, #98	@ 0x62
 800bfaa:	d80a      	bhi.n	800bfc2 <_printf_i+0x32>
 800bfac:	2f00      	cmp	r7, #0
 800bfae:	f000 80d2 	beq.w	800c156 <_printf_i+0x1c6>
 800bfb2:	2f58      	cmp	r7, #88	@ 0x58
 800bfb4:	f000 80b9 	beq.w	800c12a <_printf_i+0x19a>
 800bfb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfc0:	e03a      	b.n	800c038 <_printf_i+0xa8>
 800bfc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfc6:	2b15      	cmp	r3, #21
 800bfc8:	d8f6      	bhi.n	800bfb8 <_printf_i+0x28>
 800bfca:	a101      	add	r1, pc, #4	@ (adr r1, 800bfd0 <_printf_i+0x40>)
 800bfcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfd0:	0800c029 	.word	0x0800c029
 800bfd4:	0800c03d 	.word	0x0800c03d
 800bfd8:	0800bfb9 	.word	0x0800bfb9
 800bfdc:	0800bfb9 	.word	0x0800bfb9
 800bfe0:	0800bfb9 	.word	0x0800bfb9
 800bfe4:	0800bfb9 	.word	0x0800bfb9
 800bfe8:	0800c03d 	.word	0x0800c03d
 800bfec:	0800bfb9 	.word	0x0800bfb9
 800bff0:	0800bfb9 	.word	0x0800bfb9
 800bff4:	0800bfb9 	.word	0x0800bfb9
 800bff8:	0800bfb9 	.word	0x0800bfb9
 800bffc:	0800c13d 	.word	0x0800c13d
 800c000:	0800c067 	.word	0x0800c067
 800c004:	0800c0f7 	.word	0x0800c0f7
 800c008:	0800bfb9 	.word	0x0800bfb9
 800c00c:	0800bfb9 	.word	0x0800bfb9
 800c010:	0800c15f 	.word	0x0800c15f
 800c014:	0800bfb9 	.word	0x0800bfb9
 800c018:	0800c067 	.word	0x0800c067
 800c01c:	0800bfb9 	.word	0x0800bfb9
 800c020:	0800bfb9 	.word	0x0800bfb9
 800c024:	0800c0ff 	.word	0x0800c0ff
 800c028:	6833      	ldr	r3, [r6, #0]
 800c02a:	1d1a      	adds	r2, r3, #4
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	6032      	str	r2, [r6, #0]
 800c030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c038:	2301      	movs	r3, #1
 800c03a:	e09d      	b.n	800c178 <_printf_i+0x1e8>
 800c03c:	6833      	ldr	r3, [r6, #0]
 800c03e:	6820      	ldr	r0, [r4, #0]
 800c040:	1d19      	adds	r1, r3, #4
 800c042:	6031      	str	r1, [r6, #0]
 800c044:	0606      	lsls	r6, r0, #24
 800c046:	d501      	bpl.n	800c04c <_printf_i+0xbc>
 800c048:	681d      	ldr	r5, [r3, #0]
 800c04a:	e003      	b.n	800c054 <_printf_i+0xc4>
 800c04c:	0645      	lsls	r5, r0, #25
 800c04e:	d5fb      	bpl.n	800c048 <_printf_i+0xb8>
 800c050:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c054:	2d00      	cmp	r5, #0
 800c056:	da03      	bge.n	800c060 <_printf_i+0xd0>
 800c058:	232d      	movs	r3, #45	@ 0x2d
 800c05a:	426d      	negs	r5, r5
 800c05c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c060:	4859      	ldr	r0, [pc, #356]	@ (800c1c8 <_printf_i+0x238>)
 800c062:	230a      	movs	r3, #10
 800c064:	e011      	b.n	800c08a <_printf_i+0xfa>
 800c066:	6821      	ldr	r1, [r4, #0]
 800c068:	6833      	ldr	r3, [r6, #0]
 800c06a:	0608      	lsls	r0, r1, #24
 800c06c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c070:	d402      	bmi.n	800c078 <_printf_i+0xe8>
 800c072:	0649      	lsls	r1, r1, #25
 800c074:	bf48      	it	mi
 800c076:	b2ad      	uxthmi	r5, r5
 800c078:	2f6f      	cmp	r7, #111	@ 0x6f
 800c07a:	4853      	ldr	r0, [pc, #332]	@ (800c1c8 <_printf_i+0x238>)
 800c07c:	6033      	str	r3, [r6, #0]
 800c07e:	bf14      	ite	ne
 800c080:	230a      	movne	r3, #10
 800c082:	2308      	moveq	r3, #8
 800c084:	2100      	movs	r1, #0
 800c086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c08a:	6866      	ldr	r6, [r4, #4]
 800c08c:	60a6      	str	r6, [r4, #8]
 800c08e:	2e00      	cmp	r6, #0
 800c090:	bfa2      	ittt	ge
 800c092:	6821      	ldrge	r1, [r4, #0]
 800c094:	f021 0104 	bicge.w	r1, r1, #4
 800c098:	6021      	strge	r1, [r4, #0]
 800c09a:	b90d      	cbnz	r5, 800c0a0 <_printf_i+0x110>
 800c09c:	2e00      	cmp	r6, #0
 800c09e:	d04b      	beq.n	800c138 <_printf_i+0x1a8>
 800c0a0:	4616      	mov	r6, r2
 800c0a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0a6:	fb03 5711 	mls	r7, r3, r1, r5
 800c0aa:	5dc7      	ldrb	r7, [r0, r7]
 800c0ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0b0:	462f      	mov	r7, r5
 800c0b2:	42bb      	cmp	r3, r7
 800c0b4:	460d      	mov	r5, r1
 800c0b6:	d9f4      	bls.n	800c0a2 <_printf_i+0x112>
 800c0b8:	2b08      	cmp	r3, #8
 800c0ba:	d10b      	bne.n	800c0d4 <_printf_i+0x144>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	07df      	lsls	r7, r3, #31
 800c0c0:	d508      	bpl.n	800c0d4 <_printf_i+0x144>
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	6861      	ldr	r1, [r4, #4]
 800c0c6:	4299      	cmp	r1, r3
 800c0c8:	bfde      	ittt	le
 800c0ca:	2330      	movle	r3, #48	@ 0x30
 800c0cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0d4:	1b92      	subs	r2, r2, r6
 800c0d6:	6122      	str	r2, [r4, #16]
 800c0d8:	f8cd a000 	str.w	sl, [sp]
 800c0dc:	464b      	mov	r3, r9
 800c0de:	aa03      	add	r2, sp, #12
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	f7ff fee6 	bl	800beb4 <_printf_common>
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d14a      	bne.n	800c182 <_printf_i+0x1f2>
 800c0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f0:	b004      	add	sp, #16
 800c0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	f043 0320 	orr.w	r3, r3, #32
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	4833      	ldr	r0, [pc, #204]	@ (800c1cc <_printf_i+0x23c>)
 800c100:	2778      	movs	r7, #120	@ 0x78
 800c102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	6831      	ldr	r1, [r6, #0]
 800c10a:	061f      	lsls	r7, r3, #24
 800c10c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c110:	d402      	bmi.n	800c118 <_printf_i+0x188>
 800c112:	065f      	lsls	r7, r3, #25
 800c114:	bf48      	it	mi
 800c116:	b2ad      	uxthmi	r5, r5
 800c118:	6031      	str	r1, [r6, #0]
 800c11a:	07d9      	lsls	r1, r3, #31
 800c11c:	bf44      	itt	mi
 800c11e:	f043 0320 	orrmi.w	r3, r3, #32
 800c122:	6023      	strmi	r3, [r4, #0]
 800c124:	b11d      	cbz	r5, 800c12e <_printf_i+0x19e>
 800c126:	2310      	movs	r3, #16
 800c128:	e7ac      	b.n	800c084 <_printf_i+0xf4>
 800c12a:	4827      	ldr	r0, [pc, #156]	@ (800c1c8 <_printf_i+0x238>)
 800c12c:	e7e9      	b.n	800c102 <_printf_i+0x172>
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	f023 0320 	bic.w	r3, r3, #32
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	e7f6      	b.n	800c126 <_printf_i+0x196>
 800c138:	4616      	mov	r6, r2
 800c13a:	e7bd      	b.n	800c0b8 <_printf_i+0x128>
 800c13c:	6833      	ldr	r3, [r6, #0]
 800c13e:	6825      	ldr	r5, [r4, #0]
 800c140:	6961      	ldr	r1, [r4, #20]
 800c142:	1d18      	adds	r0, r3, #4
 800c144:	6030      	str	r0, [r6, #0]
 800c146:	062e      	lsls	r6, r5, #24
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	d501      	bpl.n	800c150 <_printf_i+0x1c0>
 800c14c:	6019      	str	r1, [r3, #0]
 800c14e:	e002      	b.n	800c156 <_printf_i+0x1c6>
 800c150:	0668      	lsls	r0, r5, #25
 800c152:	d5fb      	bpl.n	800c14c <_printf_i+0x1bc>
 800c154:	8019      	strh	r1, [r3, #0]
 800c156:	2300      	movs	r3, #0
 800c158:	6123      	str	r3, [r4, #16]
 800c15a:	4616      	mov	r6, r2
 800c15c:	e7bc      	b.n	800c0d8 <_printf_i+0x148>
 800c15e:	6833      	ldr	r3, [r6, #0]
 800c160:	1d1a      	adds	r2, r3, #4
 800c162:	6032      	str	r2, [r6, #0]
 800c164:	681e      	ldr	r6, [r3, #0]
 800c166:	6862      	ldr	r2, [r4, #4]
 800c168:	2100      	movs	r1, #0
 800c16a:	4630      	mov	r0, r6
 800c16c:	f7f4 f880 	bl	8000270 <memchr>
 800c170:	b108      	cbz	r0, 800c176 <_printf_i+0x1e6>
 800c172:	1b80      	subs	r0, r0, r6
 800c174:	6060      	str	r0, [r4, #4]
 800c176:	6863      	ldr	r3, [r4, #4]
 800c178:	6123      	str	r3, [r4, #16]
 800c17a:	2300      	movs	r3, #0
 800c17c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c180:	e7aa      	b.n	800c0d8 <_printf_i+0x148>
 800c182:	6923      	ldr	r3, [r4, #16]
 800c184:	4632      	mov	r2, r6
 800c186:	4649      	mov	r1, r9
 800c188:	4640      	mov	r0, r8
 800c18a:	47d0      	blx	sl
 800c18c:	3001      	adds	r0, #1
 800c18e:	d0ad      	beq.n	800c0ec <_printf_i+0x15c>
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	079b      	lsls	r3, r3, #30
 800c194:	d413      	bmi.n	800c1be <_printf_i+0x22e>
 800c196:	68e0      	ldr	r0, [r4, #12]
 800c198:	9b03      	ldr	r3, [sp, #12]
 800c19a:	4298      	cmp	r0, r3
 800c19c:	bfb8      	it	lt
 800c19e:	4618      	movlt	r0, r3
 800c1a0:	e7a6      	b.n	800c0f0 <_printf_i+0x160>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4632      	mov	r2, r6
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	47d0      	blx	sl
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d09d      	beq.n	800c0ec <_printf_i+0x15c>
 800c1b0:	3501      	adds	r5, #1
 800c1b2:	68e3      	ldr	r3, [r4, #12]
 800c1b4:	9903      	ldr	r1, [sp, #12]
 800c1b6:	1a5b      	subs	r3, r3, r1
 800c1b8:	42ab      	cmp	r3, r5
 800c1ba:	dcf2      	bgt.n	800c1a2 <_printf_i+0x212>
 800c1bc:	e7eb      	b.n	800c196 <_printf_i+0x206>
 800c1be:	2500      	movs	r5, #0
 800c1c0:	f104 0619 	add.w	r6, r4, #25
 800c1c4:	e7f5      	b.n	800c1b2 <_printf_i+0x222>
 800c1c6:	bf00      	nop
 800c1c8:	0800cc9d 	.word	0x0800cc9d
 800c1cc:	0800ccae 	.word	0x0800ccae

0800c1d0 <__sflush_r>:
 800c1d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d8:	0716      	lsls	r6, r2, #28
 800c1da:	4605      	mov	r5, r0
 800c1dc:	460c      	mov	r4, r1
 800c1de:	d454      	bmi.n	800c28a <__sflush_r+0xba>
 800c1e0:	684b      	ldr	r3, [r1, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	dc02      	bgt.n	800c1ec <__sflush_r+0x1c>
 800c1e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dd48      	ble.n	800c27e <__sflush_r+0xae>
 800c1ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1ee:	2e00      	cmp	r6, #0
 800c1f0:	d045      	beq.n	800c27e <__sflush_r+0xae>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1f8:	682f      	ldr	r7, [r5, #0]
 800c1fa:	6a21      	ldr	r1, [r4, #32]
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	d030      	beq.n	800c262 <__sflush_r+0x92>
 800c200:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	0759      	lsls	r1, r3, #29
 800c206:	d505      	bpl.n	800c214 <__sflush_r+0x44>
 800c208:	6863      	ldr	r3, [r4, #4]
 800c20a:	1ad2      	subs	r2, r2, r3
 800c20c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c20e:	b10b      	cbz	r3, 800c214 <__sflush_r+0x44>
 800c210:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c212:	1ad2      	subs	r2, r2, r3
 800c214:	2300      	movs	r3, #0
 800c216:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c218:	6a21      	ldr	r1, [r4, #32]
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b0      	blx	r6
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	d106      	bne.n	800c232 <__sflush_r+0x62>
 800c224:	6829      	ldr	r1, [r5, #0]
 800c226:	291d      	cmp	r1, #29
 800c228:	d82b      	bhi.n	800c282 <__sflush_r+0xb2>
 800c22a:	4a2a      	ldr	r2, [pc, #168]	@ (800c2d4 <__sflush_r+0x104>)
 800c22c:	410a      	asrs	r2, r1
 800c22e:	07d6      	lsls	r6, r2, #31
 800c230:	d427      	bmi.n	800c282 <__sflush_r+0xb2>
 800c232:	2200      	movs	r2, #0
 800c234:	6062      	str	r2, [r4, #4]
 800c236:	04d9      	lsls	r1, r3, #19
 800c238:	6922      	ldr	r2, [r4, #16]
 800c23a:	6022      	str	r2, [r4, #0]
 800c23c:	d504      	bpl.n	800c248 <__sflush_r+0x78>
 800c23e:	1c42      	adds	r2, r0, #1
 800c240:	d101      	bne.n	800c246 <__sflush_r+0x76>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	b903      	cbnz	r3, 800c248 <__sflush_r+0x78>
 800c246:	6560      	str	r0, [r4, #84]	@ 0x54
 800c248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c24a:	602f      	str	r7, [r5, #0]
 800c24c:	b1b9      	cbz	r1, 800c27e <__sflush_r+0xae>
 800c24e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c252:	4299      	cmp	r1, r3
 800c254:	d002      	beq.n	800c25c <__sflush_r+0x8c>
 800c256:	4628      	mov	r0, r5
 800c258:	f7ff fc8a 	bl	800bb70 <_free_r>
 800c25c:	2300      	movs	r3, #0
 800c25e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c260:	e00d      	b.n	800c27e <__sflush_r+0xae>
 800c262:	2301      	movs	r3, #1
 800c264:	4628      	mov	r0, r5
 800c266:	47b0      	blx	r6
 800c268:	4602      	mov	r2, r0
 800c26a:	1c50      	adds	r0, r2, #1
 800c26c:	d1c9      	bne.n	800c202 <__sflush_r+0x32>
 800c26e:	682b      	ldr	r3, [r5, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d0c6      	beq.n	800c202 <__sflush_r+0x32>
 800c274:	2b1d      	cmp	r3, #29
 800c276:	d001      	beq.n	800c27c <__sflush_r+0xac>
 800c278:	2b16      	cmp	r3, #22
 800c27a:	d11e      	bne.n	800c2ba <__sflush_r+0xea>
 800c27c:	602f      	str	r7, [r5, #0]
 800c27e:	2000      	movs	r0, #0
 800c280:	e022      	b.n	800c2c8 <__sflush_r+0xf8>
 800c282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c286:	b21b      	sxth	r3, r3
 800c288:	e01b      	b.n	800c2c2 <__sflush_r+0xf2>
 800c28a:	690f      	ldr	r7, [r1, #16]
 800c28c:	2f00      	cmp	r7, #0
 800c28e:	d0f6      	beq.n	800c27e <__sflush_r+0xae>
 800c290:	0793      	lsls	r3, r2, #30
 800c292:	680e      	ldr	r6, [r1, #0]
 800c294:	bf08      	it	eq
 800c296:	694b      	ldreq	r3, [r1, #20]
 800c298:	600f      	str	r7, [r1, #0]
 800c29a:	bf18      	it	ne
 800c29c:	2300      	movne	r3, #0
 800c29e:	eba6 0807 	sub.w	r8, r6, r7
 800c2a2:	608b      	str	r3, [r1, #8]
 800c2a4:	f1b8 0f00 	cmp.w	r8, #0
 800c2a8:	dde9      	ble.n	800c27e <__sflush_r+0xae>
 800c2aa:	6a21      	ldr	r1, [r4, #32]
 800c2ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c2ae:	4643      	mov	r3, r8
 800c2b0:	463a      	mov	r2, r7
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	47b0      	blx	r6
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	dc08      	bgt.n	800c2cc <__sflush_r+0xfc>
 800c2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2c2:	81a3      	strh	r3, [r4, #12]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2cc:	4407      	add	r7, r0
 800c2ce:	eba8 0800 	sub.w	r8, r8, r0
 800c2d2:	e7e7      	b.n	800c2a4 <__sflush_r+0xd4>
 800c2d4:	dfbffffe 	.word	0xdfbffffe

0800c2d8 <_fflush_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	690b      	ldr	r3, [r1, #16]
 800c2dc:	4605      	mov	r5, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	b913      	cbnz	r3, 800c2e8 <_fflush_r+0x10>
 800c2e2:	2500      	movs	r5, #0
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	b118      	cbz	r0, 800c2f2 <_fflush_r+0x1a>
 800c2ea:	6a03      	ldr	r3, [r0, #32]
 800c2ec:	b90b      	cbnz	r3, 800c2f2 <_fflush_r+0x1a>
 800c2ee:	f7ff f973 	bl	800b5d8 <__sinit>
 800c2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d0f3      	beq.n	800c2e2 <_fflush_r+0xa>
 800c2fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2fc:	07d0      	lsls	r0, r2, #31
 800c2fe:	d404      	bmi.n	800c30a <_fflush_r+0x32>
 800c300:	0599      	lsls	r1, r3, #22
 800c302:	d402      	bmi.n	800c30a <_fflush_r+0x32>
 800c304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c306:	f7ff fbfc 	bl	800bb02 <__retarget_lock_acquire_recursive>
 800c30a:	4628      	mov	r0, r5
 800c30c:	4621      	mov	r1, r4
 800c30e:	f7ff ff5f 	bl	800c1d0 <__sflush_r>
 800c312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c314:	07da      	lsls	r2, r3, #31
 800c316:	4605      	mov	r5, r0
 800c318:	d4e4      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c31a:	89a3      	ldrh	r3, [r4, #12]
 800c31c:	059b      	lsls	r3, r3, #22
 800c31e:	d4e1      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c322:	f7ff fbef 	bl	800bb04 <__retarget_lock_release_recursive>
 800c326:	e7dd      	b.n	800c2e4 <_fflush_r+0xc>

0800c328 <fiprintf>:
 800c328:	b40e      	push	{r1, r2, r3}
 800c32a:	b503      	push	{r0, r1, lr}
 800c32c:	4601      	mov	r1, r0
 800c32e:	ab03      	add	r3, sp, #12
 800c330:	4805      	ldr	r0, [pc, #20]	@ (800c348 <fiprintf+0x20>)
 800c332:	f853 2b04 	ldr.w	r2, [r3], #4
 800c336:	6800      	ldr	r0, [r0, #0]
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	f000 f903 	bl	800c544 <_vfiprintf_r>
 800c33e:	b002      	add	sp, #8
 800c340:	f85d eb04 	ldr.w	lr, [sp], #4
 800c344:	b003      	add	sp, #12
 800c346:	4770      	bx	lr
 800c348:	2000001c 	.word	0x2000001c

0800c34c <__swhatbuf_r>:
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	460c      	mov	r4, r1
 800c350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c354:	2900      	cmp	r1, #0
 800c356:	b096      	sub	sp, #88	@ 0x58
 800c358:	4615      	mov	r5, r2
 800c35a:	461e      	mov	r6, r3
 800c35c:	da0d      	bge.n	800c37a <__swhatbuf_r+0x2e>
 800c35e:	89a3      	ldrh	r3, [r4, #12]
 800c360:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c364:	f04f 0100 	mov.w	r1, #0
 800c368:	bf14      	ite	ne
 800c36a:	2340      	movne	r3, #64	@ 0x40
 800c36c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c370:	2000      	movs	r0, #0
 800c372:	6031      	str	r1, [r6, #0]
 800c374:	602b      	str	r3, [r5, #0]
 800c376:	b016      	add	sp, #88	@ 0x58
 800c378:	bd70      	pop	{r4, r5, r6, pc}
 800c37a:	466a      	mov	r2, sp
 800c37c:	f000 f862 	bl	800c444 <_fstat_r>
 800c380:	2800      	cmp	r0, #0
 800c382:	dbec      	blt.n	800c35e <__swhatbuf_r+0x12>
 800c384:	9901      	ldr	r1, [sp, #4]
 800c386:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c38a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c38e:	4259      	negs	r1, r3
 800c390:	4159      	adcs	r1, r3
 800c392:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c396:	e7eb      	b.n	800c370 <__swhatbuf_r+0x24>

0800c398 <__smakebuf_r>:
 800c398:	898b      	ldrh	r3, [r1, #12]
 800c39a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c39c:	079d      	lsls	r5, r3, #30
 800c39e:	4606      	mov	r6, r0
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	d507      	bpl.n	800c3b4 <__smakebuf_r+0x1c>
 800c3a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	6123      	str	r3, [r4, #16]
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	6163      	str	r3, [r4, #20]
 800c3b0:	b003      	add	sp, #12
 800c3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b4:	ab01      	add	r3, sp, #4
 800c3b6:	466a      	mov	r2, sp
 800c3b8:	f7ff ffc8 	bl	800c34c <__swhatbuf_r>
 800c3bc:	9f00      	ldr	r7, [sp, #0]
 800c3be:	4605      	mov	r5, r0
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f7fe ff2e 	bl	800b224 <_malloc_r>
 800c3c8:	b948      	cbnz	r0, 800c3de <__smakebuf_r+0x46>
 800c3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ce:	059a      	lsls	r2, r3, #22
 800c3d0:	d4ee      	bmi.n	800c3b0 <__smakebuf_r+0x18>
 800c3d2:	f023 0303 	bic.w	r3, r3, #3
 800c3d6:	f043 0302 	orr.w	r3, r3, #2
 800c3da:	81a3      	strh	r3, [r4, #12]
 800c3dc:	e7e2      	b.n	800c3a4 <__smakebuf_r+0xc>
 800c3de:	89a3      	ldrh	r3, [r4, #12]
 800c3e0:	6020      	str	r0, [r4, #0]
 800c3e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	9b01      	ldr	r3, [sp, #4]
 800c3ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3ee:	b15b      	cbz	r3, 800c408 <__smakebuf_r+0x70>
 800c3f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f000 f837 	bl	800c468 <_isatty_r>
 800c3fa:	b128      	cbz	r0, 800c408 <__smakebuf_r+0x70>
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	f023 0303 	bic.w	r3, r3, #3
 800c402:	f043 0301 	orr.w	r3, r3, #1
 800c406:	81a3      	strh	r3, [r4, #12]
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	431d      	orrs	r5, r3
 800c40c:	81a5      	strh	r5, [r4, #12]
 800c40e:	e7cf      	b.n	800c3b0 <__smakebuf_r+0x18>

0800c410 <memmove>:
 800c410:	4288      	cmp	r0, r1
 800c412:	b510      	push	{r4, lr}
 800c414:	eb01 0402 	add.w	r4, r1, r2
 800c418:	d902      	bls.n	800c420 <memmove+0x10>
 800c41a:	4284      	cmp	r4, r0
 800c41c:	4623      	mov	r3, r4
 800c41e:	d807      	bhi.n	800c430 <memmove+0x20>
 800c420:	1e43      	subs	r3, r0, #1
 800c422:	42a1      	cmp	r1, r4
 800c424:	d008      	beq.n	800c438 <memmove+0x28>
 800c426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c42a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c42e:	e7f8      	b.n	800c422 <memmove+0x12>
 800c430:	4402      	add	r2, r0
 800c432:	4601      	mov	r1, r0
 800c434:	428a      	cmp	r2, r1
 800c436:	d100      	bne.n	800c43a <memmove+0x2a>
 800c438:	bd10      	pop	{r4, pc}
 800c43a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c43e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c442:	e7f7      	b.n	800c434 <memmove+0x24>

0800c444 <_fstat_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4d07      	ldr	r5, [pc, #28]	@ (800c464 <_fstat_r+0x20>)
 800c448:	2300      	movs	r3, #0
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	4611      	mov	r1, r2
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	f7f5 f863 	bl	800151c <_fstat>
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	d102      	bne.n	800c460 <_fstat_r+0x1c>
 800c45a:	682b      	ldr	r3, [r5, #0]
 800c45c:	b103      	cbz	r3, 800c460 <_fstat_r+0x1c>
 800c45e:	6023      	str	r3, [r4, #0]
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	bf00      	nop
 800c464:	200054a8 	.word	0x200054a8

0800c468 <_isatty_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4d06      	ldr	r5, [pc, #24]	@ (800c484 <_isatty_r+0x1c>)
 800c46c:	2300      	movs	r3, #0
 800c46e:	4604      	mov	r4, r0
 800c470:	4608      	mov	r0, r1
 800c472:	602b      	str	r3, [r5, #0]
 800c474:	f7f5 f862 	bl	800153c <_isatty>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d102      	bne.n	800c482 <_isatty_r+0x1a>
 800c47c:	682b      	ldr	r3, [r5, #0]
 800c47e:	b103      	cbz	r3, 800c482 <_isatty_r+0x1a>
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	200054a8 	.word	0x200054a8

0800c488 <abort>:
 800c488:	b508      	push	{r3, lr}
 800c48a:	2006      	movs	r0, #6
 800c48c:	f000 f99a 	bl	800c7c4 <raise>
 800c490:	2001      	movs	r0, #1
 800c492:	f7f4 fff3 	bl	800147c <_exit>

0800c496 <_realloc_r>:
 800c496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c49a:	4680      	mov	r8, r0
 800c49c:	4615      	mov	r5, r2
 800c49e:	460c      	mov	r4, r1
 800c4a0:	b921      	cbnz	r1, 800c4ac <_realloc_r+0x16>
 800c4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	f7fe bebc 	b.w	800b224 <_malloc_r>
 800c4ac:	b92a      	cbnz	r2, 800c4ba <_realloc_r+0x24>
 800c4ae:	f7ff fb5f 	bl	800bb70 <_free_r>
 800c4b2:	2400      	movs	r4, #0
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ba:	f000 f99f 	bl	800c7fc <_malloc_usable_size_r>
 800c4be:	4285      	cmp	r5, r0
 800c4c0:	4606      	mov	r6, r0
 800c4c2:	d802      	bhi.n	800c4ca <_realloc_r+0x34>
 800c4c4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c4c8:	d8f4      	bhi.n	800c4b4 <_realloc_r+0x1e>
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	f7fe fea9 	bl	800b224 <_malloc_r>
 800c4d2:	4607      	mov	r7, r0
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d0ec      	beq.n	800c4b2 <_realloc_r+0x1c>
 800c4d8:	42b5      	cmp	r5, r6
 800c4da:	462a      	mov	r2, r5
 800c4dc:	4621      	mov	r1, r4
 800c4de:	bf28      	it	cs
 800c4e0:	4632      	movcs	r2, r6
 800c4e2:	f7ff fb18 	bl	800bb16 <memcpy>
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	f7ff fb41 	bl	800bb70 <_free_r>
 800c4ee:	463c      	mov	r4, r7
 800c4f0:	e7e0      	b.n	800c4b4 <_realloc_r+0x1e>

0800c4f2 <__sfputc_r>:
 800c4f2:	6893      	ldr	r3, [r2, #8]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	b410      	push	{r4}
 800c4fa:	6093      	str	r3, [r2, #8]
 800c4fc:	da08      	bge.n	800c510 <__sfputc_r+0x1e>
 800c4fe:	6994      	ldr	r4, [r2, #24]
 800c500:	42a3      	cmp	r3, r4
 800c502:	db01      	blt.n	800c508 <__sfputc_r+0x16>
 800c504:	290a      	cmp	r1, #10
 800c506:	d103      	bne.n	800c510 <__sfputc_r+0x1e>
 800c508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c50c:	f7ff b994 	b.w	800b838 <__swbuf_r>
 800c510:	6813      	ldr	r3, [r2, #0]
 800c512:	1c58      	adds	r0, r3, #1
 800c514:	6010      	str	r0, [r2, #0]
 800c516:	7019      	strb	r1, [r3, #0]
 800c518:	4608      	mov	r0, r1
 800c51a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <__sfputs_r>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	4606      	mov	r6, r0
 800c524:	460f      	mov	r7, r1
 800c526:	4614      	mov	r4, r2
 800c528:	18d5      	adds	r5, r2, r3
 800c52a:	42ac      	cmp	r4, r5
 800c52c:	d101      	bne.n	800c532 <__sfputs_r+0x12>
 800c52e:	2000      	movs	r0, #0
 800c530:	e007      	b.n	800c542 <__sfputs_r+0x22>
 800c532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c536:	463a      	mov	r2, r7
 800c538:	4630      	mov	r0, r6
 800c53a:	f7ff ffda 	bl	800c4f2 <__sfputc_r>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d1f3      	bne.n	800c52a <__sfputs_r+0xa>
 800c542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c544 <_vfiprintf_r>:
 800c544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c548:	460d      	mov	r5, r1
 800c54a:	b09d      	sub	sp, #116	@ 0x74
 800c54c:	4614      	mov	r4, r2
 800c54e:	4698      	mov	r8, r3
 800c550:	4606      	mov	r6, r0
 800c552:	b118      	cbz	r0, 800c55c <_vfiprintf_r+0x18>
 800c554:	6a03      	ldr	r3, [r0, #32]
 800c556:	b90b      	cbnz	r3, 800c55c <_vfiprintf_r+0x18>
 800c558:	f7ff f83e 	bl	800b5d8 <__sinit>
 800c55c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c55e:	07d9      	lsls	r1, r3, #31
 800c560:	d405      	bmi.n	800c56e <_vfiprintf_r+0x2a>
 800c562:	89ab      	ldrh	r3, [r5, #12]
 800c564:	059a      	lsls	r2, r3, #22
 800c566:	d402      	bmi.n	800c56e <_vfiprintf_r+0x2a>
 800c568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c56a:	f7ff faca 	bl	800bb02 <__retarget_lock_acquire_recursive>
 800c56e:	89ab      	ldrh	r3, [r5, #12]
 800c570:	071b      	lsls	r3, r3, #28
 800c572:	d501      	bpl.n	800c578 <_vfiprintf_r+0x34>
 800c574:	692b      	ldr	r3, [r5, #16]
 800c576:	b99b      	cbnz	r3, 800c5a0 <_vfiprintf_r+0x5c>
 800c578:	4629      	mov	r1, r5
 800c57a:	4630      	mov	r0, r6
 800c57c:	f7ff f99a 	bl	800b8b4 <__swsetup_r>
 800c580:	b170      	cbz	r0, 800c5a0 <_vfiprintf_r+0x5c>
 800c582:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c584:	07dc      	lsls	r4, r3, #31
 800c586:	d504      	bpl.n	800c592 <_vfiprintf_r+0x4e>
 800c588:	f04f 30ff 	mov.w	r0, #4294967295
 800c58c:	b01d      	add	sp, #116	@ 0x74
 800c58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c592:	89ab      	ldrh	r3, [r5, #12]
 800c594:	0598      	lsls	r0, r3, #22
 800c596:	d4f7      	bmi.n	800c588 <_vfiprintf_r+0x44>
 800c598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c59a:	f7ff fab3 	bl	800bb04 <__retarget_lock_release_recursive>
 800c59e:	e7f3      	b.n	800c588 <_vfiprintf_r+0x44>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5a4:	2320      	movs	r3, #32
 800c5a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ae:	2330      	movs	r3, #48	@ 0x30
 800c5b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c760 <_vfiprintf_r+0x21c>
 800c5b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5b8:	f04f 0901 	mov.w	r9, #1
 800c5bc:	4623      	mov	r3, r4
 800c5be:	469a      	mov	sl, r3
 800c5c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5c4:	b10a      	cbz	r2, 800c5ca <_vfiprintf_r+0x86>
 800c5c6:	2a25      	cmp	r2, #37	@ 0x25
 800c5c8:	d1f9      	bne.n	800c5be <_vfiprintf_r+0x7a>
 800c5ca:	ebba 0b04 	subs.w	fp, sl, r4
 800c5ce:	d00b      	beq.n	800c5e8 <_vfiprintf_r+0xa4>
 800c5d0:	465b      	mov	r3, fp
 800c5d2:	4622      	mov	r2, r4
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f7ff ffa2 	bl	800c520 <__sfputs_r>
 800c5dc:	3001      	adds	r0, #1
 800c5de:	f000 80a7 	beq.w	800c730 <_vfiprintf_r+0x1ec>
 800c5e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5e4:	445a      	add	r2, fp
 800c5e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 809f 	beq.w	800c730 <_vfiprintf_r+0x1ec>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5fc:	f10a 0a01 	add.w	sl, sl, #1
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	9307      	str	r3, [sp, #28]
 800c604:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c608:	931a      	str	r3, [sp, #104]	@ 0x68
 800c60a:	4654      	mov	r4, sl
 800c60c:	2205      	movs	r2, #5
 800c60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c612:	4853      	ldr	r0, [pc, #332]	@ (800c760 <_vfiprintf_r+0x21c>)
 800c614:	f7f3 fe2c 	bl	8000270 <memchr>
 800c618:	9a04      	ldr	r2, [sp, #16]
 800c61a:	b9d8      	cbnz	r0, 800c654 <_vfiprintf_r+0x110>
 800c61c:	06d1      	lsls	r1, r2, #27
 800c61e:	bf44      	itt	mi
 800c620:	2320      	movmi	r3, #32
 800c622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c626:	0713      	lsls	r3, r2, #28
 800c628:	bf44      	itt	mi
 800c62a:	232b      	movmi	r3, #43	@ 0x2b
 800c62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c630:	f89a 3000 	ldrb.w	r3, [sl]
 800c634:	2b2a      	cmp	r3, #42	@ 0x2a
 800c636:	d015      	beq.n	800c664 <_vfiprintf_r+0x120>
 800c638:	9a07      	ldr	r2, [sp, #28]
 800c63a:	4654      	mov	r4, sl
 800c63c:	2000      	movs	r0, #0
 800c63e:	f04f 0c0a 	mov.w	ip, #10
 800c642:	4621      	mov	r1, r4
 800c644:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c648:	3b30      	subs	r3, #48	@ 0x30
 800c64a:	2b09      	cmp	r3, #9
 800c64c:	d94b      	bls.n	800c6e6 <_vfiprintf_r+0x1a2>
 800c64e:	b1b0      	cbz	r0, 800c67e <_vfiprintf_r+0x13a>
 800c650:	9207      	str	r2, [sp, #28]
 800c652:	e014      	b.n	800c67e <_vfiprintf_r+0x13a>
 800c654:	eba0 0308 	sub.w	r3, r0, r8
 800c658:	fa09 f303 	lsl.w	r3, r9, r3
 800c65c:	4313      	orrs	r3, r2
 800c65e:	9304      	str	r3, [sp, #16]
 800c660:	46a2      	mov	sl, r4
 800c662:	e7d2      	b.n	800c60a <_vfiprintf_r+0xc6>
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	1d19      	adds	r1, r3, #4
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	9103      	str	r1, [sp, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bfbb      	ittet	lt
 800c670:	425b      	neglt	r3, r3
 800c672:	f042 0202 	orrlt.w	r2, r2, #2
 800c676:	9307      	strge	r3, [sp, #28]
 800c678:	9307      	strlt	r3, [sp, #28]
 800c67a:	bfb8      	it	lt
 800c67c:	9204      	strlt	r2, [sp, #16]
 800c67e:	7823      	ldrb	r3, [r4, #0]
 800c680:	2b2e      	cmp	r3, #46	@ 0x2e
 800c682:	d10a      	bne.n	800c69a <_vfiprintf_r+0x156>
 800c684:	7863      	ldrb	r3, [r4, #1]
 800c686:	2b2a      	cmp	r3, #42	@ 0x2a
 800c688:	d132      	bne.n	800c6f0 <_vfiprintf_r+0x1ac>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	1d1a      	adds	r2, r3, #4
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	9203      	str	r2, [sp, #12]
 800c692:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c696:	3402      	adds	r4, #2
 800c698:	9305      	str	r3, [sp, #20]
 800c69a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c770 <_vfiprintf_r+0x22c>
 800c69e:	7821      	ldrb	r1, [r4, #0]
 800c6a0:	2203      	movs	r2, #3
 800c6a2:	4650      	mov	r0, sl
 800c6a4:	f7f3 fde4 	bl	8000270 <memchr>
 800c6a8:	b138      	cbz	r0, 800c6ba <_vfiprintf_r+0x176>
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	eba0 000a 	sub.w	r0, r0, sl
 800c6b0:	2240      	movs	r2, #64	@ 0x40
 800c6b2:	4082      	lsls	r2, r0
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	3401      	adds	r4, #1
 800c6b8:	9304      	str	r3, [sp, #16]
 800c6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6be:	4829      	ldr	r0, [pc, #164]	@ (800c764 <_vfiprintf_r+0x220>)
 800c6c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6c4:	2206      	movs	r2, #6
 800c6c6:	f7f3 fdd3 	bl	8000270 <memchr>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d03f      	beq.n	800c74e <_vfiprintf_r+0x20a>
 800c6ce:	4b26      	ldr	r3, [pc, #152]	@ (800c768 <_vfiprintf_r+0x224>)
 800c6d0:	bb1b      	cbnz	r3, 800c71a <_vfiprintf_r+0x1d6>
 800c6d2:	9b03      	ldr	r3, [sp, #12]
 800c6d4:	3307      	adds	r3, #7
 800c6d6:	f023 0307 	bic.w	r3, r3, #7
 800c6da:	3308      	adds	r3, #8
 800c6dc:	9303      	str	r3, [sp, #12]
 800c6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e0:	443b      	add	r3, r7
 800c6e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6e4:	e76a      	b.n	800c5bc <_vfiprintf_r+0x78>
 800c6e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	e7a8      	b.n	800c642 <_vfiprintf_r+0xfe>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	3401      	adds	r4, #1
 800c6f4:	9305      	str	r3, [sp, #20]
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	f04f 0c0a 	mov.w	ip, #10
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c702:	3a30      	subs	r2, #48	@ 0x30
 800c704:	2a09      	cmp	r2, #9
 800c706:	d903      	bls.n	800c710 <_vfiprintf_r+0x1cc>
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d0c6      	beq.n	800c69a <_vfiprintf_r+0x156>
 800c70c:	9105      	str	r1, [sp, #20]
 800c70e:	e7c4      	b.n	800c69a <_vfiprintf_r+0x156>
 800c710:	fb0c 2101 	mla	r1, ip, r1, r2
 800c714:	4604      	mov	r4, r0
 800c716:	2301      	movs	r3, #1
 800c718:	e7f0      	b.n	800c6fc <_vfiprintf_r+0x1b8>
 800c71a:	ab03      	add	r3, sp, #12
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	462a      	mov	r2, r5
 800c720:	4b12      	ldr	r3, [pc, #72]	@ (800c76c <_vfiprintf_r+0x228>)
 800c722:	a904      	add	r1, sp, #16
 800c724:	4630      	mov	r0, r6
 800c726:	f3af 8000 	nop.w
 800c72a:	4607      	mov	r7, r0
 800c72c:	1c78      	adds	r0, r7, #1
 800c72e:	d1d6      	bne.n	800c6de <_vfiprintf_r+0x19a>
 800c730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c732:	07d9      	lsls	r1, r3, #31
 800c734:	d405      	bmi.n	800c742 <_vfiprintf_r+0x1fe>
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	059a      	lsls	r2, r3, #22
 800c73a:	d402      	bmi.n	800c742 <_vfiprintf_r+0x1fe>
 800c73c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c73e:	f7ff f9e1 	bl	800bb04 <__retarget_lock_release_recursive>
 800c742:	89ab      	ldrh	r3, [r5, #12]
 800c744:	065b      	lsls	r3, r3, #25
 800c746:	f53f af1f 	bmi.w	800c588 <_vfiprintf_r+0x44>
 800c74a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c74c:	e71e      	b.n	800c58c <_vfiprintf_r+0x48>
 800c74e:	ab03      	add	r3, sp, #12
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	462a      	mov	r2, r5
 800c754:	4b05      	ldr	r3, [pc, #20]	@ (800c76c <_vfiprintf_r+0x228>)
 800c756:	a904      	add	r1, sp, #16
 800c758:	4630      	mov	r0, r6
 800c75a:	f7ff fc19 	bl	800bf90 <_printf_i>
 800c75e:	e7e4      	b.n	800c72a <_vfiprintf_r+0x1e6>
 800c760:	0800cc8c 	.word	0x0800cc8c
 800c764:	0800cc96 	.word	0x0800cc96
 800c768:	00000000 	.word	0x00000000
 800c76c:	0800c521 	.word	0x0800c521
 800c770:	0800cc92 	.word	0x0800cc92

0800c774 <_raise_r>:
 800c774:	291f      	cmp	r1, #31
 800c776:	b538      	push	{r3, r4, r5, lr}
 800c778:	4605      	mov	r5, r0
 800c77a:	460c      	mov	r4, r1
 800c77c:	d904      	bls.n	800c788 <_raise_r+0x14>
 800c77e:	2316      	movs	r3, #22
 800c780:	6003      	str	r3, [r0, #0]
 800c782:	f04f 30ff 	mov.w	r0, #4294967295
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c78a:	b112      	cbz	r2, 800c792 <_raise_r+0x1e>
 800c78c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c790:	b94b      	cbnz	r3, 800c7a6 <_raise_r+0x32>
 800c792:	4628      	mov	r0, r5
 800c794:	f000 f830 	bl	800c7f8 <_getpid_r>
 800c798:	4622      	mov	r2, r4
 800c79a:	4601      	mov	r1, r0
 800c79c:	4628      	mov	r0, r5
 800c79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7a2:	f000 b817 	b.w	800c7d4 <_kill_r>
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d00a      	beq.n	800c7c0 <_raise_r+0x4c>
 800c7aa:	1c59      	adds	r1, r3, #1
 800c7ac:	d103      	bne.n	800c7b6 <_raise_r+0x42>
 800c7ae:	2316      	movs	r3, #22
 800c7b0:	6003      	str	r3, [r0, #0]
 800c7b2:	2001      	movs	r0, #1
 800c7b4:	e7e7      	b.n	800c786 <_raise_r+0x12>
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c7bc:	4620      	mov	r0, r4
 800c7be:	4798      	blx	r3
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	e7e0      	b.n	800c786 <_raise_r+0x12>

0800c7c4 <raise>:
 800c7c4:	4b02      	ldr	r3, [pc, #8]	@ (800c7d0 <raise+0xc>)
 800c7c6:	4601      	mov	r1, r0
 800c7c8:	6818      	ldr	r0, [r3, #0]
 800c7ca:	f7ff bfd3 	b.w	800c774 <_raise_r>
 800c7ce:	bf00      	nop
 800c7d0:	2000001c 	.word	0x2000001c

0800c7d4 <_kill_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4d07      	ldr	r5, [pc, #28]	@ (800c7f4 <_kill_r+0x20>)
 800c7d8:	2300      	movs	r3, #0
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	4611      	mov	r1, r2
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	f7f4 fe3b 	bl	800145c <_kill>
 800c7e6:	1c43      	adds	r3, r0, #1
 800c7e8:	d102      	bne.n	800c7f0 <_kill_r+0x1c>
 800c7ea:	682b      	ldr	r3, [r5, #0]
 800c7ec:	b103      	cbz	r3, 800c7f0 <_kill_r+0x1c>
 800c7ee:	6023      	str	r3, [r4, #0]
 800c7f0:	bd38      	pop	{r3, r4, r5, pc}
 800c7f2:	bf00      	nop
 800c7f4:	200054a8 	.word	0x200054a8

0800c7f8 <_getpid_r>:
 800c7f8:	f7f4 be28 	b.w	800144c <_getpid>

0800c7fc <_malloc_usable_size_r>:
 800c7fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c800:	1f18      	subs	r0, r3, #4
 800c802:	2b00      	cmp	r3, #0
 800c804:	bfbc      	itt	lt
 800c806:	580b      	ldrlt	r3, [r1, r0]
 800c808:	18c0      	addlt	r0, r0, r3
 800c80a:	4770      	bx	lr

0800c80c <_init>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr

0800c818 <_fini>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	bf00      	nop
 800c81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81e:	bc08      	pop	{r3}
 800c820:	469e      	mov	lr, r3
 800c822:	4770      	bx	lr
