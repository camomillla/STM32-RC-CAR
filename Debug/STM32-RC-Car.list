
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7f8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800a9f8  0800a9f8  0000b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acfc  0800acfc  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800acfc  0800acfc  0000bcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad04  0800ad04  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad04  0800ad04  0000bd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad08  0800ad08  0000bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800ad0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000547c  20000060  0800ad6c  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054dc  0800ad6c  0000c4dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204ac  00000000  00000000  0000c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b5  00000000  00000000  0002c53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  00030cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014b9  00000000  00000000  00032798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b8e8  00000000  00000000  00033c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021739  00000000  00000000  0005f539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108edb  00000000  00000000  00080c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007184  00000000  00000000  00189b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00190d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a9e0 	.word	0x0800a9e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800a9e0 	.word	0x0800a9e0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <MX_DMA_Init+0x48>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a0f      	ldr	r2, [pc, #60]	@ (800059c <MX_DMA_Init+0x48>)
 8000560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <MX_DMA_Init+0x48>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2010      	movs	r0, #16
 8000578:	f002 fa17 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800057c:	2010      	movs	r0, #16
 800057e:	f002 fa30 	bl	80029e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	2011      	movs	r0, #17
 8000588:	f002 fa0f 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800058c:	2011      	movs	r0, #17
 800058e:	f002 fa28 	bl	80029e2 <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	//defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <MX_FREERTOS_Init+0x18>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4804      	ldr	r0, [pc, #16]	@ (80005bc <MX_FREERTOS_Init+0x1c>)
 80005aa:	f007 fbad 	bl	8007d08 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a03      	ldr	r2, [pc, #12]	@ (80005c0 <MX_FREERTOS_Init+0x20>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	0800abb4 	.word	0x0800abb4
 80005bc:	080013d1 	.word	0x080013d1
 80005c0:	2000007c 	.word	0x2000007c

080005c4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	@ 0x30
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b77      	ldr	r3, [pc, #476]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a76      	ldr	r2, [pc, #472]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b74      	ldr	r3, [pc, #464]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	61bb      	str	r3, [r7, #24]
 80005f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	4b71      	ldr	r3, [pc, #452]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a70      	ldr	r2, [pc, #448]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b6e      	ldr	r3, [pc, #440]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b6b      	ldr	r3, [pc, #428]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a6a      	ldr	r2, [pc, #424]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b68      	ldr	r3, [pc, #416]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b65      	ldr	r3, [pc, #404]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a64      	ldr	r2, [pc, #400]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b62      	ldr	r3, [pc, #392]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063a:	4b5f      	ldr	r3, [pc, #380]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a5e      	ldr	r2, [pc, #376]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b5c      	ldr	r3, [pc, #368]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b59      	ldr	r3, [pc, #356]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a58      	ldr	r2, [pc, #352]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b56      	ldr	r3, [pc, #344]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b53      	ldr	r3, [pc, #332]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a52      	ldr	r2, [pc, #328]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b50      	ldr	r3, [pc, #320]	@ (80007b8 <MX_GPIO_Init+0x1f4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000688:	484c      	ldr	r0, [pc, #304]	@ (80007bc <MX_GPIO_Init+0x1f8>)
 800068a:	f002 feed 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2141      	movs	r1, #65	@ 0x41
 8000692:	484b      	ldr	r0, [pc, #300]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 8000694:	f002 fee8 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4849      	ldr	r0, [pc, #292]	@ (80007c4 <MX_GPIO_Init+0x200>)
 800069e:	f002 fee3 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4843      	ldr	r0, [pc, #268]	@ (80007c8 <MX_GPIO_Init+0x204>)
 80006ba:	f002 fd29 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006be:	2332      	movs	r3, #50	@ 0x32
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ce:	230b      	movs	r3, #11
 80006d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	483b      	ldr	r0, [pc, #236]	@ (80007c8 <MX_GPIO_Init+0x204>)
 80006da:	f002 fd19 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006de:	2386      	movs	r3, #134	@ 0x86
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ee:	230b      	movs	r3, #11
 80006f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4834      	ldr	r0, [pc, #208]	@ (80007cc <MX_GPIO_Init+0x208>)
 80006fa:	f002 fd09 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006fe:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4829      	ldr	r0, [pc, #164]	@ (80007bc <MX_GPIO_Init+0x1f8>)
 8000718:	f002 fcfa 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 800071c:	2341      	movs	r3, #65	@ 0x41
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4823      	ldr	r0, [pc, #140]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 8000734:	f002 fcec 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074a:	230b      	movs	r3, #11
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4819      	ldr	r0, [pc, #100]	@ (80007bc <MX_GPIO_Init+0x1f8>)
 8000756:	f002 fcdb 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4814      	ldr	r0, [pc, #80]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 800076e:	f002 fccf 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000772:	2310      	movs	r3, #16
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	480e      	ldr	r0, [pc, #56]	@ (80007c4 <MX_GPIO_Init+0x200>)
 800078a:	f002 fcc1 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800078e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_GPIO_Init+0x1fc>)
 80007ac:	f002 fcb0 	bl	8003110 <HAL_GPIO_Init>

}
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	@ 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020400 	.word	0x40020400
 80007c0:	40021800 	.word	0x40021800
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40020000 	.word	0x40020000

080007d0 <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6178      	str	r0, [r7, #20]
 80007d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80007dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80007e0:	ed87 1a02 	vstr	s2, [r7, #8]
 80007e4:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	615a      	str	r2, [r3, #20]
}
 800080a:	bf00      	nop
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <pid_reset>:

void pid_reset(PID *pid_data)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 8000836:	b480      	push	{r7}
 8000838:	b089      	sub	sp, #36	@ 0x24
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	441a      	add	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	ed93 7a02 	vldr	s14, [r3, #8]
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	ee07 3a90 	vmov	s15, r3
 8000862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800086a:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	ed93 7a03 	vldr	s14, [r3, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000884:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	ed93 7a04 	vldr	s14, [r3, #16]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	ee07 3a90 	vmov	s15, r3
 800089a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800089e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a2:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	ee07 3a90 	vmov	s15, r3
 80008ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80008b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008be:	db08      	blt.n	80008d2 <pid_calculate+0x9c>
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	edc7 7a07 	vstr	s15, [r7, #28]
 80008d0:	e016      	b.n	8000900 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	425b      	negs	r3, r3
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80008e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ec:	d808      	bhi.n	8000900 <pid_calculate+0xca>
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	425b      	negs	r3, r3
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fc:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8000906:	ed97 7a05 	vldr	s14, [r7, #20]
 800090a:	edd7 7a07 	vldr	s15, [r7, #28]
 800090e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000912:	edd7 7a04 	vldr	s15, [r7, #16]
 8000916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800091e:	ee17 3a90 	vmov	r3, s15
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	@ 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <Init_Motor>:

MOTOR motorA;
MOTOR motorB;

void Init_Motor(MOTOR *m, TIM_HandleTypeDef *enc, uint32_t axis, TIM_HandleTypeDef* front, TIM_HandleTypeDef* back)
{
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	603b      	str	r3, [r7, #0]
	m->encoder = enc;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	601a      	str	r2, [r3, #0]
	m->axisTimer = axis;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	60da      	str	r2, [r3, #12]
	m->motorBack = back;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	605a      	str	r2, [r3, #4]
	m->motorFront = front;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	609a      	str	r2, [r3, #8]

	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800095a:	825a      	strh	r2, [r3, #18]

	m->pulse_count = 0;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
	m->measured_speed = 0;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
	m->set_speed = 0;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
    m->actual_PWM = 0;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f849 	bl	8000a20 <motor_update_count>

	m->measured_speed = abs((m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000996:	fb02 f303 	mul.w	r3, r2, r3
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	8a52      	ldrh	r2, [r2, #18]
 800099e:	fb93 f3f2 	sdiv	r3, r3, r2
 80009a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	619a      	str	r2, [r3, #24]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69d9      	ldr	r1, [r3, #28]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	461a      	mov	r2, r3
 80009be:	f7ff ff3a 	bl	8000836 <pid_calculate>
 80009c2:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a1a      	ldr	r2, [r3, #32]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	441a      	add	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	621a      	str	r2, [r3, #32]

	if(m->actual_PWM >= 0)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a1b      	ldr	r3, [r3, #32]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db05      	blt.n	80009e4 <motor_calculate_speed+0x64>
	{
		SetMotorSpeed(m, m->actual_PWM);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a1b      	ldr	r3, [r3, #32]
 80009dc:	4619      	mov	r1, r3
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f000 f8c9 	bl	8000b76 <SetMotorSpeed>

	}

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <ResetMotor>:

void ResetMotor(MOTOR *m) {
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	m->set_speed = 0;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <motor_set_speed>:
enum DIRECTION {
	DEFAULT, FRONT, BACK
};

void motor_set_speed(MOTOR *m, short direction, int set_speed)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	460b      	mov	r3, r1
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	817b      	strh	r3, [r7, #10]
	if(set_speed != m->set_speed)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d004      	beq.n	8000a70 <motor_set_speed+0x22>
		pid_reset(&(m->pid_controller));
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3324      	adds	r3, #36	@ 0x24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fed3 	bl	8000816 <pid_reset>

	m->set_speed = set_speed;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	61da      	str	r2, [r3, #28]
	m->direction = direction;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	897a      	ldrh	r2, [r7, #10]
 8000a7a:	821a      	strh	r2, [r3, #16]
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <MotorABS>:

void MotorABS(MOTOR* m) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	ResetMotor(m);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ffad 	bl	80009ec <ResetMotor>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d105      	bne.n	8000aa6 <MotorABS+0x22>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa4:	e02c      	b.n	8000b00 <MotorABS+0x7c>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d105      	bne.n	8000aba <MotorABS+0x36>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ab8:	e022      	b.n	8000b00 <MotorABS+0x7c>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d105      	bne.n	8000ace <MotorABS+0x4a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000acc:	e018      	b.n	8000b00 <MotorABS+0x7c>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	2b0c      	cmp	r3, #12
 8000ad4:	d105      	bne.n	8000ae2 <MotorABS+0x5e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	2300      	movs	r3, #0
 8000ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae0:	e00e      	b.n	8000b00 <MotorABS+0x7c>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	2b10      	cmp	r3, #16
 8000ae8:	d105      	bne.n	8000af6 <MotorABS+0x72>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2300      	movs	r3, #0
 8000af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af4:	e004      	b.n	8000b00 <MotorABS+0x7c>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d105      	bne.n	8000b14 <MotorABS+0x90>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b12:	e02c      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d105      	bne.n	8000b28 <MotorABS+0xa4>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b26:	e022      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	d105      	bne.n	8000b3c <MotorABS+0xb8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	2300      	movs	r3, #0
 8000b38:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000b3a:	e018      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b0c      	cmp	r3, #12
 8000b42:	d105      	bne.n	8000b50 <MotorABS+0xcc>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b4e:	e00e      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	2b10      	cmp	r3, #16
 8000b56:	d105      	bne.n	8000b64 <MotorABS+0xe0>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000b62:	e004      	b.n	8000b6e <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <SetMotorSpeed>:

void SetMotorSpeed(MOTOR* m, uint16_t speed)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	807b      	strh	r3, [r7, #2]
	switch (m->direction) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	f000 810b 	beq.w	8000da4 <SetMotorSpeed+0x22e>
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	f300 8183 	bgt.w	8000e9a <SetMotorSpeed+0x324>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <SetMotorSpeed+0x2a>
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	f000 8088 	beq.w	8000cae <SetMotorSpeed+0x138>
		break;
	}


	//__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed);
}
 8000b9e:	e17c      	b.n	8000e9a <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000ba0:	887a      	ldrh	r2, [r7, #2]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d304      	bcc.n	8000bb8 <SetMotorSpeed+0x42>
			speed = m->motorFront->Instance->ARR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb6:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d105      	bne.n	8000bcc <SetMotorSpeed+0x56>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bca:	e02c      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d105      	bne.n	8000be0 <SetMotorSpeed+0x6a>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bde:	e022      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b08      	cmp	r3, #8
 8000be6:	d105      	bne.n	8000bf4 <SetMotorSpeed+0x7e>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000bf2:	e018      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	2b0c      	cmp	r3, #12
 8000bfa:	d105      	bne.n	8000c08 <SetMotorSpeed+0x92>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	e00e      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	2b10      	cmp	r3, #16
 8000c0e:	d105      	bne.n	8000c1c <SetMotorSpeed+0xa6>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1a:	e004      	b.n	8000c26 <SetMotorSpeed+0xb0>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	65d3      	str	r3, [r2, #92]	@ 0x5c
		if(speed >= m->motorBack->Instance->ARR)
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d304      	bcc.n	8000c3e <SetMotorSpeed+0xc8>
			speed = m->motorBack->Instance->ARR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d105      	bne.n	8000c52 <SetMotorSpeed+0xdc>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	887a      	ldrh	r2, [r7, #2]
 8000c4e:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000c50:	e123      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d105      	bne.n	8000c66 <SetMotorSpeed+0xf0>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000c64:	e119      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d105      	bne.n	8000c7a <SetMotorSpeed+0x104>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000c78:	e10f      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	2b0c      	cmp	r3, #12
 8000c80:	d105      	bne.n	8000c8e <SetMotorSpeed+0x118>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000c8c:	e105      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b10      	cmp	r3, #16
 8000c94:	d105      	bne.n	8000ca2 <SetMotorSpeed+0x12c>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000ca0:	e0fb      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000cac:	e0f5      	b.n	8000e9a <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d304      	bcc.n	8000cc6 <SetMotorSpeed+0x150>
			speed = m->motorFront->Instance->ARR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d105      	bne.n	8000cda <SetMotorSpeed+0x164>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cd8:	e02c      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d105      	bne.n	8000cee <SetMotorSpeed+0x178>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cec:	e022      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d105      	bne.n	8000d02 <SetMotorSpeed+0x18c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d00:	e018      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b0c      	cmp	r3, #12
 8000d08:	d105      	bne.n	8000d16 <SetMotorSpeed+0x1a0>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d14:	e00e      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b10      	cmp	r3, #16
 8000d1c:	d105      	bne.n	8000d2a <SetMotorSpeed+0x1b4>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d28:	e004      	b.n	8000d34 <SetMotorSpeed+0x1be>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d105      	bne.n	8000d48 <SetMotorSpeed+0x1d2>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2200      	movs	r2, #0
 8000d44:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000d46:	e0a8      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d105      	bne.n	8000d5c <SetMotorSpeed+0x1e6>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000d5a:	e09e      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d105      	bne.n	8000d70 <SetMotorSpeed+0x1fa>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000d6e:	e094      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	2b0c      	cmp	r3, #12
 8000d76:	d105      	bne.n	8000d84 <SetMotorSpeed+0x20e>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000d82:	e08a      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	2b10      	cmp	r3, #16
 8000d8a:	d105      	bne.n	8000d98 <SetMotorSpeed+0x222>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000d96:	e080      	b.n	8000e9a <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000da2:	e07a      	b.n	8000e9a <SetMotorSpeed+0x324>
		if(speed >= m->motorBack->Instance->ARR)
 8000da4:	887a      	ldrh	r2, [r7, #2]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d304      	bcc.n	8000dbc <SetMotorSpeed+0x246>
			speed = m->motorBack->Instance->ARR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dba:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <SetMotorSpeed+0x25a>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dce:	e02c      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d105      	bne.n	8000de4 <SetMotorSpeed+0x26e>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000de2:	e022      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d105      	bne.n	8000df8 <SetMotorSpeed+0x282>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000df6:	e018      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2b0c      	cmp	r3, #12
 8000dfe:	d105      	bne.n	8000e0c <SetMotorSpeed+0x296>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	e00e      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b10      	cmp	r3, #16
 8000e12:	d105      	bne.n	8000e20 <SetMotorSpeed+0x2aa>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1e:	e004      	b.n	8000e2a <SetMotorSpeed+0x2b4>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d105      	bne.n	8000e3e <SetMotorSpeed+0x2c8>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000e3c:	e02c      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d105      	bne.n	8000e52 <SetMotorSpeed+0x2dc>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000e50:	e022      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d105      	bne.n	8000e66 <SetMotorSpeed+0x2f0>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000e64:	e018      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b0c      	cmp	r3, #12
 8000e6c:	d105      	bne.n	8000e7a <SetMotorSpeed+0x304>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2300      	movs	r3, #0
 8000e76:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000e78:	e00e      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2b10      	cmp	r3, #16
 8000e80:	d105      	bne.n	8000e8e <SetMotorSpeed+0x318>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000e8c:	e004      	b.n	8000e98 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2300      	movs	r3, #0
 8000e96:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000e98:	bf00      	nop
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <Init_MotorSystem>:

void Init_MotorSystem()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
	Init_Motor(&motorA, &htim8, TIM_CHANNEL_1, &htim2, &htim5);
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <Init_MotorSystem+0x60>)
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <Init_MotorSystem+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4916      	ldr	r1, [pc, #88]	@ (8000f10 <Init_MotorSystem+0x68>)
 8000eb8:	4816      	ldr	r0, [pc, #88]	@ (8000f14 <Init_MotorSystem+0x6c>)
 8000eba:	f7ff fd38 	bl	800092e <Init_Motor>
	Init_Motor(&motorB, &htim3, TIM_CHANNEL_4, &htim2, &htim5);
 8000ebe:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <Init_MotorSystem+0x60>)
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <Init_MotorSystem+0x64>)
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	4914      	ldr	r1, [pc, #80]	@ (8000f18 <Init_MotorSystem+0x70>)
 8000ec8:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <Init_MotorSystem+0x74>)
 8000eca:	f7ff fd30 	bl	800092e <Init_Motor>
	//Init_Motor(&motorB, &htim4, TIM_CHANNEL_1, &htim2, &htim5);

	pid_init(&(motorA.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8000f20 <Init_MotorSystem+0x78>
 8000ed4:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000f20 <Init_MotorSystem+0x78>
 8000ed8:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000edc:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <Init_MotorSystem+0x7c>)
 8000ede:	f7ff fc77 	bl	80007d0 <pid_init>
	pid_init(&(motorB.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000f20 <Init_MotorSystem+0x78>
 8000ee8:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000f20 <Init_MotorSystem+0x78>
 8000eec:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000ef0:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <Init_MotorSystem+0x80>)
 8000ef2:	f7ff fc6d 	bl	80007d0 <pid_init>

	MotorABS(&motorA);
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <Init_MotorSystem+0x6c>)
 8000ef8:	f7ff fdc4 	bl	8000a84 <MotorABS>
	MotorABS(&motorB);
 8000efc:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <Init_MotorSystem+0x74>)
 8000efe:	f7ff fdc1 	bl	8000a84 <MotorABS>
	//SetMotorSpeed(&motorB, 0);
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000278 	.word	0x20000278
 8000f0c:	20000194 	.word	0x20000194
 8000f10:	20000310 	.word	0x20000310
 8000f14:	200000c8 	.word	0x200000c8
 8000f18:	200001e0 	.word	0x200001e0
 8000f1c:	20000104 	.word	0x20000104
 8000f20:	3d4ccccd 	.word	0x3d4ccccd
 8000f24:	200000ec 	.word	0x200000ec
 8000f28:	20000128 	.word	0x20000128

08000f2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d105      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		motor_calculate_speed(&motorA);
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f40:	f7ff fd1e 	bl	8000980 <motor_calculate_speed>
		motor_calculate_speed(&motorB);
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f46:	f7ff fd1b 	bl	8000980 <motor_calculate_speed>
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40001000 	.word	0x40001000
 8000f58:	200000c8 	.word	0x200000c8
 8000f5c:	20000104 	.word	0x20000104

08000f60 <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4812      	ldr	r0, [pc, #72]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000f72:	f003 ff93 	bl	8004e9c <HAL_TIM_PWM_Stop>
        return;
 8000f76:	e01e      	b.n	8000fb6 <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <Set_PWM_Frequency+0x60>)
 8000f7a:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	3301      	adds	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	3b01      	subs	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim12, period);
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f9e:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	0852      	lsrs	r2, r2, #1
 8000fac:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000fae:	2104      	movs	r1, #4
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <Set_PWM_Frequency+0x5c>)
 8000fb2:	f003 fe79 	bl	8004ca8 <HAL_TIM_PWM_Start>
}
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000035c 	.word	0x2000035c
 8000fc0:	05b8d800 	.word	0x05b8d800

08000fc4 <ProcessCommand>:

int hornOn = 0;
int engineOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

			if (strcmp((char*)cmd, "INIT") == 0) {
 8000fcc:	49bc      	ldr	r1, [pc, #752]	@ (80012c0 <ProcessCommand+0x2fc>)
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff f936 	bl	8000240 <strcmp>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10d      	bne.n	8000ff6 <ProcessCommand+0x32>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	48b9      	ldr	r0, [pc, #740]	@ (80012c4 <ProcessCommand+0x300>)
 8000fde:	f002 fa5c 	bl	800349a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	48b7      	ldr	r0, [pc, #732]	@ (80012c4 <ProcessCommand+0x300>)
 8000fe6:	f002 fa58 	bl	800349a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fee:	48b5      	ldr	r0, [pc, #724]	@ (80012c4 <ProcessCommand+0x300>)
 8000ff0:	f002 fa53 	bl	800349a <HAL_GPIO_TogglePin>
	    }

	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000ff4:	e1da      	b.n	80013ac <ProcessCommand+0x3e8>
			else if (strcmp((char*)cmd, "CMD0") == 0) {
 8000ff6:	49b4      	ldr	r1, [pc, #720]	@ (80012c8 <ProcessCommand+0x304>)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f921 	bl	8000240 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d163      	bne.n	80010cc <ProcessCommand+0x108>
				if (!engineOn) {
 8001004:	4bb1      	ldr	r3, [pc, #708]	@ (80012cc <ProcessCommand+0x308>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d12a      	bne.n	8001062 <ProcessCommand+0x9e>
					HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800100c:	213c      	movs	r1, #60	@ 0x3c
 800100e:	48b0      	ldr	r0, [pc, #704]	@ (80012d0 <ProcessCommand+0x30c>)
 8001010:	f004 f86a 	bl	80050e8 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001014:	213c      	movs	r1, #60	@ 0x3c
 8001016:	48af      	ldr	r0, [pc, #700]	@ (80012d4 <ProcessCommand+0x310>)
 8001018:	f004 f866 	bl	80050e8 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800101c:	213c      	movs	r1, #60	@ 0x3c
 800101e:	48ae      	ldr	r0, [pc, #696]	@ (80012d8 <ProcessCommand+0x314>)
 8001020:	f004 f862 	bl	80050e8 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	48ad      	ldr	r0, [pc, #692]	@ (80012dc <ProcessCommand+0x318>)
 8001028:	f004 f85e 	bl	80050e8 <HAL_TIM_Encoder_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800102c:	2100      	movs	r1, #0
 800102e:	48ac      	ldr	r0, [pc, #688]	@ (80012e0 <ProcessCommand+0x31c>)
 8001030:	f003 fe3a 	bl	8004ca8 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001034:	210c      	movs	r1, #12
 8001036:	48aa      	ldr	r0, [pc, #680]	@ (80012e0 <ProcessCommand+0x31c>)
 8001038:	f003 fe36 	bl	8004ca8 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800103c:	2100      	movs	r1, #0
 800103e:	48a9      	ldr	r0, [pc, #676]	@ (80012e4 <ProcessCommand+0x320>)
 8001040:	f003 fe32 	bl	8004ca8 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001044:	210c      	movs	r1, #12
 8001046:	48a7      	ldr	r0, [pc, #668]	@ (80012e4 <ProcessCommand+0x320>)
 8001048:	f003 fe2e 	bl	8004ca8 <HAL_TIM_PWM_Start>
					HAL_TIM_Base_Start_IT(&htim6);
 800104c:	48a6      	ldr	r0, [pc, #664]	@ (80012e8 <ProcessCommand+0x324>)
 800104e:	f003 fd2d 	bl	8004aac <HAL_TIM_Base_Start_IT>
					HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001052:	2104      	movs	r1, #4
 8001054:	48a5      	ldr	r0, [pc, #660]	@ (80012ec <ProcessCommand+0x328>)
 8001056:	f003 fe27 	bl	8004ca8 <HAL_TIM_PWM_Start>
					engineOn = 1;
 800105a:	4b9c      	ldr	r3, [pc, #624]	@ (80012cc <ProcessCommand+0x308>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e02c      	b.n	80010bc <ProcessCommand+0xf8>
				ResetMotor(&motorA);
 8001062:	48a3      	ldr	r0, [pc, #652]	@ (80012f0 <ProcessCommand+0x32c>)
 8001064:	f7ff fcc2 	bl	80009ec <ResetMotor>
				HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001068:	213c      	movs	r1, #60	@ 0x3c
 800106a:	4899      	ldr	r0, [pc, #612]	@ (80012d0 <ProcessCommand+0x30c>)
 800106c:	f004 f8ca 	bl	8005204 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001070:	213c      	movs	r1, #60	@ 0x3c
 8001072:	4898      	ldr	r0, [pc, #608]	@ (80012d4 <ProcessCommand+0x310>)
 8001074:	f004 f8c6 	bl	8005204 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8001078:	213c      	movs	r1, #60	@ 0x3c
 800107a:	4897      	ldr	r0, [pc, #604]	@ (80012d8 <ProcessCommand+0x314>)
 800107c:	f004 f8c2 	bl	8005204 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim8, TIM_CHANNEL_ALL);
 8001080:	213c      	movs	r1, #60	@ 0x3c
 8001082:	4896      	ldr	r0, [pc, #600]	@ (80012dc <ProcessCommand+0x318>)
 8001084:	f004 f8be 	bl	8005204 <HAL_TIM_Encoder_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001088:	2100      	movs	r1, #0
 800108a:	4895      	ldr	r0, [pc, #596]	@ (80012e0 <ProcessCommand+0x31c>)
 800108c:	f003 ff06 	bl	8004e9c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001090:	210c      	movs	r1, #12
 8001092:	4893      	ldr	r0, [pc, #588]	@ (80012e0 <ProcessCommand+0x31c>)
 8001094:	f003 ff02 	bl	8004e9c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001098:	2100      	movs	r1, #0
 800109a:	4892      	ldr	r0, [pc, #584]	@ (80012e4 <ProcessCommand+0x320>)
 800109c:	f003 fefe 	bl	8004e9c <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 80010a0:	210c      	movs	r1, #12
 80010a2:	4890      	ldr	r0, [pc, #576]	@ (80012e4 <ProcessCommand+0x320>)
 80010a4:	f003 fefa 	bl	8004e9c <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim6);
 80010a8:	488f      	ldr	r0, [pc, #572]	@ (80012e8 <ProcessCommand+0x324>)
 80010aa:	f003 fd77 	bl	8004b9c <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 80010ae:	2104      	movs	r1, #4
 80010b0:	488e      	ldr	r0, [pc, #568]	@ (80012ec <ProcessCommand+0x328>)
 80010b2:	f003 fef3 	bl	8004e9c <HAL_TIM_PWM_Stop>
				engineOn = 0;
 80010b6:	4b85      	ldr	r3, [pc, #532]	@ (80012cc <ProcessCommand+0x308>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"ENGINE RUNNING\r\n", 16, HAL_MAX_DELAY);
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	2210      	movs	r2, #16
 80010c2:	498c      	ldr	r1, [pc, #560]	@ (80012f4 <ProcessCommand+0x330>)
 80010c4:	488c      	ldr	r0, [pc, #560]	@ (80012f8 <ProcessCommand+0x334>)
 80010c6:	f004 ffb1 	bl	800602c <HAL_UART_Transmit>
}
 80010ca:	e16f      	b.n	80013ac <ProcessCommand+0x3e8>
		else if (strcmp((char*)cmd, "CMDA") == 0) {
 80010cc:	498b      	ldr	r1, [pc, #556]	@ (80012fc <ProcessCommand+0x338>)
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f8b6 	bl	8000240 <strcmp>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10b      	bne.n	80010f2 <ProcessCommand+0x12e>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 80010da:	2101      	movs	r1, #1
 80010dc:	4888      	ldr	r0, [pc, #544]	@ (8001300 <ProcessCommand+0x33c>)
 80010de:	f002 f9dc 	bl	800349a <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart3, (uint8_t*)"LIGHTS RUNNING\r\n", 16, HAL_MAX_DELAY);
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	2210      	movs	r2, #16
 80010e8:	4986      	ldr	r1, [pc, #536]	@ (8001304 <ProcessCommand+0x340>)
 80010ea:	4883      	ldr	r0, [pc, #524]	@ (80012f8 <ProcessCommand+0x334>)
 80010ec:	f004 ff9e 	bl	800602c <HAL_UART_Transmit>
}
 80010f0:	e15c      	b.n	80013ac <ProcessCommand+0x3e8>
	    else if (strcmp((char*)cmd, "CMDB") == 0) {
 80010f2:	4985      	ldr	r1, [pc, #532]	@ (8001308 <ProcessCommand+0x344>)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff f8a3 	bl	8000240 <strcmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d119      	bne.n	8001134 <ProcessCommand+0x170>
	    	if (!hornOn) {
 8001100:	4b82      	ldr	r3, [pc, #520]	@ (800130c <ProcessCommand+0x348>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <ProcessCommand+0x154>
		    	Set_PWM_Frequency(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800110c:	f7ff ff28 	bl	8000f60 <Set_PWM_Frequency>
		    	hornOn = 1;
 8001110:	4b7e      	ldr	r3, [pc, #504]	@ (800130c <ProcessCommand+0x348>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e005      	b.n	8001124 <ProcessCommand+0x160>
	    		Set_PWM_Frequency(0);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ff21 	bl	8000f60 <Set_PWM_Frequency>
	    		hornOn = 0;
 800111e:	4b7b      	ldr	r3, [pc, #492]	@ (800130c <ProcessCommand+0x348>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"HORN RUNNING\r\n", 14, HAL_MAX_DELAY);
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	220e      	movs	r2, #14
 800112a:	4979      	ldr	r1, [pc, #484]	@ (8001310 <ProcessCommand+0x34c>)
 800112c:	4872      	ldr	r0, [pc, #456]	@ (80012f8 <ProcessCommand+0x334>)
 800112e:	f004 ff7d 	bl	800602c <HAL_UART_Transmit>
}
 8001132:	e13b      	b.n	80013ac <ProcessCommand+0x3e8>
	    else if (strcmp((char*)cmd, "CMDC") == 0) {
 8001134:	4977      	ldr	r1, [pc, #476]	@ (8001314 <ProcessCommand+0x350>)
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f882 	bl	8000240 <strcmp>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10d      	bne.n	800115e <ProcessCommand+0x19a>
	    	MotorABS(&motorA);
 8001142:	486b      	ldr	r0, [pc, #428]	@ (80012f0 <ProcessCommand+0x32c>)
 8001144:	f7ff fc9e 	bl	8000a84 <MotorABS>
	    	MotorABS(&motorB);
 8001148:	4873      	ldr	r0, [pc, #460]	@ (8001318 <ProcessCommand+0x354>)
 800114a:	f7ff fc9b 	bl	8000a84 <MotorABS>
			HAL_UART_Transmit(&huart3, (uint8_t*)"ABS!!!\r\n", 8, HAL_MAX_DELAY);
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	2208      	movs	r2, #8
 8001154:	4971      	ldr	r1, [pc, #452]	@ (800131c <ProcessCommand+0x358>)
 8001156:	4868      	ldr	r0, [pc, #416]	@ (80012f8 <ProcessCommand+0x334>)
 8001158:	f004 ff68 	bl	800602c <HAL_UART_Transmit>
}
 800115c:	e126      	b.n	80013ac <ProcessCommand+0x3e8>
	    else if (strncmp((char*)cmd, "CMD", 3) == 0) {
 800115e:	2203      	movs	r2, #3
 8001160:	496f      	ldr	r1, [pc, #444]	@ (8001320 <ProcessCommand+0x35c>)
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f009 fbf2 	bl	800a94c <strncmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 8117 	bne.w	800139e <ProcessCommand+0x3da>
	        char* modeStr = (char*)cmd + 3;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3303      	adds	r3, #3
 8001174:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f009 fb58 	bl	800a82c <atoi>
 800117c:	60b8      	str	r0, [r7, #8]
	        if (mode >= 1 && mode <= 9) {
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f340 8104 	ble.w	800138e <ProcessCommand+0x3ca>
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b09      	cmp	r3, #9
 800118a:	f300 8100 	bgt.w	800138e <ProcessCommand+0x3ca>
	            switch (mode) {
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3b01      	subs	r3, #1
 8001192:	2b08      	cmp	r3, #8
 8001194:	f200 80f8 	bhi.w	8001388 <ProcessCommand+0x3c4>
 8001198:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <ProcessCommand+0x1dc>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011e9 	.word	0x080011e9
 80011a8:	0800120d 	.word	0x0800120d
 80011ac:	08001231 	.word	0x08001231
 80011b0:	08001255 	.word	0x08001255
 80011b4:	08001279 	.word	0x08001279
 80011b8:	0800129d 	.word	0x0800129d
 80011bc:	08001341 	.word	0x08001341
 80011c0:	08001365 	.word	0x08001365
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2212      	movs	r2, #18
 80011ca:	4956      	ldr	r1, [pc, #344]	@ (8001324 <ProcessCommand+0x360>)
 80011cc:	484a      	ldr	r0, [pc, #296]	@ (80012f8 <ProcessCommand+0x334>)
 80011ce:	f004 ff2d 	bl	800602c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, DEFAULT, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	4846      	ldr	r0, [pc, #280]	@ (80012f0 <ProcessCommand+0x32c>)
 80011d8:	f7ff fc39 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, DEFAULT, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	484d      	ldr	r0, [pc, #308]	@ (8001318 <ProcessCommand+0x354>)
 80011e2:	f7ff fc34 	bl	8000a4e <motor_set_speed>
	                    break;
 80011e6:	e0d0      	b.n	800138a <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	2212      	movs	r2, #18
 80011ee:	494e      	ldr	r1, [pc, #312]	@ (8001328 <ProcessCommand+0x364>)
 80011f0:	4841      	ldr	r0, [pc, #260]	@ (80012f8 <ProcessCommand+0x334>)
 80011f2:	f004 ff1b 	bl	800602c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 93);
 80011f6:	225d      	movs	r2, #93	@ 0x5d
 80011f8:	2101      	movs	r1, #1
 80011fa:	483d      	ldr	r0, [pc, #244]	@ (80012f0 <ProcessCommand+0x32c>)
 80011fc:	f7ff fc27 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 8001200:	2264      	movs	r2, #100	@ 0x64
 8001202:	2101      	movs	r1, #1
 8001204:	4844      	ldr	r0, [pc, #272]	@ (8001318 <ProcessCommand+0x354>)
 8001206:	f7ff fc22 	bl	8000a4e <motor_set_speed>
	                    break;
 800120a:	e0be      	b.n	800138a <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	2212      	movs	r2, #18
 8001212:	4946      	ldr	r1, [pc, #280]	@ (800132c <ProcessCommand+0x368>)
 8001214:	4838      	ldr	r0, [pc, #224]	@ (80012f8 <ProcessCommand+0x334>)
 8001216:	f004 ff09 	bl	800602c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 50);
 800121a:	2232      	movs	r2, #50	@ 0x32
 800121c:	2101      	movs	r1, #1
 800121e:	4834      	ldr	r0, [pc, #208]	@ (80012f0 <ProcessCommand+0x32c>)
 8001220:	f7ff fc15 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 8001224:	2264      	movs	r2, #100	@ 0x64
 8001226:	2101      	movs	r1, #1
 8001228:	483b      	ldr	r0, [pc, #236]	@ (8001318 <ProcessCommand+0x354>)
 800122a:	f7ff fc10 	bl	8000a4e <motor_set_speed>
	                    break;
 800122e:	e0ac      	b.n	800138a <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	2212      	movs	r2, #18
 8001236:	493e      	ldr	r1, [pc, #248]	@ (8001330 <ProcessCommand+0x36c>)
 8001238:	482f      	ldr	r0, [pc, #188]	@ (80012f8 <ProcessCommand+0x334>)
 800123a:	f004 fef7 	bl	800602c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 800123e:	2264      	movs	r2, #100	@ 0x64
 8001240:	2102      	movs	r1, #2
 8001242:	482b      	ldr	r0, [pc, #172]	@ (80012f0 <ProcessCommand+0x32c>)
 8001244:	f7ff fc03 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 8001248:	2264      	movs	r2, #100	@ 0x64
 800124a:	2101      	movs	r1, #1
 800124c:	4832      	ldr	r0, [pc, #200]	@ (8001318 <ProcessCommand+0x354>)
 800124e:	f7ff fbfe 	bl	8000a4e <motor_set_speed>
	                    break;
 8001252:	e09a      	b.n	800138a <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	2212      	movs	r2, #18
 800125a:	4936      	ldr	r1, [pc, #216]	@ (8001334 <ProcessCommand+0x370>)
 800125c:	4826      	ldr	r0, [pc, #152]	@ (80012f8 <ProcessCommand+0x334>)
 800125e:	f004 fee5 	bl	800602c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 50);
 8001262:	2232      	movs	r2, #50	@ 0x32
 8001264:	2102      	movs	r1, #2
 8001266:	4822      	ldr	r0, [pc, #136]	@ (80012f0 <ProcessCommand+0x32c>)
 8001268:	f7ff fbf1 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 800126c:	2264      	movs	r2, #100	@ 0x64
 800126e:	2102      	movs	r1, #2
 8001270:	4829      	ldr	r0, [pc, #164]	@ (8001318 <ProcessCommand+0x354>)
 8001272:	f7ff fbec 	bl	8000a4e <motor_set_speed>
	                    break;
 8001276:	e088      	b.n	800138a <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2212      	movs	r2, #18
 800127e:	492e      	ldr	r1, [pc, #184]	@ (8001338 <ProcessCommand+0x374>)
 8001280:	481d      	ldr	r0, [pc, #116]	@ (80012f8 <ProcessCommand+0x334>)
 8001282:	f004 fed3 	bl	800602c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 8001286:	2264      	movs	r2, #100	@ 0x64
 8001288:	2102      	movs	r1, #2
 800128a:	4819      	ldr	r0, [pc, #100]	@ (80012f0 <ProcessCommand+0x32c>)
 800128c:	f7ff fbdf 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 8001290:	2264      	movs	r2, #100	@ 0x64
 8001292:	2102      	movs	r1, #2
 8001294:	4820      	ldr	r0, [pc, #128]	@ (8001318 <ProcessCommand+0x354>)
 8001296:	f7ff fbda 	bl	8000a4e <motor_set_speed>
	                    break;
 800129a:	e076      	b.n	800138a <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	2212      	movs	r2, #18
 80012a2:	4926      	ldr	r1, [pc, #152]	@ (800133c <ProcessCommand+0x378>)
 80012a4:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <ProcessCommand+0x334>)
 80012a6:	f004 fec1 	bl	800602c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 80012aa:	2264      	movs	r2, #100	@ 0x64
 80012ac:	2102      	movs	r1, #2
 80012ae:	4810      	ldr	r0, [pc, #64]	@ (80012f0 <ProcessCommand+0x32c>)
 80012b0:	f7ff fbcd 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 50);
 80012b4:	2232      	movs	r2, #50	@ 0x32
 80012b6:	2102      	movs	r1, #2
 80012b8:	4817      	ldr	r0, [pc, #92]	@ (8001318 <ProcessCommand+0x354>)
 80012ba:	f7ff fbc8 	bl	8000a4e <motor_set_speed>
	                    break;
 80012be:	e064      	b.n	800138a <ProcessCommand+0x3c6>
 80012c0:	0800aa20 	.word	0x0800aa20
 80012c4:	40020400 	.word	0x40020400
 80012c8:	0800aa28 	.word	0x0800aa28
 80012cc:	20000144 	.word	0x20000144
 80012d0:	20000148 	.word	0x20000148
 80012d4:	200001e0 	.word	0x200001e0
 80012d8:	2000022c 	.word	0x2000022c
 80012dc:	20000310 	.word	0x20000310
 80012e0:	20000194 	.word	0x20000194
 80012e4:	20000278 	.word	0x20000278
 80012e8:	200002c4 	.word	0x200002c4
 80012ec:	2000035c 	.word	0x2000035c
 80012f0:	200000c8 	.word	0x200000c8
 80012f4:	0800aa30 	.word	0x0800aa30
 80012f8:	20000430 	.word	0x20000430
 80012fc:	0800aa44 	.word	0x0800aa44
 8001300:	40021800 	.word	0x40021800
 8001304:	0800aa4c 	.word	0x0800aa4c
 8001308:	0800aa60 	.word	0x0800aa60
 800130c:	20000140 	.word	0x20000140
 8001310:	0800aa68 	.word	0x0800aa68
 8001314:	0800aa78 	.word	0x0800aa78
 8001318:	20000104 	.word	0x20000104
 800131c:	0800aa80 	.word	0x0800aa80
 8001320:	0800aa8c 	.word	0x0800aa8c
 8001324:	0800aa90 	.word	0x0800aa90
 8001328:	0800aaa4 	.word	0x0800aaa4
 800132c:	0800aab8 	.word	0x0800aab8
 8001330:	0800aacc 	.word	0x0800aacc
 8001334:	0800aae0 	.word	0x0800aae0
 8001338:	0800aaf4 	.word	0x0800aaf4
 800133c:	0800ab08 	.word	0x0800ab08
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	2212      	movs	r2, #18
 8001346:	491b      	ldr	r1, [pc, #108]	@ (80013b4 <ProcessCommand+0x3f0>)
 8001348:	481b      	ldr	r0, [pc, #108]	@ (80013b8 <ProcessCommand+0x3f4>)
 800134a:	f004 fe6f 	bl	800602c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 800134e:	2264      	movs	r2, #100	@ 0x64
 8001350:	2101      	movs	r1, #1
 8001352:	481a      	ldr	r0, [pc, #104]	@ (80013bc <ProcessCommand+0x3f8>)
 8001354:	f7ff fb7b 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 8001358:	2264      	movs	r2, #100	@ 0x64
 800135a:	2102      	movs	r1, #2
 800135c:	4818      	ldr	r0, [pc, #96]	@ (80013c0 <ProcessCommand+0x3fc>)
 800135e:	f7ff fb76 	bl	8000a4e <motor_set_speed>
	                    break;
 8001362:	e012      	b.n	800138a <ProcessCommand+0x3c6>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	2212      	movs	r2, #18
 800136a:	4916      	ldr	r1, [pc, #88]	@ (80013c4 <ProcessCommand+0x400>)
 800136c:	4812      	ldr	r0, [pc, #72]	@ (80013b8 <ProcessCommand+0x3f4>)
 800136e:	f004 fe5d 	bl	800602c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 8001372:	2264      	movs	r2, #100	@ 0x64
 8001374:	2101      	movs	r1, #1
 8001376:	4811      	ldr	r0, [pc, #68]	@ (80013bc <ProcessCommand+0x3f8>)
 8001378:	f7ff fb69 	bl	8000a4e <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 50);
 800137c:	2232      	movs	r2, #50	@ 0x32
 800137e:	2101      	movs	r1, #1
 8001380:	480f      	ldr	r0, [pc, #60]	@ (80013c0 <ProcessCommand+0x3fc>)
 8001382:	f7ff fb64 	bl	8000a4e <motor_set_speed>
	                    break;
 8001386:	e000      	b.n	800138a <ProcessCommand+0x3c6>
	                    break;
 8001388:	bf00      	nop
	            switch (mode) {
 800138a:	bf00      	nop
}
 800138c:	e00e      	b.n	80013ac <ProcessCommand+0x3e8>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	2215      	movs	r2, #21
 8001394:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <ProcessCommand+0x404>)
 8001396:	4808      	ldr	r0, [pc, #32]	@ (80013b8 <ProcessCommand+0x3f4>)
 8001398:	f004 fe48 	bl	800602c <HAL_UART_Transmit>
}
 800139c:	e006      	b.n	80013ac <ProcessCommand+0x3e8>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	2211      	movs	r2, #17
 80013a4:	4909      	ldr	r1, [pc, #36]	@ (80013cc <ProcessCommand+0x408>)
 80013a6:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <ProcessCommand+0x3f4>)
 80013a8:	f004 fe40 	bl	800602c <HAL_UART_Transmit>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0800ab1c 	.word	0x0800ab1c
 80013b8:	20000430 	.word	0x20000430
 80013bc:	200000c8 	.word	0x200000c8
 80013c0:	20000104 	.word	0x20000104
 80013c4:	0800ab30 	.word	0x0800ab30
 80013c8:	0800ab44 	.word	0x0800ab44
 80013cc:	0800ab5c 	.word	0x0800ab5c

080013d0 <ProcessHeartBeat>:

void ProcessHeartBeat(void* argument) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    for (;;) {

    	if (!engineOn)
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <ProcessHeartBeat+0x4c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d01b      	beq.n	8001418 <ProcessHeartBeat+0x48>
    		continue;

    	int16_t data[4] = {motorA.measured_speed, motorB.measured_speed, motorA.set_speed, motorB.set_speed};
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <ProcessHeartBeat+0x50>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	813b      	strh	r3, [r7, #8]
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <ProcessHeartBeat+0x54>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	817b      	strh	r3, [r7, #10]
 80013f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <ProcessHeartBeat+0x50>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	81bb      	strh	r3, [r7, #12]
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <ProcessHeartBeat+0x54>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	81fb      	strh	r3, [r7, #14]
    	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), HAL_MAX_DELAY);
 8001400:	f107 0108 	add.w	r1, r7, #8
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	2208      	movs	r2, #8
 800140a:	4807      	ldr	r0, [pc, #28]	@ (8001428 <ProcessHeartBeat+0x58>)
 800140c:	f004 fe0e 	bl	800602c <HAL_UART_Transmit>

        osDelay(100);
 8001410:	2064      	movs	r0, #100	@ 0x64
 8001412:	f006 fd1f 	bl	8007e54 <osDelay>
 8001416:	e7df      	b.n	80013d8 <ProcessHeartBeat+0x8>
    		continue;
 8001418:	bf00      	nop
    for (;;) {
 800141a:	e7dd      	b.n	80013d8 <ProcessHeartBeat+0x8>
 800141c:	20000144 	.word	0x20000144
 8001420:	200000c8 	.word	0x200000c8
 8001424:	20000104 	.word	0x20000104
 8001428:	200003a8 	.word	0x200003a8

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001432:	f001 f95e 	bl	80026f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001436:	f000 f83f 	bl	80014b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143a:	f7ff f8c3 	bl	80005c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800143e:	f7ff f889 	bl	8000554 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001442:	f000 ff3d 	bl	80022c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001446:	f001 f883 	bl	8002550 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800144a:	f000 ff09 	bl	8002260 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800144e:	f000 f9f5 	bl	800183c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001452:	f000 fab1 	bl	80019b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001456:	f000 fb05 	bl	8001a64 <MX_TIM4_Init>
  MX_TIM8_Init();
 800145a:	f000 fbf7 	bl	8001c4c <MX_TIM8_Init>
  MX_TIM2_Init();
 800145e:	f000 fa47 	bl	80018f0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001462:	f000 fbbb 	bl	8001bdc <MX_TIM6_Init>
  MX_TIM5_Init();
 8001466:	f000 fb53 	bl	8001b10 <MX_TIM5_Init>
  MX_TIM12_Init();
 800146a:	f000 fc49 	bl	8001d00 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <main+0x7c>)
 8001470:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7fe feee 	bl	8000254 <strlen>
 8001478:	4603      	mov	r3, r0
 800147a:	b29a      	uxth	r2, r3
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	480a      	ldr	r0, [pc, #40]	@ (80014ac <main+0x80>)
 8001484:	f004 fdd2 	bl	800602c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001488:	2201      	movs	r2, #1
 800148a:	4909      	ldr	r1, [pc, #36]	@ (80014b0 <main+0x84>)
 800148c:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <main+0x88>)
 800148e:	f004 fe56 	bl	800613e <HAL_UART_Receive_IT>

  Init_MotorSystem();
 8001492:	f7ff fd09 	bl	8000ea8 <Init_MotorSystem>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001496:	f006 fbcd 	bl	8007c34 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800149a:	f7ff f881 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800149e:	f006 fbfd 	bl	8007c9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014a2:	bf00      	nop
 80014a4:	e7fd      	b.n	80014a2 <main+0x76>
 80014a6:	bf00      	nop
 80014a8:	0800ab70 	.word	0x0800ab70
 80014ac:	20000430 	.word	0x20000430
 80014b0:	20000080 	.word	0x20000080
 80014b4:	200003a8 	.word	0x200003a8

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b094      	sub	sp, #80	@ 0x50
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	2234      	movs	r2, #52	@ 0x34
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f009 fa38 	bl	800a93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014dc:	f002 f932 	bl	8003744 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <SystemClock_Config+0xdc>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001594 <SystemClock_Config+0xdc>)
 80014e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ec:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <SystemClock_Config+0xdc>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <SystemClock_Config+0xe0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001500:	4a25      	ldr	r2, [pc, #148]	@ (8001598 <SystemClock_Config+0xe0>)
 8001502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <SystemClock_Config+0xe0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001518:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800151c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001526:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001528:	2304      	movs	r3, #4
 800152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800152c:	2360      	movs	r3, #96	@ 0x60
 800152e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001530:	2302      	movs	r3, #2
 8001532:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001534:	2304      	movs	r3, #4
 8001536:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001538:	2302      	movs	r3, #2
 800153a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4618      	mov	r0, r3
 8001542:	f002 f95f 	bl	8003804 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800154c:	f000 f860 	bl	8001610 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001550:	f002 f908 	bl	8003764 <HAL_PWREx_EnableOverDrive>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800155a:	f000 f859 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2302      	movs	r3, #2
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	2103      	movs	r1, #3
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fbf0 	bl	8003d60 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001586:	f000 f843 	bl	8001610 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3750      	adds	r7, #80	@ 0x50
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <HAL_UART_RxCpltCallback+0x5c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d120      	bne.n	80015f0 <HAL_UART_RxCpltCallback+0x54>
		HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	2201      	movs	r2, #1
 80015b4:	4911      	ldr	r1, [pc, #68]	@ (80015fc <HAL_UART_RxCpltCallback+0x60>)
 80015b6:	4812      	ldr	r0, [pc, #72]	@ (8001600 <HAL_UART_RxCpltCallback+0x64>)
 80015b8:	f004 fd38 	bl	800602c <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80015bc:	2201      	movs	r2, #1
 80015be:	490f      	ldr	r1, [pc, #60]	@ (80015fc <HAL_UART_RxCpltCallback+0x60>)
 80015c0:	4810      	ldr	r0, [pc, #64]	@ (8001604 <HAL_UART_RxCpltCallback+0x68>)
 80015c2:	f004 fdbc 	bl	800613e <HAL_UART_Receive_IT>
		rxBuff[rxIdx++] = rxData[0];
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_UART_RxCpltCallback+0x6c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	b2d1      	uxtb	r1, r2
 80015ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_UART_RxCpltCallback+0x6c>)
 80015d0:	7011      	strb	r1, [r2, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_UART_RxCpltCallback+0x60>)
 80015d6:	7819      	ldrb	r1, [r3, #0]
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_UART_RxCpltCallback+0x70>)
 80015da:	5499      	strb	r1, [r3, r2]

		if (rxIdx == 4) {
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <HAL_UART_RxCpltCallback+0x6c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d105      	bne.n	80015f0 <HAL_UART_RxCpltCallback+0x54>
			//HAL_UART_Transmit(&huart3, rxBuff, rxIdx, HAL_MAX_DELAY);
			ProcessCommand(rxBuff);
 80015e4:	4809      	ldr	r0, [pc, #36]	@ (800160c <HAL_UART_RxCpltCallback+0x70>)
 80015e6:	f7ff fced 	bl	8000fc4 <ProcessCommand>
			rxIdx = 0;
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <HAL_UART_RxCpltCallback+0x6c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40004400 	.word	0x40004400
 80015fc:	20000080 	.word	0x20000080
 8001600:	20000430 	.word	0x20000430
 8001604:	200003a8 	.word	0x200003a8
 8001608:	200000c4 	.word	0x200000c4
 800160c:	20000084 	.word	0x20000084

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <Error_Handler+0x8>

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <HAL_MspInit+0x4c>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <HAL_MspInit+0x4c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001644:	6453      	str	r3, [r2, #68]	@ 0x44
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	210f      	movs	r1, #15
 8001656:	f06f 0001 	mvn.w	r0, #1
 800165a:	f001 f9a6 	bl	80029aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <NMI_Handler+0x4>

08001674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <MemManage_Handler+0x4>

08001684 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <UsageFault_Handler+0x4>

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a6:	f001 f861 	bl	800276c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016aa:	f008 f84d 	bl	8009748 <xTaskGetSchedulerState>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d001      	beq.n	80016b8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016b4:	f008 fe38 	bl	800a328 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <DMA1_Stream5_IRQHandler+0x10>)
 80016c2:	f001 fae9 	bl	8002c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200004b8 	.word	0x200004b8

080016d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <DMA1_Stream6_IRQHandler+0x10>)
 80016d6:	f001 fadf 	bl	8002c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000518 	.word	0x20000518

080016e4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80016ea:	f003 fe32 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000148 	.word	0x20000148

080016f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016fe:	f003 fe28 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000148 	.word	0x20000148

0800170c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001712:	f003 fe1e 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000148 	.word	0x20000148

08001720 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <TIM1_CC_IRQHandler+0x10>)
 8001726:	f003 fe14 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000148 	.word	0x20000148

08001734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <TIM2_IRQHandler+0x10>)
 800173a:	f003 fe0a 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000194 	.word	0x20000194

08001748 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <TIM3_IRQHandler+0x10>)
 800174e:	f003 fe00 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001e0 	.word	0x200001e0

0800175c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <TIM4_IRQHandler+0x10>)
 8001762:	f003 fdf6 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000022c 	.word	0x2000022c

08001770 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <USART2_IRQHandler+0x10>)
 8001776:	f004 fd27 	bl	80061c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200003a8 	.word	0x200003a8

08001784 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <USART3_IRQHandler+0x10>)
 800178a:	f004 fd1d 	bl	80061c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000430 	.word	0x20000430

08001798 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800179c:	4803      	ldr	r0, [pc, #12]	@ (80017ac <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800179e:	f003 fdd8 	bl	8005352 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80017a4:	f003 fdd5 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000310 	.word	0x20000310
 80017b0:	2000035c 	.word	0x2000035c

080017b4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80017ba:	f003 fdca 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000310 	.word	0x20000310

080017c8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80017ce:	f003 fdc0 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000310 	.word	0x20000310

080017dc <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <TIM8_CC_IRQHandler+0x10>)
 80017e2:	f003 fdb6 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000310 	.word	0x20000310

080017f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <TIM5_IRQHandler+0x10>)
 80017f6:	f003 fdac 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000278 	.word	0x20000278

08001804 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <TIM6_DAC_IRQHandler+0x10>)
 800180a:	f003 fda2 	bl	8005352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200002c4 	.word	0x200002c4

08001818 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	@ 0x30
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2224      	movs	r2, #36	@ 0x24
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f009 f876 	bl	800a93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <MX_TIM1_Init+0xac>)
 800185c:	4a23      	ldr	r2, [pc, #140]	@ (80018ec <MX_TIM1_Init+0xb0>)
 800185e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <MX_TIM1_Init+0xac>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <MX_TIM1_Init+0xac>)
 8001868:	2210      	movs	r2, #16
 800186a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM1_Init+0xac>)
 800186e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <MX_TIM1_Init+0xac>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <MX_TIM1_Init+0xac>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_TIM1_Init+0xac>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001886:	2303      	movs	r3, #3
 8001888:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001896:	230f      	movs	r3, #15
 8001898:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80018a6:	230f      	movs	r3, #15
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4619      	mov	r1, r3
 80018b0:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_TIM1_Init+0xac>)
 80018b2:	f003 fb73 	bl	8004f9c <HAL_TIM_Encoder_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80018bc:	f7ff fea8 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_TIM1_Init+0xac>)
 80018d2:	f004 fab1 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80018dc:	f7ff fe98 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3730      	adds	r7, #48	@ 0x30
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000148 	.word	0x20000148
 80018ec:	40010000 	.word	0x40010000

080018f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	615a      	str	r2, [r3, #20]
 8001912:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001914:	4b27      	ldr	r3, [pc, #156]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 8001916:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800191a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 800191e:	222f      	movs	r2, #47	@ 0x2f
 8001920:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001928:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 800192a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800192e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001930:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001936:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800193c:	481d      	ldr	r0, [pc, #116]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 800193e:	f003 f95c 	bl	8004bfa <HAL_TIM_PWM_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001948:	f7ff fe62 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	4816      	ldr	r0, [pc, #88]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 800195c:	f004 fa6c 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001966:	f7ff fe53 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196a:	2360      	movs	r3, #96	@ 0x60
 800196c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 8001982:	f003 fded 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800198c:	f7ff fe40 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	220c      	movs	r2, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4807      	ldr	r0, [pc, #28]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 8001998:	f003 fde2 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80019a2:	f7ff fe35 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019a6:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <MX_TIM2_Init+0xc4>)
 80019a8:	f000 fbbc 	bl	8002124 <HAL_TIM_MspPostInit>

}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	@ 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000194 	.word	0x20000194

080019b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	@ 0x30
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2224      	movs	r2, #36	@ 0x24
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f008 ffb8 	bl	800a93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	463b      	mov	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019d6:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <MX_TIM3_Init+0xa4>)
 80019d8:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <MX_TIM3_Init+0xa8>)
 80019da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019dc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <MX_TIM3_Init+0xa4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <MX_TIM3_Init+0xa4>)
 80019e4:	2210      	movs	r2, #16
 80019e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <MX_TIM3_Init+0xa4>)
 80019ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <MX_TIM3_Init+0xa4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <MX_TIM3_Init+0xa4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019fc:	2303      	movs	r3, #3
 80019fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a04:	2301      	movs	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a14:	2301      	movs	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4619      	mov	r1, r3
 8001a26:	480d      	ldr	r0, [pc, #52]	@ (8001a5c <MX_TIM3_Init+0xa4>)
 8001a28:	f003 fab8 	bl	8004f9c <HAL_TIM_Encoder_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a32:	f7ff fded 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	@ (8001a5c <MX_TIM3_Init+0xa4>)
 8001a44:	f004 f9f8 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a4e:	f7ff fddf 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3730      	adds	r7, #48	@ 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001e0 	.word	0x200001e0
 8001a60:	40000400 	.word	0x40000400

08001a64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	@ 0x30
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2224      	movs	r2, #36	@ 0x24
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f008 ff62 	bl	800a93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	463b      	mov	r3, r7
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a82:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <MX_TIM4_Init+0xa4>)
 8001a84:	4a21      	ldr	r2, [pc, #132]	@ (8001b0c <MX_TIM4_Init+0xa8>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <MX_TIM4_Init+0xa4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b08 <MX_TIM4_Init+0xa4>)
 8001a90:	2210      	movs	r2, #16
 8001a92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <MX_TIM4_Init+0xa4>)
 8001a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <MX_TIM4_Init+0xa4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <MX_TIM4_Init+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001ab8:	230f      	movs	r3, #15
 8001aba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001ac8:	230f      	movs	r3, #15
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	@ (8001b08 <MX_TIM4_Init+0xa4>)
 8001ad4:	f003 fa62 	bl	8004f9c <HAL_TIM_Encoder_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ade:	f7ff fd97 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aea:	463b      	mov	r3, r7
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	@ (8001b08 <MX_TIM4_Init+0xa4>)
 8001af0:	f004 f9a2 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001afa:	f7ff fd89 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3730      	adds	r7, #48	@ 0x30
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000022c 	.word	0x2000022c
 8001b0c:	40000800 	.word	0x40000800

08001b10 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	615a      	str	r2, [r3, #20]
 8001b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b34:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001b36:	4a28      	ldr	r2, [pc, #160]	@ (8001bd8 <MX_TIM5_Init+0xc8>)
 8001b38:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001b3a:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001b3c:	222f      	movs	r2, #47	@ 0x2f
 8001b3e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001b46:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001b48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b4c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4e:	4b21      	ldr	r3, [pc, #132]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b5a:	481e      	ldr	r0, [pc, #120]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001b5c:	f003 f84d 	bl	8004bfa <HAL_TIM_PWM_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001b66:	f7ff fd53 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4816      	ldr	r0, [pc, #88]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001b7a:	f004 f95d 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001b84:	f7ff fd44 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b88:	2360      	movs	r3, #96	@ 0x60
 8001b8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001ba0:	f003 fcde 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001baa:	f7ff fd31 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001bb6:	f003 fcd3 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001bc0:	f7ff fd26 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001bc4:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <MX_TIM5_Init+0xc4>)
 8001bc6:	f000 faad 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	@ 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000278 	.word	0x20000278
 8001bd8:	40000c00 	.word	0x40000c00

08001bdc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bec:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <MX_TIM6_Init+0x68>)
 8001bee:	4a16      	ldr	r2, [pc, #88]	@ (8001c48 <MX_TIM6_Init+0x6c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <MX_TIM6_Init+0x68>)
 8001bf4:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001bf8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <MX_TIM6_Init+0x68>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001c00:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <MX_TIM6_Init+0x68>)
 8001c02:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_TIM6_Init+0x68>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c0e:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <MX_TIM6_Init+0x68>)
 8001c10:	f002 fef4 	bl	80049fc <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001c1a:	f7ff fcf9 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <MX_TIM6_Init+0x68>)
 8001c2c:	f004 f904 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001c36:	f7ff fceb 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200002c4 	.word	0x200002c4
 8001c48:	40001000 	.word	0x40001000

08001c4c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	@ 0x30
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2224      	movs	r2, #36	@ 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f008 fe6e 	bl	800a93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	463b      	mov	r3, r7
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c6a:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <MX_TIM8_Init+0xac>)
 8001c6c:	4a23      	ldr	r2, [pc, #140]	@ (8001cfc <MX_TIM8_Init+0xb0>)
 8001c6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c70:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <MX_TIM8_Init+0xac>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001c76:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <MX_TIM8_Init+0xac>)
 8001c78:	2210      	movs	r2, #16
 8001c7a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <MX_TIM8_Init+0xac>)
 8001c7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c82:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <MX_TIM8_Init+0xac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <MX_TIM8_Init+0xac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <MX_TIM8_Init+0xac>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c96:	2303      	movs	r3, #3
 8001c98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001cb6:	230f      	movs	r3, #15
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	480d      	ldr	r0, [pc, #52]	@ (8001cf8 <MX_TIM8_Init+0xac>)
 8001cc2:	f003 f96b 	bl	8004f9c <HAL_TIM_Encoder_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001ccc:	f7ff fca0 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <MX_TIM8_Init+0xac>)
 8001ce2:	f004 f8a9 	bl	8005e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001cec:	f7ff fc90 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3730      	adds	r7, #48	@ 0x30
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000310 	.word	0x20000310
 8001cfc:	40010400 	.word	0x40010400

08001d00 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	615a      	str	r2, [r3, #20]
 8001d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <MX_TIM12_Init+0x84>)
 8001d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d88 <MX_TIM12_Init+0x88>)
 8001d1c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <MX_TIM12_Init+0x84>)
 8001d20:	225f      	movs	r2, #95	@ 0x5f
 8001d22:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d24:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <MX_TIM12_Init+0x84>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <MX_TIM12_Init+0x84>)
 8001d2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d30:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d32:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <MX_TIM12_Init+0x84>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <MX_TIM12_Init+0x84>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001d3e:	4811      	ldr	r0, [pc, #68]	@ (8001d84 <MX_TIM12_Init+0x84>)
 8001d40:	f002 ff5b 	bl	8004bfa <HAL_TIM_PWM_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001d4a:	f7ff fc61 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d4e:	2360      	movs	r3, #96	@ 0x60
 8001d50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2204      	movs	r2, #4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4807      	ldr	r0, [pc, #28]	@ (8001d84 <MX_TIM12_Init+0x84>)
 8001d66:	f003 fbfb 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001d70:	f7ff fc4e 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001d74:	4803      	ldr	r0, [pc, #12]	@ (8001d84 <MX_TIM12_Init+0x84>)
 8001d76:	f000 f9d5 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000035c 	.word	0x2000035c
 8001d88:	40001800 	.word	0x40001800

08001d8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b090      	sub	sp, #64	@ 0x40
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a93      	ldr	r2, [pc, #588]	@ (8001ff8 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d149      	bne.n	8001e42 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dae:	4b93      	ldr	r3, [pc, #588]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	4a92      	ldr	r2, [pc, #584]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dba:	4b90      	ldr	r3, [pc, #576]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a8c      	ldr	r2, [pc, #560]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001dcc:	f043 0310 	orr.w	r3, r3, #16
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b8a      	ldr	r3, [pc, #552]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 8001dde:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001df0:	2301      	movs	r3, #1
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001df4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4881      	ldr	r0, [pc, #516]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x274>)
 8001dfc:	f001 f988 	bl	8003110 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2105      	movs	r1, #5
 8001e04:	2018      	movs	r0, #24
 8001e06:	f000 fdd0 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e0a:	2018      	movs	r0, #24
 8001e0c:	f000 fde9 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2105      	movs	r1, #5
 8001e14:	2019      	movs	r0, #25
 8001e16:	f000 fdc8 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e1a:	2019      	movs	r0, #25
 8001e1c:	f000 fde1 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2105      	movs	r1, #5
 8001e24:	201a      	movs	r0, #26
 8001e26:	f000 fdc0 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e2a:	201a      	movs	r0, #26
 8001e2c:	f000 fdd9 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2105      	movs	r1, #5
 8001e34:	201b      	movs	r0, #27
 8001e36:	f000 fdb8 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e3a:	201b      	movs	r0, #27
 8001e3c:	f000 fdd1 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001e40:	e0d5      	b.n	8001fee <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6f      	ldr	r2, [pc, #444]	@ (8002004 <HAL_TIM_Encoder_MspInit+0x278>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d14c      	bne.n	8001ee6 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e4c:	4b6b      	ldr	r3, [pc, #428]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	4a6a      	ldr	r2, [pc, #424]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e58:	4b68      	ldr	r3, [pc, #416]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	623b      	str	r3, [r7, #32]
 8001e62:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b65      	ldr	r3, [pc, #404]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	4a64      	ldr	r2, [pc, #400]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e70:	4b62      	ldr	r3, [pc, #392]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	4b5f      	ldr	r3, [pc, #380]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	4a5e      	ldr	r2, [pc, #376]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e88:	4b5c      	ldr	r3, [pc, #368]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8001e94:	2340      	movs	r3, #64	@ 0x40
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eac:	4619      	mov	r1, r3
 8001eae:	4856      	ldr	r0, [pc, #344]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x27c>)
 8001eb0:	f001 f92e 	bl	8003110 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ecc:	4619      	mov	r1, r3
 8001ece:	484f      	ldr	r0, [pc, #316]	@ (800200c <HAL_TIM_Encoder_MspInit+0x280>)
 8001ed0:	f001 f91e 	bl	8003110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	201d      	movs	r0, #29
 8001eda:	f000 fd66 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ede:	201d      	movs	r0, #29
 8001ee0:	f000 fd7f 	bl	80029e2 <HAL_NVIC_EnableIRQ>
}
 8001ee4:	e083      	b.n	8001fee <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a49      	ldr	r2, [pc, #292]	@ (8002010 <HAL_TIM_Encoder_MspInit+0x284>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d131      	bne.n	8001f54 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ef0:	4b42      	ldr	r3, [pc, #264]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	4a41      	ldr	r2, [pc, #260]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f08:	4b3c      	ldr	r3, [pc, #240]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	4a3b      	ldr	r2, [pc, #236]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f14:	4b39      	ldr	r3, [pc, #228]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8001f20:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f32:	2302      	movs	r3, #2
 8001f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4835      	ldr	r0, [pc, #212]	@ (8002014 <HAL_TIM_Encoder_MspInit+0x288>)
 8001f3e:	f001 f8e7 	bl	8003110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2105      	movs	r1, #5
 8001f46:	201e      	movs	r0, #30
 8001f48:	f000 fd2f 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f4c:	201e      	movs	r0, #30
 8001f4e:	f000 fd48 	bl	80029e2 <HAL_NVIC_EnableIRQ>
}
 8001f52:	e04c      	b.n	8001fee <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a2f      	ldr	r2, [pc, #188]	@ (8002018 <HAL_TIM_Encoder_MspInit+0x28c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d147      	bne.n	8001fee <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f5e:	4b27      	ldr	r3, [pc, #156]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	4a26      	ldr	r2, [pc, #152]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6a:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	4a20      	ldr	r2, [pc, #128]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x270>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8001f8e:	23c0      	movs	r3, #192	@ 0xc0
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	481c      	ldr	r0, [pc, #112]	@ (800201c <HAL_TIM_Encoder_MspInit+0x290>)
 8001faa:	f001 f8b1 	bl	8003110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2105      	movs	r1, #5
 8001fb2:	202b      	movs	r0, #43	@ 0x2b
 8001fb4:	f000 fcf9 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001fb8:	202b      	movs	r0, #43	@ 0x2b
 8001fba:	f000 fd12 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	202c      	movs	r0, #44	@ 0x2c
 8001fc4:	f000 fcf1 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001fc8:	202c      	movs	r0, #44	@ 0x2c
 8001fca:	f000 fd0a 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	202d      	movs	r0, #45	@ 0x2d
 8001fd4:	f000 fce9 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001fd8:	202d      	movs	r0, #45	@ 0x2d
 8001fda:	f000 fd02 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	202e      	movs	r0, #46	@ 0x2e
 8001fe4:	f000 fce1 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001fe8:	202e      	movs	r0, #46	@ 0x2e
 8001fea:	f000 fcfa 	bl	80029e2 <HAL_NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3740      	adds	r7, #64	@ 0x40
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40021000 	.word	0x40021000
 8002004:	40000400 	.word	0x40000400
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400
 8002010:	40000800 	.word	0x40000800
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40010400 	.word	0x40010400
 800201c:	40020800 	.word	0x40020800

08002020 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002030:	d114      	bne.n	800205c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002032:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <HAL_TIM_PWM_MspInit+0xac>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	4a25      	ldr	r2, [pc, #148]	@ (80020cc <HAL_TIM_PWM_MspInit+0xac>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6413      	str	r3, [r2, #64]	@ 0x40
 800203e:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <HAL_TIM_PWM_MspInit+0xac>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2105      	movs	r1, #5
 800204e:	201c      	movs	r0, #28
 8002050:	f000 fcab 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002054:	201c      	movs	r0, #28
 8002056:	f000 fcc4 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800205a:	e032      	b.n	80020c2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1b      	ldr	r2, [pc, #108]	@ (80020d0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d114      	bne.n	8002090 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002066:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <HAL_TIM_PWM_MspInit+0xac>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <HAL_TIM_PWM_MspInit+0xac>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6413      	str	r3, [r2, #64]	@ 0x40
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <HAL_TIM_PWM_MspInit+0xac>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2105      	movs	r1, #5
 8002082:	2032      	movs	r0, #50	@ 0x32
 8002084:	f000 fc91 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002088:	2032      	movs	r0, #50	@ 0x32
 800208a:	f000 fcaa 	bl	80029e2 <HAL_NVIC_EnableIRQ>
}
 800208e:	e018      	b.n	80020c2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0f      	ldr	r2, [pc, #60]	@ (80020d4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800209a:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <HAL_TIM_PWM_MspInit+0xac>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	4a0b      	ldr	r2, [pc, #44]	@ (80020cc <HAL_TIM_PWM_MspInit+0xac>)
 80020a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HAL_TIM_PWM_MspInit+0xac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2105      	movs	r1, #5
 80020b6:	202b      	movs	r0, #43	@ 0x2b
 80020b8:	f000 fc77 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80020bc:	202b      	movs	r0, #43	@ 0x2b
 80020be:	f000 fc90 	bl	80029e2 <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40000c00 	.word	0x40000c00
 80020d4:	40001800 	.word	0x40001800

080020d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <HAL_TIM_Base_MspInit+0x44>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d113      	bne.n	8002112 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <HAL_TIM_Base_MspInit+0x48>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <HAL_TIM_Base_MspInit+0x48>)
 80020f0:	f043 0310 	orr.w	r3, r3, #16
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_TIM_Base_MspInit+0x48>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2105      	movs	r1, #5
 8002106:	2036      	movs	r0, #54	@ 0x36
 8002108:	f000 fc4f 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800210c:	2036      	movs	r0, #54	@ 0x36
 800210e:	f000 fc68 	bl	80029e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40001000 	.word	0x40001000
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	@ 0x30
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002144:	d139      	bne.n	80021ba <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b41      	ldr	r3, [pc, #260]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a40      	ldr	r2, [pc, #256]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b3e      	ldr	r3, [pc, #248]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b3b      	ldr	r3, [pc, #236]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a3a      	ldr	r2, [pc, #232]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b38      	ldr	r3, [pc, #224]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8002176:	2320      	movs	r3, #32
 8002178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002186:	2301      	movs	r3, #1
 8002188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	482f      	ldr	r0, [pc, #188]	@ (8002250 <HAL_TIM_MspPostInit+0x12c>)
 8002192:	f000 ffbd 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 8002196:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a8:	2301      	movs	r3, #1
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4828      	ldr	r0, [pc, #160]	@ (8002254 <HAL_TIM_MspPostInit+0x130>)
 80021b4:	f000 ffac 	bl	8003110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80021b8:	e043      	b.n	8002242 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a26      	ldr	r2, [pc, #152]	@ (8002258 <HAL_TIM_MspPostInit+0x134>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d11c      	bne.n	80021fe <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b21      	ldr	r3, [pc, #132]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	4a20      	ldr	r2, [pc, #128]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d0:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 80021dc:	2309      	movs	r3, #9
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	4816      	ldr	r0, [pc, #88]	@ (8002250 <HAL_TIM_MspPostInit+0x12c>)
 80021f8:	f000 ff8a 	bl	8003110 <HAL_GPIO_Init>
}
 80021fc:	e021      	b.n	8002242 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a16      	ldr	r2, [pc, #88]	@ (800225c <HAL_TIM_MspPostInit+0x138>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d11c      	bne.n	8002242 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	4a0f      	ldr	r2, [pc, #60]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	6313      	str	r3, [r2, #48]	@ 0x30
 8002214:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_TIM_MspPostInit+0x128>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002232:	2309      	movs	r3, #9
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	@ (8002254 <HAL_TIM_MspPostInit+0x130>)
 800223e:	f000 ff67 	bl	8003110 <HAL_GPIO_Init>
}
 8002242:	bf00      	nop
 8002244:	3730      	adds	r7, #48	@ 0x30
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40001800 	.word	0x40001800

08002260 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002264:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 8002266:	4a15      	ldr	r2, [pc, #84]	@ (80022bc <MX_USART2_UART_Init+0x5c>)
 8002268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800226a:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 800226c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002272:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002278:	4b0f      	ldr	r3, [pc, #60]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800227e:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 8002286:	220c      	movs	r2, #12
 8002288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228a:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002290:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022a2:	4805      	ldr	r0, [pc, #20]	@ (80022b8 <MX_USART2_UART_Init+0x58>)
 80022a4:	f003 fe74 	bl	8005f90 <HAL_UART_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022ae:	f7ff f9af 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200003a8 	.word	0x200003a8
 80022bc:	40004400 	.word	0x40004400

080022c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022c4:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022c6:	4a15      	ldr	r2, [pc, #84]	@ (800231c <MX_USART3_UART_Init+0x5c>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	@ (8002318 <MX_USART3_UART_Init+0x58>)
 8002304:	f003 fe44 	bl	8005f90 <HAL_UART_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800230e:	f7ff f97f 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000430 	.word	0x20000430
 800231c:	40004800 	.word	0x40004800

08002320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b0b0      	sub	sp, #192	@ 0xc0
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	2290      	movs	r2, #144	@ 0x90
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f008 fafb 	bl	800a93c <memset>
  if(uartHandle->Instance==USART2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a79      	ldr	r2, [pc, #484]	@ (8002530 <HAL_UART_MspInit+0x210>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f040 80a0 	bne.w	8002492 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002356:	2300      	movs	r3, #0
 8002358:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4618      	mov	r0, r3
 8002360:	f001 ff24 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800236a:	f7ff f951 	bl	8001610 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800236e:	4b71      	ldr	r3, [pc, #452]	@ (8002534 <HAL_UART_MspInit+0x214>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	4a70      	ldr	r2, [pc, #448]	@ (8002534 <HAL_UART_MspInit+0x214>)
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	6413      	str	r3, [r2, #64]	@ 0x40
 800237a:	4b6e      	ldr	r3, [pc, #440]	@ (8002534 <HAL_UART_MspInit+0x214>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002386:	4b6b      	ldr	r3, [pc, #428]	@ (8002534 <HAL_UART_MspInit+0x214>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a6a      	ldr	r2, [pc, #424]	@ (8002534 <HAL_UART_MspInit+0x214>)
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b68      	ldr	r3, [pc, #416]	@ (8002534 <HAL_UART_MspInit+0x214>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800239e:	2360      	movs	r3, #96	@ 0x60
 80023a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b6:	2307      	movs	r3, #7
 80023b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023bc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80023c0:	4619      	mov	r1, r3
 80023c2:	485d      	ldr	r0, [pc, #372]	@ (8002538 <HAL_UART_MspInit+0x218>)
 80023c4:	f000 fea4 	bl	8003110 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023c8:	4b5c      	ldr	r3, [pc, #368]	@ (800253c <HAL_UART_MspInit+0x21c>)
 80023ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002540 <HAL_UART_MspInit+0x220>)
 80023cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80023ce:	4b5b      	ldr	r3, [pc, #364]	@ (800253c <HAL_UART_MspInit+0x21c>)
 80023d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d6:	4b59      	ldr	r3, [pc, #356]	@ (800253c <HAL_UART_MspInit+0x21c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023dc:	4b57      	ldr	r3, [pc, #348]	@ (800253c <HAL_UART_MspInit+0x21c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e2:	4b56      	ldr	r3, [pc, #344]	@ (800253c <HAL_UART_MspInit+0x21c>)
 80023e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ea:	4b54      	ldr	r3, [pc, #336]	@ (800253c <HAL_UART_MspInit+0x21c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f0:	4b52      	ldr	r3, [pc, #328]	@ (800253c <HAL_UART_MspInit+0x21c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80023f6:	4b51      	ldr	r3, [pc, #324]	@ (800253c <HAL_UART_MspInit+0x21c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023fc:	4b4f      	ldr	r3, [pc, #316]	@ (800253c <HAL_UART_MspInit+0x21c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002402:	4b4e      	ldr	r3, [pc, #312]	@ (800253c <HAL_UART_MspInit+0x21c>)
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002408:	484c      	ldr	r0, [pc, #304]	@ (800253c <HAL_UART_MspInit+0x21c>)
 800240a:	f000 fb05 	bl	8002a18 <HAL_DMA_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8002414:	f7ff f8fc 	bl	8001610 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a48      	ldr	r2, [pc, #288]	@ (800253c <HAL_UART_MspInit+0x21c>)
 800241c:	675a      	str	r2, [r3, #116]	@ 0x74
 800241e:	4a47      	ldr	r2, [pc, #284]	@ (800253c <HAL_UART_MspInit+0x21c>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002424:	4b47      	ldr	r3, [pc, #284]	@ (8002544 <HAL_UART_MspInit+0x224>)
 8002426:	4a48      	ldr	r2, [pc, #288]	@ (8002548 <HAL_UART_MspInit+0x228>)
 8002428:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800242a:	4b46      	ldr	r3, [pc, #280]	@ (8002544 <HAL_UART_MspInit+0x224>)
 800242c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002430:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002432:	4b44      	ldr	r3, [pc, #272]	@ (8002544 <HAL_UART_MspInit+0x224>)
 8002434:	2240      	movs	r2, #64	@ 0x40
 8002436:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002438:	4b42      	ldr	r3, [pc, #264]	@ (8002544 <HAL_UART_MspInit+0x224>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800243e:	4b41      	ldr	r3, [pc, #260]	@ (8002544 <HAL_UART_MspInit+0x224>)
 8002440:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002444:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002446:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <HAL_UART_MspInit+0x224>)
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800244c:	4b3d      	ldr	r3, [pc, #244]	@ (8002544 <HAL_UART_MspInit+0x224>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002452:	4b3c      	ldr	r3, [pc, #240]	@ (8002544 <HAL_UART_MspInit+0x224>)
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002458:	4b3a      	ldr	r3, [pc, #232]	@ (8002544 <HAL_UART_MspInit+0x224>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800245e:	4b39      	ldr	r3, [pc, #228]	@ (8002544 <HAL_UART_MspInit+0x224>)
 8002460:	2200      	movs	r2, #0
 8002462:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002464:	4837      	ldr	r0, [pc, #220]	@ (8002544 <HAL_UART_MspInit+0x224>)
 8002466:	f000 fad7 	bl	8002a18 <HAL_DMA_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8002470:	f7ff f8ce 	bl	8001610 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a33      	ldr	r2, [pc, #204]	@ (8002544 <HAL_UART_MspInit+0x224>)
 8002478:	671a      	str	r2, [r3, #112]	@ 0x70
 800247a:	4a32      	ldr	r2, [pc, #200]	@ (8002544 <HAL_UART_MspInit+0x224>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2105      	movs	r1, #5
 8002484:	2026      	movs	r0, #38	@ 0x26
 8002486:	f000 fa90 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800248a:	2026      	movs	r0, #38	@ 0x26
 800248c:	f000 faa9 	bl	80029e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002490:	e049      	b.n	8002526 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a2d      	ldr	r2, [pc, #180]	@ (800254c <HAL_UART_MspInit+0x22c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d144      	bne.n	8002526 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800249c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a6:	f107 031c 	add.w	r3, r7, #28
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 fe7e 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80024b6:	f7ff f8ab 	bl	8001610 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <HAL_UART_MspInit+0x214>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	4a1d      	ldr	r2, [pc, #116]	@ (8002534 <HAL_UART_MspInit+0x214>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_UART_MspInit+0x214>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d2:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <HAL_UART_MspInit+0x214>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a17      	ldr	r2, [pc, #92]	@ (8002534 <HAL_UART_MspInit+0x214>)
 80024d8:	f043 0308 	orr.w	r3, r3, #8
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_UART_MspInit+0x214>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80024ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002504:	2307      	movs	r3, #7
 8002506:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800250e:	4619      	mov	r1, r3
 8002510:	4809      	ldr	r0, [pc, #36]	@ (8002538 <HAL_UART_MspInit+0x218>)
 8002512:	f000 fdfd 	bl	8003110 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2105      	movs	r1, #5
 800251a:	2027      	movs	r0, #39	@ 0x27
 800251c:	f000 fa45 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002520:	2027      	movs	r0, #39	@ 0x27
 8002522:	f000 fa5e 	bl	80029e2 <HAL_NVIC_EnableIRQ>
}
 8002526:	bf00      	nop
 8002528:	37c0      	adds	r7, #192	@ 0xc0
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40004400 	.word	0x40004400
 8002534:	40023800 	.word	0x40023800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	200004b8 	.word	0x200004b8
 8002540:	40026088 	.word	0x40026088
 8002544:	20000518 	.word	0x20000518
 8002548:	400260a0 	.word	0x400260a0
 800254c:	40004800 	.word	0x40004800

08002550 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002556:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800255a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800255c:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800255e:	2206      	movs	r2, #6
 8002560:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002564:	2202      	movs	r2, #2
 8002566:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800256a:	2200      	movs	r2, #0
 800256c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002570:	2202      	movs	r2, #2
 8002572:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002576:	2201      	movs	r2, #1
 8002578:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800257c:	2200      	movs	r2, #0
 800257e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002580:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002582:	2200      	movs	r2, #0
 8002584:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002588:	2201      	movs	r2, #1
 800258a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800258e:	2200      	movs	r2, #0
 8002590:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	@ (80025a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002594:	f000 ff9b 	bl	80034ce <HAL_PCD_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800259e:	f7ff f837 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000578 	.word	0x20000578

080025ac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b0ae      	sub	sp, #184	@ 0xb8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	2290      	movs	r2, #144	@ 0x90
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f008 f9b5 	bl	800a93c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025da:	d159      	bne.n	8002690 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80025dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 fddd 	bl	80041ac <HAL_RCCEx_PeriphCLKConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80025f8:	f7ff f80a 	bl	8001610 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	4b26      	ldr	r3, [pc, #152]	@ (8002698 <HAL_PCD_MspInit+0xec>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	4a25      	ldr	r2, [pc, #148]	@ (8002698 <HAL_PCD_MspInit+0xec>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6313      	str	r3, [r2, #48]	@ 0x30
 8002608:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_PCD_MspInit+0xec>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002614:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800262e:	230a      	movs	r3, #10
 8002630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002638:	4619      	mov	r1, r3
 800263a:	4818      	ldr	r0, [pc, #96]	@ (800269c <HAL_PCD_MspInit+0xf0>)
 800263c:	f000 fd68 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002640:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002644:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002658:	4619      	mov	r1, r3
 800265a:	4810      	ldr	r0, [pc, #64]	@ (800269c <HAL_PCD_MspInit+0xf0>)
 800265c:	f000 fd58 	bl	8003110 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002660:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <HAL_PCD_MspInit+0xec>)
 8002662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002664:	4a0c      	ldr	r2, [pc, #48]	@ (8002698 <HAL_PCD_MspInit+0xec>)
 8002666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800266a:	6353      	str	r3, [r2, #52]	@ 0x34
 800266c:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_PCD_MspInit+0xec>)
 800266e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <HAL_PCD_MspInit+0xec>)
 800267a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267c:	4a06      	ldr	r2, [pc, #24]	@ (8002698 <HAL_PCD_MspInit+0xec>)
 800267e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002682:	6453      	str	r3, [r2, #68]	@ 0x44
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <HAL_PCD_MspInit+0xec>)
 8002686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002690:	bf00      	nop
 8002692:	37b8      	adds	r7, #184	@ 0xb8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40023800 	.word	0x40023800
 800269c:	40020000 	.word	0x40020000

080026a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026a4:	f7ff f8b8 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a8:	480c      	ldr	r0, [pc, #48]	@ (80026dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026aa:	490d      	ldr	r1, [pc, #52]	@ (80026e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026ac:	4a0d      	ldr	r2, [pc, #52]	@ (80026e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c0:	4c0a      	ldr	r4, [pc, #40]	@ (80026ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026ce:	f008 f955 	bl	800a97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d2:	f7fe feab 	bl	800142c <main>
  bx  lr    
 80026d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80026e4:	0800ad0c 	.word	0x0800ad0c
  ldr r2, =_sbss
 80026e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80026ec:	200054dc 	.word	0x200054dc

080026f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC_IRQHandler>

080026f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f6:	2003      	movs	r0, #3
 80026f8:	f000 f94c 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fc:	200f      	movs	r0, #15
 80026fe:	f000 f805 	bl	800270c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002702:	f7fe ff8b 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002714:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <HAL_InitTick+0x54>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_InitTick+0x58>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002722:	fbb3 f3f1 	udiv	r3, r3, r1
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f967 	bl	80029fe <HAL_SYSTICK_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00e      	b.n	8002758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d80a      	bhi.n	8002756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f000 f92f 	bl	80029aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800274c:	4a06      	ldr	r2, [pc, #24]	@ (8002768 <HAL_InitTick+0x5c>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000000 	.word	0x20000000
 8002764:	20000008 	.word	0x20000008
 8002768:	20000004 	.word	0x20000004

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008
 8002790:	20000a58 	.word	0x20000a58

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	@ (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000a58 	.word	0x20000a58

080027ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff ffee 	bl	8002794 <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d005      	beq.n	80027d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027c6:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <HAL_Delay+0x44>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027d2:	bf00      	nop
 80027d4:	f7ff ffde 	bl	8002794 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d8f7      	bhi.n	80027d4 <HAL_Delay+0x28>
  {
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000008 	.word	0x20000008

080027f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <__NVIC_SetPriorityGrouping+0x40>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	4313      	orrs	r3, r2
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <__NVIC_SetPriorityGrouping+0x40>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00
 8002838:	05fa0000 	.word	0x05fa0000

0800283c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <__NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	f003 0307 	and.w	r3, r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db0b      	blt.n	8002882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4907      	ldr	r1, [pc, #28]	@ (8002890 <__NVIC_EnableIRQ+0x38>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000e100 	.word	0xe000e100

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	490c      	ldr	r1, [pc, #48]	@ (80028e0 <__NVIC_SetPriority+0x4c>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	0112      	lsls	r2, r2, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4908      	ldr	r1, [pc, #32]	@ (80028e4 <__NVIC_SetPriority+0x50>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3b04      	subs	r3, #4
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	@ 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b04      	cmp	r3, #4
 8002904:	bf28      	it	cs
 8002906:	2304      	movcs	r3, #4
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b03      	subs	r3, #3
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	401a      	ands	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43d9      	mvns	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	4313      	orrs	r3, r2
         );
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	@ 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff8e 	bl	8002894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff29 	bl	80027f4 <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029bc:	f7ff ff3e 	bl	800283c <__NVIC_GetPriorityGrouping>
 80029c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f7ff ff8e 	bl	80028e8 <NVIC_EncodePriority>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff5d 	bl	8002894 <__NVIC_SetPriority>
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff31 	bl	8002858 <__NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa2 	bl	8002950 <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff feb6 	bl	8002794 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e099      	b.n	8002b68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a54:	e00f      	b.n	8002a76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a56:	f7ff fe9d 	bl	8002794 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d908      	bls.n	8002a76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e078      	b.n	8002b68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e8      	bne.n	8002a56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4b38      	ldr	r3, [pc, #224]	@ (8002b70 <HAL_DMA_Init+0x158>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d107      	bne.n	8002ae0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 0307 	bic.w	r3, r3, #7
 8002af6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d117      	bne.n	8002b3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00e      	beq.n	8002b3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fa7b 	bl	8003018 <DMA_CheckFifoParam>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2240      	movs	r2, #64	@ 0x40
 8002b2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b36:	2301      	movs	r3, #1
 8002b38:	e016      	b.n	8002b68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa32 	bl	8002fac <DMA_CalcBaseAndBitshift>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	223f      	movs	r2, #63	@ 0x3f
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	e010803f 	.word	0xe010803f

08002b74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b82:	f7ff fe07 	bl	8002794 <HAL_GetTick>
 8002b86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d008      	beq.n	8002ba6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2280      	movs	r2, #128	@ 0x80
 8002b98:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e052      	b.n	8002c4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0216 	bic.w	r2, r2, #22
 8002bb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_DMA_Abort+0x62>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0208 	bic.w	r2, r2, #8
 8002be4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf6:	e013      	b.n	8002c20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf8:	f7ff fdcc 	bl	8002794 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d90c      	bls.n	8002c20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2203      	movs	r2, #3
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e015      	b.n	8002c4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e4      	bne.n	8002bf8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c32:	223f      	movs	r2, #63	@ 0x3f
 8002c34:	409a      	lsls	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d004      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2280      	movs	r2, #128	@ 0x80
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00c      	b.n	8002c8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2205      	movs	r2, #5
 8002c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ca4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee0 <HAL_DMA_IRQHandler+0x248>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a8e      	ldr	r2, [pc, #568]	@ (8002ee4 <HAL_DMA_IRQHandler+0x24c>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0a9b      	lsrs	r3, r3, #10
 8002cb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01a      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0204 	bic.w	r2, r2, #4
 8002cea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d08:	2201      	movs	r2, #1
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d012      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d26:	2201      	movs	r2, #1
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	f043 0202 	orr.w	r2, r3, #2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	2204      	movs	r2, #4
 8002d40:	409a      	lsls	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d012      	beq.n	8002d70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	2210      	movs	r2, #16
 8002d76:	409a      	lsls	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d043      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d03c      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	2210      	movs	r2, #16
 8002d94:	409a      	lsls	r2, r3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d018      	beq.n	8002dda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d108      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d024      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	4798      	blx	r3
 8002dc6:	e01f      	b.n	8002e08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01b      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4798      	blx	r3
 8002dd8:	e016      	b.n	8002e08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d107      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0208 	bic.w	r2, r2, #8
 8002df6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 808f 	beq.w	8002f38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8087 	beq.w	8002f38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	2220      	movs	r2, #32
 8002e30:	409a      	lsls	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d136      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0216 	bic.w	r2, r2, #22
 8002e50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <HAL_DMA_IRQHandler+0x1da>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0208 	bic.w	r2, r2, #8
 8002e80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e86:	223f      	movs	r2, #63	@ 0x3f
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d07e      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
        }
        return;
 8002eae:	e079      	b.n	8002fa4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d01d      	beq.n	8002efa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10d      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d031      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
 8002edc:	e02c      	b.n	8002f38 <HAL_DMA_IRQHandler+0x2a0>
 8002ede:	bf00      	nop
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d023      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
 8002ef8:	e01e      	b.n	8002f38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10f      	bne.n	8002f28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0210 	bic.w	r2, r2, #16
 8002f16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d032      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d022      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2205      	movs	r2, #5
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d307      	bcc.n	8002f80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f2      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x2cc>
 8002f7e:	e000      	b.n	8002f82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
 8002fa2:	e000      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fa4:	bf00      	nop
    }
  }
}
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3b10      	subs	r3, #16
 8002fbc:	4a13      	ldr	r2, [pc, #76]	@ (800300c <DMA_CalcBaseAndBitshift+0x60>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fc6:	4a12      	ldr	r2, [pc, #72]	@ (8003010 <DMA_CalcBaseAndBitshift+0x64>)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d908      	bls.n	8002fec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <DMA_CalcBaseAndBitshift+0x68>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	1d1a      	adds	r2, r3, #4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fea:	e006      	b.n	8002ffa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b08      	ldr	r3, [pc, #32]	@ (8003014 <DMA_CalcBaseAndBitshift+0x68>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	aaaaaaab 	.word	0xaaaaaaab
 8003010:	0800abf0 	.word	0x0800abf0
 8003014:	fffffc00 	.word	0xfffffc00

08003018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11f      	bne.n	8003072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d856      	bhi.n	80030e6 <DMA_CheckFifoParam+0xce>
 8003038:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <DMA_CheckFifoParam+0x28>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003051 	.word	0x08003051
 8003044:	08003063 	.word	0x08003063
 8003048:	08003051 	.word	0x08003051
 800304c:	080030e7 	.word	0x080030e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d046      	beq.n	80030ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003060:	e043      	b.n	80030ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800306a:	d140      	bne.n	80030ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003070:	e03d      	b.n	80030ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307a:	d121      	bne.n	80030c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d837      	bhi.n	80030f2 <DMA_CheckFifoParam+0xda>
 8003082:	a201      	add	r2, pc, #4	@ (adr r2, 8003088 <DMA_CheckFifoParam+0x70>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	08003099 	.word	0x08003099
 800308c:	0800309f 	.word	0x0800309f
 8003090:	08003099 	.word	0x08003099
 8003094:	080030b1 	.word	0x080030b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
      break;
 800309c:	e030      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d025      	beq.n	80030f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ae:	e022      	b.n	80030f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030b8:	d11f      	bne.n	80030fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030be:	e01c      	b.n	80030fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d903      	bls.n	80030ce <DMA_CheckFifoParam+0xb6>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d003      	beq.n	80030d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030cc:	e018      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      break;
 80030d2:	e015      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      break;
 80030e4:	e00b      	b.n	80030fe <DMA_CheckFifoParam+0xe6>
      break;
 80030e6:	bf00      	nop
 80030e8:	e00a      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
 80030ec:	e008      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030ee:	bf00      	nop
 80030f0:	e006      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030f2:	bf00      	nop
 80030f4:	e004      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;   
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	@ 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	e175      	b.n	800341c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003130:	2201      	movs	r2, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	f040 8164 	bne.w	8003416 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d005      	beq.n	8003166 <HAL_GPIO_Init+0x56>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d130      	bne.n	80031c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2203      	movs	r2, #3
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800319c:	2201      	movs	r2, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 0201 	and.w	r2, r3, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d017      	beq.n	8003204 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d123      	bne.n	8003258 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	220f      	movs	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	69b9      	ldr	r1, [r7, #24]
 8003254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0203 	and.w	r2, r3, #3
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80be 	beq.w	8003416 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329a:	4b66      	ldr	r3, [pc, #408]	@ (8003434 <HAL_GPIO_Init+0x324>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	4a65      	ldr	r2, [pc, #404]	@ (8003434 <HAL_GPIO_Init+0x324>)
 80032a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032a6:	4b63      	ldr	r3, [pc, #396]	@ (8003434 <HAL_GPIO_Init+0x324>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032b2:	4a61      	ldr	r2, [pc, #388]	@ (8003438 <HAL_GPIO_Init+0x328>)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	3302      	adds	r3, #2
 80032ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	220f      	movs	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a58      	ldr	r2, [pc, #352]	@ (800343c <HAL_GPIO_Init+0x32c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d037      	beq.n	800334e <HAL_GPIO_Init+0x23e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a57      	ldr	r2, [pc, #348]	@ (8003440 <HAL_GPIO_Init+0x330>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d031      	beq.n	800334a <HAL_GPIO_Init+0x23a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a56      	ldr	r2, [pc, #344]	@ (8003444 <HAL_GPIO_Init+0x334>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d02b      	beq.n	8003346 <HAL_GPIO_Init+0x236>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a55      	ldr	r2, [pc, #340]	@ (8003448 <HAL_GPIO_Init+0x338>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d025      	beq.n	8003342 <HAL_GPIO_Init+0x232>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a54      	ldr	r2, [pc, #336]	@ (800344c <HAL_GPIO_Init+0x33c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01f      	beq.n	800333e <HAL_GPIO_Init+0x22e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a53      	ldr	r2, [pc, #332]	@ (8003450 <HAL_GPIO_Init+0x340>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d019      	beq.n	800333a <HAL_GPIO_Init+0x22a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a52      	ldr	r2, [pc, #328]	@ (8003454 <HAL_GPIO_Init+0x344>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_GPIO_Init+0x226>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a51      	ldr	r2, [pc, #324]	@ (8003458 <HAL_GPIO_Init+0x348>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00d      	beq.n	8003332 <HAL_GPIO_Init+0x222>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a50      	ldr	r2, [pc, #320]	@ (800345c <HAL_GPIO_Init+0x34c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <HAL_GPIO_Init+0x21e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4f      	ldr	r2, [pc, #316]	@ (8003460 <HAL_GPIO_Init+0x350>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_GPIO_Init+0x21a>
 8003326:	2309      	movs	r3, #9
 8003328:	e012      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800332a:	230a      	movs	r3, #10
 800332c:	e010      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800332e:	2308      	movs	r3, #8
 8003330:	e00e      	b.n	8003350 <HAL_GPIO_Init+0x240>
 8003332:	2307      	movs	r3, #7
 8003334:	e00c      	b.n	8003350 <HAL_GPIO_Init+0x240>
 8003336:	2306      	movs	r3, #6
 8003338:	e00a      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800333a:	2305      	movs	r3, #5
 800333c:	e008      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800333e:	2304      	movs	r3, #4
 8003340:	e006      	b.n	8003350 <HAL_GPIO_Init+0x240>
 8003342:	2303      	movs	r3, #3
 8003344:	e004      	b.n	8003350 <HAL_GPIO_Init+0x240>
 8003346:	2302      	movs	r3, #2
 8003348:	e002      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800334e:	2300      	movs	r3, #0
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	f002 0203 	and.w	r2, r2, #3
 8003356:	0092      	lsls	r2, r2, #2
 8003358:	4093      	lsls	r3, r2
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003360:	4935      	ldr	r1, [pc, #212]	@ (8003438 <HAL_GPIO_Init+0x328>)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3302      	adds	r3, #2
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336e:	4b3d      	ldr	r3, [pc, #244]	@ (8003464 <HAL_GPIO_Init+0x354>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003392:	4a34      	ldr	r2, [pc, #208]	@ (8003464 <HAL_GPIO_Init+0x354>)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003398:	4b32      	ldr	r3, [pc, #200]	@ (8003464 <HAL_GPIO_Init+0x354>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033bc:	4a29      	ldr	r2, [pc, #164]	@ (8003464 <HAL_GPIO_Init+0x354>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033c2:	4b28      	ldr	r3, [pc, #160]	@ (8003464 <HAL_GPIO_Init+0x354>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003464 <HAL_GPIO_Init+0x354>)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <HAL_GPIO_Init+0x354>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003410:	4a14      	ldr	r2, [pc, #80]	@ (8003464 <HAL_GPIO_Init+0x354>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3301      	adds	r3, #1
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b0f      	cmp	r3, #15
 8003420:	f67f ae86 	bls.w	8003130 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3724      	adds	r7, #36	@ 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	40013800 	.word	0x40013800
 800343c:	40020000 	.word	0x40020000
 8003440:	40020400 	.word	0x40020400
 8003444:	40020800 	.word	0x40020800
 8003448:	40020c00 	.word	0x40020c00
 800344c:	40021000 	.word	0x40021000
 8003450:	40021400 	.word	0x40021400
 8003454:	40021800 	.word	0x40021800
 8003458:	40021c00 	.word	0x40021c00
 800345c:	40022000 	.word	0x40022000
 8003460:	40022400 	.word	0x40022400
 8003464:	40013c00 	.word	0x40013c00

08003468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
 8003474:	4613      	mov	r3, r2
 8003476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003478:	787b      	ldrb	r3, [r7, #1]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003484:	e003      	b.n	800348e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	041a      	lsls	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	619a      	str	r2, [r3, #24]
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034ac:	887a      	ldrh	r2, [r7, #2]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4013      	ands	r3, r2
 80034b2:	041a      	lsls	r2, r3, #16
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43d9      	mvns	r1, r3
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	400b      	ands	r3, r1
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	619a      	str	r2, [r3, #24]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af02      	add	r7, sp, #8
 80034d4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e108      	b.n	80036f2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff f856 	bl	80025ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2203      	movs	r2, #3
 8003504:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350e:	d102      	bne.n	8003516 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f004 f8ee 	bl	80076fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	7c1a      	ldrb	r2, [r3, #16]
 8003528:	f88d 2000 	strb.w	r2, [sp]
 800352c:	3304      	adds	r3, #4
 800352e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003530:	f004 f88a 	bl	8007648 <USB_CoreInit>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e0d5      	b.n	80036f2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f004 f8e6 	bl	800771e <USB_SetCurrentMode>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0c6      	b.n	80036f2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	e04a      	b.n	8003600 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3315      	adds	r3, #21
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	3314      	adds	r3, #20
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	b298      	uxth	r0, r3
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	332e      	adds	r3, #46	@ 0x2e
 80035a6:	4602      	mov	r2, r0
 80035a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3318      	adds	r3, #24
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	331c      	adds	r3, #28
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3320      	adds	r3, #32
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3324      	adds	r3, #36	@ 0x24
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	3301      	adds	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	791b      	ldrb	r3, [r3, #4]
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	429a      	cmp	r2, r3
 8003608:	d3af      	bcc.n	800356a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
 800360e:	e044      	b.n	800369a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	3301      	adds	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	791b      	ldrb	r3, [r3, #4]
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3b5      	bcc.n	8003610 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7c1a      	ldrb	r2, [r3, #16]
 80036ac:	f88d 2000 	strb.w	r2, [sp]
 80036b0:	3304      	adds	r3, #4
 80036b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b4:	f004 f880 	bl	80077b8 <USB_DevInit>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e013      	b.n	80036f2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7b1b      	ldrb	r3, [r3, #12]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d102      	bne.n	80036e6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f80b 	bl	80036fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f004 fa3b 	bl	8007b66 <USB_DevDisconnect>

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800372a:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <HAL_PCDEx_ActivateLPM+0x44>)
 800372c:	4313      	orrs	r3, r2
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	10000003 	.word	0x10000003

08003744 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003748:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a04      	ldr	r2, [pc, #16]	@ (8003760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800374e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003752:	6013      	str	r3, [r2, #0]
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40007000 	.word	0x40007000

08003764 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	4b23      	ldr	r3, [pc, #140]	@ (80037fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	4a22      	ldr	r2, [pc, #136]	@ (80037fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	@ 0x40
 800377a:	4b20      	ldr	r3, [pc, #128]	@ (80037fc <HAL_PWREx_EnableOverDrive+0x98>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003786:	4b1e      	ldr	r3, [pc, #120]	@ (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1d      	ldr	r2, [pc, #116]	@ (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003790:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003792:	f7fe ffff 	bl	8002794 <HAL_GetTick>
 8003796:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003798:	e009      	b.n	80037ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800379a:	f7fe fffb 	bl	8002794 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037a8:	d901      	bls.n	80037ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e022      	b.n	80037f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037ae:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ba:	d1ee      	bne.n	800379a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037bc:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c8:	f7fe ffe4 	bl	8002794 <HAL_GetTick>
 80037cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037ce:	e009      	b.n	80037e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037d0:	f7fe ffe0 	bl	8002794 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037de:	d901      	bls.n	80037e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e007      	b.n	80037f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037f0:	d1ee      	bne.n	80037d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	40007000 	.word	0x40007000

08003804 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800380c:	2300      	movs	r3, #0
 800380e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e29b      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8087 	beq.w	8003936 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003828:	4b96      	ldr	r3, [pc, #600]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00c      	beq.n	800384e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003834:	4b93      	ldr	r3, [pc, #588]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d112      	bne.n	8003866 <HAL_RCC_OscConfig+0x62>
 8003840:	4b90      	ldr	r3, [pc, #576]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800384c:	d10b      	bne.n	8003866 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d06c      	beq.n	8003934 <HAL_RCC_OscConfig+0x130>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d168      	bne.n	8003934 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e275      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386e:	d106      	bne.n	800387e <HAL_RCC_OscConfig+0x7a>
 8003870:	4b84      	ldr	r3, [pc, #528]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a83      	ldr	r2, [pc, #524]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e02e      	b.n	80038dc <HAL_RCC_OscConfig+0xd8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x9c>
 8003886:	4b7f      	ldr	r3, [pc, #508]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b7c      	ldr	r3, [pc, #496]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7b      	ldr	r2, [pc, #492]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003898:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e01d      	b.n	80038dc <HAL_RCC_OscConfig+0xd8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0xc0>
 80038aa:	4b76      	ldr	r3, [pc, #472]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a75      	ldr	r2, [pc, #468]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b73      	ldr	r3, [pc, #460]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a72      	ldr	r2, [pc, #456]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0xd8>
 80038c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe ff56 	bl	8002794 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fe ff52 	bl	8002794 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	@ 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e229      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b61      	ldr	r3, [pc, #388]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0xe8>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe ff42 	bl	8002794 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe ff3e 	bl	8002794 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	@ 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e215      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	4b57      	ldr	r3, [pc, #348]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x110>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d069      	beq.n	8003a16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003942:	4b50      	ldr	r3, [pc, #320]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b08      	cmp	r3, #8
 8003958:	d11c      	bne.n	8003994 <HAL_RCC_OscConfig+0x190>
 800395a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d116      	bne.n	8003994 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	4b47      	ldr	r3, [pc, #284]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_RCC_OscConfig+0x17a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e1e9      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397e:	4b41      	ldr	r3, [pc, #260]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	493d      	ldr	r1, [pc, #244]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	e040      	b.n	8003a16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d023      	beq.n	80039e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399c:	4b39      	ldr	r3, [pc, #228]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a38      	ldr	r2, [pc, #224]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe fef4 	bl	8002794 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fe fef0 	bl	8002794 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1c7      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b30      	ldr	r3, [pc, #192]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4929      	ldr	r1, [pc, #164]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
 80039e2:	e018      	b.n	8003a16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e4:	4b27      	ldr	r3, [pc, #156]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a26      	ldr	r2, [pc, #152]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fed0 	bl	8002794 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f8:	f7fe fecc 	bl	8002794 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1a3      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d038      	beq.n	8003a94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2a:	4b16      	ldr	r3, [pc, #88]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2e:	4a15      	ldr	r2, [pc, #84]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a36:	f7fe fead 	bl	8002794 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3e:	f7fe fea9 	bl	8002794 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e180      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a50:	4b0c      	ldr	r3, [pc, #48]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x23a>
 8003a5c:	e01a      	b.n	8003a94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a62:	4a08      	ldr	r2, [pc, #32]	@ (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fe93 	bl	8002794 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a72:	f7fe fe8f 	bl	8002794 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d903      	bls.n	8003a88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e166      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
 8003a84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	4b92      	ldr	r3, [pc, #584]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ee      	bne.n	8003a72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a4 	beq.w	8003bea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa2:	4b8c      	ldr	r3, [pc, #560]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10d      	bne.n	8003aca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4b89      	ldr	r3, [pc, #548]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	4a88      	ldr	r2, [pc, #544]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aba:	4b86      	ldr	r3, [pc, #536]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aca:	4b83      	ldr	r3, [pc, #524]	@ (8003cd8 <HAL_RCC_OscConfig+0x4d4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d118      	bne.n	8003b08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ad6:	4b80      	ldr	r3, [pc, #512]	@ (8003cd8 <HAL_RCC_OscConfig+0x4d4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7f      	ldr	r2, [pc, #508]	@ (8003cd8 <HAL_RCC_OscConfig+0x4d4>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fe57 	bl	8002794 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fe fe53 	bl	8002794 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b64      	cmp	r3, #100	@ 0x64
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e12a      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afc:	4b76      	ldr	r3, [pc, #472]	@ (8003cd8 <HAL_RCC_OscConfig+0x4d4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x31a>
 8003b10:	4b70      	ldr	r3, [pc, #448]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	4a6f      	ldr	r2, [pc, #444]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b1c:	e02d      	b.n	8003b7a <HAL_RCC_OscConfig+0x376>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x33c>
 8003b26:	4b6b      	ldr	r3, [pc, #428]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a6a      	ldr	r2, [pc, #424]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	4b68      	ldr	r3, [pc, #416]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a67      	ldr	r2, [pc, #412]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3e:	e01c      	b.n	8003b7a <HAL_RCC_OscConfig+0x376>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	d10c      	bne.n	8003b62 <HAL_RCC_OscConfig+0x35e>
 8003b48:	4b62      	ldr	r3, [pc, #392]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	4a61      	ldr	r2, [pc, #388]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b4e:	f043 0304 	orr.w	r3, r3, #4
 8003b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b54:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b58:	4a5e      	ldr	r2, [pc, #376]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b60:	e00b      	b.n	8003b7a <HAL_RCC_OscConfig+0x376>
 8003b62:	4b5c      	ldr	r3, [pc, #368]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b6e:	4b59      	ldr	r3, [pc, #356]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b72:	4a58      	ldr	r2, [pc, #352]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d015      	beq.n	8003bae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fe fe07 	bl	8002794 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fe fe03 	bl	8002794 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e0d8      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ee      	beq.n	8003b8a <HAL_RCC_OscConfig+0x386>
 8003bac:	e014      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fe fdf1 	bl	8002794 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fe fded 	bl	8002794 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0c2      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bcc:	4b41      	ldr	r3, [pc, #260]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ee      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bde:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	4a3c      	ldr	r2, [pc, #240]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80ae 	beq.w	8003d50 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf4:	4b37      	ldr	r3, [pc, #220]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d06d      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d14b      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c08:	4b32      	ldr	r3, [pc, #200]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a31      	ldr	r2, [pc, #196]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fe fdbe 	bl	8002794 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7fe fdba 	bl	8002794 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e091      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	4b29      	ldr	r3, [pc, #164]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	3b01      	subs	r3, #1
 8003c54:	041b      	lsls	r3, r3, #16
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	491b      	ldr	r1, [pc, #108]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a18      	ldr	r2, [pc, #96]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe fd8c 	bl	8002794 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fe fd88 	bl	8002794 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e05f      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x47c>
 8003c9e:	e057      	b.n	8003d50 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe fd72 	bl	8002794 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe fd6e 	bl	8002794 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e045      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b03      	ldr	r3, [pc, #12]	@ (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x4b0>
 8003cd2:	e03d      	b.n	8003d50 <HAL_RCC_OscConfig+0x54c>
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003d5c <HAL_RCC_OscConfig+0x558>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d030      	beq.n	8003d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d129      	bne.n	8003d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d122      	bne.n	8003d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d119      	bne.n	8003d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	3b01      	subs	r3, #1
 8003d26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d10f      	bne.n	8003d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800

08003d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0d0      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d78:	4b6a      	ldr	r3, [pc, #424]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d910      	bls.n	8003da8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b67      	ldr	r3, [pc, #412]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 020f 	bic.w	r2, r3, #15
 8003d8e:	4965      	ldr	r1, [pc, #404]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b63      	ldr	r3, [pc, #396]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0b8      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d020      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc0:	4b59      	ldr	r3, [pc, #356]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a58      	ldr	r2, [pc, #352]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd8:	4b53      	ldr	r3, [pc, #332]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a52      	ldr	r2, [pc, #328]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003de2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de4:	4b50      	ldr	r3, [pc, #320]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	494d      	ldr	r1, [pc, #308]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d040      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b47      	ldr	r3, [pc, #284]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d115      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e07f      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e22:	4b41      	ldr	r3, [pc, #260]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e073      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e32:	4b3d      	ldr	r3, [pc, #244]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e06b      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e42:	4b39      	ldr	r3, [pc, #228]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f023 0203 	bic.w	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	4936      	ldr	r1, [pc, #216]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e54:	f7fe fc9e 	bl	8002794 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5c:	f7fe fc9a 	bl	8002794 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e053      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	4b2d      	ldr	r3, [pc, #180]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 020c 	and.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d1eb      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e84:	4b27      	ldr	r3, [pc, #156]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d210      	bcs.n	8003eb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 020f 	bic.w	r2, r3, #15
 8003e9a:	4922      	ldr	r1, [pc, #136]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea2:	4b20      	ldr	r3, [pc, #128]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e032      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec0:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4916      	ldr	r1, [pc, #88]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ede:	4b12      	ldr	r3, [pc, #72]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	490e      	ldr	r1, [pc, #56]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ef2:	f000 f821 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c8>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	490a      	ldr	r1, [pc, #40]	@ (8003f2c <HAL_RCC_ClockConfig+0x1cc>)
 8003f04:	5ccb      	ldrb	r3, [r1, r3]
 8003f06:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0a:	4a09      	ldr	r2, [pc, #36]	@ (8003f30 <HAL_RCC_ClockConfig+0x1d0>)
 8003f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f0e:	4b09      	ldr	r3, [pc, #36]	@ (8003f34 <HAL_RCC_ClockConfig+0x1d4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fbfa 	bl	800270c <HAL_InitTick>

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023c00 	.word	0x40023c00
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	0800abd8 	.word	0x0800abd8
 8003f30:	20000000 	.word	0x20000000
 8003f34:	20000004 	.word	0x20000004

08003f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f3c:	b094      	sub	sp, #80	@ 0x50
 8003f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f44:	2300      	movs	r3, #0
 8003f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f48:	2300      	movs	r3, #0
 8003f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f50:	4b79      	ldr	r3, [pc, #484]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d00d      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x40>
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	f200 80e1 	bhi.w	8004124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x34>
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d003      	beq.n	8003f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f6a:	e0db      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4b73      	ldr	r3, [pc, #460]	@ (800413c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f70:	e0db      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f72:	4b73      	ldr	r3, [pc, #460]	@ (8004140 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f76:	e0d8      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f78:	4b6f      	ldr	r3, [pc, #444]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f82:	4b6d      	ldr	r3, [pc, #436]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d063      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	099b      	lsrs	r3, r3, #6
 8003f94:	2200      	movs	r2, #0
 8003f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003faa:	4622      	mov	r2, r4
 8003fac:	462b      	mov	r3, r5
 8003fae:	f04f 0000 	mov.w	r0, #0
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	0159      	lsls	r1, r3, #5
 8003fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fbc:	0150      	lsls	r0, r2, #5
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	1a51      	subs	r1, r2, r1
 8003fc6:	6139      	str	r1, [r7, #16]
 8003fc8:	4629      	mov	r1, r5
 8003fca:	eb63 0301 	sbc.w	r3, r3, r1
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fdc:	4659      	mov	r1, fp
 8003fde:	018b      	lsls	r3, r1, #6
 8003fe0:	4651      	mov	r1, sl
 8003fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	018a      	lsls	r2, r1, #6
 8003fea:	4651      	mov	r1, sl
 8003fec:	ebb2 0801 	subs.w	r8, r2, r1
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800400a:	4690      	mov	r8, r2
 800400c:	4699      	mov	r9, r3
 800400e:	4623      	mov	r3, r4
 8004010:	eb18 0303 	adds.w	r3, r8, r3
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	462b      	mov	r3, r5
 8004018:	eb49 0303 	adc.w	r3, r9, r3
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800402a:	4629      	mov	r1, r5
 800402c:	024b      	lsls	r3, r1, #9
 800402e:	4621      	mov	r1, r4
 8004030:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004034:	4621      	mov	r1, r4
 8004036:	024a      	lsls	r2, r1, #9
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403e:	2200      	movs	r2, #0
 8004040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004048:	f7fc f90c 	bl	8000264 <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4613      	mov	r3, r2
 8004052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004054:	e058      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004056:	4b38      	ldr	r3, [pc, #224]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	099b      	lsrs	r3, r3, #6
 800405c:	2200      	movs	r2, #0
 800405e:	4618      	mov	r0, r3
 8004060:	4611      	mov	r1, r2
 8004062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004066:	623b      	str	r3, [r7, #32]
 8004068:	2300      	movs	r3, #0
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
 800406c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	f04f 0000 	mov.w	r0, #0
 8004078:	f04f 0100 	mov.w	r1, #0
 800407c:	0159      	lsls	r1, r3, #5
 800407e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004082:	0150      	lsls	r0, r2, #5
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4641      	mov	r1, r8
 800408a:	ebb2 0a01 	subs.w	sl, r2, r1
 800408e:	4649      	mov	r1, r9
 8004090:	eb63 0b01 	sbc.w	fp, r3, r1
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040a8:	ebb2 040a 	subs.w	r4, r2, sl
 80040ac:	eb63 050b 	sbc.w	r5, r3, fp
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	00eb      	lsls	r3, r5, #3
 80040ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040be:	00e2      	lsls	r2, r4, #3
 80040c0:	4614      	mov	r4, r2
 80040c2:	461d      	mov	r5, r3
 80040c4:	4643      	mov	r3, r8
 80040c6:	18e3      	adds	r3, r4, r3
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	464b      	mov	r3, r9
 80040cc:	eb45 0303 	adc.w	r3, r5, r3
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040de:	4629      	mov	r1, r5
 80040e0:	028b      	lsls	r3, r1, #10
 80040e2:	4621      	mov	r1, r4
 80040e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e8:	4621      	mov	r1, r4
 80040ea:	028a      	lsls	r2, r1, #10
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040f2:	2200      	movs	r2, #0
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	61fa      	str	r2, [r7, #28]
 80040f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040fc:	f7fc f8b2 	bl	8000264 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4613      	mov	r3, r2
 8004106:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <HAL_RCC_GetSysClockFreq+0x200>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	3301      	adds	r3, #1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800411a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004122:	e002      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004124:	4b05      	ldr	r3, [pc, #20]	@ (800413c <HAL_RCC_GetSysClockFreq+0x204>)
 8004126:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800412a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800412c:	4618      	mov	r0, r3
 800412e:	3750      	adds	r7, #80	@ 0x50
 8004130:	46bd      	mov	sp, r7
 8004132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	00f42400 	.word	0x00f42400
 8004140:	007a1200 	.word	0x007a1200

08004144 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004148:	4b03      	ldr	r3, [pc, #12]	@ (8004158 <HAL_RCC_GetHCLKFreq+0x14>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000000 	.word	0x20000000

0800415c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004160:	f7ff fff0 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8004164:	4602      	mov	r2, r0
 8004166:	4b05      	ldr	r3, [pc, #20]	@ (800417c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	0a9b      	lsrs	r3, r3, #10
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	4903      	ldr	r1, [pc, #12]	@ (8004180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004172:	5ccb      	ldrb	r3, [r1, r3]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40023800 	.word	0x40023800
 8004180:	0800abe8 	.word	0x0800abe8

08004184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004188:	f7ff ffdc 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0b5b      	lsrs	r3, r3, #13
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4903      	ldr	r1, [pc, #12]	@ (80041a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40023800 	.word	0x40023800
 80041a8:	0800abe8 	.word	0x0800abe8

080041ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d012      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041d4:	4b69      	ldr	r3, [pc, #420]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a68      	ldr	r2, [pc, #416]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80041de:	6093      	str	r3, [r2, #8]
 80041e0:	4b66      	ldr	r3, [pc, #408]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e8:	4964      	ldr	r1, [pc, #400]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d017      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004206:	4b5d      	ldr	r3, [pc, #372]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800420c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004214:	4959      	ldr	r1, [pc, #356]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004224:	d101      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004226:	2301      	movs	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004242:	4b4e      	ldr	r3, [pc, #312]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004248:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	494a      	ldr	r1, [pc, #296]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004260:	d101      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004262:	2301      	movs	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800427e:	2301      	movs	r3, #1
 8004280:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 808b 	beq.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004290:	4b3a      	ldr	r3, [pc, #232]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	4a39      	ldr	r2, [pc, #228]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429a:	6413      	str	r3, [r2, #64]	@ 0x40
 800429c:	4b37      	ldr	r3, [pc, #220]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042a8:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a34      	ldr	r2, [pc, #208]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b4:	f7fe fa6e 	bl	8002794 <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042bc:	f7fe fa6a 	bl	8002794 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	@ 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e38f      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042da:	4b28      	ldr	r3, [pc, #160]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d035      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d02e      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f8:	4b20      	ldr	r3, [pc, #128]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004300:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004302:	4b1e      	ldr	r3, [pc, #120]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004306:	4a1d      	ldr	r2, [pc, #116]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800430e:	4b1b      	ldr	r3, [pc, #108]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004312:	4a1a      	ldr	r2, [pc, #104]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004318:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800431a:	4a18      	ldr	r2, [pc, #96]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004320:	4b16      	ldr	r3, [pc, #88]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d114      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fe fa32 	bl	8002794 <HAL_GetTick>
 8004330:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004332:	e00a      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fe fa2e 	bl	8002794 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e351      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434a:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ee      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800435e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004362:	d111      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004364:	4b05      	ldr	r3, [pc, #20]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004370:	4b04      	ldr	r3, [pc, #16]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004372:	400b      	ands	r3, r1
 8004374:	4901      	ldr	r1, [pc, #4]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
 800437a:	e00b      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800437c:	40023800 	.word	0x40023800
 8004380:	40007000 	.word	0x40007000
 8004384:	0ffffcff 	.word	0x0ffffcff
 8004388:	4bac      	ldr	r3, [pc, #688]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4aab      	ldr	r2, [pc, #684]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004392:	6093      	str	r3, [r2, #8]
 8004394:	4ba9      	ldr	r3, [pc, #676]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004396:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a0:	49a6      	ldr	r1, [pc, #664]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043b2:	4ba2      	ldr	r3, [pc, #648]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b8:	4aa0      	ldr	r2, [pc, #640]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80043c2:	4b9e      	ldr	r3, [pc, #632]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	499b      	ldr	r1, [pc, #620]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043e0:	4b96      	ldr	r3, [pc, #600]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ee:	4993      	ldr	r1, [pc, #588]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004402:	4b8e      	ldr	r3, [pc, #568]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004408:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004410:	498a      	ldr	r1, [pc, #552]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004424:	4b85      	ldr	r3, [pc, #532]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004432:	4982      	ldr	r1, [pc, #520]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004446:	4b7d      	ldr	r3, [pc, #500]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004454:	4979      	ldr	r1, [pc, #484]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004468:	4b74      	ldr	r3, [pc, #464]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	f023 0203 	bic.w	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	4971      	ldr	r1, [pc, #452]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800448a:	4b6c      	ldr	r3, [pc, #432]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004490:	f023 020c 	bic.w	r2, r3, #12
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004498:	4968      	ldr	r1, [pc, #416]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ac:	4b63      	ldr	r3, [pc, #396]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ba:	4960      	ldr	r1, [pc, #384]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044ce:	4b5b      	ldr	r3, [pc, #364]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044dc:	4957      	ldr	r1, [pc, #348]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044f0:	4b52      	ldr	r3, [pc, #328]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fe:	494f      	ldr	r1, [pc, #316]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004512:	4b4a      	ldr	r3, [pc, #296]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004518:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004520:	4946      	ldr	r1, [pc, #280]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004534:	4b41      	ldr	r3, [pc, #260]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004542:	493e      	ldr	r1, [pc, #248]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004556:	4b39      	ldr	r3, [pc, #228]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004564:	4935      	ldr	r1, [pc, #212]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004578:	4b30      	ldr	r3, [pc, #192]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004586:	492d      	ldr	r1, [pc, #180]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d011      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800459a:	4b28      	ldr	r3, [pc, #160]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a8:	4924      	ldr	r1, [pc, #144]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045b8:	d101      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045da:	4b18      	ldr	r3, [pc, #96]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e8:	4914      	ldr	r1, [pc, #80]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045fc:	4b0f      	ldr	r3, [pc, #60]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004602:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800460c:	490b      	ldr	r1, [pc, #44]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00f      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004626:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004630:	4902      	ldr	r1, [pc, #8]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004638:	e002      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800464c:	4b8a      	ldr	r3, [pc, #552]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004652:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465c:	4986      	ldr	r1, [pc, #536]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004670:	4b81      	ldr	r3, [pc, #516]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004676:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004680:	497d      	ldr	r1, [pc, #500]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d006      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80d6 	beq.w	8004848 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800469c:	4b76      	ldr	r3, [pc, #472]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a75      	ldr	r2, [pc, #468]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a8:	f7fe f874 	bl	8002794 <HAL_GetTick>
 80046ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046b0:	f7fe f870 	bl	8002794 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	@ 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e195      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d021      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11d      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046e2:	4b65      	ldr	r3, [pc, #404]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046f0:	4b61      	ldr	r3, [pc, #388]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046f6:	0e1b      	lsrs	r3, r3, #24
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	019a      	lsls	r2, r3, #6
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	071b      	lsls	r3, r3, #28
 8004716:	4958      	ldr	r1, [pc, #352]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02e      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004748:	d129      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800474a:	4b4b      	ldr	r3, [pc, #300]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800474c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004758:	4b47      	ldr	r3, [pc, #284]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800475e:	0f1b      	lsrs	r3, r3, #28
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	019a      	lsls	r2, r3, #6
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	071b      	lsls	r3, r3, #28
 800477e:	493e      	ldr	r1, [pc, #248]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004786:	4b3c      	ldr	r3, [pc, #240]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800478c:	f023 021f 	bic.w	r2, r3, #31
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	3b01      	subs	r3, #1
 8004796:	4938      	ldr	r1, [pc, #224]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01d      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047aa:	4b33      	ldr	r3, [pc, #204]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b0:	0e1b      	lsrs	r3, r3, #24
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047be:	0f1b      	lsrs	r3, r3, #28
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	019a      	lsls	r2, r3, #6
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	431a      	orrs	r2, r3
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	061b      	lsls	r3, r3, #24
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	071b      	lsls	r3, r3, #28
 80047de:	4926      	ldr	r1, [pc, #152]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	019a      	lsls	r2, r3, #6
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	061b      	lsls	r3, r3, #24
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	491a      	ldr	r1, [pc, #104]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004816:	4b18      	ldr	r3, [pc, #96]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a17      	ldr	r2, [pc, #92]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004822:	f7fd ffb7 	bl	8002794 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800482a:	f7fd ffb3 	bl	8002794 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b64      	cmp	r3, #100	@ 0x64
 8004836:	d901      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e0d8      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800483c:	4b0e      	ldr	r3, [pc, #56]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2b01      	cmp	r3, #1
 800484c:	f040 80ce 	bne.w	80049ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004850:	4b09      	ldr	r3, [pc, #36]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a08      	ldr	r2, [pc, #32]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800485a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485c:	f7fd ff9a 	bl	8002794 <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004862:	e00b      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004864:	f7fd ff96 	bl	8002794 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	@ 0x64
 8004870:	d904      	bls.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e0bb      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800487c:	4b5e      	ldr	r3, [pc, #376]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004888:	d0ec      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d02e      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d12a      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048b2:	4b51      	ldr	r3, [pc, #324]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	0c1b      	lsrs	r3, r3, #16
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048c0:	4b4d      	ldr	r3, [pc, #308]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c6:	0f1b      	lsrs	r3, r3, #28
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	019a      	lsls	r2, r3, #6
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	061b      	lsls	r3, r3, #24
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	4944      	ldr	r1, [pc, #272]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048ee:	4b42      	ldr	r3, [pc, #264]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fc:	3b01      	subs	r3, #1
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	493d      	ldr	r1, [pc, #244]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d022      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800491c:	d11d      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800491e:	4b36      	ldr	r3, [pc, #216]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004924:	0e1b      	lsrs	r3, r3, #24
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800492c:	4b32      	ldr	r3, [pc, #200]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004932:	0f1b      	lsrs	r3, r3, #28
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	019a      	lsls	r2, r3, #6
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	431a      	orrs	r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	071b      	lsls	r3, r3, #28
 8004952:	4929      	ldr	r1, [pc, #164]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d028      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004966:	4b24      	ldr	r3, [pc, #144]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	0e1b      	lsrs	r3, r3, #24
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004974:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	019a      	lsls	r2, r3, #6
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	431a      	orrs	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	071b      	lsls	r3, r3, #28
 800499a:	4917      	ldr	r1, [pc, #92]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049a2:	4b15      	ldr	r3, [pc, #84]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	4911      	ldr	r1, [pc, #68]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049b8:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0e      	ldr	r2, [pc, #56]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c4:	f7fd fee6 	bl	8002794 <HAL_GetTick>
 80049c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049cc:	f7fd fee2 	bl	8002794 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	@ 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e007      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049de:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049ea:	d1ef      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800

080049fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e049      	b.n	8004aa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd fb58 	bl	80020d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f000 fecc 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d001      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e054      	b.n	8004b6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a26      	ldr	r2, [pc, #152]	@ (8004b7c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d022      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x80>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aee:	d01d      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x80>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a22      	ldr	r2, [pc, #136]	@ (8004b80 <HAL_TIM_Base_Start_IT+0xd4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d018      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x80>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a21      	ldr	r2, [pc, #132]	@ (8004b84 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d013      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x80>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1f      	ldr	r2, [pc, #124]	@ (8004b88 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00e      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x80>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1e      	ldr	r2, [pc, #120]	@ (8004b8c <HAL_TIM_Base_Start_IT+0xe0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d009      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x80>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b90 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x80>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1b      	ldr	r2, [pc, #108]	@ (8004b94 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d115      	bne.n	8004b58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	4b19      	ldr	r3, [pc, #100]	@ (8004b98 <HAL_TIM_Base_Start_IT+0xec>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b06      	cmp	r3, #6
 8004b3c:	d015      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0xbe>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b44:	d011      	beq.n	8004b6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b56:	e008      	b.n	8004b6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e000      	b.n	8004b6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800
 8004b88:	40000c00 	.word	0x40000c00
 8004b8c:	40010400 	.word	0x40010400
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40001800 	.word	0x40001800
 8004b98:	00010007 	.word	0x00010007

08004b9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6a1a      	ldr	r2, [r3, #32]
 8004bba:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10f      	bne.n	8004be4 <HAL_TIM_Base_Stop_IT+0x48>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a1a      	ldr	r2, [r3, #32]
 8004bca:	f240 4344 	movw	r3, #1092	@ 0x444
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d107      	bne.n	8004be4 <HAL_TIM_Base_Stop_IT+0x48>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e049      	b.n	8004ca0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fd f9fd 	bl	8002020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 fdcd 	bl	80057d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <HAL_TIM_PWM_Start+0x24>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e03c      	b.n	8004d46 <HAL_TIM_PWM_Start+0x9e>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d109      	bne.n	8004ce6 <HAL_TIM_PWM_Start+0x3e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	bf14      	ite	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	2300      	moveq	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	e02f      	b.n	8004d46 <HAL_TIM_PWM_Start+0x9e>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d109      	bne.n	8004d00 <HAL_TIM_PWM_Start+0x58>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e022      	b.n	8004d46 <HAL_TIM_PWM_Start+0x9e>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d109      	bne.n	8004d1a <HAL_TIM_PWM_Start+0x72>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	bf14      	ite	ne
 8004d12:	2301      	movne	r3, #1
 8004d14:	2300      	moveq	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	e015      	b.n	8004d46 <HAL_TIM_PWM_Start+0x9e>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d109      	bne.n	8004d34 <HAL_TIM_PWM_Start+0x8c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e008      	b.n	8004d46 <HAL_TIM_PWM_Start+0x9e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e092      	b.n	8004e74 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start+0xb6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d5c:	e023      	b.n	8004da6 <HAL_TIM_PWM_Start+0xfe>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_PWM_Start+0xc6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d6c:	e01b      	b.n	8004da6 <HAL_TIM_PWM_Start+0xfe>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_PWM_Start+0xd6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d7c:	e013      	b.n	8004da6 <HAL_TIM_PWM_Start+0xfe>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b0c      	cmp	r3, #12
 8004d82:	d104      	bne.n	8004d8e <HAL_TIM_PWM_Start+0xe6>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d8c:	e00b      	b.n	8004da6 <HAL_TIM_PWM_Start+0xfe>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d104      	bne.n	8004d9e <HAL_TIM_PWM_Start+0xf6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d9c:	e003      	b.n	8004da6 <HAL_TIM_PWM_Start+0xfe>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2201      	movs	r2, #1
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 f81c 	bl	8005dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a30      	ldr	r2, [pc, #192]	@ (8004e7c <HAL_TIM_PWM_Start+0x1d4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_TIM_PWM_Start+0x120>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e80 <HAL_TIM_PWM_Start+0x1d8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIM_PWM_Start+0x124>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_TIM_PWM_Start+0x126>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a25      	ldr	r2, [pc, #148]	@ (8004e7c <HAL_TIM_PWM_Start+0x1d4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d022      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x18a>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df4:	d01d      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x18a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a22      	ldr	r2, [pc, #136]	@ (8004e84 <HAL_TIM_PWM_Start+0x1dc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d018      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x18a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a20      	ldr	r2, [pc, #128]	@ (8004e88 <HAL_TIM_PWM_Start+0x1e0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x18a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <HAL_TIM_PWM_Start+0x1e4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00e      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x18a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a19      	ldr	r2, [pc, #100]	@ (8004e80 <HAL_TIM_PWM_Start+0x1d8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x18a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1b      	ldr	r2, [pc, #108]	@ (8004e90 <HAL_TIM_PWM_Start+0x1e8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x18a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <HAL_TIM_PWM_Start+0x1ec>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d115      	bne.n	8004e5e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	4b17      	ldr	r3, [pc, #92]	@ (8004e98 <HAL_TIM_PWM_Start+0x1f0>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b06      	cmp	r3, #6
 8004e42:	d015      	beq.n	8004e70 <HAL_TIM_PWM_Start+0x1c8>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e4a:	d011      	beq.n	8004e70 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5c:	e008      	b.n	8004e70 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0201 	orr.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e000      	b.n	8004e72 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40010400 	.word	0x40010400
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40001800 	.word	0x40001800
 8004e98:	00010007 	.word	0x00010007

08004e9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	6839      	ldr	r1, [r7, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 ff9c 	bl	8005dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a36      	ldr	r2, [pc, #216]	@ (8004f94 <HAL_TIM_PWM_Stop+0xf8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_TIM_PWM_Stop+0x2c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a35      	ldr	r2, [pc, #212]	@ (8004f98 <HAL_TIM_PWM_Stop+0xfc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIM_PWM_Stop+0x30>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_TIM_PWM_Stop+0x32>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d017      	beq.n	8004f02 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10f      	bne.n	8004f02 <HAL_TIM_PWM_Stop+0x66>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a1a      	ldr	r2, [r3, #32]
 8004ee8:	f240 4344 	movw	r3, #1092	@ 0x444
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d107      	bne.n	8004f02 <HAL_TIM_PWM_Stop+0x66>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a1a      	ldr	r2, [r3, #32]
 8004f08:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <HAL_TIM_PWM_Stop+0x96>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_PWM_Stop+0x96>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <HAL_TIM_PWM_Stop+0xa6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f40:	e023      	b.n	8004f8a <HAL_TIM_PWM_Stop+0xee>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d104      	bne.n	8004f52 <HAL_TIM_PWM_Stop+0xb6>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f50:	e01b      	b.n	8004f8a <HAL_TIM_PWM_Stop+0xee>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d104      	bne.n	8004f62 <HAL_TIM_PWM_Stop+0xc6>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f60:	e013      	b.n	8004f8a <HAL_TIM_PWM_Stop+0xee>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	d104      	bne.n	8004f72 <HAL_TIM_PWM_Stop+0xd6>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f70:	e00b      	b.n	8004f8a <HAL_TIM_PWM_Stop+0xee>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d104      	bne.n	8004f82 <HAL_TIM_PWM_Stop+0xe6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f80:	e003      	b.n	8004f8a <HAL_TIM_PWM_Stop+0xee>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40010400 	.word	0x40010400

08004f9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e08f      	b.n	80050d0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fc fee1 	bl	8001d8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6899      	ldr	r1, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80050d8 <HAL_TIM_Encoder_Init+0x13c>)
 8004fde:	400b      	ands	r3, r1
 8004fe0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f000 fbf3 	bl	80057d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4b31      	ldr	r3, [pc, #196]	@ (80050dc <HAL_TIM_Encoder_Init+0x140>)
 8005018:	4013      	ands	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	4313      	orrs	r3, r2
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4b2b      	ldr	r3, [pc, #172]	@ (80050e0 <HAL_TIM_Encoder_Init+0x144>)
 8005032:	4013      	ands	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4b2a      	ldr	r3, [pc, #168]	@ (80050e4 <HAL_TIM_Encoder_Init+0x148>)
 800503a:	4013      	ands	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	4313      	orrs	r3, r2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	011a      	lsls	r2, r3, #4
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	031b      	lsls	r3, r3, #12
 800505c:	4313      	orrs	r3, r2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005072:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	4313      	orrs	r3, r2
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	fffebff8 	.word	0xfffebff8
 80050dc:	fffffcfc 	.word	0xfffffcfc
 80050e0:	fffff3f3 	.word	0xfffff3f3
 80050e4:	ffff0f0f 	.word	0xffff0f0f

080050e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005100:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005108:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005110:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d110      	bne.n	800513a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d102      	bne.n	8005124 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800511e:	7b7b      	ldrb	r3, [r7, #13]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d001      	beq.n	8005128 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e069      	b.n	80051fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005138:	e031      	b.n	800519e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d110      	bne.n	8005162 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d102      	bne.n	800514c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005146:	7b3b      	ldrb	r3, [r7, #12]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d001      	beq.n	8005150 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e055      	b.n	80051fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005160:	e01d      	b.n	800519e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d108      	bne.n	800517a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005168:	7bbb      	ldrb	r3, [r7, #14]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800516e:	7b7b      	ldrb	r3, [r7, #13]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005174:	7b3b      	ldrb	r3, [r7, #12]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d001      	beq.n	800517e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e03e      	b.n	80051fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_TIM_Encoder_Start+0xc4>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d008      	beq.n	80051bc <HAL_TIM_Encoder_Start+0xd4>
 80051aa:	e00f      	b.n	80051cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2201      	movs	r2, #1
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fe19 	bl	8005dec <TIM_CCxChannelCmd>
      break;
 80051ba:	e016      	b.n	80051ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2201      	movs	r2, #1
 80051c2:	2104      	movs	r1, #4
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fe11 	bl	8005dec <TIM_CCxChannelCmd>
      break;
 80051ca:	e00e      	b.n	80051ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fe09 	bl	8005dec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2201      	movs	r2, #1
 80051e0:	2104      	movs	r1, #4
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fe02 	bl	8005dec <TIM_CCxChannelCmd>
      break;
 80051e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0201 	orr.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_TIM_Encoder_Stop+0x18>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b04      	cmp	r3, #4
 8005218:	d008      	beq.n	800522c <HAL_TIM_Encoder_Stop+0x28>
 800521a:	e00f      	b.n	800523c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2200      	movs	r2, #0
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fde1 	bl	8005dec <TIM_CCxChannelCmd>
      break;
 800522a:	e016      	b.n	800525a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2200      	movs	r2, #0
 8005232:	2104      	movs	r1, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fdd9 	bl	8005dec <TIM_CCxChannelCmd>
      break;
 800523a:	e00e      	b.n	800525a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2200      	movs	r2, #0
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fdd1 	bl	8005dec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	2104      	movs	r1, #4
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fdca 	bl	8005dec <TIM_CCxChannelCmd>
      break;
 8005258:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <HAL_TIM_Encoder_Stop+0x86>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	f240 4344 	movw	r3, #1092	@ 0x444
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d107      	bne.n	800528a <HAL_TIM_Encoder_Stop+0x86>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_TIM_Encoder_Stop+0x92>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b04      	cmp	r3, #4
 8005294:	d148      	bne.n	8005328 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_Encoder_Stop+0xa2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052a4:	e023      	b.n	80052ee <HAL_TIM_Encoder_Stop+0xea>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_Encoder_Stop+0xb2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052b4:	e01b      	b.n	80052ee <HAL_TIM_Encoder_Stop+0xea>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_Encoder_Stop+0xc2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052c4:	e013      	b.n	80052ee <HAL_TIM_Encoder_Stop+0xea>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b0c      	cmp	r3, #12
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_Encoder_Stop+0xd2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052d4:	e00b      	b.n	80052ee <HAL_TIM_Encoder_Stop+0xea>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d104      	bne.n	80052e6 <HAL_TIM_Encoder_Stop+0xe2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052e4:	e003      	b.n	80052ee <HAL_TIM_Encoder_Stop+0xea>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_Encoder_Stop+0xfa>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052fc:	e024      	b.n	8005348 <HAL_TIM_Encoder_Stop+0x144>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b04      	cmp	r3, #4
 8005302:	d104      	bne.n	800530e <HAL_TIM_Encoder_Stop+0x10a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800530c:	e01c      	b.n	8005348 <HAL_TIM_Encoder_Stop+0x144>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d104      	bne.n	800531e <HAL_TIM_Encoder_Stop+0x11a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800531c:	e014      	b.n	8005348 <HAL_TIM_Encoder_Stop+0x144>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8005326:	e00f      	b.n	8005348 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d020      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01b      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0202 	mvn.w	r2, #2
 8005386:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f9fd 	bl	800579c <HAL_TIM_IC_CaptureCallback>
 80053a2:	e005      	b.n	80053b0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f9ef 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa00 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01b      	beq.n	8005402 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f06f 0204 	mvn.w	r2, #4
 80053d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f9d7 	bl	800579c <HAL_TIM_IC_CaptureCallback>
 80053ee:	e005      	b.n	80053fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f9c9 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f9da 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d020      	beq.n	800544e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01b      	beq.n	800544e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f06f 0208 	mvn.w	r2, #8
 800541e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2204      	movs	r2, #4
 8005424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9b1 	bl	800579c <HAL_TIM_IC_CaptureCallback>
 800543a:	e005      	b.n	8005448 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f9a3 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f9b4 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01b      	beq.n	800549a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f06f 0210 	mvn.w	r2, #16
 800546a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2208      	movs	r2, #8
 8005470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f98b 	bl	800579c <HAL_TIM_IC_CaptureCallback>
 8005486:	e005      	b.n	8005494 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f97d 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f98e 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00c      	beq.n	80054be <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f06f 0201 	mvn.w	r2, #1
 80054b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fb fd37 	bl	8000f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00c      	beq.n	80054ec <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fd3e 	bl	8005f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00c      	beq.n	8005510 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fd36 	bl	8005f7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00c      	beq.n	8005534 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800552c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f948 	bl	80057c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00c      	beq.n	8005558 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d007      	beq.n	8005558 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0220 	mvn.w	r2, #32
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fcfe 	bl	8005f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800557a:	2302      	movs	r3, #2
 800557c:	e0ff      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b14      	cmp	r3, #20
 800558a:	f200 80f0 	bhi.w	800576e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800558e:	a201      	add	r2, pc, #4	@ (adr r2, 8005594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055e9 	.word	0x080055e9
 8005598:	0800576f 	.word	0x0800576f
 800559c:	0800576f 	.word	0x0800576f
 80055a0:	0800576f 	.word	0x0800576f
 80055a4:	08005629 	.word	0x08005629
 80055a8:	0800576f 	.word	0x0800576f
 80055ac:	0800576f 	.word	0x0800576f
 80055b0:	0800576f 	.word	0x0800576f
 80055b4:	0800566b 	.word	0x0800566b
 80055b8:	0800576f 	.word	0x0800576f
 80055bc:	0800576f 	.word	0x0800576f
 80055c0:	0800576f 	.word	0x0800576f
 80055c4:	080056ab 	.word	0x080056ab
 80055c8:	0800576f 	.word	0x0800576f
 80055cc:	0800576f 	.word	0x0800576f
 80055d0:	0800576f 	.word	0x0800576f
 80055d4:	080056ed 	.word	0x080056ed
 80055d8:	0800576f 	.word	0x0800576f
 80055dc:	0800576f 	.word	0x0800576f
 80055e0:	0800576f 	.word	0x0800576f
 80055e4:	0800572d 	.word	0x0800572d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f99e 	bl	8005930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0208 	orr.w	r2, r2, #8
 8005602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0204 	bic.w	r2, r2, #4
 8005612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6999      	ldr	r1, [r3, #24]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	619a      	str	r2, [r3, #24]
      break;
 8005626:	e0a5      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f9f0 	bl	8005a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6999      	ldr	r1, [r3, #24]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	021a      	lsls	r2, r3, #8
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	619a      	str	r2, [r3, #24]
      break;
 8005668:	e084      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fa47 	bl	8005b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0208 	orr.w	r2, r2, #8
 8005684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0204 	bic.w	r2, r2, #4
 8005694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69d9      	ldr	r1, [r3, #28]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	61da      	str	r2, [r3, #28]
      break;
 80056a8:	e064      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fa9d 	bl	8005bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69d9      	ldr	r1, [r3, #28]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	021a      	lsls	r2, r3, #8
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	61da      	str	r2, [r3, #28]
      break;
 80056ea:	e043      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fad4 	bl	8005ca0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0208 	orr.w	r2, r2, #8
 8005706:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0204 	bic.w	r2, r2, #4
 8005716:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800572a:	e023      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fb06 	bl	8005d44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005746:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005756:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	021a      	lsls	r2, r3, #8
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800576c:	e002      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	75fb      	strb	r3, [r7, #23]
      break;
 8005772:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop

08005788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a46      	ldr	r2, [pc, #280]	@ (8005904 <TIM_Base_SetConfig+0x12c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d013      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f6:	d00f      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a43      	ldr	r2, [pc, #268]	@ (8005908 <TIM_Base_SetConfig+0x130>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00b      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a42      	ldr	r2, [pc, #264]	@ (800590c <TIM_Base_SetConfig+0x134>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d007      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a41      	ldr	r2, [pc, #260]	@ (8005910 <TIM_Base_SetConfig+0x138>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a40      	ldr	r2, [pc, #256]	@ (8005914 <TIM_Base_SetConfig+0x13c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d108      	bne.n	800582a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a35      	ldr	r2, [pc, #212]	@ (8005904 <TIM_Base_SetConfig+0x12c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d02b      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005838:	d027      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a32      	ldr	r2, [pc, #200]	@ (8005908 <TIM_Base_SetConfig+0x130>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d023      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a31      	ldr	r2, [pc, #196]	@ (800590c <TIM_Base_SetConfig+0x134>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01f      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a30      	ldr	r2, [pc, #192]	@ (8005910 <TIM_Base_SetConfig+0x138>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01b      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2f      	ldr	r2, [pc, #188]	@ (8005914 <TIM_Base_SetConfig+0x13c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d017      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2e      	ldr	r2, [pc, #184]	@ (8005918 <TIM_Base_SetConfig+0x140>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2d      	ldr	r2, [pc, #180]	@ (800591c <TIM_Base_SetConfig+0x144>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00f      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2c      	ldr	r2, [pc, #176]	@ (8005920 <TIM_Base_SetConfig+0x148>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00b      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2b      	ldr	r2, [pc, #172]	@ (8005924 <TIM_Base_SetConfig+0x14c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2a      	ldr	r2, [pc, #168]	@ (8005928 <TIM_Base_SetConfig+0x150>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a29      	ldr	r2, [pc, #164]	@ (800592c <TIM_Base_SetConfig+0x154>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d108      	bne.n	800589c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a10      	ldr	r2, [pc, #64]	@ (8005904 <TIM_Base_SetConfig+0x12c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0xf8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a12      	ldr	r2, [pc, #72]	@ (8005914 <TIM_Base_SetConfig+0x13c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d103      	bne.n	80058d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d105      	bne.n	80058f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f023 0201 	bic.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	611a      	str	r2, [r3, #16]
  }
}
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40010000 	.word	0x40010000
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40000c00 	.word	0x40000c00
 8005914:	40010400 	.word	0x40010400
 8005918:	40014000 	.word	0x40014000
 800591c:	40014400 	.word	0x40014400
 8005920:	40014800 	.word	0x40014800
 8005924:	40001800 	.word	0x40001800
 8005928:	40001c00 	.word	0x40001c00
 800592c:	40002000 	.word	0x40002000

08005930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f023 0201 	bic.w	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4b2b      	ldr	r3, [pc, #172]	@ (8005a08 <TIM_OC1_SetConfig+0xd8>)
 800595c:	4013      	ands	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f023 0302 	bic.w	r3, r3, #2
 8005978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a21      	ldr	r2, [pc, #132]	@ (8005a0c <TIM_OC1_SetConfig+0xdc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC1_SetConfig+0x64>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a20      	ldr	r2, [pc, #128]	@ (8005a10 <TIM_OC1_SetConfig+0xe0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10c      	bne.n	80059ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0308 	bic.w	r3, r3, #8
 800599a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f023 0304 	bic.w	r3, r3, #4
 80059ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a16      	ldr	r2, [pc, #88]	@ (8005a0c <TIM_OC1_SetConfig+0xdc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d003      	beq.n	80059be <TIM_OC1_SetConfig+0x8e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a15      	ldr	r2, [pc, #84]	@ (8005a10 <TIM_OC1_SetConfig+0xe0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d111      	bne.n	80059e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	621a      	str	r2, [r3, #32]
}
 80059fc:	bf00      	nop
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	fffeff8f 	.word	0xfffeff8f
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40010400 	.word	0x40010400

08005a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f023 0210 	bic.w	r2, r3, #16
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8005af8 <TIM_OC2_SetConfig+0xe4>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f023 0320 	bic.w	r3, r3, #32
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a23      	ldr	r2, [pc, #140]	@ (8005afc <TIM_OC2_SetConfig+0xe8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC2_SetConfig+0x68>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a22      	ldr	r2, [pc, #136]	@ (8005b00 <TIM_OC2_SetConfig+0xec>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d10d      	bne.n	8005a98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a18      	ldr	r2, [pc, #96]	@ (8005afc <TIM_OC2_SetConfig+0xe8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_OC2_SetConfig+0x94>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	@ (8005b00 <TIM_OC2_SetConfig+0xec>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d113      	bne.n	8005ad0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	621a      	str	r2, [r3, #32]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	feff8fff 	.word	0xfeff8fff
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40010400 	.word	0x40010400

08005b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8005be4 <TIM_OC3_SetConfig+0xe0>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a22      	ldr	r2, [pc, #136]	@ (8005be8 <TIM_OC3_SetConfig+0xe4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_OC3_SetConfig+0x66>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a21      	ldr	r2, [pc, #132]	@ (8005bec <TIM_OC3_SetConfig+0xe8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d10d      	bne.n	8005b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a17      	ldr	r2, [pc, #92]	@ (8005be8 <TIM_OC3_SetConfig+0xe4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <TIM_OC3_SetConfig+0x92>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a16      	ldr	r2, [pc, #88]	@ (8005bec <TIM_OC3_SetConfig+0xe8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d113      	bne.n	8005bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	fffeff8f 	.word	0xfffeff8f
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400

08005bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c94 <TIM_OC4_SetConfig+0xa4>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	031b      	lsls	r3, r3, #12
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a13      	ldr	r2, [pc, #76]	@ (8005c98 <TIM_OC4_SetConfig+0xa8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_OC4_SetConfig+0x68>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a12      	ldr	r2, [pc, #72]	@ (8005c9c <TIM_OC4_SetConfig+0xac>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d109      	bne.n	8005c6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	019b      	lsls	r3, r3, #6
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	feff8fff 	.word	0xfeff8fff
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40010400 	.word	0x40010400

08005ca0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4b1b      	ldr	r3, [pc, #108]	@ (8005d38 <TIM_OC5_SetConfig+0x98>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005ce0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a12      	ldr	r2, [pc, #72]	@ (8005d3c <TIM_OC5_SetConfig+0x9c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_OC5_SetConfig+0x5e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a11      	ldr	r2, [pc, #68]	@ (8005d40 <TIM_OC5_SetConfig+0xa0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d109      	bne.n	8005d12 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	fffeff8f 	.word	0xfffeff8f
 8005d3c:	40010000 	.word	0x40010000
 8005d40:	40010400 	.word	0x40010400

08005d44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005de0 <TIM_OC6_SetConfig+0x9c>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	051b      	lsls	r3, r3, #20
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a13      	ldr	r2, [pc, #76]	@ (8005de4 <TIM_OC6_SetConfig+0xa0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_OC6_SetConfig+0x60>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a12      	ldr	r2, [pc, #72]	@ (8005de8 <TIM_OC6_SetConfig+0xa4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d109      	bne.n	8005db8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005daa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	029b      	lsls	r3, r3, #10
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	feff8fff 	.word	0xfeff8fff
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40010400 	.word	0x40010400

08005dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2201      	movs	r2, #1
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	401a      	ands	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1a      	ldr	r2, [r3, #32]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	fa01 f303 	lsl.w	r3, r1, r3
 8005e24:	431a      	orrs	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e06d      	b.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a30      	ldr	r2, [pc, #192]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d108      	bne.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d022      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec2:	d01d      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d018      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d013      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00e      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a15      	ldr	r2, [pc, #84]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a16      	ldr	r2, [pc, #88]	@ (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a15      	ldr	r2, [pc, #84]	@ (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10c      	bne.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40001800 	.word	0x40001800

08005f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e040      	b.n	8006024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fc f9b4 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2224      	movs	r2, #36	@ 0x24
 8005fbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fe6c 	bl	8006cb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fc05 	bl	80067ec <UART_SetConfig>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e01b      	b.n	8006024 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800600a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 feeb 	bl	8006df8 <UART_CheckIdleState>
 8006022:	4603      	mov	r3, r0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	@ 0x28
 8006030:	af02      	add	r7, sp, #8
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006040:	2b20      	cmp	r3, #32
 8006042:	d177      	bne.n	8006134 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_UART_Transmit+0x24>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e070      	b.n	8006136 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2221      	movs	r2, #33	@ 0x21
 8006060:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006062:	f7fc fb97 	bl	8002794 <HAL_GetTick>
 8006066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	88fa      	ldrh	r2, [r7, #6]
 8006074:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006080:	d108      	bne.n	8006094 <HAL_UART_Transmit+0x68>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	e003      	b.n	800609c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800609c:	e02f      	b.n	80060fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2200      	movs	r2, #0
 80060a6:	2180      	movs	r1, #128	@ 0x80
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 ff4d 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d004      	beq.n	80060be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e03b      	b.n	8006136 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	3302      	adds	r3, #2
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e007      	b.n	80060ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	3301      	adds	r3, #1
 80060ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1c9      	bne.n	800609e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2200      	movs	r2, #0
 8006112:	2140      	movs	r1, #64	@ 0x40
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 ff17 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e005      	b.n	8006136 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	e000      	b.n	8006136 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006134:	2302      	movs	r3, #2
  }
}
 8006136:	4618      	mov	r0, r3
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b08a      	sub	sp, #40	@ 0x28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006152:	2b20      	cmp	r3, #32
 8006154:	d132      	bne.n	80061bc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <HAL_UART_Receive_IT+0x24>
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e02b      	b.n	80061be <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	613b      	str	r3, [r7, #16]
   return(result);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	623b      	str	r3, [r7, #32]
 800619a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	69f9      	ldr	r1, [r7, #28]
 800619e:	6a3a      	ldr	r2, [r7, #32]
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e6      	bne.n	800617a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061ac:	88fb      	ldrh	r3, [r7, #6]
 80061ae:	461a      	mov	r2, r3
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 ff36 	bl	8007024 <UART_Start_Receive_IT>
 80061b8:	4603      	mov	r3, r0
 80061ba:	e000      	b.n	80061be <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3728      	adds	r7, #40	@ 0x28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b0ba      	sub	sp, #232	@ 0xe8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061f6:	4013      	ands	r3, r2
 80061f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d115      	bne.n	8006230 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00f      	beq.n	8006230 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 82ac 	beq.w	800677e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	4798      	blx	r3
      }
      return;
 800622e:	e2a6      	b.n	800677e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8117 	beq.w	8006468 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800623a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006246:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800624a:	4b85      	ldr	r3, [pc, #532]	@ (8006460 <HAL_UART_IRQHandler+0x298>)
 800624c:	4013      	ands	r3, r2
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 810a 	beq.w	8006468 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d011      	beq.n	8006284 <HAL_UART_IRQHandler+0xbc>
 8006260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2201      	movs	r2, #1
 8006272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800627a:	f043 0201 	orr.w	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d011      	beq.n	80062b4 <HAL_UART_IRQHandler+0xec>
 8006290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2202      	movs	r2, #2
 80062a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062aa:	f043 0204 	orr.w	r2, r3, #4
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d011      	beq.n	80062e4 <HAL_UART_IRQHandler+0x11c>
 80062c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2204      	movs	r2, #4
 80062d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062da:	f043 0202 	orr.w	r2, r3, #2
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d017      	beq.n	8006320 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80062fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006300:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2208      	movs	r2, #8
 800630e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006316:	f043 0208 	orr.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006328:	2b00      	cmp	r3, #0
 800632a:	d012      	beq.n	8006352 <HAL_UART_IRQHandler+0x18a>
 800632c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006330:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00c      	beq.n	8006352 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006348:	f043 0220 	orr.w	r2, r3, #32
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8212 	beq.w	8006782 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800636a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800638c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639a:	2b40      	cmp	r3, #64	@ 0x40
 800639c:	d005      	beq.n	80063aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800639e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d04f      	beq.n	800644a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 ff00 	bl	80071b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b40      	cmp	r3, #64	@ 0x40
 80063bc:	d141      	bne.n	8006442 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1d9      	bne.n	80063be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640e:	2b00      	cmp	r3, #0
 8006410:	d013      	beq.n	800643a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006416:	4a13      	ldr	r2, [pc, #76]	@ (8006464 <HAL_UART_IRQHandler+0x29c>)
 8006418:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641e:	4618      	mov	r0, r3
 8006420:	f7fc fc18 	bl	8002c54 <HAL_DMA_Abort_IT>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d017      	beq.n	800645a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800642e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006438:	e00f      	b.n	800645a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f9b6 	bl	80067ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	e00b      	b.n	800645a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9b2 	bl	80067ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006448:	e007      	b.n	800645a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f9ae 	bl	80067ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006458:	e193      	b.n	8006782 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645a:	bf00      	nop
    return;
 800645c:	e191      	b.n	8006782 <HAL_UART_IRQHandler+0x5ba>
 800645e:	bf00      	nop
 8006460:	04000120 	.word	0x04000120
 8006464:	08007279 	.word	0x08007279

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646c:	2b01      	cmp	r3, #1
 800646e:	f040 814c 	bne.w	800670a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8145 	beq.w	800670a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 813e 	beq.w	800670a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2210      	movs	r2, #16
 8006494:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a0:	2b40      	cmp	r3, #64	@ 0x40
 80064a2:	f040 80b6 	bne.w	8006612 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8165 	beq.w	8006786 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80064c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064c6:	429a      	cmp	r2, r3
 80064c8:	f080 815d 	bcs.w	8006786 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e0:	f000 8086 	beq.w	80065f0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800650e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006512:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800651a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1da      	bne.n	80064e4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3308      	adds	r3, #8
 8006534:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800653e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006540:	f023 0301 	bic.w	r3, r3, #1
 8006544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3308      	adds	r3, #8
 800654e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006552:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006556:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800655a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e1      	bne.n	800652e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3308      	adds	r3, #8
 8006570:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800657a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800657c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3308      	adds	r3, #8
 800658a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800658e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006590:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006594:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800659c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e3      	bne.n	800656a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c0:	f023 0310 	bic.w	r3, r3, #16
 80065c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e4      	bne.n	80065b0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fc fac2 	bl	8002b74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006602:	b29b      	uxth	r3, r3
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	b29b      	uxth	r3, r3
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8d8 	bl	80067c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006610:	e0b9      	b.n	8006786 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800661e:	b29b      	uxth	r3, r3
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80ab 	beq.w	800678a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 80a6 	beq.w	800678a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800664c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006652:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006660:	647b      	str	r3, [r7, #68]	@ 0x44
 8006662:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800666e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e4      	bne.n	800663e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3308      	adds	r3, #8
 800667a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	623b      	str	r3, [r7, #32]
   return(result);
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006698:	633a      	str	r2, [r7, #48]	@ 0x30
 800669a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800669e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e3      	bne.n	8006674 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0310 	bic.w	r3, r3, #16
 80066d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	69b9      	ldr	r1, [r7, #24]
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	617b      	str	r3, [r7, #20]
   return(result);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e4      	bne.n	80066c0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f85c 	bl	80067c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006708:	e03f      	b.n	800678a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00e      	beq.n	8006734 <HAL_UART_IRQHandler+0x56c>
 8006716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800671a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d008      	beq.n	8006734 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800672a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f853 	bl	80067d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006732:	e02d      	b.n	8006790 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00e      	beq.n	800675e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006748:	2b00      	cmp	r3, #0
 800674a:	d008      	beq.n	800675e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01c      	beq.n	800678e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
    }
    return;
 800675c:	e017      	b.n	800678e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800675e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d012      	beq.n	8006790 <HAL_UART_IRQHandler+0x5c8>
 800676a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800676e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00c      	beq.n	8006790 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fd94 	bl	80072a4 <UART_EndTransmit_IT>
    return;
 800677c:	e008      	b.n	8006790 <HAL_UART_IRQHandler+0x5c8>
      return;
 800677e:	bf00      	nop
 8006780:	e006      	b.n	8006790 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006782:	bf00      	nop
 8006784:	e004      	b.n	8006790 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006786:	bf00      	nop
 8006788:	e002      	b.n	8006790 <HAL_UART_IRQHandler+0x5c8>
      return;
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <HAL_UART_IRQHandler+0x5c8>
    return;
 800678e:	bf00      	nop
  }

}
 8006790:	37e8      	adds	r7, #232	@ 0xe8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop

08006798 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4ba6      	ldr	r3, [pc, #664]	@ (8006ab0 <UART_SetConfig+0x2c4>)
 8006818:	4013      	ands	r3, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	6979      	ldr	r1, [r7, #20]
 8006820:	430b      	orrs	r3, r1
 8006822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	430a      	orrs	r2, r1
 800685c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a94      	ldr	r2, [pc, #592]	@ (8006ab4 <UART_SetConfig+0x2c8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d120      	bne.n	80068aa <UART_SetConfig+0xbe>
 8006868:	4b93      	ldr	r3, [pc, #588]	@ (8006ab8 <UART_SetConfig+0x2cc>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	2b03      	cmp	r3, #3
 8006874:	d816      	bhi.n	80068a4 <UART_SetConfig+0xb8>
 8006876:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <UART_SetConfig+0x90>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	0800688d 	.word	0x0800688d
 8006880:	08006899 	.word	0x08006899
 8006884:	08006893 	.word	0x08006893
 8006888:	0800689f 	.word	0x0800689f
 800688c:	2301      	movs	r3, #1
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	e150      	b.n	8006b34 <UART_SetConfig+0x348>
 8006892:	2302      	movs	r3, #2
 8006894:	77fb      	strb	r3, [r7, #31]
 8006896:	e14d      	b.n	8006b34 <UART_SetConfig+0x348>
 8006898:	2304      	movs	r3, #4
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e14a      	b.n	8006b34 <UART_SetConfig+0x348>
 800689e:	2308      	movs	r3, #8
 80068a0:	77fb      	strb	r3, [r7, #31]
 80068a2:	e147      	b.n	8006b34 <UART_SetConfig+0x348>
 80068a4:	2310      	movs	r3, #16
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e144      	b.n	8006b34 <UART_SetConfig+0x348>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a83      	ldr	r2, [pc, #524]	@ (8006abc <UART_SetConfig+0x2d0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d132      	bne.n	800691a <UART_SetConfig+0x12e>
 80068b4:	4b80      	ldr	r3, [pc, #512]	@ (8006ab8 <UART_SetConfig+0x2cc>)
 80068b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	2b0c      	cmp	r3, #12
 80068c0:	d828      	bhi.n	8006914 <UART_SetConfig+0x128>
 80068c2:	a201      	add	r2, pc, #4	@ (adr r2, 80068c8 <UART_SetConfig+0xdc>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	080068fd 	.word	0x080068fd
 80068cc:	08006915 	.word	0x08006915
 80068d0:	08006915 	.word	0x08006915
 80068d4:	08006915 	.word	0x08006915
 80068d8:	08006909 	.word	0x08006909
 80068dc:	08006915 	.word	0x08006915
 80068e0:	08006915 	.word	0x08006915
 80068e4:	08006915 	.word	0x08006915
 80068e8:	08006903 	.word	0x08006903
 80068ec:	08006915 	.word	0x08006915
 80068f0:	08006915 	.word	0x08006915
 80068f4:	08006915 	.word	0x08006915
 80068f8:	0800690f 	.word	0x0800690f
 80068fc:	2300      	movs	r3, #0
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e118      	b.n	8006b34 <UART_SetConfig+0x348>
 8006902:	2302      	movs	r3, #2
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	e115      	b.n	8006b34 <UART_SetConfig+0x348>
 8006908:	2304      	movs	r3, #4
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e112      	b.n	8006b34 <UART_SetConfig+0x348>
 800690e:	2308      	movs	r3, #8
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e10f      	b.n	8006b34 <UART_SetConfig+0x348>
 8006914:	2310      	movs	r3, #16
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e10c      	b.n	8006b34 <UART_SetConfig+0x348>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a68      	ldr	r2, [pc, #416]	@ (8006ac0 <UART_SetConfig+0x2d4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d120      	bne.n	8006966 <UART_SetConfig+0x17a>
 8006924:	4b64      	ldr	r3, [pc, #400]	@ (8006ab8 <UART_SetConfig+0x2cc>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800692e:	2b30      	cmp	r3, #48	@ 0x30
 8006930:	d013      	beq.n	800695a <UART_SetConfig+0x16e>
 8006932:	2b30      	cmp	r3, #48	@ 0x30
 8006934:	d814      	bhi.n	8006960 <UART_SetConfig+0x174>
 8006936:	2b20      	cmp	r3, #32
 8006938:	d009      	beq.n	800694e <UART_SetConfig+0x162>
 800693a:	2b20      	cmp	r3, #32
 800693c:	d810      	bhi.n	8006960 <UART_SetConfig+0x174>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <UART_SetConfig+0x15c>
 8006942:	2b10      	cmp	r3, #16
 8006944:	d006      	beq.n	8006954 <UART_SetConfig+0x168>
 8006946:	e00b      	b.n	8006960 <UART_SetConfig+0x174>
 8006948:	2300      	movs	r3, #0
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e0f2      	b.n	8006b34 <UART_SetConfig+0x348>
 800694e:	2302      	movs	r3, #2
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e0ef      	b.n	8006b34 <UART_SetConfig+0x348>
 8006954:	2304      	movs	r3, #4
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e0ec      	b.n	8006b34 <UART_SetConfig+0x348>
 800695a:	2308      	movs	r3, #8
 800695c:	77fb      	strb	r3, [r7, #31]
 800695e:	e0e9      	b.n	8006b34 <UART_SetConfig+0x348>
 8006960:	2310      	movs	r3, #16
 8006962:	77fb      	strb	r3, [r7, #31]
 8006964:	e0e6      	b.n	8006b34 <UART_SetConfig+0x348>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a56      	ldr	r2, [pc, #344]	@ (8006ac4 <UART_SetConfig+0x2d8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d120      	bne.n	80069b2 <UART_SetConfig+0x1c6>
 8006970:	4b51      	ldr	r3, [pc, #324]	@ (8006ab8 <UART_SetConfig+0x2cc>)
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006976:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800697a:	2bc0      	cmp	r3, #192	@ 0xc0
 800697c:	d013      	beq.n	80069a6 <UART_SetConfig+0x1ba>
 800697e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006980:	d814      	bhi.n	80069ac <UART_SetConfig+0x1c0>
 8006982:	2b80      	cmp	r3, #128	@ 0x80
 8006984:	d009      	beq.n	800699a <UART_SetConfig+0x1ae>
 8006986:	2b80      	cmp	r3, #128	@ 0x80
 8006988:	d810      	bhi.n	80069ac <UART_SetConfig+0x1c0>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <UART_SetConfig+0x1a8>
 800698e:	2b40      	cmp	r3, #64	@ 0x40
 8006990:	d006      	beq.n	80069a0 <UART_SetConfig+0x1b4>
 8006992:	e00b      	b.n	80069ac <UART_SetConfig+0x1c0>
 8006994:	2300      	movs	r3, #0
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e0cc      	b.n	8006b34 <UART_SetConfig+0x348>
 800699a:	2302      	movs	r3, #2
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e0c9      	b.n	8006b34 <UART_SetConfig+0x348>
 80069a0:	2304      	movs	r3, #4
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	e0c6      	b.n	8006b34 <UART_SetConfig+0x348>
 80069a6:	2308      	movs	r3, #8
 80069a8:	77fb      	strb	r3, [r7, #31]
 80069aa:	e0c3      	b.n	8006b34 <UART_SetConfig+0x348>
 80069ac:	2310      	movs	r3, #16
 80069ae:	77fb      	strb	r3, [r7, #31]
 80069b0:	e0c0      	b.n	8006b34 <UART_SetConfig+0x348>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a44      	ldr	r2, [pc, #272]	@ (8006ac8 <UART_SetConfig+0x2dc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d125      	bne.n	8006a08 <UART_SetConfig+0x21c>
 80069bc:	4b3e      	ldr	r3, [pc, #248]	@ (8006ab8 <UART_SetConfig+0x2cc>)
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ca:	d017      	beq.n	80069fc <UART_SetConfig+0x210>
 80069cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069d0:	d817      	bhi.n	8006a02 <UART_SetConfig+0x216>
 80069d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d6:	d00b      	beq.n	80069f0 <UART_SetConfig+0x204>
 80069d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069dc:	d811      	bhi.n	8006a02 <UART_SetConfig+0x216>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <UART_SetConfig+0x1fe>
 80069e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e6:	d006      	beq.n	80069f6 <UART_SetConfig+0x20a>
 80069e8:	e00b      	b.n	8006a02 <UART_SetConfig+0x216>
 80069ea:	2300      	movs	r3, #0
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e0a1      	b.n	8006b34 <UART_SetConfig+0x348>
 80069f0:	2302      	movs	r3, #2
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e09e      	b.n	8006b34 <UART_SetConfig+0x348>
 80069f6:	2304      	movs	r3, #4
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e09b      	b.n	8006b34 <UART_SetConfig+0x348>
 80069fc:	2308      	movs	r3, #8
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e098      	b.n	8006b34 <UART_SetConfig+0x348>
 8006a02:	2310      	movs	r3, #16
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e095      	b.n	8006b34 <UART_SetConfig+0x348>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8006acc <UART_SetConfig+0x2e0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d125      	bne.n	8006a5e <UART_SetConfig+0x272>
 8006a12:	4b29      	ldr	r3, [pc, #164]	@ (8006ab8 <UART_SetConfig+0x2cc>)
 8006a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a20:	d017      	beq.n	8006a52 <UART_SetConfig+0x266>
 8006a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a26:	d817      	bhi.n	8006a58 <UART_SetConfig+0x26c>
 8006a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a2c:	d00b      	beq.n	8006a46 <UART_SetConfig+0x25a>
 8006a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a32:	d811      	bhi.n	8006a58 <UART_SetConfig+0x26c>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <UART_SetConfig+0x254>
 8006a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a3c:	d006      	beq.n	8006a4c <UART_SetConfig+0x260>
 8006a3e:	e00b      	b.n	8006a58 <UART_SetConfig+0x26c>
 8006a40:	2301      	movs	r3, #1
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e076      	b.n	8006b34 <UART_SetConfig+0x348>
 8006a46:	2302      	movs	r3, #2
 8006a48:	77fb      	strb	r3, [r7, #31]
 8006a4a:	e073      	b.n	8006b34 <UART_SetConfig+0x348>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e070      	b.n	8006b34 <UART_SetConfig+0x348>
 8006a52:	2308      	movs	r3, #8
 8006a54:	77fb      	strb	r3, [r7, #31]
 8006a56:	e06d      	b.n	8006b34 <UART_SetConfig+0x348>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e06a      	b.n	8006b34 <UART_SetConfig+0x348>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a1b      	ldr	r2, [pc, #108]	@ (8006ad0 <UART_SetConfig+0x2e4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d138      	bne.n	8006ada <UART_SetConfig+0x2ee>
 8006a68:	4b13      	ldr	r3, [pc, #76]	@ (8006ab8 <UART_SetConfig+0x2cc>)
 8006a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a76:	d017      	beq.n	8006aa8 <UART_SetConfig+0x2bc>
 8006a78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a7c:	d82a      	bhi.n	8006ad4 <UART_SetConfig+0x2e8>
 8006a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a82:	d00b      	beq.n	8006a9c <UART_SetConfig+0x2b0>
 8006a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a88:	d824      	bhi.n	8006ad4 <UART_SetConfig+0x2e8>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <UART_SetConfig+0x2aa>
 8006a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a92:	d006      	beq.n	8006aa2 <UART_SetConfig+0x2b6>
 8006a94:	e01e      	b.n	8006ad4 <UART_SetConfig+0x2e8>
 8006a96:	2300      	movs	r3, #0
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e04b      	b.n	8006b34 <UART_SetConfig+0x348>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e048      	b.n	8006b34 <UART_SetConfig+0x348>
 8006aa2:	2304      	movs	r3, #4
 8006aa4:	77fb      	strb	r3, [r7, #31]
 8006aa6:	e045      	b.n	8006b34 <UART_SetConfig+0x348>
 8006aa8:	2308      	movs	r3, #8
 8006aaa:	77fb      	strb	r3, [r7, #31]
 8006aac:	e042      	b.n	8006b34 <UART_SetConfig+0x348>
 8006aae:	bf00      	nop
 8006ab0:	efff69f3 	.word	0xefff69f3
 8006ab4:	40011000 	.word	0x40011000
 8006ab8:	40023800 	.word	0x40023800
 8006abc:	40004400 	.word	0x40004400
 8006ac0:	40004800 	.word	0x40004800
 8006ac4:	40004c00 	.word	0x40004c00
 8006ac8:	40005000 	.word	0x40005000
 8006acc:	40011400 	.word	0x40011400
 8006ad0:	40007800 	.word	0x40007800
 8006ad4:	2310      	movs	r3, #16
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e02c      	b.n	8006b34 <UART_SetConfig+0x348>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a72      	ldr	r2, [pc, #456]	@ (8006ca8 <UART_SetConfig+0x4bc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d125      	bne.n	8006b30 <UART_SetConfig+0x344>
 8006ae4:	4b71      	ldr	r3, [pc, #452]	@ (8006cac <UART_SetConfig+0x4c0>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006aee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006af2:	d017      	beq.n	8006b24 <UART_SetConfig+0x338>
 8006af4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006af8:	d817      	bhi.n	8006b2a <UART_SetConfig+0x33e>
 8006afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006afe:	d00b      	beq.n	8006b18 <UART_SetConfig+0x32c>
 8006b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b04:	d811      	bhi.n	8006b2a <UART_SetConfig+0x33e>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <UART_SetConfig+0x326>
 8006b0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b0e:	d006      	beq.n	8006b1e <UART_SetConfig+0x332>
 8006b10:	e00b      	b.n	8006b2a <UART_SetConfig+0x33e>
 8006b12:	2300      	movs	r3, #0
 8006b14:	77fb      	strb	r3, [r7, #31]
 8006b16:	e00d      	b.n	8006b34 <UART_SetConfig+0x348>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e00a      	b.n	8006b34 <UART_SetConfig+0x348>
 8006b1e:	2304      	movs	r3, #4
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e007      	b.n	8006b34 <UART_SetConfig+0x348>
 8006b24:	2308      	movs	r3, #8
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e004      	b.n	8006b34 <UART_SetConfig+0x348>
 8006b2a:	2310      	movs	r3, #16
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e001      	b.n	8006b34 <UART_SetConfig+0x348>
 8006b30:	2310      	movs	r3, #16
 8006b32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b3c:	d15b      	bne.n	8006bf6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b3e:	7ffb      	ldrb	r3, [r7, #31]
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d828      	bhi.n	8006b96 <UART_SetConfig+0x3aa>
 8006b44:	a201      	add	r2, pc, #4	@ (adr r2, 8006b4c <UART_SetConfig+0x360>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006b71 	.word	0x08006b71
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	08006b97 	.word	0x08006b97
 8006b5c:	08006b87 	.word	0x08006b87
 8006b60:	08006b97 	.word	0x08006b97
 8006b64:	08006b97 	.word	0x08006b97
 8006b68:	08006b97 	.word	0x08006b97
 8006b6c:	08006b8f 	.word	0x08006b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b70:	f7fd faf4 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 8006b74:	61b8      	str	r0, [r7, #24]
        break;
 8006b76:	e013      	b.n	8006ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b78:	f7fd fb04 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 8006b7c:	61b8      	str	r0, [r7, #24]
        break;
 8006b7e:	e00f      	b.n	8006ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b80:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb0 <UART_SetConfig+0x4c4>)
 8006b82:	61bb      	str	r3, [r7, #24]
        break;
 8006b84:	e00c      	b.n	8006ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b86:	f7fd f9d7 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8006b8a:	61b8      	str	r0, [r7, #24]
        break;
 8006b8c:	e008      	b.n	8006ba0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b92:	61bb      	str	r3, [r7, #24]
        break;
 8006b94:	e004      	b.n	8006ba0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	77bb      	strb	r3, [r7, #30]
        break;
 8006b9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d074      	beq.n	8006c90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	005a      	lsls	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	441a      	add	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b0f      	cmp	r3, #15
 8006bc0:	d916      	bls.n	8006bf0 <UART_SetConfig+0x404>
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc8:	d212      	bcs.n	8006bf0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f023 030f 	bic.w	r3, r3, #15
 8006bd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	89fb      	ldrh	r3, [r7, #14]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	89fa      	ldrh	r2, [r7, #14]
 8006bec:	60da      	str	r2, [r3, #12]
 8006bee:	e04f      	b.n	8006c90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	77bb      	strb	r3, [r7, #30]
 8006bf4:	e04c      	b.n	8006c90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bf6:	7ffb      	ldrb	r3, [r7, #31]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d828      	bhi.n	8006c4e <UART_SetConfig+0x462>
 8006bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006c04 <UART_SetConfig+0x418>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c31 	.word	0x08006c31
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	08006c4f 	.word	0x08006c4f
 8006c14:	08006c3f 	.word	0x08006c3f
 8006c18:	08006c4f 	.word	0x08006c4f
 8006c1c:	08006c4f 	.word	0x08006c4f
 8006c20:	08006c4f 	.word	0x08006c4f
 8006c24:	08006c47 	.word	0x08006c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c28:	f7fd fa98 	bl	800415c <HAL_RCC_GetPCLK1Freq>
 8006c2c:	61b8      	str	r0, [r7, #24]
        break;
 8006c2e:	e013      	b.n	8006c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c30:	f7fd faa8 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 8006c34:	61b8      	str	r0, [r7, #24]
        break;
 8006c36:	e00f      	b.n	8006c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c38:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb0 <UART_SetConfig+0x4c4>)
 8006c3a:	61bb      	str	r3, [r7, #24]
        break;
 8006c3c:	e00c      	b.n	8006c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3e:	f7fd f97b 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8006c42:	61b8      	str	r0, [r7, #24]
        break;
 8006c44:	e008      	b.n	8006c58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c4a:	61bb      	str	r3, [r7, #24]
        break;
 8006c4c:	e004      	b.n	8006c58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	77bb      	strb	r3, [r7, #30]
        break;
 8006c56:	bf00      	nop
    }

    if (pclk != 0U)
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d018      	beq.n	8006c90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	085a      	lsrs	r2, r3, #1
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	441a      	add	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b0f      	cmp	r3, #15
 8006c76:	d909      	bls.n	8006c8c <UART_SetConfig+0x4a0>
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c7e:	d205      	bcs.n	8006c8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	e001      	b.n	8006c90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40007c00 	.word	0x40007c00
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	00f42400 	.word	0x00f42400

08006cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d48:	f003 0310 	and.w	r3, r3, #16
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01a      	beq.n	8006dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006db2:	d10a      	bne.n	8006dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]
  }
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b098      	sub	sp, #96	@ 0x60
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e08:	f7fb fcc4 	bl	8002794 <HAL_GetTick>
 8006e0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d12e      	bne.n	8006e7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e24:	2200      	movs	r2, #0
 8006e26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f88c 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d021      	beq.n	8006e7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e6      	bne.n	8006e36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e062      	b.n	8006f40 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d149      	bne.n	8006f1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f856 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d03c      	beq.n	8006f1c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	623b      	str	r3, [r7, #32]
   return(result);
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e6      	bne.n	8006ea2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0301 	bic.w	r3, r3, #1
 8006eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ef4:	61fa      	str	r2, [r7, #28]
 8006ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	69b9      	ldr	r1, [r7, #24]
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	617b      	str	r3, [r7, #20]
   return(result);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e011      	b.n	8006f40 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3758      	adds	r7, #88	@ 0x58
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f58:	e04f      	b.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d04b      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f62:	f7fb fc17 	bl	8002794 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d302      	bcc.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e04e      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0304 	and.w	r3, r3, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d037      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b80      	cmp	r3, #128	@ 0x80
 8006f8e:	d034      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b40      	cmp	r3, #64	@ 0x40
 8006f94:	d031      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d110      	bne.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2208      	movs	r2, #8
 8006faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f8ff 	bl	80071b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e029      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fd4:	d111      	bne.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f8e5 	bl	80071b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e00f      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4013      	ands	r3, r2
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	429a      	cmp	r2, r3
 8007008:	bf0c      	ite	eq
 800700a:	2301      	moveq	r3, #1
 800700c:	2300      	movne	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	429a      	cmp	r2, r3
 8007016:	d0a0      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007024:	b480      	push	{r7}
 8007026:	b097      	sub	sp, #92	@ 0x5c
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	88fa      	ldrh	r2, [r7, #6]
 800703c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007056:	d10e      	bne.n	8007076 <UART_Start_Receive_IT+0x52>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d105      	bne.n	800706c <UART_Start_Receive_IT+0x48>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007066:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800706a:	e02d      	b.n	80070c8 <UART_Start_Receive_IT+0xa4>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	22ff      	movs	r2, #255	@ 0xff
 8007070:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007074:	e028      	b.n	80070c8 <UART_Start_Receive_IT+0xa4>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10d      	bne.n	800709a <UART_Start_Receive_IT+0x76>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d104      	bne.n	8007090 <UART_Start_Receive_IT+0x6c>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	22ff      	movs	r2, #255	@ 0xff
 800708a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800708e:	e01b      	b.n	80070c8 <UART_Start_Receive_IT+0xa4>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	227f      	movs	r2, #127	@ 0x7f
 8007094:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007098:	e016      	b.n	80070c8 <UART_Start_Receive_IT+0xa4>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070a2:	d10d      	bne.n	80070c0 <UART_Start_Receive_IT+0x9c>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <UART_Start_Receive_IT+0x92>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	227f      	movs	r2, #127	@ 0x7f
 80070b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070b4:	e008      	b.n	80070c8 <UART_Start_Receive_IT+0xa4>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	223f      	movs	r2, #63	@ 0x3f
 80070ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80070be:	e003      	b.n	80070c8 <UART_Start_Receive_IT+0xa4>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2222      	movs	r2, #34	@ 0x22
 80070d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	3308      	adds	r3, #8
 80070de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ea:	f043 0301 	orr.w	r3, r3, #1
 80070ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3308      	adds	r3, #8
 80070f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80070fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007100:	e841 2300 	strex	r3, r2, [r1]
 8007104:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e5      	bne.n	80070d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007114:	d107      	bne.n	8007126 <UART_Start_Receive_IT+0x102>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4a21      	ldr	r2, [pc, #132]	@ (80071a8 <UART_Start_Receive_IT+0x184>)
 8007122:	669a      	str	r2, [r3, #104]	@ 0x68
 8007124:	e002      	b.n	800712c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4a20      	ldr	r2, [pc, #128]	@ (80071ac <UART_Start_Receive_IT+0x188>)
 800712a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d019      	beq.n	8007168 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007152:	637b      	str	r3, [r7, #52]	@ 0x34
 8007154:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e6      	bne.n	8007134 <UART_Start_Receive_IT+0x110>
 8007166:	e018      	b.n	800719a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	613b      	str	r3, [r7, #16]
   return(result);
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f043 0320 	orr.w	r3, r3, #32
 800717c:	653b      	str	r3, [r7, #80]	@ 0x50
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007186:	623b      	str	r3, [r7, #32]
 8007188:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	69f9      	ldr	r1, [r7, #28]
 800718c:	6a3a      	ldr	r2, [r7, #32]
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	61bb      	str	r3, [r7, #24]
   return(result);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e6      	bne.n	8007168 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	375c      	adds	r7, #92	@ 0x5c
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	080074a1 	.word	0x080074a1
 80071ac:	080072f9 	.word	0x080072f9

080071b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b095      	sub	sp, #84	@ 0x54
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80071d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e6      	bne.n	80071b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800720a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800720c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e5      	bne.n	80071ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007222:	2b01      	cmp	r3, #1
 8007224:	d118      	bne.n	8007258 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60bb      	str	r3, [r7, #8]
   return(result);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	647b      	str	r3, [r7, #68]	@ 0x44
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	6979      	ldr	r1, [r7, #20]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	613b      	str	r3, [r7, #16]
   return(result);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e6      	bne.n	8007226 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800726c:	bf00      	nop
 800726e:	3754      	adds	r7, #84	@ 0x54
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7ff fa88 	bl	80067ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6979      	ldr	r1, [r7, #20]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	613b      	str	r3, [r7, #16]
   return(result);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e6      	bne.n	80072ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fa54 	bl	8006798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072f0:	bf00      	nop
 80072f2:	3720      	adds	r7, #32
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b09c      	sub	sp, #112	@ 0x70
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007306:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007310:	2b22      	cmp	r3, #34	@ 0x22
 8007312:	f040 80b9 	bne.w	8007488 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007320:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007324:	b2d9      	uxtb	r1, r3
 8007326:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800732a:	b2da      	uxtb	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007330:	400a      	ands	r2, r1
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007346:	b29b      	uxth	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	f040 809c 	bne.w	8007498 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800736e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007374:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800737e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007380:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800738c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e6      	bne.n	8007360 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a4:	f023 0301 	bic.w	r3, r3, #1
 80073a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80073b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80073b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e5      	bne.n	8007392 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d018      	beq.n	800741a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	623b      	str	r3, [r7, #32]
   return(result);
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007406:	633b      	str	r3, [r7, #48]	@ 0x30
 8007408:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800740c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e6      	bne.n	80073e8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800741e:	2b01      	cmp	r3, #1
 8007420:	d12e      	bne.n	8007480 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	60fb      	str	r3, [r7, #12]
   return(result);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f023 0310 	bic.w	r3, r3, #16
 800743c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	69b9      	ldr	r1, [r7, #24]
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	617b      	str	r3, [r7, #20]
   return(result);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e6      	bne.n	8007428 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b10      	cmp	r3, #16
 8007466:	d103      	bne.n	8007470 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2210      	movs	r2, #16
 800746e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff f9a1 	bl	80067c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800747e:	e00b      	b.n	8007498 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fa f88b 	bl	800159c <HAL_UART_RxCpltCallback>
}
 8007486:	e007      	b.n	8007498 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0208 	orr.w	r2, r2, #8
 8007496:	619a      	str	r2, [r3, #24]
}
 8007498:	bf00      	nop
 800749a:	3770      	adds	r7, #112	@ 0x70
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b09c      	sub	sp, #112	@ 0x70
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074b8:	2b22      	cmp	r3, #34	@ 0x22
 80074ba:	f040 80b9 	bne.w	8007630 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80074ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80074d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80074d6:	4013      	ands	r3, r2
 80074d8:	b29a      	uxth	r2, r3
 80074da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e2:	1c9a      	adds	r2, r3, #2
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007500:	b29b      	uxth	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	f040 809c 	bne.w	8007640 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007518:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800751c:	667b      	str	r3, [r7, #100]	@ 0x64
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007526:	657b      	str	r3, [r7, #84]	@ 0x54
 8007528:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800752c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e6      	bne.n	8007508 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3308      	adds	r3, #8
 8007540:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	f023 0301 	bic.w	r3, r3, #1
 8007550:	663b      	str	r3, [r7, #96]	@ 0x60
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800755a:	643a      	str	r2, [r7, #64]	@ 0x40
 800755c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007560:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e5      	bne.n	800753a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d018      	beq.n	80075c2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	61fb      	str	r3, [r7, #28]
   return(result);
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e6      	bne.n	8007590 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d12e      	bne.n	8007628 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f023 0310 	bic.w	r3, r3, #16
 80075e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075ee:	61bb      	str	r3, [r7, #24]
 80075f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	6979      	ldr	r1, [r7, #20]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	613b      	str	r3, [r7, #16]
   return(result);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e6      	bne.n	80075d0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b10      	cmp	r3, #16
 800760e:	d103      	bne.n	8007618 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2210      	movs	r2, #16
 8007616:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff f8cd 	bl	80067c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007626:	e00b      	b.n	8007640 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7f9 ffb7 	bl	800159c <HAL_UART_RxCpltCallback>
}
 800762e:	e007      	b.n	8007640 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699a      	ldr	r2, [r3, #24]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0208 	orr.w	r2, r2, #8
 800763e:	619a      	str	r2, [r3, #24]
}
 8007640:	bf00      	nop
 8007642:	3770      	adds	r7, #112	@ 0x70
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007648:	b084      	sub	sp, #16
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	f107 001c 	add.w	r0, r7, #28
 8007656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800765a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800765e:	2b01      	cmp	r3, #1
 8007660:	d121      	bne.n	80076a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007666:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	4b21      	ldr	r3, [pc, #132]	@ (80076f8 <USB_CoreInit+0xb0>)
 8007674:	4013      	ands	r3, r2
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007686:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800768a:	2b01      	cmp	r3, #1
 800768c:	d105      	bne.n	800769a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa92 	bl	8007bc4 <USB_CoreReset>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]
 80076a4:	e010      	b.n	80076c8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa86 	bl	8007bc4 <USB_CoreReset>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80076c8:	7fbb      	ldrb	r3, [r7, #30]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d10b      	bne.n	80076e6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f043 0206 	orr.w	r2, r3, #6
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f043 0220 	orr.w	r2, r3, #32
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076f2:	b004      	add	sp, #16
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	ffbdffbf 	.word	0xffbdffbf

080076fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f023 0201 	bic.w	r2, r3, #1
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800773a:	78fb      	ldrb	r3, [r7, #3]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d115      	bne.n	800776c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800774c:	200a      	movs	r0, #10
 800774e:	f7fb f82d 	bl	80027ac <HAL_Delay>
      ms += 10U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	330a      	adds	r3, #10
 8007756:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa25 	bl	8007ba8 <USB_GetMode>
 800775e:	4603      	mov	r3, r0
 8007760:	2b01      	cmp	r3, #1
 8007762:	d01e      	beq.n	80077a2 <USB_SetCurrentMode+0x84>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2bc7      	cmp	r3, #199	@ 0xc7
 8007768:	d9f0      	bls.n	800774c <USB_SetCurrentMode+0x2e>
 800776a:	e01a      	b.n	80077a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d115      	bne.n	800779e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800777e:	200a      	movs	r0, #10
 8007780:	f7fb f814 	bl	80027ac <HAL_Delay>
      ms += 10U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	330a      	adds	r3, #10
 8007788:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa0c 	bl	8007ba8 <USB_GetMode>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <USB_SetCurrentMode+0x84>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2bc7      	cmp	r3, #199	@ 0xc7
 800779a:	d9f0      	bls.n	800777e <USB_SetCurrentMode+0x60>
 800779c:	e001      	b.n	80077a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e005      	b.n	80077ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80077a6:	d101      	bne.n	80077ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e000      	b.n	80077ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077b8:	b084      	sub	sp, #16
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b086      	sub	sp, #24
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077d2:	2300      	movs	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	e009      	b.n	80077ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	3340      	adds	r3, #64	@ 0x40
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	3301      	adds	r3, #1
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	2b0e      	cmp	r3, #14
 80077f0:	d9f2      	bls.n	80077d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d11c      	bne.n	8007834 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007808:	f043 0302 	orr.w	r3, r3, #2
 800780c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007812:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	e005      	b.n	8007840 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007838:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007846:	461a      	mov	r2, r3
 8007848:	2300      	movs	r3, #0
 800784a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800784c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007850:	2b01      	cmp	r3, #1
 8007852:	d10d      	bne.n	8007870 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800785c:	2100      	movs	r1, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f968 	bl	8007b34 <USB_SetDevSpeed>
 8007864:	e008      	b.n	8007878 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007866:	2101      	movs	r1, #1
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f963 	bl	8007b34 <USB_SetDevSpeed>
 800786e:	e003      	b.n	8007878 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007870:	2103      	movs	r1, #3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f95e 	bl	8007b34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007878:	2110      	movs	r1, #16
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f8fa 	bl	8007a74 <USB_FlushTxFifo>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f924 	bl	8007ad8 <USB_FlushRxFifo>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a0:	461a      	mov	r2, r3
 80078a2:	2300      	movs	r3, #0
 80078a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ac:	461a      	mov	r2, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b8:	461a      	mov	r2, r3
 80078ba:	2300      	movs	r3, #0
 80078bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078be:	2300      	movs	r3, #0
 80078c0:	613b      	str	r3, [r7, #16]
 80078c2:	e043      	b.n	800794c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078da:	d118      	bne.n	800790e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ee:	461a      	mov	r2, r3
 80078f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	e013      	b.n	8007920 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007904:	461a      	mov	r2, r3
 8007906:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e008      	b.n	8007920 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791a:	461a      	mov	r2, r3
 800791c:	2300      	movs	r3, #0
 800791e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800792c:	461a      	mov	r2, r3
 800792e:	2300      	movs	r3, #0
 8007930:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793e:	461a      	mov	r2, r3
 8007940:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007944:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3301      	adds	r3, #1
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007950:	461a      	mov	r2, r3
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	4293      	cmp	r3, r2
 8007956:	d3b5      	bcc.n	80078c4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007958:	2300      	movs	r3, #0
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	e043      	b.n	80079e6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007974:	d118      	bne.n	80079a8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007988:	461a      	mov	r2, r3
 800798a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	e013      	b.n	80079ba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799e:	461a      	mov	r2, r3
 80079a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	e008      	b.n	80079ba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b4:	461a      	mov	r2, r3
 80079b6:	2300      	movs	r3, #0
 80079b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c6:	461a      	mov	r2, r3
 80079c8:	2300      	movs	r3, #0
 80079ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d8:	461a      	mov	r2, r3
 80079da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	3301      	adds	r3, #1
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079ea:	461a      	mov	r2, r3
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d3b5      	bcc.n	800795e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d105      	bne.n	8007a28 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	f043 0210 	orr.w	r2, r3, #16
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007a6c <USB_DevInit+0x2b4>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f043 0208 	orr.w	r2, r3, #8
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d105      	bne.n	8007a5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699a      	ldr	r2, [r3, #24]
 8007a54:	4b06      	ldr	r3, [pc, #24]	@ (8007a70 <USB_DevInit+0x2b8>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a68:	b004      	add	sp, #16
 8007a6a:	4770      	bx	lr
 8007a6c:	803c3800 	.word	0x803c3800
 8007a70:	40000004 	.word	0x40000004

08007a74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a8e:	d901      	bls.n	8007a94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e01b      	b.n	8007acc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	daf2      	bge.n	8007a82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	019b      	lsls	r3, r3, #6
 8007aa4:	f043 0220 	orr.w	r2, r3, #32
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ab8:	d901      	bls.n	8007abe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e006      	b.n	8007acc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0320 	and.w	r3, r3, #32
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d0f0      	beq.n	8007aac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007af0:	d901      	bls.n	8007af6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e018      	b.n	8007b28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	daf2      	bge.n	8007ae4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2210      	movs	r2, #16
 8007b06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b14:	d901      	bls.n	8007b1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e006      	b.n	8007b28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0310 	and.w	r3, r3, #16
 8007b22:	2b10      	cmp	r3, #16
 8007b24:	d0f0      	beq.n	8007b08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	68f9      	ldr	r1, [r7, #12]
 8007b50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b54:	4313      	orrs	r3, r2
 8007b56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b80:	f023 0303 	bic.w	r3, r3, #3
 8007b84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b94:	f043 0302 	orr.w	r3, r3, #2
 8007b98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	f003 0301 	and.w	r3, r3, #1
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bdc:	d901      	bls.n	8007be2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e01b      	b.n	8007c1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	daf2      	bge.n	8007bd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f043 0201 	orr.w	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c06:	d901      	bls.n	8007c0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e006      	b.n	8007c1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d0f0      	beq.n	8007bfa <USB_CoreReset+0x36>

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c26:	b480      	push	{r7}
 8007c28:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007c2a:	bf00      	nop
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c3a:	f3ef 8305 	mrs	r3, IPSR
 8007c3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10f      	bne.n	8007c66 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c46:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4a:	607b      	str	r3, [r7, #4]
  return(result);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d105      	bne.n	8007c5e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c52:	f3ef 8311 	mrs	r3, BASEPRI
 8007c56:	603b      	str	r3, [r7, #0]
  return(result);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <osKernelInitialize+0x3a>
 8007c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c98 <osKernelInitialize+0x64>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d103      	bne.n	8007c6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007c66:	f06f 0305 	mvn.w	r3, #5
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	e00c      	b.n	8007c88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <osKernelInitialize+0x64>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d105      	bne.n	8007c82 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c76:	4b08      	ldr	r3, [pc, #32]	@ (8007c98 <osKernelInitialize+0x64>)
 8007c78:	2201      	movs	r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e002      	b.n	8007c88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c88:	68fb      	ldr	r3, [r7, #12]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	20000a5c 	.word	0x20000a5c

08007c9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca2:	f3ef 8305 	mrs	r3, IPSR
 8007ca6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10f      	bne.n	8007cce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cae:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb2:	607b      	str	r3, [r7, #4]
  return(result);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d105      	bne.n	8007cc6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cba:	f3ef 8311 	mrs	r3, BASEPRI
 8007cbe:	603b      	str	r3, [r7, #0]
  return(result);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <osKernelStart+0x3a>
 8007cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d04 <osKernelStart+0x68>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d103      	bne.n	8007cd6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007cce:	f06f 0305 	mvn.w	r3, #5
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e010      	b.n	8007cf8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d04 <osKernelStart+0x68>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d109      	bne.n	8007cf2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007cde:	f7ff ffa2 	bl	8007c26 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ce2:	4b08      	ldr	r3, [pc, #32]	@ (8007d04 <osKernelStart+0x68>)
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ce8:	f001 f8ca 	bl	8008e80 <vTaskStartScheduler>
      stat = osOK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e002      	b.n	8007cf8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000a5c 	.word	0x20000a5c

08007d08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b090      	sub	sp, #64	@ 0x40
 8007d0c:	af04      	add	r7, sp, #16
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d14:	2300      	movs	r3, #0
 8007d16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d18:	f3ef 8305 	mrs	r3, IPSR
 8007d1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d1e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f040 808f 	bne.w	8007e44 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d26:	f3ef 8310 	mrs	r3, PRIMASK
 8007d2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d105      	bne.n	8007d3e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d32:	f3ef 8311 	mrs	r3, BASEPRI
 8007d36:	617b      	str	r3, [r7, #20]
  return(result);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <osThreadNew+0x3e>
 8007d3e:	4b44      	ldr	r3, [pc, #272]	@ (8007e50 <osThreadNew+0x148>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d07e      	beq.n	8007e44 <osThreadNew+0x13c>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d07b      	beq.n	8007e44 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007d4c:	2380      	movs	r3, #128	@ 0x80
 8007d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007d50:	2318      	movs	r3, #24
 8007d52:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007d58:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d045      	beq.n	8007df0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <osThreadNew+0x6a>
        name = attr->name;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d008      	beq.n	8007d98 <osThreadNew+0x90>
 8007d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d88:	2b38      	cmp	r3, #56	@ 0x38
 8007d8a:	d805      	bhi.n	8007d98 <osThreadNew+0x90>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <osThreadNew+0x94>
        return (NULL);
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e054      	b.n	8007e46 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	089b      	lsrs	r3, r3, #2
 8007daa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00e      	beq.n	8007dd2 <osThreadNew+0xca>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	2b5b      	cmp	r3, #91	@ 0x5b
 8007dba:	d90a      	bls.n	8007dd2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d006      	beq.n	8007dd2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <osThreadNew+0xca>
        mem = 1;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	623b      	str	r3, [r7, #32]
 8007dd0:	e010      	b.n	8007df4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10c      	bne.n	8007df4 <osThreadNew+0xec>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d108      	bne.n	8007df4 <osThreadNew+0xec>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d104      	bne.n	8007df4 <osThreadNew+0xec>
          mem = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	623b      	str	r3, [r7, #32]
 8007dee:	e001      	b.n	8007df4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d110      	bne.n	8007e1c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e02:	9202      	str	r2, [sp, #8]
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 fe4f 	bl	8008ab4 <xTaskCreateStatic>
 8007e16:	4603      	mov	r3, r0
 8007e18:	613b      	str	r3, [r7, #16]
 8007e1a:	e013      	b.n	8007e44 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d110      	bne.n	8007e44 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	f107 0310 	add.w	r3, r7, #16
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 fea3 	bl	8008b80 <xTaskCreate>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d001      	beq.n	8007e44 <osThreadNew+0x13c>
          hTask = NULL;
 8007e40:	2300      	movs	r3, #0
 8007e42:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e44:	693b      	ldr	r3, [r7, #16]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3730      	adds	r7, #48	@ 0x30
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000a5c 	.word	0x20000a5c

08007e54 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e5c:	f3ef 8305 	mrs	r3, IPSR
 8007e60:	613b      	str	r3, [r7, #16]
  return(result);
 8007e62:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10f      	bne.n	8007e88 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e68:	f3ef 8310 	mrs	r3, PRIMASK
 8007e6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d105      	bne.n	8007e80 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e74:	f3ef 8311 	mrs	r3, BASEPRI
 8007e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d007      	beq.n	8007e90 <osDelay+0x3c>
 8007e80:	4b0a      	ldr	r3, [pc, #40]	@ (8007eac <osDelay+0x58>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d103      	bne.n	8007e90 <osDelay+0x3c>
    stat = osErrorISR;
 8007e88:	f06f 0305 	mvn.w	r3, #5
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	e007      	b.n	8007ea0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 ffb8 	bl	8008e10 <vTaskDelay>
    }
  }

  return (stat);
 8007ea0:	697b      	ldr	r3, [r7, #20]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000a5c 	.word	0x20000a5c

08007eb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4a07      	ldr	r2, [pc, #28]	@ (8007edc <vApplicationGetIdleTaskMemory+0x2c>)
 8007ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	4a06      	ldr	r2, [pc, #24]	@ (8007ee0 <vApplicationGetIdleTaskMemory+0x30>)
 8007ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2280      	movs	r2, #128	@ 0x80
 8007ecc:	601a      	str	r2, [r3, #0]
}
 8007ece:	bf00      	nop
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	20000a60 	.word	0x20000a60
 8007ee0:	20000abc 	.word	0x20000abc

08007ee4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a07      	ldr	r2, [pc, #28]	@ (8007f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4a06      	ldr	r2, [pc, #24]	@ (8007f14 <vApplicationGetTimerTaskMemory+0x30>)
 8007efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f02:	601a      	str	r2, [r3, #0]
}
 8007f04:	bf00      	nop
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	20000cbc 	.word	0x20000cbc
 8007f14:	20000d18 	.word	0x20000d18

08007f18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f103 0208 	add.w	r2, r3, #8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f103 0208 	add.w	r2, r3, #8
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f103 0208 	add.w	r2, r3, #8
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
}
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd0:	d103      	bne.n	8007fda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e00c      	b.n	8007ff4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e002      	b.n	8007fe8 <vListInsert+0x2e>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d2f6      	bcs.n	8007fe2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	601a      	str	r2, [r3, #0]
}
 8008020:	bf00      	nop
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	6892      	ldr	r2, [r2, #8]
 8008042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6852      	ldr	r2, [r2, #4]
 800804c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d103      	bne.n	8008060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	1e5a      	subs	r2, r3, #1
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10d      	bne.n	80080b0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008098:	b672      	cpsid	i
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	b662      	cpsie	i
 80080a8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80080b0:	f002 f8a4 	bl	800a1fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080bc:	68f9      	ldr	r1, [r7, #12]
 80080be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080c0:	fb01 f303 	mul.w	r3, r1, r3
 80080c4:	441a      	add	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e0:	3b01      	subs	r3, #1
 80080e2:	68f9      	ldr	r1, [r7, #12]
 80080e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080e6:	fb01 f303 	mul.w	r3, r1, r3
 80080ea:	441a      	add	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	22ff      	movs	r2, #255	@ 0xff
 80080f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	22ff      	movs	r2, #255	@ 0xff
 80080fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d114      	bne.n	8008130 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d01a      	beq.n	8008144 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3310      	adds	r3, #16
 8008112:	4618      	mov	r0, r3
 8008114:	f001 f950 	bl	80093b8 <xTaskRemoveFromEventList>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d012      	beq.n	8008144 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800811e:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <xQueueGenericReset+0xd4>)
 8008120:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	e009      	b.n	8008144 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3310      	adds	r3, #16
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff feef 	bl	8007f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3324      	adds	r3, #36	@ 0x24
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff feea 	bl	8007f18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008144:	f002 f890 	bl	800a268 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008148:	2301      	movs	r3, #1
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	e000ed04 	.word	0xe000ed04

08008158 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08e      	sub	sp, #56	@ 0x38
 800815c:	af02      	add	r7, sp, #8
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10d      	bne.n	8008188 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	b672      	cpsid	i
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	b662      	cpsie	i
 8008180:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10d      	bne.n	80081aa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	b672      	cpsid	i
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	b662      	cpsie	i
 80081a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	e7fd      	b.n	80081a6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <xQueueGenericCreateStatic+0x5e>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <xQueueGenericCreateStatic+0x62>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <xQueueGenericCreateStatic+0x64>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10d      	bne.n	80081dc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	623b      	str	r3, [r7, #32]
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	e7fd      	b.n	80081d8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <xQueueGenericCreateStatic+0x90>
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <xQueueGenericCreateStatic+0x94>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e000      	b.n	80081ee <xQueueGenericCreateStatic+0x96>
 80081ec:	2300      	movs	r3, #0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10d      	bne.n	800820e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f6:	b672      	cpsid	i
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	b662      	cpsie	i
 8008206:	61fb      	str	r3, [r7, #28]
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	e7fd      	b.n	800820a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800820e:	2350      	movs	r3, #80	@ 0x50
 8008210:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b50      	cmp	r3, #80	@ 0x50
 8008216:	d00d      	beq.n	8008234 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	b672      	cpsid	i
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	b662      	cpsie	i
 800822c:	61bb      	str	r3, [r7, #24]
}
 800822e:	bf00      	nop
 8008230:	bf00      	nop
 8008232:	e7fd      	b.n	8008230 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008234:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800823a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00d      	beq.n	800825c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008248:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800824c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f805 	bl	8008266 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800825c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800825e:	4618      	mov	r0, r3
 8008260:	3730      	adds	r7, #48	@ 0x30
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
 8008272:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d103      	bne.n	8008282 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	e002      	b.n	8008288 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008294:	2101      	movs	r1, #1
 8008296:	69b8      	ldr	r0, [r7, #24]
 8008298:	f7ff fef2 	bl	8008080 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08e      	sub	sp, #56	@ 0x38
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082ba:	2300      	movs	r3, #0
 80082bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10d      	bne.n	80082e4 <xQueueGenericSend+0x38>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	b672      	cpsid	i
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	b662      	cpsie	i
 80082dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80082de:	bf00      	nop
 80082e0:	bf00      	nop
 80082e2:	e7fd      	b.n	80082e0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d103      	bne.n	80082f2 <xQueueGenericSend+0x46>
 80082ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <xQueueGenericSend+0x4a>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <xQueueGenericSend+0x4c>
 80082f6:	2300      	movs	r3, #0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10d      	bne.n	8008318 <xQueueGenericSend+0x6c>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008300:	b672      	cpsid	i
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	b662      	cpsie	i
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008312:	bf00      	nop
 8008314:	bf00      	nop
 8008316:	e7fd      	b.n	8008314 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d103      	bne.n	8008326 <xQueueGenericSend+0x7a>
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008322:	2b01      	cmp	r3, #1
 8008324:	d101      	bne.n	800832a <xQueueGenericSend+0x7e>
 8008326:	2301      	movs	r3, #1
 8008328:	e000      	b.n	800832c <xQueueGenericSend+0x80>
 800832a:	2300      	movs	r3, #0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10d      	bne.n	800834c <xQueueGenericSend+0xa0>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008334:	b672      	cpsid	i
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	b662      	cpsie	i
 8008344:	623b      	str	r3, [r7, #32]
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	e7fd      	b.n	8008348 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800834c:	f001 f9fc 	bl	8009748 <xTaskGetSchedulerState>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <xQueueGenericSend+0xb0>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <xQueueGenericSend+0xb4>
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <xQueueGenericSend+0xb6>
 8008360:	2300      	movs	r3, #0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10d      	bne.n	8008382 <xQueueGenericSend+0xd6>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	b672      	cpsid	i
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	b662      	cpsie	i
 800837a:	61fb      	str	r3, [r7, #28]
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	e7fd      	b.n	800837e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008382:	f001 ff3b 	bl	800a1fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838e:	429a      	cmp	r2, r3
 8008390:	d302      	bcc.n	8008398 <xQueueGenericSend+0xec>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d129      	bne.n	80083ec <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800839e:	f000 fa1b 	bl	80087d8 <prvCopyDataToQueue>
 80083a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d010      	beq.n	80083ce <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ae:	3324      	adds	r3, #36	@ 0x24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 f801 	bl	80093b8 <xTaskRemoveFromEventList>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d013      	beq.n	80083e4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083bc:	4b3f      	ldr	r3, [pc, #252]	@ (80084bc <xQueueGenericSend+0x210>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	e00a      	b.n	80083e4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083d4:	4b39      	ldr	r3, [pc, #228]	@ (80084bc <xQueueGenericSend+0x210>)
 80083d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083e4:	f001 ff40 	bl	800a268 <vPortExitCritical>
				return pdPASS;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e063      	b.n	80084b4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083f2:	f001 ff39 	bl	800a268 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e05c      	b.n	80084b4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008400:	f107 0314 	add.w	r3, r7, #20
 8008404:	4618      	mov	r0, r3
 8008406:	f001 f83d 	bl	8009484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800840a:	2301      	movs	r3, #1
 800840c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800840e:	f001 ff2b 	bl	800a268 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008412:	f000 fda1 	bl	8008f58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008416:	f001 fef1 	bl	800a1fc <vPortEnterCritical>
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008420:	b25b      	sxtb	r3, r3
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008426:	d103      	bne.n	8008430 <xQueueGenericSend+0x184>
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008436:	b25b      	sxtb	r3, r3
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d103      	bne.n	8008446 <xQueueGenericSend+0x19a>
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008446:	f001 ff0f 	bl	800a268 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800844a:	1d3a      	adds	r2, r7, #4
 800844c:	f107 0314 	add.w	r3, r7, #20
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f001 f82c 	bl	80094b0 <xTaskCheckForTimeOut>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d124      	bne.n	80084a8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800845e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008460:	f000 fab2 	bl	80089c8 <prvIsQueueFull>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d018      	beq.n	800849c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	3310      	adds	r3, #16
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4611      	mov	r1, r2
 8008472:	4618      	mov	r0, r3
 8008474:	f000 ff4a 	bl	800930c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800847a:	f000 fa3d 	bl	80088f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800847e:	f000 fd79 	bl	8008f74 <xTaskResumeAll>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	f47f af7c 	bne.w	8008382 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800848a:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <xQueueGenericSend+0x210>)
 800848c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	e772      	b.n	8008382 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800849c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800849e:	f000 fa2b 	bl	80088f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a2:	f000 fd67 	bl	8008f74 <xTaskResumeAll>
 80084a6:	e76c      	b.n	8008382 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084aa:	f000 fa25 	bl	80088f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ae:	f000 fd61 	bl	8008f74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3738      	adds	r7, #56	@ 0x38
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08e      	sub	sp, #56	@ 0x38
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10d      	bne.n	80084f4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	b672      	cpsid	i
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	b662      	cpsie	i
 80084ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d103      	bne.n	8008502 <xQueueGenericSendFromISR+0x42>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <xQueueGenericSendFromISR+0x46>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <xQueueGenericSendFromISR+0x48>
 8008506:	2300      	movs	r3, #0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10d      	bne.n	8008528 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008510:	b672      	cpsid	i
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	b662      	cpsie	i
 8008520:	623b      	str	r3, [r7, #32]
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d103      	bne.n	8008536 <xQueueGenericSendFromISR+0x76>
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <xQueueGenericSendFromISR+0x7a>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <xQueueGenericSendFromISR+0x7c>
 800853a:	2300      	movs	r3, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10d      	bne.n	800855c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	b672      	cpsid	i
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	b662      	cpsie	i
 8008554:	61fb      	str	r3, [r7, #28]
}
 8008556:	bf00      	nop
 8008558:	bf00      	nop
 800855a:	e7fd      	b.n	8008558 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800855c:	f001 ff36 	bl	800a3cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008560:	f3ef 8211 	mrs	r2, BASEPRI
 8008564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008568:	b672      	cpsid	i
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	b662      	cpsie	i
 8008578:	61ba      	str	r2, [r7, #24]
 800857a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800857c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800857e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008588:	429a      	cmp	r2, r3
 800858a:	d302      	bcc.n	8008592 <xQueueGenericSendFromISR+0xd2>
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d12c      	bne.n	80085ec <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	68b9      	ldr	r1, [r7, #8]
 80085a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085a2:	f000 f919 	bl	80087d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80085aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ae:	d112      	bne.n	80085d6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d016      	beq.n	80085e6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	3324      	adds	r3, #36	@ 0x24
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fefb 	bl	80093b8 <xTaskRemoveFromEventList>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00e      	beq.n	80085e6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00b      	beq.n	80085e6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e007      	b.n	80085e6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085da:	3301      	adds	r3, #1
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	b25a      	sxtb	r2, r3
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80085e6:	2301      	movs	r3, #1
 80085e8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80085ea:	e001      	b.n	80085f0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085ec:	2300      	movs	r3, #0
 80085ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3738      	adds	r7, #56	@ 0x38
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08c      	sub	sp, #48	@ 0x30
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008614:	2300      	movs	r3, #0
 8008616:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10d      	bne.n	800863e <xQueueReceive+0x36>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008626:	b672      	cpsid	i
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	b662      	cpsie	i
 8008636:	623b      	str	r3, [r7, #32]
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	e7fd      	b.n	800863a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d103      	bne.n	800864c <xQueueReceive+0x44>
 8008644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <xQueueReceive+0x48>
 800864c:	2301      	movs	r3, #1
 800864e:	e000      	b.n	8008652 <xQueueReceive+0x4a>
 8008650:	2300      	movs	r3, #0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10d      	bne.n	8008672 <xQueueReceive+0x6a>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865a:	b672      	cpsid	i
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	b662      	cpsie	i
 800866a:	61fb      	str	r3, [r7, #28]
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	e7fd      	b.n	800866e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008672:	f001 f869 	bl	8009748 <xTaskGetSchedulerState>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d102      	bne.n	8008682 <xQueueReceive+0x7a>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <xQueueReceive+0x7e>
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <xQueueReceive+0x80>
 8008686:	2300      	movs	r3, #0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10d      	bne.n	80086a8 <xQueueReceive+0xa0>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008690:	b672      	cpsid	i
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	b662      	cpsie	i
 80086a0:	61bb      	str	r3, [r7, #24]
}
 80086a2:	bf00      	nop
 80086a4:	bf00      	nop
 80086a6:	e7fd      	b.n	80086a4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086a8:	f001 fda8 	bl	800a1fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01f      	beq.n	80086f8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086bc:	f000 f8f6 	bl	80088ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	1e5a      	subs	r2, r3, #1
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00f      	beq.n	80086f0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d2:	3310      	adds	r3, #16
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 fe6f 	bl	80093b8 <xTaskRemoveFromEventList>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086e0:	4b3c      	ldr	r3, [pc, #240]	@ (80087d4 <xQueueReceive+0x1cc>)
 80086e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086f0:	f001 fdba 	bl	800a268 <vPortExitCritical>
				return pdPASS;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e069      	b.n	80087cc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d103      	bne.n	8008706 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086fe:	f001 fdb3 	bl	800a268 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008702:	2300      	movs	r3, #0
 8008704:	e062      	b.n	80087cc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008708:	2b00      	cmp	r3, #0
 800870a:	d106      	bne.n	800871a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800870c:	f107 0310 	add.w	r3, r7, #16
 8008710:	4618      	mov	r0, r3
 8008712:	f000 feb7 	bl	8009484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008716:	2301      	movs	r3, #1
 8008718:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800871a:	f001 fda5 	bl	800a268 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800871e:	f000 fc1b 	bl	8008f58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008722:	f001 fd6b 	bl	800a1fc <vPortEnterCritical>
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800872c:	b25b      	sxtb	r3, r3
 800872e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008732:	d103      	bne.n	800873c <xQueueReceive+0x134>
 8008734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008742:	b25b      	sxtb	r3, r3
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008748:	d103      	bne.n	8008752 <xQueueReceive+0x14a>
 800874a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008752:	f001 fd89 	bl	800a268 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008756:	1d3a      	adds	r2, r7, #4
 8008758:	f107 0310 	add.w	r3, r7, #16
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fea6 	bl	80094b0 <xTaskCheckForTimeOut>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d123      	bne.n	80087b2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800876a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800876c:	f000 f916 	bl	800899c <prvIsQueueEmpty>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d017      	beq.n	80087a6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008778:	3324      	adds	r3, #36	@ 0x24
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	4611      	mov	r1, r2
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fdc4 	bl	800930c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008786:	f000 f8b7 	bl	80088f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800878a:	f000 fbf3 	bl	8008f74 <xTaskResumeAll>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d189      	bne.n	80086a8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008794:	4b0f      	ldr	r3, [pc, #60]	@ (80087d4 <xQueueReceive+0x1cc>)
 8008796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	e780      	b.n	80086a8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087a8:	f000 f8a6 	bl	80088f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087ac:	f000 fbe2 	bl	8008f74 <xTaskResumeAll>
 80087b0:	e77a      	b.n	80086a8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b4:	f000 f8a0 	bl	80088f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087b8:	f000 fbdc 	bl	8008f74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087be:	f000 f8ed 	bl	800899c <prvIsQueueEmpty>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f43f af6f 	beq.w	80086a8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3730      	adds	r7, #48	@ 0x30
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10d      	bne.n	8008812 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d14d      	bne.n	800889a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	4618      	mov	r0, r3
 8008804:	f000 ffbe 	bl	8009784 <xTaskPriorityDisinherit>
 8008808:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	609a      	str	r2, [r3, #8]
 8008810:	e043      	b.n	800889a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d119      	bne.n	800884c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6858      	ldr	r0, [r3, #4]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008820:	461a      	mov	r2, r3
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	f002 f8ce 	bl	800a9c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008830:	441a      	add	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	429a      	cmp	r2, r3
 8008840:	d32b      	bcc.n	800889a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	605a      	str	r2, [r3, #4]
 800884a:	e026      	b.n	800889a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	68d8      	ldr	r0, [r3, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008854:	461a      	mov	r2, r3
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	f002 f8b4 	bl	800a9c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008864:	425b      	negs	r3, r3
 8008866:	441a      	add	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	429a      	cmp	r2, r3
 8008876:	d207      	bcs.n	8008888 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008880:	425b      	negs	r3, r3
 8008882:	441a      	add	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d105      	bne.n	800889a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3b01      	subs	r3, #1
 8008898:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80088a2:	697b      	ldr	r3, [r7, #20]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d018      	beq.n	80088f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c6:	441a      	add	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d303      	bcc.n	80088e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68d9      	ldr	r1, [r3, #12]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e8:	461a      	mov	r2, r3
 80088ea:	6838      	ldr	r0, [r7, #0]
 80088ec:	f002 f86a 	bl	800a9c4 <memcpy>
	}
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008900:	f001 fc7c 	bl	800a1fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800890a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800890c:	e011      	b.n	8008932 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008912:	2b00      	cmp	r3, #0
 8008914:	d012      	beq.n	800893c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3324      	adds	r3, #36	@ 0x24
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fd4c 	bl	80093b8 <xTaskRemoveFromEventList>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008926:	f000 fe2b 	bl	8009580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	3b01      	subs	r3, #1
 800892e:	b2db      	uxtb	r3, r3
 8008930:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008936:	2b00      	cmp	r3, #0
 8008938:	dce9      	bgt.n	800890e <prvUnlockQueue+0x16>
 800893a:	e000      	b.n	800893e <prvUnlockQueue+0x46>
					break;
 800893c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	22ff      	movs	r2, #255	@ 0xff
 8008942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008946:	f001 fc8f 	bl	800a268 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800894a:	f001 fc57 	bl	800a1fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008954:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008956:	e011      	b.n	800897c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d012      	beq.n	8008986 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3310      	adds	r3, #16
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fd27 	bl	80093b8 <xTaskRemoveFromEventList>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008970:	f000 fe06 	bl	8009580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	3b01      	subs	r3, #1
 8008978:	b2db      	uxtb	r3, r3
 800897a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800897c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008980:	2b00      	cmp	r3, #0
 8008982:	dce9      	bgt.n	8008958 <prvUnlockQueue+0x60>
 8008984:	e000      	b.n	8008988 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008986:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	22ff      	movs	r2, #255	@ 0xff
 800898c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008990:	f001 fc6a 	bl	800a268 <vPortExitCritical>
}
 8008994:	bf00      	nop
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089a4:	f001 fc2a 	bl	800a1fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089b0:	2301      	movs	r3, #1
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e001      	b.n	80089ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089ba:	f001 fc55 	bl	800a268 <vPortExitCritical>

	return xReturn;
 80089be:	68fb      	ldr	r3, [r7, #12]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089d0:	f001 fc14 	bl	800a1fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089dc:	429a      	cmp	r2, r3
 80089de:	d102      	bne.n	80089e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089e0:	2301      	movs	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e001      	b.n	80089ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089ea:	f001 fc3d 	bl	800a268 <vPortExitCritical>

	return xReturn;
 80089ee:	68fb      	ldr	r3, [r7, #12]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e014      	b.n	8008a32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a08:	4a0f      	ldr	r2, [pc, #60]	@ (8008a48 <vQueueAddToRegistry+0x50>)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10b      	bne.n	8008a2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a14:	490c      	ldr	r1, [pc, #48]	@ (8008a48 <vQueueAddToRegistry+0x50>)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8008a48 <vQueueAddToRegistry+0x50>)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	4413      	add	r3, r2
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a2a:	e006      	b.n	8008a3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b07      	cmp	r3, #7
 8008a36:	d9e7      	bls.n	8008a08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	20001118 	.word	0x20001118

08008a4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a5c:	f001 fbce 	bl	800a1fc <vPortEnterCritical>
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a66:	b25b      	sxtb	r3, r3
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d103      	bne.n	8008a76 <vQueueWaitForMessageRestricted+0x2a>
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a7c:	b25b      	sxtb	r3, r3
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	d103      	bne.n	8008a8c <vQueueWaitForMessageRestricted+0x40>
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a8c:	f001 fbec 	bl	800a268 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	3324      	adds	r3, #36	@ 0x24
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fc5b 	bl	800935c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008aa6:	6978      	ldr	r0, [r7, #20]
 8008aa8:	f7ff ff26 	bl	80088f8 <prvUnlockQueue>
	}
 8008aac:	bf00      	nop
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08e      	sub	sp, #56	@ 0x38
 8008ab8:	af04      	add	r7, sp, #16
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10d      	bne.n	8008ae4 <xTaskCreateStatic+0x30>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008acc:	b672      	cpsid	i
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	b662      	cpsie	i
 8008adc:	623b      	str	r3, [r7, #32]
}
 8008ade:	bf00      	nop
 8008ae0:	bf00      	nop
 8008ae2:	e7fd      	b.n	8008ae0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10d      	bne.n	8008b06 <xTaskCreateStatic+0x52>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aee:	b672      	cpsid	i
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	b662      	cpsie	i
 8008afe:	61fb      	str	r3, [r7, #28]
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	e7fd      	b.n	8008b02 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b06:	235c      	movs	r3, #92	@ 0x5c
 8008b08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b0e:	d00d      	beq.n	8008b2c <xTaskCreateStatic+0x78>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	b672      	cpsid	i
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	b662      	cpsie	i
 8008b24:	61bb      	str	r3, [r7, #24]
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01e      	beq.n	8008b72 <xTaskCreateStatic+0xbe>
 8008b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01b      	beq.n	8008b72 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9303      	str	r3, [sp, #12]
 8008b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b52:	9302      	str	r3, [sp, #8]
 8008b54:	f107 0314 	add.w	r3, r7, #20
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f850 	bl	8008c0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b6c:	f000 f8e0 	bl	8008d30 <prvAddNewTaskToReadyList>
 8008b70:	e001      	b.n	8008b76 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b76:	697b      	ldr	r3, [r7, #20]
	}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3728      	adds	r7, #40	@ 0x28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08c      	sub	sp, #48	@ 0x30
 8008b84:	af04      	add	r7, sp, #16
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b90:	88fb      	ldrh	r3, [r7, #6]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 fc5f 	bl	800a458 <pvPortMalloc>
 8008b9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00e      	beq.n	8008bc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ba2:	205c      	movs	r0, #92	@ 0x5c
 8008ba4:	f001 fc58 	bl	800a458 <pvPortMalloc>
 8008ba8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008bb6:	e005      	b.n	8008bc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bb8:	6978      	ldr	r0, [r7, #20]
 8008bba:	f001 fd1b 	bl	800a5f4 <vPortFree>
 8008bbe:	e001      	b.n	8008bc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d017      	beq.n	8008bfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bd2:	88fa      	ldrh	r2, [r7, #6]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9303      	str	r3, [sp, #12]
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	9302      	str	r3, [sp, #8]
 8008bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f80e 	bl	8008c0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bee:	69f8      	ldr	r0, [r7, #28]
 8008bf0:	f000 f89e 	bl	8008d30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	61bb      	str	r3, [r7, #24]
 8008bf8:	e002      	b.n	8008c00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c00:	69bb      	ldr	r3, [r7, #24]
	}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3720      	adds	r7, #32
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b088      	sub	sp, #32
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
 8008c16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	461a      	mov	r2, r3
 8008c22:	21a5      	movs	r1, #165	@ 0xa5
 8008c24:	f001 fe8a 	bl	800a93c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008c32:	440b      	add	r3, r1
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	f023 0307 	bic.w	r3, r3, #7
 8008c40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	f003 0307 	and.w	r3, r3, #7
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00d      	beq.n	8008c68 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c50:	b672      	cpsid	i
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	b662      	cpsie	i
 8008c60:	617b      	str	r3, [r7, #20]
}
 8008c62:	bf00      	nop
 8008c64:	bf00      	nop
 8008c66:	e7fd      	b.n	8008c64 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d01f      	beq.n	8008cae <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c6e:	2300      	movs	r3, #0
 8008c70:	61fb      	str	r3, [r7, #28]
 8008c72:	e012      	b.n	8008c9a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	4413      	add	r3, r2
 8008c7a:	7819      	ldrb	r1, [r3, #0]
 8008c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	3334      	adds	r3, #52	@ 0x34
 8008c84:	460a      	mov	r2, r1
 8008c86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d006      	beq.n	8008ca2 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	3301      	adds	r3, #1
 8008c98:	61fb      	str	r3, [r7, #28]
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	2b0f      	cmp	r3, #15
 8008c9e:	d9e9      	bls.n	8008c74 <prvInitialiseNewTask+0x6a>
 8008ca0:	e000      	b.n	8008ca4 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008ca2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cac:	e003      	b.n	8008cb6 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb8:	2b37      	cmp	r3, #55	@ 0x37
 8008cba:	d901      	bls.n	8008cc0 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cbc:	2337      	movs	r3, #55	@ 0x37
 8008cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cce:	2200      	movs	r2, #0
 8008cd0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff f93e 	bl	8007f58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	3318      	adds	r3, #24
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff f939 	bl	8007f58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cfa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfe:	2200      	movs	r2, #0
 8008d00:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	68f9      	ldr	r1, [r7, #12]
 8008d0e:	69b8      	ldr	r0, [r7, #24]
 8008d10:	f001 f968 	bl	8009fe4 <pxPortInitialiseStack>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d26:	bf00      	nop
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d38:	f001 fa60 	bl	800a1fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8008df4 <prvAddNewTaskToReadyList+0xc4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	4a2c      	ldr	r2, [pc, #176]	@ (8008df4 <prvAddNewTaskToReadyList+0xc4>)
 8008d44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d46:	4b2c      	ldr	r3, [pc, #176]	@ (8008df8 <prvAddNewTaskToReadyList+0xc8>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d109      	bne.n	8008d62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8008df8 <prvAddNewTaskToReadyList+0xc8>)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d54:	4b27      	ldr	r3, [pc, #156]	@ (8008df4 <prvAddNewTaskToReadyList+0xc4>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d110      	bne.n	8008d7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d5c:	f000 fc34 	bl	80095c8 <prvInitialiseTaskLists>
 8008d60:	e00d      	b.n	8008d7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d62:	4b26      	ldr	r3, [pc, #152]	@ (8008dfc <prvAddNewTaskToReadyList+0xcc>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d6a:	4b23      	ldr	r3, [pc, #140]	@ (8008df8 <prvAddNewTaskToReadyList+0xc8>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d802      	bhi.n	8008d7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d78:	4a1f      	ldr	r2, [pc, #124]	@ (8008df8 <prvAddNewTaskToReadyList+0xc8>)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d7e:	4b20      	ldr	r3, [pc, #128]	@ (8008e00 <prvAddNewTaskToReadyList+0xd0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	4a1e      	ldr	r2, [pc, #120]	@ (8008e00 <prvAddNewTaskToReadyList+0xd0>)
 8008d86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d88:	4b1d      	ldr	r3, [pc, #116]	@ (8008e00 <prvAddNewTaskToReadyList+0xd0>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d94:	4b1b      	ldr	r3, [pc, #108]	@ (8008e04 <prvAddNewTaskToReadyList+0xd4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d903      	bls.n	8008da4 <prvAddNewTaskToReadyList+0x74>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	4a18      	ldr	r2, [pc, #96]	@ (8008e04 <prvAddNewTaskToReadyList+0xd4>)
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da8:	4613      	mov	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4a15      	ldr	r2, [pc, #84]	@ (8008e08 <prvAddNewTaskToReadyList+0xd8>)
 8008db2:	441a      	add	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4619      	mov	r1, r3
 8008dba:	4610      	mov	r0, r2
 8008dbc:	f7ff f8d9 	bl	8007f72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008dc0:	f001 fa52 	bl	800a268 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8008dfc <prvAddNewTaskToReadyList+0xcc>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00e      	beq.n	8008dea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <prvAddNewTaskToReadyList+0xc8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d207      	bcs.n	8008dea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dda:	4b0c      	ldr	r3, [pc, #48]	@ (8008e0c <prvAddNewTaskToReadyList+0xdc>)
 8008ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	2000162c 	.word	0x2000162c
 8008df8:	20001158 	.word	0x20001158
 8008dfc:	20001638 	.word	0x20001638
 8008e00:	20001648 	.word	0x20001648
 8008e04:	20001634 	.word	0x20001634
 8008e08:	2000115c 	.word	0x2000115c
 8008e0c:	e000ed04 	.word	0xe000ed04

08008e10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d01a      	beq.n	8008e58 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e22:	4b15      	ldr	r3, [pc, #84]	@ (8008e78 <vTaskDelay+0x68>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00d      	beq.n	8008e46 <vTaskDelay+0x36>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2e:	b672      	cpsid	i
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	b662      	cpsie	i
 8008e3e:	60bb      	str	r3, [r7, #8]
}
 8008e40:	bf00      	nop
 8008e42:	bf00      	nop
 8008e44:	e7fd      	b.n	8008e42 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008e46:	f000 f887 	bl	8008f58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fd0d 	bl	800986c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e52:	f000 f88f 	bl	8008f74 <xTaskResumeAll>
 8008e56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d107      	bne.n	8008e6e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008e5e:	4b07      	ldr	r3, [pc, #28]	@ (8008e7c <vTaskDelay+0x6c>)
 8008e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20001654 	.word	0x20001654
 8008e7c:	e000ed04 	.word	0xe000ed04

08008e80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08a      	sub	sp, #40	@ 0x28
 8008e84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e8e:	463a      	mov	r2, r7
 8008e90:	1d39      	adds	r1, r7, #4
 8008e92:	f107 0308 	add.w	r3, r7, #8
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff f80a 	bl	8007eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	9202      	str	r2, [sp, #8]
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	460a      	mov	r2, r1
 8008eae:	4924      	ldr	r1, [pc, #144]	@ (8008f40 <vTaskStartScheduler+0xc0>)
 8008eb0:	4824      	ldr	r0, [pc, #144]	@ (8008f44 <vTaskStartScheduler+0xc4>)
 8008eb2:	f7ff fdff 	bl	8008ab4 <xTaskCreateStatic>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	4a23      	ldr	r2, [pc, #140]	@ (8008f48 <vTaskStartScheduler+0xc8>)
 8008eba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ebc:	4b22      	ldr	r3, [pc, #136]	@ (8008f48 <vTaskStartScheduler+0xc8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	e001      	b.n	8008ece <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d102      	bne.n	8008eda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ed4:	f000 fd1e 	bl	8009914 <xTimerCreateTimerTask>
 8008ed8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d118      	bne.n	8008f12 <vTaskStartScheduler+0x92>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee4:	b672      	cpsid	i
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	b662      	cpsie	i
 8008ef4:	613b      	str	r3, [r7, #16]
}
 8008ef6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ef8:	4b14      	ldr	r3, [pc, #80]	@ (8008f4c <vTaskStartScheduler+0xcc>)
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295
 8008efe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f00:	4b13      	ldr	r3, [pc, #76]	@ (8008f50 <vTaskStartScheduler+0xd0>)
 8008f02:	2201      	movs	r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f06:	4b13      	ldr	r3, [pc, #76]	@ (8008f54 <vTaskStartScheduler+0xd4>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f0c:	f001 f8f8 	bl	800a100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f10:	e011      	b.n	8008f36 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f18:	d10d      	bne.n	8008f36 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1e:	b672      	cpsid	i
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	b662      	cpsie	i
 8008f2e:	60fb      	str	r3, [r7, #12]
}
 8008f30:	bf00      	nop
 8008f32:	bf00      	nop
 8008f34:	e7fd      	b.n	8008f32 <vTaskStartScheduler+0xb2>
}
 8008f36:	bf00      	nop
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	0800ab9c 	.word	0x0800ab9c
 8008f44:	08009599 	.word	0x08009599
 8008f48:	20001650 	.word	0x20001650
 8008f4c:	2000164c 	.word	0x2000164c
 8008f50:	20001638 	.word	0x20001638
 8008f54:	20001630 	.word	0x20001630

08008f58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f5c:	4b04      	ldr	r3, [pc, #16]	@ (8008f70 <vTaskSuspendAll+0x18>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3301      	adds	r3, #1
 8008f62:	4a03      	ldr	r2, [pc, #12]	@ (8008f70 <vTaskSuspendAll+0x18>)
 8008f64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008f66:	bf00      	nop
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	20001654 	.word	0x20001654

08008f74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f82:	4b43      	ldr	r3, [pc, #268]	@ (8009090 <xTaskResumeAll+0x11c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10d      	bne.n	8008fa6 <xTaskResumeAll+0x32>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8e:	b672      	cpsid	i
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	b662      	cpsie	i
 8008f9e:	603b      	str	r3, [r7, #0]
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	e7fd      	b.n	8008fa2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fa6:	f001 f929 	bl	800a1fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008faa:	4b39      	ldr	r3, [pc, #228]	@ (8009090 <xTaskResumeAll+0x11c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	4a37      	ldr	r2, [pc, #220]	@ (8009090 <xTaskResumeAll+0x11c>)
 8008fb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb4:	4b36      	ldr	r3, [pc, #216]	@ (8009090 <xTaskResumeAll+0x11c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d162      	bne.n	8009082 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fbc:	4b35      	ldr	r3, [pc, #212]	@ (8009094 <xTaskResumeAll+0x120>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d05e      	beq.n	8009082 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fc4:	e02f      	b.n	8009026 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fc6:	4b34      	ldr	r3, [pc, #208]	@ (8009098 <xTaskResumeAll+0x124>)
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3318      	adds	r3, #24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff f82a 	bl	800802c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff f825 	bl	800802c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800909c <xTaskResumeAll+0x128>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d903      	bls.n	8008ff6 <xTaskResumeAll+0x82>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800909c <xTaskResumeAll+0x128>)
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4a27      	ldr	r2, [pc, #156]	@ (80090a0 <xTaskResumeAll+0x12c>)
 8009004:	441a      	add	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3304      	adds	r3, #4
 800900a:	4619      	mov	r1, r3
 800900c:	4610      	mov	r0, r2
 800900e:	f7fe ffb0 	bl	8007f72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009016:	4b23      	ldr	r3, [pc, #140]	@ (80090a4 <xTaskResumeAll+0x130>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901c:	429a      	cmp	r2, r3
 800901e:	d302      	bcc.n	8009026 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009020:	4b21      	ldr	r3, [pc, #132]	@ (80090a8 <xTaskResumeAll+0x134>)
 8009022:	2201      	movs	r2, #1
 8009024:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009026:	4b1c      	ldr	r3, [pc, #112]	@ (8009098 <xTaskResumeAll+0x124>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1cb      	bne.n	8008fc6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009034:	f000 fb68 	bl	8009708 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009038:	4b1c      	ldr	r3, [pc, #112]	@ (80090ac <xTaskResumeAll+0x138>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d010      	beq.n	8009066 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009044:	f000 f846 	bl	80090d4 <xTaskIncrementTick>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800904e:	4b16      	ldr	r3, [pc, #88]	@ (80090a8 <xTaskResumeAll+0x134>)
 8009050:	2201      	movs	r2, #1
 8009052:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3b01      	subs	r3, #1
 8009058:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1f1      	bne.n	8009044 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009060:	4b12      	ldr	r3, [pc, #72]	@ (80090ac <xTaskResumeAll+0x138>)
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009066:	4b10      	ldr	r3, [pc, #64]	@ (80090a8 <xTaskResumeAll+0x134>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d009      	beq.n	8009082 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800906e:	2301      	movs	r3, #1
 8009070:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009072:	4b0f      	ldr	r3, [pc, #60]	@ (80090b0 <xTaskResumeAll+0x13c>)
 8009074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009082:	f001 f8f1 	bl	800a268 <vPortExitCritical>

	return xAlreadyYielded;
 8009086:	68bb      	ldr	r3, [r7, #8]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	20001654 	.word	0x20001654
 8009094:	2000162c 	.word	0x2000162c
 8009098:	200015ec 	.word	0x200015ec
 800909c:	20001634 	.word	0x20001634
 80090a0:	2000115c 	.word	0x2000115c
 80090a4:	20001158 	.word	0x20001158
 80090a8:	20001640 	.word	0x20001640
 80090ac:	2000163c 	.word	0x2000163c
 80090b0:	e000ed04 	.word	0xe000ed04

080090b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090ba:	4b05      	ldr	r3, [pc, #20]	@ (80090d0 <xTaskGetTickCount+0x1c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090c0:	687b      	ldr	r3, [r7, #4]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20001630 	.word	0x20001630

080090d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090de:	4b50      	ldr	r3, [pc, #320]	@ (8009220 <xTaskIncrementTick+0x14c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f040 808c 	bne.w	8009200 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090e8:	4b4e      	ldr	r3, [pc, #312]	@ (8009224 <xTaskIncrementTick+0x150>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090f0:	4a4c      	ldr	r2, [pc, #304]	@ (8009224 <xTaskIncrementTick+0x150>)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d123      	bne.n	8009144 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80090fc:	4b4a      	ldr	r3, [pc, #296]	@ (8009228 <xTaskIncrementTick+0x154>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00d      	beq.n	8009122 <xTaskIncrementTick+0x4e>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910a:	b672      	cpsid	i
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	b662      	cpsie	i
 800911a:	603b      	str	r3, [r7, #0]
}
 800911c:	bf00      	nop
 800911e:	bf00      	nop
 8009120:	e7fd      	b.n	800911e <xTaskIncrementTick+0x4a>
 8009122:	4b41      	ldr	r3, [pc, #260]	@ (8009228 <xTaskIncrementTick+0x154>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	4b40      	ldr	r3, [pc, #256]	@ (800922c <xTaskIncrementTick+0x158>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a3e      	ldr	r2, [pc, #248]	@ (8009228 <xTaskIncrementTick+0x154>)
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	4a3e      	ldr	r2, [pc, #248]	@ (800922c <xTaskIncrementTick+0x158>)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	4b3e      	ldr	r3, [pc, #248]	@ (8009230 <xTaskIncrementTick+0x15c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3301      	adds	r3, #1
 800913c:	4a3c      	ldr	r2, [pc, #240]	@ (8009230 <xTaskIncrementTick+0x15c>)
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	f000 fae2 	bl	8009708 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009144:	4b3b      	ldr	r3, [pc, #236]	@ (8009234 <xTaskIncrementTick+0x160>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	429a      	cmp	r2, r3
 800914c:	d349      	bcc.n	80091e2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914e:	4b36      	ldr	r3, [pc, #216]	@ (8009228 <xTaskIncrementTick+0x154>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009158:	4b36      	ldr	r3, [pc, #216]	@ (8009234 <xTaskIncrementTick+0x160>)
 800915a:	f04f 32ff 	mov.w	r2, #4294967295
 800915e:	601a      	str	r2, [r3, #0]
					break;
 8009160:	e03f      	b.n	80091e2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009162:	4b31      	ldr	r3, [pc, #196]	@ (8009228 <xTaskIncrementTick+0x154>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	429a      	cmp	r2, r3
 8009178:	d203      	bcs.n	8009182 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800917a:	4a2e      	ldr	r2, [pc, #184]	@ (8009234 <xTaskIncrementTick+0x160>)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009180:	e02f      	b.n	80091e2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	3304      	adds	r3, #4
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe ff50 	bl	800802c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009190:	2b00      	cmp	r3, #0
 8009192:	d004      	beq.n	800919e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	3318      	adds	r3, #24
 8009198:	4618      	mov	r0, r3
 800919a:	f7fe ff47 	bl	800802c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a2:	4b25      	ldr	r3, [pc, #148]	@ (8009238 <xTaskIncrementTick+0x164>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d903      	bls.n	80091b2 <xTaskIncrementTick+0xde>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ae:	4a22      	ldr	r2, [pc, #136]	@ (8009238 <xTaskIncrementTick+0x164>)
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4a1f      	ldr	r2, [pc, #124]	@ (800923c <xTaskIncrementTick+0x168>)
 80091c0:	441a      	add	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	3304      	adds	r3, #4
 80091c6:	4619      	mov	r1, r3
 80091c8:	4610      	mov	r0, r2
 80091ca:	f7fe fed2 	bl	8007f72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009240 <xTaskIncrementTick+0x16c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d8:	429a      	cmp	r2, r3
 80091da:	d3b8      	bcc.n	800914e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80091dc:	2301      	movs	r3, #1
 80091de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091e0:	e7b5      	b.n	800914e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091e2:	4b17      	ldr	r3, [pc, #92]	@ (8009240 <xTaskIncrementTick+0x16c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e8:	4914      	ldr	r1, [pc, #80]	@ (800923c <xTaskIncrementTick+0x168>)
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d907      	bls.n	800920a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80091fa:	2301      	movs	r3, #1
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	e004      	b.n	800920a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009200:	4b10      	ldr	r3, [pc, #64]	@ (8009244 <xTaskIncrementTick+0x170>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3301      	adds	r3, #1
 8009206:	4a0f      	ldr	r2, [pc, #60]	@ (8009244 <xTaskIncrementTick+0x170>)
 8009208:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800920a:	4b0f      	ldr	r3, [pc, #60]	@ (8009248 <xTaskIncrementTick+0x174>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009212:	2301      	movs	r3, #1
 8009214:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009216:	697b      	ldr	r3, [r7, #20]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20001654 	.word	0x20001654
 8009224:	20001630 	.word	0x20001630
 8009228:	200015e4 	.word	0x200015e4
 800922c:	200015e8 	.word	0x200015e8
 8009230:	20001644 	.word	0x20001644
 8009234:	2000164c 	.word	0x2000164c
 8009238:	20001634 	.word	0x20001634
 800923c:	2000115c 	.word	0x2000115c
 8009240:	20001158 	.word	0x20001158
 8009244:	2000163c 	.word	0x2000163c
 8009248:	20001640 	.word	0x20001640

0800924c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009252:	4b29      	ldr	r3, [pc, #164]	@ (80092f8 <vTaskSwitchContext+0xac>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800925a:	4b28      	ldr	r3, [pc, #160]	@ (80092fc <vTaskSwitchContext+0xb0>)
 800925c:	2201      	movs	r2, #1
 800925e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009260:	e044      	b.n	80092ec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009262:	4b26      	ldr	r3, [pc, #152]	@ (80092fc <vTaskSwitchContext+0xb0>)
 8009264:	2200      	movs	r2, #0
 8009266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009268:	4b25      	ldr	r3, [pc, #148]	@ (8009300 <vTaskSwitchContext+0xb4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	e013      	b.n	8009298 <vTaskSwitchContext+0x4c>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10d      	bne.n	8009292 <vTaskSwitchContext+0x46>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	b672      	cpsid	i
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	b662      	cpsie	i
 800928a:	607b      	str	r3, [r7, #4]
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	e7fd      	b.n	800928e <vTaskSwitchContext+0x42>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3b01      	subs	r3, #1
 8009296:	60fb      	str	r3, [r7, #12]
 8009298:	491a      	ldr	r1, [pc, #104]	@ (8009304 <vTaskSwitchContext+0xb8>)
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0e1      	beq.n	8009270 <vTaskSwitchContext+0x24>
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4a13      	ldr	r2, [pc, #76]	@ (8009304 <vTaskSwitchContext+0xb8>)
 80092b8:	4413      	add	r3, r2
 80092ba:	60bb      	str	r3, [r7, #8]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	605a      	str	r2, [r3, #4]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	3308      	adds	r3, #8
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d104      	bne.n	80092dc <vTaskSwitchContext+0x90>
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	605a      	str	r2, [r3, #4]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	4a09      	ldr	r2, [pc, #36]	@ (8009308 <vTaskSwitchContext+0xbc>)
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	4a06      	ldr	r2, [pc, #24]	@ (8009300 <vTaskSwitchContext+0xb4>)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6013      	str	r3, [r2, #0]
}
 80092ec:	bf00      	nop
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	20001654 	.word	0x20001654
 80092fc:	20001640 	.word	0x20001640
 8009300:	20001634 	.word	0x20001634
 8009304:	2000115c 	.word	0x2000115c
 8009308:	20001158 	.word	0x20001158

0800930c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10d      	bne.n	8009338 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009320:	b672      	cpsid	i
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	b662      	cpsie	i
 8009330:	60fb      	str	r3, [r7, #12]
}
 8009332:	bf00      	nop
 8009334:	bf00      	nop
 8009336:	e7fd      	b.n	8009334 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009338:	4b07      	ldr	r3, [pc, #28]	@ (8009358 <vTaskPlaceOnEventList+0x4c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3318      	adds	r3, #24
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7fe fe3a 	bl	8007fba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009346:	2101      	movs	r1, #1
 8009348:	6838      	ldr	r0, [r7, #0]
 800934a:	f000 fa8f 	bl	800986c <prvAddCurrentTaskToDelayedList>
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20001158 	.word	0x20001158

0800935c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10d      	bne.n	800938a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	b672      	cpsid	i
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	b662      	cpsie	i
 8009382:	617b      	str	r3, [r7, #20]
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	e7fd      	b.n	8009386 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800938a:	4b0a      	ldr	r3, [pc, #40]	@ (80093b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3318      	adds	r3, #24
 8009390:	4619      	mov	r1, r3
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7fe fded 	bl	8007f72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800939e:	f04f 33ff 	mov.w	r3, #4294967295
 80093a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	68b8      	ldr	r0, [r7, #8]
 80093a8:	f000 fa60 	bl	800986c <prvAddCurrentTaskToDelayedList>
	}
 80093ac:	bf00      	nop
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20001158 	.word	0x20001158

080093b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10d      	bne.n	80093ea <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d2:	b672      	cpsid	i
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	b662      	cpsie	i
 80093e2:	60fb      	str	r3, [r7, #12]
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop
 80093e8:	e7fd      	b.n	80093e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	3318      	adds	r3, #24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fe1c 	bl	800802c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093f4:	4b1d      	ldr	r3, [pc, #116]	@ (800946c <xTaskRemoveFromEventList+0xb4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d11d      	bne.n	8009438 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3304      	adds	r3, #4
 8009400:	4618      	mov	r0, r3
 8009402:	f7fe fe13 	bl	800802c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940a:	4b19      	ldr	r3, [pc, #100]	@ (8009470 <xTaskRemoveFromEventList+0xb8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d903      	bls.n	800941a <xTaskRemoveFromEventList+0x62>
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009416:	4a16      	ldr	r2, [pc, #88]	@ (8009470 <xTaskRemoveFromEventList+0xb8>)
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a13      	ldr	r2, [pc, #76]	@ (8009474 <xTaskRemoveFromEventList+0xbc>)
 8009428:	441a      	add	r2, r3
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	3304      	adds	r3, #4
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f7fe fd9e 	bl	8007f72 <vListInsertEnd>
 8009436:	e005      	b.n	8009444 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	3318      	adds	r3, #24
 800943c:	4619      	mov	r1, r3
 800943e:	480e      	ldr	r0, [pc, #56]	@ (8009478 <xTaskRemoveFromEventList+0xc0>)
 8009440:	f7fe fd97 	bl	8007f72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009448:	4b0c      	ldr	r3, [pc, #48]	@ (800947c <xTaskRemoveFromEventList+0xc4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944e:	429a      	cmp	r2, r3
 8009450:	d905      	bls.n	800945e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009456:	4b0a      	ldr	r3, [pc, #40]	@ (8009480 <xTaskRemoveFromEventList+0xc8>)
 8009458:	2201      	movs	r2, #1
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	e001      	b.n	8009462 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009462:	697b      	ldr	r3, [r7, #20]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20001654 	.word	0x20001654
 8009470:	20001634 	.word	0x20001634
 8009474:	2000115c 	.word	0x2000115c
 8009478:	200015ec 	.word	0x200015ec
 800947c:	20001158 	.word	0x20001158
 8009480:	20001640 	.word	0x20001640

08009484 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800948c:	4b06      	ldr	r3, [pc, #24]	@ (80094a8 <vTaskInternalSetTimeOutState+0x24>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009494:	4b05      	ldr	r3, [pc, #20]	@ (80094ac <vTaskInternalSetTimeOutState+0x28>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	605a      	str	r2, [r3, #4]
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	20001644 	.word	0x20001644
 80094ac:	20001630 	.word	0x20001630

080094b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10d      	bne.n	80094dc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c4:	b672      	cpsid	i
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	b662      	cpsie	i
 80094d4:	613b      	str	r3, [r7, #16]
}
 80094d6:	bf00      	nop
 80094d8:	bf00      	nop
 80094da:	e7fd      	b.n	80094d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10d      	bne.n	80094fe <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e6:	b672      	cpsid	i
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	b662      	cpsie	i
 80094f6:	60fb      	str	r3, [r7, #12]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80094fe:	f000 fe7d 	bl	800a1fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009502:	4b1d      	ldr	r3, [pc, #116]	@ (8009578 <xTaskCheckForTimeOut+0xc8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d102      	bne.n	8009522 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800951c:	2300      	movs	r3, #0
 800951e:	61fb      	str	r3, [r7, #28]
 8009520:	e023      	b.n	800956a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	4b15      	ldr	r3, [pc, #84]	@ (800957c <xTaskCheckForTimeOut+0xcc>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d007      	beq.n	800953e <xTaskCheckForTimeOut+0x8e>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	429a      	cmp	r2, r3
 8009536:	d302      	bcc.n	800953e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009538:	2301      	movs	r3, #1
 800953a:	61fb      	str	r3, [r7, #28]
 800953c:	e015      	b.n	800956a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	429a      	cmp	r2, r3
 8009546:	d20b      	bcs.n	8009560 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	1ad2      	subs	r2, r2, r3
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff ff95 	bl	8009484 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800955a:	2300      	movs	r3, #0
 800955c:	61fb      	str	r3, [r7, #28]
 800955e:	e004      	b.n	800956a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009566:	2301      	movs	r3, #1
 8009568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800956a:	f000 fe7d 	bl	800a268 <vPortExitCritical>

	return xReturn;
 800956e:	69fb      	ldr	r3, [r7, #28]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3720      	adds	r7, #32
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	20001630 	.word	0x20001630
 800957c:	20001644 	.word	0x20001644

08009580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009584:	4b03      	ldr	r3, [pc, #12]	@ (8009594 <vTaskMissedYield+0x14>)
 8009586:	2201      	movs	r2, #1
 8009588:	601a      	str	r2, [r3, #0]
}
 800958a:	bf00      	nop
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	20001640 	.word	0x20001640

08009598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095a0:	f000 f852 	bl	8009648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095a4:	4b06      	ldr	r3, [pc, #24]	@ (80095c0 <prvIdleTask+0x28>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d9f9      	bls.n	80095a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80095ac:	4b05      	ldr	r3, [pc, #20]	@ (80095c4 <prvIdleTask+0x2c>)
 80095ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095bc:	e7f0      	b.n	80095a0 <prvIdleTask+0x8>
 80095be:	bf00      	nop
 80095c0:	2000115c 	.word	0x2000115c
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095ce:	2300      	movs	r3, #0
 80095d0:	607b      	str	r3, [r7, #4]
 80095d2:	e00c      	b.n	80095ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4a12      	ldr	r2, [pc, #72]	@ (8009628 <prvInitialiseTaskLists+0x60>)
 80095e0:	4413      	add	r3, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fc98 	bl	8007f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3301      	adds	r3, #1
 80095ec:	607b      	str	r3, [r7, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b37      	cmp	r3, #55	@ 0x37
 80095f2:	d9ef      	bls.n	80095d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095f4:	480d      	ldr	r0, [pc, #52]	@ (800962c <prvInitialiseTaskLists+0x64>)
 80095f6:	f7fe fc8f 	bl	8007f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095fa:	480d      	ldr	r0, [pc, #52]	@ (8009630 <prvInitialiseTaskLists+0x68>)
 80095fc:	f7fe fc8c 	bl	8007f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009600:	480c      	ldr	r0, [pc, #48]	@ (8009634 <prvInitialiseTaskLists+0x6c>)
 8009602:	f7fe fc89 	bl	8007f18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009606:	480c      	ldr	r0, [pc, #48]	@ (8009638 <prvInitialiseTaskLists+0x70>)
 8009608:	f7fe fc86 	bl	8007f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800960c:	480b      	ldr	r0, [pc, #44]	@ (800963c <prvInitialiseTaskLists+0x74>)
 800960e:	f7fe fc83 	bl	8007f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009612:	4b0b      	ldr	r3, [pc, #44]	@ (8009640 <prvInitialiseTaskLists+0x78>)
 8009614:	4a05      	ldr	r2, [pc, #20]	@ (800962c <prvInitialiseTaskLists+0x64>)
 8009616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009618:	4b0a      	ldr	r3, [pc, #40]	@ (8009644 <prvInitialiseTaskLists+0x7c>)
 800961a:	4a05      	ldr	r2, [pc, #20]	@ (8009630 <prvInitialiseTaskLists+0x68>)
 800961c:	601a      	str	r2, [r3, #0]
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	2000115c 	.word	0x2000115c
 800962c:	200015bc 	.word	0x200015bc
 8009630:	200015d0 	.word	0x200015d0
 8009634:	200015ec 	.word	0x200015ec
 8009638:	20001600 	.word	0x20001600
 800963c:	20001618 	.word	0x20001618
 8009640:	200015e4 	.word	0x200015e4
 8009644:	200015e8 	.word	0x200015e8

08009648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800964e:	e019      	b.n	8009684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009650:	f000 fdd4 	bl	800a1fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009654:	4b10      	ldr	r3, [pc, #64]	@ (8009698 <prvCheckTasksWaitingTermination+0x50>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3304      	adds	r3, #4
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe fce3 	bl	800802c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009666:	4b0d      	ldr	r3, [pc, #52]	@ (800969c <prvCheckTasksWaitingTermination+0x54>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3b01      	subs	r3, #1
 800966c:	4a0b      	ldr	r2, [pc, #44]	@ (800969c <prvCheckTasksWaitingTermination+0x54>)
 800966e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009670:	4b0b      	ldr	r3, [pc, #44]	@ (80096a0 <prvCheckTasksWaitingTermination+0x58>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3b01      	subs	r3, #1
 8009676:	4a0a      	ldr	r2, [pc, #40]	@ (80096a0 <prvCheckTasksWaitingTermination+0x58>)
 8009678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800967a:	f000 fdf5 	bl	800a268 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f810 	bl	80096a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009684:	4b06      	ldr	r3, [pc, #24]	@ (80096a0 <prvCheckTasksWaitingTermination+0x58>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e1      	bne.n	8009650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800968c:	bf00      	nop
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20001600 	.word	0x20001600
 800969c:	2000162c 	.word	0x2000162c
 80096a0:	20001614 	.word	0x20001614

080096a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d108      	bne.n	80096c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 ff9a 	bl	800a5f4 <vPortFree>
				vPortFree( pxTCB );
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 ff97 	bl	800a5f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096c6:	e01b      	b.n	8009700 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d103      	bne.n	80096da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 ff8e 	bl	800a5f4 <vPortFree>
	}
 80096d8:	e012      	b.n	8009700 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d00d      	beq.n	8009700 <prvDeleteTCB+0x5c>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	b672      	cpsid	i
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	b662      	cpsie	i
 80096f8:	60fb      	str	r3, [r7, #12]
}
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
 80096fe:	e7fd      	b.n	80096fc <prvDeleteTCB+0x58>
	}
 8009700:	bf00      	nop
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800970e:	4b0c      	ldr	r3, [pc, #48]	@ (8009740 <prvResetNextTaskUnblockTime+0x38>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d104      	bne.n	8009722 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009718:	4b0a      	ldr	r3, [pc, #40]	@ (8009744 <prvResetNextTaskUnblockTime+0x3c>)
 800971a:	f04f 32ff 	mov.w	r2, #4294967295
 800971e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009720:	e008      	b.n	8009734 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009722:	4b07      	ldr	r3, [pc, #28]	@ (8009740 <prvResetNextTaskUnblockTime+0x38>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	4a04      	ldr	r2, [pc, #16]	@ (8009744 <prvResetNextTaskUnblockTime+0x3c>)
 8009732:	6013      	str	r3, [r2, #0]
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	200015e4 	.word	0x200015e4
 8009744:	2000164c 	.word	0x2000164c

08009748 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800974e:	4b0b      	ldr	r3, [pc, #44]	@ (800977c <xTaskGetSchedulerState+0x34>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009756:	2301      	movs	r3, #1
 8009758:	607b      	str	r3, [r7, #4]
 800975a:	e008      	b.n	800976e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800975c:	4b08      	ldr	r3, [pc, #32]	@ (8009780 <xTaskGetSchedulerState+0x38>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009764:	2302      	movs	r3, #2
 8009766:	607b      	str	r3, [r7, #4]
 8009768:	e001      	b.n	800976e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800976a:	2300      	movs	r3, #0
 800976c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800976e:	687b      	ldr	r3, [r7, #4]
	}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	20001638 	.word	0x20001638
 8009780:	20001654 	.word	0x20001654

08009784 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d05c      	beq.n	8009854 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800979a:	4b31      	ldr	r3, [pc, #196]	@ (8009860 <xTaskPriorityDisinherit+0xdc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d00d      	beq.n	80097c0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a8:	b672      	cpsid	i
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	b662      	cpsie	i
 80097b8:	60fb      	str	r3, [r7, #12]
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	e7fd      	b.n	80097bc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10d      	bne.n	80097e4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097cc:	b672      	cpsid	i
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	b662      	cpsie	i
 80097dc:	60bb      	str	r3, [r7, #8]
}
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
 80097e2:	e7fd      	b.n	80097e0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e8:	1e5a      	subs	r2, r3, #1
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d02c      	beq.n	8009854 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d128      	bne.n	8009854 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	3304      	adds	r3, #4
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe fc10 	bl	800802c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009818:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009824:	4b0f      	ldr	r3, [pc, #60]	@ (8009864 <xTaskPriorityDisinherit+0xe0>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d903      	bls.n	8009834 <xTaskPriorityDisinherit+0xb0>
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009830:	4a0c      	ldr	r2, [pc, #48]	@ (8009864 <xTaskPriorityDisinherit+0xe0>)
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4a09      	ldr	r2, [pc, #36]	@ (8009868 <xTaskPriorityDisinherit+0xe4>)
 8009842:	441a      	add	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	3304      	adds	r3, #4
 8009848:	4619      	mov	r1, r3
 800984a:	4610      	mov	r0, r2
 800984c:	f7fe fb91 	bl	8007f72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009854:	697b      	ldr	r3, [r7, #20]
	}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20001158 	.word	0x20001158
 8009864:	20001634 	.word	0x20001634
 8009868:	2000115c 	.word	0x2000115c

0800986c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009876:	4b21      	ldr	r3, [pc, #132]	@ (80098fc <prvAddCurrentTaskToDelayedList+0x90>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800987c:	4b20      	ldr	r3, [pc, #128]	@ (8009900 <prvAddCurrentTaskToDelayedList+0x94>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3304      	adds	r3, #4
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fbd2 	bl	800802c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988e:	d10a      	bne.n	80098a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d007      	beq.n	80098a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009896:	4b1a      	ldr	r3, [pc, #104]	@ (8009900 <prvAddCurrentTaskToDelayedList+0x94>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3304      	adds	r3, #4
 800989c:	4619      	mov	r1, r3
 800989e:	4819      	ldr	r0, [pc, #100]	@ (8009904 <prvAddCurrentTaskToDelayedList+0x98>)
 80098a0:	f7fe fb67 	bl	8007f72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098a4:	e026      	b.n	80098f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4413      	add	r3, r2
 80098ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098ae:	4b14      	ldr	r3, [pc, #80]	@ (8009900 <prvAddCurrentTaskToDelayedList+0x94>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d209      	bcs.n	80098d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098be:	4b12      	ldr	r3, [pc, #72]	@ (8009908 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009900 <prvAddCurrentTaskToDelayedList+0x94>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3304      	adds	r3, #4
 80098c8:	4619      	mov	r1, r3
 80098ca:	4610      	mov	r0, r2
 80098cc:	f7fe fb75 	bl	8007fba <vListInsert>
}
 80098d0:	e010      	b.n	80098f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098d2:	4b0e      	ldr	r3, [pc, #56]	@ (800990c <prvAddCurrentTaskToDelayedList+0xa0>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009900 <prvAddCurrentTaskToDelayedList+0x94>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3304      	adds	r3, #4
 80098dc:	4619      	mov	r1, r3
 80098de:	4610      	mov	r0, r2
 80098e0:	f7fe fb6b 	bl	8007fba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009910 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d202      	bcs.n	80098f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098ee:	4a08      	ldr	r2, [pc, #32]	@ (8009910 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	6013      	str	r3, [r2, #0]
}
 80098f4:	bf00      	nop
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	20001630 	.word	0x20001630
 8009900:	20001158 	.word	0x20001158
 8009904:	20001618 	.word	0x20001618
 8009908:	200015e8 	.word	0x200015e8
 800990c:	200015e4 	.word	0x200015e4
 8009910:	2000164c 	.word	0x2000164c

08009914 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08a      	sub	sp, #40	@ 0x28
 8009918:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800991a:	2300      	movs	r3, #0
 800991c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800991e:	f000 fb21 	bl	8009f64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009922:	4b1e      	ldr	r3, [pc, #120]	@ (800999c <xTimerCreateTimerTask+0x88>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d021      	beq.n	800996e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800992e:	2300      	movs	r3, #0
 8009930:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009932:	1d3a      	adds	r2, r7, #4
 8009934:	f107 0108 	add.w	r1, r7, #8
 8009938:	f107 030c 	add.w	r3, r7, #12
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe fad1 	bl	8007ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	9202      	str	r2, [sp, #8]
 800994a:	9301      	str	r3, [sp, #4]
 800994c:	2302      	movs	r3, #2
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	2300      	movs	r3, #0
 8009952:	460a      	mov	r2, r1
 8009954:	4912      	ldr	r1, [pc, #72]	@ (80099a0 <xTimerCreateTimerTask+0x8c>)
 8009956:	4813      	ldr	r0, [pc, #76]	@ (80099a4 <xTimerCreateTimerTask+0x90>)
 8009958:	f7ff f8ac 	bl	8008ab4 <xTaskCreateStatic>
 800995c:	4603      	mov	r3, r0
 800995e:	4a12      	ldr	r2, [pc, #72]	@ (80099a8 <xTimerCreateTimerTask+0x94>)
 8009960:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009962:	4b11      	ldr	r3, [pc, #68]	@ (80099a8 <xTimerCreateTimerTask+0x94>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800996a:	2301      	movs	r3, #1
 800996c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10d      	bne.n	8009990 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009978:	b672      	cpsid	i
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	b662      	cpsie	i
 8009988:	613b      	str	r3, [r7, #16]
}
 800998a:	bf00      	nop
 800998c:	bf00      	nop
 800998e:	e7fd      	b.n	800998c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009990:	697b      	ldr	r3, [r7, #20]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20001688 	.word	0x20001688
 80099a0:	0800aba4 	.word	0x0800aba4
 80099a4:	08009aed 	.word	0x08009aed
 80099a8:	2000168c 	.word	0x2000168c

080099ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	@ 0x28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10d      	bne.n	80099e0 <xTimerGenericCommand+0x34>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c8:	b672      	cpsid	i
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	b662      	cpsie	i
 80099d8:	623b      	str	r3, [r7, #32]
}
 80099da:	bf00      	nop
 80099dc:	bf00      	nop
 80099de:	e7fd      	b.n	80099dc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099e0:	4b19      	ldr	r3, [pc, #100]	@ (8009a48 <xTimerGenericCommand+0x9c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d02a      	beq.n	8009a3e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	dc18      	bgt.n	8009a2c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099fa:	f7ff fea5 	bl	8009748 <xTaskGetSchedulerState>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d109      	bne.n	8009a18 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a04:	4b10      	ldr	r3, [pc, #64]	@ (8009a48 <xTimerGenericCommand+0x9c>)
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	f107 0110 	add.w	r1, r7, #16
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a10:	f7fe fc4c 	bl	80082ac <xQueueGenericSend>
 8009a14:	6278      	str	r0, [r7, #36]	@ 0x24
 8009a16:	e012      	b.n	8009a3e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a18:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <xTimerGenericCommand+0x9c>)
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	f107 0110 	add.w	r1, r7, #16
 8009a20:	2300      	movs	r3, #0
 8009a22:	2200      	movs	r2, #0
 8009a24:	f7fe fc42 	bl	80082ac <xQueueGenericSend>
 8009a28:	6278      	str	r0, [r7, #36]	@ 0x24
 8009a2a:	e008      	b.n	8009a3e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a2c:	4b06      	ldr	r3, [pc, #24]	@ (8009a48 <xTimerGenericCommand+0x9c>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	f107 0110 	add.w	r1, r7, #16
 8009a34:	2300      	movs	r3, #0
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	f7fe fd42 	bl	80084c0 <xQueueGenericSendFromISR>
 8009a3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3728      	adds	r7, #40	@ 0x28
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20001688 	.word	0x20001688

08009a4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a56:	4b24      	ldr	r3, [pc, #144]	@ (8009ae8 <prvProcessExpiredTimer+0x9c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fe fae1 	bl	800802c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d025      	beq.n	8009ac4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	699a      	ldr	r2, [r3, #24]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	18d1      	adds	r1, r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	6978      	ldr	r0, [r7, #20]
 8009a86:	f000 f8d7 	bl	8009c38 <prvInsertTimerInActiveList>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d022      	beq.n	8009ad6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a90:	2300      	movs	r3, #0
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	2300      	movs	r3, #0
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6978      	ldr	r0, [r7, #20]
 8009a9c:	f7ff ff86 	bl	80099ac <xTimerGenericCommand>
 8009aa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d116      	bne.n	8009ad6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aac:	b672      	cpsid	i
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	b662      	cpsie	i
 8009abc:	60fb      	str	r3, [r7, #12]
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	e7fd      	b.n	8009ac0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aca:	f023 0301 	bic.w	r3, r3, #1
 8009ace:	b2da      	uxtb	r2, r3
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	6978      	ldr	r0, [r7, #20]
 8009adc:	4798      	blx	r3
}
 8009ade:	bf00      	nop
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20001680 	.word	0x20001680

08009aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009af4:	f107 0308 	add.w	r3, r7, #8
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 f859 	bl	8009bb0 <prvGetNextExpireTime>
 8009afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	4619      	mov	r1, r3
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f805 	bl	8009b14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b0a:	f000 f8d7 	bl	8009cbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b0e:	bf00      	nop
 8009b10:	e7f0      	b.n	8009af4 <prvTimerTask+0x8>
	...

08009b14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b1e:	f7ff fa1b 	bl	8008f58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b22:	f107 0308 	add.w	r3, r7, #8
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 f866 	bl	8009bf8 <prvSampleTimeNow>
 8009b2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d130      	bne.n	8009b96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10a      	bne.n	8009b50 <prvProcessTimerOrBlockTask+0x3c>
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d806      	bhi.n	8009b50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b42:	f7ff fa17 	bl	8008f74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff ff7f 	bl	8009a4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b4e:	e024      	b.n	8009b9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d008      	beq.n	8009b68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b56:	4b13      	ldr	r3, [pc, #76]	@ (8009ba4 <prvProcessTimerOrBlockTask+0x90>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <prvProcessTimerOrBlockTask+0x50>
 8009b60:	2301      	movs	r3, #1
 8009b62:	e000      	b.n	8009b66 <prvProcessTimerOrBlockTask+0x52>
 8009b64:	2300      	movs	r3, #0
 8009b66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b68:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba8 <prvProcessTimerOrBlockTask+0x94>)
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4619      	mov	r1, r3
 8009b76:	f7fe ff69 	bl	8008a4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b7a:	f7ff f9fb 	bl	8008f74 <xTaskResumeAll>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b84:	4b09      	ldr	r3, [pc, #36]	@ (8009bac <prvProcessTimerOrBlockTask+0x98>)
 8009b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	f3bf 8f6f 	isb	sy
}
 8009b94:	e001      	b.n	8009b9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b96:	f7ff f9ed 	bl	8008f74 <xTaskResumeAll>
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20001684 	.word	0x20001684
 8009ba8:	20001688 	.word	0x20001688
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf4 <prvGetNextExpireTime+0x44>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <prvGetNextExpireTime+0x16>
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	e000      	b.n	8009bc8 <prvGetNextExpireTime+0x18>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d105      	bne.n	8009be0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bd4:	4b07      	ldr	r3, [pc, #28]	@ (8009bf4 <prvGetNextExpireTime+0x44>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	60fb      	str	r3, [r7, #12]
 8009bde:	e001      	b.n	8009be4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009be4:	68fb      	ldr	r3, [r7, #12]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20001680 	.word	0x20001680

08009bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c00:	f7ff fa58 	bl	80090b4 <xTaskGetTickCount>
 8009c04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c06:	4b0b      	ldr	r3, [pc, #44]	@ (8009c34 <prvSampleTimeNow+0x3c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d205      	bcs.n	8009c1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c10:	f000 f940 	bl	8009e94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	e002      	b.n	8009c22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c22:	4a04      	ldr	r2, [pc, #16]	@ (8009c34 <prvSampleTimeNow+0x3c>)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c28:	68fb      	ldr	r3, [r7, #12]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	20001690 	.word	0x20001690

08009c38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d812      	bhi.n	8009c84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	1ad2      	subs	r2, r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d302      	bcc.n	8009c72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	e01b      	b.n	8009caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c72:	4b10      	ldr	r3, [pc, #64]	@ (8009cb4 <prvInsertTimerInActiveList+0x7c>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3304      	adds	r3, #4
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	f7fe f99c 	bl	8007fba <vListInsert>
 8009c82:	e012      	b.n	8009caa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d206      	bcs.n	8009c9a <prvInsertTimerInActiveList+0x62>
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d302      	bcc.n	8009c9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c94:	2301      	movs	r3, #1
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	e007      	b.n	8009caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c9a:	4b07      	ldr	r3, [pc, #28]	@ (8009cb8 <prvInsertTimerInActiveList+0x80>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	f7fe f988 	bl	8007fba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009caa:	697b      	ldr	r3, [r7, #20]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20001684 	.word	0x20001684
 8009cb8:	20001680 	.word	0x20001680

08009cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08e      	sub	sp, #56	@ 0x38
 8009cc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cc2:	e0d4      	b.n	8009e6e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	da1b      	bge.n	8009d02 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cca:	1d3b      	adds	r3, r7, #4
 8009ccc:	3304      	adds	r3, #4
 8009cce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10d      	bne.n	8009cf2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cda:	b672      	cpsid	i
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	b662      	cpsie	i
 8009cea:	61fb      	str	r3, [r7, #28]
}
 8009cec:	bf00      	nop
 8009cee:	bf00      	nop
 8009cf0:	e7fd      	b.n	8009cee <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf8:	6850      	ldr	r0, [r2, #4]
 8009cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cfc:	6892      	ldr	r2, [r2, #8]
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f2c0 80b2 	blt.w	8009e6e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d004      	beq.n	8009d20 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d18:	3304      	adds	r3, #4
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe f986 	bl	800802c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d20:	463b      	mov	r3, r7
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff ff68 	bl	8009bf8 <prvSampleTimeNow>
 8009d28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b09      	cmp	r3, #9
 8009d2e:	f200 809b 	bhi.w	8009e68 <prvProcessReceivedCommands+0x1ac>
 8009d32:	a201      	add	r2, pc, #4	@ (adr r2, 8009d38 <prvProcessReceivedCommands+0x7c>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d61 	.word	0x08009d61
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d61 	.word	0x08009d61
 8009d44:	08009ddb 	.word	0x08009ddb
 8009d48:	08009def 	.word	0x08009def
 8009d4c:	08009e3f 	.word	0x08009e3f
 8009d50:	08009d61 	.word	0x08009d61
 8009d54:	08009d61 	.word	0x08009d61
 8009d58:	08009ddb 	.word	0x08009ddb
 8009d5c:	08009def 	.word	0x08009def
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d66:	f043 0301 	orr.w	r3, r3, #1
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	18d1      	adds	r1, r2, r3
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d80:	f7ff ff5a 	bl	8009c38 <prvInsertTimerInActiveList>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d070      	beq.n	8009e6c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d065      	beq.n	8009e6c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	441a      	add	r2, r3
 8009da8:	2300      	movs	r3, #0
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	2300      	movs	r3, #0
 8009dae:	2100      	movs	r1, #0
 8009db0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009db2:	f7ff fdfb 	bl	80099ac <xTimerGenericCommand>
 8009db6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d156      	bne.n	8009e6c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc2:	b672      	cpsid	i
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	b662      	cpsie	i
 8009dd2:	61bb      	str	r3, [r7, #24]
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009de0:	f023 0301 	bic.w	r3, r3, #1
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009dec:	e03f      	b.n	8009e6e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009df4:	f043 0301 	orr.w	r3, r3, #1
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e04:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10d      	bne.n	8009e2a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e12:	b672      	cpsid	i
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	b662      	cpsie	i
 8009e22:	617b      	str	r3, [r7, #20]
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop
 8009e28:	e7fd      	b.n	8009e26 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2c:	699a      	ldr	r2, [r3, #24]
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e30:	18d1      	adds	r1, r2, r3
 8009e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e38:	f7ff fefe 	bl	8009c38 <prvInsertTimerInActiveList>
					break;
 8009e3c:	e017      	b.n	8009e6e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e44:	f003 0302 	and.w	r3, r3, #2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d103      	bne.n	8009e54 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e4e:	f000 fbd1 	bl	800a5f4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e52:	e00c      	b.n	8009e6e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e5a:	f023 0301 	bic.w	r3, r3, #1
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e66:	e002      	b.n	8009e6e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009e68:	bf00      	nop
 8009e6a:	e000      	b.n	8009e6e <prvProcessReceivedCommands+0x1b2>
					break;
 8009e6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e6e:	4b08      	ldr	r3, [pc, #32]	@ (8009e90 <prvProcessReceivedCommands+0x1d4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	1d39      	adds	r1, r7, #4
 8009e74:	2200      	movs	r2, #0
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fe fbc6 	bl	8008608 <xQueueReceive>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f47f af20 	bne.w	8009cc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	3730      	adds	r7, #48	@ 0x30
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20001688 	.word	0x20001688

08009e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b088      	sub	sp, #32
 8009e98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e9a:	e04b      	b.n	8009f34 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8009f5c <prvSwitchTimerLists+0xc8>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8009f5c <prvSwitchTimerLists+0xc8>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fe f8b9 	bl	800802c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d031      	beq.n	8009f34 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d90e      	bls.n	8009f00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eee:	4b1b      	ldr	r3, [pc, #108]	@ (8009f5c <prvSwitchTimerLists+0xc8>)
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7fe f85e 	bl	8007fba <vListInsert>
 8009efe:	e019      	b.n	8009f34 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f00:	2300      	movs	r3, #0
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	2300      	movs	r3, #0
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	2100      	movs	r1, #0
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f7ff fd4e 	bl	80099ac <xTimerGenericCommand>
 8009f10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10d      	bne.n	8009f34 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1c:	b672      	cpsid	i
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	b662      	cpsie	i
 8009f2c:	603b      	str	r3, [r7, #0]
}
 8009f2e:	bf00      	nop
 8009f30:	bf00      	nop
 8009f32:	e7fd      	b.n	8009f30 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f34:	4b09      	ldr	r3, [pc, #36]	@ (8009f5c <prvSwitchTimerLists+0xc8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1ae      	bne.n	8009e9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f3e:	4b07      	ldr	r3, [pc, #28]	@ (8009f5c <prvSwitchTimerLists+0xc8>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f44:	4b06      	ldr	r3, [pc, #24]	@ (8009f60 <prvSwitchTimerLists+0xcc>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a04      	ldr	r2, [pc, #16]	@ (8009f5c <prvSwitchTimerLists+0xc8>)
 8009f4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f4c:	4a04      	ldr	r2, [pc, #16]	@ (8009f60 <prvSwitchTimerLists+0xcc>)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	6013      	str	r3, [r2, #0]
}
 8009f52:	bf00      	nop
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20001680 	.word	0x20001680
 8009f60:	20001684 	.word	0x20001684

08009f64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f6a:	f000 f947 	bl	800a1fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f6e:	4b15      	ldr	r3, [pc, #84]	@ (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d120      	bne.n	8009fb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f76:	4814      	ldr	r0, [pc, #80]	@ (8009fc8 <prvCheckForValidListAndQueue+0x64>)
 8009f78:	f7fd ffce 	bl	8007f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f7c:	4813      	ldr	r0, [pc, #76]	@ (8009fcc <prvCheckForValidListAndQueue+0x68>)
 8009f7e:	f7fd ffcb 	bl	8007f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f82:	4b13      	ldr	r3, [pc, #76]	@ (8009fd0 <prvCheckForValidListAndQueue+0x6c>)
 8009f84:	4a10      	ldr	r2, [pc, #64]	@ (8009fc8 <prvCheckForValidListAndQueue+0x64>)
 8009f86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f88:	4b12      	ldr	r3, [pc, #72]	@ (8009fd4 <prvCheckForValidListAndQueue+0x70>)
 8009f8a:	4a10      	ldr	r2, [pc, #64]	@ (8009fcc <prvCheckForValidListAndQueue+0x68>)
 8009f8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f8e:	2300      	movs	r3, #0
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	4b11      	ldr	r3, [pc, #68]	@ (8009fd8 <prvCheckForValidListAndQueue+0x74>)
 8009f94:	4a11      	ldr	r2, [pc, #68]	@ (8009fdc <prvCheckForValidListAndQueue+0x78>)
 8009f96:	2110      	movs	r1, #16
 8009f98:	200a      	movs	r0, #10
 8009f9a:	f7fe f8dd 	bl	8008158 <xQueueGenericCreateStatic>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4a08      	ldr	r2, [pc, #32]	@ (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fa4:	4b07      	ldr	r3, [pc, #28]	@ (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fac:	4b05      	ldr	r3, [pc, #20]	@ (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	490b      	ldr	r1, [pc, #44]	@ (8009fe0 <prvCheckForValidListAndQueue+0x7c>)
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fd20 	bl	80089f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fb8:	f000 f956 	bl	800a268 <vPortExitCritical>
}
 8009fbc:	bf00      	nop
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20001688 	.word	0x20001688
 8009fc8:	20001658 	.word	0x20001658
 8009fcc:	2000166c 	.word	0x2000166c
 8009fd0:	20001680 	.word	0x20001680
 8009fd4:	20001684 	.word	0x20001684
 8009fd8:	20001734 	.word	0x20001734
 8009fdc:	20001694 	.word	0x20001694
 8009fe0:	0800abac 	.word	0x0800abac

08009fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3b04      	subs	r3, #4
 8009ff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3b04      	subs	r3, #4
 800a002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3b04      	subs	r3, #4
 800a012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a014:	4a0c      	ldr	r2, [pc, #48]	@ (800a048 <pxPortInitialiseStack+0x64>)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3b14      	subs	r3, #20
 800a01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3b04      	subs	r3, #4
 800a02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f06f 0202 	mvn.w	r2, #2
 800a032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3b20      	subs	r3, #32
 800a038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a03a:	68fb      	ldr	r3, [r7, #12]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	0800a04d 	.word	0x0800a04d

0800a04c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a056:	4b15      	ldr	r3, [pc, #84]	@ (800a0ac <prvTaskExitError+0x60>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d00d      	beq.n	800a07c <prvTaskExitError+0x30>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a064:	b672      	cpsid	i
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	b662      	cpsie	i
 800a074:	60fb      	str	r3, [r7, #12]
}
 800a076:	bf00      	nop
 800a078:	bf00      	nop
 800a07a:	e7fd      	b.n	800a078 <prvTaskExitError+0x2c>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a080:	b672      	cpsid	i
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	b662      	cpsie	i
 800a090:	60bb      	str	r3, [r7, #8]
}
 800a092:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a094:	bf00      	nop
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d0fc      	beq.n	800a096 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	2000000c 	.word	0x2000000c

0800a0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0b0:	4b07      	ldr	r3, [pc, #28]	@ (800a0d0 <pxCurrentTCBConst2>)
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	6808      	ldr	r0, [r1, #0]
 800a0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	f380 8809 	msr	PSP, r0
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f04f 0000 	mov.w	r0, #0
 800a0c6:	f380 8811 	msr	BASEPRI, r0
 800a0ca:	4770      	bx	lr
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst2>:
 800a0d0:	20001158 	.word	0x20001158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0d8:	4808      	ldr	r0, [pc, #32]	@ (800a0fc <prvPortStartFirstTask+0x24>)
 800a0da:	6800      	ldr	r0, [r0, #0]
 800a0dc:	6800      	ldr	r0, [r0, #0]
 800a0de:	f380 8808 	msr	MSP, r0
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8814 	msr	CONTROL, r0
 800a0ea:	b662      	cpsie	i
 800a0ec:	b661      	cpsie	f
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	df00      	svc	0
 800a0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0fa:	bf00      	nop
 800a0fc:	e000ed08 	.word	0xe000ed08

0800a100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a106:	4b37      	ldr	r3, [pc, #220]	@ (800a1e4 <xPortStartScheduler+0xe4>)
 800a108:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	22ff      	movs	r2, #255	@ 0xff
 800a116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	4b2f      	ldr	r3, [pc, #188]	@ (800a1e8 <xPortStartScheduler+0xe8>)
 800a12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a12e:	4b2f      	ldr	r3, [pc, #188]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a130:	2207      	movs	r2, #7
 800a132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a134:	e009      	b.n	800a14a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a136:	4b2d      	ldr	r3, [pc, #180]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	4a2b      	ldr	r2, [pc, #172]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	b2db      	uxtb	r3, r3
 800a148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a152:	2b80      	cmp	r3, #128	@ 0x80
 800a154:	d0ef      	beq.n	800a136 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a156:	4b25      	ldr	r3, [pc, #148]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f1c3 0307 	rsb	r3, r3, #7
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d00d      	beq.n	800a17e <xPortStartScheduler+0x7e>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a166:	b672      	cpsid	i
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	b662      	cpsie	i
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a17e:	4b1b      	ldr	r3, [pc, #108]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	4a19      	ldr	r2, [pc, #100]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a186:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a188:	4b18      	ldr	r3, [pc, #96]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a190:	4a16      	ldr	r2, [pc, #88]	@ (800a1ec <xPortStartScheduler+0xec>)
 800a192:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	b2da      	uxtb	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a19c:	4b14      	ldr	r3, [pc, #80]	@ (800a1f0 <xPortStartScheduler+0xf0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a13      	ldr	r2, [pc, #76]	@ (800a1f0 <xPortStartScheduler+0xf0>)
 800a1a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a1a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1a8:	4b11      	ldr	r3, [pc, #68]	@ (800a1f0 <xPortStartScheduler+0xf0>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a10      	ldr	r2, [pc, #64]	@ (800a1f0 <xPortStartScheduler+0xf0>)
 800a1ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a1b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1b4:	f000 f8dc 	bl	800a370 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f4 <xPortStartScheduler+0xf4>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1be:	f000 f8fb 	bl	800a3b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f8 <xPortStartScheduler+0xf8>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a1f8 <xPortStartScheduler+0xf8>)
 800a1c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a1cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1ce:	f7ff ff83 	bl	800a0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1d2:	f7ff f83b 	bl	800924c <vTaskSwitchContext>
	prvTaskExitError();
 800a1d6:	f7ff ff39 	bl	800a04c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000e400 	.word	0xe000e400
 800a1e8:	20001784 	.word	0x20001784
 800a1ec:	20001788 	.word	0x20001788
 800a1f0:	e000ed20 	.word	0xe000ed20
 800a1f4:	2000000c 	.word	0x2000000c
 800a1f8:	e000ef34 	.word	0xe000ef34

0800a1fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a206:	b672      	cpsid	i
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	b662      	cpsie	i
 800a216:	607b      	str	r3, [r7, #4]
}
 800a218:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a21a:	4b11      	ldr	r3, [pc, #68]	@ (800a260 <vPortEnterCritical+0x64>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3301      	adds	r3, #1
 800a220:	4a0f      	ldr	r2, [pc, #60]	@ (800a260 <vPortEnterCritical+0x64>)
 800a222:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a224:	4b0e      	ldr	r3, [pc, #56]	@ (800a260 <vPortEnterCritical+0x64>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d112      	bne.n	800a252 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a22c:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <vPortEnterCritical+0x68>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00d      	beq.n	800a252 <vPortEnterCritical+0x56>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	b672      	cpsid	i
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	b662      	cpsie	i
 800a24a:	603b      	str	r3, [r7, #0]
}
 800a24c:	bf00      	nop
 800a24e:	bf00      	nop
 800a250:	e7fd      	b.n	800a24e <vPortEnterCritical+0x52>
	}
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	2000000c 	.word	0x2000000c
 800a264:	e000ed04 	.word	0xe000ed04

0800a268 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a26e:	4b13      	ldr	r3, [pc, #76]	@ (800a2bc <vPortExitCritical+0x54>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10d      	bne.n	800a292 <vPortExitCritical+0x2a>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	b672      	cpsid	i
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	b662      	cpsie	i
 800a28a:	607b      	str	r3, [r7, #4]
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	e7fd      	b.n	800a28e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a292:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <vPortExitCritical+0x54>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3b01      	subs	r3, #1
 800a298:	4a08      	ldr	r2, [pc, #32]	@ (800a2bc <vPortExitCritical+0x54>)
 800a29a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a29c:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <vPortExitCritical+0x54>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <vPortExitCritical+0x48>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f383 8811 	msr	BASEPRI, r3
}
 800a2ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	2000000c 	.word	0x2000000c

0800a2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2c0:	f3ef 8009 	mrs	r0, PSP
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4b15      	ldr	r3, [pc, #84]	@ (800a320 <pxCurrentTCBConst>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	f01e 0f10 	tst.w	lr, #16
 800a2d0:	bf08      	it	eq
 800a2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2da:	6010      	str	r0, [r2, #0]
 800a2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a2e4:	b672      	cpsid	i
 800a2e6:	f380 8811 	msr	BASEPRI, r0
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	b662      	cpsie	i
 800a2f4:	f7fe ffaa 	bl	800924c <vTaskSwitchContext>
 800a2f8:	f04f 0000 	mov.w	r0, #0
 800a2fc:	f380 8811 	msr	BASEPRI, r0
 800a300:	bc09      	pop	{r0, r3}
 800a302:	6819      	ldr	r1, [r3, #0]
 800a304:	6808      	ldr	r0, [r1, #0]
 800a306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30a:	f01e 0f10 	tst.w	lr, #16
 800a30e:	bf08      	it	eq
 800a310:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a314:	f380 8809 	msr	PSP, r0
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop

0800a320 <pxCurrentTCBConst>:
 800a320:	20001158 	.word	0x20001158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	b672      	cpsid	i
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	b662      	cpsie	i
 800a342:	607b      	str	r3, [r7, #4]
}
 800a344:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a346:	f7fe fec5 	bl	80090d4 <xTaskIncrementTick>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a350:	4b06      	ldr	r3, [pc, #24]	@ (800a36c <xPortSysTickHandler+0x44>)
 800a352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	2300      	movs	r3, #0
 800a35a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	f383 8811 	msr	BASEPRI, r3
}
 800a362:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a374:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <vPortSetupTimerInterrupt+0x34>)
 800a376:	2200      	movs	r2, #0
 800a378:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a37a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a8 <vPortSetupTimerInterrupt+0x38>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a380:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ac <vPortSetupTimerInterrupt+0x3c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a0a      	ldr	r2, [pc, #40]	@ (800a3b0 <vPortSetupTimerInterrupt+0x40>)
 800a386:	fba2 2303 	umull	r2, r3, r2, r3
 800a38a:	099b      	lsrs	r3, r3, #6
 800a38c:	4a09      	ldr	r2, [pc, #36]	@ (800a3b4 <vPortSetupTimerInterrupt+0x44>)
 800a38e:	3b01      	subs	r3, #1
 800a390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a392:	4b04      	ldr	r3, [pc, #16]	@ (800a3a4 <vPortSetupTimerInterrupt+0x34>)
 800a394:	2207      	movs	r2, #7
 800a396:	601a      	str	r2, [r3, #0]
}
 800a398:	bf00      	nop
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	e000e010 	.word	0xe000e010
 800a3a8:	e000e018 	.word	0xe000e018
 800a3ac:	20000000 	.word	0x20000000
 800a3b0:	10624dd3 	.word	0x10624dd3
 800a3b4:	e000e014 	.word	0xe000e014

0800a3b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a3c8 <vPortEnableVFP+0x10>
 800a3bc:	6801      	ldr	r1, [r0, #0]
 800a3be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a3c2:	6001      	str	r1, [r0, #0]
 800a3c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3c6:	bf00      	nop
 800a3c8:	e000ed88 	.word	0xe000ed88

0800a3cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3d2:	f3ef 8305 	mrs	r3, IPSR
 800a3d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2b0f      	cmp	r3, #15
 800a3dc:	d917      	bls.n	800a40e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3de:	4a1a      	ldr	r2, [pc, #104]	@ (800a448 <vPortValidateInterruptPriority+0x7c>)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3e8:	4b18      	ldr	r3, [pc, #96]	@ (800a44c <vPortValidateInterruptPriority+0x80>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	7afa      	ldrb	r2, [r7, #11]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d20d      	bcs.n	800a40e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f6:	b672      	cpsid	i
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	b662      	cpsie	i
 800a406:	607b      	str	r3, [r7, #4]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a40e:	4b10      	ldr	r3, [pc, #64]	@ (800a450 <vPortValidateInterruptPriority+0x84>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a416:	4b0f      	ldr	r3, [pc, #60]	@ (800a454 <vPortValidateInterruptPriority+0x88>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d90d      	bls.n	800a43a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	b672      	cpsid	i
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	b662      	cpsie	i
 800a432:	603b      	str	r3, [r7, #0]
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	e7fd      	b.n	800a436 <vPortValidateInterruptPriority+0x6a>
	}
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	e000e3f0 	.word	0xe000e3f0
 800a44c:	20001784 	.word	0x20001784
 800a450:	e000ed0c 	.word	0xe000ed0c
 800a454:	20001788 	.word	0x20001788

0800a458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08a      	sub	sp, #40	@ 0x28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a460:	2300      	movs	r3, #0
 800a462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a464:	f7fe fd78 	bl	8008f58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a468:	4b5d      	ldr	r3, [pc, #372]	@ (800a5e0 <pvPortMalloc+0x188>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a470:	f000 f920 	bl	800a6b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a474:	4b5b      	ldr	r3, [pc, #364]	@ (800a5e4 <pvPortMalloc+0x18c>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4013      	ands	r3, r2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f040 8094 	bne.w	800a5aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d020      	beq.n	800a4ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a488:	2208      	movs	r2, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4413      	add	r3, r2
 800a48e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f003 0307 	and.w	r3, r3, #7
 800a496:	2b00      	cmp	r3, #0
 800a498:	d017      	beq.n	800a4ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f023 0307 	bic.w	r3, r3, #7
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00d      	beq.n	800a4ca <pvPortMalloc+0x72>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b2:	b672      	cpsid	i
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	b662      	cpsie	i
 800a4c2:	617b      	str	r3, [r7, #20]
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop
 800a4c8:	e7fd      	b.n	800a4c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d06c      	beq.n	800a5aa <pvPortMalloc+0x152>
 800a4d0:	4b45      	ldr	r3, [pc, #276]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d867      	bhi.n	800a5aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4da:	4b44      	ldr	r3, [pc, #272]	@ (800a5ec <pvPortMalloc+0x194>)
 800a4dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4de:	4b43      	ldr	r3, [pc, #268]	@ (800a5ec <pvPortMalloc+0x194>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4e4:	e004      	b.n	800a4f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d903      	bls.n	800a502 <pvPortMalloc+0xaa>
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1f1      	bne.n	800a4e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a502:	4b37      	ldr	r3, [pc, #220]	@ (800a5e0 <pvPortMalloc+0x188>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a508:	429a      	cmp	r2, r3
 800a50a:	d04e      	beq.n	800a5aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2208      	movs	r2, #8
 800a512:	4413      	add	r3, r2
 800a514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	1ad2      	subs	r2, r2, r3
 800a526:	2308      	movs	r3, #8
 800a528:	005b      	lsls	r3, r3, #1
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d922      	bls.n	800a574 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a52e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4413      	add	r3, r2
 800a534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	f003 0307 	and.w	r3, r3, #7
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00d      	beq.n	800a55c <pvPortMalloc+0x104>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a544:	b672      	cpsid	i
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	b662      	cpsie	i
 800a554:	613b      	str	r3, [r7, #16]
}
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	e7fd      	b.n	800a558 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	1ad2      	subs	r2, r2, r3
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a56e:	69b8      	ldr	r0, [r7, #24]
 800a570:	f000 f902 	bl	800a778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a574:	4b1c      	ldr	r3, [pc, #112]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	4a1a      	ldr	r2, [pc, #104]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a580:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a582:	4b19      	ldr	r3, [pc, #100]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	4b1a      	ldr	r3, [pc, #104]	@ (800a5f0 <pvPortMalloc+0x198>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d203      	bcs.n	800a596 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a58e:	4b16      	ldr	r3, [pc, #88]	@ (800a5e8 <pvPortMalloc+0x190>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a17      	ldr	r2, [pc, #92]	@ (800a5f0 <pvPortMalloc+0x198>)
 800a594:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	4b12      	ldr	r3, [pc, #72]	@ (800a5e4 <pvPortMalloc+0x18c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5aa:	f7fe fce3 	bl	8008f74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00d      	beq.n	800a5d4 <pvPortMalloc+0x17c>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5bc:	b672      	cpsid	i
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	b662      	cpsie	i
 800a5cc:	60fb      	str	r3, [r7, #12]
}
 800a5ce:	bf00      	nop
 800a5d0:	bf00      	nop
 800a5d2:	e7fd      	b.n	800a5d0 <pvPortMalloc+0x178>
	return pvReturn;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3728      	adds	r7, #40	@ 0x28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	20005394 	.word	0x20005394
 800a5e4:	200053a0 	.word	0x200053a0
 800a5e8:	20005398 	.word	0x20005398
 800a5ec:	2000538c 	.word	0x2000538c
 800a5f0:	2000539c 	.word	0x2000539c

0800a5f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d04e      	beq.n	800a6a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a606:	2308      	movs	r3, #8
 800a608:	425b      	negs	r3, r3
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4413      	add	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	4b24      	ldr	r3, [pc, #144]	@ (800a6ac <vPortFree+0xb8>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4013      	ands	r3, r2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10d      	bne.n	800a63e <vPortFree+0x4a>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a626:	b672      	cpsid	i
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	b662      	cpsie	i
 800a636:	60fb      	str	r3, [r7, #12]
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00d      	beq.n	800a662 <vPortFree+0x6e>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64a:	b672      	cpsid	i
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	b662      	cpsie	i
 800a65a:	60bb      	str	r3, [r7, #8]
}
 800a65c:	bf00      	nop
 800a65e:	bf00      	nop
 800a660:	e7fd      	b.n	800a65e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	4b11      	ldr	r3, [pc, #68]	@ (800a6ac <vPortFree+0xb8>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4013      	ands	r3, r2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d019      	beq.n	800a6a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d115      	bne.n	800a6a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	4b0b      	ldr	r3, [pc, #44]	@ (800a6ac <vPortFree+0xb8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	43db      	mvns	r3, r3
 800a682:	401a      	ands	r2, r3
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a688:	f7fe fc66 	bl	8008f58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	4b07      	ldr	r3, [pc, #28]	@ (800a6b0 <vPortFree+0xbc>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4413      	add	r3, r2
 800a696:	4a06      	ldr	r2, [pc, #24]	@ (800a6b0 <vPortFree+0xbc>)
 800a698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a69a:	6938      	ldr	r0, [r7, #16]
 800a69c:	f000 f86c 	bl	800a778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a6a0:	f7fe fc68 	bl	8008f74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6a4:	bf00      	nop
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	200053a0 	.word	0x200053a0
 800a6b0:	20005398 	.word	0x20005398

0800a6b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a6be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6c0:	4b27      	ldr	r3, [pc, #156]	@ (800a760 <prvHeapInit+0xac>)
 800a6c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00c      	beq.n	800a6e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3307      	adds	r3, #7
 800a6d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 0307 	bic.w	r3, r3, #7
 800a6da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	4a1f      	ldr	r2, [pc, #124]	@ (800a760 <prvHeapInit+0xac>)
 800a6e4:	4413      	add	r3, r2
 800a6e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a764 <prvHeapInit+0xb0>)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a764 <prvHeapInit+0xb0>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a700:	2208      	movs	r2, #8
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	1a9b      	subs	r3, r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 0307 	bic.w	r3, r3, #7
 800a70e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4a15      	ldr	r2, [pc, #84]	@ (800a768 <prvHeapInit+0xb4>)
 800a714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a716:	4b14      	ldr	r3, [pc, #80]	@ (800a768 <prvHeapInit+0xb4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2200      	movs	r2, #0
 800a71c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a71e:	4b12      	ldr	r3, [pc, #72]	@ (800a768 <prvHeapInit+0xb4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a734:	4b0c      	ldr	r3, [pc, #48]	@ (800a768 <prvHeapInit+0xb4>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	4a0a      	ldr	r2, [pc, #40]	@ (800a76c <prvHeapInit+0xb8>)
 800a742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	4a09      	ldr	r2, [pc, #36]	@ (800a770 <prvHeapInit+0xbc>)
 800a74a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a74c:	4b09      	ldr	r3, [pc, #36]	@ (800a774 <prvHeapInit+0xc0>)
 800a74e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a752:	601a      	str	r2, [r3, #0]
}
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	2000178c 	.word	0x2000178c
 800a764:	2000538c 	.word	0x2000538c
 800a768:	20005394 	.word	0x20005394
 800a76c:	2000539c 	.word	0x2000539c
 800a770:	20005398 	.word	0x20005398
 800a774:	200053a0 	.word	0x200053a0

0800a778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a780:	4b28      	ldr	r3, [pc, #160]	@ (800a824 <prvInsertBlockIntoFreeList+0xac>)
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e002      	b.n	800a78c <prvInsertBlockIntoFreeList+0x14>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	429a      	cmp	r2, r3
 800a794:	d8f7      	bhi.n	800a786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d108      	bne.n	800a7ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	441a      	add	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	441a      	add	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d118      	bne.n	800a800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b15      	ldr	r3, [pc, #84]	@ (800a828 <prvInsertBlockIntoFreeList+0xb0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d00d      	beq.n	800a7f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	441a      	add	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	e008      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a828 <prvInsertBlockIntoFreeList+0xb0>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	e003      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d002      	beq.n	800a816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a816:	bf00      	nop
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	2000538c 	.word	0x2000538c
 800a828:	20005394 	.word	0x20005394

0800a82c <atoi>:
 800a82c:	220a      	movs	r2, #10
 800a82e:	2100      	movs	r1, #0
 800a830:	f000 b87a 	b.w	800a928 <strtol>

0800a834 <_strtol_l.constprop.0>:
 800a834:	2b24      	cmp	r3, #36	@ 0x24
 800a836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a83a:	4686      	mov	lr, r0
 800a83c:	4690      	mov	r8, r2
 800a83e:	d801      	bhi.n	800a844 <_strtol_l.constprop.0+0x10>
 800a840:	2b01      	cmp	r3, #1
 800a842:	d106      	bne.n	800a852 <_strtol_l.constprop.0+0x1e>
 800a844:	f000 f894 	bl	800a970 <__errno>
 800a848:	2316      	movs	r3, #22
 800a84a:	6003      	str	r3, [r0, #0]
 800a84c:	2000      	movs	r0, #0
 800a84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a852:	4834      	ldr	r0, [pc, #208]	@ (800a924 <_strtol_l.constprop.0+0xf0>)
 800a854:	460d      	mov	r5, r1
 800a856:	462a      	mov	r2, r5
 800a858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a85c:	5d06      	ldrb	r6, [r0, r4]
 800a85e:	f016 0608 	ands.w	r6, r6, #8
 800a862:	d1f8      	bne.n	800a856 <_strtol_l.constprop.0+0x22>
 800a864:	2c2d      	cmp	r4, #45	@ 0x2d
 800a866:	d12d      	bne.n	800a8c4 <_strtol_l.constprop.0+0x90>
 800a868:	782c      	ldrb	r4, [r5, #0]
 800a86a:	2601      	movs	r6, #1
 800a86c:	1c95      	adds	r5, r2, #2
 800a86e:	f033 0210 	bics.w	r2, r3, #16
 800a872:	d109      	bne.n	800a888 <_strtol_l.constprop.0+0x54>
 800a874:	2c30      	cmp	r4, #48	@ 0x30
 800a876:	d12a      	bne.n	800a8ce <_strtol_l.constprop.0+0x9a>
 800a878:	782a      	ldrb	r2, [r5, #0]
 800a87a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a87e:	2a58      	cmp	r2, #88	@ 0x58
 800a880:	d125      	bne.n	800a8ce <_strtol_l.constprop.0+0x9a>
 800a882:	786c      	ldrb	r4, [r5, #1]
 800a884:	2310      	movs	r3, #16
 800a886:	3502      	adds	r5, #2
 800a888:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a88c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a890:	2200      	movs	r2, #0
 800a892:	fbbc f9f3 	udiv	r9, ip, r3
 800a896:	4610      	mov	r0, r2
 800a898:	fb03 ca19 	mls	sl, r3, r9, ip
 800a89c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a8a0:	2f09      	cmp	r7, #9
 800a8a2:	d81b      	bhi.n	800a8dc <_strtol_l.constprop.0+0xa8>
 800a8a4:	463c      	mov	r4, r7
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	dd27      	ble.n	800a8fa <_strtol_l.constprop.0+0xc6>
 800a8aa:	1c57      	adds	r7, r2, #1
 800a8ac:	d007      	beq.n	800a8be <_strtol_l.constprop.0+0x8a>
 800a8ae:	4581      	cmp	r9, r0
 800a8b0:	d320      	bcc.n	800a8f4 <_strtol_l.constprop.0+0xc0>
 800a8b2:	d101      	bne.n	800a8b8 <_strtol_l.constprop.0+0x84>
 800a8b4:	45a2      	cmp	sl, r4
 800a8b6:	db1d      	blt.n	800a8f4 <_strtol_l.constprop.0+0xc0>
 800a8b8:	fb00 4003 	mla	r0, r0, r3, r4
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8c2:	e7eb      	b.n	800a89c <_strtol_l.constprop.0+0x68>
 800a8c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8c6:	bf04      	itt	eq
 800a8c8:	782c      	ldrbeq	r4, [r5, #0]
 800a8ca:	1c95      	addeq	r5, r2, #2
 800a8cc:	e7cf      	b.n	800a86e <_strtol_l.constprop.0+0x3a>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1da      	bne.n	800a888 <_strtol_l.constprop.0+0x54>
 800a8d2:	2c30      	cmp	r4, #48	@ 0x30
 800a8d4:	bf0c      	ite	eq
 800a8d6:	2308      	moveq	r3, #8
 800a8d8:	230a      	movne	r3, #10
 800a8da:	e7d5      	b.n	800a888 <_strtol_l.constprop.0+0x54>
 800a8dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a8e0:	2f19      	cmp	r7, #25
 800a8e2:	d801      	bhi.n	800a8e8 <_strtol_l.constprop.0+0xb4>
 800a8e4:	3c37      	subs	r4, #55	@ 0x37
 800a8e6:	e7de      	b.n	800a8a6 <_strtol_l.constprop.0+0x72>
 800a8e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a8ec:	2f19      	cmp	r7, #25
 800a8ee:	d804      	bhi.n	800a8fa <_strtol_l.constprop.0+0xc6>
 800a8f0:	3c57      	subs	r4, #87	@ 0x57
 800a8f2:	e7d8      	b.n	800a8a6 <_strtol_l.constprop.0+0x72>
 800a8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f8:	e7e1      	b.n	800a8be <_strtol_l.constprop.0+0x8a>
 800a8fa:	1c53      	adds	r3, r2, #1
 800a8fc:	d108      	bne.n	800a910 <_strtol_l.constprop.0+0xdc>
 800a8fe:	2322      	movs	r3, #34	@ 0x22
 800a900:	f8ce 3000 	str.w	r3, [lr]
 800a904:	4660      	mov	r0, ip
 800a906:	f1b8 0f00 	cmp.w	r8, #0
 800a90a:	d0a0      	beq.n	800a84e <_strtol_l.constprop.0+0x1a>
 800a90c:	1e69      	subs	r1, r5, #1
 800a90e:	e006      	b.n	800a91e <_strtol_l.constprop.0+0xea>
 800a910:	b106      	cbz	r6, 800a914 <_strtol_l.constprop.0+0xe0>
 800a912:	4240      	negs	r0, r0
 800a914:	f1b8 0f00 	cmp.w	r8, #0
 800a918:	d099      	beq.n	800a84e <_strtol_l.constprop.0+0x1a>
 800a91a:	2a00      	cmp	r2, #0
 800a91c:	d1f6      	bne.n	800a90c <_strtol_l.constprop.0+0xd8>
 800a91e:	f8c8 1000 	str.w	r1, [r8]
 800a922:	e794      	b.n	800a84e <_strtol_l.constprop.0+0x1a>
 800a924:	0800abf9 	.word	0x0800abf9

0800a928 <strtol>:
 800a928:	4613      	mov	r3, r2
 800a92a:	460a      	mov	r2, r1
 800a92c:	4601      	mov	r1, r0
 800a92e:	4802      	ldr	r0, [pc, #8]	@ (800a938 <strtol+0x10>)
 800a930:	6800      	ldr	r0, [r0, #0]
 800a932:	f7ff bf7f 	b.w	800a834 <_strtol_l.constprop.0>
 800a936:	bf00      	nop
 800a938:	20000010 	.word	0x20000010

0800a93c <memset>:
 800a93c:	4402      	add	r2, r0
 800a93e:	4603      	mov	r3, r0
 800a940:	4293      	cmp	r3, r2
 800a942:	d100      	bne.n	800a946 <memset+0xa>
 800a944:	4770      	bx	lr
 800a946:	f803 1b01 	strb.w	r1, [r3], #1
 800a94a:	e7f9      	b.n	800a940 <memset+0x4>

0800a94c <strncmp>:
 800a94c:	b510      	push	{r4, lr}
 800a94e:	b16a      	cbz	r2, 800a96c <strncmp+0x20>
 800a950:	3901      	subs	r1, #1
 800a952:	1884      	adds	r4, r0, r2
 800a954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a958:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d103      	bne.n	800a968 <strncmp+0x1c>
 800a960:	42a0      	cmp	r0, r4
 800a962:	d001      	beq.n	800a968 <strncmp+0x1c>
 800a964:	2a00      	cmp	r2, #0
 800a966:	d1f5      	bne.n	800a954 <strncmp+0x8>
 800a968:	1ad0      	subs	r0, r2, r3
 800a96a:	bd10      	pop	{r4, pc}
 800a96c:	4610      	mov	r0, r2
 800a96e:	e7fc      	b.n	800a96a <strncmp+0x1e>

0800a970 <__errno>:
 800a970:	4b01      	ldr	r3, [pc, #4]	@ (800a978 <__errno+0x8>)
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	20000010 	.word	0x20000010

0800a97c <__libc_init_array>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	4d0d      	ldr	r5, [pc, #52]	@ (800a9b4 <__libc_init_array+0x38>)
 800a980:	4c0d      	ldr	r4, [pc, #52]	@ (800a9b8 <__libc_init_array+0x3c>)
 800a982:	1b64      	subs	r4, r4, r5
 800a984:	10a4      	asrs	r4, r4, #2
 800a986:	2600      	movs	r6, #0
 800a988:	42a6      	cmp	r6, r4
 800a98a:	d109      	bne.n	800a9a0 <__libc_init_array+0x24>
 800a98c:	4d0b      	ldr	r5, [pc, #44]	@ (800a9bc <__libc_init_array+0x40>)
 800a98e:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c0 <__libc_init_array+0x44>)
 800a990:	f000 f826 	bl	800a9e0 <_init>
 800a994:	1b64      	subs	r4, r4, r5
 800a996:	10a4      	asrs	r4, r4, #2
 800a998:	2600      	movs	r6, #0
 800a99a:	42a6      	cmp	r6, r4
 800a99c:	d105      	bne.n	800a9aa <__libc_init_array+0x2e>
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a4:	4798      	blx	r3
 800a9a6:	3601      	adds	r6, #1
 800a9a8:	e7ee      	b.n	800a988 <__libc_init_array+0xc>
 800a9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ae:	4798      	blx	r3
 800a9b0:	3601      	adds	r6, #1
 800a9b2:	e7f2      	b.n	800a99a <__libc_init_array+0x1e>
 800a9b4:	0800ad04 	.word	0x0800ad04
 800a9b8:	0800ad04 	.word	0x0800ad04
 800a9bc:	0800ad04 	.word	0x0800ad04
 800a9c0:	0800ad08 	.word	0x0800ad08

0800a9c4 <memcpy>:
 800a9c4:	440a      	add	r2, r1
 800a9c6:	4291      	cmp	r1, r2
 800a9c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9cc:	d100      	bne.n	800a9d0 <memcpy+0xc>
 800a9ce:	4770      	bx	lr
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9da:	4291      	cmp	r1, r2
 800a9dc:	d1f9      	bne.n	800a9d2 <memcpy+0xe>
 800a9de:	bd10      	pop	{r4, pc}

0800a9e0 <_init>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	bf00      	nop
 800a9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e6:	bc08      	pop	{r3}
 800a9e8:	469e      	mov	lr, r3
 800a9ea:	4770      	bx	lr

0800a9ec <_fini>:
 800a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ee:	bf00      	nop
 800a9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f2:	bc08      	pop	{r3}
 800a9f4:	469e      	mov	lr, r3
 800a9f6:	4770      	bx	lr
