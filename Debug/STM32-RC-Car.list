
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008164  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08008364  08008364  00009364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008640  08008640  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008640  08008640  00009640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008648  08008648  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008648  08008648  00009648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800864c  0800864c  0000964c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008650  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb0  2000005c  080086ac  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000100c  080086ac  0000b00c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b348  00000000  00000000  0000a08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e81  00000000  00000000  000253d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  00029258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d8  00000000  00000000  0002a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a521  00000000  00000000  0002bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d41a  00000000  00000000  00056049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105efc  00000000  00000000  00073463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017935f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d4  00000000  00000000  001793a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0017f578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800834c 	.word	0x0800834c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	0800834c 	.word	0x0800834c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <MX_DMA_Init+0x48>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a0f      	ldr	r2, [pc, #60]	@ (800059c <MX_DMA_Init+0x48>)
 8000560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <MX_DMA_Init+0x48>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2010      	movs	r0, #16
 8000578:	f001 fefb 	bl	8002372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800057c:	2010      	movs	r0, #16
 800057e:	f001 ff14 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	2011      	movs	r0, #17
 8000588:	f001 fef3 	bl	8002372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800058c:	2011      	movs	r0, #17
 800058e:	f001 ff0c 	bl	80023aa <HAL_NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	@ 0x30
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b77      	ldr	r3, [pc, #476]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a76      	ldr	r2, [pc, #472]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b74      	ldr	r3, [pc, #464]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ce:	4b71      	ldr	r3, [pc, #452]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a70      	ldr	r2, [pc, #448]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b6e      	ldr	r3, [pc, #440]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b6b      	ldr	r3, [pc, #428]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a6a      	ldr	r2, [pc, #424]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b68      	ldr	r3, [pc, #416]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b65      	ldr	r3, [pc, #404]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a64      	ldr	r2, [pc, #400]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b62      	ldr	r3, [pc, #392]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000616:	4b5f      	ldr	r3, [pc, #380]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a5e      	ldr	r2, [pc, #376]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 800061c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b5c      	ldr	r3, [pc, #368]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062e:	4b59      	ldr	r3, [pc, #356]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a58      	ldr	r2, [pc, #352]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 8000634:	f043 0310 	orr.w	r3, r3, #16
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b56      	ldr	r3, [pc, #344]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0310 	and.w	r3, r3, #16
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	4b53      	ldr	r3, [pc, #332]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a52      	ldr	r2, [pc, #328]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b50      	ldr	r3, [pc, #320]	@ (8000794 <MX_GPIO_Init+0x1f4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0308 	and.w	r3, r3, #8
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000664:	484c      	ldr	r0, [pc, #304]	@ (8000798 <MX_GPIO_Init+0x1f8>)
 8000666:	f002 fc7d 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2141      	movs	r1, #65	@ 0x41
 800066e:	484b      	ldr	r0, [pc, #300]	@ (800079c <MX_GPIO_Init+0x1fc>)
 8000670:	f002 fc78 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2110      	movs	r1, #16
 8000678:	4849      	ldr	r0, [pc, #292]	@ (80007a0 <MX_GPIO_Init+0x200>)
 800067a:	f002 fc73 	bl	8002f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000684:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4843      	ldr	r0, [pc, #268]	@ (80007a4 <MX_GPIO_Init+0x204>)
 8000696:	f002 fab9 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800069a:	2332      	movs	r3, #50	@ 0x32
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006aa:	230b      	movs	r3, #11
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	483b      	ldr	r0, [pc, #236]	@ (80007a4 <MX_GPIO_Init+0x204>)
 80006b6:	f002 faa9 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006ba:	2386      	movs	r3, #134	@ 0x86
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ca:	230b      	movs	r3, #11
 80006cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	4834      	ldr	r0, [pc, #208]	@ (80007a8 <MX_GPIO_Init+0x208>)
 80006d6:	f002 fa99 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006da:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4829      	ldr	r0, [pc, #164]	@ (8000798 <MX_GPIO_Init+0x1f8>)
 80006f4:	f002 fa8a 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 80006f8:	2341      	movs	r3, #65	@ 0x41
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4823      	ldr	r0, [pc, #140]	@ (800079c <MX_GPIO_Init+0x1fc>)
 8000710:	f002 fa7c 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000726:	230b      	movs	r3, #11
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4819      	ldr	r0, [pc, #100]	@ (8000798 <MX_GPIO_Init+0x1f8>)
 8000732:	f002 fa6b 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4814      	ldr	r0, [pc, #80]	@ (800079c <MX_GPIO_Init+0x1fc>)
 800074a:	f002 fa5f 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800074e:	2310      	movs	r3, #16
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_GPIO_Init+0x200>)
 8000766:	f002 fa51 	bl	8002c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800076a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077c:	230b      	movs	r3, #11
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_GPIO_Init+0x1fc>)
 8000788:	f002 fa40 	bl	8002c0c <HAL_GPIO_Init>

}
 800078c:	bf00      	nop
 800078e:	3730      	adds	r7, #48	@ 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400
 800079c:	40021800 	.word	0x40021800
 80007a0:	40020c00 	.word	0x40020c00
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020000 	.word	0x40020000

080007ac <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <HAL_UARTEx_RxEventCallback+0x28>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d104      	bne.n	80007cc <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&HC05, Size);
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <HAL_UARTEx_RxEventCallback+0x2c>)
 80007c8:	f007 fc82 	bl	80080d0 <ATC_IdleLineCallback>
	}
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40004400 	.word	0x40004400
 80007d8:	20000078 	.word	0x20000078

080007dc <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6178      	str	r0, [r7, #20]
 80007e4:	ed87 0a04 	vstr	s0, [r7, #16]
 80007e8:	edc7 0a03 	vstr	s1, [r7, #12]
 80007ec:	ed87 1a02 	vstr	s2, [r7, #8]
 80007f0:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	615a      	str	r2, [r3, #20]
}
 8000816:	bf00      	nop
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <pid_reset>:

void pid_reset(PID *pid_data)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 8000842:	b480      	push	{r7}
 8000844:	b089      	sub	sp, #36	@ 0x24
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	441a      	add	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	ed93 7a02 	vldr	s14, [r3, #8]
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	ee07 3a90 	vmov	s15, r3
 800086e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000876:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000890:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	ed93 7a04 	vldr	s14, [r3, #16]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ae:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	ee07 3a90 	vmov	s15, r3
 80008ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008be:	ed97 7a07 	vldr	s14, [r7, #28]
 80008c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ca:	db08      	blt.n	80008de <pid_calculate+0x9c>
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	ee07 3a90 	vmov	s15, r3
 80008d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d8:	edc7 7a07 	vstr	s15, [r7, #28]
 80008dc:	e016      	b.n	800090c <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	425b      	negs	r3, r3
 80008e4:	ee07 3a90 	vmov	s15, r3
 80008e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80008f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f8:	d808      	bhi.n	800090c <pid_calculate+0xca>
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	425b      	negs	r3, r3
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000908:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8000912:	ed97 7a05 	vldr	s14, [r7, #20]
 8000916:	edd7 7a07 	vldr	s15, [r7, #28]
 800091a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800091e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800092a:	ee17 3a90 	vmov	r3, s15
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	@ 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000950:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b084      	sub	sp, #16
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f82a 	bl	80009d8 <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800098c:	fb02 f303 	mul.w	r3, r2, r3
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	8892      	ldrh	r2, [r2, #4]
 8000994:	fb93 f2f2 	sdiv	r2, r3, r2
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f103 0018 	add.w	r0, r3, #24
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6919      	ldr	r1, [r3, #16]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f7ff ff49 	bl	8000842 <pid_calculate>
 80009b0:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	695a      	ldr	r2, [r3, #20]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	441a      	add	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db04      	blt.n	80009d0 <motor_calculate_speed+0x5a>
	{
		drv8835_set_motorA_speed(m->actual_PWM);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f832 	bl	8000a34 <drv8835_set_motorA_speed>

	}

}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d004      	beq.n	8000a24 <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3318      	adds	r3, #24
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff feff 	bl	8000822 <pid_reset>

	m->set_speed = set_speed;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	611a      	str	r2, [r3, #16]
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000a3e:	88fa      	ldrh	r2, [r7, #6]
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <drv8835_set_motorA_speed+0x34>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d303      	bcc.n	8000a52 <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <drv8835_set_motorA_speed+0x34>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a50:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <drv8835_set_motorA_speed+0x34>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	88fa      	ldrh	r2, [r7, #6]
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000180 	.word	0x20000180

08000a6c <drv8835_init>:

void drv8835_init()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	drv8835_set_motorA_speed(0);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff ffdf 	bl	8000a34 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a76:	2100      	movs	r1, #0
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <drv8835_init+0x18>)
 8000a7a:	f003 fe93 	bl	80047a4 <HAL_TIM_PWM_Start>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000180 	.word	0x20000180

08000a88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d102      	bne.n	8000aa0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000a9a:	4804      	ldr	r0, [pc, #16]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a9c:	f7ff ff6b 	bl	8000976 <motor_calculate_speed>
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40001000 	.word	0x40001000
 8000aac:	200000fc 	.word	0x200000fc

08000ab0 <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d104      	bne.n	8000ac8 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000abe:	2104      	movs	r1, #4
 8000ac0:	4812      	ldr	r0, [pc, #72]	@ (8000b0c <Set_PWM_Frequency+0x5c>)
 8000ac2:	f003 ff69 	bl	8004998 <HAL_TIM_PWM_Stop>
        return;
 8000ac6:	e01e      	b.n	8000b06 <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <Set_PWM_Frequency+0x60>)
 8000aca:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <Set_PWM_Frequency+0x5c>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <Set_PWM_Frequency+0x64>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aee:	4a09      	ldr	r2, [pc, #36]	@ (8000b14 <Set_PWM_Frequency+0x64>)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <Set_PWM_Frequency+0x5c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	0852      	lsrs	r2, r2, #1
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000afe:	2104      	movs	r1, #4
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <Set_PWM_Frequency+0x5c>)
 8000b02:	f003 fe4f 	bl	80047a4 <HAL_TIM_PWM_Start>
}
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000348 	.word	0x20000348
 8000b10:	05b8d800 	.word	0x05b8d800
 8000b14:	20000180 	.word	0x20000180

08000b18 <ProcessCommand>:
}

int hornOn = 0;
int engineOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

		if (strcmp((char*)cmd, "CMD0") == 0) {
 8000b20:	4992      	ldr	r1, [pc, #584]	@ (8000d6c <ProcessCommand+0x254>)
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fb8c 	bl	8000240 <strcmp>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d150      	bne.n	8000bd0 <ProcessCommand+0xb8>
			if (!engineOn) {
 8000b2e:	4b90      	ldr	r3, [pc, #576]	@ (8000d70 <ProcessCommand+0x258>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d122      	bne.n	8000b7c <ProcessCommand+0x64>
				HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000b36:	213c      	movs	r1, #60	@ 0x3c
 8000b38:	488e      	ldr	r0, [pc, #568]	@ (8000d74 <ProcessCommand+0x25c>)
 8000b3a:	f004 f853 	bl	8004be4 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b3e:	213c      	movs	r1, #60	@ 0x3c
 8000b40:	488d      	ldr	r0, [pc, #564]	@ (8000d78 <ProcessCommand+0x260>)
 8000b42:	f004 f84f 	bl	8004be4 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000b46:	213c      	movs	r1, #60	@ 0x3c
 8000b48:	488c      	ldr	r0, [pc, #560]	@ (8000d7c <ProcessCommand+0x264>)
 8000b4a:	f004 f84b 	bl	8004be4 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000b4e:	213c      	movs	r1, #60	@ 0x3c
 8000b50:	488b      	ldr	r0, [pc, #556]	@ (8000d80 <ProcessCommand+0x268>)
 8000b52:	f004 f847 	bl	8004be4 <HAL_TIM_Encoder_Start>

				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b56:	2100      	movs	r1, #0
 8000b58:	488a      	ldr	r0, [pc, #552]	@ (8000d84 <ProcessCommand+0x26c>)
 8000b5a:	f003 fe23 	bl	80047a4 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b5e:	210c      	movs	r1, #12
 8000b60:	4888      	ldr	r0, [pc, #544]	@ (8000d84 <ProcessCommand+0x26c>)
 8000b62:	f003 fe1f 	bl	80047a4 <HAL_TIM_PWM_Start>

				HAL_TIM_Base_Start_IT(&htim6);
 8000b66:	4888      	ldr	r0, [pc, #544]	@ (8000d88 <ProcessCommand+0x270>)
 8000b68:	f003 fd1e 	bl	80045a8 <HAL_TIM_Base_Start_IT>

				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4887      	ldr	r0, [pc, #540]	@ (8000d8c <ProcessCommand+0x274>)
 8000b70:	f003 fe18 	bl	80047a4 <HAL_TIM_PWM_Start>
				engineOn = 1;
 8000b74:	4b7e      	ldr	r3, [pc, #504]	@ (8000d70 <ProcessCommand+0x258>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e021      	b.n	8000bc0 <ProcessCommand+0xa8>
			}
			else {
				HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8000b7c:	213c      	movs	r1, #60	@ 0x3c
 8000b7e:	487d      	ldr	r0, [pc, #500]	@ (8000d74 <ProcessCommand+0x25c>)
 8000b80:	f004 f8be 	bl	8004d00 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8000b84:	213c      	movs	r1, #60	@ 0x3c
 8000b86:	487c      	ldr	r0, [pc, #496]	@ (8000d78 <ProcessCommand+0x260>)
 8000b88:	f004 f8ba 	bl	8004d00 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8000b8c:	213c      	movs	r1, #60	@ 0x3c
 8000b8e:	487b      	ldr	r0, [pc, #492]	@ (8000d7c <ProcessCommand+0x264>)
 8000b90:	f004 f8b6 	bl	8004d00 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim8, TIM_CHANNEL_ALL);
 8000b94:	213c      	movs	r1, #60	@ 0x3c
 8000b96:	487a      	ldr	r0, [pc, #488]	@ (8000d80 <ProcessCommand+0x268>)
 8000b98:	f004 f8b2 	bl	8004d00 <HAL_TIM_Encoder_Stop>

				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4879      	ldr	r0, [pc, #484]	@ (8000d84 <ProcessCommand+0x26c>)
 8000ba0:	f003 fefa 	bl	8004998 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000ba4:	210c      	movs	r1, #12
 8000ba6:	4877      	ldr	r0, [pc, #476]	@ (8000d84 <ProcessCommand+0x26c>)
 8000ba8:	f003 fef6 	bl	8004998 <HAL_TIM_PWM_Stop>

				HAL_TIM_Base_Stop_IT(&htim6);
 8000bac:	4876      	ldr	r0, [pc, #472]	@ (8000d88 <ProcessCommand+0x270>)
 8000bae:	f003 fd73 	bl	8004698 <HAL_TIM_Base_Stop_IT>

				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4875      	ldr	r0, [pc, #468]	@ (8000d8c <ProcessCommand+0x274>)
 8000bb6:	f003 feef 	bl	8004998 <HAL_TIM_PWM_Stop>
				engineOn = 0;
 8000bba:	4b6d      	ldr	r3, [pc, #436]	@ (8000d70 <ProcessCommand+0x258>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
			}


			HAL_UART_Transmit(&huart3, (uint8_t*)"ENGINE RUNNING\r\n", 16, HAL_MAX_DELAY);
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	4972      	ldr	r1, [pc, #456]	@ (8000d90 <ProcessCommand+0x278>)
 8000bc8:	4872      	ldr	r0, [pc, #456]	@ (8000d94 <ProcessCommand+0x27c>)
 8000bca:	f004 ffad 	bl	8005b28 <HAL_UART_Transmit>
	    }

	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000bce:	e0c9      	b.n	8000d64 <ProcessCommand+0x24c>
		else if (strcmp((char*)cmd, "CMDA") == 0) {
 8000bd0:	4971      	ldr	r1, [pc, #452]	@ (8000d98 <ProcessCommand+0x280>)
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff fb34 	bl	8000240 <strcmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10b      	bne.n	8000bf6 <ProcessCommand+0xde>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8000bde:	2101      	movs	r1, #1
 8000be0:	486e      	ldr	r0, [pc, #440]	@ (8000d9c <ProcessCommand+0x284>)
 8000be2:	f002 f9d8 	bl	8002f96 <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart3, (uint8_t*)"LIGHTS RUNNING\r\n", 16, HAL_MAX_DELAY);
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	2210      	movs	r2, #16
 8000bec:	496c      	ldr	r1, [pc, #432]	@ (8000da0 <ProcessCommand+0x288>)
 8000bee:	4869      	ldr	r0, [pc, #420]	@ (8000d94 <ProcessCommand+0x27c>)
 8000bf0:	f004 ff9a 	bl	8005b28 <HAL_UART_Transmit>
}
 8000bf4:	e0b6      	b.n	8000d64 <ProcessCommand+0x24c>
	    else if (strcmp((char*)cmd, "CMDB") == 0) {
 8000bf6:	496b      	ldr	r1, [pc, #428]	@ (8000da4 <ProcessCommand+0x28c>)
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fb21 	bl	8000240 <strcmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d119      	bne.n	8000c38 <ProcessCommand+0x120>
	    	if (!hornOn) {
 8000c04:	4b68      	ldr	r3, [pc, #416]	@ (8000da8 <ProcessCommand+0x290>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d107      	bne.n	8000c1c <ProcessCommand+0x104>
		    	Set_PWM_Frequency(1000);
 8000c0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c10:	f7ff ff4e 	bl	8000ab0 <Set_PWM_Frequency>
		    	hornOn = 1;
 8000c14:	4b64      	ldr	r3, [pc, #400]	@ (8000da8 <ProcessCommand+0x290>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e005      	b.n	8000c28 <ProcessCommand+0x110>
	    		Set_PWM_Frequency(0);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff ff47 	bl	8000ab0 <Set_PWM_Frequency>
	    		hornOn = 0;
 8000c22:	4b61      	ldr	r3, [pc, #388]	@ (8000da8 <ProcessCommand+0x290>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"HORN RUNNING\r\n", 14, HAL_MAX_DELAY);
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	220e      	movs	r2, #14
 8000c2e:	495f      	ldr	r1, [pc, #380]	@ (8000dac <ProcessCommand+0x294>)
 8000c30:	4858      	ldr	r0, [pc, #352]	@ (8000d94 <ProcessCommand+0x27c>)
 8000c32:	f004 ff79 	bl	8005b28 <HAL_UART_Transmit>
}
 8000c36:	e095      	b.n	8000d64 <ProcessCommand+0x24c>
	    else if (strncmp((char*)cmd, "CMD", 3) == 0) {
 8000c38:	2203      	movs	r2, #3
 8000c3a:	495d      	ldr	r1, [pc, #372]	@ (8000db0 <ProcessCommand+0x298>)
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f007 fb3b 	bl	80082b8 <strncmp>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f040 8086 	bne.w	8000d56 <ProcessCommand+0x23e>
	        char* modeStr = (char*)cmd + 3;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3303      	adds	r3, #3
 8000c4e:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f007 faa1 	bl	8008198 <atoi>
 8000c56:	60b8      	str	r0, [r7, #8]
	        if (mode >= 1 && mode <= 9) {
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	dd73      	ble.n	8000d46 <ProcessCommand+0x22e>
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	2b09      	cmp	r3, #9
 8000c62:	dc70      	bgt.n	8000d46 <ProcessCommand+0x22e>
	            switch (mode) {
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	2b08      	cmp	r3, #8
 8000c6a:	d869      	bhi.n	8000d40 <ProcessCommand+0x228>
 8000c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c74 <ProcessCommand+0x15c>)
 8000c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c72:	bf00      	nop
 8000c74:	08000c99 	.word	0x08000c99
 8000c78:	08000cb1 	.word	0x08000cb1
 8000c7c:	08000cc9 	.word	0x08000cc9
 8000c80:	08000ce1 	.word	0x08000ce1
 8000c84:	08000cf1 	.word	0x08000cf1
 8000c88:	08000d01 	.word	0x08000d01
 8000c8c:	08000d11 	.word	0x08000d11
 8000c90:	08000d21 	.word	0x08000d21
 8000c94:	08000d31 	.word	0x08000d31
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	2212      	movs	r2, #18
 8000c9e:	4945      	ldr	r1, [pc, #276]	@ (8000db4 <ProcessCommand+0x29c>)
 8000ca0:	483c      	ldr	r0, [pc, #240]	@ (8000d94 <ProcessCommand+0x27c>)
 8000ca2:	f004 ff41 	bl	8005b28 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4843      	ldr	r0, [pc, #268]	@ (8000db8 <ProcessCommand+0x2a0>)
 8000caa:	f7ff feac 	bl	8000a06 <motor_set_speed>
	                    break;
 8000cae:	e048      	b.n	8000d42 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	2212      	movs	r2, #18
 8000cb6:	4941      	ldr	r1, [pc, #260]	@ (8000dbc <ProcessCommand+0x2a4>)
 8000cb8:	4836      	ldr	r0, [pc, #216]	@ (8000d94 <ProcessCommand+0x27c>)
 8000cba:	f004 ff35 	bl	8005b28 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 100);
 8000cbe:	2164      	movs	r1, #100	@ 0x64
 8000cc0:	483d      	ldr	r0, [pc, #244]	@ (8000db8 <ProcessCommand+0x2a0>)
 8000cc2:	f7ff fea0 	bl	8000a06 <motor_set_speed>
	                    break;
 8000cc6:	e03c      	b.n	8000d42 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	2212      	movs	r2, #18
 8000cce:	493c      	ldr	r1, [pc, #240]	@ (8000dc0 <ProcessCommand+0x2a8>)
 8000cd0:	4830      	ldr	r0, [pc, #192]	@ (8000d94 <ProcessCommand+0x27c>)
 8000cd2:	f004 ff29 	bl	8005b28 <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 75);
 8000cd6:	214b      	movs	r1, #75	@ 0x4b
 8000cd8:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <ProcessCommand+0x2a0>)
 8000cda:	f7ff fe94 	bl	8000a06 <motor_set_speed>
	                    break;
 8000cde:	e030      	b.n	8000d42 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	2212      	movs	r2, #18
 8000ce6:	4937      	ldr	r1, [pc, #220]	@ (8000dc4 <ProcessCommand+0x2ac>)
 8000ce8:	482a      	ldr	r0, [pc, #168]	@ (8000d94 <ProcessCommand+0x27c>)
 8000cea:	f004 ff1d 	bl	8005b28 <HAL_UART_Transmit>
	                    break;
 8000cee:	e028      	b.n	8000d42 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	2212      	movs	r2, #18
 8000cf6:	4934      	ldr	r1, [pc, #208]	@ (8000dc8 <ProcessCommand+0x2b0>)
 8000cf8:	4826      	ldr	r0, [pc, #152]	@ (8000d94 <ProcessCommand+0x27c>)
 8000cfa:	f004 ff15 	bl	8005b28 <HAL_UART_Transmit>
	                    break;
 8000cfe:	e020      	b.n	8000d42 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2212      	movs	r2, #18
 8000d06:	4931      	ldr	r1, [pc, #196]	@ (8000dcc <ProcessCommand+0x2b4>)
 8000d08:	4822      	ldr	r0, [pc, #136]	@ (8000d94 <ProcessCommand+0x27c>)
 8000d0a:	f004 ff0d 	bl	8005b28 <HAL_UART_Transmit>
	                    break;
 8000d0e:	e018      	b.n	8000d42 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	2212      	movs	r2, #18
 8000d16:	492e      	ldr	r1, [pc, #184]	@ (8000dd0 <ProcessCommand+0x2b8>)
 8000d18:	481e      	ldr	r0, [pc, #120]	@ (8000d94 <ProcessCommand+0x27c>)
 8000d1a:	f004 ff05 	bl	8005b28 <HAL_UART_Transmit>
	                    break;
 8000d1e:	e010      	b.n	8000d42 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	2212      	movs	r2, #18
 8000d26:	492b      	ldr	r1, [pc, #172]	@ (8000dd4 <ProcessCommand+0x2bc>)
 8000d28:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <ProcessCommand+0x27c>)
 8000d2a:	f004 fefd 	bl	8005b28 <HAL_UART_Transmit>
	                    break;
 8000d2e:	e008      	b.n	8000d42 <ProcessCommand+0x22a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	2212      	movs	r2, #18
 8000d36:	4928      	ldr	r1, [pc, #160]	@ (8000dd8 <ProcessCommand+0x2c0>)
 8000d38:	4816      	ldr	r0, [pc, #88]	@ (8000d94 <ProcessCommand+0x27c>)
 8000d3a:	f004 fef5 	bl	8005b28 <HAL_UART_Transmit>
	                    break;
 8000d3e:	e000      	b.n	8000d42 <ProcessCommand+0x22a>
	                    break;
 8000d40:	bf00      	nop
	            switch (mode) {
 8000d42:	bf00      	nop
}
 8000d44:	e00e      	b.n	8000d64 <ProcessCommand+0x24c>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	2215      	movs	r2, #21
 8000d4c:	4923      	ldr	r1, [pc, #140]	@ (8000ddc <ProcessCommand+0x2c4>)
 8000d4e:	4811      	ldr	r0, [pc, #68]	@ (8000d94 <ProcessCommand+0x27c>)
 8000d50:	f004 feea 	bl	8005b28 <HAL_UART_Transmit>
}
 8000d54:	e006      	b.n	8000d64 <ProcessCommand+0x24c>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	2211      	movs	r2, #17
 8000d5c:	4920      	ldr	r1, [pc, #128]	@ (8000de0 <ProcessCommand+0x2c8>)
 8000d5e:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <ProcessCommand+0x27c>)
 8000d60:	f004 fee2 	bl	8005b28 <HAL_UART_Transmit>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	08008368 	.word	0x08008368
 8000d70:	20000130 	.word	0x20000130
 8000d74:	20000134 	.word	0x20000134
 8000d78:	200001cc 	.word	0x200001cc
 8000d7c:	20000218 	.word	0x20000218
 8000d80:	200002fc 	.word	0x200002fc
 8000d84:	20000180 	.word	0x20000180
 8000d88:	200002b0 	.word	0x200002b0
 8000d8c:	20000348 	.word	0x20000348
 8000d90:	08008370 	.word	0x08008370
 8000d94:	2000041c 	.word	0x2000041c
 8000d98:	08008384 	.word	0x08008384
 8000d9c:	40021800 	.word	0x40021800
 8000da0:	0800838c 	.word	0x0800838c
 8000da4:	080083a0 	.word	0x080083a0
 8000da8:	2000012c 	.word	0x2000012c
 8000dac:	080083a8 	.word	0x080083a8
 8000db0:	080083b8 	.word	0x080083b8
 8000db4:	080083bc 	.word	0x080083bc
 8000db8:	200000fc 	.word	0x200000fc
 8000dbc:	080083d0 	.word	0x080083d0
 8000dc0:	080083e4 	.word	0x080083e4
 8000dc4:	080083f8 	.word	0x080083f8
 8000dc8:	0800840c 	.word	0x0800840c
 8000dcc:	08008420 	.word	0x08008420
 8000dd0:	08008434 	.word	0x08008434
 8000dd4:	08008448 	.word	0x08008448
 8000dd8:	0800845c 	.word	0x0800845c
 8000ddc:	08008470 	.word	0x08008470
 8000de0:	08008488 	.word	0x08008488

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dea:	f001 f966 	bl	80020ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dee:	f000 f84f 	bl	8000e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df2:	f7ff fbd5 	bl	80005a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df6:	f7ff fbad 	bl	8000554 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000dfa:	f000 ff45 	bl	8001c88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dfe:	f001 f88b 	bl	8001f18 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000e02:	f000 ff11 	bl	8001c28 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e06:	f000 f9fd 	bl	8001204 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e0a:	f000 fab9 	bl	8001380 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e0e:	f000 fb0d 	bl	800142c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e12:	f000 fbff 	bl	8001614 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000e16:	f000 fa4f 	bl	80012b8 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e1a:	f000 fbc3 	bl	80015a4 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000e1e:	f000 fb5b 	bl	80014d8 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000e22:	f000 fc51 	bl	80016c8 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <main+0x8c>)
 8000e28:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fa12 	bl	8000254 <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <main+0x90>)
 8000e3c:	f004 fe74 	bl	8005b28 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <main+0x94>)
 8000e44:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <main+0x98>)
 8000e46:	f004 fef8 	bl	8005c3a <HAL_UART_Receive_IT>

  drv8835_init();
 8000e4a:	f7ff fe0f 	bl	8000a6c <drv8835_init>
  motor_init(&motorA, &htim4);
 8000e4e:	490c      	ldr	r1, [pc, #48]	@ (8000e80 <main+0x9c>)
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <main+0xa0>)
 8000e52:	f7ff fd72 	bl	800093a <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 8000e56:	2101      	movs	r1, #1
 8000e58:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8000e88 <main+0xa4>
 8000e5c:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8000e88 <main+0xa4>
 8000e60:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000e64:	4809      	ldr	r0, [pc, #36]	@ (8000e8c <main+0xa8>)
 8000e66:	f7ff fcb9 	bl	80007dc <pid_init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e6a:	bf00      	nop
 8000e6c:	e7fd      	b.n	8000e6a <main+0x86>
 8000e6e:	bf00      	nop
 8000e70:	080084f0 	.word	0x080084f0
 8000e74:	2000041c 	.word	0x2000041c
 8000e78:	200000b4 	.word	0x200000b4
 8000e7c:	20000394 	.word	0x20000394
 8000e80:	20000218 	.word	0x20000218
 8000e84:	200000fc 	.word	0x200000fc
 8000e88:	3d4ccccd 	.word	0x3d4ccccd
 8000e8c:	20000114 	.word	0x20000114

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b094      	sub	sp, #80	@ 0x50
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2234      	movs	r2, #52	@ 0x34
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f007 fa02 	bl	80082a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000eb4:	f002 f9c4 	bl	8003240 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f6c <SystemClock_Config+0xdc>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8000f6c <SystemClock_Config+0xdc>)
 8000ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec4:	4b29      	ldr	r3, [pc, #164]	@ (8000f6c <SystemClock_Config+0xdc>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <SystemClock_Config+0xe0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ed8:	4a25      	ldr	r2, [pc, #148]	@ (8000f70 <SystemClock_Config+0xe0>)
 8000eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <SystemClock_Config+0xe0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ef0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ef4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f00:	2304      	movs	r3, #4
 8000f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f04:	2360      	movs	r3, #96	@ 0x60
 8000f06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 f9f1 	bl	8003300 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f24:	f000 f858 	bl	8000fd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f28:	f002 f99a 	bl	8003260 <HAL_PWREx_EnableOverDrive>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f32:	f000 f851 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	230f      	movs	r3, #15
 8000f38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	2103      	movs	r1, #3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fc82 	bl	800385c <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f5e:	f000 f83b 	bl	8000fd8 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	@ 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000

08000f74 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a10      	ldr	r2, [pc, #64]	@ (8000fc4 <HAL_UART_RxCpltCallback+0x50>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d119      	bne.n	8000fba <HAL_UART_RxCpltCallback+0x46>
		//HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	490f      	ldr	r1, [pc, #60]	@ (8000fc8 <HAL_UART_RxCpltCallback+0x54>)
 8000f8a:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <HAL_UART_RxCpltCallback+0x58>)
 8000f8c:	f004 fe55 	bl	8005c3a <HAL_UART_Receive_IT>
		rxBuff[rxIdx++] = rxData[0];
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	b2d1      	uxtb	r1, r2
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000f9a:	7011      	strb	r1, [r2, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_UART_RxCpltCallback+0x54>)
 8000fa0:	7819      	ldrb	r1, [r3, #0]
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <HAL_UART_RxCpltCallback+0x60>)
 8000fa4:	5499      	strb	r1, [r3, r2]

		if (rxIdx == 4) {
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d105      	bne.n	8000fba <HAL_UART_RxCpltCallback+0x46>
			//HAL_UART_Transmit(&huart3, rxBuff, rxIdx, HAL_MAX_DELAY);
			ProcessCommand(rxBuff);
 8000fae:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <HAL_UART_RxCpltCallback+0x60>)
 8000fb0:	f7ff fdb2 	bl	8000b18 <ProcessCommand>
			rxIdx = 0;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x5c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	200000b4 	.word	0x200000b4
 8000fcc:	20000394 	.word	0x20000394
 8000fd0:	200000f8 	.word	0x200000f8
 8000fd4:	200000b8 	.word	0x200000b8

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_MspInit+0x4c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_MspInit+0x4c>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_MspInit+0x4c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	210f      	movs	r1, #15
 800101e:	f06f 0001 	mvn.w	r0, #1
 8001022:	f001 f9a6 	bl	8002372 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f001 f861 	bl	8002134 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001072:	f006 ff99 	bl	8007fa8 <xTaskGetSchedulerState>
 8001076:	4603      	mov	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d001      	beq.n	8001080 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800107c:	f007 f804 	bl	8008088 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <DMA1_Stream5_IRQHandler+0x10>)
 800108a:	f001 fb49 	bl	8002720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200004a4 	.word	0x200004a4

08001098 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <DMA1_Stream6_IRQHandler+0x10>)
 800109e:	f001 fb3f 	bl	8002720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000504 	.word	0x20000504

080010ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80010b2:	f003 fecc 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000134 	.word	0x20000134

080010c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010c6:	f003 fec2 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000134 	.word	0x20000134

080010d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80010da:	f003 feb8 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000134 	.word	0x20000134

080010e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM1_CC_IRQHandler+0x10>)
 80010ee:	f003 feae 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000134 	.word	0x20000134

080010fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <TIM2_IRQHandler+0x10>)
 8001102:	f003 fea4 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000180 	.word	0x20000180

08001110 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <TIM3_IRQHandler+0x10>)
 8001116:	f003 fe9a 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001cc 	.word	0x200001cc

08001124 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <TIM4_IRQHandler+0x10>)
 800112a:	f003 fe90 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000218 	.word	0x20000218

08001138 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <USART2_IRQHandler+0x10>)
 800113e:	f004 fe6f 	bl	8005e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000394 	.word	0x20000394

0800114c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <USART3_IRQHandler+0x10>)
 8001152:	f004 fe65 	bl	8005e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000041c 	.word	0x2000041c

08001160 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8001166:	f003 fe72 	bl	8004e4e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800116a:	4803      	ldr	r0, [pc, #12]	@ (8001178 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800116c:	f003 fe6f 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002fc 	.word	0x200002fc
 8001178:	20000348 	.word	0x20000348

0800117c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001182:	f003 fe64 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200002fc 	.word	0x200002fc

08001190 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001196:	f003 fe5a 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200002fc 	.word	0x200002fc

080011a4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <TIM8_CC_IRQHandler+0x10>)
 80011aa:	f003 fe50 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200002fc 	.word	0x200002fc

080011b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80011bc:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <TIM5_IRQHandler+0x10>)
 80011be:	f003 fe46 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000264 	.word	0x20000264

080011cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <TIM6_DAC_IRQHandler+0x10>)
 80011d2:	f003 fe3c 	bl	8004e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200002b0 	.word	0x200002b0

080011e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	@ 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2224      	movs	r2, #36	@ 0x24
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 f848 	bl	80082a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001222:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <MX_TIM1_Init+0xac>)
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <MX_TIM1_Init+0xb0>)
 8001226:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001228:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <MX_TIM1_Init+0xac>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800122e:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <MX_TIM1_Init+0xac>)
 8001230:	2210      	movs	r2, #16
 8001232:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001234:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <MX_TIM1_Init+0xac>)
 8001236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800123a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <MX_TIM1_Init+0xac>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <MX_TIM1_Init+0xac>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <MX_TIM1_Init+0xac>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124e:	2303      	movs	r3, #3
 8001250:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800125e:	230f      	movs	r3, #15
 8001260:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001266:	2301      	movs	r3, #1
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800126e:	230f      	movs	r3, #15
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4619      	mov	r1, r3
 8001278:	480d      	ldr	r0, [pc, #52]	@ (80012b0 <MX_TIM1_Init+0xac>)
 800127a:	f003 fc0d 	bl	8004a98 <HAL_TIM_Encoder_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001284:	f7ff fea8 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_TIM1_Init+0xac>)
 800129a:	f004 fb4b 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012a4:	f7ff fe98 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000134 	.word	0x20000134
 80012b4:	40010000 	.word	0x40010000

080012b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <MX_TIM2_Init+0xc4>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80012e4:	4b25      	ldr	r3, [pc, #148]	@ (800137c <MX_TIM2_Init+0xc4>)
 80012e6:	222f      	movs	r2, #47	@ 0x2f
 80012e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b24      	ldr	r3, [pc, #144]	@ (800137c <MX_TIM2_Init+0xc4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012f0:	4b22      	ldr	r3, [pc, #136]	@ (800137c <MX_TIM2_Init+0xc4>)
 80012f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b20      	ldr	r3, [pc, #128]	@ (800137c <MX_TIM2_Init+0xc4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <MX_TIM2_Init+0xc4>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001304:	481d      	ldr	r0, [pc, #116]	@ (800137c <MX_TIM2_Init+0xc4>)
 8001306:	f003 f9f6 	bl	80046f6 <HAL_TIM_PWM_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001310:	f7ff fe62 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4816      	ldr	r0, [pc, #88]	@ (800137c <MX_TIM2_Init+0xc4>)
 8001324:	f004 fb06 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800132e:	f7ff fe53 	bl	8000fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001332:	2360      	movs	r3, #96	@ 0x60
 8001334:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <MX_TIM2_Init+0xc4>)
 800134a:	f003 fe87 	bl	800505c <HAL_TIM_PWM_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001354:	f7ff fe40 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	220c      	movs	r2, #12
 800135c:	4619      	mov	r1, r3
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <MX_TIM2_Init+0xc4>)
 8001360:	f003 fe7c 	bl	800505c <HAL_TIM_PWM_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800136a:	f7ff fe35 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800136e:	4803      	ldr	r0, [pc, #12]	@ (800137c <MX_TIM2_Init+0xc4>)
 8001370:	f000 fbbc 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	@ 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000180 	.word	0x20000180

08001380 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	@ 0x30
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2224      	movs	r2, #36	@ 0x24
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f006 ff8a 	bl	80082a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_TIM3_Init+0xa4>)
 80013a0:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <MX_TIM3_Init+0xa8>)
 80013a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_TIM3_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_TIM3_Init+0xa4>)
 80013ac:	2210      	movs	r2, #16
 80013ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_TIM3_Init+0xa4>)
 80013b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_TIM3_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_TIM3_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c4:	2303      	movs	r3, #3
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013cc:	2301      	movs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013d4:	230f      	movs	r3, #15
 80013d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013dc:	2301      	movs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80013e4:	230f      	movs	r3, #15
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_TIM3_Init+0xa4>)
 80013f0:	f003 fb52 	bl	8004a98 <HAL_TIM_Encoder_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013fa:	f7ff fded 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <MX_TIM3_Init+0xa4>)
 800140c:	f004 fa92 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001416:	f7ff fddf 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	@ 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200001cc 	.word	0x200001cc
 8001428:	40000400 	.word	0x40000400

0800142c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2224      	movs	r2, #36	@ 0x24
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f006 ff34 	bl	80082a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <MX_TIM4_Init+0xa4>)
 800144c:	4a21      	ldr	r2, [pc, #132]	@ (80014d4 <MX_TIM4_Init+0xa8>)
 800144e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <MX_TIM4_Init+0xa4>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_TIM4_Init+0xa4>)
 8001458:	2210      	movs	r2, #16
 800145a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_TIM4_Init+0xa4>)
 800145e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001462:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_TIM4_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_TIM4_Init+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001470:	2303      	movs	r3, #3
 8001472:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001478:	2301      	movs	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001480:	230f      	movs	r3, #15
 8001482:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001488:	2301      	movs	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001490:	230f      	movs	r3, #15
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	@ (80014d0 <MX_TIM4_Init+0xa4>)
 800149c:	f003 fafc 	bl	8004a98 <HAL_TIM_Encoder_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80014a6:	f7ff fd97 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <MX_TIM4_Init+0xa4>)
 80014b8:	f004 fa3c 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014c2:	f7ff fd89 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3730      	adds	r7, #48	@ 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000218 	.word	0x20000218
 80014d4:	40000800 	.word	0x40000800

080014d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014fc:	4b27      	ldr	r3, [pc, #156]	@ (800159c <MX_TIM5_Init+0xc4>)
 80014fe:	4a28      	ldr	r2, [pc, #160]	@ (80015a0 <MX_TIM5_Init+0xc8>)
 8001500:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <MX_TIM5_Init+0xc4>)
 8001504:	222f      	movs	r2, #47	@ 0x2f
 8001506:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b24      	ldr	r3, [pc, #144]	@ (800159c <MX_TIM5_Init+0xc4>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800150e:	4b23      	ldr	r3, [pc, #140]	@ (800159c <MX_TIM5_Init+0xc4>)
 8001510:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001514:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b21      	ldr	r3, [pc, #132]	@ (800159c <MX_TIM5_Init+0xc4>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <MX_TIM5_Init+0xc4>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001522:	481e      	ldr	r0, [pc, #120]	@ (800159c <MX_TIM5_Init+0xc4>)
 8001524:	f003 f8e7 	bl	80046f6 <HAL_TIM_PWM_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800152e:	f7ff fd53 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4816      	ldr	r0, [pc, #88]	@ (800159c <MX_TIM5_Init+0xc4>)
 8001542:	f004 f9f7 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800154c:	f7ff fd44 	bl	8000fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001550:	2360      	movs	r3, #96	@ 0x60
 8001552:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001560:	463b      	mov	r3, r7
 8001562:	2200      	movs	r2, #0
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	@ (800159c <MX_TIM5_Init+0xc4>)
 8001568:	f003 fd78 	bl	800505c <HAL_TIM_PWM_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001572:	f7ff fd31 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	220c      	movs	r2, #12
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <MX_TIM5_Init+0xc4>)
 800157e:	f003 fd6d 	bl	800505c <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001588:	f7ff fd26 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <MX_TIM5_Init+0xc4>)
 800158e:	f000 faad 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000264 	.word	0x20000264
 80015a0:	40000c00 	.word	0x40000c00

080015a4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <MX_TIM6_Init+0x68>)
 80015b6:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <MX_TIM6_Init+0x6c>)
 80015b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_TIM6_Init+0x68>)
 80015bc:	f242 527f 	movw	r2, #9599	@ 0x257f
 80015c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_TIM6_Init+0x68>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <MX_TIM6_Init+0x68>)
 80015ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_TIM6_Init+0x68>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015d6:	480d      	ldr	r0, [pc, #52]	@ (800160c <MX_TIM6_Init+0x68>)
 80015d8:	f002 ff8e 	bl	80044f8 <HAL_TIM_Base_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80015e2:	f7ff fcf9 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	@ (800160c <MX_TIM6_Init+0x68>)
 80015f4:	f004 f99e 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80015fe:	f7ff fceb 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002b0 	.word	0x200002b0
 8001610:	40001000 	.word	0x40001000

08001614 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	@ 0x30
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	2224      	movs	r2, #36	@ 0x24
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f006 fe40 	bl	80082a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001632:	4b23      	ldr	r3, [pc, #140]	@ (80016c0 <MX_TIM8_Init+0xac>)
 8001634:	4a23      	ldr	r2, [pc, #140]	@ (80016c4 <MX_TIM8_Init+0xb0>)
 8001636:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001638:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <MX_TIM8_Init+0xac>)
 800163a:	2200      	movs	r2, #0
 800163c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <MX_TIM8_Init+0xac>)
 8001640:	2210      	movs	r2, #16
 8001642:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <MX_TIM8_Init+0xac>)
 8001646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800164a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <MX_TIM8_Init+0xac>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001652:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <MX_TIM8_Init+0xac>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <MX_TIM8_Init+0xac>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800165e:	2303      	movs	r3, #3
 8001660:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001666:	2301      	movs	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800166e:	230f      	movs	r3, #15
 8001670:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001676:	2301      	movs	r3, #1
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800167e:	230f      	movs	r3, #15
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	480d      	ldr	r0, [pc, #52]	@ (80016c0 <MX_TIM8_Init+0xac>)
 800168a:	f003 fa05 	bl	8004a98 <HAL_TIM_Encoder_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001694:	f7ff fca0 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_TIM8_Init+0xac>)
 80016aa:	f004 f943 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80016b4:	f7ff fc90 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	@ 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200002fc 	.word	0x200002fc
 80016c4:	40010400 	.word	0x40010400

080016c8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <MX_TIM12_Init+0x84>)
 80016e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001750 <MX_TIM12_Init+0x88>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <MX_TIM12_Init+0x84>)
 80016e8:	225f      	movs	r2, #95	@ 0x5f
 80016ea:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <MX_TIM12_Init+0x84>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <MX_TIM12_Init+0x84>)
 80016f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_TIM12_Init+0x84>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_TIM12_Init+0x84>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001706:	4811      	ldr	r0, [pc, #68]	@ (800174c <MX_TIM12_Init+0x84>)
 8001708:	f002 fff5 	bl	80046f6 <HAL_TIM_PWM_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001712:	f7ff fc61 	bl	8000fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001716:	2360      	movs	r3, #96	@ 0x60
 8001718:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2204      	movs	r2, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	@ (800174c <MX_TIM12_Init+0x84>)
 800172e:	f003 fc95 	bl	800505c <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001738:	f7ff fc4e 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <MX_TIM12_Init+0x84>)
 800173e:	f000 f9d5 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000348 	.word	0x20000348
 8001750:	40001800 	.word	0x40001800

08001754 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	@ 0x40
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a93      	ldr	r2, [pc, #588]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d149      	bne.n	800180a <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001776:	4b93      	ldr	r3, [pc, #588]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	4a92      	ldr	r2, [pc, #584]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6453      	str	r3, [r2, #68]	@ 0x44
 8001782:	4b90      	ldr	r3, [pc, #576]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800178e:	4b8d      	ldr	r3, [pc, #564]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a8c      	ldr	r2, [pc, #560]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b8a      	ldr	r3, [pc, #552]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 80017a6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c0:	4619      	mov	r1, r3
 80017c2:	4881      	ldr	r0, [pc, #516]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0x274>)
 80017c4:	f001 fa22 	bl	8002c0c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2105      	movs	r1, #5
 80017cc:	2018      	movs	r0, #24
 80017ce:	f000 fdd0 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017d2:	2018      	movs	r0, #24
 80017d4:	f000 fde9 	bl	80023aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2105      	movs	r1, #5
 80017dc:	2019      	movs	r0, #25
 80017de:	f000 fdc8 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017e2:	2019      	movs	r0, #25
 80017e4:	f000 fde1 	bl	80023aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2105      	movs	r1, #5
 80017ec:	201a      	movs	r0, #26
 80017ee:	f000 fdc0 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017f2:	201a      	movs	r0, #26
 80017f4:	f000 fdd9 	bl	80023aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2105      	movs	r1, #5
 80017fc:	201b      	movs	r0, #27
 80017fe:	f000 fdb8 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001802:	201b      	movs	r0, #27
 8001804:	f000 fdd1 	bl	80023aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001808:	e0d5      	b.n	80019b6 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a6f      	ldr	r2, [pc, #444]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x278>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d14c      	bne.n	80018ae <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001814:	4b6b      	ldr	r3, [pc, #428]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	4a6a      	ldr	r2, [pc, #424]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001820:	4b68      	ldr	r3, [pc, #416]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b65      	ldr	r3, [pc, #404]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001830:	4a64      	ldr	r2, [pc, #400]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6313      	str	r3, [r2, #48]	@ 0x30
 8001838:	4b62      	ldr	r3, [pc, #392]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	4b5f      	ldr	r3, [pc, #380]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001848:	4a5e      	ldr	r2, [pc, #376]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001850:	4b5c      	ldr	r3, [pc, #368]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 800185c:	2340      	movs	r3, #64	@ 0x40
 800185e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800186c:	2302      	movs	r3, #2
 800186e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	4856      	ldr	r0, [pc, #344]	@ (80019d0 <HAL_TIM_Encoder_MspInit+0x27c>)
 8001878:	f001 f9c8 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 800187c:	2320      	movs	r3, #32
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800188c:	2302      	movs	r3, #2
 800188e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001894:	4619      	mov	r1, r3
 8001896:	484f      	ldr	r0, [pc, #316]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0x280>)
 8001898:	f001 f9b8 	bl	8002c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2105      	movs	r1, #5
 80018a0:	201d      	movs	r0, #29
 80018a2:	f000 fd66 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018a6:	201d      	movs	r0, #29
 80018a8:	f000 fd7f 	bl	80023aa <HAL_NVIC_EnableIRQ>
}
 80018ac:	e083      	b.n	80019b6 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a49      	ldr	r2, [pc, #292]	@ (80019d8 <HAL_TIM_Encoder_MspInit+0x284>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d131      	bne.n	800191c <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018b8:	4b42      	ldr	r3, [pc, #264]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	4a41      	ldr	r2, [pc, #260]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c4:	4b3f      	ldr	r3, [pc, #252]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d0:	4b3c      	ldr	r3, [pc, #240]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	4a3b      	ldr	r2, [pc, #236]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6313      	str	r3, [r2, #48]	@ 0x30
 80018dc:	4b39      	ldr	r3, [pc, #228]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 80018e8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018fa:	2302      	movs	r3, #2
 80018fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001902:	4619      	mov	r1, r3
 8001904:	4835      	ldr	r0, [pc, #212]	@ (80019dc <HAL_TIM_Encoder_MspInit+0x288>)
 8001906:	f001 f981 	bl	8002c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2105      	movs	r1, #5
 800190e:	201e      	movs	r0, #30
 8001910:	f000 fd2f 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001914:	201e      	movs	r0, #30
 8001916:	f000 fd48 	bl	80023aa <HAL_NVIC_EnableIRQ>
}
 800191a:	e04c      	b.n	80019b6 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2f      	ldr	r2, [pc, #188]	@ (80019e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d147      	bne.n	80019b6 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001926:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	4a26      	ldr	r2, [pc, #152]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6453      	str	r3, [r2, #68]	@ 0x44
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a20      	ldr	r2, [pc, #128]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x270>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8001956:	23c0      	movs	r3, #192	@ 0xc0
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001966:	2303      	movs	r3, #3
 8001968:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800196e:	4619      	mov	r1, r3
 8001970:	481c      	ldr	r0, [pc, #112]	@ (80019e4 <HAL_TIM_Encoder_MspInit+0x290>)
 8001972:	f001 f94b 	bl	8002c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2105      	movs	r1, #5
 800197a:	202b      	movs	r0, #43	@ 0x2b
 800197c:	f000 fcf9 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001980:	202b      	movs	r0, #43	@ 0x2b
 8001982:	f000 fd12 	bl	80023aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2105      	movs	r1, #5
 800198a:	202c      	movs	r0, #44	@ 0x2c
 800198c:	f000 fcf1 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001990:	202c      	movs	r0, #44	@ 0x2c
 8001992:	f000 fd0a 	bl	80023aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2105      	movs	r1, #5
 800199a:	202d      	movs	r0, #45	@ 0x2d
 800199c:	f000 fce9 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80019a0:	202d      	movs	r0, #45	@ 0x2d
 80019a2:	f000 fd02 	bl	80023aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2105      	movs	r1, #5
 80019aa:	202e      	movs	r0, #46	@ 0x2e
 80019ac:	f000 fce1 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80019b0:	202e      	movs	r0, #46	@ 0x2e
 80019b2:	f000 fcfa 	bl	80023aa <HAL_NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3740      	adds	r7, #64	@ 0x40
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40000800 	.word	0x40000800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40010400 	.word	0x40010400
 80019e4:	40020800 	.word	0x40020800

080019e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f8:	d114      	bne.n	8001a24 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fa:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xac>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	4a25      	ldr	r2, [pc, #148]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xac>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a06:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xac>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2105      	movs	r1, #5
 8001a16:	201c      	movs	r0, #28
 8001a18:	f000 fcab 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a1c:	201c      	movs	r0, #28
 8001a1e:	f000 fcc4 	bl	80023aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001a22:	e032      	b.n	8001a8a <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1b      	ldr	r2, [pc, #108]	@ (8001a98 <HAL_TIM_PWM_MspInit+0xb0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d114      	bne.n	8001a58 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xac>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xac>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xac>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	2032      	movs	r0, #50	@ 0x32
 8001a4c:	f000 fc91 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a50:	2032      	movs	r0, #50	@ 0x32
 8001a52:	f000 fcaa 	bl	80023aa <HAL_NVIC_EnableIRQ>
}
 8001a56:	e018      	b.n	8001a8a <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a9c <HAL_TIM_PWM_MspInit+0xb4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d113      	bne.n	8001a8a <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xac>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a0b      	ldr	r2, [pc, #44]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xac>)
 8001a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_TIM_PWM_MspInit+0xac>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	202b      	movs	r0, #43	@ 0x2b
 8001a80:	f000 fc77 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001a84:	202b      	movs	r0, #43	@ 0x2b
 8001a86:	f000 fc90 	bl	80023aa <HAL_NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40000c00 	.word	0x40000c00
 8001a9c:	40001800 	.word	0x40001800

08001aa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <HAL_TIM_Base_MspInit+0x44>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d113      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x48>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x48>)
 8001ab8:	f043 0310 	orr.w	r3, r3, #16
 8001abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x48>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	2036      	movs	r0, #54	@ 0x36
 8001ad0:	f000 fc4f 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ad4:	2036      	movs	r0, #54	@ 0x36
 8001ad6:	f000 fc68 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40001000 	.word	0x40001000
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	@ 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b0c:	d139      	bne.n	8001b82 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b41      	ldr	r3, [pc, #260]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a40      	ldr	r2, [pc, #256]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b3b      	ldr	r3, [pc, #236]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b38      	ldr	r3, [pc, #224]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	482f      	ldr	r0, [pc, #188]	@ (8001c18 <HAL_TIM_MspPostInit+0x12c>)
 8001b5a:	f001 f857 	bl	8002c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 8001b5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b70:	2301      	movs	r3, #1
 8001b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4828      	ldr	r0, [pc, #160]	@ (8001c1c <HAL_TIM_MspPostInit+0x130>)
 8001b7c:	f001 f846 	bl	8002c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001b80:	e043      	b.n	8001c0a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a26      	ldr	r2, [pc, #152]	@ (8001c20 <HAL_TIM_MspPostInit+0x134>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d11c      	bne.n	8001bc6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b90:	4a20      	ldr	r2, [pc, #128]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b98:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001ba4:	2309      	movs	r3, #9
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4816      	ldr	r0, [pc, #88]	@ (8001c18 <HAL_TIM_MspPostInit+0x12c>)
 8001bc0:	f001 f824 	bl	8002c0c <HAL_GPIO_Init>
}
 8001bc4:	e021      	b.n	8001c0a <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a16      	ldr	r2, [pc, #88]	@ (8001c24 <HAL_TIM_MspPostInit+0x138>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d11c      	bne.n	8001c0a <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <HAL_TIM_MspPostInit+0x128>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001be8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001bfa:	2309      	movs	r3, #9
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <HAL_TIM_MspPostInit+0x130>)
 8001c06:	f001 f801 	bl	8002c0c <HAL_GPIO_Init>
}
 8001c0a:	bf00      	nop
 8001c0c:	3730      	adds	r7, #48	@ 0x30
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40000c00 	.word	0x40000c00
 8001c24:	40001800 	.word	0x40001800

08001c28 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c2e:	4a15      	ldr	r2, [pc, #84]	@ (8001c84 <MX_USART2_UART_Init+0x5c>)
 8001c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c32:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c34:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <MX_USART2_UART_Init+0x58>)
 8001c6c:	f003 ff0e 	bl	8005a8c <HAL_UART_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c76:	f7ff f9af 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000394 	.word	0x20000394
 8001c84:	40004400 	.word	0x40004400

08001c88 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001c8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ce4 <MX_USART3_UART_Init+0x5c>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c92:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <MX_USART3_UART_Init+0x58>)
 8001ccc:	f003 fede 	bl	8005a8c <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cd6:	f7ff f97f 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000041c 	.word	0x2000041c
 8001ce4:	40004800 	.word	0x40004800

08001ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0b0      	sub	sp, #192	@ 0xc0
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2290      	movs	r2, #144	@ 0x90
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f006 facd 	bl	80082a8 <memset>
  if(uartHandle->Instance==USART2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a79      	ldr	r2, [pc, #484]	@ (8001ef8 <HAL_UART_MspInit+0x210>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	f040 80a0 	bne.w	8001e5a <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 ffbe 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d32:	f7ff f951 	bl	8000fd8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d36:	4b71      	ldr	r3, [pc, #452]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a70      	ldr	r2, [pc, #448]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d42:	4b6e      	ldr	r3, [pc, #440]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a6a      	ldr	r2, [pc, #424]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b68      	ldr	r3, [pc, #416]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d66:	2360      	movs	r3, #96	@ 0x60
 8001d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d7e:	2307      	movs	r3, #7
 8001d80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d88:	4619      	mov	r1, r3
 8001d8a:	485d      	ldr	r0, [pc, #372]	@ (8001f00 <HAL_UART_MspInit+0x218>)
 8001d8c:	f000 ff3e 	bl	8002c0c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d90:	4b5c      	ldr	r3, [pc, #368]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001d92:	4a5d      	ldr	r2, [pc, #372]	@ (8001f08 <HAL_UART_MspInit+0x220>)
 8001d94:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d96:	4b5b      	ldr	r3, [pc, #364]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001d98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d9e:	4b59      	ldr	r3, [pc, #356]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da4:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001daa:	4b56      	ldr	r3, [pc, #344]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001dac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001db2:	4b54      	ldr	r3, [pc, #336]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001db8:	4b52      	ldr	r3, [pc, #328]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001dbe:	4b51      	ldr	r3, [pc, #324]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dca:	4b4e      	ldr	r3, [pc, #312]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001dd0:	484c      	ldr	r0, [pc, #304]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001dd2:	f000 fb05 	bl	80023e0 <HAL_DMA_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001ddc:	f7ff f8fc 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a48      	ldr	r2, [pc, #288]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001de4:	675a      	str	r2, [r3, #116]	@ 0x74
 8001de6:	4a47      	ldr	r2, [pc, #284]	@ (8001f04 <HAL_UART_MspInit+0x21c>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001dec:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001dee:	4a48      	ldr	r2, [pc, #288]	@ (8001f10 <HAL_UART_MspInit+0x228>)
 8001df0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001df2:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001df4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001df8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dfa:	4b44      	ldr	r3, [pc, #272]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001dfc:	2240      	movs	r2, #64	@ 0x40
 8001dfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e00:	4b42      	ldr	r3, [pc, #264]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e06:	4b41      	ldr	r3, [pc, #260]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e14:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e20:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e26:	4b39      	ldr	r3, [pc, #228]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e2c:	4837      	ldr	r0, [pc, #220]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e2e:	f000 fad7 	bl	80023e0 <HAL_DMA_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001e38:	f7ff f8ce 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a33      	ldr	r2, [pc, #204]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e40:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e42:	4a32      	ldr	r2, [pc, #200]	@ (8001f0c <HAL_UART_MspInit+0x224>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2105      	movs	r1, #5
 8001e4c:	2026      	movs	r0, #38	@ 0x26
 8001e4e:	f000 fa90 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e52:	2026      	movs	r0, #38	@ 0x26
 8001e54:	f000 faa9 	bl	80023aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e58:	e049      	b.n	8001eee <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f14 <HAL_UART_MspInit+0x22c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d144      	bne.n	8001eee <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e68:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 ff18 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001e7e:	f7ff f8ab 	bl	8000fd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e82:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_UART_MspInit+0x214>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001eb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ecc:	2307      	movs	r3, #7
 8001ece:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4809      	ldr	r0, [pc, #36]	@ (8001f00 <HAL_UART_MspInit+0x218>)
 8001eda:	f000 fe97 	bl	8002c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2105      	movs	r1, #5
 8001ee2:	2027      	movs	r0, #39	@ 0x27
 8001ee4:	f000 fa45 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ee8:	2027      	movs	r0, #39	@ 0x27
 8001eea:	f000 fa5e 	bl	80023aa <HAL_NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	37c0      	adds	r7, #192	@ 0xc0
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40004400 	.word	0x40004400
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	200004a4 	.word	0x200004a4
 8001f08:	40026088 	.word	0x40026088
 8001f0c:	20000504 	.word	0x20000504
 8001f10:	400260a0 	.word	0x400260a0
 8001f14:	40004800 	.word	0x40004800

08001f18 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f26:	2206      	movs	r2, #6
 8001f28:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f38:	2202      	movs	r2, #2
 8001f3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f5c:	f001 f835 	bl	8002fca <HAL_PCD_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f66:	f7ff f837 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000564 	.word	0x20000564

08001f74 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0ae      	sub	sp, #184	@ 0xb8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2290      	movs	r2, #144	@ 0x90
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f006 f987 	bl	80082a8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fa2:	d159      	bne.n	8002058 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001fa4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001fa8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f001 fe77 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fc0:	f7ff f80a 	bl	8000fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b26      	ldr	r3, [pc, #152]	@ (8002060 <HAL_PCD_MspInit+0xec>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	4a25      	ldr	r2, [pc, #148]	@ (8002060 <HAL_PCD_MspInit+0xec>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd0:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <HAL_PCD_MspInit+0xec>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fdc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002000:	4619      	mov	r1, r3
 8002002:	4818      	ldr	r0, [pc, #96]	@ (8002064 <HAL_PCD_MspInit+0xf0>)
 8002004:	f000 fe02 	bl	8002c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002020:	4619      	mov	r1, r3
 8002022:	4810      	ldr	r0, [pc, #64]	@ (8002064 <HAL_PCD_MspInit+0xf0>)
 8002024:	f000 fdf2 	bl	8002c0c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002028:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_PCD_MspInit+0xec>)
 800202a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202c:	4a0c      	ldr	r2, [pc, #48]	@ (8002060 <HAL_PCD_MspInit+0xec>)
 800202e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002032:	6353      	str	r3, [r2, #52]	@ 0x34
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_PCD_MspInit+0xec>)
 8002036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <HAL_PCD_MspInit+0xec>)
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	4a06      	ldr	r2, [pc, #24]	@ (8002060 <HAL_PCD_MspInit+0xec>)
 8002046:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800204a:	6453      	str	r3, [r2, #68]	@ 0x44
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <HAL_PCD_MspInit+0xec>)
 800204e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002058:	bf00      	nop
 800205a:	37b8      	adds	r7, #184	@ 0xb8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	40020000 	.word	0x40020000

08002068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800206c:	f7ff f8b8 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002070:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002072:	490d      	ldr	r1, [pc, #52]	@ (80020a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002074:	4a0d      	ldr	r2, [pc, #52]	@ (80020ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002078:	e002      	b.n	8002080 <LoopCopyDataInit>

0800207a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800207c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207e:	3304      	adds	r3, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002084:	d3f9      	bcc.n	800207a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002088:	4c0a      	ldr	r4, [pc, #40]	@ (80020b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800208c:	e001      	b.n	8002092 <LoopFillZerobss>

0800208e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002090:	3204      	adds	r2, #4

08002092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002094:	d3fb      	bcc.n	800208e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002096:	f006 f927 	bl	80082e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209a:	f7fe fea3 	bl	8000de4 <main>
  bx  lr    
 800209e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80020ac:	08008650 	.word	0x08008650
  ldr r2, =_sbss
 80020b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80020b4:	2000100c 	.word	0x2000100c

080020b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC_IRQHandler>

080020ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020be:	2003      	movs	r0, #3
 80020c0:	f000 f94c 	bl	800235c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c4:	200f      	movs	r0, #15
 80020c6:	f000 f805 	bl	80020d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ca:	f7fe ff8b 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_InitTick+0x54>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_InitTick+0x58>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f967 	bl	80023c6 <HAL_SYSTICK_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00e      	b.n	8002120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0f      	cmp	r3, #15
 8002106:	d80a      	bhi.n	800211e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f000 f92f 	bl	8002372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002114:	4a06      	ldr	r2, [pc, #24]	@ (8002130 <HAL_InitTick+0x5c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000000 	.word	0x20000000
 800212c:	20000008 	.word	0x20000008
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <HAL_IncTick+0x20>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_IncTick+0x24>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <HAL_IncTick+0x24>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000008 	.word	0x20000008
 8002158:	20000a44 	.word	0x20000a44

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_GetTick+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000a44 	.word	0x20000a44

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff ffee 	bl	800215c <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d005      	beq.n	800219a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_Delay+0x44>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800219a:	bf00      	nop
 800219c:	f7ff ffde 	bl	800215c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d8f7      	bhi.n	800219c <HAL_Delay+0x28>
  {
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008

080021bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <__NVIC_SetPriorityGrouping+0x40>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <__NVIC_SetPriorityGrouping+0x40>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00
 8002200:	05fa0000 	.word	0x05fa0000

08002204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <__NVIC_GetPriorityGrouping+0x18>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	f003 0307 	and.w	r3, r3, #7
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	db0b      	blt.n	800224a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4907      	ldr	r1, [pc, #28]	@ (8002258 <__NVIC_EnableIRQ+0x38>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2001      	movs	r0, #1
 8002242:	fa00 f202 	lsl.w	r2, r0, r2
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000e100 	.word	0xe000e100

0800225c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db0a      	blt.n	8002286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	b2da      	uxtb	r2, r3
 8002274:	490c      	ldr	r1, [pc, #48]	@ (80022a8 <__NVIC_SetPriority+0x4c>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	0112      	lsls	r2, r2, #4
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	440b      	add	r3, r1
 8002280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002284:	e00a      	b.n	800229c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4908      	ldr	r1, [pc, #32]	@ (80022ac <__NVIC_SetPriority+0x50>)
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	3b04      	subs	r3, #4
 8002294:	0112      	lsls	r2, r2, #4
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	440b      	add	r3, r1
 800229a:	761a      	strb	r2, [r3, #24]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000e100 	.word	0xe000e100
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f1c3 0307 	rsb	r3, r3, #7
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	bf28      	it	cs
 80022ce:	2304      	movcs	r3, #4
 80022d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3304      	adds	r3, #4
 80022d6:	2b06      	cmp	r3, #6
 80022d8:	d902      	bls.n	80022e0 <NVIC_EncodePriority+0x30>
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3b03      	subs	r3, #3
 80022de:	e000      	b.n	80022e2 <NVIC_EncodePriority+0x32>
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	401a      	ands	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f8:	f04f 31ff 	mov.w	r1, #4294967295
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43d9      	mvns	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	4313      	orrs	r3, r2
         );
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	@ 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002328:	d301      	bcc.n	800232e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232a:	2301      	movs	r3, #1
 800232c:	e00f      	b.n	800234e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <SysTick_Config+0x40>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002336:	210f      	movs	r1, #15
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f7ff ff8e 	bl	800225c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <SysTick_Config+0x40>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002346:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <SysTick_Config+0x40>)
 8002348:	2207      	movs	r2, #7
 800234a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	e000e010 	.word	0xe000e010

0800235c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff29 	bl	80021bc <__NVIC_SetPriorityGrouping>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002384:	f7ff ff3e 	bl	8002204 <__NVIC_GetPriorityGrouping>
 8002388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	6978      	ldr	r0, [r7, #20]
 8002390:	f7ff ff8e 	bl	80022b0 <NVIC_EncodePriority>
 8002394:	4602      	mov	r2, r0
 8002396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff5d 	bl	800225c <__NVIC_SetPriority>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff31 	bl	8002220 <__NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffa2 	bl	8002318 <SysTick_Config>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff feb6 	bl	800215c <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e099      	b.n	8002530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241c:	e00f      	b.n	800243e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800241e:	f7ff fe9d 	bl	800215c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b05      	cmp	r3, #5
 800242a:	d908      	bls.n	800243e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2203      	movs	r2, #3
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e078      	b.n	8002530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e8      	bne.n	800241e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_DMA_Init+0x158>)
 8002458:	4013      	ands	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	2b04      	cmp	r3, #4
 8002496:	d107      	bne.n	80024a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	4313      	orrs	r3, r2
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f023 0307 	bic.w	r3, r3, #7
 80024be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d117      	bne.n	8002502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00e      	beq.n	8002502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fb15 	bl	8002b14 <DMA_CheckFifoParam>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2240      	movs	r2, #64	@ 0x40
 80024f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024fe:	2301      	movs	r3, #1
 8002500:	e016      	b.n	8002530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 facc 	bl	8002aa8 <DMA_CalcBaseAndBitshift>
 8002510:	4603      	mov	r3, r0
 8002512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	223f      	movs	r2, #63	@ 0x3f
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	e010803f 	.word	0xe010803f

0800253c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_DMA_Start_IT+0x26>
 800255e:	2302      	movs	r3, #2
 8002560:	e048      	b.n	80025f4 <HAL_DMA_Start_IT+0xb8>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d137      	bne.n	80025e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2202      	movs	r2, #2
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fa5e 	bl	8002a4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	223f      	movs	r2, #63	@ 0x3f
 8002596:	409a      	lsls	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0216 	orr.w	r2, r2, #22
 80025aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e005      	b.n	80025f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800260a:	f7ff fda7 	bl	800215c <HAL_GetTick>
 800260e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d008      	beq.n	800262e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2280      	movs	r2, #128	@ 0x80
 8002620:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e052      	b.n	80026d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0216 	bic.w	r2, r2, #22
 800263c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800264c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_DMA_Abort+0x62>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0208 	bic.w	r2, r2, #8
 800266c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267e:	e013      	b.n	80026a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002680:	f7ff fd6c 	bl	800215c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b05      	cmp	r3, #5
 800268c:	d90c      	bls.n	80026a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2203      	movs	r2, #3
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e015      	b.n	80026d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1e4      	bne.n	8002680 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	223f      	movs	r2, #63	@ 0x3f
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d004      	beq.n	80026fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	@ 0x80
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00c      	b.n	8002714 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2205      	movs	r2, #5
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800272c:	4b8e      	ldr	r3, [pc, #568]	@ (8002968 <HAL_DMA_IRQHandler+0x248>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a8e      	ldr	r2, [pc, #568]	@ (800296c <HAL_DMA_IRQHandler+0x24c>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0a9b      	lsrs	r3, r3, #10
 8002738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274a:	2208      	movs	r2, #8
 800274c:	409a      	lsls	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01a      	beq.n	800278c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0204 	bic.w	r2, r2, #4
 8002772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002778:	2208      	movs	r2, #8
 800277a:	409a      	lsls	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002790:	2201      	movs	r2, #1
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d012      	beq.n	80027c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ae:	2201      	movs	r2, #1
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ba:	f043 0202 	orr.w	r2, r3, #2
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	2204      	movs	r2, #4
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d012      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e4:	2204      	movs	r2, #4
 80027e6:	409a      	lsls	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f0:	f043 0204 	orr.w	r2, r3, #4
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	2210      	movs	r2, #16
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d043      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03c      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	2210      	movs	r2, #16
 800281c:	409a      	lsls	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d018      	beq.n	8002862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d024      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
 800284e:	e01f      	b.n	8002890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01b      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
 8002860:	e016      	b.n	8002890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0208 	bic.w	r2, r2, #8
 800287e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002894:	2220      	movs	r2, #32
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 808f 	beq.w	80029c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8087 	beq.w	80029c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b6:	2220      	movs	r2, #32
 80028b8:	409a      	lsls	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d136      	bne.n	8002938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0216 	bic.w	r2, r2, #22
 80028d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <HAL_DMA_IRQHandler+0x1da>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0208 	bic.w	r2, r2, #8
 8002908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	223f      	movs	r2, #63	@ 0x3f
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292a:	2b00      	cmp	r3, #0
 800292c:	d07e      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
        }
        return;
 8002936:	e079      	b.n	8002a2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01d      	beq.n	8002982 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10d      	bne.n	8002970 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002958:	2b00      	cmp	r3, #0
 800295a:	d031      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
 8002964:	e02c      	b.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000
 800296c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d023      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
 8002980:	e01e      	b.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10f      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0210 	bic.w	r2, r2, #16
 800299e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d032      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d022      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2205      	movs	r2, #5
 80029d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3301      	adds	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d307      	bcc.n	8002a08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f2      	bne.n	80029ec <HAL_DMA_IRQHandler+0x2cc>
 8002a06:	e000      	b.n	8002a0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
 8002a2a:	e000      	b.n	8002a2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a2c:	bf00      	nop
    }
  }
}
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b40      	cmp	r3, #64	@ 0x40
 8002a78:	d108      	bne.n	8002a8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a8a:	e007      	b.n	8002a9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	60da      	str	r2, [r3, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	3b10      	subs	r3, #16
 8002ab8:	4a13      	ldr	r2, [pc, #76]	@ (8002b08 <DMA_CalcBaseAndBitshift+0x60>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ac2:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <DMA_CalcBaseAndBitshift+0x64>)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d908      	bls.n	8002ae8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <DMA_CalcBaseAndBitshift+0x68>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	1d1a      	adds	r2, r3, #4
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ae6:	e006      	b.n	8002af6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <DMA_CalcBaseAndBitshift+0x68>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	aaaaaaab 	.word	0xaaaaaaab
 8002b0c:	08008534 	.word	0x08008534
 8002b10:	fffffc00 	.word	0xfffffc00

08002b14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11f      	bne.n	8002b6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d856      	bhi.n	8002be2 <DMA_CheckFifoParam+0xce>
 8002b34:	a201      	add	r2, pc, #4	@ (adr r2, 8002b3c <DMA_CheckFifoParam+0x28>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b4d 	.word	0x08002b4d
 8002b40:	08002b5f 	.word	0x08002b5f
 8002b44:	08002b4d 	.word	0x08002b4d
 8002b48:	08002be3 	.word	0x08002be3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d046      	beq.n	8002be6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e043      	b.n	8002be6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b66:	d140      	bne.n	8002bea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6c:	e03d      	b.n	8002bea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b76:	d121      	bne.n	8002bbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d837      	bhi.n	8002bee <DMA_CheckFifoParam+0xda>
 8002b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b84 <DMA_CheckFifoParam+0x70>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002b9b 	.word	0x08002b9b
 8002b8c:	08002b95 	.word	0x08002b95
 8002b90:	08002bad 	.word	0x08002bad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	e030      	b.n	8002bfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d025      	beq.n	8002bf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002baa:	e022      	b.n	8002bf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bb4:	d11f      	bne.n	8002bf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bba:	e01c      	b.n	8002bf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d903      	bls.n	8002bca <DMA_CheckFifoParam+0xb6>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d003      	beq.n	8002bd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bc8:	e018      	b.n	8002bfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8002bce:	e015      	b.n	8002bfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00e      	beq.n	8002bfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      break;
 8002be0:	e00b      	b.n	8002bfa <DMA_CheckFifoParam+0xe6>
      break;
 8002be2:	bf00      	nop
 8002be4:	e00a      	b.n	8002bfc <DMA_CheckFifoParam+0xe8>
      break;
 8002be6:	bf00      	nop
 8002be8:	e008      	b.n	8002bfc <DMA_CheckFifoParam+0xe8>
      break;
 8002bea:	bf00      	nop
 8002bec:	e006      	b.n	8002bfc <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e004      	b.n	8002bfc <DMA_CheckFifoParam+0xe8>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e002      	b.n	8002bfc <DMA_CheckFifoParam+0xe8>
      break;   
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <DMA_CheckFifoParam+0xe8>
      break;
 8002bfa:	bf00      	nop
    }
  } 
  
  return status; 
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop

08002c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b089      	sub	sp, #36	@ 0x24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	e175      	b.n	8002f18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	f040 8164 	bne.w	8002f12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d005      	beq.n	8002c62 <HAL_GPIO_Init+0x56>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d130      	bne.n	8002cc4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 0201 	and.w	r2, r3, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d017      	beq.n	8002d00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d123      	bne.n	8002d54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	08da      	lsrs	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3208      	adds	r2, #8
 8002d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	220f      	movs	r2, #15
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80be 	beq.w	8002f12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	4b66      	ldr	r3, [pc, #408]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	4a65      	ldr	r2, [pc, #404]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002da2:	4b63      	ldr	r3, [pc, #396]	@ (8002f30 <HAL_GPIO_Init+0x324>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dae:	4a61      	ldr	r2, [pc, #388]	@ (8002f34 <HAL_GPIO_Init+0x328>)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a58      	ldr	r2, [pc, #352]	@ (8002f38 <HAL_GPIO_Init+0x32c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d037      	beq.n	8002e4a <HAL_GPIO_Init+0x23e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a57      	ldr	r2, [pc, #348]	@ (8002f3c <HAL_GPIO_Init+0x330>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d031      	beq.n	8002e46 <HAL_GPIO_Init+0x23a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a56      	ldr	r2, [pc, #344]	@ (8002f40 <HAL_GPIO_Init+0x334>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d02b      	beq.n	8002e42 <HAL_GPIO_Init+0x236>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a55      	ldr	r2, [pc, #340]	@ (8002f44 <HAL_GPIO_Init+0x338>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d025      	beq.n	8002e3e <HAL_GPIO_Init+0x232>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a54      	ldr	r2, [pc, #336]	@ (8002f48 <HAL_GPIO_Init+0x33c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01f      	beq.n	8002e3a <HAL_GPIO_Init+0x22e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a53      	ldr	r2, [pc, #332]	@ (8002f4c <HAL_GPIO_Init+0x340>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d019      	beq.n	8002e36 <HAL_GPIO_Init+0x22a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a52      	ldr	r2, [pc, #328]	@ (8002f50 <HAL_GPIO_Init+0x344>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <HAL_GPIO_Init+0x226>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	@ (8002f54 <HAL_GPIO_Init+0x348>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00d      	beq.n	8002e2e <HAL_GPIO_Init+0x222>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a50      	ldr	r2, [pc, #320]	@ (8002f58 <HAL_GPIO_Init+0x34c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d007      	beq.n	8002e2a <HAL_GPIO_Init+0x21e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f5c <HAL_GPIO_Init+0x350>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <HAL_GPIO_Init+0x21a>
 8002e22:	2309      	movs	r3, #9
 8002e24:	e012      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e26:	230a      	movs	r3, #10
 8002e28:	e010      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	e00e      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e2e:	2307      	movs	r3, #7
 8002e30:	e00c      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e32:	2306      	movs	r3, #6
 8002e34:	e00a      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e36:	2305      	movs	r3, #5
 8002e38:	e008      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	e006      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e004      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x240>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f002 0203 	and.w	r2, r2, #3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	4093      	lsls	r3, r2
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e5c:	4935      	ldr	r1, [pc, #212]	@ (8002f34 <HAL_GPIO_Init+0x328>)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f60 <HAL_GPIO_Init+0x354>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8e:	4a34      	ldr	r2, [pc, #208]	@ (8002f60 <HAL_GPIO_Init+0x354>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e94:	4b32      	ldr	r3, [pc, #200]	@ (8002f60 <HAL_GPIO_Init+0x354>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb8:	4a29      	ldr	r2, [pc, #164]	@ (8002f60 <HAL_GPIO_Init+0x354>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ebe:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <HAL_GPIO_Init+0x354>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f60 <HAL_GPIO_Init+0x354>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f60 <HAL_GPIO_Init+0x354>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f0c:	4a14      	ldr	r2, [pc, #80]	@ (8002f60 <HAL_GPIO_Init+0x354>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b0f      	cmp	r3, #15
 8002f1c:	f67f ae86 	bls.w	8002c2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3724      	adds	r7, #36	@ 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40021400 	.word	0x40021400
 8002f50:	40021800 	.word	0x40021800
 8002f54:	40021c00 	.word	0x40021c00
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40022400 	.word	0x40022400
 8002f60:	40013c00 	.word	0x40013c00

08002f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
 8002f70:	4613      	mov	r3, r2
 8002f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f74:	787b      	ldrb	r3, [r7, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f80:	e003      	b.n	8002f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f82:	887b      	ldrh	r3, [r7, #2]
 8002f84:	041a      	lsls	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	619a      	str	r2, [r3, #24]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fa8:	887a      	ldrh	r2, [r7, #2]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4013      	ands	r3, r2
 8002fae:	041a      	lsls	r2, r3, #16
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	400b      	ands	r3, r1
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	619a      	str	r2, [r3, #24]
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af02      	add	r7, sp, #8
 8002fd0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e108      	b.n	80031ee <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe ffbc 	bl	8001f74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2203      	movs	r2, #3
 8003000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800300a:	d102      	bne.n	8003012 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f004 fba6 	bl	8007768 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7c1a      	ldrb	r2, [r3, #16]
 8003024:	f88d 2000 	strb.w	r2, [sp]
 8003028:	3304      	adds	r3, #4
 800302a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800302c:	f004 fb42 	bl	80076b4 <USB_CoreInit>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0d5      	b.n	80031ee <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f004 fb9e 	bl	800778a <USB_SetCurrentMode>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0c6      	b.n	80031ee <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e04a      	b.n	80030fc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	3315      	adds	r3, #21
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3314      	adds	r3, #20
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	b298      	uxth	r0, r3
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	332e      	adds	r3, #46	@ 0x2e
 80030a2:	4602      	mov	r2, r0
 80030a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3318      	adds	r3, #24
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	331c      	adds	r3, #28
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3320      	adds	r3, #32
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3324      	adds	r3, #36	@ 0x24
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	3301      	adds	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	791b      	ldrb	r3, [r3, #4]
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	429a      	cmp	r2, r3
 8003104:	d3af      	bcc.n	8003066 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
 800310a:	e044      	b.n	8003196 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	3301      	adds	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	791b      	ldrb	r3, [r3, #4]
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	429a      	cmp	r2, r3
 800319e:	d3b5      	bcc.n	800310c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	7c1a      	ldrb	r2, [r3, #16]
 80031a8:	f88d 2000 	strb.w	r2, [sp]
 80031ac:	3304      	adds	r3, #4
 80031ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b0:	f004 fb38 	bl	8007824 <USB_DevInit>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e013      	b.n	80031ee <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	7b1b      	ldrb	r3, [r3, #12]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d102      	bne.n	80031e2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f80b 	bl	80031f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 fcf3 	bl	8007bd2 <USB_DevDisconnect>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003226:	4b05      	ldr	r3, [pc, #20]	@ (800323c <HAL_PCDEx_ActivateLPM+0x44>)
 8003228:	4313      	orrs	r3, r2
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	10000003 	.word	0x10000003

08003240 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40007000 	.word	0x40007000

08003260 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a22      	ldr	r2, [pc, #136]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003282:	4b1e      	ldr	r3, [pc, #120]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1d      	ldr	r2, [pc, #116]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800328e:	f7fe ff65 	bl	800215c <HAL_GetTick>
 8003292:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003294:	e009      	b.n	80032aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003296:	f7fe ff61 	bl	800215c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032a4:	d901      	bls.n	80032aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e022      	b.n	80032f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032aa:	4b14      	ldr	r3, [pc, #80]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b6:	d1ee      	bne.n	8003296 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032b8:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0f      	ldr	r2, [pc, #60]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c4:	f7fe ff4a 	bl	800215c <HAL_GetTick>
 80032c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ca:	e009      	b.n	80032e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032cc:	f7fe ff46 	bl	800215c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032da:	d901      	bls.n	80032e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e007      	b.n	80032f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032ec:	d1ee      	bne.n	80032cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000

08003300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e29b      	b.n	800384e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8087 	beq.w	8003432 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003324:	4b96      	ldr	r3, [pc, #600]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b04      	cmp	r3, #4
 800332e:	d00c      	beq.n	800334a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003330:	4b93      	ldr	r3, [pc, #588]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d112      	bne.n	8003362 <HAL_RCC_OscConfig+0x62>
 800333c:	4b90      	ldr	r3, [pc, #576]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003344:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003348:	d10b      	bne.n	8003362 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334a:	4b8d      	ldr	r3, [pc, #564]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d06c      	beq.n	8003430 <HAL_RCC_OscConfig+0x130>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d168      	bne.n	8003430 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e275      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x7a>
 800336c:	4b84      	ldr	r3, [pc, #528]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a83      	ldr	r2, [pc, #524]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e02e      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x9c>
 8003382:	4b7f      	ldr	r3, [pc, #508]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7e      	ldr	r2, [pc, #504]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b7c      	ldr	r3, [pc, #496]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7b      	ldr	r2, [pc, #492]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0xc0>
 80033a6:	4b76      	ldr	r3, [pc, #472]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a75      	ldr	r2, [pc, #468]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b73      	ldr	r3, [pc, #460]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a72      	ldr	r2, [pc, #456]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xd8>
 80033c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe febc 	bl	800215c <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe feb8 	bl	800215c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e229      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b61      	ldr	r3, [pc, #388]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe8>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fea8 	bl	800215c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fea4 	bl	800215c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e215      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	4b57      	ldr	r3, [pc, #348]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x110>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d069      	beq.n	8003512 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800343e:	4b50      	ldr	r3, [pc, #320]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b4d      	ldr	r3, [pc, #308]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	d11c      	bne.n	8003490 <HAL_RCC_OscConfig+0x190>
 8003456:	4b4a      	ldr	r3, [pc, #296]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	4b47      	ldr	r3, [pc, #284]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x17a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1e9      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b41      	ldr	r3, [pc, #260]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	493d      	ldr	r1, [pc, #244]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	e040      	b.n	8003512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a38      	ldr	r2, [pc, #224]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fe fe5a 	bl	800215c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fe fe56 	bl	800215c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1c7      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4929      	ldr	r1, [pc, #164]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
 80034de:	e018      	b.n	8003512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e0:	4b27      	ldr	r3, [pc, #156]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a26      	ldr	r2, [pc, #152]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe fe36 	bl	800215c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f4:	f7fe fe32 	bl	800215c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1a3      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d038      	beq.n	8003590 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d019      	beq.n	800355a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003526:	4b16      	ldr	r3, [pc, #88]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352a:	4a15      	ldr	r2, [pc, #84]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fe fe13 	bl	800215c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353a:	f7fe fe0f 	bl	800215c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e180      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354c:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x23a>
 8003558:	e01a      	b.n	8003590 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355e:	4a08      	ldr	r2, [pc, #32]	@ (8003580 <HAL_RCC_OscConfig+0x280>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fe fdf9 	bl	800215c <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356e:	f7fe fdf5 	bl	800215c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d903      	bls.n	8003584 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e166      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
 8003580:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b92      	ldr	r3, [pc, #584]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ee      	bne.n	800356e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a4 	beq.w	80036e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359e:	4b8c      	ldr	r3, [pc, #560]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	4b89      	ldr	r3, [pc, #548]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	4a88      	ldr	r2, [pc, #544]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035b6:	4b86      	ldr	r3, [pc, #536]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c6:	4b83      	ldr	r3, [pc, #524]	@ (80037d4 <HAL_RCC_OscConfig+0x4d4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d118      	bne.n	8003604 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035d2:	4b80      	ldr	r3, [pc, #512]	@ (80037d4 <HAL_RCC_OscConfig+0x4d4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a7f      	ldr	r2, [pc, #508]	@ (80037d4 <HAL_RCC_OscConfig+0x4d4>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035de:	f7fe fdbd 	bl	800215c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7fe fdb9 	bl	800215c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	@ 0x64
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e12a      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f8:	4b76      	ldr	r3, [pc, #472]	@ (80037d4 <HAL_RCC_OscConfig+0x4d4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x31a>
 800360c:	4b70      	ldr	r3, [pc, #448]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	4a6f      	ldr	r2, [pc, #444]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	@ 0x70
 8003618:	e02d      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x33c>
 8003622:	4b6b      	ldr	r3, [pc, #428]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	4a6a      	ldr	r2, [pc, #424]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	@ 0x70
 800362e:	4b68      	ldr	r3, [pc, #416]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003632:	4a67      	ldr	r2, [pc, #412]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	6713      	str	r3, [r2, #112]	@ 0x70
 800363a:	e01c      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x35e>
 8003644:	4b62      	ldr	r3, [pc, #392]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003648:	4a61      	ldr	r2, [pc, #388]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003650:	4b5f      	ldr	r3, [pc, #380]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4a5e      	ldr	r2, [pc, #376]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	@ 0x70
 800365c:	e00b      	b.n	8003676 <HAL_RCC_OscConfig+0x376>
 800365e:	4b5c      	ldr	r3, [pc, #368]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	4a5b      	ldr	r2, [pc, #364]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	@ 0x70
 800366a:	4b59      	ldr	r3, [pc, #356]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366e:	4a58      	ldr	r2, [pc, #352]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe fd6d 	bl	800215c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fe fd69 	bl	800215c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0d8      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b4c      	ldr	r3, [pc, #304]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCC_OscConfig+0x386>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fe fd57 	bl	800215c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fd53 	bl	800215c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0c2      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	4b41      	ldr	r3, [pc, #260]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4b3d      	ldr	r3, [pc, #244]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	4a3c      	ldr	r2, [pc, #240]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80ae 	beq.w	800384c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f0:	4b37      	ldr	r3, [pc, #220]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d06d      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d14b      	bne.n	800379c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003704:	4b32      	ldr	r3, [pc, #200]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a31      	ldr	r2, [pc, #196]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800370a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800370e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fe fd24 	bl	800215c <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fe fd20 	bl	800215c <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e091      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	4b29      	ldr	r3, [pc, #164]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	071b      	lsls	r3, r3, #28
 8003762:	491b      	ldr	r1, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003768:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a18      	ldr	r2, [pc, #96]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fe fcf2 	bl	800215c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fe fcee 	bl	800215c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e05f      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x47c>
 800379a:	e057      	b.n	800384c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379c:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0b      	ldr	r2, [pc, #44]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80037a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fe fcd8 	bl	800215c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe fcd4 	bl	800215c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e045      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4b0>
 80037ce:	e03d      	b.n	800384c <HAL_RCC_OscConfig+0x54c>
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003858 <HAL_RCC_OscConfig+0x558>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d030      	beq.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d129      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d122      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800380e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003810:	4293      	cmp	r3, r2
 8003812:	d119      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	3b01      	subs	r3, #1
 8003822:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d10f      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003832:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d0      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b6a      	ldr	r3, [pc, #424]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b67      	ldr	r3, [pc, #412]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 020f 	bic.w	r2, r3, #15
 800388a:	4965      	ldr	r1, [pc, #404]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d040      	beq.n	8003980 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e073      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b39      	ldr	r3, [pc, #228]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4936      	ldr	r1, [pc, #216]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fe fc04 	bl	800215c <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fe fc00 	bl	800215c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e053      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b27      	ldr	r3, [pc, #156]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d210      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 020f 	bic.w	r2, r3, #15
 8003996:	4922      	ldr	r1, [pc, #136]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039da:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	@ (8003a28 <HAL_RCC_ClockConfig+0x1cc>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <HAL_RCC_ClockConfig+0x1d0>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_RCC_ClockConfig+0x1d4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fb60 	bl	80020d4 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	0800851c 	.word	0x0800851c
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a38:	b094      	sub	sp, #80	@ 0x50
 8003a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a40:	2300      	movs	r3, #0
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a44:	2300      	movs	r3, #0
 8003a46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4c:	4b79      	ldr	r3, [pc, #484]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d00d      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	f200 80e1 	bhi.w	8003c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a66:	e0db      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b73      	ldr	r3, [pc, #460]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a6c:	e0db      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b73      	ldr	r3, [pc, #460]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a72:	e0d8      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a74:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	2200      	movs	r2, #0
 8003a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	f04f 0000 	mov.w	r0, #0
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	0159      	lsls	r1, r3, #5
 8003ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab8:	0150      	lsls	r0, r2, #5
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4621      	mov	r1, r4
 8003ac0:	1a51      	subs	r1, r2, r1
 8003ac2:	6139      	str	r1, [r7, #16]
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad8:	4659      	mov	r1, fp
 8003ada:	018b      	lsls	r3, r1, #6
 8003adc:	4651      	mov	r1, sl
 8003ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	018a      	lsls	r2, r1, #6
 8003ae6:	4651      	mov	r1, sl
 8003ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8003aec:	4659      	mov	r1, fp
 8003aee:	eb63 0901 	sbc.w	r9, r3, r1
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	eb18 0303 	adds.w	r3, r8, r3
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	462b      	mov	r3, r5
 8003b14:	eb49 0303 	adc.w	r3, r9, r3
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b26:	4629      	mov	r1, r5
 8003b28:	024b      	lsls	r3, r1, #9
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b30:	4621      	mov	r1, r4
 8003b32:	024a      	lsls	r2, r1, #9
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b44:	f7fc fb8e 	bl	8000264 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b50:	e058      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b52:	4b38      	ldr	r3, [pc, #224]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	2300      	movs	r3, #0
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	0159      	lsls	r1, r3, #5
 8003b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7e:	0150      	lsls	r0, r2, #5
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4641      	mov	r1, r8
 8003b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	00eb      	lsls	r3, r5, #3
 8003bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bba:	00e2      	lsls	r2, r4, #3
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	461d      	mov	r5, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	18e3      	adds	r3, r4, r3
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	eb45 0303 	adc.w	r3, r5, r3
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	028b      	lsls	r3, r1, #10
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be4:	4621      	mov	r1, r4
 8003be6:	028a      	lsls	r2, r1, #10
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	61fa      	str	r2, [r7, #28]
 8003bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf8:	f7fc fb34 	bl	8000264 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c1e:	e002      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3750      	adds	r7, #80	@ 0x50
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	007a1200 	.word	0x007a1200

08003c40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b03      	ldr	r3, [pc, #12]	@ (8003c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000000 	.word	0x20000000

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c5c:	f7ff fff0 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	@ (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	0800852c 	.word	0x0800852c

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c84:	f7ff ffdc 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0b5b      	lsrs	r3, r3, #13
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	0800852c 	.word	0x0800852c

08003ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d012      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cd0:	4b69      	ldr	r3, [pc, #420]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a68      	ldr	r2, [pc, #416]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003cda:	6093      	str	r3, [r2, #8]
 8003cdc:	4b66      	ldr	r3, [pc, #408]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce4:	4964      	ldr	r1, [pc, #400]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d017      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d02:	4b5d      	ldr	r3, [pc, #372]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d08:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d10:	4959      	ldr	r1, [pc, #356]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d20:	d101      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d22:	2301      	movs	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d017      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d44:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	494a      	ldr	r1, [pc, #296]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 808b 	beq.w	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	4a39      	ldr	r2, [pc, #228]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d98:	4b37      	ldr	r3, [pc, #220]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003da4:	4b35      	ldr	r3, [pc, #212]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a34      	ldr	r2, [pc, #208]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fe f9d4 	bl	800215c <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fe f9d0 	bl	800215c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	@ 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e38f      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dca:	4b2c      	ldr	r3, [pc, #176]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd6:	4b28      	ldr	r3, [pc, #160]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d035      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d02e      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df4:	4b20      	ldr	r3, [pc, #128]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e08:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e14:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e16:	4a18      	ldr	r2, [pc, #96]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e1c:	4b16      	ldr	r3, [pc, #88]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d114      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fe f998 	bl	800215c <HAL_GetTick>
 8003e2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fe f994 	bl	800215c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e351      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0ee      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e5e:	d111      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e60:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e6c:	4b04      	ldr	r3, [pc, #16]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e6e:	400b      	ands	r3, r1
 8003e70:	4901      	ldr	r1, [pc, #4]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	0ffffcff 	.word	0x0ffffcff
 8003e84:	4bac      	ldr	r3, [pc, #688]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4aab      	ldr	r2, [pc, #684]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e8e:	6093      	str	r3, [r2, #8]
 8003e90:	4ba9      	ldr	r3, [pc, #676]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	49a6      	ldr	r1, [pc, #664]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d010      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eae:	4ba2      	ldr	r3, [pc, #648]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eb4:	4aa0      	ldr	r2, [pc, #640]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003ebe:	4b9e      	ldr	r3, [pc, #632]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	499b      	ldr	r1, [pc, #620]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003edc:	4b96      	ldr	r3, [pc, #600]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eea:	4993      	ldr	r1, [pc, #588]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003efe:	4b8e      	ldr	r3, [pc, #568]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f0c:	498a      	ldr	r1, [pc, #552]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f20:	4b85      	ldr	r3, [pc, #532]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f2e:	4982      	ldr	r1, [pc, #520]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f42:	4b7d      	ldr	r3, [pc, #500]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f50:	4979      	ldr	r1, [pc, #484]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f64:	4b74      	ldr	r3, [pc, #464]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	4971      	ldr	r1, [pc, #452]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f86:	4b6c      	ldr	r3, [pc, #432]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8c:	f023 020c 	bic.w	r2, r3, #12
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f94:	4968      	ldr	r1, [pc, #416]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fa8:	4b63      	ldr	r3, [pc, #396]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb6:	4960      	ldr	r1, [pc, #384]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fca:	4b5b      	ldr	r3, [pc, #364]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd8:	4957      	ldr	r1, [pc, #348]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fec:	4b52      	ldr	r3, [pc, #328]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffa:	494f      	ldr	r1, [pc, #316]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800400e:	4b4a      	ldr	r3, [pc, #296]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004014:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401c:	4946      	ldr	r1, [pc, #280]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004030:	4b41      	ldr	r3, [pc, #260]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004036:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403e:	493e      	ldr	r1, [pc, #248]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004052:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004058:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004060:	4935      	ldr	r1, [pc, #212]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004074:	4b30      	ldr	r3, [pc, #192]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004082:	492d      	ldr	r1, [pc, #180]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d011      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004096:	4b28      	ldr	r3, [pc, #160]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a4:	4924      	ldr	r1, [pc, #144]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040b4:	d101      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d6:	4b18      	ldr	r3, [pc, #96]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e4:	4914      	ldr	r1, [pc, #80]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00b      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004108:	490b      	ldr	r1, [pc, #44]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00f      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800411c:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800412c:	4902      	ldr	r1, [pc, #8]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004134:	e002      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004148:	4b8a      	ldr	r3, [pc, #552]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800414e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004158:	4986      	ldr	r1, [pc, #536]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800416c:	4b81      	ldr	r3, [pc, #516]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004172:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800417c:	497d      	ldr	r1, [pc, #500]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d006      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80d6 	beq.w	8004344 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004198:	4b76      	ldr	r3, [pc, #472]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a75      	ldr	r2, [pc, #468]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a4:	f7fd ffda 	bl	800215c <HAL_GetTick>
 80041a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041ac:	f7fd ffd6 	bl	800215c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	@ 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e195      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041be:	4b6d      	ldr	r3, [pc, #436]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d021      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11d      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041de:	4b65      	ldr	r3, [pc, #404]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041ec:	4b61      	ldr	r3, [pc, #388]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f2:	0e1b      	lsrs	r3, r3, #24
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	019a      	lsls	r2, r3, #6
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	071b      	lsls	r3, r3, #28
 8004212:	4958      	ldr	r1, [pc, #352]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004238:	2b00      	cmp	r3, #0
 800423a:	d02e      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004244:	d129      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004246:	4b4b      	ldr	r3, [pc, #300]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004254:	4b47      	ldr	r3, [pc, #284]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425a:	0f1b      	lsrs	r3, r3, #28
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	019a      	lsls	r2, r3, #6
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	041b      	lsls	r3, r3, #16
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	071b      	lsls	r3, r3, #28
 800427a:	493e      	ldr	r1, [pc, #248]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004282:	4b3c      	ldr	r3, [pc, #240]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004288:	f023 021f 	bic.w	r2, r3, #31
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	3b01      	subs	r3, #1
 8004292:	4938      	ldr	r1, [pc, #224]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01d      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042a6:	4b33      	ldr	r3, [pc, #204]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ac:	0e1b      	lsrs	r3, r3, #24
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ba:	0f1b      	lsrs	r3, r3, #28
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	019a      	lsls	r2, r3, #6
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	431a      	orrs	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	061b      	lsls	r3, r3, #24
 80042d4:	431a      	orrs	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	071b      	lsls	r3, r3, #28
 80042da:	4926      	ldr	r1, [pc, #152]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d011      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	019a      	lsls	r2, r3, #6
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	061b      	lsls	r3, r3, #24
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	071b      	lsls	r3, r3, #28
 800430a:	491a      	ldr	r1, [pc, #104]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004312:	4b18      	ldr	r3, [pc, #96]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a17      	ldr	r2, [pc, #92]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004318:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800431c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431e:	f7fd ff1d 	bl	800215c <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004326:	f7fd ff19 	bl	800215c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b64      	cmp	r3, #100	@ 0x64
 8004332:	d901      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e0d8      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004338:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b01      	cmp	r3, #1
 8004348:	f040 80ce 	bne.w	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800434c:	4b09      	ldr	r3, [pc, #36]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a08      	ldr	r2, [pc, #32]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004358:	f7fd ff00 	bl	800215c <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800435e:	e00b      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004360:	f7fd fefc 	bl	800215c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	@ 0x64
 800436c:	d904      	bls.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0bb      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004378:	4b5e      	ldr	r3, [pc, #376]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004384:	d0ec      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d02e      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d12a      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ae:	4b51      	ldr	r3, [pc, #324]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043bc:	4b4d      	ldr	r3, [pc, #308]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c2:	0f1b      	lsrs	r3, r3, #28
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	019a      	lsls	r2, r3, #6
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	4944      	ldr	r1, [pc, #272]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043ea:	4b42      	ldr	r3, [pc, #264]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	493d      	ldr	r1, [pc, #244]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d022      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004418:	d11d      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800441a:	4b36      	ldr	r3, [pc, #216]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004420:	0e1b      	lsrs	r3, r3, #24
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004428:	4b32      	ldr	r3, [pc, #200]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442e:	0f1b      	lsrs	r3, r3, #28
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	019a      	lsls	r2, r3, #6
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	431a      	orrs	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	061b      	lsls	r3, r3, #24
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	071b      	lsls	r3, r3, #28
 800444e:	4929      	ldr	r1, [pc, #164]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d028      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004462:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004468:	0e1b      	lsrs	r3, r3, #24
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004470:	4b20      	ldr	r3, [pc, #128]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	019a      	lsls	r2, r3, #6
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	431a      	orrs	r2, r3
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	061b      	lsls	r3, r3, #24
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	071b      	lsls	r3, r3, #28
 8004496:	4917      	ldr	r1, [pc, #92]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800449e:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	4911      	ldr	r1, [pc, #68]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044b4:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a0e      	ldr	r2, [pc, #56]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c0:	f7fd fe4c 	bl	800215c <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044c8:	f7fd fe48 	bl	800215c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	@ 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e007      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044e6:	d1ef      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800

080044f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e049      	b.n	800459e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fabe 	bl	8001aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f000 fecc 	bl	80052d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e054      	b.n	800466a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <HAL_TIM_Base_Start_IT+0xd0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d022      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ea:	d01d      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a22      	ldr	r2, [pc, #136]	@ (800467c <HAL_TIM_Base_Start_IT+0xd4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d018      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a21      	ldr	r2, [pc, #132]	@ (8004680 <HAL_TIM_Base_Start_IT+0xd8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1f      	ldr	r2, [pc, #124]	@ (8004684 <HAL_TIM_Base_Start_IT+0xdc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1e      	ldr	r2, [pc, #120]	@ (8004688 <HAL_TIM_Base_Start_IT+0xe0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1c      	ldr	r2, [pc, #112]	@ (800468c <HAL_TIM_Base_Start_IT+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIM_Base_Start_IT+0x80>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1b      	ldr	r2, [pc, #108]	@ (8004690 <HAL_TIM_Base_Start_IT+0xe8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d115      	bne.n	8004654 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	4b19      	ldr	r3, [pc, #100]	@ (8004694 <HAL_TIM_Base_Start_IT+0xec>)
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b06      	cmp	r3, #6
 8004638:	d015      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0xbe>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004640:	d011      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004652:	e008      	b.n	8004666 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e000      	b.n	8004668 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004666:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40010000 	.word	0x40010000
 800467c:	40000400 	.word	0x40000400
 8004680:	40000800 	.word	0x40000800
 8004684:	40000c00 	.word	0x40000c00
 8004688:	40010400 	.word	0x40010400
 800468c:	40014000 	.word	0x40014000
 8004690:	40001800 	.word	0x40001800
 8004694:	00010007 	.word	0x00010007

08004698 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10f      	bne.n	80046e0 <HAL_TIM_Base_Stop_IT+0x48>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d107      	bne.n	80046e0 <HAL_TIM_Base_Stop_IT+0x48>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e049      	b.n	800479c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fd f963 	bl	80019e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f000 fdcd 	bl	80052d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start+0x24>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e03c      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d109      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x3e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e02f      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d109      	bne.n	80047fc <HAL_TIM_PWM_Start+0x58>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e022      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d109      	bne.n	8004816 <HAL_TIM_PWM_Start+0x72>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e015      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b10      	cmp	r3, #16
 800481a:	d109      	bne.n	8004830 <HAL_TIM_PWM_Start+0x8c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e008      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e092      	b.n	8004970 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xb6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004858:	e023      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start+0xc6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004868:	e01b      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d104      	bne.n	800487a <HAL_TIM_PWM_Start+0xd6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004878:	e013      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Start+0xe6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004888:	e00b      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b10      	cmp	r3, #16
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Start+0xf6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004898:	e003      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 f81c 	bl	80058e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a30      	ldr	r2, [pc, #192]	@ (8004978 <HAL_TIM_PWM_Start+0x1d4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_TIM_PWM_Start+0x120>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2f      	ldr	r2, [pc, #188]	@ (800497c <HAL_TIM_PWM_Start+0x1d8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_TIM_PWM_Start+0x124>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_TIM_PWM_Start+0x126>
 80048c8:	2300      	movs	r3, #0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a25      	ldr	r2, [pc, #148]	@ (8004978 <HAL_TIM_PWM_Start+0x1d4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f0:	d01d      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a22      	ldr	r2, [pc, #136]	@ (8004980 <HAL_TIM_PWM_Start+0x1dc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a20      	ldr	r2, [pc, #128]	@ (8004984 <HAL_TIM_PWM_Start+0x1e0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <HAL_TIM_PWM_Start+0x1e4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a19      	ldr	r2, [pc, #100]	@ (800497c <HAL_TIM_PWM_Start+0x1d8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1b      	ldr	r2, [pc, #108]	@ (800498c <HAL_TIM_PWM_Start+0x1e8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIM_PWM_Start+0x18a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a19      	ldr	r2, [pc, #100]	@ (8004990 <HAL_TIM_PWM_Start+0x1ec>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d115      	bne.n	800495a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	4b17      	ldr	r3, [pc, #92]	@ (8004994 <HAL_TIM_PWM_Start+0x1f0>)
 8004936:	4013      	ands	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b06      	cmp	r3, #6
 800493e:	d015      	beq.n	800496c <HAL_TIM_PWM_Start+0x1c8>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004946:	d011      	beq.n	800496c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	e008      	b.n	800496c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e000      	b.n	800496e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40010000 	.word	0x40010000
 800497c:	40010400 	.word	0x40010400
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40014000 	.word	0x40014000
 8004990:	40001800 	.word	0x40001800
 8004994:	00010007 	.word	0x00010007

08004998 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	6839      	ldr	r1, [r7, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ff9c 	bl	80058e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a36      	ldr	r2, [pc, #216]	@ (8004a90 <HAL_TIM_PWM_Stop+0xf8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_TIM_PWM_Stop+0x2c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a35      	ldr	r2, [pc, #212]	@ (8004a94 <HAL_TIM_PWM_Stop+0xfc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_PWM_Stop+0x30>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_TIM_PWM_Stop+0x32>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d017      	beq.n	80049fe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10f      	bne.n	80049fe <HAL_TIM_PWM_Stop+0x66>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6a1a      	ldr	r2, [r3, #32]
 80049e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d107      	bne.n	80049fe <HAL_TIM_PWM_Stop+0x66>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6a1a      	ldr	r2, [r3, #32]
 8004a04:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10f      	bne.n	8004a2e <HAL_TIM_PWM_Stop+0x96>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6a1a      	ldr	r2, [r3, #32]
 8004a14:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d107      	bne.n	8004a2e <HAL_TIM_PWM_Stop+0x96>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_PWM_Stop+0xa6>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a3c:	e023      	b.n	8004a86 <HAL_TIM_PWM_Stop+0xee>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_PWM_Stop+0xb6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a4c:	e01b      	b.n	8004a86 <HAL_TIM_PWM_Stop+0xee>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Stop+0xc6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a5c:	e013      	b.n	8004a86 <HAL_TIM_PWM_Stop+0xee>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b0c      	cmp	r3, #12
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Stop+0xd6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a6c:	e00b      	b.n	8004a86 <HAL_TIM_PWM_Stop+0xee>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Stop+0xe6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a7c:	e003      	b.n	8004a86 <HAL_TIM_PWM_Stop+0xee>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40010400 	.word	0x40010400

08004a98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e08f      	b.n	8004bcc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fc fe47 	bl	8001754 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6899      	ldr	r1, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd4 <HAL_TIM_Encoder_Init+0x13c>)
 8004ada:	400b      	ands	r3, r1
 8004adc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f000 fbf3 	bl	80052d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4b31      	ldr	r3, [pc, #196]	@ (8004bd8 <HAL_TIM_Encoder_Init+0x140>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	4313      	orrs	r3, r2
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bdc <HAL_TIM_Encoder_Init+0x144>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4b2a      	ldr	r3, [pc, #168]	@ (8004be0 <HAL_TIM_Encoder_Init+0x148>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	4313      	orrs	r3, r2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	011a      	lsls	r2, r3, #4
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	031b      	lsls	r3, r3, #12
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	fffebff8 	.word	0xfffebff8
 8004bd8:	fffffcfc 	.word	0xfffffcfc
 8004bdc:	fffff3f3 	.word	0xfffff3f3
 8004be0:	ffff0f0f 	.word	0xffff0f0f

08004be4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bf4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bfc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d110      	bne.n	8004c36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d102      	bne.n	8004c20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c1a:	7b7b      	ldrb	r3, [r7, #13]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d001      	beq.n	8004c24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e069      	b.n	8004cf8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c34:	e031      	b.n	8004c9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d110      	bne.n	8004c5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c3c:	7bbb      	ldrb	r3, [r7, #14]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d102      	bne.n	8004c48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c42:	7b3b      	ldrb	r3, [r7, #12]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d001      	beq.n	8004c4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e055      	b.n	8004cf8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c5c:	e01d      	b.n	8004c9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d108      	bne.n	8004c76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c64:	7bbb      	ldrb	r3, [r7, #14]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d105      	bne.n	8004c76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c6a:	7b7b      	ldrb	r3, [r7, #13]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d102      	bne.n	8004c76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c70:	7b3b      	ldrb	r3, [r7, #12]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d001      	beq.n	8004c7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e03e      	b.n	8004cf8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_TIM_Encoder_Start+0xc4>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d008      	beq.n	8004cb8 <HAL_TIM_Encoder_Start+0xd4>
 8004ca6:	e00f      	b.n	8004cc8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2201      	movs	r2, #1
 8004cae:	2100      	movs	r1, #0
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fe19 	bl	80058e8 <TIM_CCxChannelCmd>
      break;
 8004cb6:	e016      	b.n	8004ce6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fe11 	bl	80058e8 <TIM_CCxChannelCmd>
      break;
 8004cc6:	e00e      	b.n	8004ce6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	2100      	movs	r1, #0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fe09 	bl	80058e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2104      	movs	r1, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fe02 	bl	80058e8 <TIM_CCxChannelCmd>
      break;
 8004ce4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_TIM_Encoder_Stop+0x18>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d008      	beq.n	8004d28 <HAL_TIM_Encoder_Stop+0x28>
 8004d16:	e00f      	b.n	8004d38 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fde1 	bl	80058e8 <TIM_CCxChannelCmd>
      break;
 8004d26:	e016      	b.n	8004d56 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2104      	movs	r1, #4
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fdd9 	bl	80058e8 <TIM_CCxChannelCmd>
      break;
 8004d36:	e00e      	b.n	8004d56 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fdd1 	bl	80058e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fdca 	bl	80058e8 <TIM_CCxChannelCmd>
      break;
 8004d54:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10f      	bne.n	8004d86 <HAL_TIM_Encoder_Stop+0x86>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a1a      	ldr	r2, [r3, #32]
 8004d6c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d107      	bne.n	8004d86 <HAL_TIM_Encoder_Stop+0x86>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_TIM_Encoder_Stop+0x92>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d148      	bne.n	8004e24 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_Encoder_Stop+0xa2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004da0:	e023      	b.n	8004dea <HAL_TIM_Encoder_Stop+0xea>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_Encoder_Stop+0xb2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db0:	e01b      	b.n	8004dea <HAL_TIM_Encoder_Stop+0xea>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_Encoder_Stop+0xc2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc0:	e013      	b.n	8004dea <HAL_TIM_Encoder_Stop+0xea>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_Encoder_Stop+0xd2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dd0:	e00b      	b.n	8004dea <HAL_TIM_Encoder_Stop+0xea>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d104      	bne.n	8004de2 <HAL_TIM_Encoder_Stop+0xe2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de0:	e003      	b.n	8004dea <HAL_TIM_Encoder_Stop+0xea>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_Encoder_Stop+0xfa>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df8:	e024      	b.n	8004e44 <HAL_TIM_Encoder_Stop+0x144>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_Encoder_Stop+0x10a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e08:	e01c      	b.n	8004e44 <HAL_TIM_Encoder_Stop+0x144>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_Encoder_Stop+0x11a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e18:	e014      	b.n	8004e44 <HAL_TIM_Encoder_Stop+0x144>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004e22:	e00f      	b.n	8004e44 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d020      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01b      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0202 	mvn.w	r2, #2
 8004e82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f9fd 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004e9e:	e005      	b.n	8004eac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f9ef 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa00 	bl	80052ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01b      	beq.n	8004efe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0204 	mvn.w	r2, #4
 8004ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f9d7 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004eea:	e005      	b.n	8004ef8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f9c9 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f9da 	bl	80052ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d020      	beq.n	8004f4a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01b      	beq.n	8004f4a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f06f 0208 	mvn.w	r2, #8
 8004f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2204      	movs	r2, #4
 8004f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f9b1 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004f36:	e005      	b.n	8004f44 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f9a3 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9b4 	bl	80052ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d020      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01b      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f06f 0210 	mvn.w	r2, #16
 8004f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f98b 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004f82:	e005      	b.n	8004f90 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f97d 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f98e 	bl	80052ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f06f 0201 	mvn.w	r2, #1
 8004fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7fb fd67 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fd3e 	bl	8005a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fd36 	bl	8005a78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00c      	beq.n	8005030 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f948 	bl	80052c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00c      	beq.n	8005054 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0220 	mvn.w	r2, #32
 800504c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fcfe 	bl	8005a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005076:	2302      	movs	r3, #2
 8005078:	e0ff      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b14      	cmp	r3, #20
 8005086:	f200 80f0 	bhi.w	800526a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800508a:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050e5 	.word	0x080050e5
 8005094:	0800526b 	.word	0x0800526b
 8005098:	0800526b 	.word	0x0800526b
 800509c:	0800526b 	.word	0x0800526b
 80050a0:	08005125 	.word	0x08005125
 80050a4:	0800526b 	.word	0x0800526b
 80050a8:	0800526b 	.word	0x0800526b
 80050ac:	0800526b 	.word	0x0800526b
 80050b0:	08005167 	.word	0x08005167
 80050b4:	0800526b 	.word	0x0800526b
 80050b8:	0800526b 	.word	0x0800526b
 80050bc:	0800526b 	.word	0x0800526b
 80050c0:	080051a7 	.word	0x080051a7
 80050c4:	0800526b 	.word	0x0800526b
 80050c8:	0800526b 	.word	0x0800526b
 80050cc:	0800526b 	.word	0x0800526b
 80050d0:	080051e9 	.word	0x080051e9
 80050d4:	0800526b 	.word	0x0800526b
 80050d8:	0800526b 	.word	0x0800526b
 80050dc:	0800526b 	.word	0x0800526b
 80050e0:	08005229 	.word	0x08005229
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 f99e 	bl	800542c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	619a      	str	r2, [r3, #24]
      break;
 8005122:	e0a5      	b.n	8005270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 f9f0 	bl	8005510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800513e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800514e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6999      	ldr	r1, [r3, #24]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	619a      	str	r2, [r3, #24]
      break;
 8005164:	e084      	b.n	8005270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fa47 	bl	8005600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0208 	orr.w	r2, r2, #8
 8005180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0204 	bic.w	r2, r2, #4
 8005190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	61da      	str	r2, [r3, #28]
      break;
 80051a4:	e064      	b.n	8005270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fa9d 	bl	80056ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69d9      	ldr	r1, [r3, #28]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	021a      	lsls	r2, r3, #8
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	61da      	str	r2, [r3, #28]
      break;
 80051e6:	e043      	b.n	8005270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fad4 	bl	800579c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0208 	orr.w	r2, r2, #8
 8005202:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0204 	bic.w	r2, r2, #4
 8005212:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005226:	e023      	b.n	8005270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fb06 	bl	8005840 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005242:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005252:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	021a      	lsls	r2, r3, #8
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005268:	e002      	b.n	8005270 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
      break;
 800526e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop

08005284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a46      	ldr	r2, [pc, #280]	@ (8005400 <TIM_Base_SetConfig+0x12c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d013      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f2:	d00f      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a43      	ldr	r2, [pc, #268]	@ (8005404 <TIM_Base_SetConfig+0x130>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00b      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a42      	ldr	r2, [pc, #264]	@ (8005408 <TIM_Base_SetConfig+0x134>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d007      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a41      	ldr	r2, [pc, #260]	@ (800540c <TIM_Base_SetConfig+0x138>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_Base_SetConfig+0x40>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a40      	ldr	r2, [pc, #256]	@ (8005410 <TIM_Base_SetConfig+0x13c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d108      	bne.n	8005326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a35      	ldr	r2, [pc, #212]	@ (8005400 <TIM_Base_SetConfig+0x12c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d02b      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005334:	d027      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a32      	ldr	r2, [pc, #200]	@ (8005404 <TIM_Base_SetConfig+0x130>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d023      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a31      	ldr	r2, [pc, #196]	@ (8005408 <TIM_Base_SetConfig+0x134>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01f      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a30      	ldr	r2, [pc, #192]	@ (800540c <TIM_Base_SetConfig+0x138>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01b      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2f      	ldr	r2, [pc, #188]	@ (8005410 <TIM_Base_SetConfig+0x13c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d017      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2e      	ldr	r2, [pc, #184]	@ (8005414 <TIM_Base_SetConfig+0x140>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2d      	ldr	r2, [pc, #180]	@ (8005418 <TIM_Base_SetConfig+0x144>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2c      	ldr	r2, [pc, #176]	@ (800541c <TIM_Base_SetConfig+0x148>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2b      	ldr	r2, [pc, #172]	@ (8005420 <TIM_Base_SetConfig+0x14c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2a      	ldr	r2, [pc, #168]	@ (8005424 <TIM_Base_SetConfig+0x150>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a29      	ldr	r2, [pc, #164]	@ (8005428 <TIM_Base_SetConfig+0x154>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a10      	ldr	r2, [pc, #64]	@ (8005400 <TIM_Base_SetConfig+0x12c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_Base_SetConfig+0xf8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a12      	ldr	r2, [pc, #72]	@ (8005410 <TIM_Base_SetConfig+0x13c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d103      	bne.n	80053d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f023 0201 	bic.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]
  }
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40010400 	.word	0x40010400
 8005414:	40014000 	.word	0x40014000
 8005418:	40014400 	.word	0x40014400
 800541c:	40014800 	.word	0x40014800
 8005420:	40001800 	.word	0x40001800
 8005424:	40001c00 	.word	0x40001c00
 8005428:	40002000 	.word	0x40002000

0800542c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f023 0201 	bic.w	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4b2b      	ldr	r3, [pc, #172]	@ (8005504 <TIM_OC1_SetConfig+0xd8>)
 8005458:	4013      	ands	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 0302 	bic.w	r3, r3, #2
 8005474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a21      	ldr	r2, [pc, #132]	@ (8005508 <TIM_OC1_SetConfig+0xdc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC1_SetConfig+0x64>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a20      	ldr	r2, [pc, #128]	@ (800550c <TIM_OC1_SetConfig+0xe0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d10c      	bne.n	80054aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0308 	bic.w	r3, r3, #8
 8005496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 0304 	bic.w	r3, r3, #4
 80054a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a16      	ldr	r2, [pc, #88]	@ (8005508 <TIM_OC1_SetConfig+0xdc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC1_SetConfig+0x8e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a15      	ldr	r2, [pc, #84]	@ (800550c <TIM_OC1_SetConfig+0xe0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d111      	bne.n	80054de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	621a      	str	r2, [r3, #32]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	fffeff8f 	.word	0xfffeff8f
 8005508:	40010000 	.word	0x40010000
 800550c:	40010400 	.word	0x40010400

08005510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f023 0210 	bic.w	r2, r3, #16
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4b2e      	ldr	r3, [pc, #184]	@ (80055f4 <TIM_OC2_SetConfig+0xe4>)
 800553c:	4013      	ands	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0320 	bic.w	r3, r3, #32
 800555a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a23      	ldr	r2, [pc, #140]	@ (80055f8 <TIM_OC2_SetConfig+0xe8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_OC2_SetConfig+0x68>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <TIM_OC2_SetConfig+0xec>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10d      	bne.n	8005594 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800557e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a18      	ldr	r2, [pc, #96]	@ (80055f8 <TIM_OC2_SetConfig+0xe8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC2_SetConfig+0x94>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a17      	ldr	r2, [pc, #92]	@ (80055fc <TIM_OC2_SetConfig+0xec>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d113      	bne.n	80055cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	feff8fff 	.word	0xfeff8fff
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40010400 	.word	0x40010400

08005600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4b2d      	ldr	r3, [pc, #180]	@ (80056e0 <TIM_OC3_SetConfig+0xe0>)
 800562c:	4013      	ands	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0303 	bic.w	r3, r3, #3
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a22      	ldr	r2, [pc, #136]	@ (80056e4 <TIM_OC3_SetConfig+0xe4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_OC3_SetConfig+0x66>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a21      	ldr	r2, [pc, #132]	@ (80056e8 <TIM_OC3_SetConfig+0xe8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d10d      	bne.n	8005682 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800566c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	021b      	lsls	r3, r3, #8
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a17      	ldr	r2, [pc, #92]	@ (80056e4 <TIM_OC3_SetConfig+0xe4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_OC3_SetConfig+0x92>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a16      	ldr	r2, [pc, #88]	@ (80056e8 <TIM_OC3_SetConfig+0xe8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d113      	bne.n	80056ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	621a      	str	r2, [r3, #32]
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	fffeff8f 	.word	0xfffeff8f
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40010400 	.word	0x40010400

080056ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4b1e      	ldr	r3, [pc, #120]	@ (8005790 <TIM_OC4_SetConfig+0xa4>)
 8005718:	4013      	ands	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a13      	ldr	r2, [pc, #76]	@ (8005794 <TIM_OC4_SetConfig+0xa8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_OC4_SetConfig+0x68>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a12      	ldr	r2, [pc, #72]	@ (8005798 <TIM_OC4_SetConfig+0xac>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d109      	bne.n	8005768 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	019b      	lsls	r3, r3, #6
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	feff8fff 	.word	0xfeff8fff
 8005794:	40010000 	.word	0x40010000
 8005798:	40010400 	.word	0x40010400

0800579c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <TIM_OC5_SetConfig+0x98>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80057dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a12      	ldr	r2, [pc, #72]	@ (8005838 <TIM_OC5_SetConfig+0x9c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_OC5_SetConfig+0x5e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a11      	ldr	r2, [pc, #68]	@ (800583c <TIM_OC5_SetConfig+0xa0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d109      	bne.n	800580e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005800:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	621a      	str	r2, [r3, #32]
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	fffeff8f 	.word	0xfffeff8f
 8005838:	40010000 	.word	0x40010000
 800583c:	40010400 	.word	0x40010400

08005840 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4b1c      	ldr	r3, [pc, #112]	@ (80058dc <TIM_OC6_SetConfig+0x9c>)
 800586c:	4013      	ands	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	051b      	lsls	r3, r3, #20
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <TIM_OC6_SetConfig+0xa0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC6_SetConfig+0x60>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a12      	ldr	r2, [pc, #72]	@ (80058e4 <TIM_OC6_SetConfig+0xa4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d109      	bne.n	80058b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	029b      	lsls	r3, r3, #10
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	feff8fff 	.word	0xfeff8fff
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40010400 	.word	0x40010400

080058e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	2201      	movs	r2, #1
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1a      	ldr	r2, [r3, #32]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	43db      	mvns	r3, r3
 800590a:	401a      	ands	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	fa01 f303 	lsl.w	r3, r1, r3
 8005920:	431a      	orrs	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
	...

08005934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005948:	2302      	movs	r3, #2
 800594a:	e06d      	b.n	8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a30      	ldr	r2, [pc, #192]	@ (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d108      	bne.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005986:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a20      	ldr	r2, [pc, #128]	@ (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059be:	d01d      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a15      	ldr	r2, [pc, #84]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a16      	ldr	r2, [pc, #88]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a15      	ldr	r2, [pc, #84]	@ (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d10c      	bne.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40010400 	.word	0x40010400
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40001800 	.word	0x40001800

08005a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e040      	b.n	8005b20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fc f91a 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2224      	movs	r2, #36	@ 0x24
 8005ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0201 	bic.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 ff18 	bl	8006908 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fcb1 	bl	8006440 <UART_SetConfig>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e01b      	b.n	8005b20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 ff97 	bl	8006a4c <UART_CheckIdleState>
 8005b1e:	4603      	mov	r3, r0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	@ 0x28
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	4613      	mov	r3, r2
 8005b36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d177      	bne.n	8005c30 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_UART_Transmit+0x24>
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e070      	b.n	8005c32 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2221      	movs	r2, #33	@ 0x21
 8005b5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b5e:	f7fc fafd 	bl	800215c <HAL_GetTick>
 8005b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	88fa      	ldrh	r2, [r7, #6]
 8005b68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	88fa      	ldrh	r2, [r7, #6]
 8005b70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b7c:	d108      	bne.n	8005b90 <HAL_UART_Transmit+0x68>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	e003      	b.n	8005b98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b98:	e02f      	b.n	8005bfa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2180      	movs	r1, #128	@ 0x80
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 fff9 	bl	8006b9c <UART_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e03b      	b.n	8005c32 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	e007      	b.n	8005be8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	781a      	ldrb	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	3301      	adds	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1c9      	bne.n	8005b9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2140      	movs	r1, #64	@ 0x40
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 ffc3 	bl	8006b9c <UART_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e005      	b.n	8005c32 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b08a      	sub	sp, #40	@ 0x28
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	4613      	mov	r3, r2
 8005c46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d132      	bne.n	8005cb8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_UART_Receive_IT+0x24>
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e02b      	b.n	8005cba <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d018      	beq.n	8005ca8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	613b      	str	r3, [r7, #16]
   return(result);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	623b      	str	r3, [r7, #32]
 8005c96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	69f9      	ldr	r1, [r7, #28]
 8005c9a:	6a3a      	ldr	r2, [r7, #32]
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e6      	bne.n	8005c76 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ca8:	88fb      	ldrh	r3, [r7, #6]
 8005caa:	461a      	mov	r2, r3
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 ffe2 	bl	8006c78 <UART_Start_Receive_IT>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	e000      	b.n	8005cba <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005cb8:	2302      	movs	r3, #2
  }
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3728      	adds	r7, #40	@ 0x28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b09a      	sub	sp, #104	@ 0x68
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cde:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ce8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cea:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d118      	bne.n	8005d6a <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f023 0310 	bic.w	r3, r3, #16
 8005d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d58:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e6      	bne.n	8005d38 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	d137      	bne.n	8005de8 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3308      	adds	r3, #8
 8005d96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d98:	61ba      	str	r2, [r7, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6979      	ldr	r1, [r7, #20]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	613b      	str	r3, [r7, #16]
   return(result);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e5      	bne.n	8005d78 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d019      	beq.n	8005de8 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db8:	2200      	movs	r2, #0
 8005dba:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fc fc1b 	bl	80025fc <HAL_DMA_Abort>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00d      	beq.n	8005de8 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fc fe2f 	bl	8002a34 <HAL_DMA_GetError>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d105      	bne.n	8005de8 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2210      	movs	r2, #16
 8005de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e017      	b.n	8005e18 <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	220f      	movs	r2, #15
 8005df6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0208 	orr.w	r2, r2, #8
 8005e06:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3768      	adds	r7, #104	@ 0x68
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b0ba      	sub	sp, #232	@ 0xe8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e4e:	4013      	ands	r3, r2
 8005e50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d115      	bne.n	8005e88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00f      	beq.n	8005e88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 82ac 	beq.w	80063d6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
      }
      return;
 8005e86:	e2a6      	b.n	80063d6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8117 	beq.w	80060c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ea2:	4b85      	ldr	r3, [pc, #532]	@ (80060b8 <HAL_UART_IRQHandler+0x298>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 810a 	beq.w	80060c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d011      	beq.n	8005edc <HAL_UART_IRQHandler+0xbc>
 8005eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00b      	beq.n	8005edc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed2:	f043 0201 	orr.w	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d011      	beq.n	8005f0c <HAL_UART_IRQHandler+0xec>
 8005ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f02:	f043 0204 	orr.w	r2, r3, #4
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d011      	beq.n	8005f3c <HAL_UART_IRQHandler+0x11c>
 8005f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2204      	movs	r2, #4
 8005f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f32:	f043 0202 	orr.w	r2, r3, #2
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d017      	beq.n	8005f78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d105      	bne.n	8005f60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2208      	movs	r2, #8
 8005f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f6e:	f043 0208 	orr.w	r2, r3, #8
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d012      	beq.n	8005faa <HAL_UART_IRQHandler+0x18a>
 8005f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00c      	beq.n	8005faa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8212 	beq.w	80063da <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff2:	2b40      	cmp	r3, #64	@ 0x40
 8005ff4:	d005      	beq.n	8006002 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ffa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04f      	beq.n	80060a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 ffc4 	bl	8006f90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006012:	2b40      	cmp	r3, #64	@ 0x40
 8006014:	d141      	bne.n	800609a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800602c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3308      	adds	r3, #8
 800603e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006042:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800604e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800605a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1d9      	bne.n	8006016 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006066:	2b00      	cmp	r3, #0
 8006068:	d013      	beq.n	8006092 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800606e:	4a13      	ldr	r2, [pc, #76]	@ (80060bc <HAL_UART_IRQHandler+0x29c>)
 8006070:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006076:	4618      	mov	r0, r3
 8006078:	f7fc fb30 	bl	80026dc <HAL_DMA_Abort_IT>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d017      	beq.n	80060b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e00f      	b.n	80060b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9c0 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	e00b      	b.n	80060b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9bc 	bl	8006418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	e007      	b.n	80060b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9b8 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80060b0:	e193      	b.n	80063da <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b2:	bf00      	nop
    return;
 80060b4:	e191      	b.n	80063da <HAL_UART_IRQHandler+0x5ba>
 80060b6:	bf00      	nop
 80060b8:	04000120 	.word	0x04000120
 80060bc:	0800723d 	.word	0x0800723d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	f040 814c 	bne.w	8006362 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8145 	beq.w	8006362 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 813e 	beq.w	8006362 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2210      	movs	r2, #16
 80060ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f8:	2b40      	cmp	r3, #64	@ 0x40
 80060fa:	f040 80b6 	bne.w	800626a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800610a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8165 	beq.w	80063de <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800611a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800611e:	429a      	cmp	r2, r3
 8006120:	f080 815d 	bcs.w	80063de <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800612a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006138:	f000 8086 	beq.w	8006248 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800616a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006172:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800617e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1da      	bne.n	800613c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e1      	bne.n	8006186 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3308      	adds	r3, #8
 80061e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e3      	bne.n	80061c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006218:	f023 0310 	bic.w	r3, r3, #16
 800621c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800622a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800622c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e4      	bne.n	8006208 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006242:	4618      	mov	r0, r3
 8006244:	f7fc f9da 	bl	80025fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800625a:	b29b      	uxth	r3, r3
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	b29b      	uxth	r3, r3
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fa faa2 	bl	80007ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006268:	e0b9      	b.n	80063de <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006276:	b29b      	uxth	r3, r3
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80ab 	beq.w	80063e2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800628c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80a6 	beq.w	80063e2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e4      	bne.n	8006296 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3308      	adds	r3, #8
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	623b      	str	r3, [r7, #32]
   return(result);
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	f023 0301 	bic.w	r3, r3, #1
 80062e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80062f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e3      	bne.n	80062cc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	60fb      	str	r3, [r7, #12]
   return(result);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 0310 	bic.w	r3, r3, #16
 800632c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	69b9      	ldr	r1, [r7, #24]
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	617b      	str	r3, [r7, #20]
   return(result);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e4      	bne.n	8006318 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2202      	movs	r2, #2
 8006352:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fa fa26 	bl	80007ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006360:	e03f      	b.n	80063e2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00e      	beq.n	800638c <HAL_UART_IRQHandler+0x56c>
 800636e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006382:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f851 	bl	800642c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800638a:	e02d      	b.n	80063e8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800638c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800639c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01c      	beq.n	80063e6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	4798      	blx	r3
    }
    return;
 80063b4:	e017      	b.n	80063e6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d012      	beq.n	80063e8 <HAL_UART_IRQHandler+0x5c8>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00c      	beq.n	80063e8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 ff4a 	bl	8007268 <UART_EndTransmit_IT>
    return;
 80063d4:	e008      	b.n	80063e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80063d6:	bf00      	nop
 80063d8:	e006      	b.n	80063e8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80063da:	bf00      	nop
 80063dc:	e004      	b.n	80063e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80063de:	bf00      	nop
 80063e0:	e002      	b.n	80063e8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80063e6:	bf00      	nop
  }

}
 80063e8:	37e8      	adds	r7, #232	@ 0xe8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop

080063f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4ba6      	ldr	r3, [pc, #664]	@ (8006704 <UART_SetConfig+0x2c4>)
 800646c:	4013      	ands	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	6979      	ldr	r1, [r7, #20]
 8006474:	430b      	orrs	r3, r1
 8006476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a94      	ldr	r2, [pc, #592]	@ (8006708 <UART_SetConfig+0x2c8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d120      	bne.n	80064fe <UART_SetConfig+0xbe>
 80064bc:	4b93      	ldr	r3, [pc, #588]	@ (800670c <UART_SetConfig+0x2cc>)
 80064be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d816      	bhi.n	80064f8 <UART_SetConfig+0xb8>
 80064ca:	a201      	add	r2, pc, #4	@ (adr r2, 80064d0 <UART_SetConfig+0x90>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064e1 	.word	0x080064e1
 80064d4:	080064ed 	.word	0x080064ed
 80064d8:	080064e7 	.word	0x080064e7
 80064dc:	080064f3 	.word	0x080064f3
 80064e0:	2301      	movs	r3, #1
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e150      	b.n	8006788 <UART_SetConfig+0x348>
 80064e6:	2302      	movs	r3, #2
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e14d      	b.n	8006788 <UART_SetConfig+0x348>
 80064ec:	2304      	movs	r3, #4
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e14a      	b.n	8006788 <UART_SetConfig+0x348>
 80064f2:	2308      	movs	r3, #8
 80064f4:	77fb      	strb	r3, [r7, #31]
 80064f6:	e147      	b.n	8006788 <UART_SetConfig+0x348>
 80064f8:	2310      	movs	r3, #16
 80064fa:	77fb      	strb	r3, [r7, #31]
 80064fc:	e144      	b.n	8006788 <UART_SetConfig+0x348>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a83      	ldr	r2, [pc, #524]	@ (8006710 <UART_SetConfig+0x2d0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d132      	bne.n	800656e <UART_SetConfig+0x12e>
 8006508:	4b80      	ldr	r3, [pc, #512]	@ (800670c <UART_SetConfig+0x2cc>)
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650e:	f003 030c 	and.w	r3, r3, #12
 8006512:	2b0c      	cmp	r3, #12
 8006514:	d828      	bhi.n	8006568 <UART_SetConfig+0x128>
 8006516:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <UART_SetConfig+0xdc>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006551 	.word	0x08006551
 8006520:	08006569 	.word	0x08006569
 8006524:	08006569 	.word	0x08006569
 8006528:	08006569 	.word	0x08006569
 800652c:	0800655d 	.word	0x0800655d
 8006530:	08006569 	.word	0x08006569
 8006534:	08006569 	.word	0x08006569
 8006538:	08006569 	.word	0x08006569
 800653c:	08006557 	.word	0x08006557
 8006540:	08006569 	.word	0x08006569
 8006544:	08006569 	.word	0x08006569
 8006548:	08006569 	.word	0x08006569
 800654c:	08006563 	.word	0x08006563
 8006550:	2300      	movs	r3, #0
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e118      	b.n	8006788 <UART_SetConfig+0x348>
 8006556:	2302      	movs	r3, #2
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e115      	b.n	8006788 <UART_SetConfig+0x348>
 800655c:	2304      	movs	r3, #4
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e112      	b.n	8006788 <UART_SetConfig+0x348>
 8006562:	2308      	movs	r3, #8
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e10f      	b.n	8006788 <UART_SetConfig+0x348>
 8006568:	2310      	movs	r3, #16
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e10c      	b.n	8006788 <UART_SetConfig+0x348>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a68      	ldr	r2, [pc, #416]	@ (8006714 <UART_SetConfig+0x2d4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d120      	bne.n	80065ba <UART_SetConfig+0x17a>
 8006578:	4b64      	ldr	r3, [pc, #400]	@ (800670c <UART_SetConfig+0x2cc>)
 800657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800657e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006582:	2b30      	cmp	r3, #48	@ 0x30
 8006584:	d013      	beq.n	80065ae <UART_SetConfig+0x16e>
 8006586:	2b30      	cmp	r3, #48	@ 0x30
 8006588:	d814      	bhi.n	80065b4 <UART_SetConfig+0x174>
 800658a:	2b20      	cmp	r3, #32
 800658c:	d009      	beq.n	80065a2 <UART_SetConfig+0x162>
 800658e:	2b20      	cmp	r3, #32
 8006590:	d810      	bhi.n	80065b4 <UART_SetConfig+0x174>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <UART_SetConfig+0x15c>
 8006596:	2b10      	cmp	r3, #16
 8006598:	d006      	beq.n	80065a8 <UART_SetConfig+0x168>
 800659a:	e00b      	b.n	80065b4 <UART_SetConfig+0x174>
 800659c:	2300      	movs	r3, #0
 800659e:	77fb      	strb	r3, [r7, #31]
 80065a0:	e0f2      	b.n	8006788 <UART_SetConfig+0x348>
 80065a2:	2302      	movs	r3, #2
 80065a4:	77fb      	strb	r3, [r7, #31]
 80065a6:	e0ef      	b.n	8006788 <UART_SetConfig+0x348>
 80065a8:	2304      	movs	r3, #4
 80065aa:	77fb      	strb	r3, [r7, #31]
 80065ac:	e0ec      	b.n	8006788 <UART_SetConfig+0x348>
 80065ae:	2308      	movs	r3, #8
 80065b0:	77fb      	strb	r3, [r7, #31]
 80065b2:	e0e9      	b.n	8006788 <UART_SetConfig+0x348>
 80065b4:	2310      	movs	r3, #16
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e0e6      	b.n	8006788 <UART_SetConfig+0x348>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a56      	ldr	r2, [pc, #344]	@ (8006718 <UART_SetConfig+0x2d8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d120      	bne.n	8006606 <UART_SetConfig+0x1c6>
 80065c4:	4b51      	ldr	r3, [pc, #324]	@ (800670c <UART_SetConfig+0x2cc>)
 80065c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80065d0:	d013      	beq.n	80065fa <UART_SetConfig+0x1ba>
 80065d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80065d4:	d814      	bhi.n	8006600 <UART_SetConfig+0x1c0>
 80065d6:	2b80      	cmp	r3, #128	@ 0x80
 80065d8:	d009      	beq.n	80065ee <UART_SetConfig+0x1ae>
 80065da:	2b80      	cmp	r3, #128	@ 0x80
 80065dc:	d810      	bhi.n	8006600 <UART_SetConfig+0x1c0>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <UART_SetConfig+0x1a8>
 80065e2:	2b40      	cmp	r3, #64	@ 0x40
 80065e4:	d006      	beq.n	80065f4 <UART_SetConfig+0x1b4>
 80065e6:	e00b      	b.n	8006600 <UART_SetConfig+0x1c0>
 80065e8:	2300      	movs	r3, #0
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e0cc      	b.n	8006788 <UART_SetConfig+0x348>
 80065ee:	2302      	movs	r3, #2
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e0c9      	b.n	8006788 <UART_SetConfig+0x348>
 80065f4:	2304      	movs	r3, #4
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e0c6      	b.n	8006788 <UART_SetConfig+0x348>
 80065fa:	2308      	movs	r3, #8
 80065fc:	77fb      	strb	r3, [r7, #31]
 80065fe:	e0c3      	b.n	8006788 <UART_SetConfig+0x348>
 8006600:	2310      	movs	r3, #16
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e0c0      	b.n	8006788 <UART_SetConfig+0x348>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a44      	ldr	r2, [pc, #272]	@ (800671c <UART_SetConfig+0x2dc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d125      	bne.n	800665c <UART_SetConfig+0x21c>
 8006610:	4b3e      	ldr	r3, [pc, #248]	@ (800670c <UART_SetConfig+0x2cc>)
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800661a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800661e:	d017      	beq.n	8006650 <UART_SetConfig+0x210>
 8006620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006624:	d817      	bhi.n	8006656 <UART_SetConfig+0x216>
 8006626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800662a:	d00b      	beq.n	8006644 <UART_SetConfig+0x204>
 800662c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006630:	d811      	bhi.n	8006656 <UART_SetConfig+0x216>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <UART_SetConfig+0x1fe>
 8006636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663a:	d006      	beq.n	800664a <UART_SetConfig+0x20a>
 800663c:	e00b      	b.n	8006656 <UART_SetConfig+0x216>
 800663e:	2300      	movs	r3, #0
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e0a1      	b.n	8006788 <UART_SetConfig+0x348>
 8006644:	2302      	movs	r3, #2
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e09e      	b.n	8006788 <UART_SetConfig+0x348>
 800664a:	2304      	movs	r3, #4
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e09b      	b.n	8006788 <UART_SetConfig+0x348>
 8006650:	2308      	movs	r3, #8
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e098      	b.n	8006788 <UART_SetConfig+0x348>
 8006656:	2310      	movs	r3, #16
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e095      	b.n	8006788 <UART_SetConfig+0x348>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a2f      	ldr	r2, [pc, #188]	@ (8006720 <UART_SetConfig+0x2e0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d125      	bne.n	80066b2 <UART_SetConfig+0x272>
 8006666:	4b29      	ldr	r3, [pc, #164]	@ (800670c <UART_SetConfig+0x2cc>)
 8006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006674:	d017      	beq.n	80066a6 <UART_SetConfig+0x266>
 8006676:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800667a:	d817      	bhi.n	80066ac <UART_SetConfig+0x26c>
 800667c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006680:	d00b      	beq.n	800669a <UART_SetConfig+0x25a>
 8006682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006686:	d811      	bhi.n	80066ac <UART_SetConfig+0x26c>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <UART_SetConfig+0x254>
 800668c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006690:	d006      	beq.n	80066a0 <UART_SetConfig+0x260>
 8006692:	e00b      	b.n	80066ac <UART_SetConfig+0x26c>
 8006694:	2301      	movs	r3, #1
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e076      	b.n	8006788 <UART_SetConfig+0x348>
 800669a:	2302      	movs	r3, #2
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e073      	b.n	8006788 <UART_SetConfig+0x348>
 80066a0:	2304      	movs	r3, #4
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e070      	b.n	8006788 <UART_SetConfig+0x348>
 80066a6:	2308      	movs	r3, #8
 80066a8:	77fb      	strb	r3, [r7, #31]
 80066aa:	e06d      	b.n	8006788 <UART_SetConfig+0x348>
 80066ac:	2310      	movs	r3, #16
 80066ae:	77fb      	strb	r3, [r7, #31]
 80066b0:	e06a      	b.n	8006788 <UART_SetConfig+0x348>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006724 <UART_SetConfig+0x2e4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d138      	bne.n	800672e <UART_SetConfig+0x2ee>
 80066bc:	4b13      	ldr	r3, [pc, #76]	@ (800670c <UART_SetConfig+0x2cc>)
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80066c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066ca:	d017      	beq.n	80066fc <UART_SetConfig+0x2bc>
 80066cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066d0:	d82a      	bhi.n	8006728 <UART_SetConfig+0x2e8>
 80066d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d6:	d00b      	beq.n	80066f0 <UART_SetConfig+0x2b0>
 80066d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066dc:	d824      	bhi.n	8006728 <UART_SetConfig+0x2e8>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <UART_SetConfig+0x2aa>
 80066e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e6:	d006      	beq.n	80066f6 <UART_SetConfig+0x2b6>
 80066e8:	e01e      	b.n	8006728 <UART_SetConfig+0x2e8>
 80066ea:	2300      	movs	r3, #0
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e04b      	b.n	8006788 <UART_SetConfig+0x348>
 80066f0:	2302      	movs	r3, #2
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e048      	b.n	8006788 <UART_SetConfig+0x348>
 80066f6:	2304      	movs	r3, #4
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e045      	b.n	8006788 <UART_SetConfig+0x348>
 80066fc:	2308      	movs	r3, #8
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e042      	b.n	8006788 <UART_SetConfig+0x348>
 8006702:	bf00      	nop
 8006704:	efff69f3 	.word	0xefff69f3
 8006708:	40011000 	.word	0x40011000
 800670c:	40023800 	.word	0x40023800
 8006710:	40004400 	.word	0x40004400
 8006714:	40004800 	.word	0x40004800
 8006718:	40004c00 	.word	0x40004c00
 800671c:	40005000 	.word	0x40005000
 8006720:	40011400 	.word	0x40011400
 8006724:	40007800 	.word	0x40007800
 8006728:	2310      	movs	r3, #16
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e02c      	b.n	8006788 <UART_SetConfig+0x348>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a72      	ldr	r2, [pc, #456]	@ (80068fc <UART_SetConfig+0x4bc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d125      	bne.n	8006784 <UART_SetConfig+0x344>
 8006738:	4b71      	ldr	r3, [pc, #452]	@ (8006900 <UART_SetConfig+0x4c0>)
 800673a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006742:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006746:	d017      	beq.n	8006778 <UART_SetConfig+0x338>
 8006748:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800674c:	d817      	bhi.n	800677e <UART_SetConfig+0x33e>
 800674e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006752:	d00b      	beq.n	800676c <UART_SetConfig+0x32c>
 8006754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006758:	d811      	bhi.n	800677e <UART_SetConfig+0x33e>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <UART_SetConfig+0x326>
 800675e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006762:	d006      	beq.n	8006772 <UART_SetConfig+0x332>
 8006764:	e00b      	b.n	800677e <UART_SetConfig+0x33e>
 8006766:	2300      	movs	r3, #0
 8006768:	77fb      	strb	r3, [r7, #31]
 800676a:	e00d      	b.n	8006788 <UART_SetConfig+0x348>
 800676c:	2302      	movs	r3, #2
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e00a      	b.n	8006788 <UART_SetConfig+0x348>
 8006772:	2304      	movs	r3, #4
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e007      	b.n	8006788 <UART_SetConfig+0x348>
 8006778:	2308      	movs	r3, #8
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e004      	b.n	8006788 <UART_SetConfig+0x348>
 800677e:	2310      	movs	r3, #16
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e001      	b.n	8006788 <UART_SetConfig+0x348>
 8006784:	2310      	movs	r3, #16
 8006786:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006790:	d15b      	bne.n	800684a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006792:	7ffb      	ldrb	r3, [r7, #31]
 8006794:	2b08      	cmp	r3, #8
 8006796:	d828      	bhi.n	80067ea <UART_SetConfig+0x3aa>
 8006798:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <UART_SetConfig+0x360>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	080067eb 	.word	0x080067eb
 80067b0:	080067db 	.word	0x080067db
 80067b4:	080067eb 	.word	0x080067eb
 80067b8:	080067eb 	.word	0x080067eb
 80067bc:	080067eb 	.word	0x080067eb
 80067c0:	080067e3 	.word	0x080067e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fd fa48 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 80067c8:	61b8      	str	r0, [r7, #24]
        break;
 80067ca:	e013      	b.n	80067f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fd fa58 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 80067d0:	61b8      	str	r0, [r7, #24]
        break;
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006904 <UART_SetConfig+0x4c4>)
 80067d6:	61bb      	str	r3, [r7, #24]
        break;
 80067d8:	e00c      	b.n	80067f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067da:	f7fd f92b 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80067de:	61b8      	str	r0, [r7, #24]
        break;
 80067e0:	e008      	b.n	80067f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067e6:	61bb      	str	r3, [r7, #24]
        break;
 80067e8:	e004      	b.n	80067f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	77bb      	strb	r3, [r7, #30]
        break;
 80067f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d074      	beq.n	80068e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	005a      	lsls	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	441a      	add	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	fbb2 f3f3 	udiv	r3, r2, r3
 800680e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d916      	bls.n	8006844 <UART_SetConfig+0x404>
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800681c:	d212      	bcs.n	8006844 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	b29b      	uxth	r3, r3
 8006822:	f023 030f 	bic.w	r3, r3, #15
 8006826:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	b29b      	uxth	r3, r3
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	b29a      	uxth	r2, r3
 8006834:	89fb      	ldrh	r3, [r7, #14]
 8006836:	4313      	orrs	r3, r2
 8006838:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	89fa      	ldrh	r2, [r7, #14]
 8006840:	60da      	str	r2, [r3, #12]
 8006842:	e04f      	b.n	80068e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	77bb      	strb	r3, [r7, #30]
 8006848:	e04c      	b.n	80068e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800684a:	7ffb      	ldrb	r3, [r7, #31]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d828      	bhi.n	80068a2 <UART_SetConfig+0x462>
 8006850:	a201      	add	r2, pc, #4	@ (adr r2, 8006858 <UART_SetConfig+0x418>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006885 	.word	0x08006885
 8006860:	0800688d 	.word	0x0800688d
 8006864:	080068a3 	.word	0x080068a3
 8006868:	08006893 	.word	0x08006893
 800686c:	080068a3 	.word	0x080068a3
 8006870:	080068a3 	.word	0x080068a3
 8006874:	080068a3 	.word	0x080068a3
 8006878:	0800689b 	.word	0x0800689b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800687c:	f7fd f9ec 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8006880:	61b8      	str	r0, [r7, #24]
        break;
 8006882:	e013      	b.n	80068ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006884:	f7fd f9fc 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8006888:	61b8      	str	r0, [r7, #24]
        break;
 800688a:	e00f      	b.n	80068ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800688c:	4b1d      	ldr	r3, [pc, #116]	@ (8006904 <UART_SetConfig+0x4c4>)
 800688e:	61bb      	str	r3, [r7, #24]
        break;
 8006890:	e00c      	b.n	80068ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006892:	f7fd f8cf 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8006896:	61b8      	str	r0, [r7, #24]
        break;
 8006898:	e008      	b.n	80068ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800689a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800689e:	61bb      	str	r3, [r7, #24]
        break;
 80068a0:	e004      	b.n	80068ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	77bb      	strb	r3, [r7, #30]
        break;
 80068aa:	bf00      	nop
    }

    if (pclk != 0U)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d018      	beq.n	80068e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	085a      	lsrs	r2, r3, #1
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	441a      	add	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b0f      	cmp	r3, #15
 80068ca:	d909      	bls.n	80068e0 <UART_SetConfig+0x4a0>
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d2:	d205      	bcs.n	80068e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	e001      	b.n	80068e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	40007c00 	.word	0x40007c00
 8006900:	40023800 	.word	0x40023800
 8006904:	00f42400 	.word	0x00f42400

08006908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00a      	beq.n	8006976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	f003 0310 	and.w	r3, r3, #16
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01a      	beq.n	8006a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a06:	d10a      	bne.n	8006a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  }
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b098      	sub	sp, #96	@ 0x60
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a5c:	f7fb fb7e 	bl	800215c <HAL_GetTick>
 8006a60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d12e      	bne.n	8006ace <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f88c 	bl	8006b9c <UART_WaitOnFlagUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d021      	beq.n	8006ace <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e062      	b.n	8006b94 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d149      	bne.n	8006b70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006adc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f856 	bl	8006b9c <UART_WaitOnFlagUntilTimeout>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d03c      	beq.n	8006b70 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	623b      	str	r3, [r7, #32]
   return(result);
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e6      	bne.n	8006af6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0301 	bic.w	r3, r3, #1
 8006b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b48:	61fa      	str	r2, [r7, #28]
 8006b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	69b9      	ldr	r1, [r7, #24]
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	617b      	str	r3, [r7, #20]
   return(result);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e5      	bne.n	8006b28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e011      	b.n	8006b94 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3758      	adds	r7, #88	@ 0x58
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bac:	e04f      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d04b      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb6:	f7fb fad1 	bl	800215c <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d302      	bcc.n	8006bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e04e      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d037      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b80      	cmp	r3, #128	@ 0x80
 8006be2:	d034      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b40      	cmp	r3, #64	@ 0x40
 8006be8:	d031      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d110      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f9c5 	bl	8006f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2208      	movs	r2, #8
 8006c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e029      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c28:	d111      	bne.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f9ab 	bl	8006f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e00f      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4013      	ands	r3, r2
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	2300      	movne	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d0a0      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b097      	sub	sp, #92	@ 0x5c
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	88fa      	ldrh	r2, [r7, #6]
 8006c90:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006caa:	d10e      	bne.n	8006cca <UART_Start_Receive_IT+0x52>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d105      	bne.n	8006cc0 <UART_Start_Receive_IT+0x48>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006cba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cbe:	e02d      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	22ff      	movs	r2, #255	@ 0xff
 8006cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cc8:	e028      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <UART_Start_Receive_IT+0x76>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d104      	bne.n	8006ce4 <UART_Start_Receive_IT+0x6c>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	@ 0xff
 8006cde:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ce2:	e01b      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	227f      	movs	r2, #127	@ 0x7f
 8006ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cec:	e016      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cf6:	d10d      	bne.n	8006d14 <UART_Start_Receive_IT+0x9c>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <UART_Start_Receive_IT+0x92>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	227f      	movs	r2, #127	@ 0x7f
 8006d04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d08:	e008      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	223f      	movs	r2, #63	@ 0x3f
 8006d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d12:	e003      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2222      	movs	r2, #34	@ 0x22
 8006d28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3308      	adds	r3, #8
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d4c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006d4e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e5      	bne.n	8006d2c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d68:	d107      	bne.n	8006d7a <UART_Start_Receive_IT+0x102>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d103      	bne.n	8006d7a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a21      	ldr	r2, [pc, #132]	@ (8006dfc <UART_Start_Receive_IT+0x184>)
 8006d76:	669a      	str	r2, [r3, #104]	@ 0x68
 8006d78:	e002      	b.n	8006d80 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a20      	ldr	r2, [pc, #128]	@ (8006e00 <UART_Start_Receive_IT+0x188>)
 8006d7e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d019      	beq.n	8006dbc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006dac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e6      	bne.n	8006d88 <UART_Start_Receive_IT+0x110>
 8006dba:	e018      	b.n	8006dee <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f043 0320 	orr.w	r3, r3, #32
 8006dd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dda:	623b      	str	r3, [r7, #32]
 8006ddc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	69f9      	ldr	r1, [r7, #28]
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e6      	bne.n	8006dbc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	375c      	adds	r7, #92	@ 0x5c
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	08007465 	.word	0x08007465
 8006e00:	080072bd 	.word	0x080072bd

08006e04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b096      	sub	sp, #88	@ 0x58
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2222      	movs	r2, #34	@ 0x22
 8006e2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d028      	beq.n	8006e8a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f38 <UART_Start_Receive_DMA+0x134>)
 8006e3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e44:	4a3d      	ldr	r2, [pc, #244]	@ (8006f3c <UART_Start_Receive_DMA+0x138>)
 8006e46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8006f40 <UART_Start_Receive_DMA+0x13c>)
 8006e4e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e54:	2200      	movs	r2, #0
 8006e56:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3324      	adds	r3, #36	@ 0x24
 8006e62:	4619      	mov	r1, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e68:	461a      	mov	r2, r3
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	f7fb fb66 	bl	800253c <HAL_DMA_Start_IT>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2210      	movs	r2, #16
 8006e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e051      	b.n	8006f2e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d018      	beq.n	8006ec4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ea6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eb2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e6      	bne.n	8006e92 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ee4:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ee6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3308      	adds	r3, #8
 8006efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	613b      	str	r3, [r7, #16]
   return(result);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f18:	623a      	str	r2, [r7, #32]
 8006f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	6a3a      	ldr	r2, [r7, #32]
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e5      	bne.n	8006ef8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3758      	adds	r7, #88	@ 0x58
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	08007059 	.word	0x08007059
 8006f3c:	08007181 	.word	0x08007181
 8006f40:	080071bf 	.word	0x080071bf

08006f44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b089      	sub	sp, #36	@ 0x24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6979      	ldr	r1, [r7, #20]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	613b      	str	r3, [r7, #16]
   return(result);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e6      	bne.n	8006f4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006f84:	bf00      	nop
 8006f86:	3724      	adds	r7, #36	@ 0x24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b095      	sub	sp, #84	@ 0x54
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e6      	bne.n	8006f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ff0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e5      	bne.n	8006fca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007002:	2b01      	cmp	r3, #1
 8007004:	d118      	bne.n	8007038 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
   return(result);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 0310 	bic.w	r3, r3, #16
 800701a:	647b      	str	r3, [r7, #68]	@ 0x44
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
   return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800704c:	bf00      	nop
 800704e:	3754      	adds	r7, #84	@ 0x54
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b09c      	sub	sp, #112	@ 0x70
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007064:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706e:	d071      	beq.n	8007154 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8007070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007072:	2200      	movs	r2, #0
 8007074:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800708c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800708e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007096:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007098:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800709c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e6      	bne.n	8007078 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80070c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80070ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80070cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3308      	adds	r3, #8
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	623b      	str	r3, [r7, #32]
   return(result);
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80070f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3308      	adds	r3, #8
 80070fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800710c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e5      	bne.n	80070de <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007114:	2220      	movs	r2, #32
 8007116:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800711c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711e:	2b01      	cmp	r3, #1
 8007120:	d118      	bne.n	8007154 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0310 	bic.w	r3, r3, #16
 8007136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007140:	61fb      	str	r3, [r7, #28]
 8007142:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	69b9      	ldr	r1, [r7, #24]
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	617b      	str	r3, [r7, #20]
   return(result);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e6      	bne.n	8007122 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007156:	2200      	movs	r2, #0
 8007158:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800715c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800715e:	2b01      	cmp	r3, #1
 8007160:	d107      	bne.n	8007172 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007164:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007168:	4619      	mov	r1, r3
 800716a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800716c:	f7f9 fb1e 	bl	80007ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007170:	e002      	b.n	8007178 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007172:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007174:	f7f9 fefe 	bl	8000f74 <HAL_UART_RxCpltCallback>
}
 8007178:	bf00      	nop
 800717a:	3770      	adds	r7, #112	@ 0x70
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007198:	2b01      	cmp	r3, #1
 800719a:	d109      	bne.n	80071b0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7f9 faff 	bl	80007ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071ae:	e002      	b.n	80071b6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7ff f927 	bl	8006404 <HAL_UART_RxHalfCpltCallback>
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071d0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e4:	2b80      	cmp	r3, #128	@ 0x80
 80071e6:	d109      	bne.n	80071fc <UART_DMAError+0x3e>
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2b21      	cmp	r3, #33	@ 0x21
 80071ec:	d106      	bne.n	80071fc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80071f6:	6978      	ldr	r0, [r7, #20]
 80071f8:	f7ff fea4 	bl	8006f44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007206:	2b40      	cmp	r3, #64	@ 0x40
 8007208:	d109      	bne.n	800721e <UART_DMAError+0x60>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b22      	cmp	r3, #34	@ 0x22
 800720e:	d106      	bne.n	800721e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2200      	movs	r2, #0
 8007214:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007218:	6978      	ldr	r0, [r7, #20]
 800721a:	f7ff feb9 	bl	8006f90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007224:	f043 0210 	orr.w	r2, r3, #16
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800722e:	6978      	ldr	r0, [r7, #20]
 8007230:	f7ff f8f2 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007234:	bf00      	nop
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f7ff f8dc 	bl	8006418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007260:	bf00      	nop
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	60bb      	str	r3, [r7, #8]
   return(result);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6979      	ldr	r1, [r7, #20]
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	613b      	str	r3, [r7, #16]
   return(result);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e6      	bne.n	8007270 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff f89e 	bl	80063f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b4:	bf00      	nop
 80072b6:	3720      	adds	r7, #32
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b09c      	sub	sp, #112	@ 0x70
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072d4:	2b22      	cmp	r3, #34	@ 0x22
 80072d6:	f040 80b9 	bne.w	800744c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80072e8:	b2d9      	uxtb	r1, r3
 80072ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f4:	400a      	ands	r2, r1
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800730a:	b29b      	uxth	r3, r3
 800730c:	3b01      	subs	r3, #1
 800730e:	b29a      	uxth	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	f040 809c 	bne.w	800745c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007334:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007342:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007344:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007348:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e6      	bne.n	8007324 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3308      	adds	r3, #8
 800735c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007368:	f023 0301 	bic.w	r3, r3, #1
 800736c:	667b      	str	r3, [r7, #100]	@ 0x64
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3308      	adds	r3, #8
 8007374:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007376:	647a      	str	r2, [r7, #68]	@ 0x44
 8007378:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800737c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e5      	bne.n	8007356 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d018      	beq.n	80073de <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	623b      	str	r3, [r7, #32]
   return(result);
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80073cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e6      	bne.n	80073ac <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d12e      	bne.n	8007444 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f023 0310 	bic.w	r3, r3, #16
 8007400:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800740a:	61fb      	str	r3, [r7, #28]
 800740c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	69b9      	ldr	r1, [r7, #24]
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	617b      	str	r3, [r7, #20]
   return(result);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e6      	bne.n	80073ec <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b10      	cmp	r3, #16
 800742a:	d103      	bne.n	8007434 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2210      	movs	r2, #16
 8007432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7f9 f9b5 	bl	80007ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007442:	e00b      	b.n	800745c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7f9 fd95 	bl	8000f74 <HAL_UART_RxCpltCallback>
}
 800744a:	e007      	b.n	800745c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0208 	orr.w	r2, r2, #8
 800745a:	619a      	str	r2, [r3, #24]
}
 800745c:	bf00      	nop
 800745e:	3770      	adds	r7, #112	@ 0x70
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b09c      	sub	sp, #112	@ 0x70
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007472:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800747c:	2b22      	cmp	r3, #34	@ 0x22
 800747e:	f040 80b9 	bne.w	80075f4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007488:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007490:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007492:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007496:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800749a:	4013      	ands	r3, r2
 800749c:	b29a      	uxth	r2, r3
 800749e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a6:	1c9a      	adds	r2, r3, #2
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f040 809c 	bne.w	8007604 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80074da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80074ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80074f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80074f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e6      	bne.n	80074cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3308      	adds	r3, #8
 8007504:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	f023 0301 	bic.w	r3, r3, #1
 8007514:	663b      	str	r3, [r7, #96]	@ 0x60
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800751e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007524:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e5      	bne.n	80074fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d018      	beq.n	8007586 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	61fb      	str	r3, [r7, #28]
   return(result);
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007568:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007574:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e6      	bne.n	8007554 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800758a:	2b01      	cmp	r3, #1
 800758c:	d12e      	bne.n	80075ec <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f023 0310 	bic.w	r3, r3, #16
 80075a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6979      	ldr	r1, [r7, #20]
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	613b      	str	r3, [r7, #16]
   return(result);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e6      	bne.n	8007594 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f003 0310 	and.w	r3, r3, #16
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d103      	bne.n	80075dc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2210      	movs	r2, #16
 80075da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7f9 f8e1 	bl	80007ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075ea:	e00b      	b.n	8007604 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7f9 fcc1 	bl	8000f74 <HAL_UART_RxCpltCallback>
}
 80075f2:	e007      	b.n	8007604 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0208 	orr.w	r2, r2, #8
 8007602:	619a      	str	r2, [r3, #24]
}
 8007604:	bf00      	nop
 8007606:	3770      	adds	r7, #112	@ 0x70
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08c      	sub	sp, #48	@ 0x30
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007620:	2b20      	cmp	r3, #32
 8007622:	d142      	bne.n	80076aa <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e03b      	b.n	80076ac <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	461a      	mov	r2, r3
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fbdc 	bl	8006e04 <UART_Start_Receive_DMA>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007652:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007656:	2b00      	cmp	r3, #0
 8007658:	d124      	bne.n	80076a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800765e:	2b01      	cmp	r3, #1
 8007660:	d11d      	bne.n	800769e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2210      	movs	r2, #16
 8007668:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	617b      	str	r3, [r7, #20]
   return(result);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f043 0310 	orr.w	r3, r3, #16
 800767e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
 800768a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6a39      	ldr	r1, [r7, #32]
 800768e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	61fb      	str	r3, [r7, #28]
   return(result);
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e6      	bne.n	800766a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800769c:	e002      	b.n	80076a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80076a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076a8:	e000      	b.n	80076ac <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80076aa:	2302      	movs	r3, #2
  }
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3730      	adds	r7, #48	@ 0x30
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076b4:	b084      	sub	sp, #16
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	f107 001c 	add.w	r0, r7, #28
 80076c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d121      	bne.n	8007712 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	4b21      	ldr	r3, [pc, #132]	@ (8007764 <USB_CoreInit+0xb0>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d105      	bne.n	8007706 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa92 	bl	8007c30 <USB_CoreReset>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	e010      	b.n	8007734 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa86 	bl	8007c30 <USB_CoreReset>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007734:	7fbb      	ldrb	r3, [r7, #30]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d10b      	bne.n	8007752 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f043 0206 	orr.w	r2, r3, #6
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f043 0220 	orr.w	r2, r3, #32
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800775e:	b004      	add	sp, #16
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	ffbdffbf 	.word	0xffbdffbf

08007768 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f023 0201 	bic.w	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d115      	bne.n	80077d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077b8:	200a      	movs	r0, #10
 80077ba:	f7fa fcdb 	bl	8002174 <HAL_Delay>
      ms += 10U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	330a      	adds	r3, #10
 80077c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fa25 	bl	8007c14 <USB_GetMode>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d01e      	beq.n	800780e <USB_SetCurrentMode+0x84>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80077d4:	d9f0      	bls.n	80077b8 <USB_SetCurrentMode+0x2e>
 80077d6:	e01a      	b.n	800780e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d115      	bne.n	800780a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077ea:	200a      	movs	r0, #10
 80077ec:	f7fa fcc2 	bl	8002174 <HAL_Delay>
      ms += 10U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	330a      	adds	r3, #10
 80077f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa0c 	bl	8007c14 <USB_GetMode>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <USB_SetCurrentMode+0x84>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2bc7      	cmp	r3, #199	@ 0xc7
 8007806:	d9f0      	bls.n	80077ea <USB_SetCurrentMode+0x60>
 8007808:	e001      	b.n	800780e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e005      	b.n	800781a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2bc8      	cmp	r3, #200	@ 0xc8
 8007812:	d101      	bne.n	8007818 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007824:	b084      	sub	sp, #16
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800783e:	2300      	movs	r3, #0
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	e009      	b.n	8007858 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	3340      	adds	r3, #64	@ 0x40
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	2200      	movs	r2, #0
 8007850:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	3301      	adds	r3, #1
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2b0e      	cmp	r3, #14
 800785c:	d9f2      	bls.n	8007844 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800785e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007862:	2b00      	cmp	r3, #0
 8007864:	d11c      	bne.n	80078a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007874:	f043 0302 	orr.w	r3, r3, #2
 8007878:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e005      	b.n	80078ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078b2:	461a      	mov	r2, r3
 80078b4:	2300      	movs	r3, #0
 80078b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d10d      	bne.n	80078dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078c8:	2100      	movs	r1, #0
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f968 	bl	8007ba0 <USB_SetDevSpeed>
 80078d0:	e008      	b.n	80078e4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078d2:	2101      	movs	r1, #1
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f963 	bl	8007ba0 <USB_SetDevSpeed>
 80078da:	e003      	b.n	80078e4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078dc:	2103      	movs	r1, #3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f95e 	bl	8007ba0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078e4:	2110      	movs	r1, #16
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f8fa 	bl	8007ae0 <USB_FlushTxFifo>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f924 	bl	8007b44 <USB_FlushRxFifo>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800790c:	461a      	mov	r2, r3
 800790e:	2300      	movs	r3, #0
 8007910:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007918:	461a      	mov	r2, r3
 800791a:	2300      	movs	r3, #0
 800791c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007924:	461a      	mov	r2, r3
 8007926:	2300      	movs	r3, #0
 8007928:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
 800792e:	e043      	b.n	80079b8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007942:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007946:	d118      	bne.n	800797a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795a:	461a      	mov	r2, r3
 800795c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	e013      	b.n	800798c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007970:	461a      	mov	r2, r3
 8007972:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	e008      	b.n	800798c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007986:	461a      	mov	r2, r3
 8007988:	2300      	movs	r3, #0
 800798a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007998:	461a      	mov	r2, r3
 800799a:	2300      	movs	r3, #0
 800799c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079aa:	461a      	mov	r2, r3
 80079ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	3301      	adds	r3, #1
 80079b6:	613b      	str	r3, [r7, #16]
 80079b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079bc:	461a      	mov	r2, r3
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d3b5      	bcc.n	8007930 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]
 80079c8:	e043      	b.n	8007a52 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079e0:	d118      	bne.n	8007a14 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f4:	461a      	mov	r2, r3
 80079f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	e013      	b.n	8007a26 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	e008      	b.n	8007a26 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a20:	461a      	mov	r2, r3
 8007a22:	2300      	movs	r3, #0
 8007a24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a32:	461a      	mov	r2, r3
 8007a34:	2300      	movs	r3, #0
 8007a36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a44:	461a      	mov	r2, r3
 8007a46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a56:	461a      	mov	r2, r3
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d3b5      	bcc.n	80079ca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d105      	bne.n	8007a94 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	f043 0210 	orr.w	r2, r3, #16
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad8 <USB_DevInit+0x2b4>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007aa0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	f043 0208 	orr.w	r2, r3, #8
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ab4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d105      	bne.n	8007ac8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	699a      	ldr	r2, [r3, #24]
 8007ac0:	4b06      	ldr	r3, [pc, #24]	@ (8007adc <USB_DevInit+0x2b8>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ad4:	b004      	add	sp, #16
 8007ad6:	4770      	bx	lr
 8007ad8:	803c3800 	.word	0x803c3800
 8007adc:	40000004 	.word	0x40000004

08007ae0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3301      	adds	r3, #1
 8007af2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007afa:	d901      	bls.n	8007b00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e01b      	b.n	8007b38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	daf2      	bge.n	8007aee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	019b      	lsls	r3, r3, #6
 8007b10:	f043 0220 	orr.w	r2, r3, #32
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b24:	d901      	bls.n	8007b2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e006      	b.n	8007b38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d0f0      	beq.n	8007b18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b5c:	d901      	bls.n	8007b62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e018      	b.n	8007b94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	daf2      	bge.n	8007b50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2210      	movs	r2, #16
 8007b72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3301      	adds	r3, #1
 8007b78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b80:	d901      	bls.n	8007b86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e006      	b.n	8007b94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b10      	cmp	r3, #16
 8007b90:	d0f0      	beq.n	8007b74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bec:	f023 0303 	bic.w	r3, r3, #3
 8007bf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c00:	f043 0302 	orr.w	r3, r3, #2
 8007c04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	f003 0301 	and.w	r3, r3, #1
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c48:	d901      	bls.n	8007c4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e01b      	b.n	8007c86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	daf2      	bge.n	8007c3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f043 0201 	orr.w	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c72:	d901      	bls.n	8007c78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e006      	b.n	8007c86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d0f0      	beq.n	8007c66 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	1c5a      	adds	r2, r3, #1
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
}
 8007cce:	bf00      	nop
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b085      	sub	sp, #20
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6892      	ldr	r2, [r2, #8]
 8007cf0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6852      	ldr	r2, [r2, #4]
 8007cfa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d103      	bne.n	8007d0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689a      	ldr	r2, [r3, #8]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	1e5a      	subs	r2, r3, #1
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
	...

08007d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d3a:	4b50      	ldr	r3, [pc, #320]	@ (8007e7c <xTaskIncrementTick+0x14c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f040 808c 	bne.w	8007e5c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d44:	4b4e      	ldr	r3, [pc, #312]	@ (8007e80 <xTaskIncrementTick+0x150>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d4c:	4a4c      	ldr	r2, [pc, #304]	@ (8007e80 <xTaskIncrementTick+0x150>)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d123      	bne.n	8007da0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d58:	4b4a      	ldr	r3, [pc, #296]	@ (8007e84 <xTaskIncrementTick+0x154>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00d      	beq.n	8007d7e <xTaskIncrementTick+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d66:	b672      	cpsid	i
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	b662      	cpsie	i
 8007d76:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d78:	bf00      	nop
 8007d7a:	bf00      	nop
 8007d7c:	e7fd      	b.n	8007d7a <xTaskIncrementTick+0x4a>
 8007d7e:	4b41      	ldr	r3, [pc, #260]	@ (8007e84 <xTaskIncrementTick+0x154>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	4b40      	ldr	r3, [pc, #256]	@ (8007e88 <xTaskIncrementTick+0x158>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a3e      	ldr	r2, [pc, #248]	@ (8007e84 <xTaskIncrementTick+0x154>)
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8007e88 <xTaskIncrementTick+0x158>)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	4b3e      	ldr	r3, [pc, #248]	@ (8007e8c <xTaskIncrementTick+0x15c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3301      	adds	r3, #1
 8007d98:	4a3c      	ldr	r2, [pc, #240]	@ (8007e8c <xTaskIncrementTick+0x15c>)
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	f000 f8e4 	bl	8007f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007da0:	4b3b      	ldr	r3, [pc, #236]	@ (8007e90 <xTaskIncrementTick+0x160>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d349      	bcc.n	8007e3e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007daa:	4b36      	ldr	r3, [pc, #216]	@ (8007e84 <xTaskIncrementTick+0x154>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db4:	4b36      	ldr	r3, [pc, #216]	@ (8007e90 <xTaskIncrementTick+0x160>)
 8007db6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dba:	601a      	str	r2, [r3, #0]
					break;
 8007dbc:	e03f      	b.n	8007e3e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dbe:	4b31      	ldr	r3, [pc, #196]	@ (8007e84 <xTaskIncrementTick+0x154>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d203      	bcs.n	8007dde <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8007e90 <xTaskIncrementTick+0x160>)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ddc:	e02f      	b.n	8007e3e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	3304      	adds	r3, #4
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff ff79 	bl	8007cda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d004      	beq.n	8007dfa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	3318      	adds	r3, #24
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff ff70 	bl	8007cda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dfe:	4b25      	ldr	r3, [pc, #148]	@ (8007e94 <xTaskIncrementTick+0x164>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d903      	bls.n	8007e0e <xTaskIncrementTick+0xde>
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0a:	4a22      	ldr	r2, [pc, #136]	@ (8007e94 <xTaskIncrementTick+0x164>)
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007e98 <xTaskIncrementTick+0x168>)
 8007e1c:	441a      	add	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	3304      	adds	r3, #4
 8007e22:	4619      	mov	r1, r3
 8007e24:	4610      	mov	r0, r2
 8007e26:	f7ff ff34 	bl	8007c92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8007e9c <xTaskIncrementTick+0x16c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d3b8      	bcc.n	8007daa <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e3c:	e7b5      	b.n	8007daa <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e3e:	4b17      	ldr	r3, [pc, #92]	@ (8007e9c <xTaskIncrementTick+0x16c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e44:	4914      	ldr	r1, [pc, #80]	@ (8007e98 <xTaskIncrementTick+0x168>)
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d907      	bls.n	8007e66 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007e56:	2301      	movs	r3, #1
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	e004      	b.n	8007e66 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e5c:	4b10      	ldr	r3, [pc, #64]	@ (8007ea0 <xTaskIncrementTick+0x170>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3301      	adds	r3, #1
 8007e62:	4a0f      	ldr	r2, [pc, #60]	@ (8007ea0 <xTaskIncrementTick+0x170>)
 8007e64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea4 <xTaskIncrementTick+0x174>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e72:	697b      	ldr	r3, [r7, #20]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20000ed0 	.word	0x20000ed0
 8007e80:	20000eb4 	.word	0x20000eb4
 8007e84:	20000eac 	.word	0x20000eac
 8007e88:	20000eb0 	.word	0x20000eb0
 8007e8c:	20000ec8 	.word	0x20000ec8
 8007e90:	20000ecc 	.word	0x20000ecc
 8007e94:	20000eb8 	.word	0x20000eb8
 8007e98:	20000a4c 	.word	0x20000a4c
 8007e9c:	20000a48 	.word	0x20000a48
 8007ea0:	20000ec0 	.word	0x20000ec0
 8007ea4:	20000ec4 	.word	0x20000ec4

08007ea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007eae:	4b29      	ldr	r3, [pc, #164]	@ (8007f54 <vTaskSwitchContext+0xac>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007eb6:	4b28      	ldr	r3, [pc, #160]	@ (8007f58 <vTaskSwitchContext+0xb0>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ebc:	e044      	b.n	8007f48 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007ebe:	4b26      	ldr	r3, [pc, #152]	@ (8007f58 <vTaskSwitchContext+0xb0>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec4:	4b25      	ldr	r3, [pc, #148]	@ (8007f5c <vTaskSwitchContext+0xb4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	e013      	b.n	8007ef4 <vTaskSwitchContext+0x4c>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10d      	bne.n	8007eee <vTaskSwitchContext+0x46>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed6:	b672      	cpsid	i
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	b662      	cpsie	i
 8007ee6:	607b      	str	r3, [r7, #4]
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	e7fd      	b.n	8007eea <vTaskSwitchContext+0x42>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	491a      	ldr	r1, [pc, #104]	@ (8007f60 <vTaskSwitchContext+0xb8>)
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0e1      	beq.n	8007ecc <vTaskSwitchContext+0x24>
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4a13      	ldr	r2, [pc, #76]	@ (8007f60 <vTaskSwitchContext+0xb8>)
 8007f14:	4413      	add	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	605a      	str	r2, [r3, #4]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d104      	bne.n	8007f38 <vTaskSwitchContext+0x90>
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	605a      	str	r2, [r3, #4]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	4a09      	ldr	r2, [pc, #36]	@ (8007f64 <vTaskSwitchContext+0xbc>)
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	4a06      	ldr	r2, [pc, #24]	@ (8007f5c <vTaskSwitchContext+0xb4>)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6013      	str	r3, [r2, #0]
}
 8007f48:	bf00      	nop
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	20000ed0 	.word	0x20000ed0
 8007f58:	20000ec4 	.word	0x20000ec4
 8007f5c:	20000eb8 	.word	0x20000eb8
 8007f60:	20000a4c 	.word	0x20000a4c
 8007f64:	20000a48 	.word	0x20000a48

08007f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x38>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f78:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8007f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f80:	e008      	b.n	8007f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f82:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x38>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4a04      	ldr	r2, [pc, #16]	@ (8007fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8007f92:	6013      	str	r3, [r2, #0]
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	20000eac 	.word	0x20000eac
 8007fa4:	20000ecc 	.word	0x20000ecc

08007fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fae:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <xTaskGetSchedulerState+0x34>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	e008      	b.n	8007fce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fbc:	4b08      	ldr	r3, [pc, #32]	@ (8007fe0 <xTaskGetSchedulerState+0x38>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d102      	bne.n	8007fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	607b      	str	r3, [r7, #4]
 8007fc8:	e001      	b.n	8007fce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fce:	687b      	ldr	r3, [r7, #4]
	}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20000ebc 	.word	0x20000ebc
 8007fe0:	20000ed0 	.word	0x20000ed0
	...

08007ff0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ff0:	4b07      	ldr	r3, [pc, #28]	@ (8008010 <pxCurrentTCBConst2>)
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	6808      	ldr	r0, [r1, #0]
 8007ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	f380 8809 	msr	PSP, r0
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f04f 0000 	mov.w	r0, #0
 8008006:	f380 8811 	msr	BASEPRI, r0
 800800a:	4770      	bx	lr
 800800c:	f3af 8000 	nop.w

08008010 <pxCurrentTCBConst2>:
 8008010:	20000a48 	.word	0x20000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
	...

08008020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008020:	f3ef 8009 	mrs	r0, PSP
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	4b15      	ldr	r3, [pc, #84]	@ (8008080 <pxCurrentTCBConst>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	f01e 0f10 	tst.w	lr, #16
 8008030:	bf08      	it	eq
 8008032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	6010      	str	r0, [r2, #0]
 800803c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008044:	b672      	cpsid	i
 8008046:	f380 8811 	msr	BASEPRI, r0
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	b662      	cpsie	i
 8008054:	f7ff ff28 	bl	8007ea8 <vTaskSwitchContext>
 8008058:	f04f 0000 	mov.w	r0, #0
 800805c:	f380 8811 	msr	BASEPRI, r0
 8008060:	bc09      	pop	{r0, r3}
 8008062:	6819      	ldr	r1, [r3, #0]
 8008064:	6808      	ldr	r0, [r1, #0]
 8008066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806a:	f01e 0f10 	tst.w	lr, #16
 800806e:	bf08      	it	eq
 8008070:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008074:	f380 8809 	msr	PSP, r0
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop

08008080 <pxCurrentTCBConst>:
 8008080:	20000a48 	.word	0x20000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop

08008088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008092:	b672      	cpsid	i
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	b662      	cpsie	i
 80080a2:	607b      	str	r3, [r7, #4]
}
 80080a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080a6:	f7ff fe43 	bl	8007d30 <xTaskIncrementTick>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080b0:	4b06      	ldr	r3, [pc, #24]	@ (80080cc <xPortSysTickHandler+0x44>)
 80080b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	2300      	movs	r3, #0
 80080ba:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	e000ed04 	.word	0xe000ed04

080080d0 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 80080dc:	887a      	ldrh	r2, [r7, #2]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8a9b      	ldrh	r3, [r3, #20]
 80080e2:	4619      	mov	r1, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	8b1b      	ldrh	r3, [r3, #24]
 80080e8:	1acb      	subs	r3, r1, r3
 80080ea:	429a      	cmp	r2, r3
 80080ec:	dd05      	ble.n	80080fa <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	8a9a      	ldrh	r2, [r3, #20]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	8b1b      	ldrh	r3, [r3, #24]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	8b12      	ldrh	r2, [r2, #24]
 8008102:	1898      	adds	r0, r3, r2
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	887a      	ldrh	r2, [r7, #2]
 800810a:	4619      	mov	r1, r3
 800810c:	f000 f910 	bl	8008330 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	8b1a      	ldrh	r2, [r3, #24]
 8008114:	887b      	ldrh	r3, [r7, #2]
 8008116:	4413      	add	r3, r2
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69d9      	ldr	r1, [r3, #28]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8a9b      	ldrh	r3, [r3, #20]
 800812a:	461a      	mov	r2, r3
 800812c:	f7ff fa6e 	bl	800760c <HAL_UARTEx_ReceiveToIdle_DMA>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10c      	bne.n	8008150 <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0208 	bic.w	r2, r2, #8
 800814c:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 800814e:	e01f      	b.n	8008190 <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4618      	mov	r0, r3
 8008162:	f7fd fdae 	bl	8005cc2 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69d9      	ldr	r1, [r3, #28]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	8a9b      	ldrh	r3, [r3, #20]
 8008172:	461a      	mov	r2, r3
 8008174:	f7ff fa4a 	bl	800760c <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0208 	bic.w	r2, r2, #8
 800818e:	601a      	str	r2, [r3, #0]
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <atoi>:
 8008198:	220a      	movs	r2, #10
 800819a:	2100      	movs	r1, #0
 800819c:	f000 b87a 	b.w	8008294 <strtol>

080081a0 <_strtol_l.constprop.0>:
 80081a0:	2b24      	cmp	r3, #36	@ 0x24
 80081a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a6:	4686      	mov	lr, r0
 80081a8:	4690      	mov	r8, r2
 80081aa:	d801      	bhi.n	80081b0 <_strtol_l.constprop.0+0x10>
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d106      	bne.n	80081be <_strtol_l.constprop.0+0x1e>
 80081b0:	f000 f894 	bl	80082dc <__errno>
 80081b4:	2316      	movs	r3, #22
 80081b6:	6003      	str	r3, [r0, #0]
 80081b8:	2000      	movs	r0, #0
 80081ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081be:	4834      	ldr	r0, [pc, #208]	@ (8008290 <_strtol_l.constprop.0+0xf0>)
 80081c0:	460d      	mov	r5, r1
 80081c2:	462a      	mov	r2, r5
 80081c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081c8:	5d06      	ldrb	r6, [r0, r4]
 80081ca:	f016 0608 	ands.w	r6, r6, #8
 80081ce:	d1f8      	bne.n	80081c2 <_strtol_l.constprop.0+0x22>
 80081d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80081d2:	d12d      	bne.n	8008230 <_strtol_l.constprop.0+0x90>
 80081d4:	782c      	ldrb	r4, [r5, #0]
 80081d6:	2601      	movs	r6, #1
 80081d8:	1c95      	adds	r5, r2, #2
 80081da:	f033 0210 	bics.w	r2, r3, #16
 80081de:	d109      	bne.n	80081f4 <_strtol_l.constprop.0+0x54>
 80081e0:	2c30      	cmp	r4, #48	@ 0x30
 80081e2:	d12a      	bne.n	800823a <_strtol_l.constprop.0+0x9a>
 80081e4:	782a      	ldrb	r2, [r5, #0]
 80081e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80081ea:	2a58      	cmp	r2, #88	@ 0x58
 80081ec:	d125      	bne.n	800823a <_strtol_l.constprop.0+0x9a>
 80081ee:	786c      	ldrb	r4, [r5, #1]
 80081f0:	2310      	movs	r3, #16
 80081f2:	3502      	adds	r5, #2
 80081f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80081f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80081fc:	2200      	movs	r2, #0
 80081fe:	fbbc f9f3 	udiv	r9, ip, r3
 8008202:	4610      	mov	r0, r2
 8008204:	fb03 ca19 	mls	sl, r3, r9, ip
 8008208:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800820c:	2f09      	cmp	r7, #9
 800820e:	d81b      	bhi.n	8008248 <_strtol_l.constprop.0+0xa8>
 8008210:	463c      	mov	r4, r7
 8008212:	42a3      	cmp	r3, r4
 8008214:	dd27      	ble.n	8008266 <_strtol_l.constprop.0+0xc6>
 8008216:	1c57      	adds	r7, r2, #1
 8008218:	d007      	beq.n	800822a <_strtol_l.constprop.0+0x8a>
 800821a:	4581      	cmp	r9, r0
 800821c:	d320      	bcc.n	8008260 <_strtol_l.constprop.0+0xc0>
 800821e:	d101      	bne.n	8008224 <_strtol_l.constprop.0+0x84>
 8008220:	45a2      	cmp	sl, r4
 8008222:	db1d      	blt.n	8008260 <_strtol_l.constprop.0+0xc0>
 8008224:	fb00 4003 	mla	r0, r0, r3, r4
 8008228:	2201      	movs	r2, #1
 800822a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800822e:	e7eb      	b.n	8008208 <_strtol_l.constprop.0+0x68>
 8008230:	2c2b      	cmp	r4, #43	@ 0x2b
 8008232:	bf04      	itt	eq
 8008234:	782c      	ldrbeq	r4, [r5, #0]
 8008236:	1c95      	addeq	r5, r2, #2
 8008238:	e7cf      	b.n	80081da <_strtol_l.constprop.0+0x3a>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1da      	bne.n	80081f4 <_strtol_l.constprop.0+0x54>
 800823e:	2c30      	cmp	r4, #48	@ 0x30
 8008240:	bf0c      	ite	eq
 8008242:	2308      	moveq	r3, #8
 8008244:	230a      	movne	r3, #10
 8008246:	e7d5      	b.n	80081f4 <_strtol_l.constprop.0+0x54>
 8008248:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800824c:	2f19      	cmp	r7, #25
 800824e:	d801      	bhi.n	8008254 <_strtol_l.constprop.0+0xb4>
 8008250:	3c37      	subs	r4, #55	@ 0x37
 8008252:	e7de      	b.n	8008212 <_strtol_l.constprop.0+0x72>
 8008254:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008258:	2f19      	cmp	r7, #25
 800825a:	d804      	bhi.n	8008266 <_strtol_l.constprop.0+0xc6>
 800825c:	3c57      	subs	r4, #87	@ 0x57
 800825e:	e7d8      	b.n	8008212 <_strtol_l.constprop.0+0x72>
 8008260:	f04f 32ff 	mov.w	r2, #4294967295
 8008264:	e7e1      	b.n	800822a <_strtol_l.constprop.0+0x8a>
 8008266:	1c53      	adds	r3, r2, #1
 8008268:	d108      	bne.n	800827c <_strtol_l.constprop.0+0xdc>
 800826a:	2322      	movs	r3, #34	@ 0x22
 800826c:	f8ce 3000 	str.w	r3, [lr]
 8008270:	4660      	mov	r0, ip
 8008272:	f1b8 0f00 	cmp.w	r8, #0
 8008276:	d0a0      	beq.n	80081ba <_strtol_l.constprop.0+0x1a>
 8008278:	1e69      	subs	r1, r5, #1
 800827a:	e006      	b.n	800828a <_strtol_l.constprop.0+0xea>
 800827c:	b106      	cbz	r6, 8008280 <_strtol_l.constprop.0+0xe0>
 800827e:	4240      	negs	r0, r0
 8008280:	f1b8 0f00 	cmp.w	r8, #0
 8008284:	d099      	beq.n	80081ba <_strtol_l.constprop.0+0x1a>
 8008286:	2a00      	cmp	r2, #0
 8008288:	d1f6      	bne.n	8008278 <_strtol_l.constprop.0+0xd8>
 800828a:	f8c8 1000 	str.w	r1, [r8]
 800828e:	e794      	b.n	80081ba <_strtol_l.constprop.0+0x1a>
 8008290:	0800853d 	.word	0x0800853d

08008294 <strtol>:
 8008294:	4613      	mov	r3, r2
 8008296:	460a      	mov	r2, r1
 8008298:	4601      	mov	r1, r0
 800829a:	4802      	ldr	r0, [pc, #8]	@ (80082a4 <strtol+0x10>)
 800829c:	6800      	ldr	r0, [r0, #0]
 800829e:	f7ff bf7f 	b.w	80081a0 <_strtol_l.constprop.0>
 80082a2:	bf00      	nop
 80082a4:	2000000c 	.word	0x2000000c

080082a8 <memset>:
 80082a8:	4402      	add	r2, r0
 80082aa:	4603      	mov	r3, r0
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d100      	bne.n	80082b2 <memset+0xa>
 80082b0:	4770      	bx	lr
 80082b2:	f803 1b01 	strb.w	r1, [r3], #1
 80082b6:	e7f9      	b.n	80082ac <memset+0x4>

080082b8 <strncmp>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	b16a      	cbz	r2, 80082d8 <strncmp+0x20>
 80082bc:	3901      	subs	r1, #1
 80082be:	1884      	adds	r4, r0, r2
 80082c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d103      	bne.n	80082d4 <strncmp+0x1c>
 80082cc:	42a0      	cmp	r0, r4
 80082ce:	d001      	beq.n	80082d4 <strncmp+0x1c>
 80082d0:	2a00      	cmp	r2, #0
 80082d2:	d1f5      	bne.n	80082c0 <strncmp+0x8>
 80082d4:	1ad0      	subs	r0, r2, r3
 80082d6:	bd10      	pop	{r4, pc}
 80082d8:	4610      	mov	r0, r2
 80082da:	e7fc      	b.n	80082d6 <strncmp+0x1e>

080082dc <__errno>:
 80082dc:	4b01      	ldr	r3, [pc, #4]	@ (80082e4 <__errno+0x8>)
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	2000000c 	.word	0x2000000c

080082e8 <__libc_init_array>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4d0d      	ldr	r5, [pc, #52]	@ (8008320 <__libc_init_array+0x38>)
 80082ec:	4c0d      	ldr	r4, [pc, #52]	@ (8008324 <__libc_init_array+0x3c>)
 80082ee:	1b64      	subs	r4, r4, r5
 80082f0:	10a4      	asrs	r4, r4, #2
 80082f2:	2600      	movs	r6, #0
 80082f4:	42a6      	cmp	r6, r4
 80082f6:	d109      	bne.n	800830c <__libc_init_array+0x24>
 80082f8:	4d0b      	ldr	r5, [pc, #44]	@ (8008328 <__libc_init_array+0x40>)
 80082fa:	4c0c      	ldr	r4, [pc, #48]	@ (800832c <__libc_init_array+0x44>)
 80082fc:	f000 f826 	bl	800834c <_init>
 8008300:	1b64      	subs	r4, r4, r5
 8008302:	10a4      	asrs	r4, r4, #2
 8008304:	2600      	movs	r6, #0
 8008306:	42a6      	cmp	r6, r4
 8008308:	d105      	bne.n	8008316 <__libc_init_array+0x2e>
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008310:	4798      	blx	r3
 8008312:	3601      	adds	r6, #1
 8008314:	e7ee      	b.n	80082f4 <__libc_init_array+0xc>
 8008316:	f855 3b04 	ldr.w	r3, [r5], #4
 800831a:	4798      	blx	r3
 800831c:	3601      	adds	r6, #1
 800831e:	e7f2      	b.n	8008306 <__libc_init_array+0x1e>
 8008320:	08008648 	.word	0x08008648
 8008324:	08008648 	.word	0x08008648
 8008328:	08008648 	.word	0x08008648
 800832c:	0800864c 	.word	0x0800864c

08008330 <memcpy>:
 8008330:	440a      	add	r2, r1
 8008332:	4291      	cmp	r1, r2
 8008334:	f100 33ff 	add.w	r3, r0, #4294967295
 8008338:	d100      	bne.n	800833c <memcpy+0xc>
 800833a:	4770      	bx	lr
 800833c:	b510      	push	{r4, lr}
 800833e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008346:	4291      	cmp	r1, r2
 8008348:	d1f9      	bne.n	800833e <memcpy+0xe>
 800834a:	bd10      	pop	{r4, pc}

0800834c <_init>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	bf00      	nop
 8008350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008352:	bc08      	pop	{r3}
 8008354:	469e      	mov	lr, r3
 8008356:	4770      	bx	lr

08008358 <_fini>:
 8008358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835a:	bf00      	nop
 800835c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835e:	bc08      	pop	{r3}
 8008360:	469e      	mov	lr, r3
 8008362:	4770      	bx	lr
