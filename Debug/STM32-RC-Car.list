
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800b3f0  0800b3f0  0000c3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b730  0800b730  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b730  0800b730  0000c730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b738  0800b738  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b738  0800b738  0000c738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b73c  0800b73c  0000c73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800b740  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005490  20000060  0800b7a0  0000d060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054f0  0800b7a0  0000d4f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020645  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004871  00000000  00000000  0002d6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  00031f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cc  00000000  00000000  00033a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc23  00000000  00000000  00034edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c9e  00000000  00000000  00060aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109249  00000000  00000000  0008279d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b9e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007574  00000000  00000000  0018ba2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00192fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b3d8 	.word	0x0800b3d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800b3d8 	.word	0x0800b3d8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000606:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <MX_DMA_Init+0x48>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <MX_DMA_Init+0x48>)
 800060c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_DMA_Init+0x48>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	2010      	movs	r0, #16
 8000624:	f002 fa49 	bl	8002aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000628:	2010      	movs	r0, #16
 800062a:	f002 fa62 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2105      	movs	r1, #5
 8000632:	2011      	movs	r0, #17
 8000634:	f002 fa41 	bl	8002aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000638:	2011      	movs	r0, #17
 800063a:	f002 fa5a 	bl	8002af2 <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	//defaultTaskHandle = osThreadNew(ProcessIncomingData, NULL, &defaultTask_attributes);
	heartBeatHandle = osThreadNew(ProcessHeartBeat, NULL, &heartBeatHandle_attributes);
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <MX_FREERTOS_Init+0x18>)
 8000652:	2100      	movs	r1, #0
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_FREERTOS_Init+0x1c>)
 8000656:	f007 fbdf 	bl	8007e18 <osThreadNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a03      	ldr	r2, [pc, #12]	@ (800066c <MX_FREERTOS_Init+0x20>)
 800065e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	0800b5b8 	.word	0x0800b5b8
 8000668:	08001475 	.word	0x08001475
 800066c:	2000007c 	.word	0x2000007c

08000670 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	@ 0x30
 8000674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b77      	ldr	r3, [pc, #476]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a76      	ldr	r2, [pc, #472]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b74      	ldr	r3, [pc, #464]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b71      	ldr	r3, [pc, #452]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a70      	ldr	r2, [pc, #448]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b6e      	ldr	r3, [pc, #440]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b6b      	ldr	r3, [pc, #428]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a6a      	ldr	r2, [pc, #424]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b68      	ldr	r3, [pc, #416]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b65      	ldr	r3, [pc, #404]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a64      	ldr	r2, [pc, #400]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b62      	ldr	r3, [pc, #392]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a5e      	ldr	r2, [pc, #376]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b5c      	ldr	r3, [pc, #368]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	4b59      	ldr	r3, [pc, #356]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a58      	ldr	r2, [pc, #352]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b56      	ldr	r3, [pc, #344]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	4b53      	ldr	r3, [pc, #332]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a52      	ldr	r2, [pc, #328]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b50      	ldr	r3, [pc, #320]	@ (8000864 <MX_GPIO_Init+0x1f4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0308 	and.w	r3, r3, #8
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000734:	484c      	ldr	r0, [pc, #304]	@ (8000868 <MX_GPIO_Init+0x1f8>)
 8000736:	f002 ff1f 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2141      	movs	r1, #65	@ 0x41
 800073e:	484b      	ldr	r0, [pc, #300]	@ (800086c <MX_GPIO_Init+0x1fc>)
 8000740:	f002 ff1a 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2110      	movs	r1, #16
 8000748:	4849      	ldr	r0, [pc, #292]	@ (8000870 <MX_GPIO_Init+0x200>)
 800074a:	f002 ff15 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800074e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000754:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4843      	ldr	r0, [pc, #268]	@ (8000874 <MX_GPIO_Init+0x204>)
 8000766:	f002 fd5b 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800076a:	2332      	movs	r3, #50	@ 0x32
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077a:	230b      	movs	r3, #11
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	483b      	ldr	r0, [pc, #236]	@ (8000874 <MX_GPIO_Init+0x204>)
 8000786:	f002 fd4b 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800078a:	2386      	movs	r3, #134	@ 0x86
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800079a:	230b      	movs	r3, #11
 800079c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4834      	ldr	r0, [pc, #208]	@ (8000878 <MX_GPIO_Init+0x208>)
 80007a6:	f002 fd3b 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007aa:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4829      	ldr	r0, [pc, #164]	@ (8000868 <MX_GPIO_Init+0x1f8>)
 80007c4:	f002 fd2c 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 80007c8:	2341      	movs	r3, #65	@ 0x41
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <MX_GPIO_Init+0x1fc>)
 80007e0:	f002 fd1e 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f6:	230b      	movs	r3, #11
 80007f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4819      	ldr	r0, [pc, #100]	@ (8000868 <MX_GPIO_Init+0x1f8>)
 8000802:	f002 fd0d 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000806:	2380      	movs	r3, #128	@ 0x80
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4814      	ldr	r0, [pc, #80]	@ (800086c <MX_GPIO_Init+0x1fc>)
 800081a:	f002 fd01 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800081e:	2310      	movs	r3, #16
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_GPIO_Init+0x200>)
 8000836:	f002 fcf3 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800083a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084c:	230b      	movs	r3, #11
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_GPIO_Init+0x1fc>)
 8000858:	f002 fce2 	bl	8003220 <HAL_GPIO_Init>

}
 800085c:	bf00      	nop
 800085e:	3730      	adds	r7, #48	@ 0x30
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400
 800086c:	40021800 	.word	0x40021800
 8000870:	40020c00 	.word	0x40020c00
 8000874:	40020800 	.word	0x40020800
 8000878:	40020000 	.word	0x40020000

0800087c <pid_init>:
	float Kd;
	int anti_windup_limit;
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6178      	str	r0, [r7, #20]
 8000884:	ed87 0a04 	vstr	s0, [r7, #16]
 8000888:	edc7 0a03 	vstr	s1, [r7, #12]
 800088c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000890:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	615a      	str	r2, [r3, #20]
}
 80008b6:	bf00      	nop
 80008b8:	371c      	adds	r7, #28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <pid_reset>:

void pid_reset(PID *pid_data)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b089      	sub	sp, #36	@ 0x24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	441a      	add	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	ed93 7a02 	vldr	s14, [r3, #8]
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000930:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	ed93 7a04 	vldr	s14, [r3, #16]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800094a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800094e:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	db08      	blt.n	800097e <pid_calculate+0x9c>
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000978:	edc7 7a07 	vstr	s15, [r7, #28]
 800097c:	e016      	b.n	80009ac <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	425b      	negs	r3, r3
 8000984:	ee07 3a90 	vmov	s15, r3
 8000988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000998:	d808      	bhi.n	80009ac <pid_calculate+0xca>
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	425b      	negs	r3, r3
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a8:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 80009b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80009b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80009ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009be:	edd7 7a04 	vldr	s15, [r7, #16]
 80009c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ca:	ee17 3a90 	vmov	r3, s15
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	@ 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <Init_Motor>:

MOTOR motorA;
MOTOR motorB;

void Init_Motor(MOTOR *m, TIM_HandleTypeDef *enc, uint32_t axis, TIM_HandleTypeDef* front, TIM_HandleTypeDef* back)
{
 80009da:	b480      	push	{r7}
 80009dc:	b085      	sub	sp, #20
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	603b      	str	r3, [r7, #0]
	m->encoder = enc;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	601a      	str	r2, [r3, #0]
	m->axisTimer = axis;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	60da      	str	r2, [r3, #12]
	m->motorBack = back;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	605a      	str	r2, [r3, #4]
	m->motorFront = front;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	609a      	str	r2, [r3, #8]

	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000a06:	825a      	strh	r2, [r3, #18]

	m->pulse_count = 0;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
	m->measured_speed = 0;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
	m->set_speed = 0;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
    m->actual_PWM = 0;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 f849 	bl	8000acc <motor_update_count>

	m->measured_speed = abs((m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000a42:	fb02 f303 	mul.w	r3, r2, r3
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	8a52      	ldrh	r2, [r2, #18]
 8000a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a4e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a52:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	619a      	str	r2, [r3, #24]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	69d9      	ldr	r1, [r3, #28]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	f7ff ff3a 	bl	80008e2 <pid_calculate>
 8000a6e:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a1a      	ldr	r2, [r3, #32]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	441a      	add	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	621a      	str	r2, [r3, #32]

	if(m->actual_PWM >= 0)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db05      	blt.n	8000a90 <motor_calculate_speed+0x64>
	{
		SetMotorSpeed(m, m->actual_PWM);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a1b      	ldr	r3, [r3, #32]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f8c9 	bl	8000c22 <SetMotorSpeed>

	}

}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <ResetMotor>:

void ResetMotor(MOTOR *m) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	m->set_speed = 0;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->encoder);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(m->encoder, 0);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <motor_set_speed>:
enum DIRECTION {
	DEFAULT, FRONT, BACK
};

void motor_set_speed(MOTOR *m, short direction, int set_speed)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	460b      	mov	r3, r1
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	817b      	strh	r3, [r7, #10]
	if(set_speed != m->set_speed)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d004      	beq.n	8000b1c <motor_set_speed+0x22>
		pid_reset(&(m->pid_controller));
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3324      	adds	r3, #36	@ 0x24
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fed3 	bl	80008c2 <pid_reset>

	m->set_speed = set_speed;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	61da      	str	r2, [r3, #28]
	m->direction = direction;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	897a      	ldrh	r2, [r7, #10]
 8000b26:	821a      	strh	r2, [r3, #16]
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <MotorABS>:

void MotorABS(MOTOR* m) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	ResetMotor(m);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ffad 	bl	8000a98 <ResetMotor>
	__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d105      	bne.n	8000b52 <MotorABS+0x22>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b50:	e02c      	b.n	8000bac <MotorABS+0x7c>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d105      	bne.n	8000b66 <MotorABS+0x36>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b64:	e022      	b.n	8000bac <MotorABS+0x7c>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d105      	bne.n	8000b7a <MotorABS+0x4a>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2300      	movs	r3, #0
 8000b76:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b78:	e018      	b.n	8000bac <MotorABS+0x7c>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	2b0c      	cmp	r3, #12
 8000b80:	d105      	bne.n	8000b8e <MotorABS+0x5e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8c:	e00e      	b.n	8000bac <MotorABS+0x7c>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	2b10      	cmp	r3, #16
 8000b94:	d105      	bne.n	8000ba2 <MotorABS+0x72>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba0:	e004      	b.n	8000bac <MotorABS+0x7c>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d105      	bne.n	8000bc0 <MotorABS+0x90>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000bbe:	e02c      	b.n	8000c1a <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d105      	bne.n	8000bd4 <MotorABS+0xa4>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000bd2:	e022      	b.n	8000c1a <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	2b08      	cmp	r3, #8
 8000bda:	d105      	bne.n	8000be8 <MotorABS+0xb8>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	2300      	movs	r3, #0
 8000be4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000be6:	e018      	b.n	8000c1a <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2b0c      	cmp	r3, #12
 8000bee:	d105      	bne.n	8000bfc <MotorABS+0xcc>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bfa:	e00e      	b.n	8000c1a <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	2b10      	cmp	r3, #16
 8000c02:	d105      	bne.n	8000c10 <MotorABS+0xe0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000c0e:	e004      	b.n	8000c1a <MotorABS+0xea>
	__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	2300      	movs	r3, #0
 8000c18:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <SetMotorSpeed>:

void SetMotorSpeed(MOTOR* m, uint16_t speed)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
	switch (m->direction) {
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	f000 810b 	beq.w	8000e50 <SetMotorSpeed+0x22e>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	f300 8183 	bgt.w	8000f46 <SetMotorSpeed+0x324>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <SetMotorSpeed+0x2a>
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	f000 8088 	beq.w	8000d5a <SetMotorSpeed+0x138>
		break;
	}


	//__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, speed);
}
 8000c4a:	e17c      	b.n	8000f46 <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000c4c:	887a      	ldrh	r2, [r7, #2]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d304      	bcc.n	8000c64 <SetMotorSpeed+0x42>
			speed = m->motorFront->Instance->ARR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c62:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d105      	bne.n	8000c78 <SetMotorSpeed+0x56>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c76:	e02c      	b.n	8000cd2 <SetMotorSpeed+0xb0>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d105      	bne.n	8000c8c <SetMotorSpeed+0x6a>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c8a:	e022      	b.n	8000cd2 <SetMotorSpeed+0xb0>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	2b08      	cmp	r3, #8
 8000c92:	d105      	bne.n	8000ca0 <SetMotorSpeed+0x7e>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c9e:	e018      	b.n	8000cd2 <SetMotorSpeed+0xb0>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	2b0c      	cmp	r3, #12
 8000ca6:	d105      	bne.n	8000cb4 <SetMotorSpeed+0x92>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb2:	e00e      	b.n	8000cd2 <SetMotorSpeed+0xb0>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	d105      	bne.n	8000cc8 <SetMotorSpeed+0xa6>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc6:	e004      	b.n	8000cd2 <SetMotorSpeed+0xb0>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	65d3      	str	r3, [r2, #92]	@ 0x5c
		if(speed >= m->motorBack->Instance->ARR)
 8000cd2:	887a      	ldrh	r2, [r7, #2]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d304      	bcc.n	8000cea <SetMotorSpeed+0xc8>
			speed = m->motorBack->Instance->ARR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce8:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d105      	bne.n	8000cfe <SetMotorSpeed+0xdc>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	887a      	ldrh	r2, [r7, #2]
 8000cfa:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000cfc:	e123      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d105      	bne.n	8000d12 <SetMotorSpeed+0xf0>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000d10:	e119      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d105      	bne.n	8000d26 <SetMotorSpeed+0x104>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000d24:	e10f      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b0c      	cmp	r3, #12
 8000d2c:	d105      	bne.n	8000d3a <SetMotorSpeed+0x118>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000d38:	e105      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	2b10      	cmp	r3, #16
 8000d40:	d105      	bne.n	8000d4e <SetMotorSpeed+0x12c>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000d4c:	e0fb      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000d58:	e0f5      	b.n	8000f46 <SetMotorSpeed+0x324>
		if(speed >= m->motorFront->Instance->ARR)
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d304      	bcc.n	8000d72 <SetMotorSpeed+0x150>
			speed = m->motorFront->Instance->ARR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d70:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, speed);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d105      	bne.n	8000d86 <SetMotorSpeed+0x164>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	887a      	ldrh	r2, [r7, #2]
 8000d82:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d84:	e02c      	b.n	8000de0 <SetMotorSpeed+0x1be>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d105      	bne.n	8000d9a <SetMotorSpeed+0x178>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d98:	e022      	b.n	8000de0 <SetMotorSpeed+0x1be>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d105      	bne.n	8000dae <SetMotorSpeed+0x18c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000dac:	e018      	b.n	8000de0 <SetMotorSpeed+0x1be>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	2b0c      	cmp	r3, #12
 8000db4:	d105      	bne.n	8000dc2 <SetMotorSpeed+0x1a0>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	887b      	ldrh	r3, [r7, #2]
 8000dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc0:	e00e      	b.n	8000de0 <SetMotorSpeed+0x1be>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	2b10      	cmp	r3, #16
 8000dc8:	d105      	bne.n	8000dd6 <SetMotorSpeed+0x1b4>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd4:	e004      	b.n	8000de0 <SetMotorSpeed+0x1be>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d105      	bne.n	8000df4 <SetMotorSpeed+0x1d2>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2200      	movs	r2, #0
 8000df0:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000df2:	e0a8      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d105      	bne.n	8000e08 <SetMotorSpeed+0x1e6>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000e06:	e09e      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d105      	bne.n	8000e1c <SetMotorSpeed+0x1fa>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	2300      	movs	r3, #0
 8000e18:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000e1a:	e094      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b0c      	cmp	r3, #12
 8000e22:	d105      	bne.n	8000e30 <SetMotorSpeed+0x20e>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000e2e:	e08a      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	d105      	bne.n	8000e44 <SetMotorSpeed+0x222>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000e42:	e080      	b.n	8000f46 <SetMotorSpeed+0x324>
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, 0);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000e4e:	e07a      	b.n	8000f46 <SetMotorSpeed+0x324>
		if(speed >= m->motorBack->Instance->ARR)
 8000e50:	887a      	ldrh	r2, [r7, #2]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d304      	bcc.n	8000e68 <SetMotorSpeed+0x246>
			speed = m->motorBack->Instance->ARR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e66:	807b      	strh	r3, [r7, #2]
		__HAL_TIM_SetCompare(m->motorBack, m->axisTimer, speed);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <SetMotorSpeed+0x25a>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e7a:	e02c      	b.n	8000ed6 <SetMotorSpeed+0x2b4>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d105      	bne.n	8000e90 <SetMotorSpeed+0x26e>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e8e:	e022      	b.n	8000ed6 <SetMotorSpeed+0x2b4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d105      	bne.n	8000ea4 <SetMotorSpeed+0x282>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ea2:	e018      	b.n	8000ed6 <SetMotorSpeed+0x2b4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	2b0c      	cmp	r3, #12
 8000eaa:	d105      	bne.n	8000eb8 <SetMotorSpeed+0x296>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb6:	e00e      	b.n	8000ed6 <SetMotorSpeed+0x2b4>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b10      	cmp	r3, #16
 8000ebe:	d105      	bne.n	8000ecc <SetMotorSpeed+0x2aa>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eca:	e004      	b.n	8000ed6 <SetMotorSpeed+0x2b4>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <SetMotorSpeed+0x2c8>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8000ee8:	e02c      	b.n	8000f44 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d105      	bne.n	8000efe <SetMotorSpeed+0x2dc>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000efc:	e022      	b.n	8000f44 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d105      	bne.n	8000f12 <SetMotorSpeed+0x2f0>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63d3      	str	r3, [r2, #60]	@ 0x3c
		break;
 8000f10:	e018      	b.n	8000f44 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	2b0c      	cmp	r3, #12
 8000f18:	d105      	bne.n	8000f26 <SetMotorSpeed+0x304>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2300      	movs	r3, #0
 8000f22:	6413      	str	r3, [r2, #64]	@ 0x40
		break;
 8000f24:	e00e      	b.n	8000f44 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b10      	cmp	r3, #16
 8000f2c:	d105      	bne.n	8000f3a <SetMotorSpeed+0x318>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	6593      	str	r3, [r2, #88]	@ 0x58
		break;
 8000f38:	e004      	b.n	8000f44 <SetMotorSpeed+0x322>
		__HAL_TIM_SetCompare(m->motorFront, m->axisTimer, 0);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	65d3      	str	r3, [r2, #92]	@ 0x5c
		break;
 8000f44:	bf00      	nop
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <Init_MotorSystem>:

void Init_MotorSystem()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af02      	add	r7, sp, #8
	Init_Motor(&motorA, &htim8, TIM_CHANNEL_1, &htim2, &htim5);
 8000f5a:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <Init_MotorSystem+0x60>)
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <Init_MotorSystem+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	4916      	ldr	r1, [pc, #88]	@ (8000fbc <Init_MotorSystem+0x68>)
 8000f64:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <Init_MotorSystem+0x6c>)
 8000f66:	f7ff fd38 	bl	80009da <Init_Motor>
	Init_Motor(&motorB, &htim3, TIM_CHANNEL_4, &htim2, &htim5);
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <Init_MotorSystem+0x60>)
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <Init_MotorSystem+0x64>)
 8000f70:	220c      	movs	r2, #12
 8000f72:	4914      	ldr	r1, [pc, #80]	@ (8000fc4 <Init_MotorSystem+0x70>)
 8000f74:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <Init_MotorSystem+0x74>)
 8000f76:	f7ff fd30 	bl	80009da <Init_Motor>
	//Init_Motor(&motorB, &htim4, TIM_CHANNEL_1, &htim2, &htim5);

	pid_init(&(motorA.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8000fcc <Init_MotorSystem+0x78>
 8000f80:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000fcc <Init_MotorSystem+0x78>
 8000f84:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000f88:	4811      	ldr	r0, [pc, #68]	@ (8000fd0 <Init_MotorSystem+0x7c>)
 8000f8a:	f7ff fc77 	bl	800087c <pid_init>
	pid_init(&(motorB.pid_controller), MOTOR_Kp, MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000fcc <Init_MotorSystem+0x78>
 8000f94:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000fcc <Init_MotorSystem+0x78>
 8000f98:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <Init_MotorSystem+0x80>)
 8000f9e:	f7ff fc6d 	bl	800087c <pid_init>

	MotorABS(&motorA);
 8000fa2:	4807      	ldr	r0, [pc, #28]	@ (8000fc0 <Init_MotorSystem+0x6c>)
 8000fa4:	f7ff fdc4 	bl	8000b30 <MotorABS>
	MotorABS(&motorB);
 8000fa8:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <Init_MotorSystem+0x74>)
 8000faa:	f7ff fdc1 	bl	8000b30 <MotorABS>
	//SetMotorSpeed(&motorB, 0);
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000027c 	.word	0x2000027c
 8000fb8:	20000198 	.word	0x20000198
 8000fbc:	20000314 	.word	0x20000314
 8000fc0:	200000c8 	.word	0x200000c8
 8000fc4:	200001e4 	.word	0x200001e4
 8000fc8:	20000104 	.word	0x20000104
 8000fcc:	3d4ccccd 	.word	0x3d4ccccd
 8000fd0:	200000ec 	.word	0x200000ec
 8000fd4:	20000128 	.word	0x20000128

08000fd8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d105      	bne.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		motor_calculate_speed(&motorA);
 8000fea:	4806      	ldr	r0, [pc, #24]	@ (8001004 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000fec:	f7ff fd1e 	bl	8000a2c <motor_calculate_speed>
		motor_calculate_speed(&motorB);
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ff2:	f7ff fd1b 	bl	8000a2c <motor_calculate_speed>
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40001000 	.word	0x40001000
 8001004:	200000c8 	.word	0x200000c8
 8001008:	20000104 	.word	0x20000104

0800100c <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d104      	bne.n	8001024 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 800101a:	2104      	movs	r1, #4
 800101c:	4812      	ldr	r0, [pc, #72]	@ (8001068 <Set_PWM_Frequency+0x5c>)
 800101e:	f003 ffc5 	bl	8004fac <HAL_TIM_PWM_Stop>
        return;
 8001022:	e01e      	b.n	8001062 <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <Set_PWM_Frequency+0x60>)
 8001026:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <Set_PWM_Frequency+0x5c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	3301      	adds	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	fb02 f303 	mul.w	r3, r2, r3
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	3b01      	subs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim12, period);
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <Set_PWM_Frequency+0x5c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	62da      	str	r2, [r3, #44]	@ 0x2c
 800104a:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <Set_PWM_Frequency+0x5c>)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2);
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <Set_PWM_Frequency+0x5c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	0852      	lsrs	r2, r2, #1
 8001058:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800105a:	2104      	movs	r1, #4
 800105c:	4802      	ldr	r0, [pc, #8]	@ (8001068 <Set_PWM_Frequency+0x5c>)
 800105e:	f003 feab 	bl	8004db8 <HAL_TIM_PWM_Start>
}
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000360 	.word	0x20000360
 800106c:	05b8d800 	.word	0x05b8d800

08001070 <ProcessCommand>:

int hornOn = 0;
int engineOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

			if (strcmp((char*)cmd, "INIT") == 0) {
 8001078:	49ba      	ldr	r1, [pc, #744]	@ (8001364 <ProcessCommand+0x2f4>)
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff f8e0 	bl	8000240 <strcmp>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <ProcessCommand+0x32>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001086:	2101      	movs	r1, #1
 8001088:	48b7      	ldr	r0, [pc, #732]	@ (8001368 <ProcessCommand+0x2f8>)
 800108a:	f002 fa8e 	bl	80035aa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800108e:	2180      	movs	r1, #128	@ 0x80
 8001090:	48b5      	ldr	r0, [pc, #724]	@ (8001368 <ProcessCommand+0x2f8>)
 8001092:	f002 fa8a 	bl	80035aa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001096:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800109a:	48b3      	ldr	r0, [pc, #716]	@ (8001368 <ProcessCommand+0x2f8>)
 800109c:	f002 fa85 	bl	80035aa <HAL_GPIO_TogglePin>
	    }

	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 80010a0:	e1d6      	b.n	8001450 <ProcessCommand+0x3e0>
			else if (strcmp((char*)cmd, "CMD0") == 0) {
 80010a2:	49b2      	ldr	r1, [pc, #712]	@ (800136c <ProcessCommand+0x2fc>)
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff f8cb 	bl	8000240 <strcmp>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d163      	bne.n	8001178 <ProcessCommand+0x108>
				if (!engineOn) {
 80010b0:	4baf      	ldr	r3, [pc, #700]	@ (8001370 <ProcessCommand+0x300>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d12a      	bne.n	800110e <ProcessCommand+0x9e>
					HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010b8:	213c      	movs	r1, #60	@ 0x3c
 80010ba:	48ae      	ldr	r0, [pc, #696]	@ (8001374 <ProcessCommand+0x304>)
 80010bc:	f004 f89c 	bl	80051f8 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80010c0:	213c      	movs	r1, #60	@ 0x3c
 80010c2:	48ad      	ldr	r0, [pc, #692]	@ (8001378 <ProcessCommand+0x308>)
 80010c4:	f004 f898 	bl	80051f8 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80010c8:	213c      	movs	r1, #60	@ 0x3c
 80010ca:	48ac      	ldr	r0, [pc, #688]	@ (800137c <ProcessCommand+0x30c>)
 80010cc:	f004 f894 	bl	80051f8 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80010d0:	213c      	movs	r1, #60	@ 0x3c
 80010d2:	48ab      	ldr	r0, [pc, #684]	@ (8001380 <ProcessCommand+0x310>)
 80010d4:	f004 f890 	bl	80051f8 <HAL_TIM_Encoder_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	48aa      	ldr	r0, [pc, #680]	@ (8001384 <ProcessCommand+0x314>)
 80010dc:	f003 fe6c 	bl	8004db8 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80010e0:	210c      	movs	r1, #12
 80010e2:	48a8      	ldr	r0, [pc, #672]	@ (8001384 <ProcessCommand+0x314>)
 80010e4:	f003 fe68 	bl	8004db8 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	48a7      	ldr	r0, [pc, #668]	@ (8001388 <ProcessCommand+0x318>)
 80010ec:	f003 fe64 	bl	8004db8 <HAL_TIM_PWM_Start>
					HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80010f0:	210c      	movs	r1, #12
 80010f2:	48a5      	ldr	r0, [pc, #660]	@ (8001388 <ProcessCommand+0x318>)
 80010f4:	f003 fe60 	bl	8004db8 <HAL_TIM_PWM_Start>
					HAL_TIM_Base_Start_IT(&htim6);
 80010f8:	48a4      	ldr	r0, [pc, #656]	@ (800138c <ProcessCommand+0x31c>)
 80010fa:	f003 fd5f 	bl	8004bbc <HAL_TIM_Base_Start_IT>
					HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80010fe:	2104      	movs	r1, #4
 8001100:	48a3      	ldr	r0, [pc, #652]	@ (8001390 <ProcessCommand+0x320>)
 8001102:	f003 fe59 	bl	8004db8 <HAL_TIM_PWM_Start>
					engineOn = 1;
 8001106:	4b9a      	ldr	r3, [pc, #616]	@ (8001370 <ProcessCommand+0x300>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e02c      	b.n	8001168 <ProcessCommand+0xf8>
				ResetMotor(&motorA);
 800110e:	48a1      	ldr	r0, [pc, #644]	@ (8001394 <ProcessCommand+0x324>)
 8001110:	f7ff fcc2 	bl	8000a98 <ResetMotor>
				HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001114:	213c      	movs	r1, #60	@ 0x3c
 8001116:	4897      	ldr	r0, [pc, #604]	@ (8001374 <ProcessCommand+0x304>)
 8001118:	f004 f8fc 	bl	8005314 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 800111c:	213c      	movs	r1, #60	@ 0x3c
 800111e:	4896      	ldr	r0, [pc, #600]	@ (8001378 <ProcessCommand+0x308>)
 8001120:	f004 f8f8 	bl	8005314 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_ALL);
 8001124:	213c      	movs	r1, #60	@ 0x3c
 8001126:	4895      	ldr	r0, [pc, #596]	@ (800137c <ProcessCommand+0x30c>)
 8001128:	f004 f8f4 	bl	8005314 <HAL_TIM_Encoder_Stop>
				HAL_TIM_Encoder_Stop(&htim8, TIM_CHANNEL_ALL);
 800112c:	213c      	movs	r1, #60	@ 0x3c
 800112e:	4894      	ldr	r0, [pc, #592]	@ (8001380 <ProcessCommand+0x310>)
 8001130:	f004 f8f0 	bl	8005314 <HAL_TIM_Encoder_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001134:	2100      	movs	r1, #0
 8001136:	4893      	ldr	r0, [pc, #588]	@ (8001384 <ProcessCommand+0x314>)
 8001138:	f003 ff38 	bl	8004fac <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800113c:	210c      	movs	r1, #12
 800113e:	4891      	ldr	r0, [pc, #580]	@ (8001384 <ProcessCommand+0x314>)
 8001140:	f003 ff34 	bl	8004fac <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8001144:	2100      	movs	r1, #0
 8001146:	4890      	ldr	r0, [pc, #576]	@ (8001388 <ProcessCommand+0x318>)
 8001148:	f003 ff30 	bl	8004fac <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 800114c:	210c      	movs	r1, #12
 800114e:	488e      	ldr	r0, [pc, #568]	@ (8001388 <ProcessCommand+0x318>)
 8001150:	f003 ff2c 	bl	8004fac <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop_IT(&htim6);
 8001154:	488d      	ldr	r0, [pc, #564]	@ (800138c <ProcessCommand+0x31c>)
 8001156:	f003 fda9 	bl	8004cac <HAL_TIM_Base_Stop_IT>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 800115a:	2104      	movs	r1, #4
 800115c:	488c      	ldr	r0, [pc, #560]	@ (8001390 <ProcessCommand+0x320>)
 800115e:	f003 ff25 	bl	8004fac <HAL_TIM_PWM_Stop>
				engineOn = 0;
 8001162:	4b83      	ldr	r3, [pc, #524]	@ (8001370 <ProcessCommand+0x300>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"ENGINE RUNNING\r\n", 16, HAL_MAX_DELAY);
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	2210      	movs	r2, #16
 800116e:	498a      	ldr	r1, [pc, #552]	@ (8001398 <ProcessCommand+0x328>)
 8001170:	488a      	ldr	r0, [pc, #552]	@ (800139c <ProcessCommand+0x32c>)
 8001172:	f004 ffe3 	bl	800613c <HAL_UART_Transmit>
}
 8001176:	e16b      	b.n	8001450 <ProcessCommand+0x3e0>
		else if (strcmp((char*)cmd, "CMDA") == 0) {
 8001178:	4989      	ldr	r1, [pc, #548]	@ (80013a0 <ProcessCommand+0x330>)
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff f860 	bl	8000240 <strcmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10b      	bne.n	800119e <ProcessCommand+0x12e>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8001186:	2101      	movs	r1, #1
 8001188:	4886      	ldr	r0, [pc, #536]	@ (80013a4 <ProcessCommand+0x334>)
 800118a:	f002 fa0e 	bl	80035aa <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart3, (uint8_t*)"LIGHTS RUNNING\r\n", 16, HAL_MAX_DELAY);
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	2210      	movs	r2, #16
 8001194:	4984      	ldr	r1, [pc, #528]	@ (80013a8 <ProcessCommand+0x338>)
 8001196:	4881      	ldr	r0, [pc, #516]	@ (800139c <ProcessCommand+0x32c>)
 8001198:	f004 ffd0 	bl	800613c <HAL_UART_Transmit>
}
 800119c:	e158      	b.n	8001450 <ProcessCommand+0x3e0>
	    else if (strcmp((char*)cmd, "CMDB") == 0) {
 800119e:	4983      	ldr	r1, [pc, #524]	@ (80013ac <ProcessCommand+0x33c>)
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f84d 	bl	8000240 <strcmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d119      	bne.n	80011e0 <ProcessCommand+0x170>
	    	if (!hornOn) {
 80011ac:	4b80      	ldr	r3, [pc, #512]	@ (80013b0 <ProcessCommand+0x340>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d107      	bne.n	80011c4 <ProcessCommand+0x154>
		    	Set_PWM_Frequency(1000);
 80011b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b8:	f7ff ff28 	bl	800100c <Set_PWM_Frequency>
		    	hornOn = 1;
 80011bc:	4b7c      	ldr	r3, [pc, #496]	@ (80013b0 <ProcessCommand+0x340>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e005      	b.n	80011d0 <ProcessCommand+0x160>
	    		Set_PWM_Frequency(0);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff21 	bl	800100c <Set_PWM_Frequency>
	    		hornOn = 0;
 80011ca:	4b79      	ldr	r3, [pc, #484]	@ (80013b0 <ProcessCommand+0x340>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)"HORN RUNNING\r\n", 14, HAL_MAX_DELAY);
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	220e      	movs	r2, #14
 80011d6:	4977      	ldr	r1, [pc, #476]	@ (80013b4 <ProcessCommand+0x344>)
 80011d8:	4870      	ldr	r0, [pc, #448]	@ (800139c <ProcessCommand+0x32c>)
 80011da:	f004 ffaf 	bl	800613c <HAL_UART_Transmit>
}
 80011de:	e137      	b.n	8001450 <ProcessCommand+0x3e0>
	    else if (strcmp((char*)cmd, "CMDC") == 0) {
 80011e0:	4975      	ldr	r1, [pc, #468]	@ (80013b8 <ProcessCommand+0x348>)
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff f82c 	bl	8000240 <strcmp>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <ProcessCommand+0x194>
	    	MotorABS(&motorA);
 80011ee:	4869      	ldr	r0, [pc, #420]	@ (8001394 <ProcessCommand+0x324>)
 80011f0:	f7ff fc9e 	bl	8000b30 <MotorABS>
			HAL_UART_Transmit(&huart3, (uint8_t*)"ABS!!!\r\n", 8, HAL_MAX_DELAY);
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	2208      	movs	r2, #8
 80011fa:	4970      	ldr	r1, [pc, #448]	@ (80013bc <ProcessCommand+0x34c>)
 80011fc:	4867      	ldr	r0, [pc, #412]	@ (800139c <ProcessCommand+0x32c>)
 80011fe:	f004 ff9d 	bl	800613c <HAL_UART_Transmit>
}
 8001202:	e125      	b.n	8001450 <ProcessCommand+0x3e0>
	    else if (strncmp((char*)cmd, "CMD", 3) == 0) {
 8001204:	2203      	movs	r2, #3
 8001206:	496e      	ldr	r1, [pc, #440]	@ (80013c0 <ProcessCommand+0x350>)
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f009 fd09 	bl	800ac20 <strncmp>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 8116 	bne.w	8001442 <ProcessCommand+0x3d2>
	        char* modeStr = (char*)cmd + 3;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3303      	adds	r3, #3
 800121a:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f009 fb8d 	bl	800a93c <atoi>
 8001222:	60b8      	str	r0, [r7, #8]
	        if (mode >= 1 && mode <= 9) {
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f340 8103 	ble.w	8001432 <ProcessCommand+0x3c2>
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b09      	cmp	r3, #9
 8001230:	f300 80ff 	bgt.w	8001432 <ProcessCommand+0x3c2>
	            switch (mode) {
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	3b01      	subs	r3, #1
 8001238:	2b08      	cmp	r3, #8
 800123a:	f200 80f7 	bhi.w	800142c <ProcessCommand+0x3bc>
 800123e:	a201      	add	r2, pc, #4	@ (adr r2, 8001244 <ProcessCommand+0x1d4>)
 8001240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001244:	08001269 	.word	0x08001269
 8001248:	0800128d 	.word	0x0800128d
 800124c:	080012b1 	.word	0x080012b1
 8001250:	080012d5 	.word	0x080012d5
 8001254:	080012f9 	.word	0x080012f9
 8001258:	0800131d 	.word	0x0800131d
 800125c:	08001341 	.word	0x08001341
 8001260:	080013e5 	.word	0x080013e5
 8001264:	08001409 	.word	0x08001409
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	2212      	movs	r2, #18
 800126e:	4955      	ldr	r1, [pc, #340]	@ (80013c4 <ProcessCommand+0x354>)
 8001270:	484a      	ldr	r0, [pc, #296]	@ (800139c <ProcessCommand+0x32c>)
 8001272:	f004 ff63 	bl	800613c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, DEFAULT, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	4846      	ldr	r0, [pc, #280]	@ (8001394 <ProcessCommand+0x324>)
 800127c:	f7ff fc3d 	bl	8000afa <motor_set_speed>
	                    motor_set_speed(&motorB, DEFAULT, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	4850      	ldr	r0, [pc, #320]	@ (80013c8 <ProcessCommand+0x358>)
 8001286:	f7ff fc38 	bl	8000afa <motor_set_speed>
	                    break;
 800128a:	e0d0      	b.n	800142e <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	2212      	movs	r2, #18
 8001292:	494e      	ldr	r1, [pc, #312]	@ (80013cc <ProcessCommand+0x35c>)
 8001294:	4841      	ldr	r0, [pc, #260]	@ (800139c <ProcessCommand+0x32c>)
 8001296:	f004 ff51 	bl	800613c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 93);
 800129a:	225d      	movs	r2, #93	@ 0x5d
 800129c:	2101      	movs	r1, #1
 800129e:	483d      	ldr	r0, [pc, #244]	@ (8001394 <ProcessCommand+0x324>)
 80012a0:	f7ff fc2b 	bl	8000afa <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 80012a4:	2264      	movs	r2, #100	@ 0x64
 80012a6:	2101      	movs	r1, #1
 80012a8:	4847      	ldr	r0, [pc, #284]	@ (80013c8 <ProcessCommand+0x358>)
 80012aa:	f7ff fc26 	bl	8000afa <motor_set_speed>
	                    break;
 80012ae:	e0be      	b.n	800142e <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	2212      	movs	r2, #18
 80012b6:	4946      	ldr	r1, [pc, #280]	@ (80013d0 <ProcessCommand+0x360>)
 80012b8:	4838      	ldr	r0, [pc, #224]	@ (800139c <ProcessCommand+0x32c>)
 80012ba:	f004 ff3f 	bl	800613c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 50);
 80012be:	2232      	movs	r2, #50	@ 0x32
 80012c0:	2101      	movs	r1, #1
 80012c2:	4834      	ldr	r0, [pc, #208]	@ (8001394 <ProcessCommand+0x324>)
 80012c4:	f7ff fc19 	bl	8000afa <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 80012c8:	2264      	movs	r2, #100	@ 0x64
 80012ca:	2101      	movs	r1, #1
 80012cc:	483e      	ldr	r0, [pc, #248]	@ (80013c8 <ProcessCommand+0x358>)
 80012ce:	f7ff fc14 	bl	8000afa <motor_set_speed>
	                    break;
 80012d2:	e0ac      	b.n	800142e <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	2212      	movs	r2, #18
 80012da:	493e      	ldr	r1, [pc, #248]	@ (80013d4 <ProcessCommand+0x364>)
 80012dc:	482f      	ldr	r0, [pc, #188]	@ (800139c <ProcessCommand+0x32c>)
 80012de:	f004 ff2d 	bl	800613c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 80012e2:	2264      	movs	r2, #100	@ 0x64
 80012e4:	2102      	movs	r1, #2
 80012e6:	482b      	ldr	r0, [pc, #172]	@ (8001394 <ProcessCommand+0x324>)
 80012e8:	f7ff fc07 	bl	8000afa <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 100);
 80012ec:	2264      	movs	r2, #100	@ 0x64
 80012ee:	2101      	movs	r1, #1
 80012f0:	4835      	ldr	r0, [pc, #212]	@ (80013c8 <ProcessCommand+0x358>)
 80012f2:	f7ff fc02 	bl	8000afa <motor_set_speed>
	                    break;
 80012f6:	e09a      	b.n	800142e <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	2212      	movs	r2, #18
 80012fe:	4936      	ldr	r1, [pc, #216]	@ (80013d8 <ProcessCommand+0x368>)
 8001300:	4826      	ldr	r0, [pc, #152]	@ (800139c <ProcessCommand+0x32c>)
 8001302:	f004 ff1b 	bl	800613c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 50);
 8001306:	2232      	movs	r2, #50	@ 0x32
 8001308:	2102      	movs	r1, #2
 800130a:	4822      	ldr	r0, [pc, #136]	@ (8001394 <ProcessCommand+0x324>)
 800130c:	f7ff fbf5 	bl	8000afa <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 8001310:	2264      	movs	r2, #100	@ 0x64
 8001312:	2102      	movs	r1, #2
 8001314:	482c      	ldr	r0, [pc, #176]	@ (80013c8 <ProcessCommand+0x358>)
 8001316:	f7ff fbf0 	bl	8000afa <motor_set_speed>
	                    break;
 800131a:	e088      	b.n	800142e <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	2212      	movs	r2, #18
 8001322:	492e      	ldr	r1, [pc, #184]	@ (80013dc <ProcessCommand+0x36c>)
 8001324:	481d      	ldr	r0, [pc, #116]	@ (800139c <ProcessCommand+0x32c>)
 8001326:	f004 ff09 	bl	800613c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 800132a:	2264      	movs	r2, #100	@ 0x64
 800132c:	2102      	movs	r1, #2
 800132e:	4819      	ldr	r0, [pc, #100]	@ (8001394 <ProcessCommand+0x324>)
 8001330:	f7ff fbe3 	bl	8000afa <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 8001334:	2264      	movs	r2, #100	@ 0x64
 8001336:	2102      	movs	r1, #2
 8001338:	4823      	ldr	r0, [pc, #140]	@ (80013c8 <ProcessCommand+0x358>)
 800133a:	f7ff fbde 	bl	8000afa <motor_set_speed>
	                    break;
 800133e:	e076      	b.n	800142e <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	2212      	movs	r2, #18
 8001346:	4926      	ldr	r1, [pc, #152]	@ (80013e0 <ProcessCommand+0x370>)
 8001348:	4814      	ldr	r0, [pc, #80]	@ (800139c <ProcessCommand+0x32c>)
 800134a:	f004 fef7 	bl	800613c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, BACK, 100);
 800134e:	2264      	movs	r2, #100	@ 0x64
 8001350:	2102      	movs	r1, #2
 8001352:	4810      	ldr	r0, [pc, #64]	@ (8001394 <ProcessCommand+0x324>)
 8001354:	f7ff fbd1 	bl	8000afa <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 50);
 8001358:	2232      	movs	r2, #50	@ 0x32
 800135a:	2102      	movs	r1, #2
 800135c:	481a      	ldr	r0, [pc, #104]	@ (80013c8 <ProcessCommand+0x358>)
 800135e:	f7ff fbcc 	bl	8000afa <motor_set_speed>
	                    break;
 8001362:	e064      	b.n	800142e <ProcessCommand+0x3be>
 8001364:	0800b418 	.word	0x0800b418
 8001368:	40020400 	.word	0x40020400
 800136c:	0800b420 	.word	0x0800b420
 8001370:	20000144 	.word	0x20000144
 8001374:	2000014c 	.word	0x2000014c
 8001378:	200001e4 	.word	0x200001e4
 800137c:	20000230 	.word	0x20000230
 8001380:	20000314 	.word	0x20000314
 8001384:	20000198 	.word	0x20000198
 8001388:	2000027c 	.word	0x2000027c
 800138c:	200002c8 	.word	0x200002c8
 8001390:	20000360 	.word	0x20000360
 8001394:	200000c8 	.word	0x200000c8
 8001398:	0800b428 	.word	0x0800b428
 800139c:	20000434 	.word	0x20000434
 80013a0:	0800b43c 	.word	0x0800b43c
 80013a4:	40021800 	.word	0x40021800
 80013a8:	0800b444 	.word	0x0800b444
 80013ac:	0800b458 	.word	0x0800b458
 80013b0:	20000140 	.word	0x20000140
 80013b4:	0800b460 	.word	0x0800b460
 80013b8:	0800b470 	.word	0x0800b470
 80013bc:	0800b478 	.word	0x0800b478
 80013c0:	0800b484 	.word	0x0800b484
 80013c4:	0800b488 	.word	0x0800b488
 80013c8:	20000104 	.word	0x20000104
 80013cc:	0800b49c 	.word	0x0800b49c
 80013d0:	0800b4b0 	.word	0x0800b4b0
 80013d4:	0800b4c4 	.word	0x0800b4c4
 80013d8:	0800b4d8 	.word	0x0800b4d8
 80013dc:	0800b4ec 	.word	0x0800b4ec
 80013e0:	0800b500 	.word	0x0800b500
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	2212      	movs	r2, #18
 80013ea:	491b      	ldr	r1, [pc, #108]	@ (8001458 <ProcessCommand+0x3e8>)
 80013ec:	481b      	ldr	r0, [pc, #108]	@ (800145c <ProcessCommand+0x3ec>)
 80013ee:	f004 fea5 	bl	800613c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 80013f2:	2264      	movs	r2, #100	@ 0x64
 80013f4:	2101      	movs	r1, #1
 80013f6:	481a      	ldr	r0, [pc, #104]	@ (8001460 <ProcessCommand+0x3f0>)
 80013f8:	f7ff fb7f 	bl	8000afa <motor_set_speed>
	                    motor_set_speed(&motorB, BACK, 100);
 80013fc:	2264      	movs	r2, #100	@ 0x64
 80013fe:	2102      	movs	r1, #2
 8001400:	4818      	ldr	r0, [pc, #96]	@ (8001464 <ProcessCommand+0x3f4>)
 8001402:	f7ff fb7a 	bl	8000afa <motor_set_speed>
	                    break;
 8001406:	e012      	b.n	800142e <ProcessCommand+0x3be>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	2212      	movs	r2, #18
 800140e:	4916      	ldr	r1, [pc, #88]	@ (8001468 <ProcessCommand+0x3f8>)
 8001410:	4812      	ldr	r0, [pc, #72]	@ (800145c <ProcessCommand+0x3ec>)
 8001412:	f004 fe93 	bl	800613c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, FRONT, 100);
 8001416:	2264      	movs	r2, #100	@ 0x64
 8001418:	2101      	movs	r1, #1
 800141a:	4811      	ldr	r0, [pc, #68]	@ (8001460 <ProcessCommand+0x3f0>)
 800141c:	f7ff fb6d 	bl	8000afa <motor_set_speed>
	                    motor_set_speed(&motorB, FRONT, 50);
 8001420:	2232      	movs	r2, #50	@ 0x32
 8001422:	2101      	movs	r1, #1
 8001424:	480f      	ldr	r0, [pc, #60]	@ (8001464 <ProcessCommand+0x3f4>)
 8001426:	f7ff fb68 	bl	8000afa <motor_set_speed>
	                    break;
 800142a:	e000      	b.n	800142e <ProcessCommand+0x3be>
	                    break;
 800142c:	bf00      	nop
	            switch (mode) {
 800142e:	bf00      	nop
}
 8001430:	e00e      	b.n	8001450 <ProcessCommand+0x3e0>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	2215      	movs	r2, #21
 8001438:	490c      	ldr	r1, [pc, #48]	@ (800146c <ProcessCommand+0x3fc>)
 800143a:	4808      	ldr	r0, [pc, #32]	@ (800145c <ProcessCommand+0x3ec>)
 800143c:	f004 fe7e 	bl	800613c <HAL_UART_Transmit>
}
 8001440:	e006      	b.n	8001450 <ProcessCommand+0x3e0>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2211      	movs	r2, #17
 8001448:	4909      	ldr	r1, [pc, #36]	@ (8001470 <ProcessCommand+0x400>)
 800144a:	4804      	ldr	r0, [pc, #16]	@ (800145c <ProcessCommand+0x3ec>)
 800144c:	f004 fe76 	bl	800613c <HAL_UART_Transmit>
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	0800b514 	.word	0x0800b514
 800145c:	20000434 	.word	0x20000434
 8001460:	200000c8 	.word	0x200000c8
 8001464:	20000104 	.word	0x20000104
 8001468:	0800b528 	.word	0x0800b528
 800146c:	0800b53c 	.word	0x0800b53c
 8001470:	0800b554 	.word	0x0800b554

08001474 <ProcessHeartBeat>:

void ProcessHeartBeat(void* argument) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
    for (;;) {

    	if (!engineOn)
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <ProcessHeartBeat+0x48>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d019      	beq.n	80014b8 <ProcessHeartBeat+0x44>

    	char message[16];  // Bufor na wiadomość, np. "HB:123"
    	int length;

    	// Formatowanie wiadomości
    	length = snprintf(message, sizeof(message), "HB:%d/%d\r\n", motorA.measured_speed, motorB.measured_speed);
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <ProcessHeartBeat+0x4c>)
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <ProcessHeartBeat+0x50>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f107 000c 	add.w	r0, r7, #12
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4613      	mov	r3, r2
 8001494:	4a0c      	ldr	r2, [pc, #48]	@ (80014c8 <ProcessHeartBeat+0x54>)
 8001496:	2110      	movs	r1, #16
 8001498:	f009 fb86 	bl	800aba8 <sniprintf>
 800149c:	61f8      	str	r0, [r7, #28]

    	// Wysyłanie przez UART2
    	HAL_UART_Transmit(&huart2, (uint8_t*)message, length, HAL_MAX_DELAY);
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 010c 	add.w	r1, r7, #12
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	4808      	ldr	r0, [pc, #32]	@ (80014cc <ProcessHeartBeat+0x58>)
 80014ac:	f004 fe46 	bl	800613c <HAL_UART_Transmit>
        osDelay(100);
 80014b0:	2064      	movs	r0, #100	@ 0x64
 80014b2:	f006 fd57 	bl	8007f64 <osDelay>
 80014b6:	e7e1      	b.n	800147c <ProcessHeartBeat+0x8>
    		continue;
 80014b8:	bf00      	nop
    for (;;) {
 80014ba:	e7df      	b.n	800147c <ProcessHeartBeat+0x8>
 80014bc:	20000144 	.word	0x20000144
 80014c0:	200000c8 	.word	0x200000c8
 80014c4:	20000104 	.word	0x20000104
 80014c8:	0800b568 	.word	0x0800b568
 80014cc:	200003ac 	.word	0x200003ac

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d6:	f001 f994 	bl	8002802 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014da:	f000 f83f 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014de:	f7ff f8c7 	bl	8000670 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e2:	f7ff f88d 	bl	8000600 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80014e6:	f000 ff73 	bl	80023d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80014ea:	f001 f8b9 	bl	8002660 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80014ee:	f000 ff3f 	bl	8002370 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014f2:	f000 fa2b 	bl	800194c <MX_TIM1_Init>
  MX_TIM3_Init();
 80014f6:	f000 fae7 	bl	8001ac8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014fa:	f000 fb3b 	bl	8001b74 <MX_TIM4_Init>
  MX_TIM8_Init();
 80014fe:	f000 fc2d 	bl	8001d5c <MX_TIM8_Init>
  MX_TIM2_Init();
 8001502:	f000 fa7d 	bl	8001a00 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001506:	f000 fbf1 	bl	8001cec <MX_TIM6_Init>
  MX_TIM5_Init();
 800150a:	f000 fb89 	bl	8001c20 <MX_TIM5_Init>
  MX_TIM12_Init();
 800150e:	f000 fc7f 	bl	8001e10 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  const char *readyMsg = "STM32 ready to receive data from HC05...\r\n";
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <main+0x7c>)
 8001514:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7fe fe9c 	bl	8000254 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	480a      	ldr	r0, [pc, #40]	@ (8001550 <main+0x80>)
 8001528:	f004 fe08 	bl	800613c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	4909      	ldr	r1, [pc, #36]	@ (8001554 <main+0x84>)
 8001530:	4809      	ldr	r0, [pc, #36]	@ (8001558 <main+0x88>)
 8001532:	f004 fe8c 	bl	800624e <HAL_UART_Receive_IT>

  Init_MotorSystem();
 8001536:	f7ff fd0d 	bl	8000f54 <Init_MotorSystem>
  //Set_PWM_Frequency(1000); // BUZZER

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800153a:	f006 fc03 	bl	8007d44 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800153e:	f7ff f885 	bl	800064c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001542:	f006 fc33 	bl	8007dac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001546:	bf00      	nop
 8001548:	e7fd      	b.n	8001546 <main+0x76>
 800154a:	bf00      	nop
 800154c:	0800b574 	.word	0x0800b574
 8001550:	20000434 	.word	0x20000434
 8001554:	20000080 	.word	0x20000080
 8001558:	200003ac 	.word	0x200003ac

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	@ 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	2234      	movs	r2, #52	@ 0x34
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f009 fb50 	bl	800ac10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001580:	f002 f968 	bl	8003854 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	4b2c      	ldr	r3, [pc, #176]	@ (8001638 <SystemClock_Config+0xdc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	4a2b      	ldr	r2, [pc, #172]	@ (8001638 <SystemClock_Config+0xdc>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <SystemClock_Config+0xdc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800159c:	4b27      	ldr	r3, [pc, #156]	@ (800163c <SystemClock_Config+0xe0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015a4:	4a25      	ldr	r2, [pc, #148]	@ (800163c <SystemClock_Config+0xe0>)
 80015a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <SystemClock_Config+0xe0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80015c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80015d0:	2360      	movs	r3, #96	@ 0x60
 80015d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015d8:	2304      	movs	r3, #4
 80015da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015dc:	2302      	movs	r3, #2
 80015de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 f995 	bl	8003914 <HAL_RCC_OscConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015f0:	f000 f860 	bl	80016b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015f4:	f002 f93e 	bl	8003874 <HAL_PWREx_EnableOverDrive>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015fe:	f000 f859 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001606:	2302      	movs	r3, #2
 8001608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800160e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	2103      	movs	r1, #3
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fc26 	bl	8003e70 <HAL_RCC_ClockConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800162a:	f000 f843 	bl	80016b4 <Error_Handler>
  }
}
 800162e:	bf00      	nop
 8001630:	3750      	adds	r7, #80	@ 0x50
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000

08001640 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a13      	ldr	r2, [pc, #76]	@ (800169c <HAL_UART_RxCpltCallback+0x5c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d120      	bne.n	8001694 <HAL_UART_RxCpltCallback+0x54>
		HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	2201      	movs	r2, #1
 8001658:	4911      	ldr	r1, [pc, #68]	@ (80016a0 <HAL_UART_RxCpltCallback+0x60>)
 800165a:	4812      	ldr	r0, [pc, #72]	@ (80016a4 <HAL_UART_RxCpltCallback+0x64>)
 800165c:	f004 fd6e 	bl	800613c <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001660:	2201      	movs	r2, #1
 8001662:	490f      	ldr	r1, [pc, #60]	@ (80016a0 <HAL_UART_RxCpltCallback+0x60>)
 8001664:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <HAL_UART_RxCpltCallback+0x68>)
 8001666:	f004 fdf2 	bl	800624e <HAL_UART_Receive_IT>
		rxBuff[rxIdx++] = rxData[0];
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_UART_RxCpltCallback+0x6c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	b2d1      	uxtb	r1, r2
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <HAL_UART_RxCpltCallback+0x6c>)
 8001674:	7011      	strb	r1, [r2, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_UART_RxCpltCallback+0x60>)
 800167a:	7819      	ldrb	r1, [r3, #0]
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <HAL_UART_RxCpltCallback+0x70>)
 800167e:	5499      	strb	r1, [r3, r2]

		if (rxIdx == 4) {
 8001680:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_UART_RxCpltCallback+0x6c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b04      	cmp	r3, #4
 8001686:	d105      	bne.n	8001694 <HAL_UART_RxCpltCallback+0x54>
			//HAL_UART_Transmit(&huart3, rxBuff, rxIdx, HAL_MAX_DELAY);
			ProcessCommand(rxBuff);
 8001688:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <HAL_UART_RxCpltCallback+0x70>)
 800168a:	f7ff fcf1 	bl	8001070 <ProcessCommand>
			rxIdx = 0;
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <HAL_UART_RxCpltCallback+0x6c>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40004400 	.word	0x40004400
 80016a0:	20000080 	.word	0x20000080
 80016a4:	20000434 	.word	0x20000434
 80016a8:	200003ac 	.word	0x200003ac
 80016ac:	200000c4 	.word	0x200000c4
 80016b0:	20000084 	.word	0x20000084

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <Error_Handler+0x8>

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	4a10      	ldr	r2, [pc, #64]	@ (800170c <HAL_MspInit+0x4c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_MspInit+0x4c>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	210f      	movs	r1, #15
 80016fa:	f06f 0001 	mvn.w	r0, #1
 80016fe:	f001 f9dc 	bl	8002aba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <NMI_Handler+0x4>

08001718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <MemManage_Handler+0x4>

08001728 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <UsageFault_Handler+0x4>

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174a:	f001 f897 	bl	800287c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800174e:	f008 f883 	bl	8009858 <xTaskGetSchedulerState>
 8001752:	4603      	mov	r3, r0
 8001754:	2b01      	cmp	r3, #1
 8001756:	d001      	beq.n	800175c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001758:	f008 fe6e 	bl	800a438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <DMA1_Stream5_IRQHandler+0x10>)
 8001766:	f001 fb1f 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200004bc 	.word	0x200004bc

08001774 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <DMA1_Stream6_IRQHandler+0x10>)
 800177a:	f001 fb15 	bl	8002da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000051c 	.word	0x2000051c

08001788 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800178e:	f003 fe68 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000014c 	.word	0x2000014c

0800179c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017a2:	f003 fe5e 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000014c 	.word	0x2000014c

080017b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80017b6:	f003 fe54 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000014c 	.word	0x2000014c

080017c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <TIM1_CC_IRQHandler+0x10>)
 80017ca:	f003 fe4a 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000014c 	.word	0x2000014c

080017d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <TIM2_IRQHandler+0x10>)
 80017de:	f003 fe40 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000198 	.word	0x20000198

080017ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <TIM3_IRQHandler+0x10>)
 80017f2:	f003 fe36 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200001e4 	.word	0x200001e4

08001800 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <TIM4_IRQHandler+0x10>)
 8001806:	f003 fe2c 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000230 	.word	0x20000230

08001814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <USART2_IRQHandler+0x10>)
 800181a:	f004 fd5d 	bl	80062d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200003ac 	.word	0x200003ac

08001828 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <USART3_IRQHandler+0x10>)
 800182e:	f004 fd53 	bl	80062d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000434 	.word	0x20000434

0800183c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001840:	4803      	ldr	r0, [pc, #12]	@ (8001850 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8001842:	f003 fe0e 	bl	8005462 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8001846:	4803      	ldr	r0, [pc, #12]	@ (8001854 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8001848:	f003 fe0b 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000314 	.word	0x20000314
 8001854:	20000360 	.word	0x20000360

08001858 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800185e:	f003 fe00 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000314 	.word	0x20000314

0800186c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001872:	f003 fdf6 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000314 	.word	0x20000314

08001880 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <TIM8_CC_IRQHandler+0x10>)
 8001886:	f003 fdec 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000314 	.word	0x20000314

08001894 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <TIM5_IRQHandler+0x10>)
 800189a:	f003 fde2 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000027c 	.word	0x2000027c

080018a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <TIM6_DAC_IRQHandler+0x10>)
 80018ae:	f003 fdd8 	bl	8005462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200002c8 	.word	0x200002c8

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f009 f9ba 	bl	800ac64 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20080000 	.word	0x20080000
 800191c:	00000400 	.word	0x00000400
 8001920:	20000148 	.word	0x20000148
 8001924:	200054f0 	.word	0x200054f0

08001928 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <SystemInit+0x20>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001932:	4a05      	ldr	r2, [pc, #20]	@ (8001948 <SystemInit+0x20>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	@ 0x30
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2224      	movs	r2, #36	@ 0x24
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f009 f958 	bl	800ac10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	463b      	mov	r3, r7
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800196a:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <MX_TIM1_Init+0xac>)
 800196c:	4a23      	ldr	r2, [pc, #140]	@ (80019fc <MX_TIM1_Init+0xb0>)
 800196e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001970:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <MX_TIM1_Init+0xac>)
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <MX_TIM1_Init+0xac>)
 8001978:	2210      	movs	r2, #16
 800197a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800197c:	4b1e      	ldr	r3, [pc, #120]	@ (80019f8 <MX_TIM1_Init+0xac>)
 800197e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001982:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001984:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <MX_TIM1_Init+0xac>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <MX_TIM1_Init+0xac>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <MX_TIM1_Init+0xac>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001996:	2303      	movs	r3, #3
 8001998:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800199e:	2301      	movs	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80019a6:	230f      	movs	r3, #15
 80019a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ae:	2301      	movs	r3, #1
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80019b6:	230f      	movs	r3, #15
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <MX_TIM1_Init+0xac>)
 80019c2:	f003 fb73 	bl	80050ac <HAL_TIM_Encoder_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80019cc:	f7ff fe72 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_TIM1_Init+0xac>)
 80019e2:	f004 fab1 	bl	8005f48 <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80019ec:	f7ff fe62 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	@ 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2000014c 	.word	0x2000014c
 80019fc:	40010000 	.word	0x40010000

08001a00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a12:	463b      	mov	r3, r7
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001a26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001a2e:	222f      	movs	r2, #47	@ 0x2f
 8001a30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001a3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a4c:	481d      	ldr	r0, [pc, #116]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001a4e:	f003 f95c 	bl	8004d0a <HAL_TIM_PWM_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a58:	f7ff fe2c 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4816      	ldr	r0, [pc, #88]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001a6c:	f004 fa6c 	bl	8005f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a76:	f7ff fe1d 	bl	80016b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7a:	2360      	movs	r3, #96	@ 0x60
 8001a7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001a92:	f003 fded 	bl	8005670 <HAL_TIM_PWM_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001a9c:	f7ff fe0a 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4807      	ldr	r0, [pc, #28]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001aa8:	f003 fde2 	bl	8005670 <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001ab2:	f7ff fdff 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ab6:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <MX_TIM2_Init+0xc4>)
 8001ab8:	f000 fbbc 	bl	8002234 <HAL_TIM_MspPostInit>

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	@ 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000198 	.word	0x20000198

08001ac8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	@ 0x30
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	2224      	movs	r2, #36	@ 0x24
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f009 f89a 	bl	800ac10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	463b      	mov	r3, r7
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <MX_TIM3_Init+0xa4>)
 8001ae8:	4a21      	ldr	r2, [pc, #132]	@ (8001b70 <MX_TIM3_Init+0xa8>)
 8001aea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <MX_TIM3_Init+0xa4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <MX_TIM3_Init+0xa4>)
 8001af4:	2210      	movs	r2, #16
 8001af6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <MX_TIM3_Init+0xa4>)
 8001afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001afe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <MX_TIM3_Init+0xa4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <MX_TIM3_Init+0xa4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b14:	2301      	movs	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b24:	2301      	movs	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4619      	mov	r1, r3
 8001b36:	480d      	ldr	r0, [pc, #52]	@ (8001b6c <MX_TIM3_Init+0xa4>)
 8001b38:	f003 fab8 	bl	80050ac <HAL_TIM_Encoder_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b42:	f7ff fdb7 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	@ (8001b6c <MX_TIM3_Init+0xa4>)
 8001b54:	f004 f9f8 	bl	8005f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b5e:	f7ff fda9 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	3730      	adds	r7, #48	@ 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200001e4 	.word	0x200001e4
 8001b70:	40000400 	.word	0x40000400

08001b74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2224      	movs	r2, #36	@ 0x24
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f009 f844 	bl	800ac10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b92:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001b94:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <MX_TIM4_Init+0xa8>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001ba6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001bc8:	230f      	movs	r3, #15
 8001bca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001bd8:	230f      	movs	r3, #15
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	4619      	mov	r1, r3
 8001be2:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001be4:	f003 fa62 	bl	80050ac <HAL_TIM_Encoder_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001bee:	f7ff fd61 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4806      	ldr	r0, [pc, #24]	@ (8001c18 <MX_TIM4_Init+0xa4>)
 8001c00:	f004 f9a2 	bl	8005f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c0a:	f7ff fd53 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	3730      	adds	r7, #48	@ 0x30
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000230 	.word	0x20000230
 8001c1c:	40000800 	.word	0x40000800

08001c20 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c32:	463b      	mov	r3, r7
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c44:	4b27      	ldr	r3, [pc, #156]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001c46:	4a28      	ldr	r2, [pc, #160]	@ (8001ce8 <MX_TIM5_Init+0xc8>)
 8001c48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 8001c4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001c4c:	222f      	movs	r2, #47	@ 0x2f
 8001c4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c50:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001c56:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001c58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c6a:	481e      	ldr	r0, [pc, #120]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001c6c:	f003 f84d 	bl	8004d0a <HAL_TIM_PWM_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001c76:	f7ff fd1d 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	4816      	ldr	r0, [pc, #88]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001c8a:	f004 f95d 	bl	8005f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001c94:	f7ff fd0e 	bl	80016b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c98:	2360      	movs	r3, #96	@ 0x60
 8001c9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	2200      	movs	r2, #0
 8001cac:	4619      	mov	r1, r3
 8001cae:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001cb0:	f003 fcde 	bl	8005670 <HAL_TIM_PWM_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001cba:	f7ff fcfb 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001cc6:	f003 fcd3 	bl	8005670 <HAL_TIM_PWM_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001cd0:	f7ff fcf0 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001cd4:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <MX_TIM5_Init+0xc4>)
 8001cd6:	f000 faad 	bl	8002234 <HAL_TIM_MspPostInit>

}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	@ 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000027c 	.word	0x2000027c
 8001ce8:	40000c00 	.word	0x40000c00

08001cec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <MX_TIM6_Init+0x68>)
 8001cfe:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <MX_TIM6_Init+0x6c>)
 8001d00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <MX_TIM6_Init+0x68>)
 8001d04:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001d08:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <MX_TIM6_Init+0x68>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <MX_TIM6_Init+0x68>)
 8001d12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d16:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d18:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <MX_TIM6_Init+0x68>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d1e:	480d      	ldr	r0, [pc, #52]	@ (8001d54 <MX_TIM6_Init+0x68>)
 8001d20:	f002 fef4 	bl	8004b0c <HAL_TIM_Base_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d2a:	f7ff fcc3 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4806      	ldr	r0, [pc, #24]	@ (8001d54 <MX_TIM6_Init+0x68>)
 8001d3c:	f004 f904 	bl	8005f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001d46:	f7ff fcb5 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200002c8 	.word	0x200002c8
 8001d58:	40001000 	.word	0x40001000

08001d5c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	@ 0x30
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	2224      	movs	r2, #36	@ 0x24
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f008 ff50 	bl	800ac10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	463b      	mov	r3, r7
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d7a:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <MX_TIM8_Init+0xac>)
 8001d7c:	4a23      	ldr	r2, [pc, #140]	@ (8001e0c <MX_TIM8_Init+0xb0>)
 8001d7e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d80:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <MX_TIM8_Init+0xac>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001d86:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <MX_TIM8_Init+0xac>)
 8001d88:	2210      	movs	r2, #16
 8001d8a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <MX_TIM8_Init+0xac>)
 8001d8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d92:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <MX_TIM8_Init+0xac>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <MX_TIM8_Init+0xac>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <MX_TIM8_Init+0xac>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001da6:	2303      	movs	r3, #3
 8001da8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dae:	2301      	movs	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001db6:	230f      	movs	r3, #15
 8001db8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001dc6:	230f      	movs	r3, #15
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480d      	ldr	r0, [pc, #52]	@ (8001e08 <MX_TIM8_Init+0xac>)
 8001dd2:	f003 f96b 	bl	80050ac <HAL_TIM_Encoder_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001ddc:	f7ff fc6a 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dec:	463b      	mov	r3, r7
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_TIM8_Init+0xac>)
 8001df2:	f004 f8a9 	bl	8005f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001dfc:	f7ff fc5a 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3730      	adds	r7, #48	@ 0x30
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000314 	.word	0x20000314
 8001e0c:	40010400 	.word	0x40010400

08001e10 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	615a      	str	r2, [r3, #20]
 8001e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <MX_TIM12_Init+0x84>)
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <MX_TIM12_Init+0x88>)
 8001e2c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <MX_TIM12_Init+0x84>)
 8001e30:	225f      	movs	r2, #95	@ 0x5f
 8001e32:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <MX_TIM12_Init+0x84>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <MX_TIM12_Init+0x84>)
 8001e3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e40:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e42:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <MX_TIM12_Init+0x84>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <MX_TIM12_Init+0x84>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e4e:	4811      	ldr	r0, [pc, #68]	@ (8001e94 <MX_TIM12_Init+0x84>)
 8001e50:	f002 ff5b 	bl	8004d0a <HAL_TIM_PWM_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001e5a:	f7ff fc2b 	bl	80016b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5e:	2360      	movs	r3, #96	@ 0x60
 8001e60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2204      	movs	r2, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <MX_TIM12_Init+0x84>)
 8001e76:	f003 fbfb 	bl	8005670 <HAL_TIM_PWM_ConfigChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001e80:	f7ff fc18 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e84:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <MX_TIM12_Init+0x84>)
 8001e86:	f000 f9d5 	bl	8002234 <HAL_TIM_MspPostInit>

}
 8001e8a:	bf00      	nop
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000360 	.word	0x20000360
 8001e98:	40001800 	.word	0x40001800

08001e9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b090      	sub	sp, #64	@ 0x40
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a93      	ldr	r2, [pc, #588]	@ (8002108 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d149      	bne.n	8001f52 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ebe:	4b93      	ldr	r3, [pc, #588]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	4a92      	ldr	r2, [pc, #584]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eca:	4b90      	ldr	r3, [pc, #576]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed6:	4b8d      	ldr	r3, [pc, #564]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a8c      	ldr	r2, [pc, #560]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001edc:	f043 0310 	orr.w	r3, r3, #16
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b8a      	ldr	r3, [pc, #552]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 8001eee:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4881      	ldr	r0, [pc, #516]	@ (8002110 <HAL_TIM_Encoder_MspInit+0x274>)
 8001f0c:	f001 f988 	bl	8003220 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2105      	movs	r1, #5
 8001f14:	2018      	movs	r0, #24
 8001f16:	f000 fdd0 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f1a:	2018      	movs	r0, #24
 8001f1c:	f000 fde9 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2105      	movs	r1, #5
 8001f24:	2019      	movs	r0, #25
 8001f26:	f000 fdc8 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f2a:	2019      	movs	r0, #25
 8001f2c:	f000 fde1 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2105      	movs	r1, #5
 8001f34:	201a      	movs	r0, #26
 8001f36:	f000 fdc0 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f3a:	201a      	movs	r0, #26
 8001f3c:	f000 fdd9 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2105      	movs	r1, #5
 8001f44:	201b      	movs	r0, #27
 8001f46:	f000 fdb8 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f4a:	201b      	movs	r0, #27
 8001f4c:	f000 fdd1 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f50:	e0d5      	b.n	80020fe <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a6f      	ldr	r2, [pc, #444]	@ (8002114 <HAL_TIM_Encoder_MspInit+0x278>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d14c      	bne.n	8001ff6 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f5c:	4b6b      	ldr	r3, [pc, #428]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	4a6a      	ldr	r2, [pc, #424]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f68:	4b68      	ldr	r3, [pc, #416]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	623b      	str	r3, [r7, #32]
 8001f72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	4b65      	ldr	r3, [pc, #404]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	4a64      	ldr	r2, [pc, #400]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f80:	4b62      	ldr	r3, [pc, #392]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8c:	4b5f      	ldr	r3, [pc, #380]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	4a5e      	ldr	r2, [pc, #376]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f98:	4b5c      	ldr	r3, [pc, #368]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8001fa4:	2340      	movs	r3, #64	@ 0x40
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4856      	ldr	r0, [pc, #344]	@ (8002118 <HAL_TIM_Encoder_MspInit+0x27c>)
 8001fc0:	f001 f92e 	bl	8003220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fdc:	4619      	mov	r1, r3
 8001fde:	484f      	ldr	r0, [pc, #316]	@ (800211c <HAL_TIM_Encoder_MspInit+0x280>)
 8001fe0:	f001 f91e 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2105      	movs	r1, #5
 8001fe8:	201d      	movs	r0, #29
 8001fea:	f000 fd66 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fee:	201d      	movs	r0, #29
 8001ff0:	f000 fd7f 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 8001ff4:	e083      	b.n	80020fe <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a49      	ldr	r2, [pc, #292]	@ (8002120 <HAL_TIM_Encoder_MspInit+0x284>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d131      	bne.n	8002064 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002000:	4b42      	ldr	r3, [pc, #264]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	4a41      	ldr	r2, [pc, #260]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6413      	str	r3, [r2, #64]	@ 0x40
 800200c:	4b3f      	ldr	r3, [pc, #252]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002018:	4b3c      	ldr	r3, [pc, #240]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	4a3b      	ldr	r2, [pc, #236]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	6313      	str	r3, [r2, #48]	@ 0x30
 8002024:	4b39      	ldr	r3, [pc, #228]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8002030:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002042:	2302      	movs	r3, #2
 8002044:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002046:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800204a:	4619      	mov	r1, r3
 800204c:	4835      	ldr	r0, [pc, #212]	@ (8002124 <HAL_TIM_Encoder_MspInit+0x288>)
 800204e:	f001 f8e7 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2105      	movs	r1, #5
 8002056:	201e      	movs	r0, #30
 8002058:	f000 fd2f 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800205c:	201e      	movs	r0, #30
 800205e:	f000 fd48 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 8002062:	e04c      	b.n	80020fe <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2f      	ldr	r2, [pc, #188]	@ (8002128 <HAL_TIM_Encoder_MspInit+0x28c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d147      	bne.n	80020fe <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800206e:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	4a26      	ldr	r2, [pc, #152]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6453      	str	r3, [r2, #68]	@ 0x44
 800207a:	4b24      	ldr	r3, [pc, #144]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a20      	ldr	r2, [pc, #128]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4b1e      	ldr	r3, [pc, #120]	@ (800210c <HAL_TIM_Encoder_MspInit+0x270>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 800209e:	23c0      	movs	r3, #192	@ 0xc0
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80020ae:	2303      	movs	r3, #3
 80020b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b6:	4619      	mov	r1, r3
 80020b8:	481c      	ldr	r0, [pc, #112]	@ (800212c <HAL_TIM_Encoder_MspInit+0x290>)
 80020ba:	f001 f8b1 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2105      	movs	r1, #5
 80020c2:	202b      	movs	r0, #43	@ 0x2b
 80020c4:	f000 fcf9 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80020c8:	202b      	movs	r0, #43	@ 0x2b
 80020ca:	f000 fd12 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2105      	movs	r1, #5
 80020d2:	202c      	movs	r0, #44	@ 0x2c
 80020d4:	f000 fcf1 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80020d8:	202c      	movs	r0, #44	@ 0x2c
 80020da:	f000 fd0a 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2105      	movs	r1, #5
 80020e2:	202d      	movs	r0, #45	@ 0x2d
 80020e4:	f000 fce9 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80020e8:	202d      	movs	r0, #45	@ 0x2d
 80020ea:	f000 fd02 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2105      	movs	r1, #5
 80020f2:	202e      	movs	r0, #46	@ 0x2e
 80020f4:	f000 fce1 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80020f8:	202e      	movs	r0, #46	@ 0x2e
 80020fa:	f000 fcfa 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3740      	adds	r7, #64	@ 0x40
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40010000 	.word	0x40010000
 800210c:	40023800 	.word	0x40023800
 8002110:	40021000 	.word	0x40021000
 8002114:	40000400 	.word	0x40000400
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40000800 	.word	0x40000800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40010400 	.word	0x40010400
 800212c:	40020800 	.word	0x40020800

08002130 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002140:	d114      	bne.n	800216c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <HAL_TIM_PWM_MspInit+0xac>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	4a25      	ldr	r2, [pc, #148]	@ (80021dc <HAL_TIM_PWM_MspInit+0xac>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6413      	str	r3, [r2, #64]	@ 0x40
 800214e:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <HAL_TIM_PWM_MspInit+0xac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2105      	movs	r1, #5
 800215e:	201c      	movs	r0, #28
 8002160:	f000 fcab 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002164:	201c      	movs	r0, #28
 8002166:	f000 fcc4 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800216a:	e032      	b.n	80021d2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d114      	bne.n	80021a0 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002176:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <HAL_TIM_PWM_MspInit+0xac>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	4a18      	ldr	r2, [pc, #96]	@ (80021dc <HAL_TIM_PWM_MspInit+0xac>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6413      	str	r3, [r2, #64]	@ 0x40
 8002182:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <HAL_TIM_PWM_MspInit+0xac>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2105      	movs	r1, #5
 8002192:	2032      	movs	r0, #50	@ 0x32
 8002194:	f000 fc91 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002198:	2032      	movs	r0, #50	@ 0x32
 800219a:	f000 fcaa 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 800219e:	e018      	b.n	80021d2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0f      	ldr	r2, [pc, #60]	@ (80021e4 <HAL_TIM_PWM_MspInit+0xb4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d113      	bne.n	80021d2 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <HAL_TIM_PWM_MspInit+0xac>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a0b      	ldr	r2, [pc, #44]	@ (80021dc <HAL_TIM_PWM_MspInit+0xac>)
 80021b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <HAL_TIM_PWM_MspInit+0xac>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2105      	movs	r1, #5
 80021c6:	202b      	movs	r0, #43	@ 0x2b
 80021c8:	f000 fc77 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80021cc:	202b      	movs	r0, #43	@ 0x2b
 80021ce:	f000 fc90 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40000c00 	.word	0x40000c00
 80021e4:	40001800 	.word	0x40001800

080021e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <HAL_TIM_Base_MspInit+0x44>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d113      	bne.n	8002222 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <HAL_TIM_Base_MspInit+0x48>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002230 <HAL_TIM_Base_MspInit+0x48>)
 8002200:	f043 0310 	orr.w	r3, r3, #16
 8002204:	6413      	str	r3, [r2, #64]	@ 0x40
 8002206:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <HAL_TIM_Base_MspInit+0x48>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2105      	movs	r1, #5
 8002216:	2036      	movs	r0, #54	@ 0x36
 8002218:	f000 fc4f 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800221c:	2036      	movs	r0, #54	@ 0x36
 800221e:	f000 fc68 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40001000 	.word	0x40001000
 8002230:	40023800 	.word	0x40023800

08002234 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	@ 0x30
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002254:	d139      	bne.n	80022ca <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a40      	ldr	r2, [pc, #256]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b3e      	ldr	r3, [pc, #248]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4b3b      	ldr	r3, [pc, #236]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a3a      	ldr	r2, [pc, #232]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b38      	ldr	r3, [pc, #224]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8002286:	2320      	movs	r3, #32
 8002288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002296:	2301      	movs	r3, #1
 8002298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	4619      	mov	r1, r3
 80022a0:	482f      	ldr	r0, [pc, #188]	@ (8002360 <HAL_TIM_MspPostInit+0x12c>)
 80022a2:	f000 ffbd 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 80022a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b8:	2301      	movs	r3, #1
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	4828      	ldr	r0, [pc, #160]	@ (8002364 <HAL_TIM_MspPostInit+0x130>)
 80022c4:	f000 ffac 	bl	8003220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80022c8:	e043      	b.n	8002352 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a26      	ldr	r2, [pc, #152]	@ (8002368 <HAL_TIM_MspPostInit+0x134>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d11c      	bne.n	800230e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	4a20      	ldr	r2, [pc, #128]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e0:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 80022ec:	2309      	movs	r3, #9
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022fc:	2302      	movs	r3, #2
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4816      	ldr	r0, [pc, #88]	@ (8002360 <HAL_TIM_MspPostInit+0x12c>)
 8002308:	f000 ff8a 	bl	8003220 <HAL_GPIO_Init>
}
 800230c:	e021      	b.n	8002352 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a16      	ldr	r2, [pc, #88]	@ (800236c <HAL_TIM_MspPostInit+0x138>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d11c      	bne.n	8002352 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	4a0f      	ldr	r2, [pc, #60]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 800231e:	f043 0302 	orr.w	r3, r3, #2
 8002322:	6313      	str	r3, [r2, #48]	@ 0x30
 8002324:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <HAL_TIM_MspPostInit+0x128>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002330:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002342:	2309      	movs	r3, #9
 8002344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	@ (8002364 <HAL_TIM_MspPostInit+0x130>)
 800234e:	f000 ff67 	bl	8003220 <HAL_GPIO_Init>
}
 8002352:	bf00      	nop
 8002354:	3730      	adds	r7, #48	@ 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40000c00 	.word	0x40000c00
 800236c:	40001800 	.word	0x40001800

08002370 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 8002376:	4a15      	ldr	r2, [pc, #84]	@ (80023cc <MX_USART2_UART_Init+0x5c>)
 8002378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800237a:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 800237c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <MX_USART2_UART_Init+0x58>)
 80023b4:	f003 fe74 	bl	80060a0 <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023be:	f7ff f979 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200003ac 	.word	0x200003ac
 80023cc:	40004400 	.word	0x40004400

080023d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 80023d6:	4a15      	ldr	r2, [pc, #84]	@ (800242c <MX_USART3_UART_Init+0x5c>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023da:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 80023dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002406:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002412:	4805      	ldr	r0, [pc, #20]	@ (8002428 <MX_USART3_UART_Init+0x58>)
 8002414:	f003 fe44 	bl	80060a0 <HAL_UART_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800241e:	f7ff f949 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000434 	.word	0x20000434
 800242c:	40004800 	.word	0x40004800

08002430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0b0      	sub	sp, #192	@ 0xc0
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	2290      	movs	r2, #144	@ 0x90
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f008 fbdd 	bl	800ac10 <memset>
  if(uartHandle->Instance==USART2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a79      	ldr	r2, [pc, #484]	@ (8002640 <HAL_UART_MspInit+0x210>)
 800245c:	4293      	cmp	r3, r2
 800245e:	f040 80a0 	bne.w	80025a2 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002466:	2300      	movs	r3, #0
 8002468:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800246a:	f107 031c 	add.w	r3, r7, #28
 800246e:	4618      	mov	r0, r3
 8002470:	f001 ff24 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800247a:	f7ff f91b 	bl	80016b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800247e:	4b71      	ldr	r3, [pc, #452]	@ (8002644 <HAL_UART_MspInit+0x214>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	4a70      	ldr	r2, [pc, #448]	@ (8002644 <HAL_UART_MspInit+0x214>)
 8002484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002488:	6413      	str	r3, [r2, #64]	@ 0x40
 800248a:	4b6e      	ldr	r3, [pc, #440]	@ (8002644 <HAL_UART_MspInit+0x214>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002496:	4b6b      	ldr	r3, [pc, #428]	@ (8002644 <HAL_UART_MspInit+0x214>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	4a6a      	ldr	r2, [pc, #424]	@ (8002644 <HAL_UART_MspInit+0x214>)
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a2:	4b68      	ldr	r3, [pc, #416]	@ (8002644 <HAL_UART_MspInit+0x214>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024ae:	2360      	movs	r3, #96	@ 0x60
 80024b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024c6:	2307      	movs	r3, #7
 80024c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024d0:	4619      	mov	r1, r3
 80024d2:	485d      	ldr	r0, [pc, #372]	@ (8002648 <HAL_UART_MspInit+0x218>)
 80024d4:	f000 fea4 	bl	8003220 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80024d8:	4b5c      	ldr	r3, [pc, #368]	@ (800264c <HAL_UART_MspInit+0x21c>)
 80024da:	4a5d      	ldr	r2, [pc, #372]	@ (8002650 <HAL_UART_MspInit+0x220>)
 80024dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80024de:	4b5b      	ldr	r3, [pc, #364]	@ (800264c <HAL_UART_MspInit+0x21c>)
 80024e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e6:	4b59      	ldr	r3, [pc, #356]	@ (800264c <HAL_UART_MspInit+0x21c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ec:	4b57      	ldr	r3, [pc, #348]	@ (800264c <HAL_UART_MspInit+0x21c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024f2:	4b56      	ldr	r3, [pc, #344]	@ (800264c <HAL_UART_MspInit+0x21c>)
 80024f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_UART_MspInit+0x21c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002500:	4b52      	ldr	r3, [pc, #328]	@ (800264c <HAL_UART_MspInit+0x21c>)
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002506:	4b51      	ldr	r3, [pc, #324]	@ (800264c <HAL_UART_MspInit+0x21c>)
 8002508:	2200      	movs	r2, #0
 800250a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800250c:	4b4f      	ldr	r3, [pc, #316]	@ (800264c <HAL_UART_MspInit+0x21c>)
 800250e:	2200      	movs	r2, #0
 8002510:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002512:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <HAL_UART_MspInit+0x21c>)
 8002514:	2200      	movs	r2, #0
 8002516:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002518:	484c      	ldr	r0, [pc, #304]	@ (800264c <HAL_UART_MspInit+0x21c>)
 800251a:	f000 fb05 	bl	8002b28 <HAL_DMA_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8002524:	f7ff f8c6 	bl	80016b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a48      	ldr	r2, [pc, #288]	@ (800264c <HAL_UART_MspInit+0x21c>)
 800252c:	675a      	str	r2, [r3, #116]	@ 0x74
 800252e:	4a47      	ldr	r2, [pc, #284]	@ (800264c <HAL_UART_MspInit+0x21c>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002534:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <HAL_UART_MspInit+0x224>)
 8002536:	4a48      	ldr	r2, [pc, #288]	@ (8002658 <HAL_UART_MspInit+0x228>)
 8002538:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800253a:	4b46      	ldr	r3, [pc, #280]	@ (8002654 <HAL_UART_MspInit+0x224>)
 800253c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002540:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HAL_UART_MspInit+0x224>)
 8002544:	2240      	movs	r2, #64	@ 0x40
 8002546:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002548:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <HAL_UART_MspInit+0x224>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <HAL_UART_MspInit+0x224>)
 8002550:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002554:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002556:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <HAL_UART_MspInit+0x224>)
 8002558:	2200      	movs	r2, #0
 800255a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800255c:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_UART_MspInit+0x224>)
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002562:	4b3c      	ldr	r3, [pc, #240]	@ (8002654 <HAL_UART_MspInit+0x224>)
 8002564:	2200      	movs	r2, #0
 8002566:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <HAL_UART_MspInit+0x224>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b39      	ldr	r3, [pc, #228]	@ (8002654 <HAL_UART_MspInit+0x224>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002574:	4837      	ldr	r0, [pc, #220]	@ (8002654 <HAL_UART_MspInit+0x224>)
 8002576:	f000 fad7 	bl	8002b28 <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8002580:	f7ff f898 	bl	80016b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a33      	ldr	r2, [pc, #204]	@ (8002654 <HAL_UART_MspInit+0x224>)
 8002588:	671a      	str	r2, [r3, #112]	@ 0x70
 800258a:	4a32      	ldr	r2, [pc, #200]	@ (8002654 <HAL_UART_MspInit+0x224>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002590:	2200      	movs	r2, #0
 8002592:	2105      	movs	r1, #5
 8002594:	2026      	movs	r0, #38	@ 0x26
 8002596:	f000 fa90 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800259a:	2026      	movs	r0, #38	@ 0x26
 800259c:	f000 faa9 	bl	8002af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025a0:	e049      	b.n	8002636 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2d      	ldr	r2, [pc, #180]	@ (800265c <HAL_UART_MspInit+0x22c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d144      	bne.n	8002636 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025b2:	2300      	movs	r3, #0
 80025b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 fe7e 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80025c6:	f7ff f875 	bl	80016b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002644 <HAL_UART_MspInit+0x214>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002644 <HAL_UART_MspInit+0x214>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <HAL_UART_MspInit+0x214>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e2:	4b18      	ldr	r3, [pc, #96]	@ (8002644 <HAL_UART_MspInit+0x214>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <HAL_UART_MspInit+0x214>)
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <HAL_UART_MspInit+0x214>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80025fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002614:	2307      	movs	r3, #7
 8002616:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800261a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800261e:	4619      	mov	r1, r3
 8002620:	4809      	ldr	r0, [pc, #36]	@ (8002648 <HAL_UART_MspInit+0x218>)
 8002622:	f000 fdfd 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2105      	movs	r1, #5
 800262a:	2027      	movs	r0, #39	@ 0x27
 800262c:	f000 fa45 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002630:	2027      	movs	r0, #39	@ 0x27
 8002632:	f000 fa5e 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	37c0      	adds	r7, #192	@ 0xc0
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40004400 	.word	0x40004400
 8002644:	40023800 	.word	0x40023800
 8002648:	40020c00 	.word	0x40020c00
 800264c:	200004bc 	.word	0x200004bc
 8002650:	40026088 	.word	0x40026088
 8002654:	2000051c 	.word	0x2000051c
 8002658:	400260a0 	.word	0x400260a0
 800265c:	40004800 	.word	0x40004800

08002660 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002664:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002666:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800266a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800266c:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800266e:	2206      	movs	r2, #6
 8002670:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002674:	2202      	movs	r2, #2
 8002676:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002678:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800267a:	2200      	movs	r2, #0
 800267c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800267e:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002680:	2202      	movs	r2, #2
 8002682:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002686:	2201      	movs	r2, #1
 8002688:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800268c:	2200      	movs	r2, #0
 800268e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002690:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002692:	2200      	movs	r2, #0
 8002694:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002698:	2201      	movs	r2, #1
 800269a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800269e:	2200      	movs	r2, #0
 80026a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80026a2:	4805      	ldr	r0, [pc, #20]	@ (80026b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026a4:	f000 ff9b 	bl	80035de <HAL_PCD_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80026ae:	f7ff f801 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000057c 	.word	0x2000057c

080026bc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b0ae      	sub	sp, #184	@ 0xb8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2290      	movs	r2, #144	@ 0x90
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f008 fa97 	bl	800ac10 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026ea:	d159      	bne.n	80027a0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80026ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80026f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 fddd 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002708:	f7fe ffd4 	bl	80016b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	4b26      	ldr	r3, [pc, #152]	@ (80027a8 <HAL_PCD_MspInit+0xec>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	4a25      	ldr	r2, [pc, #148]	@ (80027a8 <HAL_PCD_MspInit+0xec>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6313      	str	r3, [r2, #48]	@ 0x30
 8002718:	4b23      	ldr	r3, [pc, #140]	@ (80027a8 <HAL_PCD_MspInit+0xec>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002724:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800273e:	230a      	movs	r3, #10
 8002740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002748:	4619      	mov	r1, r3
 800274a:	4818      	ldr	r0, [pc, #96]	@ (80027ac <HAL_PCD_MspInit+0xf0>)
 800274c:	f000 fd68 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002750:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002764:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002768:	4619      	mov	r1, r3
 800276a:	4810      	ldr	r0, [pc, #64]	@ (80027ac <HAL_PCD_MspInit+0xf0>)
 800276c:	f000 fd58 	bl	8003220 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002770:	4b0d      	ldr	r3, [pc, #52]	@ (80027a8 <HAL_PCD_MspInit+0xec>)
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002774:	4a0c      	ldr	r2, [pc, #48]	@ (80027a8 <HAL_PCD_MspInit+0xec>)
 8002776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800277a:	6353      	str	r3, [r2, #52]	@ 0x34
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <HAL_PCD_MspInit+0xec>)
 800277e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <HAL_PCD_MspInit+0xec>)
 800278a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278c:	4a06      	ldr	r2, [pc, #24]	@ (80027a8 <HAL_PCD_MspInit+0xec>)
 800278e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002792:	6453      	str	r3, [r2, #68]	@ 0x44
 8002794:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <HAL_PCD_MspInit+0xec>)
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80027a0:	bf00      	nop
 80027a2:	37b8      	adds	r7, #184	@ 0xb8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000

080027b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027b4:	f7ff f8b8 	bl	8001928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b8:	480c      	ldr	r0, [pc, #48]	@ (80027ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ba:	490d      	ldr	r1, [pc, #52]	@ (80027f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027bc:	4a0d      	ldr	r2, [pc, #52]	@ (80027f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d0:	4c0a      	ldr	r4, [pc, #40]	@ (80027fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027de:	f008 fa47 	bl	800ac70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e2:	f7fe fe75 	bl	80014d0 <main>
  bx  lr    
 80027e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80027f4:	0800b740 	.word	0x0800b740
  ldr r2, =_sbss
 80027f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80027fc:	200054f0 	.word	0x200054f0

08002800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC_IRQHandler>

08002802 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002806:	2003      	movs	r0, #3
 8002808:	f000 f94c 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280c:	200f      	movs	r0, #15
 800280e:	f000 f805 	bl	800281c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002812:	f7fe ff55 	bl	80016c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002824:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_InitTick+0x54>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_InitTick+0x58>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002832:	fbb3 f3f1 	udiv	r3, r3, r1
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f967 	bl	8002b0e <HAL_SYSTICK_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e00e      	b.n	8002868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d80a      	bhi.n	8002866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f000 f92f 	bl	8002aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800285c:	4a06      	ldr	r2, [pc, #24]	@ (8002878 <HAL_InitTick+0x5c>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000000 	.word	0x20000000
 8002874:	20000008 	.word	0x20000008
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	@ (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000008 	.word	0x20000008
 80028a0:	20000a5c 	.word	0x20000a5c

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	@ (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000a5c 	.word	0x20000a5c

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff ffee 	bl	80028a4 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <HAL_Delay+0x44>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffde 	bl	80028a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000008 	.word	0x20000008

08002904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <__NVIC_SetPriorityGrouping+0x40>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	4313      	orrs	r3, r2
 8002930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002932:	4a04      	ldr	r2, [pc, #16]	@ (8002944 <__NVIC_SetPriorityGrouping+0x40>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00
 8002948:	05fa0000 	.word	0x05fa0000

0800294c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4907      	ldr	r1, [pc, #28]	@ (80029a0 <__NVIC_EnableIRQ+0x38>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	@ (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	@ (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
         );
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	@ 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a70:	d301      	bcc.n	8002a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a76:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7e:	210f      	movs	r1, #15
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f7ff ff8e 	bl	80029a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff29 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff3e 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff8e 	bl	80029f8 <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff5d 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff31 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ffa2 	bl	8002a60 <SysTick_Config>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff feb6 	bl	80028a4 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e099      	b.n	8002c78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b64:	e00f      	b.n	8002b86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b66:	f7ff fe9d 	bl	80028a4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d908      	bls.n	8002b86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e078      	b.n	8002c78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e8      	bne.n	8002b66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <HAL_DMA_Init+0x158>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d107      	bne.n	8002bf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	4313      	orrs	r3, r2
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 0307 	bic.w	r3, r3, #7
 8002c06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d117      	bne.n	8002c4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00e      	beq.n	8002c4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fa7b 	bl	8003128 <DMA_CheckFifoParam>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2240      	movs	r2, #64	@ 0x40
 8002c3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c46:	2301      	movs	r3, #1
 8002c48:	e016      	b.n	8002c78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa32 	bl	80030bc <DMA_CalcBaseAndBitshift>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	223f      	movs	r2, #63	@ 0x3f
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	e010803f 	.word	0xe010803f

08002c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c92:	f7ff fe07 	bl	80028a4 <HAL_GetTick>
 8002c96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d008      	beq.n	8002cb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2280      	movs	r2, #128	@ 0x80
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e052      	b.n	8002d5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0216 	bic.w	r2, r2, #22
 8002cc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <HAL_DMA_Abort+0x62>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0208 	bic.w	r2, r2, #8
 8002cf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d06:	e013      	b.n	8002d30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d08:	f7ff fdcc 	bl	80028a4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d90c      	bls.n	8002d30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e015      	b.n	8002d5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e4      	bne.n	8002d08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	223f      	movs	r2, #63	@ 0x3f
 8002d44:	409a      	lsls	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2280      	movs	r2, #128	@ 0x80
 8002d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00c      	b.n	8002d9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2205      	movs	r2, #5
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002db4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ff0 <HAL_DMA_IRQHandler+0x248>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a8e      	ldr	r2, [pc, #568]	@ (8002ff4 <HAL_DMA_IRQHandler+0x24c>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0a9b      	lsrs	r3, r3, #10
 8002dc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01a      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0204 	bic.w	r2, r2, #4
 8002dfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e00:	2208      	movs	r2, #8
 8002e02:	409a      	lsls	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	2201      	movs	r2, #1
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e36:	2201      	movs	r2, #1
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e42:	f043 0202 	orr.w	r2, r3, #2
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	2204      	movs	r2, #4
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d012      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	2210      	movs	r2, #16
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d043      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03c      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	2210      	movs	r2, #16
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d018      	beq.n	8002eea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d108      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d024      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
 8002ed6:	e01f      	b.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01b      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
 8002ee8:	e016      	b.n	8002f18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0208 	bic.w	r2, r2, #8
 8002f06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 808f 	beq.w	8003048 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8087 	beq.w	8003048 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	2220      	movs	r2, #32
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d136      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0216 	bic.w	r2, r2, #22
 8002f60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_DMA_IRQHandler+0x1da>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0208 	bic.w	r2, r2, #8
 8002f90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	223f      	movs	r2, #63	@ 0x3f
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d07e      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
        }
        return;
 8002fbe:	e079      	b.n	80030b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01d      	beq.n	800300a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10d      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d031      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
 8002fec:	e02c      	b.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
 8003008:	e01e      	b.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10f      	bne.n	8003038 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0210 	bic.w	r2, r2, #16
 8003026:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d032      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d022      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2205      	movs	r2, #5
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3301      	adds	r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	d307      	bcc.n	8003090 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f2      	bne.n	8003074 <HAL_DMA_IRQHandler+0x2cc>
 800308e:	e000      	b.n	8003092 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003090:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
 80030b2:	e000      	b.n	80030b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030b4:	bf00      	nop
    }
  }
}
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3b10      	subs	r3, #16
 80030cc:	4a13      	ldr	r2, [pc, #76]	@ (800311c <DMA_CalcBaseAndBitshift+0x60>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030d6:	4a12      	ldr	r2, [pc, #72]	@ (8003120 <DMA_CalcBaseAndBitshift+0x64>)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d908      	bls.n	80030fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003124 <DMA_CalcBaseAndBitshift+0x68>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	1d1a      	adds	r2, r3, #4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80030fa:	e006      	b.n	800310a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <DMA_CalcBaseAndBitshift+0x68>)
 8003104:	4013      	ands	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	aaaaaaab 	.word	0xaaaaaaab
 8003120:	0800b5f4 	.word	0x0800b5f4
 8003124:	fffffc00 	.word	0xfffffc00

08003128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11f      	bne.n	8003182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d856      	bhi.n	80031f6 <DMA_CheckFifoParam+0xce>
 8003148:	a201      	add	r2, pc, #4	@ (adr r2, 8003150 <DMA_CheckFifoParam+0x28>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	08003161 	.word	0x08003161
 8003154:	08003173 	.word	0x08003173
 8003158:	08003161 	.word	0x08003161
 800315c:	080031f7 	.word	0x080031f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d046      	beq.n	80031fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e043      	b.n	80031fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800317a:	d140      	bne.n	80031fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003180:	e03d      	b.n	80031fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800318a:	d121      	bne.n	80031d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d837      	bhi.n	8003202 <DMA_CheckFifoParam+0xda>
 8003192:	a201      	add	r2, pc, #4	@ (adr r2, 8003198 <DMA_CheckFifoParam+0x70>)
 8003194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031af 	.word	0x080031af
 80031a0:	080031a9 	.word	0x080031a9
 80031a4:	080031c1 	.word	0x080031c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      break;
 80031ac:	e030      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d025      	beq.n	8003206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031be:	e022      	b.n	8003206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031c8:	d11f      	bne.n	800320a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ce:	e01c      	b.n	800320a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d903      	bls.n	80031de <DMA_CheckFifoParam+0xb6>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d003      	beq.n	80031e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031dc:	e018      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
      break;
 80031e2:	e015      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00e      	beq.n	800320e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      break;
 80031f4:	e00b      	b.n	800320e <DMA_CheckFifoParam+0xe6>
      break;
 80031f6:	bf00      	nop
 80031f8:	e00a      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 80031fa:	bf00      	nop
 80031fc:	e008      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
 8003200:	e006      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 8003202:	bf00      	nop
 8003204:	e004      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;   
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 800320e:	bf00      	nop
    }
  } 
  
  return status; 
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	e175      	b.n	800352c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003240:	2201      	movs	r2, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	429a      	cmp	r2, r3
 800325a:	f040 8164 	bne.w	8003526 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d005      	beq.n	8003276 <HAL_GPIO_Init+0x56>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d130      	bne.n	80032d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ac:	2201      	movs	r2, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 0201 	and.w	r2, r3, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d017      	beq.n	8003314 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d123      	bne.n	8003368 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	08da      	lsrs	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3208      	adds	r2, #8
 8003328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220f      	movs	r2, #15
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	08da      	lsrs	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	69b9      	ldr	r1, [r7, #24]
 8003364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2203      	movs	r2, #3
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0203 	and.w	r2, r3, #3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80be 	beq.w	8003526 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	4b66      	ldr	r3, [pc, #408]	@ (8003544 <HAL_GPIO_Init+0x324>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	4a65      	ldr	r2, [pc, #404]	@ (8003544 <HAL_GPIO_Init+0x324>)
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033b6:	4b63      	ldr	r3, [pc, #396]	@ (8003544 <HAL_GPIO_Init+0x324>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033c2:	4a61      	ldr	r2, [pc, #388]	@ (8003548 <HAL_GPIO_Init+0x328>)
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	3302      	adds	r3, #2
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a58      	ldr	r2, [pc, #352]	@ (800354c <HAL_GPIO_Init+0x32c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d037      	beq.n	800345e <HAL_GPIO_Init+0x23e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a57      	ldr	r2, [pc, #348]	@ (8003550 <HAL_GPIO_Init+0x330>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d031      	beq.n	800345a <HAL_GPIO_Init+0x23a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a56      	ldr	r2, [pc, #344]	@ (8003554 <HAL_GPIO_Init+0x334>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d02b      	beq.n	8003456 <HAL_GPIO_Init+0x236>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a55      	ldr	r2, [pc, #340]	@ (8003558 <HAL_GPIO_Init+0x338>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d025      	beq.n	8003452 <HAL_GPIO_Init+0x232>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a54      	ldr	r2, [pc, #336]	@ (800355c <HAL_GPIO_Init+0x33c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01f      	beq.n	800344e <HAL_GPIO_Init+0x22e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a53      	ldr	r2, [pc, #332]	@ (8003560 <HAL_GPIO_Init+0x340>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d019      	beq.n	800344a <HAL_GPIO_Init+0x22a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a52      	ldr	r2, [pc, #328]	@ (8003564 <HAL_GPIO_Init+0x344>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_GPIO_Init+0x226>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a51      	ldr	r2, [pc, #324]	@ (8003568 <HAL_GPIO_Init+0x348>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00d      	beq.n	8003442 <HAL_GPIO_Init+0x222>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a50      	ldr	r2, [pc, #320]	@ (800356c <HAL_GPIO_Init+0x34c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <HAL_GPIO_Init+0x21e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4f      	ldr	r2, [pc, #316]	@ (8003570 <HAL_GPIO_Init+0x350>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_GPIO_Init+0x21a>
 8003436:	2309      	movs	r3, #9
 8003438:	e012      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800343a:	230a      	movs	r3, #10
 800343c:	e010      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800343e:	2308      	movs	r3, #8
 8003440:	e00e      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003442:	2307      	movs	r3, #7
 8003444:	e00c      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003446:	2306      	movs	r3, #6
 8003448:	e00a      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800344a:	2305      	movs	r3, #5
 800344c:	e008      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800344e:	2304      	movs	r3, #4
 8003450:	e006      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003452:	2303      	movs	r3, #3
 8003454:	e004      	b.n	8003460 <HAL_GPIO_Init+0x240>
 8003456:	2302      	movs	r3, #2
 8003458:	e002      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_GPIO_Init+0x240>
 800345e:	2300      	movs	r3, #0
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	f002 0203 	and.w	r2, r2, #3
 8003466:	0092      	lsls	r2, r2, #2
 8003468:	4093      	lsls	r3, r2
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003470:	4935      	ldr	r1, [pc, #212]	@ (8003548 <HAL_GPIO_Init+0x328>)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	3302      	adds	r3, #2
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800347e:	4b3d      	ldr	r3, [pc, #244]	@ (8003574 <HAL_GPIO_Init+0x354>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034a2:	4a34      	ldr	r2, [pc, #208]	@ (8003574 <HAL_GPIO_Init+0x354>)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a8:	4b32      	ldr	r3, [pc, #200]	@ (8003574 <HAL_GPIO_Init+0x354>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034cc:	4a29      	ldr	r2, [pc, #164]	@ (8003574 <HAL_GPIO_Init+0x354>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034d2:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <HAL_GPIO_Init+0x354>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003574 <HAL_GPIO_Init+0x354>)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <HAL_GPIO_Init+0x354>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003520:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <HAL_GPIO_Init+0x354>)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3301      	adds	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	f67f ae86 	bls.w	8003240 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3724      	adds	r7, #36	@ 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	40013800 	.word	0x40013800
 800354c:	40020000 	.word	0x40020000
 8003550:	40020400 	.word	0x40020400
 8003554:	40020800 	.word	0x40020800
 8003558:	40020c00 	.word	0x40020c00
 800355c:	40021000 	.word	0x40021000
 8003560:	40021400 	.word	0x40021400
 8003564:	40021800 	.word	0x40021800
 8003568:	40021c00 	.word	0x40021c00
 800356c:	40022000 	.word	0x40022000
 8003570:	40022400 	.word	0x40022400
 8003574:	40013c00 	.word	0x40013c00

08003578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
 8003584:	4613      	mov	r3, r2
 8003586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003588:	787b      	ldrb	r3, [r7, #1]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800358e:	887a      	ldrh	r2, [r7, #2]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003594:	e003      	b.n	800359e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	041a      	lsls	r2, r3, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	619a      	str	r2, [r3, #24]
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035bc:	887a      	ldrh	r2, [r7, #2]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	041a      	lsls	r2, r3, #16
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43d9      	mvns	r1, r3
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	400b      	ands	r3, r1
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	619a      	str	r2, [r3, #24]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af02      	add	r7, sp, #8
 80035e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e108      	b.n	8003802 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff f856 	bl	80026bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2203      	movs	r2, #3
 8003614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800361e:	d102      	bne.n	8003626 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f004 f8ee 	bl	800780c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7c1a      	ldrb	r2, [r3, #16]
 8003638:	f88d 2000 	strb.w	r2, [sp]
 800363c:	3304      	adds	r3, #4
 800363e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003640:	f004 f88a 	bl	8007758 <USB_CoreInit>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0d5      	b.n	8003802 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f004 f8e6 	bl	800782e <USB_SetCurrentMode>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0c6      	b.n	8003802 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e04a      	b.n	8003710 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3315      	adds	r3, #21
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	3314      	adds	r3, #20
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	b298      	uxth	r0, r3
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	332e      	adds	r3, #46	@ 0x2e
 80036b6:	4602      	mov	r2, r0
 80036b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3318      	adds	r3, #24
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	331c      	adds	r3, #28
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	3320      	adds	r3, #32
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3324      	adds	r3, #36	@ 0x24
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	3301      	adds	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	791b      	ldrb	r3, [r3, #4]
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	429a      	cmp	r2, r3
 8003718:	d3af      	bcc.n	800367a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e044      	b.n	80037aa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	3301      	adds	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	791b      	ldrb	r3, [r3, #4]
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d3b5      	bcc.n	8003720 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	7c1a      	ldrb	r2, [r3, #16]
 80037bc:	f88d 2000 	strb.w	r2, [sp]
 80037c0:	3304      	adds	r3, #4
 80037c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c4:	f004 f880 	bl	80078c8 <USB_DevInit>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e013      	b.n	8003802 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7b1b      	ldrb	r3, [r3, #12]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f80b 	bl	800380c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f004 fa3b 	bl	8007c76 <USB_DevDisconnect>

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_PCDEx_ActivateLPM+0x44>)
 800383c:	4313      	orrs	r3, r2
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	10000003 	.word	0x10000003

08003854 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a04      	ldr	r2, [pc, #16]	@ (8003870 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800385e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003862:	6013      	str	r3, [r2, #0]
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40007000 	.word	0x40007000

08003874 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	4b23      	ldr	r3, [pc, #140]	@ (800390c <HAL_PWREx_EnableOverDrive+0x98>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	4a22      	ldr	r2, [pc, #136]	@ (800390c <HAL_PWREx_EnableOverDrive+0x98>)
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003888:	6413      	str	r3, [r2, #64]	@ 0x40
 800388a:	4b20      	ldr	r3, [pc, #128]	@ (800390c <HAL_PWREx_EnableOverDrive+0x98>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003896:	4b1e      	ldr	r3, [pc, #120]	@ (8003910 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1d      	ldr	r2, [pc, #116]	@ (8003910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038a2:	f7fe ffff 	bl	80028a4 <HAL_GetTick>
 80038a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038a8:	e009      	b.n	80038be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038aa:	f7fe fffb 	bl	80028a4 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038b8:	d901      	bls.n	80038be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e022      	b.n	8003904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038be:	4b14      	ldr	r3, [pc, #80]	@ (8003910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ca:	d1ee      	bne.n	80038aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038cc:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038d8:	f7fe ffe4 	bl	80028a4 <HAL_GetTick>
 80038dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038de:	e009      	b.n	80038f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038e0:	f7fe ffe0 	bl	80028a4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038ee:	d901      	bls.n	80038f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e007      	b.n	8003904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003900:	d1ee      	bne.n	80038e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000

08003914 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800391c:	2300      	movs	r3, #0
 800391e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e29b      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8087 	beq.w	8003a46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003938:	4b96      	ldr	r3, [pc, #600]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b04      	cmp	r3, #4
 8003942:	d00c      	beq.n	800395e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003944:	4b93      	ldr	r3, [pc, #588]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 030c 	and.w	r3, r3, #12
 800394c:	2b08      	cmp	r3, #8
 800394e:	d112      	bne.n	8003976 <HAL_RCC_OscConfig+0x62>
 8003950:	4b90      	ldr	r3, [pc, #576]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003958:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800395c:	d10b      	bne.n	8003976 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395e:	4b8d      	ldr	r3, [pc, #564]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d06c      	beq.n	8003a44 <HAL_RCC_OscConfig+0x130>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d168      	bne.n	8003a44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e275      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800397e:	d106      	bne.n	800398e <HAL_RCC_OscConfig+0x7a>
 8003980:	4b84      	ldr	r3, [pc, #528]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a83      	ldr	r2, [pc, #524]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e02e      	b.n	80039ec <HAL_RCC_OscConfig+0xd8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x9c>
 8003996:	4b7f      	ldr	r3, [pc, #508]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 800399c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e01d      	b.n	80039ec <HAL_RCC_OscConfig+0xd8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0xc0>
 80039ba:	4b76      	ldr	r3, [pc, #472]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a75      	ldr	r2, [pc, #468]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b73      	ldr	r3, [pc, #460]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a72      	ldr	r2, [pc, #456]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0xd8>
 80039d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fe ff56 	bl	80028a4 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe ff52 	bl	80028a4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	@ 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e229      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b61      	ldr	r3, [pc, #388]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0xe8>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fe ff42 	bl	80028a4 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe ff3e 	bl	80028a4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e215      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	4b57      	ldr	r3, [pc, #348]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x110>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d069      	beq.n	8003b26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a52:	4b50      	ldr	r3, [pc, #320]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x190>
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d116      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	4b47      	ldr	r3, [pc, #284]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_RCC_OscConfig+0x17a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e1e9      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8e:	4b41      	ldr	r3, [pc, #260]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	493d      	ldr	r1, [pc, #244]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	e040      	b.n	8003b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d023      	beq.n	8003af4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aac:	4b39      	ldr	r3, [pc, #228]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a38      	ldr	r2, [pc, #224]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fef4 	bl	80028a4 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fe fef0 	bl	80028a4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1c7      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad2:	4b30      	ldr	r3, [pc, #192]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ade:	4b2d      	ldr	r3, [pc, #180]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4929      	ldr	r1, [pc, #164]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
 8003af2:	e018      	b.n	8003b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af4:	4b27      	ldr	r3, [pc, #156]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a26      	ldr	r2, [pc, #152]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe fed0 	bl	80028a4 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b08:	f7fe fecc 	bl	80028a4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e1a3      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d038      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d019      	beq.n	8003b6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3a:	4b16      	ldr	r3, [pc, #88]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3e:	4a15      	ldr	r2, [pc, #84]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7fe fead 	bl	80028a4 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4e:	f7fe fea9 	bl	80028a4 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e180      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b60:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x23a>
 8003b6c:	e01a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b72:	4a08      	ldr	r2, [pc, #32]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fe93 	bl	80028a4 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fe fe8f 	bl	80028a4 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d903      	bls.n	8003b98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e166      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
 8003b94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	4b92      	ldr	r3, [pc, #584]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ee      	bne.n	8003b82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80a4 	beq.w	8003cfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b8c      	ldr	r3, [pc, #560]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	4b89      	ldr	r3, [pc, #548]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	4a88      	ldr	r2, [pc, #544]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bca:	4b86      	ldr	r3, [pc, #536]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bda:	4b83      	ldr	r3, [pc, #524]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d118      	bne.n	8003c18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003be6:	4b80      	ldr	r3, [pc, #512]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7f      	ldr	r2, [pc, #508]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fe57 	bl	80028a4 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fe fe53 	bl	80028a4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b64      	cmp	r3, #100	@ 0x64
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e12a      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0c:	4b76      	ldr	r3, [pc, #472]	@ (8003de8 <HAL_RCC_OscConfig+0x4d4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x31a>
 8003c20:	4b70      	ldr	r3, [pc, #448]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c24:	4a6f      	ldr	r2, [pc, #444]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c2c:	e02d      	b.n	8003c8a <HAL_RCC_OscConfig+0x376>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x33c>
 8003c36:	4b6b      	ldr	r3, [pc, #428]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	4a6a      	ldr	r2, [pc, #424]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c42:	4b68      	ldr	r3, [pc, #416]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	4a67      	ldr	r2, [pc, #412]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c48:	f023 0304 	bic.w	r3, r3, #4
 8003c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4e:	e01c      	b.n	8003c8a <HAL_RCC_OscConfig+0x376>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d10c      	bne.n	8003c72 <HAL_RCC_OscConfig+0x35e>
 8003c58:	4b62      	ldr	r3, [pc, #392]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5c:	4a61      	ldr	r2, [pc, #388]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c5e:	f043 0304 	orr.w	r3, r3, #4
 8003c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c64:	4b5f      	ldr	r3, [pc, #380]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c68:	4a5e      	ldr	r2, [pc, #376]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c70:	e00b      	b.n	8003c8a <HAL_RCC_OscConfig+0x376>
 8003c72:	4b5c      	ldr	r3, [pc, #368]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	4a5b      	ldr	r2, [pc, #364]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7e:	4b59      	ldr	r3, [pc, #356]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	4a58      	ldr	r2, [pc, #352]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d015      	beq.n	8003cbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fe fe07 	bl	80028a4 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fe fe03 	bl	80028a4 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e0d8      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	4b4c      	ldr	r3, [pc, #304]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ee      	beq.n	8003c9a <HAL_RCC_OscConfig+0x386>
 8003cbc:	e014      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fdf1 	bl	80028a4 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fe fded 	bl	80028a4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0c2      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cdc:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ee      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d105      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cee:	4b3d      	ldr	r3, [pc, #244]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	4a3c      	ldr	r2, [pc, #240]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80ae 	beq.w	8003e60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d04:	4b37      	ldr	r3, [pc, #220]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d06d      	beq.n	8003dec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d14b      	bne.n	8003db0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d18:	4b32      	ldr	r3, [pc, #200]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a31      	ldr	r2, [pc, #196]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe fdbe 	bl	80028a4 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe fdba 	bl	80028a4 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e091      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b29      	ldr	r3, [pc, #164]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	019b      	lsls	r3, r3, #6
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	3b01      	subs	r3, #1
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	071b      	lsls	r3, r3, #28
 8003d76:	491b      	ldr	r1, [pc, #108]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a18      	ldr	r2, [pc, #96]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe fd8c 	bl	80028a4 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fe fd88 	bl	80028a4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e05f      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da2:	4b10      	ldr	r3, [pc, #64]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x47c>
 8003dae:	e057      	b.n	8003e60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0b      	ldr	r2, [pc, #44]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fd72 	bl	80028a4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe fd6e 	bl	80028a4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e045      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	4b03      	ldr	r3, [pc, #12]	@ (8003de4 <HAL_RCC_OscConfig+0x4d0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4b0>
 8003de2:	e03d      	b.n	8003e60 <HAL_RCC_OscConfig+0x54c>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003dec:	4b1f      	ldr	r3, [pc, #124]	@ (8003e6c <HAL_RCC_OscConfig+0x558>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d030      	beq.n	8003e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d129      	bne.n	8003e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d122      	bne.n	8003e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d119      	bne.n	8003e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	3b01      	subs	r3, #1
 8003e36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d10f      	bne.n	8003e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800

08003e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0d0      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e88:	4b6a      	ldr	r3, [pc, #424]	@ (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d910      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b67      	ldr	r3, [pc, #412]	@ (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 020f 	bic.w	r2, r3, #15
 8003e9e:	4965      	ldr	r1, [pc, #404]	@ (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b63      	ldr	r3, [pc, #396]	@ (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0b8      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed0:	4b59      	ldr	r3, [pc, #356]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a58      	ldr	r2, [pc, #352]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ee8:	4b53      	ldr	r3, [pc, #332]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a52      	ldr	r2, [pc, #328]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003eee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b50      	ldr	r3, [pc, #320]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	494d      	ldr	r1, [pc, #308]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d040      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	4b47      	ldr	r3, [pc, #284]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d115      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e07f      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	4b41      	ldr	r3, [pc, #260]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e073      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4b3d      	ldr	r3, [pc, #244]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06b      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f52:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 0203 	bic.w	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4936      	ldr	r1, [pc, #216]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f64:	f7fe fc9e 	bl	80028a4 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6c:	f7fe fc9a 	bl	80028a4 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e053      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	4b2d      	ldr	r3, [pc, #180]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 020c 	and.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1eb      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f94:	4b27      	ldr	r3, [pc, #156]	@ (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d210      	bcs.n	8003fc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b24      	ldr	r3, [pc, #144]	@ (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 020f 	bic.w	r2, r3, #15
 8003faa:	4922      	ldr	r1, [pc, #136]	@ (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b20      	ldr	r3, [pc, #128]	@ (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e032      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd0:	4b19      	ldr	r3, [pc, #100]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4916      	ldr	r1, [pc, #88]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	490e      	ldr	r1, [pc, #56]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004002:	f000 f821 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8004006:	4602      	mov	r2, r0
 8004008:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	490a      	ldr	r1, [pc, #40]	@ (800403c <HAL_RCC_ClockConfig+0x1cc>)
 8004014:	5ccb      	ldrb	r3, [r1, r3]
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	4a09      	ldr	r2, [pc, #36]	@ (8004040 <HAL_RCC_ClockConfig+0x1d0>)
 800401c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800401e:	4b09      	ldr	r3, [pc, #36]	@ (8004044 <HAL_RCC_ClockConfig+0x1d4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fbfa 	bl	800281c <HAL_InitTick>

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40023c00 	.word	0x40023c00
 8004038:	40023800 	.word	0x40023800
 800403c:	0800b5dc 	.word	0x0800b5dc
 8004040:	20000000 	.word	0x20000000
 8004044:	20000004 	.word	0x20000004

08004048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b094      	sub	sp, #80	@ 0x50
 800404e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	647b      	str	r3, [r7, #68]	@ 0x44
 8004054:	2300      	movs	r3, #0
 8004056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004058:	2300      	movs	r3, #0
 800405a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004060:	4b79      	ldr	r3, [pc, #484]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b08      	cmp	r3, #8
 800406a:	d00d      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x40>
 800406c:	2b08      	cmp	r3, #8
 800406e:	f200 80e1 	bhi.w	8004234 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x34>
 8004076:	2b04      	cmp	r3, #4
 8004078:	d003      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x3a>
 800407a:	e0db      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800407c:	4b73      	ldr	r3, [pc, #460]	@ (800424c <HAL_RCC_GetSysClockFreq+0x204>)
 800407e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004080:	e0db      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004082:	4b73      	ldr	r3, [pc, #460]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x208>)
 8004084:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004086:	e0d8      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004088:	4b6f      	ldr	r3, [pc, #444]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004090:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004092:	4b6d      	ldr	r3, [pc, #436]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d063      	beq.n	8004166 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409e:	4b6a      	ldr	r3, [pc, #424]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	2200      	movs	r2, #0
 80040a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b2:	2300      	movs	r3, #0
 80040b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040ba:	4622      	mov	r2, r4
 80040bc:	462b      	mov	r3, r5
 80040be:	f04f 0000 	mov.w	r0, #0
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	0159      	lsls	r1, r3, #5
 80040c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040cc:	0150      	lsls	r0, r2, #5
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4621      	mov	r1, r4
 80040d4:	1a51      	subs	r1, r2, r1
 80040d6:	6139      	str	r1, [r7, #16]
 80040d8:	4629      	mov	r1, r5
 80040da:	eb63 0301 	sbc.w	r3, r3, r1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ec:	4659      	mov	r1, fp
 80040ee:	018b      	lsls	r3, r1, #6
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040f6:	4651      	mov	r1, sl
 80040f8:	018a      	lsls	r2, r1, #6
 80040fa:	4651      	mov	r1, sl
 80040fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004100:	4659      	mov	r1, fp
 8004102:	eb63 0901 	sbc.w	r9, r3, r1
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800411a:	4690      	mov	r8, r2
 800411c:	4699      	mov	r9, r3
 800411e:	4623      	mov	r3, r4
 8004120:	eb18 0303 	adds.w	r3, r8, r3
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	462b      	mov	r3, r5
 8004128:	eb49 0303 	adc.w	r3, r9, r3
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800413a:	4629      	mov	r1, r5
 800413c:	024b      	lsls	r3, r1, #9
 800413e:	4621      	mov	r1, r4
 8004140:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004144:	4621      	mov	r1, r4
 8004146:	024a      	lsls	r2, r1, #9
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800414e:	2200      	movs	r2, #0
 8004150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004152:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004154:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004158:	f7fc f8da 	bl	8000310 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4613      	mov	r3, r2
 8004162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004164:	e058      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004166:	4b38      	ldr	r3, [pc, #224]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	2200      	movs	r2, #0
 800416e:	4618      	mov	r0, r3
 8004170:	4611      	mov	r1, r2
 8004172:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004176:	623b      	str	r3, [r7, #32]
 8004178:	2300      	movs	r3, #0
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
 800417c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004180:	4642      	mov	r2, r8
 8004182:	464b      	mov	r3, r9
 8004184:	f04f 0000 	mov.w	r0, #0
 8004188:	f04f 0100 	mov.w	r1, #0
 800418c:	0159      	lsls	r1, r3, #5
 800418e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004192:	0150      	lsls	r0, r2, #5
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4641      	mov	r1, r8
 800419a:	ebb2 0a01 	subs.w	sl, r2, r1
 800419e:	4649      	mov	r1, r9
 80041a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041b8:	ebb2 040a 	subs.w	r4, r2, sl
 80041bc:	eb63 050b 	sbc.w	r5, r3, fp
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	00eb      	lsls	r3, r5, #3
 80041ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ce:	00e2      	lsls	r2, r4, #3
 80041d0:	4614      	mov	r4, r2
 80041d2:	461d      	mov	r5, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	18e3      	adds	r3, r4, r3
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	464b      	mov	r3, r9
 80041dc:	eb45 0303 	adc.w	r3, r5, r3
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ee:	4629      	mov	r1, r5
 80041f0:	028b      	lsls	r3, r1, #10
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f8:	4621      	mov	r1, r4
 80041fa:	028a      	lsls	r2, r1, #10
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004202:	2200      	movs	r2, #0
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	61fa      	str	r2, [r7, #28]
 8004208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800420c:	f7fc f880 	bl	8000310 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4613      	mov	r3, r2
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004218:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	3301      	adds	r3, #1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004228:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800422a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004232:	e002      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <HAL_RCC_GetSysClockFreq+0x204>)
 8004236:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800423c:	4618      	mov	r0, r3
 800423e:	3750      	adds	r7, #80	@ 0x50
 8004240:	46bd      	mov	sp, r7
 8004242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800
 800424c:	00f42400 	.word	0x00f42400
 8004250:	007a1200 	.word	0x007a1200

08004254 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b03      	ldr	r3, [pc, #12]	@ (8004268 <HAL_RCC_GetHCLKFreq+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000000 	.word	0x20000000

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004270:	f7ff fff0 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b05      	ldr	r3, [pc, #20]	@ (800428c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0a9b      	lsrs	r3, r3, #10
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4903      	ldr	r1, [pc, #12]	@ (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	0800b5ec 	.word	0x0800b5ec

08004294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004298:	f7ff ffdc 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0b5b      	lsrs	r3, r3, #13
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	@ (80042b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	0800b5ec 	.word	0x0800b5ec

080042bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042e4:	4b69      	ldr	r3, [pc, #420]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a68      	ldr	r2, [pc, #416]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80042ee:	6093      	str	r3, [r2, #8]
 80042f0:	4b66      	ldr	r3, [pc, #408]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f8:	4964      	ldr	r1, [pc, #400]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d017      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004316:	4b5d      	ldr	r3, [pc, #372]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800431c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004324:	4959      	ldr	r1, [pc, #356]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004334:	d101      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004336:	2301      	movs	r3, #1
 8004338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004342:	2301      	movs	r3, #1
 8004344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d017      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004352:	4b4e      	ldr	r3, [pc, #312]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004358:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	494a      	ldr	r1, [pc, #296]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004370:	d101      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800437e:	2301      	movs	r3, #1
 8004380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800438e:	2301      	movs	r3, #1
 8004390:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 808b 	beq.w	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043a0:	4b3a      	ldr	r3, [pc, #232]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	4a39      	ldr	r2, [pc, #228]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ac:	4b37      	ldr	r3, [pc, #220]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043b8:	4b35      	ldr	r3, [pc, #212]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a34      	ldr	r2, [pc, #208]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c4:	f7fe fa6e 	bl	80028a4 <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043cc:	f7fe fa6a 	bl	80028a4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	@ 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e38f      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043de:	4b2c      	ldr	r3, [pc, #176]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ea:	4b28      	ldr	r3, [pc, #160]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d035      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	429a      	cmp	r2, r3
 8004406:	d02e      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004408:	4b20      	ldr	r3, [pc, #128]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004410:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004412:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	4a1d      	ldr	r2, [pc, #116]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800441e:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	4a1a      	ldr	r2, [pc, #104]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004428:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800442a:	4a18      	ldr	r2, [pc, #96]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004430:	4b16      	ldr	r3, [pc, #88]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d114      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe fa32 	bl	80028a4 <HAL_GetTick>
 8004440:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004442:	e00a      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004444:	f7fe fa2e 	bl	80028a4 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e351      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445a:	4b0c      	ldr	r3, [pc, #48]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0ee      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004472:	d111      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004480:	4b04      	ldr	r3, [pc, #16]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004482:	400b      	ands	r3, r1
 8004484:	4901      	ldr	r1, [pc, #4]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	4313      	orrs	r3, r2
 8004488:	608b      	str	r3, [r1, #8]
 800448a:	e00b      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800448c:	40023800 	.word	0x40023800
 8004490:	40007000 	.word	0x40007000
 8004494:	0ffffcff 	.word	0x0ffffcff
 8004498:	4bac      	ldr	r3, [pc, #688]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4aab      	ldr	r2, [pc, #684]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80044a2:	6093      	str	r3, [r2, #8]
 80044a4:	4ba9      	ldr	r3, [pc, #676]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b0:	49a6      	ldr	r1, [pc, #664]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d010      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044c2:	4ba2      	ldr	r3, [pc, #648]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044c8:	4aa0      	ldr	r2, [pc, #640]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80044d2:	4b9e      	ldr	r3, [pc, #632]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	499b      	ldr	r1, [pc, #620]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f0:	4b96      	ldr	r3, [pc, #600]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044fe:	4993      	ldr	r1, [pc, #588]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004512:	4b8e      	ldr	r3, [pc, #568]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004518:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004520:	498a      	ldr	r1, [pc, #552]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004534:	4b85      	ldr	r3, [pc, #532]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004542:	4982      	ldr	r1, [pc, #520]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004556:	4b7d      	ldr	r3, [pc, #500]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	4979      	ldr	r1, [pc, #484]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004578:	4b74      	ldr	r3, [pc, #464]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004586:	4971      	ldr	r1, [pc, #452]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800459a:	4b6c      	ldr	r3, [pc, #432]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a0:	f023 020c 	bic.w	r2, r3, #12
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a8:	4968      	ldr	r1, [pc, #416]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045bc:	4b63      	ldr	r3, [pc, #396]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ca:	4960      	ldr	r1, [pc, #384]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045de:	4b5b      	ldr	r3, [pc, #364]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ec:	4957      	ldr	r1, [pc, #348]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004600:	4b52      	ldr	r3, [pc, #328]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004606:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	494f      	ldr	r1, [pc, #316]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004622:	4b4a      	ldr	r3, [pc, #296]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004628:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004630:	4946      	ldr	r1, [pc, #280]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004644:	4b41      	ldr	r3, [pc, #260]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004652:	493e      	ldr	r1, [pc, #248]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004666:	4b39      	ldr	r3, [pc, #228]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004674:	4935      	ldr	r1, [pc, #212]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004688:	4b30      	ldr	r3, [pc, #192]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004696:	492d      	ldr	r1, [pc, #180]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d011      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046aa:	4b28      	ldr	r3, [pc, #160]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046b8:	4924      	ldr	r1, [pc, #144]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c8:	d101      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046ca:	2301      	movs	r3, #1
 80046cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046da:	2301      	movs	r3, #1
 80046dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ea:	4b18      	ldr	r3, [pc, #96]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f8:	4914      	ldr	r1, [pc, #80]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00b      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800470c:	4b0f      	ldr	r3, [pc, #60]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004712:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471c:	490b      	ldr	r1, [pc, #44]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00f      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004730:	4b06      	ldr	r3, [pc, #24]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004736:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004740:	4902      	ldr	r1, [pc, #8]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004748:	e002      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800475c:	4b8a      	ldr	r3, [pc, #552]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004762:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	4986      	ldr	r1, [pc, #536]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004780:	4b81      	ldr	r3, [pc, #516]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004782:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004786:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004790:	497d      	ldr	r1, [pc, #500]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d006      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80d6 	beq.w	8004958 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047ac:	4b76      	ldr	r3, [pc, #472]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a75      	ldr	r2, [pc, #468]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b8:	f7fe f874 	bl	80028a4 <HAL_GetTick>
 80047bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047c0:	f7fe f870 	bl	80028a4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	@ 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e195      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d021      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11d      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047f2:	4b65      	ldr	r3, [pc, #404]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f8:	0c1b      	lsrs	r3, r3, #16
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004800:	4b61      	ldr	r3, [pc, #388]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004806:	0e1b      	lsrs	r3, r3, #24
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	019a      	lsls	r2, r3, #6
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	431a      	orrs	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	071b      	lsls	r3, r3, #28
 8004826:	4958      	ldr	r1, [pc, #352]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800484c:	2b00      	cmp	r3, #0
 800484e:	d02e      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004858:	d129      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800485a:	4b4b      	ldr	r3, [pc, #300]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004868:	4b47      	ldr	r3, [pc, #284]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800486e:	0f1b      	lsrs	r3, r3, #28
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	019a      	lsls	r2, r3, #6
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	061b      	lsls	r3, r3, #24
 8004888:	431a      	orrs	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	071b      	lsls	r3, r3, #28
 800488e:	493e      	ldr	r1, [pc, #248]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004896:	4b3c      	ldr	r3, [pc, #240]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800489c:	f023 021f 	bic.w	r2, r3, #31
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	3b01      	subs	r3, #1
 80048a6:	4938      	ldr	r1, [pc, #224]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01d      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048ba:	4b33      	ldr	r3, [pc, #204]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c0:	0e1b      	lsrs	r3, r3, #24
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ce:	0f1b      	lsrs	r3, r3, #28
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	019a      	lsls	r2, r3, #6
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	431a      	orrs	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	061b      	lsls	r3, r3, #24
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	071b      	lsls	r3, r3, #28
 80048ee:	4926      	ldr	r1, [pc, #152]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d011      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	019a      	lsls	r2, r3, #6
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	071b      	lsls	r3, r3, #28
 800491e:	491a      	ldr	r1, [pc, #104]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004926:	4b18      	ldr	r3, [pc, #96]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a17      	ldr	r2, [pc, #92]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004932:	f7fd ffb7 	bl	80028a4 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004938:	e008      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800493a:	f7fd ffb3 	bl	80028a4 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b64      	cmp	r3, #100	@ 0x64
 8004946:	d901      	bls.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e0d8      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800494c:	4b0e      	ldr	r3, [pc, #56]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	f040 80ce 	bne.w	8004afc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004960:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a08      	ldr	r2, [pc, #32]	@ (8004988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800496a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496c:	f7fd ff9a 	bl	80028a4 <HAL_GetTick>
 8004970:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004972:	e00b      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004974:	f7fd ff96 	bl	80028a4 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d904      	bls.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e0bb      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800498c:	4b5e      	ldr	r3, [pc, #376]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004998:	d0ec      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d02e      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d12a      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049c2:	4b51      	ldr	r3, [pc, #324]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d6:	0f1b      	lsrs	r3, r3, #28
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	019a      	lsls	r2, r3, #6
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	061b      	lsls	r3, r3, #24
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	4944      	ldr	r1, [pc, #272]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049fe:	4b42      	ldr	r3, [pc, #264]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a04:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	493d      	ldr	r1, [pc, #244]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d022      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a2c:	d11d      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a2e:	4b36      	ldr	r3, [pc, #216]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a34:	0e1b      	lsrs	r3, r3, #24
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a3c:	4b32      	ldr	r3, [pc, #200]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a42:	0f1b      	lsrs	r3, r3, #28
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	019a      	lsls	r2, r3, #6
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	431a      	orrs	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	061b      	lsls	r3, r3, #24
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	071b      	lsls	r3, r3, #28
 8004a62:	4929      	ldr	r1, [pc, #164]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d028      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a76:	4b24      	ldr	r3, [pc, #144]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7c:	0e1b      	lsrs	r3, r3, #24
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a84:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	019a      	lsls	r2, r3, #6
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	071b      	lsls	r3, r3, #28
 8004aaa:	4917      	ldr	r1, [pc, #92]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ab2:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ab8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	4911      	ldr	r1, [pc, #68]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0e      	ldr	r2, [pc, #56]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fd fee6 	bl	80028a4 <HAL_GetTick>
 8004ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004adc:	f7fd fee2 	bl	80028a4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	@ 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e007      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aee:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004afa:	d1ef      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800

08004b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e049      	b.n	8004bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd fb58 	bl	80021e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f000 fecc 	bl	80058e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d001      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e054      	b.n	8004c7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a26      	ldr	r2, [pc, #152]	@ (8004c8c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d022      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0x80>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfe:	d01d      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0x80>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a22      	ldr	r2, [pc, #136]	@ (8004c90 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d018      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0x80>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a21      	ldr	r2, [pc, #132]	@ (8004c94 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0x80>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1f      	ldr	r2, [pc, #124]	@ (8004c98 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00e      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0x80>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1e      	ldr	r2, [pc, #120]	@ (8004c9c <HAL_TIM_Base_Start_IT+0xe0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d009      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0x80>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d004      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0x80>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d115      	bne.n	8004c68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	4b19      	ldr	r3, [pc, #100]	@ (8004ca8 <HAL_TIM_Base_Start_IT+0xec>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b06      	cmp	r3, #6
 8004c4c:	d015      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0xbe>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c54:	d011      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c66:	e008      	b.n	8004c7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e000      	b.n	8004c7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40010400 	.word	0x40010400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40001800 	.word	0x40001800
 8004ca8:	00010007 	.word	0x00010007

08004cac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6a1a      	ldr	r2, [r3, #32]
 8004cca:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10f      	bne.n	8004cf4 <HAL_TIM_Base_Stop_IT+0x48>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6a1a      	ldr	r2, [r3, #32]
 8004cda:	f240 4344 	movw	r3, #1092	@ 0x444
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_Base_Stop_IT+0x48>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e049      	b.n	8004db0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7fd f9fd 	bl	8002130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f000 fdcd 	bl	80058e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_TIM_PWM_Start+0x24>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e03c      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d109      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x3e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e02f      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d109      	bne.n	8004e10 <HAL_TIM_PWM_Start+0x58>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e022      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b0c      	cmp	r3, #12
 8004e14:	d109      	bne.n	8004e2a <HAL_TIM_PWM_Start+0x72>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e015      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d109      	bne.n	8004e44 <HAL_TIM_PWM_Start+0x8c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	bf14      	ite	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	2300      	moveq	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	e008      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e092      	b.n	8004f84 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_PWM_Start+0xb6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e6c:	e023      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_PWM_Start+0xc6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e7c:	e01b      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d104      	bne.n	8004e8e <HAL_TIM_PWM_Start+0xd6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e8c:	e013      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	d104      	bne.n	8004e9e <HAL_TIM_PWM_Start+0xe6>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e9c:	e00b      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_PWM_Start+0xf6>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eac:	e003      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	6839      	ldr	r1, [r7, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 f81c 	bl	8005efc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a30      	ldr	r2, [pc, #192]	@ (8004f8c <HAL_TIM_PWM_Start+0x1d4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_TIM_PWM_Start+0x120>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8004f90 <HAL_TIM_PWM_Start+0x1d8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d101      	bne.n	8004edc <HAL_TIM_PWM_Start+0x124>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <HAL_TIM_PWM_Start+0x126>
 8004edc:	2300      	movs	r3, #0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a25      	ldr	r2, [pc, #148]	@ (8004f8c <HAL_TIM_PWM_Start+0x1d4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x18a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f04:	d01d      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x18a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a22      	ldr	r2, [pc, #136]	@ (8004f94 <HAL_TIM_PWM_Start+0x1dc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x18a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a20      	ldr	r2, [pc, #128]	@ (8004f98 <HAL_TIM_PWM_Start+0x1e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x18a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004f9c <HAL_TIM_PWM_Start+0x1e4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x18a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a19      	ldr	r2, [pc, #100]	@ (8004f90 <HAL_TIM_PWM_Start+0x1d8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x18a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x18a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a19      	ldr	r2, [pc, #100]	@ (8004fa4 <HAL_TIM_PWM_Start+0x1ec>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d115      	bne.n	8004f6e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	4b17      	ldr	r3, [pc, #92]	@ (8004fa8 <HAL_TIM_PWM_Start+0x1f0>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b06      	cmp	r3, #6
 8004f52:	d015      	beq.n	8004f80 <HAL_TIM_PWM_Start+0x1c8>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5a:	d011      	beq.n	8004f80 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6c:	e008      	b.n	8004f80 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e000      	b.n	8004f82 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40001800 	.word	0x40001800
 8004fa8:	00010007 	.word	0x00010007

08004fac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 ff9c 	bl	8005efc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a36      	ldr	r2, [pc, #216]	@ (80050a4 <HAL_TIM_PWM_Stop+0xf8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_TIM_PWM_Stop+0x2c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a35      	ldr	r2, [pc, #212]	@ (80050a8 <HAL_TIM_PWM_Stop+0xfc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIM_PWM_Stop+0x30>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <HAL_TIM_PWM_Stop+0x32>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d017      	beq.n	8005012 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6a1a      	ldr	r2, [r3, #32]
 8004fe8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <HAL_TIM_PWM_Stop+0x66>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6a1a      	ldr	r2, [r3, #32]
 8004ff8:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d107      	bne.n	8005012 <HAL_TIM_PWM_Stop+0x66>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005010:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	f241 1311 	movw	r3, #4369	@ 0x1111
 800501c:	4013      	ands	r3, r2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10f      	bne.n	8005042 <HAL_TIM_PWM_Stop+0x96>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	f240 4344 	movw	r3, #1092	@ 0x444
 800502c:	4013      	ands	r3, r2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <HAL_TIM_PWM_Stop+0x96>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <HAL_TIM_PWM_Stop+0xa6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005050:	e023      	b.n	800509a <HAL_TIM_PWM_Stop+0xee>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d104      	bne.n	8005062 <HAL_TIM_PWM_Stop+0xb6>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005060:	e01b      	b.n	800509a <HAL_TIM_PWM_Stop+0xee>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Stop+0xc6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005070:	e013      	b.n	800509a <HAL_TIM_PWM_Stop+0xee>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b0c      	cmp	r3, #12
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Stop+0xd6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005080:	e00b      	b.n	800509a <HAL_TIM_PWM_Stop+0xee>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b10      	cmp	r3, #16
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Stop+0xe6>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005090:	e003      	b.n	800509a <HAL_TIM_PWM_Stop+0xee>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40010400 	.word	0x40010400

080050ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e08f      	b.n	80051e0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d106      	bne.n	80050da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fc fee1 	bl	8001e9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6899      	ldr	r1, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b3e      	ldr	r3, [pc, #248]	@ (80051e8 <HAL_TIM_Encoder_Init+0x13c>)
 80050ee:	400b      	ands	r3, r1
 80050f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f000 fbf3 	bl	80058e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4b31      	ldr	r3, [pc, #196]	@ (80051ec <HAL_TIM_Encoder_Init+0x140>)
 8005128:	4013      	ands	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	4313      	orrs	r3, r2
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4b2b      	ldr	r3, [pc, #172]	@ (80051f0 <HAL_TIM_Encoder_Init+0x144>)
 8005142:	4013      	ands	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4b2a      	ldr	r3, [pc, #168]	@ (80051f4 <HAL_TIM_Encoder_Init+0x148>)
 800514a:	4013      	ands	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	4313      	orrs	r3, r2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	011a      	lsls	r2, r3, #4
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	031b      	lsls	r3, r3, #12
 800516c:	4313      	orrs	r3, r2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	4313      	orrs	r3, r2
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	fffebff8 	.word	0xfffebff8
 80051ec:	fffffcfc 	.word	0xfffffcfc
 80051f0:	fffff3f3 	.word	0xfffff3f3
 80051f4:	ffff0f0f 	.word	0xffff0f0f

080051f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005208:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005210:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005218:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005220:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d110      	bne.n	800524a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d102      	bne.n	8005234 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800522e:	7b7b      	ldrb	r3, [r7, #13]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d001      	beq.n	8005238 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e069      	b.n	800530c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005248:	e031      	b.n	80052ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d110      	bne.n	8005272 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005250:	7bbb      	ldrb	r3, [r7, #14]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d102      	bne.n	800525c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005256:	7b3b      	ldrb	r3, [r7, #12]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d001      	beq.n	8005260 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e055      	b.n	800530c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005270:	e01d      	b.n	80052ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d108      	bne.n	800528a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d105      	bne.n	800528a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800527e:	7b7b      	ldrb	r3, [r7, #13]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d102      	bne.n	800528a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005284:	7b3b      	ldrb	r3, [r7, #12]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d001      	beq.n	800528e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e03e      	b.n	800530c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2202      	movs	r2, #2
 80052a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_TIM_Encoder_Start+0xc4>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d008      	beq.n	80052cc <HAL_TIM_Encoder_Start+0xd4>
 80052ba:	e00f      	b.n	80052dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2201      	movs	r2, #1
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fe19 	bl	8005efc <TIM_CCxChannelCmd>
      break;
 80052ca:	e016      	b.n	80052fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2201      	movs	r2, #1
 80052d2:	2104      	movs	r1, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fe11 	bl	8005efc <TIM_CCxChannelCmd>
      break;
 80052da:	e00e      	b.n	80052fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2201      	movs	r2, #1
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fe09 	bl	8005efc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2201      	movs	r2, #1
 80052f0:	2104      	movs	r1, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fe02 	bl	8005efc <TIM_CCxChannelCmd>
      break;
 80052f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_TIM_Encoder_Stop+0x18>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b04      	cmp	r3, #4
 8005328:	d008      	beq.n	800533c <HAL_TIM_Encoder_Stop+0x28>
 800532a:	e00f      	b.n	800534c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fde1 	bl	8005efc <TIM_CCxChannelCmd>
      break;
 800533a:	e016      	b.n	800536a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2200      	movs	r2, #0
 8005342:	2104      	movs	r1, #4
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fdd9 	bl	8005efc <TIM_CCxChannelCmd>
      break;
 800534a:	e00e      	b.n	800536a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2200      	movs	r2, #0
 8005352:	2100      	movs	r1, #0
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fdd1 	bl	8005efc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2200      	movs	r2, #0
 8005360:	2104      	movs	r1, #4
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fdca 	bl	8005efc <TIM_CCxChannelCmd>
      break;
 8005368:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6a1a      	ldr	r2, [r3, #32]
 8005370:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10f      	bne.n	800539a <HAL_TIM_Encoder_Stop+0x86>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	f240 4344 	movw	r3, #1092	@ 0x444
 8005384:	4013      	ands	r3, r2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d107      	bne.n	800539a <HAL_TIM_Encoder_Stop+0x86>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0201 	bic.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_TIM_Encoder_Stop+0x92>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d148      	bne.n	8005438 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_Encoder_Stop+0xa2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053b4:	e023      	b.n	80053fe <HAL_TIM_Encoder_Stop+0xea>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_Encoder_Stop+0xb2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c4:	e01b      	b.n	80053fe <HAL_TIM_Encoder_Stop+0xea>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_Encoder_Stop+0xc2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d4:	e013      	b.n	80053fe <HAL_TIM_Encoder_Stop+0xea>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_Encoder_Stop+0xd2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053e4:	e00b      	b.n	80053fe <HAL_TIM_Encoder_Stop+0xea>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_Encoder_Stop+0xe2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f4:	e003      	b.n	80053fe <HAL_TIM_Encoder_Stop+0xea>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <HAL_TIM_Encoder_Stop+0xfa>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800540c:	e024      	b.n	8005458 <HAL_TIM_Encoder_Stop+0x144>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d104      	bne.n	800541e <HAL_TIM_Encoder_Stop+0x10a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800541c:	e01c      	b.n	8005458 <HAL_TIM_Encoder_Stop+0x144>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d104      	bne.n	800542e <HAL_TIM_Encoder_Stop+0x11a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800542c:	e014      	b.n	8005458 <HAL_TIM_Encoder_Stop+0x144>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8005436:	e00f      	b.n	8005458 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d020      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01b      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f06f 0202 	mvn.w	r2, #2
 8005496:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f9fd 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 80054b2:	e005      	b.n	80054c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f9ef 	bl	8005898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa00 	bl	80058c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d020      	beq.n	8005512 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d01b      	beq.n	8005512 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f06f 0204 	mvn.w	r2, #4
 80054e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f9d7 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 80054fe:	e005      	b.n	800550c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f9c9 	bl	8005898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f9da 	bl	80058c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d020      	beq.n	800555e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01b      	beq.n	800555e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f06f 0208 	mvn.w	r2, #8
 800552e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2204      	movs	r2, #4
 8005534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f9b1 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 800554a:	e005      	b.n	8005558 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f9a3 	bl	8005898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f9b4 	bl	80058c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	2b00      	cmp	r3, #0
 8005566:	d020      	beq.n	80055aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01b      	beq.n	80055aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f06f 0210 	mvn.w	r2, #16
 800557a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2208      	movs	r2, #8
 8005580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f98b 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 8005596:	e005      	b.n	80055a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f97d 	bl	8005898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f98e 	bl	80058c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00c      	beq.n	80055ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f06f 0201 	mvn.w	r2, #1
 80055c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fb fd05 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00c      	beq.n	80055fc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fd3e 	bl	8006078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fd36 	bl	800608c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00c      	beq.n	8005644 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f948 	bl	80058d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0220 	mvn.w	r2, #32
 8005660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fcfe 	bl	8006064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800568a:	2302      	movs	r3, #2
 800568c:	e0ff      	b.n	800588e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b14      	cmp	r3, #20
 800569a:	f200 80f0 	bhi.w	800587e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800569e:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	0800587f 	.word	0x0800587f
 80056ac:	0800587f 	.word	0x0800587f
 80056b0:	0800587f 	.word	0x0800587f
 80056b4:	08005739 	.word	0x08005739
 80056b8:	0800587f 	.word	0x0800587f
 80056bc:	0800587f 	.word	0x0800587f
 80056c0:	0800587f 	.word	0x0800587f
 80056c4:	0800577b 	.word	0x0800577b
 80056c8:	0800587f 	.word	0x0800587f
 80056cc:	0800587f 	.word	0x0800587f
 80056d0:	0800587f 	.word	0x0800587f
 80056d4:	080057bb 	.word	0x080057bb
 80056d8:	0800587f 	.word	0x0800587f
 80056dc:	0800587f 	.word	0x0800587f
 80056e0:	0800587f 	.word	0x0800587f
 80056e4:	080057fd 	.word	0x080057fd
 80056e8:	0800587f 	.word	0x0800587f
 80056ec:	0800587f 	.word	0x0800587f
 80056f0:	0800587f 	.word	0x0800587f
 80056f4:	0800583d 	.word	0x0800583d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f99e 	bl	8005a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0208 	orr.w	r2, r2, #8
 8005712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0204 	bic.w	r2, r2, #4
 8005722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6999      	ldr	r1, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	619a      	str	r2, [r3, #24]
      break;
 8005736:	e0a5      	b.n	8005884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f9f0 	bl	8005b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6999      	ldr	r1, [r3, #24]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	619a      	str	r2, [r3, #24]
      break;
 8005778:	e084      	b.n	8005884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fa47 	bl	8005c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0208 	orr.w	r2, r2, #8
 8005794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0204 	bic.w	r2, r2, #4
 80057a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69d9      	ldr	r1, [r3, #28]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	61da      	str	r2, [r3, #28]
      break;
 80057b8:	e064      	b.n	8005884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fa9d 	bl	8005d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69d9      	ldr	r1, [r3, #28]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	021a      	lsls	r2, r3, #8
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	61da      	str	r2, [r3, #28]
      break;
 80057fa:	e043      	b.n	8005884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fad4 	bl	8005db0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0208 	orr.w	r2, r2, #8
 8005816:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0204 	bic.w	r2, r2, #4
 8005826:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800583a:	e023      	b.n	8005884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fb06 	bl	8005e54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005856:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005866:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800587c:	e002      	b.n	8005884 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
      break;
 8005882:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800588c:	7dfb      	ldrb	r3, [r7, #23]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop

08005898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a46      	ldr	r2, [pc, #280]	@ (8005a14 <TIM_Base_SetConfig+0x12c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d013      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005906:	d00f      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a43      	ldr	r2, [pc, #268]	@ (8005a18 <TIM_Base_SetConfig+0x130>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00b      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a42      	ldr	r2, [pc, #264]	@ (8005a1c <TIM_Base_SetConfig+0x134>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d007      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a41      	ldr	r2, [pc, #260]	@ (8005a20 <TIM_Base_SetConfig+0x138>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a40      	ldr	r2, [pc, #256]	@ (8005a24 <TIM_Base_SetConfig+0x13c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d108      	bne.n	800593a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a35      	ldr	r2, [pc, #212]	@ (8005a14 <TIM_Base_SetConfig+0x12c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d02b      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005948:	d027      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a32      	ldr	r2, [pc, #200]	@ (8005a18 <TIM_Base_SetConfig+0x130>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d023      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a31      	ldr	r2, [pc, #196]	@ (8005a1c <TIM_Base_SetConfig+0x134>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01f      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a30      	ldr	r2, [pc, #192]	@ (8005a20 <TIM_Base_SetConfig+0x138>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01b      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2f      	ldr	r2, [pc, #188]	@ (8005a24 <TIM_Base_SetConfig+0x13c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d017      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2e      	ldr	r2, [pc, #184]	@ (8005a28 <TIM_Base_SetConfig+0x140>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2d      	ldr	r2, [pc, #180]	@ (8005a2c <TIM_Base_SetConfig+0x144>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00f      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a30 <TIM_Base_SetConfig+0x148>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00b      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2b      	ldr	r2, [pc, #172]	@ (8005a34 <TIM_Base_SetConfig+0x14c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d007      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2a      	ldr	r2, [pc, #168]	@ (8005a38 <TIM_Base_SetConfig+0x150>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d003      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a29      	ldr	r2, [pc, #164]	@ (8005a3c <TIM_Base_SetConfig+0x154>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d108      	bne.n	80059ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a10      	ldr	r2, [pc, #64]	@ (8005a14 <TIM_Base_SetConfig+0x12c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_Base_SetConfig+0xf8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a12      	ldr	r2, [pc, #72]	@ (8005a24 <TIM_Base_SetConfig+0x13c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d103      	bne.n	80059e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f023 0201 	bic.w	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	611a      	str	r2, [r3, #16]
  }
}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800
 8005a34:	40001800 	.word	0x40001800
 8005a38:	40001c00 	.word	0x40001c00
 8005a3c:	40002000 	.word	0x40002000

08005a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f023 0201 	bic.w	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b18 <TIM_OC1_SetConfig+0xd8>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f023 0302 	bic.w	r3, r3, #2
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a21      	ldr	r2, [pc, #132]	@ (8005b1c <TIM_OC1_SetConfig+0xdc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_OC1_SetConfig+0x64>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a20      	ldr	r2, [pc, #128]	@ (8005b20 <TIM_OC1_SetConfig+0xe0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10c      	bne.n	8005abe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0308 	bic.w	r3, r3, #8
 8005aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a16      	ldr	r2, [pc, #88]	@ (8005b1c <TIM_OC1_SetConfig+0xdc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC1_SetConfig+0x8e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a15      	ldr	r2, [pc, #84]	@ (8005b20 <TIM_OC1_SetConfig+0xe0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d111      	bne.n	8005af2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	fffeff8f 	.word	0xfffeff8f
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400

08005b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	f023 0210 	bic.w	r2, r3, #16
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8005c08 <TIM_OC2_SetConfig+0xe4>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 0320 	bic.w	r3, r3, #32
 8005b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a23      	ldr	r2, [pc, #140]	@ (8005c0c <TIM_OC2_SetConfig+0xe8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC2_SetConfig+0x68>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a22      	ldr	r2, [pc, #136]	@ (8005c10 <TIM_OC2_SetConfig+0xec>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10d      	bne.n	8005ba8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a18      	ldr	r2, [pc, #96]	@ (8005c0c <TIM_OC2_SetConfig+0xe8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC2_SetConfig+0x94>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a17      	ldr	r2, [pc, #92]	@ (8005c10 <TIM_OC2_SetConfig+0xec>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d113      	bne.n	8005be0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	feff8fff 	.word	0xfeff8fff
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40010400 	.word	0x40010400

08005c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf4 <TIM_OC3_SetConfig+0xe0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0303 	bic.w	r3, r3, #3
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a22      	ldr	r2, [pc, #136]	@ (8005cf8 <TIM_OC3_SetConfig+0xe4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_OC3_SetConfig+0x66>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a21      	ldr	r2, [pc, #132]	@ (8005cfc <TIM_OC3_SetConfig+0xe8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10d      	bne.n	8005c96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a17      	ldr	r2, [pc, #92]	@ (8005cf8 <TIM_OC3_SetConfig+0xe4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC3_SetConfig+0x92>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a16      	ldr	r2, [pc, #88]	@ (8005cfc <TIM_OC3_SetConfig+0xe8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d113      	bne.n	8005cce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	fffeff8f 	.word	0xfffeff8f
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40010400 	.word	0x40010400

08005d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005da4 <TIM_OC4_SetConfig+0xa4>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	031b      	lsls	r3, r3, #12
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a13      	ldr	r2, [pc, #76]	@ (8005da8 <TIM_OC4_SetConfig+0xa8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC4_SetConfig+0x68>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a12      	ldr	r2, [pc, #72]	@ (8005dac <TIM_OC4_SetConfig+0xac>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d109      	bne.n	8005d7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	019b      	lsls	r3, r3, #6
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	feff8fff 	.word	0xfeff8fff
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40010400 	.word	0x40010400

08005db0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4b1b      	ldr	r3, [pc, #108]	@ (8005e48 <TIM_OC5_SetConfig+0x98>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005df0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a12      	ldr	r2, [pc, #72]	@ (8005e4c <TIM_OC5_SetConfig+0x9c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_OC5_SetConfig+0x5e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a11      	ldr	r2, [pc, #68]	@ (8005e50 <TIM_OC5_SetConfig+0xa0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d109      	bne.n	8005e22 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	621a      	str	r2, [r3, #32]
}
 8005e3c:	bf00      	nop
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	fffeff8f 	.word	0xfffeff8f
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400

08005e54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ef0 <TIM_OC6_SetConfig+0x9c>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	051b      	lsls	r3, r3, #20
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a13      	ldr	r2, [pc, #76]	@ (8005ef4 <TIM_OC6_SetConfig+0xa0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC6_SetConfig+0x60>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a12      	ldr	r2, [pc, #72]	@ (8005ef8 <TIM_OC6_SetConfig+0xa4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d109      	bne.n	8005ec8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	feff8fff 	.word	0xfeff8fff
 8005ef4:	40010000 	.word	0x40010000
 8005ef8:	40010400 	.word	0x40010400

08005efc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	2201      	movs	r2, #1
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1a      	ldr	r2, [r3, #32]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	401a      	ands	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f003 031f 	and.w	r3, r3, #31
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e06d      	b.n	800603c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a30      	ldr	r2, [pc, #192]	@ (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d004      	beq.n	8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800604c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d108      	bne.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a20      	ldr	r2, [pc, #128]	@ (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd2:	d01d      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d018      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8006054 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1a      	ldr	r2, [pc, #104]	@ (8006058 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a15      	ldr	r2, [pc, #84]	@ (800604c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a16      	ldr	r2, [pc, #88]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10c      	bne.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	4313      	orrs	r3, r2
 8006020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	40010000 	.word	0x40010000
 800604c:	40010400 	.word	0x40010400
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40014000 	.word	0x40014000
 8006060:	40001800 	.word	0x40001800

08006064 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e040      	b.n	8006134 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fc f9b4 	bl	8002430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2224      	movs	r2, #36	@ 0x24
 80060cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fe6c 	bl	8006dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fc05 	bl	80068fc <UART_SetConfig>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e01b      	b.n	8006134 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800610a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800611a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 feeb 	bl	8006f08 <UART_CheckIdleState>
 8006132:	4603      	mov	r3, r0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	@ 0x28
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006150:	2b20      	cmp	r3, #32
 8006152:	d177      	bne.n	8006244 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_UART_Transmit+0x24>
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e070      	b.n	8006246 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2221      	movs	r2, #33	@ 0x21
 8006170:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006172:	f7fc fb97 	bl	80028a4 <HAL_GetTick>
 8006176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006190:	d108      	bne.n	80061a4 <HAL_UART_Transmit+0x68>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d104      	bne.n	80061a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e003      	b.n	80061ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061ac:	e02f      	b.n	800620e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2180      	movs	r1, #128	@ 0x80
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 ff4d 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d004      	beq.n	80061ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e03b      	b.n	8006246 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10b      	bne.n	80061ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	3302      	adds	r3, #2
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e007      	b.n	80061fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	781a      	ldrb	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	3301      	adds	r3, #1
 80061fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1c9      	bne.n	80061ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	2140      	movs	r1, #64	@ 0x40
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 ff17 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e005      	b.n	8006246 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	e000      	b.n	8006246 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006244:	2302      	movs	r3, #2
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b08a      	sub	sp, #40	@ 0x28
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	4613      	mov	r3, r2
 800625a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006262:	2b20      	cmp	r3, #32
 8006264:	d132      	bne.n	80062cc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_UART_Receive_IT+0x24>
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e02b      	b.n	80062ce <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d018      	beq.n	80062bc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	613b      	str	r3, [r7, #16]
   return(result);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800629e:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	69f9      	ldr	r1, [r7, #28]
 80062ae:	6a3a      	ldr	r2, [r7, #32]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e6      	bne.n	800628a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	461a      	mov	r2, r3
 80062c0:	68b9      	ldr	r1, [r7, #8]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 ff36 	bl	8007134 <UART_Start_Receive_IT>
 80062c8:	4603      	mov	r3, r0
 80062ca:	e000      	b.n	80062ce <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3728      	adds	r7, #40	@ 0x28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b0ba      	sub	sp, #232	@ 0xe8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006302:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006306:	4013      	ands	r3, r2
 8006308:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800630c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d115      	bne.n	8006340 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00f      	beq.n	8006340 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d009      	beq.n	8006340 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 82ac 	beq.w	800688e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
      }
      return;
 800633e:	e2a6      	b.n	800688e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8117 	beq.w	8006578 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800634a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006356:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800635a:	4b85      	ldr	r3, [pc, #532]	@ (8006570 <HAL_UART_IRQHandler+0x298>)
 800635c:	4013      	ands	r3, r2
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 810a 	beq.w	8006578 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d011      	beq.n	8006394 <HAL_UART_IRQHandler+0xbc>
 8006370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2201      	movs	r2, #1
 8006382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800638a:	f043 0201 	orr.w	r2, r3, #1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d011      	beq.n	80063c4 <HAL_UART_IRQHandler+0xec>
 80063a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2202      	movs	r2, #2
 80063b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ba:	f043 0204 	orr.w	r2, r3, #4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d011      	beq.n	80063f4 <HAL_UART_IRQHandler+0x11c>
 80063d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2204      	movs	r2, #4
 80063e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ea:	f043 0202 	orr.w	r2, r3, #2
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d017      	beq.n	8006430 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b00      	cmp	r3, #0
 800640a:	d105      	bne.n	8006418 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800640c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006410:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2208      	movs	r2, #8
 800641e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006426:	f043 0208 	orr.w	r2, r3, #8
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006438:	2b00      	cmp	r3, #0
 800643a:	d012      	beq.n	8006462 <HAL_UART_IRQHandler+0x18a>
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006440:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00c      	beq.n	8006462 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8212 	beq.w	8006892 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800646e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00d      	beq.n	8006496 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800647a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800649c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064aa:	2b40      	cmp	r3, #64	@ 0x40
 80064ac:	d005      	beq.n	80064ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d04f      	beq.n	800655a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 ff00 	bl	80072c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ca:	2b40      	cmp	r3, #64	@ 0x40
 80064cc:	d141      	bne.n	8006552 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1d9      	bne.n	80064ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800651e:	2b00      	cmp	r3, #0
 8006520:	d013      	beq.n	800654a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006526:	4a13      	ldr	r2, [pc, #76]	@ (8006574 <HAL_UART_IRQHandler+0x29c>)
 8006528:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800652e:	4618      	mov	r0, r3
 8006530:	f7fc fc18 	bl	8002d64 <HAL_DMA_Abort_IT>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d017      	beq.n	800656a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800653e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006544:	4610      	mov	r0, r2
 8006546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006548:	e00f      	b.n	800656a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f9b6 	bl	80068bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006550:	e00b      	b.n	800656a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f9b2 	bl	80068bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006558:	e007      	b.n	800656a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f9ae 	bl	80068bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006568:	e193      	b.n	8006892 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656a:	bf00      	nop
    return;
 800656c:	e191      	b.n	8006892 <HAL_UART_IRQHandler+0x5ba>
 800656e:	bf00      	nop
 8006570:	04000120 	.word	0x04000120
 8006574:	08007389 	.word	0x08007389

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800657c:	2b01      	cmp	r3, #1
 800657e:	f040 814c 	bne.w	800681a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8145 	beq.w	800681a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 813e 	beq.w	800681a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2210      	movs	r2, #16
 80065a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b0:	2b40      	cmp	r3, #64	@ 0x40
 80065b2:	f040 80b6 	bne.w	8006722 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8165 	beq.w	8006896 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d6:	429a      	cmp	r2, r3
 80065d8:	f080 815d 	bcs.w	8006896 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065f0:	f000 8086 	beq.w	8006700 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800660c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800661e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006622:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800662a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1da      	bne.n	80065f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800664e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3308      	adds	r3, #8
 800665e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006662:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006666:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800666a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e1      	bne.n	800663e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800668a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800668c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3308      	adds	r3, #8
 800669a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800669e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e3      	bne.n	800667a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d0:	f023 0310 	bic.w	r3, r3, #16
 80066d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e4      	bne.n	80066c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fc fac2 	bl	8002c84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006712:	b29b      	uxth	r3, r3
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	b29b      	uxth	r3, r3
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f8d8 	bl	80068d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006720:	e0b9      	b.n	8006896 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800672e:	b29b      	uxth	r3, r3
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80ab 	beq.w	800689a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80a6 	beq.w	800689a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800675c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006762:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006770:	647b      	str	r3, [r7, #68]	@ 0x44
 8006772:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800677e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e4      	bne.n	800674e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	623b      	str	r3, [r7, #32]
   return(result);
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	f023 0301 	bic.w	r3, r3, #1
 800679a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80067aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e3      	bne.n	8006784 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f023 0310 	bic.w	r3, r3, #16
 80067e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	69b9      	ldr	r1, [r7, #24]
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e4      	bne.n	80067d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2202      	movs	r2, #2
 800680a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800680c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f85c 	bl	80068d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006818:	e03f      	b.n	800689a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800681e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00e      	beq.n	8006844 <HAL_UART_IRQHandler+0x56c>
 8006826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800682a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800683a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f853 	bl	80068e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006842:	e02d      	b.n	80068a0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00e      	beq.n	800686e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01c      	beq.n	800689e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
    }
    return;
 800686c:	e017      	b.n	800689e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d012      	beq.n	80068a0 <HAL_UART_IRQHandler+0x5c8>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800687e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00c      	beq.n	80068a0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fd94 	bl	80073b4 <UART_EndTransmit_IT>
    return;
 800688c:	e008      	b.n	80068a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800688e:	bf00      	nop
 8006890:	e006      	b.n	80068a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006892:	bf00      	nop
 8006894:	e004      	b.n	80068a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006896:	bf00      	nop
 8006898:	e002      	b.n	80068a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 800689e:	bf00      	nop
  }

}
 80068a0:	37e8      	adds	r7, #232	@ 0xe8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop

080068a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4ba6      	ldr	r3, [pc, #664]	@ (8006bc0 <UART_SetConfig+0x2c4>)
 8006928:	4013      	ands	r3, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	430b      	orrs	r3, r1
 8006932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	430a      	orrs	r2, r1
 800696c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a94      	ldr	r2, [pc, #592]	@ (8006bc4 <UART_SetConfig+0x2c8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d120      	bne.n	80069ba <UART_SetConfig+0xbe>
 8006978:	4b93      	ldr	r3, [pc, #588]	@ (8006bc8 <UART_SetConfig+0x2cc>)
 800697a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	2b03      	cmp	r3, #3
 8006984:	d816      	bhi.n	80069b4 <UART_SetConfig+0xb8>
 8006986:	a201      	add	r2, pc, #4	@ (adr r2, 800698c <UART_SetConfig+0x90>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069a9 	.word	0x080069a9
 8006994:	080069a3 	.word	0x080069a3
 8006998:	080069af 	.word	0x080069af
 800699c:	2301      	movs	r3, #1
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e150      	b.n	8006c44 <UART_SetConfig+0x348>
 80069a2:	2302      	movs	r3, #2
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e14d      	b.n	8006c44 <UART_SetConfig+0x348>
 80069a8:	2304      	movs	r3, #4
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e14a      	b.n	8006c44 <UART_SetConfig+0x348>
 80069ae:	2308      	movs	r3, #8
 80069b0:	77fb      	strb	r3, [r7, #31]
 80069b2:	e147      	b.n	8006c44 <UART_SetConfig+0x348>
 80069b4:	2310      	movs	r3, #16
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	e144      	b.n	8006c44 <UART_SetConfig+0x348>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a83      	ldr	r2, [pc, #524]	@ (8006bcc <UART_SetConfig+0x2d0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d132      	bne.n	8006a2a <UART_SetConfig+0x12e>
 80069c4:	4b80      	ldr	r3, [pc, #512]	@ (8006bc8 <UART_SetConfig+0x2cc>)
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ca:	f003 030c 	and.w	r3, r3, #12
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	d828      	bhi.n	8006a24 <UART_SetConfig+0x128>
 80069d2:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <UART_SetConfig+0xdc>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006a25 	.word	0x08006a25
 80069e0:	08006a25 	.word	0x08006a25
 80069e4:	08006a25 	.word	0x08006a25
 80069e8:	08006a19 	.word	0x08006a19
 80069ec:	08006a25 	.word	0x08006a25
 80069f0:	08006a25 	.word	0x08006a25
 80069f4:	08006a25 	.word	0x08006a25
 80069f8:	08006a13 	.word	0x08006a13
 80069fc:	08006a25 	.word	0x08006a25
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a25 	.word	0x08006a25
 8006a08:	08006a1f 	.word	0x08006a1f
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e118      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a12:	2302      	movs	r3, #2
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e115      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e112      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a1e:	2308      	movs	r3, #8
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e10f      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a24:	2310      	movs	r3, #16
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e10c      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a68      	ldr	r2, [pc, #416]	@ (8006bd0 <UART_SetConfig+0x2d4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d120      	bne.n	8006a76 <UART_SetConfig+0x17a>
 8006a34:	4b64      	ldr	r3, [pc, #400]	@ (8006bc8 <UART_SetConfig+0x2cc>)
 8006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a3e:	2b30      	cmp	r3, #48	@ 0x30
 8006a40:	d013      	beq.n	8006a6a <UART_SetConfig+0x16e>
 8006a42:	2b30      	cmp	r3, #48	@ 0x30
 8006a44:	d814      	bhi.n	8006a70 <UART_SetConfig+0x174>
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d009      	beq.n	8006a5e <UART_SetConfig+0x162>
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d810      	bhi.n	8006a70 <UART_SetConfig+0x174>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <UART_SetConfig+0x15c>
 8006a52:	2b10      	cmp	r3, #16
 8006a54:	d006      	beq.n	8006a64 <UART_SetConfig+0x168>
 8006a56:	e00b      	b.n	8006a70 <UART_SetConfig+0x174>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e0f2      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	77fb      	strb	r3, [r7, #31]
 8006a62:	e0ef      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a64:	2304      	movs	r3, #4
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e0ec      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	77fb      	strb	r3, [r7, #31]
 8006a6e:	e0e9      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a70:	2310      	movs	r3, #16
 8006a72:	77fb      	strb	r3, [r7, #31]
 8006a74:	e0e6      	b.n	8006c44 <UART_SetConfig+0x348>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a56      	ldr	r2, [pc, #344]	@ (8006bd4 <UART_SetConfig+0x2d8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d120      	bne.n	8006ac2 <UART_SetConfig+0x1c6>
 8006a80:	4b51      	ldr	r3, [pc, #324]	@ (8006bc8 <UART_SetConfig+0x2cc>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a8c:	d013      	beq.n	8006ab6 <UART_SetConfig+0x1ba>
 8006a8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a90:	d814      	bhi.n	8006abc <UART_SetConfig+0x1c0>
 8006a92:	2b80      	cmp	r3, #128	@ 0x80
 8006a94:	d009      	beq.n	8006aaa <UART_SetConfig+0x1ae>
 8006a96:	2b80      	cmp	r3, #128	@ 0x80
 8006a98:	d810      	bhi.n	8006abc <UART_SetConfig+0x1c0>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <UART_SetConfig+0x1a8>
 8006a9e:	2b40      	cmp	r3, #64	@ 0x40
 8006aa0:	d006      	beq.n	8006ab0 <UART_SetConfig+0x1b4>
 8006aa2:	e00b      	b.n	8006abc <UART_SetConfig+0x1c0>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e0cc      	b.n	8006c44 <UART_SetConfig+0x348>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e0c9      	b.n	8006c44 <UART_SetConfig+0x348>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e0c6      	b.n	8006c44 <UART_SetConfig+0x348>
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e0c3      	b.n	8006c44 <UART_SetConfig+0x348>
 8006abc:	2310      	movs	r3, #16
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e0c0      	b.n	8006c44 <UART_SetConfig+0x348>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a44      	ldr	r2, [pc, #272]	@ (8006bd8 <UART_SetConfig+0x2dc>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d125      	bne.n	8006b18 <UART_SetConfig+0x21c>
 8006acc:	4b3e      	ldr	r3, [pc, #248]	@ (8006bc8 <UART_SetConfig+0x2cc>)
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ada:	d017      	beq.n	8006b0c <UART_SetConfig+0x210>
 8006adc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ae0:	d817      	bhi.n	8006b12 <UART_SetConfig+0x216>
 8006ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae6:	d00b      	beq.n	8006b00 <UART_SetConfig+0x204>
 8006ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aec:	d811      	bhi.n	8006b12 <UART_SetConfig+0x216>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <UART_SetConfig+0x1fe>
 8006af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af6:	d006      	beq.n	8006b06 <UART_SetConfig+0x20a>
 8006af8:	e00b      	b.n	8006b12 <UART_SetConfig+0x216>
 8006afa:	2300      	movs	r3, #0
 8006afc:	77fb      	strb	r3, [r7, #31]
 8006afe:	e0a1      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b00:	2302      	movs	r3, #2
 8006b02:	77fb      	strb	r3, [r7, #31]
 8006b04:	e09e      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b06:	2304      	movs	r3, #4
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e09b      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b0c:	2308      	movs	r3, #8
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e098      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b12:	2310      	movs	r3, #16
 8006b14:	77fb      	strb	r3, [r7, #31]
 8006b16:	e095      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a2f      	ldr	r2, [pc, #188]	@ (8006bdc <UART_SetConfig+0x2e0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d125      	bne.n	8006b6e <UART_SetConfig+0x272>
 8006b22:	4b29      	ldr	r3, [pc, #164]	@ (8006bc8 <UART_SetConfig+0x2cc>)
 8006b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b30:	d017      	beq.n	8006b62 <UART_SetConfig+0x266>
 8006b32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b36:	d817      	bhi.n	8006b68 <UART_SetConfig+0x26c>
 8006b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b3c:	d00b      	beq.n	8006b56 <UART_SetConfig+0x25a>
 8006b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b42:	d811      	bhi.n	8006b68 <UART_SetConfig+0x26c>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <UART_SetConfig+0x254>
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b4c:	d006      	beq.n	8006b5c <UART_SetConfig+0x260>
 8006b4e:	e00b      	b.n	8006b68 <UART_SetConfig+0x26c>
 8006b50:	2301      	movs	r3, #1
 8006b52:	77fb      	strb	r3, [r7, #31]
 8006b54:	e076      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b56:	2302      	movs	r3, #2
 8006b58:	77fb      	strb	r3, [r7, #31]
 8006b5a:	e073      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	77fb      	strb	r3, [r7, #31]
 8006b60:	e070      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b62:	2308      	movs	r3, #8
 8006b64:	77fb      	strb	r3, [r7, #31]
 8006b66:	e06d      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	77fb      	strb	r3, [r7, #31]
 8006b6c:	e06a      	b.n	8006c44 <UART_SetConfig+0x348>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1b      	ldr	r2, [pc, #108]	@ (8006be0 <UART_SetConfig+0x2e4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d138      	bne.n	8006bea <UART_SetConfig+0x2ee>
 8006b78:	4b13      	ldr	r3, [pc, #76]	@ (8006bc8 <UART_SetConfig+0x2cc>)
 8006b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006b82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b86:	d017      	beq.n	8006bb8 <UART_SetConfig+0x2bc>
 8006b88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b8c:	d82a      	bhi.n	8006be4 <UART_SetConfig+0x2e8>
 8006b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b92:	d00b      	beq.n	8006bac <UART_SetConfig+0x2b0>
 8006b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b98:	d824      	bhi.n	8006be4 <UART_SetConfig+0x2e8>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <UART_SetConfig+0x2aa>
 8006b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ba2:	d006      	beq.n	8006bb2 <UART_SetConfig+0x2b6>
 8006ba4:	e01e      	b.n	8006be4 <UART_SetConfig+0x2e8>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e04b      	b.n	8006c44 <UART_SetConfig+0x348>
 8006bac:	2302      	movs	r3, #2
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e048      	b.n	8006c44 <UART_SetConfig+0x348>
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	77fb      	strb	r3, [r7, #31]
 8006bb6:	e045      	b.n	8006c44 <UART_SetConfig+0x348>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e042      	b.n	8006c44 <UART_SetConfig+0x348>
 8006bbe:	bf00      	nop
 8006bc0:	efff69f3 	.word	0xefff69f3
 8006bc4:	40011000 	.word	0x40011000
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	40004400 	.word	0x40004400
 8006bd0:	40004800 	.word	0x40004800
 8006bd4:	40004c00 	.word	0x40004c00
 8006bd8:	40005000 	.word	0x40005000
 8006bdc:	40011400 	.word	0x40011400
 8006be0:	40007800 	.word	0x40007800
 8006be4:	2310      	movs	r3, #16
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e02c      	b.n	8006c44 <UART_SetConfig+0x348>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a72      	ldr	r2, [pc, #456]	@ (8006db8 <UART_SetConfig+0x4bc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d125      	bne.n	8006c40 <UART_SetConfig+0x344>
 8006bf4:	4b71      	ldr	r3, [pc, #452]	@ (8006dbc <UART_SetConfig+0x4c0>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006bfe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c02:	d017      	beq.n	8006c34 <UART_SetConfig+0x338>
 8006c04:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c08:	d817      	bhi.n	8006c3a <UART_SetConfig+0x33e>
 8006c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c0e:	d00b      	beq.n	8006c28 <UART_SetConfig+0x32c>
 8006c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c14:	d811      	bhi.n	8006c3a <UART_SetConfig+0x33e>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <UART_SetConfig+0x326>
 8006c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c1e:	d006      	beq.n	8006c2e <UART_SetConfig+0x332>
 8006c20:	e00b      	b.n	8006c3a <UART_SetConfig+0x33e>
 8006c22:	2300      	movs	r3, #0
 8006c24:	77fb      	strb	r3, [r7, #31]
 8006c26:	e00d      	b.n	8006c44 <UART_SetConfig+0x348>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	77fb      	strb	r3, [r7, #31]
 8006c2c:	e00a      	b.n	8006c44 <UART_SetConfig+0x348>
 8006c2e:	2304      	movs	r3, #4
 8006c30:	77fb      	strb	r3, [r7, #31]
 8006c32:	e007      	b.n	8006c44 <UART_SetConfig+0x348>
 8006c34:	2308      	movs	r3, #8
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e004      	b.n	8006c44 <UART_SetConfig+0x348>
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e001      	b.n	8006c44 <UART_SetConfig+0x348>
 8006c40:	2310      	movs	r3, #16
 8006c42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c4c:	d15b      	bne.n	8006d06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c4e:	7ffb      	ldrb	r3, [r7, #31]
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d828      	bhi.n	8006ca6 <UART_SetConfig+0x3aa>
 8006c54:	a201      	add	r2, pc, #4	@ (adr r2, 8006c5c <UART_SetConfig+0x360>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c81 	.word	0x08006c81
 8006c60:	08006c89 	.word	0x08006c89
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	08006ca7 	.word	0x08006ca7
 8006c6c:	08006c97 	.word	0x08006c97
 8006c70:	08006ca7 	.word	0x08006ca7
 8006c74:	08006ca7 	.word	0x08006ca7
 8006c78:	08006ca7 	.word	0x08006ca7
 8006c7c:	08006c9f 	.word	0x08006c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c80:	f7fd faf4 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8006c84:	61b8      	str	r0, [r7, #24]
        break;
 8006c86:	e013      	b.n	8006cb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c88:	f7fd fb04 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8006c8c:	61b8      	str	r0, [r7, #24]
        break;
 8006c8e:	e00f      	b.n	8006cb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c90:	4b4b      	ldr	r3, [pc, #300]	@ (8006dc0 <UART_SetConfig+0x4c4>)
 8006c92:	61bb      	str	r3, [r7, #24]
        break;
 8006c94:	e00c      	b.n	8006cb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c96:	f7fd f9d7 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8006c9a:	61b8      	str	r0, [r7, #24]
        break;
 8006c9c:	e008      	b.n	8006cb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca2:	61bb      	str	r3, [r7, #24]
        break;
 8006ca4:	e004      	b.n	8006cb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	77bb      	strb	r3, [r7, #30]
        break;
 8006cae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d074      	beq.n	8006da0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	005a      	lsls	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	441a      	add	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b0f      	cmp	r3, #15
 8006cd0:	d916      	bls.n	8006d00 <UART_SetConfig+0x404>
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd8:	d212      	bcs.n	8006d00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f023 030f 	bic.w	r3, r3, #15
 8006ce2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	89fb      	ldrh	r3, [r7, #14]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	89fa      	ldrh	r2, [r7, #14]
 8006cfc:	60da      	str	r2, [r3, #12]
 8006cfe:	e04f      	b.n	8006da0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	77bb      	strb	r3, [r7, #30]
 8006d04:	e04c      	b.n	8006da0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d06:	7ffb      	ldrb	r3, [r7, #31]
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d828      	bhi.n	8006d5e <UART_SetConfig+0x462>
 8006d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <UART_SetConfig+0x418>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d41 	.word	0x08006d41
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	08006d5f 	.word	0x08006d5f
 8006d24:	08006d4f 	.word	0x08006d4f
 8006d28:	08006d5f 	.word	0x08006d5f
 8006d2c:	08006d5f 	.word	0x08006d5f
 8006d30:	08006d5f 	.word	0x08006d5f
 8006d34:	08006d57 	.word	0x08006d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d38:	f7fd fa98 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8006d3c:	61b8      	str	r0, [r7, #24]
        break;
 8006d3e:	e013      	b.n	8006d68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d40:	f7fd faa8 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8006d44:	61b8      	str	r0, [r7, #24]
        break;
 8006d46:	e00f      	b.n	8006d68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d48:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc0 <UART_SetConfig+0x4c4>)
 8006d4a:	61bb      	str	r3, [r7, #24]
        break;
 8006d4c:	e00c      	b.n	8006d68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d4e:	f7fd f97b 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8006d52:	61b8      	str	r0, [r7, #24]
        break;
 8006d54:	e008      	b.n	8006d68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d5a:	61bb      	str	r3, [r7, #24]
        break;
 8006d5c:	e004      	b.n	8006d68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	77bb      	strb	r3, [r7, #30]
        break;
 8006d66:	bf00      	nop
    }

    if (pclk != 0U)
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d018      	beq.n	8006da0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	085a      	lsrs	r2, r3, #1
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	441a      	add	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	2b0f      	cmp	r3, #15
 8006d86:	d909      	bls.n	8006d9c <UART_SetConfig+0x4a0>
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d8e:	d205      	bcs.n	8006d9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	60da      	str	r2, [r3, #12]
 8006d9a:	e001      	b.n	8006da0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006dac:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3720      	adds	r7, #32
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	40007c00 	.word	0x40007c00
 8006dbc:	40023800 	.word	0x40023800
 8006dc0:	00f42400 	.word	0x00f42400

08006dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01a      	beq.n	8006eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ec2:	d10a      	bne.n	8006eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b098      	sub	sp, #96	@ 0x60
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f18:	f7fb fcc4 	bl	80028a4 <HAL_GetTick>
 8006f1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d12e      	bne.n	8006f8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f34:	2200      	movs	r2, #0
 8006f36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f88c 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d021      	beq.n	8006f8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e062      	b.n	8007050 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d149      	bne.n	800702c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f856 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d03c      	beq.n	800702c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	623b      	str	r3, [r7, #32]
   return(result);
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e6      	bne.n	8006fb2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3308      	adds	r3, #8
 8007002:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007004:	61fa      	str	r2, [r7, #28]
 8007006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	69b9      	ldr	r1, [r7, #24]
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	617b      	str	r3, [r7, #20]
   return(result);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e011      	b.n	8007050 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3758      	adds	r7, #88	@ 0x58
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007068:	e04f      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d04b      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007072:	f7fb fc17 	bl	80028a4 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	429a      	cmp	r2, r3
 8007080:	d302      	bcc.n	8007088 <UART_WaitOnFlagUntilTimeout+0x30>
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e04e      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d037      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b80      	cmp	r3, #128	@ 0x80
 800709e:	d034      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b40      	cmp	r3, #64	@ 0x40
 80070a4:	d031      	beq.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d110      	bne.n	80070d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2208      	movs	r2, #8
 80070ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f8ff 	bl	80072c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2208      	movs	r2, #8
 80070c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e029      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070e4:	d111      	bne.n	800710a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f8e5 	bl	80072c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e00f      	b.n	800712a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69da      	ldr	r2, [r3, #28]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4013      	ands	r3, r2
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	429a      	cmp	r2, r3
 8007118:	bf0c      	ite	eq
 800711a:	2301      	moveq	r3, #1
 800711c:	2300      	movne	r3, #0
 800711e:	b2db      	uxtb	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	429a      	cmp	r2, r3
 8007126:	d0a0      	beq.n	800706a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007134:	b480      	push	{r7}
 8007136:	b097      	sub	sp, #92	@ 0x5c
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007166:	d10e      	bne.n	8007186 <UART_Start_Receive_IT+0x52>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d105      	bne.n	800717c <UART_Start_Receive_IT+0x48>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007176:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800717a:	e02d      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	22ff      	movs	r2, #255	@ 0xff
 8007180:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007184:	e028      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10d      	bne.n	80071aa <UART_Start_Receive_IT+0x76>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <UART_Start_Receive_IT+0x6c>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	22ff      	movs	r2, #255	@ 0xff
 800719a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800719e:	e01b      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	227f      	movs	r2, #127	@ 0x7f
 80071a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071a8:	e016      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071b2:	d10d      	bne.n	80071d0 <UART_Start_Receive_IT+0x9c>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <UART_Start_Receive_IT+0x92>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	227f      	movs	r2, #127	@ 0x7f
 80071c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071c4:	e008      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	223f      	movs	r2, #63	@ 0x3f
 80071ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071ce:	e003      	b.n	80071d8 <UART_Start_Receive_IT+0xa4>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2222      	movs	r2, #34	@ 0x22
 80071e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3308      	adds	r3, #8
 80071ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3308      	adds	r3, #8
 8007206:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007208:	64ba      	str	r2, [r7, #72]	@ 0x48
 800720a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800720e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007210:	e841 2300 	strex	r3, r2, [r1]
 8007214:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e5      	bne.n	80071e8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007224:	d107      	bne.n	8007236 <UART_Start_Receive_IT+0x102>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d103      	bne.n	8007236 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4a21      	ldr	r2, [pc, #132]	@ (80072b8 <UART_Start_Receive_IT+0x184>)
 8007232:	669a      	str	r2, [r3, #104]	@ 0x68
 8007234:	e002      	b.n	800723c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4a20      	ldr	r2, [pc, #128]	@ (80072bc <UART_Start_Receive_IT+0x188>)
 800723a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d019      	beq.n	8007278 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007262:	637b      	str	r3, [r7, #52]	@ 0x34
 8007264:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e6      	bne.n	8007244 <UART_Start_Receive_IT+0x110>
 8007276:	e018      	b.n	80072aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	613b      	str	r3, [r7, #16]
   return(result);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f043 0320 	orr.w	r3, r3, #32
 800728c:	653b      	str	r3, [r7, #80]	@ 0x50
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007296:	623b      	str	r3, [r7, #32]
 8007298:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	69f9      	ldr	r1, [r7, #28]
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e6      	bne.n	8007278 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	375c      	adds	r7, #92	@ 0x5c
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	080075b1 	.word	0x080075b1
 80072bc:	08007409 	.word	0x08007409

080072c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b095      	sub	sp, #84	@ 0x54
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80072e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e6      	bne.n	80072c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	61fb      	str	r3, [r7, #28]
   return(result);
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800731a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800731c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e5      	bne.n	80072fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007332:	2b01      	cmp	r3, #1
 8007334:	d118      	bne.n	8007368 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	60bb      	str	r3, [r7, #8]
   return(result);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f023 0310 	bic.w	r3, r3, #16
 800734a:	647b      	str	r3, [r7, #68]	@ 0x44
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007354:	61bb      	str	r3, [r7, #24]
 8007356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	613b      	str	r3, [r7, #16]
   return(result);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e6      	bne.n	8007336 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800737c:	bf00      	nop
 800737e:	3754      	adds	r7, #84	@ 0x54
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7ff fa88 	bl	80068bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6979      	ldr	r1, [r7, #20]
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	613b      	str	r3, [r7, #16]
   return(result);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e6      	bne.n	80073bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff fa54 	bl	80068a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007400:	bf00      	nop
 8007402:	3720      	adds	r7, #32
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b09c      	sub	sp, #112	@ 0x70
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007416:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007420:	2b22      	cmp	r3, #34	@ 0x22
 8007422:	f040 80b9 	bne.w	8007598 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007430:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007434:	b2d9      	uxtb	r1, r3
 8007436:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800743a:	b2da      	uxtb	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007440:	400a      	ands	r2, r1
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 809c 	bne.w	80075a8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800747e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007480:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800748e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007490:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800749c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e6      	bne.n	8007470 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3308      	adds	r3, #8
 80074a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80074c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e5      	bne.n	80074a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d018      	beq.n	800752a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	623b      	str	r3, [r7, #32]
   return(result);
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800750c:	663b      	str	r3, [r7, #96]	@ 0x60
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007516:	633b      	str	r3, [r7, #48]	@ 0x30
 8007518:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800751c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e6      	bne.n	80074f8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800752e:	2b01      	cmp	r3, #1
 8007530:	d12e      	bne.n	8007590 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	60fb      	str	r3, [r7, #12]
   return(result);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f023 0310 	bic.w	r3, r3, #16
 800754c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007556:	61fb      	str	r3, [r7, #28]
 8007558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	69b9      	ldr	r1, [r7, #24]
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	617b      	str	r3, [r7, #20]
   return(result);
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e6      	bne.n	8007538 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	f003 0310 	and.w	r3, r3, #16
 8007574:	2b10      	cmp	r3, #16
 8007576:	d103      	bne.n	8007580 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2210      	movs	r2, #16
 800757e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff f9a1 	bl	80068d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800758e:	e00b      	b.n	80075a8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7fa f855 	bl	8001640 <HAL_UART_RxCpltCallback>
}
 8007596:	e007      	b.n	80075a8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0208 	orr.w	r2, r2, #8
 80075a6:	619a      	str	r2, [r3, #24]
}
 80075a8:	bf00      	nop
 80075aa:	3770      	adds	r7, #112	@ 0x70
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b09c      	sub	sp, #112	@ 0x70
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c8:	2b22      	cmp	r3, #34	@ 0x22
 80075ca:	f040 80b9 	bne.w	8007740 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80075de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80075e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80075e6:	4013      	ands	r3, r2
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f2:	1c9a      	adds	r2, r3, #2
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	f040 809c 	bne.w	8007750 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007628:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800762c:	667b      	str	r3, [r7, #100]	@ 0x64
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007636:	657b      	str	r3, [r7, #84]	@ 0x54
 8007638:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800763c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e6      	bne.n	8007618 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3308      	adds	r3, #8
 8007650:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	663b      	str	r3, [r7, #96]	@ 0x60
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3308      	adds	r3, #8
 8007668:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800766a:	643a      	str	r2, [r7, #64]	@ 0x40
 800766c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e5      	bne.n	800764a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d018      	beq.n	80076d2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e6      	bne.n	80076a0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d12e      	bne.n	8007738 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f023 0310 	bic.w	r3, r3, #16
 80076f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076fe:	61bb      	str	r3, [r7, #24]
 8007700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6979      	ldr	r1, [r7, #20]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	613b      	str	r3, [r7, #16]
   return(result);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e6      	bne.n	80076e0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b10      	cmp	r3, #16
 800771e:	d103      	bne.n	8007728 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2210      	movs	r2, #16
 8007726:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff f8cd 	bl	80068d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007736:	e00b      	b.n	8007750 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7f9 ff81 	bl	8001640 <HAL_UART_RxCpltCallback>
}
 800773e:	e007      	b.n	8007750 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0208 	orr.w	r2, r2, #8
 800774e:	619a      	str	r2, [r3, #24]
}
 8007750:	bf00      	nop
 8007752:	3770      	adds	r7, #112	@ 0x70
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007758:	b084      	sub	sp, #16
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	f107 001c 	add.w	r0, r7, #28
 8007766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800776a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800776e:	2b01      	cmp	r3, #1
 8007770:	d121      	bne.n	80077b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007776:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	4b21      	ldr	r3, [pc, #132]	@ (8007808 <USB_CoreInit+0xb0>)
 8007784:	4013      	ands	r3, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007796:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800779a:	2b01      	cmp	r3, #1
 800779c:	d105      	bne.n	80077aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa92 	bl	8007cd4 <USB_CoreReset>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e010      	b.n	80077d8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa86 	bl	8007cd4 <USB_CoreReset>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80077d8:	7fbb      	ldrb	r3, [r7, #30]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d10b      	bne.n	80077f6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f043 0206 	orr.w	r2, r3, #6
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f043 0220 	orr.w	r2, r3, #32
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007802:	b004      	add	sp, #16
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	ffbdffbf 	.word	0xffbdffbf

0800780c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f023 0201 	bic.w	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d115      	bne.n	800787c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800785c:	200a      	movs	r0, #10
 800785e:	f7fb f82d 	bl	80028bc <HAL_Delay>
      ms += 10U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	330a      	adds	r3, #10
 8007866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa25 	bl	8007cb8 <USB_GetMode>
 800786e:	4603      	mov	r3, r0
 8007870:	2b01      	cmp	r3, #1
 8007872:	d01e      	beq.n	80078b2 <USB_SetCurrentMode+0x84>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2bc7      	cmp	r3, #199	@ 0xc7
 8007878:	d9f0      	bls.n	800785c <USB_SetCurrentMode+0x2e>
 800787a:	e01a      	b.n	80078b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d115      	bne.n	80078ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800788e:	200a      	movs	r0, #10
 8007890:	f7fb f814 	bl	80028bc <HAL_Delay>
      ms += 10U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	330a      	adds	r3, #10
 8007898:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa0c 	bl	8007cb8 <USB_GetMode>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <USB_SetCurrentMode+0x84>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80078aa:	d9f0      	bls.n	800788e <USB_SetCurrentMode+0x60>
 80078ac:	e001      	b.n	80078b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e005      	b.n	80078be <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2bc8      	cmp	r3, #200	@ 0xc8
 80078b6:	d101      	bne.n	80078bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078c8:	b084      	sub	sp, #16
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b086      	sub	sp, #24
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80078d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078e2:	2300      	movs	r3, #0
 80078e4:	613b      	str	r3, [r7, #16]
 80078e6:	e009      	b.n	80078fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	3340      	adds	r3, #64	@ 0x40
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3301      	adds	r3, #1
 80078fa:	613b      	str	r3, [r7, #16]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2b0e      	cmp	r3, #14
 8007900:	d9f2      	bls.n	80078e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007902:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007906:	2b00      	cmp	r3, #0
 8007908:	d11c      	bne.n	8007944 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007918:	f043 0302 	orr.w	r3, r3, #2
 800791c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007922:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	e005      	b.n	8007950 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007948:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007956:	461a      	mov	r2, r3
 8007958:	2300      	movs	r3, #0
 800795a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800795c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007960:	2b01      	cmp	r3, #1
 8007962:	d10d      	bne.n	8007980 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007968:	2b00      	cmp	r3, #0
 800796a:	d104      	bne.n	8007976 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800796c:	2100      	movs	r1, #0
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f968 	bl	8007c44 <USB_SetDevSpeed>
 8007974:	e008      	b.n	8007988 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007976:	2101      	movs	r1, #1
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f963 	bl	8007c44 <USB_SetDevSpeed>
 800797e:	e003      	b.n	8007988 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007980:	2103      	movs	r1, #3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f95e 	bl	8007c44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007988:	2110      	movs	r1, #16
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f8fa 	bl	8007b84 <USB_FlushTxFifo>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f924 	bl	8007be8 <USB_FlushRxFifo>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079b0:	461a      	mov	r2, r3
 80079b2:	2300      	movs	r3, #0
 80079b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079bc:	461a      	mov	r2, r3
 80079be:	2300      	movs	r3, #0
 80079c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c8:	461a      	mov	r2, r3
 80079ca:	2300      	movs	r3, #0
 80079cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	e043      	b.n	8007a5c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079ea:	d118      	bne.n	8007a1e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079fe:	461a      	mov	r2, r3
 8007a00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	e013      	b.n	8007a30 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a14:	461a      	mov	r2, r3
 8007a16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	e008      	b.n	8007a30 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	2300      	movs	r3, #0
 8007a40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	613b      	str	r3, [r7, #16]
 8007a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a60:	461a      	mov	r2, r3
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d3b5      	bcc.n	80079d4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	613b      	str	r3, [r7, #16]
 8007a6c:	e043      	b.n	8007af6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a84:	d118      	bne.n	8007ab8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	e013      	b.n	8007aca <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	e008      	b.n	8007aca <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007aee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	3301      	adds	r3, #1
 8007af4:	613b      	str	r3, [r7, #16]
 8007af6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007afa:	461a      	mov	r2, r3
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d3b5      	bcc.n	8007a6e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d105      	bne.n	8007b38 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	f043 0210 	orr.w	r2, r3, #16
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699a      	ldr	r2, [r3, #24]
 8007b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b7c <USB_DevInit+0x2b4>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	f043 0208 	orr.w	r2, r3, #8
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d105      	bne.n	8007b6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	4b06      	ldr	r3, [pc, #24]	@ (8007b80 <USB_DevInit+0x2b8>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b78:	b004      	add	sp, #16
 8007b7a:	4770      	bx	lr
 8007b7c:	803c3800 	.word	0x803c3800
 8007b80:	40000004 	.word	0x40000004

08007b84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b9e:	d901      	bls.n	8007ba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e01b      	b.n	8007bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	daf2      	bge.n	8007b92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	019b      	lsls	r3, r3, #6
 8007bb4:	f043 0220 	orr.w	r2, r3, #32
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bc8:	d901      	bls.n	8007bce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e006      	b.n	8007bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d0f0      	beq.n	8007bbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c00:	d901      	bls.n	8007c06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e018      	b.n	8007c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	daf2      	bge.n	8007bf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2210      	movs	r2, #16
 8007c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c24:	d901      	bls.n	8007c2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e006      	b.n	8007c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b10      	cmp	r3, #16
 8007c34:	d0f0      	beq.n	8007c18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c64:	4313      	orrs	r3, r2
 8007c66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c90:	f023 0303 	bic.w	r3, r3, #3
 8007c94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ca4:	f043 0302 	orr.w	r3, r3, #2
 8007ca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	f003 0301 	and.w	r3, r3, #1
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cec:	d901      	bls.n	8007cf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e01b      	b.n	8007d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	daf2      	bge.n	8007ce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f043 0201 	orr.w	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d16:	d901      	bls.n	8007d1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e006      	b.n	8007d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d0f0      	beq.n	8007d0a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d36:	b480      	push	{r7}
 8007d38:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007d3a:	bf00      	nop
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d4a:	f3ef 8305 	mrs	r3, IPSR
 8007d4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10f      	bne.n	8007d76 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d56:	f3ef 8310 	mrs	r3, PRIMASK
 8007d5a:	607b      	str	r3, [r7, #4]
  return(result);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d62:	f3ef 8311 	mrs	r3, BASEPRI
 8007d66:	603b      	str	r3, [r7, #0]
  return(result);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d007      	beq.n	8007d7e <osKernelInitialize+0x3a>
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007da8 <osKernelInitialize+0x64>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d103      	bne.n	8007d7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007d76:	f06f 0305 	mvn.w	r3, #5
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	e00c      	b.n	8007d98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007da8 <osKernelInitialize+0x64>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d105      	bne.n	8007d92 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d86:	4b08      	ldr	r3, [pc, #32]	@ (8007da8 <osKernelInitialize+0x64>)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	e002      	b.n	8007d98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
 8007d96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007d98:	68fb      	ldr	r3, [r7, #12]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20000a60 	.word	0x20000a60

08007dac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007db2:	f3ef 8305 	mrs	r3, IPSR
 8007db6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007db8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10f      	bne.n	8007dde <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8007dc2:	607b      	str	r3, [r7, #4]
  return(result);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dca:	f3ef 8311 	mrs	r3, BASEPRI
 8007dce:	603b      	str	r3, [r7, #0]
  return(result);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <osKernelStart+0x3a>
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e14 <osKernelStart+0x68>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d103      	bne.n	8007de6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007dde:	f06f 0305 	mvn.w	r3, #5
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e010      	b.n	8007e08 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007de6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e14 <osKernelStart+0x68>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d109      	bne.n	8007e02 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007dee:	f7ff ffa2 	bl	8007d36 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007df2:	4b08      	ldr	r3, [pc, #32]	@ (8007e14 <osKernelStart+0x68>)
 8007df4:	2202      	movs	r2, #2
 8007df6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007df8:	f001 f8ca 	bl	8008f90 <vTaskStartScheduler>
      stat = osOK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e002      	b.n	8007e08 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007e02:	f04f 33ff 	mov.w	r3, #4294967295
 8007e06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007e08:	68fb      	ldr	r3, [r7, #12]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000a60 	.word	0x20000a60

08007e18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b090      	sub	sp, #64	@ 0x40
 8007e1c:	af04      	add	r7, sp, #16
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e24:	2300      	movs	r3, #0
 8007e26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e28:	f3ef 8305 	mrs	r3, IPSR
 8007e2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007e2e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f040 808f 	bne.w	8007f54 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e36:	f3ef 8310 	mrs	r3, PRIMASK
 8007e3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d105      	bne.n	8007e4e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e42:	f3ef 8311 	mrs	r3, BASEPRI
 8007e46:	617b      	str	r3, [r7, #20]
  return(result);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <osThreadNew+0x3e>
 8007e4e:	4b44      	ldr	r3, [pc, #272]	@ (8007f60 <osThreadNew+0x148>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d07e      	beq.n	8007f54 <osThreadNew+0x13c>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d07b      	beq.n	8007f54 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007e5c:	2380      	movs	r3, #128	@ 0x80
 8007e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007e60:	2318      	movs	r3, #24
 8007e62:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007e68:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d045      	beq.n	8007f00 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <osThreadNew+0x6a>
        name = attr->name;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d008      	beq.n	8007ea8 <osThreadNew+0x90>
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	2b38      	cmp	r3, #56	@ 0x38
 8007e9a:	d805      	bhi.n	8007ea8 <osThreadNew+0x90>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <osThreadNew+0x94>
        return (NULL);
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	e054      	b.n	8007f56 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	089b      	lsrs	r3, r3, #2
 8007eba:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00e      	beq.n	8007ee2 <osThreadNew+0xca>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b5b      	cmp	r3, #91	@ 0x5b
 8007eca:	d90a      	bls.n	8007ee2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d006      	beq.n	8007ee2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <osThreadNew+0xca>
        mem = 1;
 8007edc:	2301      	movs	r3, #1
 8007ede:	623b      	str	r3, [r7, #32]
 8007ee0:	e010      	b.n	8007f04 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10c      	bne.n	8007f04 <osThreadNew+0xec>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d108      	bne.n	8007f04 <osThreadNew+0xec>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <osThreadNew+0xec>
          mem = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	623b      	str	r3, [r7, #32]
 8007efe:	e001      	b.n	8007f04 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d110      	bne.n	8007f2c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f12:	9202      	str	r2, [sp, #8]
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 fe4f 	bl	8008bc4 <xTaskCreateStatic>
 8007f26:	4603      	mov	r3, r0
 8007f28:	613b      	str	r3, [r7, #16]
 8007f2a:	e013      	b.n	8007f54 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d110      	bne.n	8007f54 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	f107 0310 	add.w	r3, r7, #16
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fea3 	bl	8008c90 <xTaskCreate>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d001      	beq.n	8007f54 <osThreadNew+0x13c>
          hTask = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f54:	693b      	ldr	r3, [r7, #16]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3730      	adds	r7, #48	@ 0x30
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20000a60 	.word	0x20000a60

08007f64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f6c:	f3ef 8305 	mrs	r3, IPSR
 8007f70:	613b      	str	r3, [r7, #16]
  return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10f      	bne.n	8007f98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f78:	f3ef 8310 	mrs	r3, PRIMASK
 8007f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d105      	bne.n	8007f90 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f84:	f3ef 8311 	mrs	r3, BASEPRI
 8007f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d007      	beq.n	8007fa0 <osDelay+0x3c>
 8007f90:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <osDelay+0x58>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d103      	bne.n	8007fa0 <osDelay+0x3c>
    stat = osErrorISR;
 8007f98:	f06f 0305 	mvn.w	r3, #5
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	e007      	b.n	8007fb0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 ffb8 	bl	8008f20 <vTaskDelay>
    }
  }

  return (stat);
 8007fb0:	697b      	ldr	r3, [r7, #20]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000a60 	.word	0x20000a60

08007fc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4a07      	ldr	r2, [pc, #28]	@ (8007fec <vApplicationGetIdleTaskMemory+0x2c>)
 8007fd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4a06      	ldr	r2, [pc, #24]	@ (8007ff0 <vApplicationGetIdleTaskMemory+0x30>)
 8007fd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2280      	movs	r2, #128	@ 0x80
 8007fdc:	601a      	str	r2, [r3, #0]
}
 8007fde:	bf00      	nop
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000a64 	.word	0x20000a64
 8007ff0:	20000ac0 	.word	0x20000ac0

08007ff4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a07      	ldr	r2, [pc, #28]	@ (8008020 <vApplicationGetTimerTaskMemory+0x2c>)
 8008004:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	4a06      	ldr	r2, [pc, #24]	@ (8008024 <vApplicationGetTimerTaskMemory+0x30>)
 800800a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008012:	601a      	str	r2, [r3, #0]
}
 8008014:	bf00      	nop
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	20000cc0 	.word	0x20000cc0
 8008024:	20000d1c 	.word	0x20000d1c

08008028 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f103 0208 	add.w	r2, r3, #8
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f04f 32ff 	mov.w	r2, #4294967295
 8008040:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f103 0208 	add.w	r2, r3, #8
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f103 0208 	add.w	r2, r3, #8
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008082:	b480      	push	{r7}
 8008084:	b085      	sub	sp, #20
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	601a      	str	r2, [r3, #0]
}
 80080be:	bf00      	nop
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e0:	d103      	bne.n	80080ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e00c      	b.n	8008104 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3308      	adds	r3, #8
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	e002      	b.n	80080f8 <vListInsert+0x2e>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	429a      	cmp	r2, r3
 8008102:	d2f6      	bcs.n	80080f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	601a      	str	r2, [r3, #0]
}
 8008130:	bf00      	nop
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6892      	ldr	r2, [r2, #8]
 8008152:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6852      	ldr	r2, [r2, #4]
 800815c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d103      	bne.n	8008170 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	1e5a      	subs	r2, r3, #1
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10d      	bne.n	80081c0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a8:	b672      	cpsid	i
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	b662      	cpsie	i
 80081b8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081ba:	bf00      	nop
 80081bc:	bf00      	nop
 80081be:	e7fd      	b.n	80081bc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80081c0:	f002 f8a4 	bl	800a30c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	68f9      	ldr	r1, [r7, #12]
 80081ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081d0:	fb01 f303 	mul.w	r3, r1, r3
 80081d4:	441a      	add	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f0:	3b01      	subs	r3, #1
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081f6:	fb01 f303 	mul.w	r3, r1, r3
 80081fa:	441a      	add	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	22ff      	movs	r2, #255	@ 0xff
 8008204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	22ff      	movs	r2, #255	@ 0xff
 800820c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d114      	bne.n	8008240 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d01a      	beq.n	8008254 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3310      	adds	r3, #16
 8008222:	4618      	mov	r0, r3
 8008224:	f001 f950 	bl	80094c8 <xTaskRemoveFromEventList>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d012      	beq.n	8008254 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <xQueueGenericReset+0xd4>)
 8008230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	e009      	b.n	8008254 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3310      	adds	r3, #16
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff feef 	bl	8008028 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3324      	adds	r3, #36	@ 0x24
 800824e:	4618      	mov	r0, r3
 8008250:	f7ff feea 	bl	8008028 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008254:	f002 f890 	bl	800a378 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008258:	2301      	movs	r3, #1
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	e000ed04 	.word	0xe000ed04

08008268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08e      	sub	sp, #56	@ 0x38
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10d      	bne.n	8008298 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008280:	b672      	cpsid	i
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	b662      	cpsie	i
 8008290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10d      	bne.n	80082ba <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a2:	b672      	cpsid	i
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	b662      	cpsie	i
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <xQueueGenericCreateStatic+0x5e>
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <xQueueGenericCreateStatic+0x62>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <xQueueGenericCreateStatic+0x64>
 80082ca:	2300      	movs	r3, #0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10d      	bne.n	80082ec <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d4:	b672      	cpsid	i
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	b662      	cpsie	i
 80082e4:	623b      	str	r3, [r7, #32]
}
 80082e6:	bf00      	nop
 80082e8:	bf00      	nop
 80082ea:	e7fd      	b.n	80082e8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <xQueueGenericCreateStatic+0x90>
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <xQueueGenericCreateStatic+0x94>
 80082f8:	2301      	movs	r3, #1
 80082fa:	e000      	b.n	80082fe <xQueueGenericCreateStatic+0x96>
 80082fc:	2300      	movs	r3, #0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10d      	bne.n	800831e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	b672      	cpsid	i
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	b662      	cpsie	i
 8008316:	61fb      	str	r3, [r7, #28]
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	e7fd      	b.n	800831a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800831e:	2350      	movs	r3, #80	@ 0x50
 8008320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b50      	cmp	r3, #80	@ 0x50
 8008326:	d00d      	beq.n	8008344 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832c:	b672      	cpsid	i
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	b662      	cpsie	i
 800833c:	61bb      	str	r3, [r7, #24]
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008344:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00d      	beq.n	800836c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008358:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800835c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	4613      	mov	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 f805 	bl	8008376 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800836c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800836e:	4618      	mov	r0, r3
 8008370:	3730      	adds	r7, #48	@ 0x30
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	607a      	str	r2, [r7, #4]
 8008382:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d103      	bne.n	8008392 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	e002      	b.n	8008398 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083a4:	2101      	movs	r1, #1
 80083a6:	69b8      	ldr	r0, [r7, #24]
 80083a8:	f7ff fef2 	bl	8008190 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083b4:	bf00      	nop
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08e      	sub	sp, #56	@ 0x38
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ca:	2300      	movs	r3, #0
 80083cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80083d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10d      	bne.n	80083f4 <xQueueGenericSend+0x38>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	b672      	cpsid	i
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	b662      	cpsie	i
 80083ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083ee:	bf00      	nop
 80083f0:	bf00      	nop
 80083f2:	e7fd      	b.n	80083f0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <xQueueGenericSend+0x46>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <xQueueGenericSend+0x4a>
 8008402:	2301      	movs	r3, #1
 8008404:	e000      	b.n	8008408 <xQueueGenericSend+0x4c>
 8008406:	2300      	movs	r3, #0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10d      	bne.n	8008428 <xQueueGenericSend+0x6c>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008410:	b672      	cpsid	i
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	b662      	cpsie	i
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008422:	bf00      	nop
 8008424:	bf00      	nop
 8008426:	e7fd      	b.n	8008424 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b02      	cmp	r3, #2
 800842c:	d103      	bne.n	8008436 <xQueueGenericSend+0x7a>
 800842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008432:	2b01      	cmp	r3, #1
 8008434:	d101      	bne.n	800843a <xQueueGenericSend+0x7e>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <xQueueGenericSend+0x80>
 800843a:	2300      	movs	r3, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10d      	bne.n	800845c <xQueueGenericSend+0xa0>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008444:	b672      	cpsid	i
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	b662      	cpsie	i
 8008454:	623b      	str	r3, [r7, #32]
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800845c:	f001 f9fc 	bl	8009858 <xTaskGetSchedulerState>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <xQueueGenericSend+0xb0>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <xQueueGenericSend+0xb4>
 800846c:	2301      	movs	r3, #1
 800846e:	e000      	b.n	8008472 <xQueueGenericSend+0xb6>
 8008470:	2300      	movs	r3, #0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10d      	bne.n	8008492 <xQueueGenericSend+0xd6>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	b672      	cpsid	i
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	b662      	cpsie	i
 800848a:	61fb      	str	r3, [r7, #28]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008492:	f001 ff3b 	bl	800a30c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849e:	429a      	cmp	r2, r3
 80084a0:	d302      	bcc.n	80084a8 <xQueueGenericSend+0xec>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d129      	bne.n	80084fc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084ae:	f000 fa1b 	bl	80088e8 <prvCopyDataToQueue>
 80084b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d010      	beq.n	80084de <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084be:	3324      	adds	r3, #36	@ 0x24
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 f801 	bl	80094c8 <xTaskRemoveFromEventList>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d013      	beq.n	80084f4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084cc:	4b3f      	ldr	r3, [pc, #252]	@ (80085cc <xQueueGenericSend+0x210>)
 80084ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	e00a      	b.n	80084f4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084e4:	4b39      	ldr	r3, [pc, #228]	@ (80085cc <xQueueGenericSend+0x210>)
 80084e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084f4:	f001 ff40 	bl	800a378 <vPortExitCritical>
				return pdPASS;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e063      	b.n	80085c4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d103      	bne.n	800850a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008502:	f001 ff39 	bl	800a378 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008506:	2300      	movs	r3, #0
 8008508:	e05c      	b.n	80085c4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800850a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850c:	2b00      	cmp	r3, #0
 800850e:	d106      	bne.n	800851e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008510:	f107 0314 	add.w	r3, r7, #20
 8008514:	4618      	mov	r0, r3
 8008516:	f001 f83d 	bl	8009594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800851a:	2301      	movs	r3, #1
 800851c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800851e:	f001 ff2b 	bl	800a378 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008522:	f000 fda1 	bl	8009068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008526:	f001 fef1 	bl	800a30c <vPortEnterCritical>
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008530:	b25b      	sxtb	r3, r3
 8008532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008536:	d103      	bne.n	8008540 <xQueueGenericSend+0x184>
 8008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008546:	b25b      	sxtb	r3, r3
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854c:	d103      	bne.n	8008556 <xQueueGenericSend+0x19a>
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008556:	f001 ff0f 	bl	800a378 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800855a:	1d3a      	adds	r2, r7, #4
 800855c:	f107 0314 	add.w	r3, r7, #20
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f001 f82c 	bl	80095c0 <xTaskCheckForTimeOut>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d124      	bne.n	80085b8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800856e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008570:	f000 fab2 	bl	8008ad8 <prvIsQueueFull>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d018      	beq.n	80085ac <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	3310      	adds	r3, #16
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4611      	mov	r1, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f000 ff4a 	bl	800941c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800858a:	f000 fa3d 	bl	8008a08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800858e:	f000 fd79 	bl	8009084 <xTaskResumeAll>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	f47f af7c 	bne.w	8008492 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800859a:	4b0c      	ldr	r3, [pc, #48]	@ (80085cc <xQueueGenericSend+0x210>)
 800859c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	e772      	b.n	8008492 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085ae:	f000 fa2b 	bl	8008a08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b2:	f000 fd67 	bl	8009084 <xTaskResumeAll>
 80085b6:	e76c      	b.n	8008492 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085ba:	f000 fa25 	bl	8008a08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085be:	f000 fd61 	bl	8009084 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3738      	adds	r7, #56	@ 0x38
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08e      	sub	sp, #56	@ 0x38
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10d      	bne.n	8008604 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	b672      	cpsid	i
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	b662      	cpsie	i
 80085fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085fe:	bf00      	nop
 8008600:	bf00      	nop
 8008602:	e7fd      	b.n	8008600 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d103      	bne.n	8008612 <xQueueGenericSendFromISR+0x42>
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <xQueueGenericSendFromISR+0x46>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <xQueueGenericSendFromISR+0x48>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10d      	bne.n	8008638 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008620:	b672      	cpsid	i
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	b662      	cpsie	i
 8008630:	623b      	str	r3, [r7, #32]
}
 8008632:	bf00      	nop
 8008634:	bf00      	nop
 8008636:	e7fd      	b.n	8008634 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d103      	bne.n	8008646 <xQueueGenericSendFromISR+0x76>
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008642:	2b01      	cmp	r3, #1
 8008644:	d101      	bne.n	800864a <xQueueGenericSendFromISR+0x7a>
 8008646:	2301      	movs	r3, #1
 8008648:	e000      	b.n	800864c <xQueueGenericSendFromISR+0x7c>
 800864a:	2300      	movs	r3, #0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10d      	bne.n	800866c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008654:	b672      	cpsid	i
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	b662      	cpsie	i
 8008664:	61fb      	str	r3, [r7, #28]
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800866c:	f001 ff36 	bl	800a4dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008670:	f3ef 8211 	mrs	r2, BASEPRI
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	b672      	cpsid	i
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	b662      	cpsie	i
 8008688:	61ba      	str	r2, [r7, #24]
 800868a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800868c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800868e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008698:	429a      	cmp	r2, r3
 800869a:	d302      	bcc.n	80086a2 <xQueueGenericSendFromISR+0xd2>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d12c      	bne.n	80086fc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086b2:	f000 f919 	bl	80088e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d112      	bne.n	80086e6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d016      	beq.n	80086f6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	3324      	adds	r3, #36	@ 0x24
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fefb 	bl	80094c8 <xTaskRemoveFromEventList>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00e      	beq.n	80086f6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00b      	beq.n	80086f6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e007      	b.n	80086f6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086ea:	3301      	adds	r3, #1
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	b25a      	sxtb	r2, r3
 80086f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80086f6:	2301      	movs	r3, #1
 80086f8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80086fa:	e001      	b.n	8008700 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086fc:	2300      	movs	r3, #0
 80086fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008702:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800870a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800870c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800870e:	4618      	mov	r0, r3
 8008710:	3738      	adds	r7, #56	@ 0x38
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08c      	sub	sp, #48	@ 0x30
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008724:	2300      	movs	r3, #0
 8008726:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10d      	bne.n	800874e <xQueueReceive+0x36>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008736:	b672      	cpsid	i
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	b662      	cpsie	i
 8008746:	623b      	str	r3, [r7, #32]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d103      	bne.n	800875c <xQueueReceive+0x44>
 8008754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <xQueueReceive+0x48>
 800875c:	2301      	movs	r3, #1
 800875e:	e000      	b.n	8008762 <xQueueReceive+0x4a>
 8008760:	2300      	movs	r3, #0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10d      	bne.n	8008782 <xQueueReceive+0x6a>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	b672      	cpsid	i
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	b662      	cpsie	i
 800877a:	61fb      	str	r3, [r7, #28]
}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	e7fd      	b.n	800877e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008782:	f001 f869 	bl	8009858 <xTaskGetSchedulerState>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <xQueueReceive+0x7a>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <xQueueReceive+0x7e>
 8008792:	2301      	movs	r3, #1
 8008794:	e000      	b.n	8008798 <xQueueReceive+0x80>
 8008796:	2300      	movs	r3, #0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10d      	bne.n	80087b8 <xQueueReceive+0xa0>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	b672      	cpsid	i
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	b662      	cpsie	i
 80087b0:	61bb      	str	r3, [r7, #24]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087b8:	f001 fda8 	bl	800a30c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01f      	beq.n	8008808 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087cc:	f000 f8f6 	bl	80089bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	1e5a      	subs	r2, r3, #1
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00f      	beq.n	8008800 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e2:	3310      	adds	r3, #16
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fe6f 	bl	80094c8 <xTaskRemoveFromEventList>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087f0:	4b3c      	ldr	r3, [pc, #240]	@ (80088e4 <xQueueReceive+0x1cc>)
 80087f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008800:	f001 fdba 	bl	800a378 <vPortExitCritical>
				return pdPASS;
 8008804:	2301      	movs	r3, #1
 8008806:	e069      	b.n	80088dc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d103      	bne.n	8008816 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800880e:	f001 fdb3 	bl	800a378 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008812:	2300      	movs	r3, #0
 8008814:	e062      	b.n	80088dc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800881c:	f107 0310 	add.w	r3, r7, #16
 8008820:	4618      	mov	r0, r3
 8008822:	f000 feb7 	bl	8009594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008826:	2301      	movs	r3, #1
 8008828:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800882a:	f001 fda5 	bl	800a378 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800882e:	f000 fc1b 	bl	8009068 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008832:	f001 fd6b 	bl	800a30c <vPortEnterCritical>
 8008836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008838:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800883c:	b25b      	sxtb	r3, r3
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d103      	bne.n	800884c <xQueueReceive+0x134>
 8008844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800884c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008852:	b25b      	sxtb	r3, r3
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d103      	bne.n	8008862 <xQueueReceive+0x14a>
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008862:	f001 fd89 	bl	800a378 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008866:	1d3a      	adds	r2, r7, #4
 8008868:	f107 0310 	add.w	r3, r7, #16
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fea6 	bl	80095c0 <xTaskCheckForTimeOut>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d123      	bne.n	80088c2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800887a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800887c:	f000 f916 	bl	8008aac <prvIsQueueEmpty>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d017      	beq.n	80088b6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	3324      	adds	r3, #36	@ 0x24
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	4611      	mov	r1, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fdc4 	bl	800941c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008896:	f000 f8b7 	bl	8008a08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800889a:	f000 fbf3 	bl	8009084 <xTaskResumeAll>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d189      	bne.n	80087b8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80088a4:	4b0f      	ldr	r3, [pc, #60]	@ (80088e4 <xQueueReceive+0x1cc>)
 80088a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	e780      	b.n	80087b8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088b8:	f000 f8a6 	bl	8008a08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088bc:	f000 fbe2 	bl	8009084 <xTaskResumeAll>
 80088c0:	e77a      	b.n	80087b8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c4:	f000 f8a0 	bl	8008a08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088c8:	f000 fbdc 	bl	8009084 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088ce:	f000 f8ed 	bl	8008aac <prvIsQueueEmpty>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f43f af6f 	beq.w	80087b8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3730      	adds	r7, #48	@ 0x30
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	e000ed04 	.word	0xe000ed04

080088e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088f4:	2300      	movs	r3, #0
 80088f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10d      	bne.n	8008922 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d14d      	bne.n	80089aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	4618      	mov	r0, r3
 8008914:	f000 ffbe 	bl	8009894 <xTaskPriorityDisinherit>
 8008918:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	609a      	str	r2, [r3, #8]
 8008920:	e043      	b.n	80089aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d119      	bne.n	800895c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6858      	ldr	r0, [r3, #4]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008930:	461a      	mov	r2, r3
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	f002 f9c2 	bl	800acbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008940:	441a      	add	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	429a      	cmp	r2, r3
 8008950:	d32b      	bcc.n	80089aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	605a      	str	r2, [r3, #4]
 800895a:	e026      	b.n	80089aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	68d8      	ldr	r0, [r3, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008964:	461a      	mov	r2, r3
 8008966:	68b9      	ldr	r1, [r7, #8]
 8008968:	f002 f9a8 	bl	800acbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008974:	425b      	negs	r3, r3
 8008976:	441a      	add	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d207      	bcs.n	8008998 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008990:	425b      	negs	r3, r3
 8008992:	441a      	add	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d105      	bne.n	80089aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80089b2:	697b      	ldr	r3, [r7, #20]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d018      	beq.n	8008a00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d6:	441a      	add	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d303      	bcc.n	80089f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68d9      	ldr	r1, [r3, #12]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f8:	461a      	mov	r2, r3
 80089fa:	6838      	ldr	r0, [r7, #0]
 80089fc:	f002 f95e 	bl	800acbc <memcpy>
	}
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a10:	f001 fc7c 	bl	800a30c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a1c:	e011      	b.n	8008a42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d012      	beq.n	8008a4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3324      	adds	r3, #36	@ 0x24
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fd4c 	bl	80094c8 <xTaskRemoveFromEventList>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a36:	f000 fe2b 	bl	8009690 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	dce9      	bgt.n	8008a1e <prvUnlockQueue+0x16>
 8008a4a:	e000      	b.n	8008a4e <prvUnlockQueue+0x46>
					break;
 8008a4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	22ff      	movs	r2, #255	@ 0xff
 8008a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008a56:	f001 fc8f 	bl	800a378 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a5a:	f001 fc57 	bl	800a30c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a66:	e011      	b.n	8008a8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d012      	beq.n	8008a96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3310      	adds	r3, #16
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fd27 	bl	80094c8 <xTaskRemoveFromEventList>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a80:	f000 fe06 	bl	8009690 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dce9      	bgt.n	8008a68 <prvUnlockQueue+0x60>
 8008a94:	e000      	b.n	8008a98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	22ff      	movs	r2, #255	@ 0xff
 8008a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008aa0:	f001 fc6a 	bl	800a378 <vPortExitCritical>
}
 8008aa4:	bf00      	nop
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ab4:	f001 fc2a 	bl	800a30c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e001      	b.n	8008aca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008aca:	f001 fc55 	bl	800a378 <vPortExitCritical>

	return xReturn;
 8008ace:	68fb      	ldr	r3, [r7, #12]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ae0:	f001 fc14 	bl	800a30c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d102      	bne.n	8008af6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008af0:	2301      	movs	r3, #1
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	e001      	b.n	8008afa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008afa:	f001 fc3d 	bl	800a378 <vPortExitCritical>

	return xReturn;
 8008afe:	68fb      	ldr	r3, [r7, #12]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	e014      	b.n	8008b42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b18:	4a0f      	ldr	r2, [pc, #60]	@ (8008b58 <vQueueAddToRegistry+0x50>)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10b      	bne.n	8008b3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b24:	490c      	ldr	r1, [pc, #48]	@ (8008b58 <vQueueAddToRegistry+0x50>)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8008b58 <vQueueAddToRegistry+0x50>)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	4413      	add	r3, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b3a:	e006      	b.n	8008b4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2b07      	cmp	r3, #7
 8008b46:	d9e7      	bls.n	8008b18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b48:	bf00      	nop
 8008b4a:	bf00      	nop
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	2000111c 	.word	0x2000111c

08008b5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b6c:	f001 fbce 	bl	800a30c <vPortEnterCritical>
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7c:	d103      	bne.n	8008b86 <vQueueWaitForMessageRestricted+0x2a>
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b8c:	b25b      	sxtb	r3, r3
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b92:	d103      	bne.n	8008b9c <vQueueWaitForMessageRestricted+0x40>
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b9c:	f001 fbec 	bl	800a378 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	3324      	adds	r3, #36	@ 0x24
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fc5b 	bl	800946c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bb6:	6978      	ldr	r0, [r7, #20]
 8008bb8:	f7ff ff26 	bl	8008a08 <prvUnlockQueue>
	}
 8008bbc:	bf00      	nop
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08e      	sub	sp, #56	@ 0x38
 8008bc8:	af04      	add	r7, sp, #16
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10d      	bne.n	8008bf4 <xTaskCreateStatic+0x30>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bdc:	b672      	cpsid	i
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	b662      	cpsie	i
 8008bec:	623b      	str	r3, [r7, #32]
}
 8008bee:	bf00      	nop
 8008bf0:	bf00      	nop
 8008bf2:	e7fd      	b.n	8008bf0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10d      	bne.n	8008c16 <xTaskCreateStatic+0x52>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfe:	b672      	cpsid	i
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	b662      	cpsie	i
 8008c0e:	61fb      	str	r3, [r7, #28]
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	e7fd      	b.n	8008c12 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c16:	235c      	movs	r3, #92	@ 0x5c
 8008c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c1e:	d00d      	beq.n	8008c3c <xTaskCreateStatic+0x78>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	61bb      	str	r3, [r7, #24]
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d01e      	beq.n	8008c82 <xTaskCreateStatic+0xbe>
 8008c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01b      	beq.n	8008c82 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c62:	9302      	str	r3, [sp, #8]
 8008c64:	f107 0314 	add.w	r3, r7, #20
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f850 	bl	8008d1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c7c:	f000 f8e0 	bl	8008e40 <prvAddNewTaskToReadyList>
 8008c80:	e001      	b.n	8008c86 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c86:	697b      	ldr	r3, [r7, #20]
	}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3728      	adds	r7, #40	@ 0x28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08c      	sub	sp, #48	@ 0x30
 8008c94:	af04      	add	r7, sp, #16
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 fc5f 	bl	800a568 <pvPortMalloc>
 8008caa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00e      	beq.n	8008cd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cb2:	205c      	movs	r0, #92	@ 0x5c
 8008cb4:	f001 fc58 	bl	800a568 <pvPortMalloc>
 8008cb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cc6:	e005      	b.n	8008cd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cc8:	6978      	ldr	r0, [r7, #20]
 8008cca:	f001 fd1b 	bl	800a704 <vPortFree>
 8008cce:	e001      	b.n	8008cd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d017      	beq.n	8008d0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ce2:	88fa      	ldrh	r2, [r7, #6]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	9302      	str	r3, [sp, #8]
 8008cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cee:	9301      	str	r3, [sp, #4]
 8008cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f80e 	bl	8008d1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cfe:	69f8      	ldr	r0, [r7, #28]
 8008d00:	f000 f89e 	bl	8008e40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d04:	2301      	movs	r3, #1
 8008d06:	61bb      	str	r3, [r7, #24]
 8008d08:	e002      	b.n	8008d10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d10:	69bb      	ldr	r3, [r7, #24]
	}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3720      	adds	r7, #32
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b088      	sub	sp, #32
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	60f8      	str	r0, [r7, #12]
 8008d22:	60b9      	str	r1, [r7, #8]
 8008d24:	607a      	str	r2, [r7, #4]
 8008d26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	461a      	mov	r2, r3
 8008d32:	21a5      	movs	r1, #165	@ 0xa5
 8008d34:	f001 ff6c 	bl	800ac10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008d42:	440b      	add	r3, r1
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	f023 0307 	bic.w	r3, r3, #7
 8008d50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	f003 0307 	and.w	r3, r3, #7
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00d      	beq.n	8008d78 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d60:	b672      	cpsid	i
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	b662      	cpsie	i
 8008d70:	617b      	str	r3, [r7, #20]
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	e7fd      	b.n	8008d74 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d01f      	beq.n	8008dbe <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	e012      	b.n	8008daa <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	4413      	add	r3, r2
 8008d8a:	7819      	ldrb	r1, [r3, #0]
 8008d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4413      	add	r3, r2
 8008d92:	3334      	adds	r3, #52	@ 0x34
 8008d94:	460a      	mov	r2, r1
 8008d96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d006      	beq.n	8008db2 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	3301      	adds	r3, #1
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2b0f      	cmp	r3, #15
 8008dae:	d9e9      	bls.n	8008d84 <prvInitialiseNewTask+0x6a>
 8008db0:	e000      	b.n	8008db4 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008db2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008dbc:	e003      	b.n	8008dc6 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc8:	2b37      	cmp	r3, #55	@ 0x37
 8008dca:	d901      	bls.n	8008dd0 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dcc:	2337      	movs	r3, #55	@ 0x37
 8008dce:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dda:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dde:	2200      	movs	r2, #0
 8008de0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de4:	3304      	adds	r3, #4
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff f93e 	bl	8008068 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dee:	3318      	adds	r3, #24
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff f939 	bl	8008068 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e0a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0e:	2200      	movs	r2, #0
 8008e10:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	68f9      	ldr	r1, [r7, #12]
 8008e1e:	69b8      	ldr	r0, [r7, #24]
 8008e20:	f001 f968 	bl	800a0f4 <pxPortInitialiseStack>
 8008e24:	4602      	mov	r2, r0
 8008e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e36:	bf00      	nop
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e48:	f001 fa60 	bl	800a30c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8008f04 <prvAddNewTaskToReadyList+0xc4>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3301      	adds	r3, #1
 8008e52:	4a2c      	ldr	r2, [pc, #176]	@ (8008f04 <prvAddNewTaskToReadyList+0xc4>)
 8008e54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e56:	4b2c      	ldr	r3, [pc, #176]	@ (8008f08 <prvAddNewTaskToReadyList+0xc8>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d109      	bne.n	8008e72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f08 <prvAddNewTaskToReadyList+0xc8>)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e64:	4b27      	ldr	r3, [pc, #156]	@ (8008f04 <prvAddNewTaskToReadyList+0xc4>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d110      	bne.n	8008e8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e6c:	f000 fc34 	bl	80096d8 <prvInitialiseTaskLists>
 8008e70:	e00d      	b.n	8008e8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e72:	4b26      	ldr	r3, [pc, #152]	@ (8008f0c <prvAddNewTaskToReadyList+0xcc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d109      	bne.n	8008e8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e7a:	4b23      	ldr	r3, [pc, #140]	@ (8008f08 <prvAddNewTaskToReadyList+0xc8>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d802      	bhi.n	8008e8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e88:	4a1f      	ldr	r2, [pc, #124]	@ (8008f08 <prvAddNewTaskToReadyList+0xc8>)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e8e:	4b20      	ldr	r3, [pc, #128]	@ (8008f10 <prvAddNewTaskToReadyList+0xd0>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3301      	adds	r3, #1
 8008e94:	4a1e      	ldr	r2, [pc, #120]	@ (8008f10 <prvAddNewTaskToReadyList+0xd0>)
 8008e96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e98:	4b1d      	ldr	r3, [pc, #116]	@ (8008f10 <prvAddNewTaskToReadyList+0xd0>)
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8008f14 <prvAddNewTaskToReadyList+0xd4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d903      	bls.n	8008eb4 <prvAddNewTaskToReadyList+0x74>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb0:	4a18      	ldr	r2, [pc, #96]	@ (8008f14 <prvAddNewTaskToReadyList+0xd4>)
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4a15      	ldr	r2, [pc, #84]	@ (8008f18 <prvAddNewTaskToReadyList+0xd8>)
 8008ec2:	441a      	add	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	f7ff f8d9 	bl	8008082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ed0:	f001 fa52 	bl	800a378 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8008f0c <prvAddNewTaskToReadyList+0xcc>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00e      	beq.n	8008efa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008edc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <prvAddNewTaskToReadyList+0xc8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d207      	bcs.n	8008efa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008eea:	4b0c      	ldr	r3, [pc, #48]	@ (8008f1c <prvAddNewTaskToReadyList+0xdc>)
 8008eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20001630 	.word	0x20001630
 8008f08:	2000115c 	.word	0x2000115c
 8008f0c:	2000163c 	.word	0x2000163c
 8008f10:	2000164c 	.word	0x2000164c
 8008f14:	20001638 	.word	0x20001638
 8008f18:	20001160 	.word	0x20001160
 8008f1c:	e000ed04 	.word	0xe000ed04

08008f20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01a      	beq.n	8008f68 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f32:	4b15      	ldr	r3, [pc, #84]	@ (8008f88 <vTaskDelay+0x68>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00d      	beq.n	8008f56 <vTaskDelay+0x36>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3e:	b672      	cpsid	i
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	b662      	cpsie	i
 8008f4e:	60bb      	str	r3, [r7, #8]
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	e7fd      	b.n	8008f52 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008f56:	f000 f887 	bl	8009068 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fd0d 	bl	800997c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f62:	f000 f88f 	bl	8009084 <xTaskResumeAll>
 8008f66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d107      	bne.n	8008f7e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8008f6e:	4b07      	ldr	r3, [pc, #28]	@ (8008f8c <vTaskDelay+0x6c>)
 8008f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20001658 	.word	0x20001658
 8008f8c:	e000ed04 	.word	0xe000ed04

08008f90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08a      	sub	sp, #40	@ 0x28
 8008f94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f9e:	463a      	mov	r2, r7
 8008fa0:	1d39      	adds	r1, r7, #4
 8008fa2:	f107 0308 	add.w	r3, r7, #8
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff f80a 	bl	8007fc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	9202      	str	r2, [sp, #8]
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	460a      	mov	r2, r1
 8008fbe:	4924      	ldr	r1, [pc, #144]	@ (8009050 <vTaskStartScheduler+0xc0>)
 8008fc0:	4824      	ldr	r0, [pc, #144]	@ (8009054 <vTaskStartScheduler+0xc4>)
 8008fc2:	f7ff fdff 	bl	8008bc4 <xTaskCreateStatic>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	4a23      	ldr	r2, [pc, #140]	@ (8009058 <vTaskStartScheduler+0xc8>)
 8008fca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fcc:	4b22      	ldr	r3, [pc, #136]	@ (8009058 <vTaskStartScheduler+0xc8>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	e001      	b.n	8008fde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d102      	bne.n	8008fea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fe4:	f000 fd1e 	bl	8009a24 <xTimerCreateTimerTask>
 8008fe8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d118      	bne.n	8009022 <vTaskStartScheduler+0x92>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff4:	b672      	cpsid	i
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	b662      	cpsie	i
 8009004:	613b      	str	r3, [r7, #16]
}
 8009006:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009008:	4b14      	ldr	r3, [pc, #80]	@ (800905c <vTaskStartScheduler+0xcc>)
 800900a:	f04f 32ff 	mov.w	r2, #4294967295
 800900e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009010:	4b13      	ldr	r3, [pc, #76]	@ (8009060 <vTaskStartScheduler+0xd0>)
 8009012:	2201      	movs	r2, #1
 8009014:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009016:	4b13      	ldr	r3, [pc, #76]	@ (8009064 <vTaskStartScheduler+0xd4>)
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800901c:	f001 f8f8 	bl	800a210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009020:	e011      	b.n	8009046 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009028:	d10d      	bne.n	8009046 <vTaskStartScheduler+0xb6>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902e:	b672      	cpsid	i
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	b662      	cpsie	i
 800903e:	60fb      	str	r3, [r7, #12]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <vTaskStartScheduler+0xb2>
}
 8009046:	bf00      	nop
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	0800b5a0 	.word	0x0800b5a0
 8009054:	080096a9 	.word	0x080096a9
 8009058:	20001654 	.word	0x20001654
 800905c:	20001650 	.word	0x20001650
 8009060:	2000163c 	.word	0x2000163c
 8009064:	20001634 	.word	0x20001634

08009068 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800906c:	4b04      	ldr	r3, [pc, #16]	@ (8009080 <vTaskSuspendAll+0x18>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3301      	adds	r3, #1
 8009072:	4a03      	ldr	r2, [pc, #12]	@ (8009080 <vTaskSuspendAll+0x18>)
 8009074:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009076:	bf00      	nop
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr
 8009080:	20001658 	.word	0x20001658

08009084 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009092:	4b43      	ldr	r3, [pc, #268]	@ (80091a0 <xTaskResumeAll+0x11c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10d      	bne.n	80090b6 <xTaskResumeAll+0x32>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	b672      	cpsid	i
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	b662      	cpsie	i
 80090ae:	603b      	str	r3, [r7, #0]
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090b6:	f001 f929 	bl	800a30c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090ba:	4b39      	ldr	r3, [pc, #228]	@ (80091a0 <xTaskResumeAll+0x11c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3b01      	subs	r3, #1
 80090c0:	4a37      	ldr	r2, [pc, #220]	@ (80091a0 <xTaskResumeAll+0x11c>)
 80090c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c4:	4b36      	ldr	r3, [pc, #216]	@ (80091a0 <xTaskResumeAll+0x11c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d162      	bne.n	8009192 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090cc:	4b35      	ldr	r3, [pc, #212]	@ (80091a4 <xTaskResumeAll+0x120>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d05e      	beq.n	8009192 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090d4:	e02f      	b.n	8009136 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d6:	4b34      	ldr	r3, [pc, #208]	@ (80091a8 <xTaskResumeAll+0x124>)
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3318      	adds	r3, #24
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff f82a 	bl	800813c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7ff f825 	bl	800813c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f6:	4b2d      	ldr	r3, [pc, #180]	@ (80091ac <xTaskResumeAll+0x128>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d903      	bls.n	8009106 <xTaskResumeAll+0x82>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009102:	4a2a      	ldr	r2, [pc, #168]	@ (80091ac <xTaskResumeAll+0x128>)
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4a27      	ldr	r2, [pc, #156]	@ (80091b0 <xTaskResumeAll+0x12c>)
 8009114:	441a      	add	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3304      	adds	r3, #4
 800911a:	4619      	mov	r1, r3
 800911c:	4610      	mov	r0, r2
 800911e:	f7fe ffb0 	bl	8008082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009126:	4b23      	ldr	r3, [pc, #140]	@ (80091b4 <xTaskResumeAll+0x130>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	429a      	cmp	r2, r3
 800912e:	d302      	bcc.n	8009136 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009130:	4b21      	ldr	r3, [pc, #132]	@ (80091b8 <xTaskResumeAll+0x134>)
 8009132:	2201      	movs	r2, #1
 8009134:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009136:	4b1c      	ldr	r3, [pc, #112]	@ (80091a8 <xTaskResumeAll+0x124>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1cb      	bne.n	80090d6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009144:	f000 fb68 	bl	8009818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009148:	4b1c      	ldr	r3, [pc, #112]	@ (80091bc <xTaskResumeAll+0x138>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d010      	beq.n	8009176 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009154:	f000 f846 	bl	80091e4 <xTaskIncrementTick>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800915e:	4b16      	ldr	r3, [pc, #88]	@ (80091b8 <xTaskResumeAll+0x134>)
 8009160:	2201      	movs	r2, #1
 8009162:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3b01      	subs	r3, #1
 8009168:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1f1      	bne.n	8009154 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009170:	4b12      	ldr	r3, [pc, #72]	@ (80091bc <xTaskResumeAll+0x138>)
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009176:	4b10      	ldr	r3, [pc, #64]	@ (80091b8 <xTaskResumeAll+0x134>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d009      	beq.n	8009192 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800917e:	2301      	movs	r3, #1
 8009180:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009182:	4b0f      	ldr	r3, [pc, #60]	@ (80091c0 <xTaskResumeAll+0x13c>)
 8009184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009192:	f001 f8f1 	bl	800a378 <vPortExitCritical>

	return xAlreadyYielded;
 8009196:	68bb      	ldr	r3, [r7, #8]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20001658 	.word	0x20001658
 80091a4:	20001630 	.word	0x20001630
 80091a8:	200015f0 	.word	0x200015f0
 80091ac:	20001638 	.word	0x20001638
 80091b0:	20001160 	.word	0x20001160
 80091b4:	2000115c 	.word	0x2000115c
 80091b8:	20001644 	.word	0x20001644
 80091bc:	20001640 	.word	0x20001640
 80091c0:	e000ed04 	.word	0xe000ed04

080091c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091ca:	4b05      	ldr	r3, [pc, #20]	@ (80091e0 <xTaskGetTickCount+0x1c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091d0:	687b      	ldr	r3, [r7, #4]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	20001634 	.word	0x20001634

080091e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ee:	4b50      	ldr	r3, [pc, #320]	@ (8009330 <xTaskIncrementTick+0x14c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f040 808c 	bne.w	8009310 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091f8:	4b4e      	ldr	r3, [pc, #312]	@ (8009334 <xTaskIncrementTick+0x150>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009200:	4a4c      	ldr	r2, [pc, #304]	@ (8009334 <xTaskIncrementTick+0x150>)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d123      	bne.n	8009254 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800920c:	4b4a      	ldr	r3, [pc, #296]	@ (8009338 <xTaskIncrementTick+0x154>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00d      	beq.n	8009232 <xTaskIncrementTick+0x4e>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921a:	b672      	cpsid	i
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	b662      	cpsie	i
 800922a:	603b      	str	r3, [r7, #0]
}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	e7fd      	b.n	800922e <xTaskIncrementTick+0x4a>
 8009232:	4b41      	ldr	r3, [pc, #260]	@ (8009338 <xTaskIncrementTick+0x154>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	4b40      	ldr	r3, [pc, #256]	@ (800933c <xTaskIncrementTick+0x158>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a3e      	ldr	r2, [pc, #248]	@ (8009338 <xTaskIncrementTick+0x154>)
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	4a3e      	ldr	r2, [pc, #248]	@ (800933c <xTaskIncrementTick+0x158>)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	4b3e      	ldr	r3, [pc, #248]	@ (8009340 <xTaskIncrementTick+0x15c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3301      	adds	r3, #1
 800924c:	4a3c      	ldr	r2, [pc, #240]	@ (8009340 <xTaskIncrementTick+0x15c>)
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	f000 fae2 	bl	8009818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009254:	4b3b      	ldr	r3, [pc, #236]	@ (8009344 <xTaskIncrementTick+0x160>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	429a      	cmp	r2, r3
 800925c:	d349      	bcc.n	80092f2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800925e:	4b36      	ldr	r3, [pc, #216]	@ (8009338 <xTaskIncrementTick+0x154>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d104      	bne.n	8009272 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009268:	4b36      	ldr	r3, [pc, #216]	@ (8009344 <xTaskIncrementTick+0x160>)
 800926a:	f04f 32ff 	mov.w	r2, #4294967295
 800926e:	601a      	str	r2, [r3, #0]
					break;
 8009270:	e03f      	b.n	80092f2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009272:	4b31      	ldr	r3, [pc, #196]	@ (8009338 <xTaskIncrementTick+0x154>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d203      	bcs.n	8009292 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800928a:	4a2e      	ldr	r2, [pc, #184]	@ (8009344 <xTaskIncrementTick+0x160>)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009290:	e02f      	b.n	80092f2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	3304      	adds	r3, #4
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe ff50 	bl	800813c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d004      	beq.n	80092ae <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	3318      	adds	r3, #24
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe ff47 	bl	800813c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092b2:	4b25      	ldr	r3, [pc, #148]	@ (8009348 <xTaskIncrementTick+0x164>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d903      	bls.n	80092c2 <xTaskIncrementTick+0xde>
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092be:	4a22      	ldr	r2, [pc, #136]	@ (8009348 <xTaskIncrementTick+0x164>)
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4a1f      	ldr	r2, [pc, #124]	@ (800934c <xTaskIncrementTick+0x168>)
 80092d0:	441a      	add	r2, r3
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	3304      	adds	r3, #4
 80092d6:	4619      	mov	r1, r3
 80092d8:	4610      	mov	r0, r2
 80092da:	f7fe fed2 	bl	8008082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009350 <xTaskIncrementTick+0x16c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d3b8      	bcc.n	800925e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092f0:	e7b5      	b.n	800925e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092f2:	4b17      	ldr	r3, [pc, #92]	@ (8009350 <xTaskIncrementTick+0x16c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f8:	4914      	ldr	r1, [pc, #80]	@ (800934c <xTaskIncrementTick+0x168>)
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	440b      	add	r3, r1
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d907      	bls.n	800931a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800930a:	2301      	movs	r3, #1
 800930c:	617b      	str	r3, [r7, #20]
 800930e:	e004      	b.n	800931a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009310:	4b10      	ldr	r3, [pc, #64]	@ (8009354 <xTaskIncrementTick+0x170>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3301      	adds	r3, #1
 8009316:	4a0f      	ldr	r2, [pc, #60]	@ (8009354 <xTaskIncrementTick+0x170>)
 8009318:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800931a:	4b0f      	ldr	r3, [pc, #60]	@ (8009358 <xTaskIncrementTick+0x174>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009322:	2301      	movs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009326:	697b      	ldr	r3, [r7, #20]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3718      	adds	r7, #24
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	20001658 	.word	0x20001658
 8009334:	20001634 	.word	0x20001634
 8009338:	200015e8 	.word	0x200015e8
 800933c:	200015ec 	.word	0x200015ec
 8009340:	20001648 	.word	0x20001648
 8009344:	20001650 	.word	0x20001650
 8009348:	20001638 	.word	0x20001638
 800934c:	20001160 	.word	0x20001160
 8009350:	2000115c 	.word	0x2000115c
 8009354:	20001640 	.word	0x20001640
 8009358:	20001644 	.word	0x20001644

0800935c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009362:	4b29      	ldr	r3, [pc, #164]	@ (8009408 <vTaskSwitchContext+0xac>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800936a:	4b28      	ldr	r3, [pc, #160]	@ (800940c <vTaskSwitchContext+0xb0>)
 800936c:	2201      	movs	r2, #1
 800936e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009370:	e044      	b.n	80093fc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009372:	4b26      	ldr	r3, [pc, #152]	@ (800940c <vTaskSwitchContext+0xb0>)
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009378:	4b25      	ldr	r3, [pc, #148]	@ (8009410 <vTaskSwitchContext+0xb4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e013      	b.n	80093a8 <vTaskSwitchContext+0x4c>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10d      	bne.n	80093a2 <vTaskSwitchContext+0x46>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938a:	b672      	cpsid	i
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	b662      	cpsie	i
 800939a:	607b      	str	r3, [r7, #4]
}
 800939c:	bf00      	nop
 800939e:	bf00      	nop
 80093a0:	e7fd      	b.n	800939e <vTaskSwitchContext+0x42>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	491a      	ldr	r1, [pc, #104]	@ (8009414 <vTaskSwitchContext+0xb8>)
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d0e1      	beq.n	8009380 <vTaskSwitchContext+0x24>
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4a13      	ldr	r2, [pc, #76]	@ (8009414 <vTaskSwitchContext+0xb8>)
 80093c8:	4413      	add	r3, r2
 80093ca:	60bb      	str	r3, [r7, #8]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	605a      	str	r2, [r3, #4]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	3308      	adds	r3, #8
 80093de:	429a      	cmp	r2, r3
 80093e0:	d104      	bne.n	80093ec <vTaskSwitchContext+0x90>
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	605a      	str	r2, [r3, #4]
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	4a09      	ldr	r2, [pc, #36]	@ (8009418 <vTaskSwitchContext+0xbc>)
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	4a06      	ldr	r2, [pc, #24]	@ (8009410 <vTaskSwitchContext+0xb4>)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6013      	str	r3, [r2, #0]
}
 80093fc:	bf00      	nop
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	20001658 	.word	0x20001658
 800940c:	20001644 	.word	0x20001644
 8009410:	20001638 	.word	0x20001638
 8009414:	20001160 	.word	0x20001160
 8009418:	2000115c 	.word	0x2000115c

0800941c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10d      	bne.n	8009448 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009430:	b672      	cpsid	i
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	b662      	cpsie	i
 8009440:	60fb      	str	r3, [r7, #12]
}
 8009442:	bf00      	nop
 8009444:	bf00      	nop
 8009446:	e7fd      	b.n	8009444 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009448:	4b07      	ldr	r3, [pc, #28]	@ (8009468 <vTaskPlaceOnEventList+0x4c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3318      	adds	r3, #24
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7fe fe3a 	bl	80080ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009456:	2101      	movs	r1, #1
 8009458:	6838      	ldr	r0, [r7, #0]
 800945a:	f000 fa8f 	bl	800997c <prvAddCurrentTaskToDelayedList>
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	2000115c 	.word	0x2000115c

0800946c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10d      	bne.n	800949a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	b672      	cpsid	i
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	b662      	cpsie	i
 8009492:	617b      	str	r3, [r7, #20]
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop
 8009498:	e7fd      	b.n	8009496 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800949a:	4b0a      	ldr	r3, [pc, #40]	@ (80094c4 <vTaskPlaceOnEventListRestricted+0x58>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3318      	adds	r3, #24
 80094a0:	4619      	mov	r1, r3
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7fe fded 	bl	8008082 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d002      	beq.n	80094b4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80094ae:	f04f 33ff 	mov.w	r3, #4294967295
 80094b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094b4:	6879      	ldr	r1, [r7, #4]
 80094b6:	68b8      	ldr	r0, [r7, #8]
 80094b8:	f000 fa60 	bl	800997c <prvAddCurrentTaskToDelayedList>
	}
 80094bc:	bf00      	nop
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	2000115c 	.word	0x2000115c

080094c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10d      	bne.n	80094fa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e2:	b672      	cpsid	i
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	b662      	cpsie	i
 80094f2:	60fb      	str	r3, [r7, #12]
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop
 80094f8:	e7fd      	b.n	80094f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	3318      	adds	r3, #24
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe fe1c 	bl	800813c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009504:	4b1d      	ldr	r3, [pc, #116]	@ (800957c <xTaskRemoveFromEventList+0xb4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d11d      	bne.n	8009548 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3304      	adds	r3, #4
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe fe13 	bl	800813c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800951a:	4b19      	ldr	r3, [pc, #100]	@ (8009580 <xTaskRemoveFromEventList+0xb8>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d903      	bls.n	800952a <xTaskRemoveFromEventList+0x62>
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009526:	4a16      	ldr	r2, [pc, #88]	@ (8009580 <xTaskRemoveFromEventList+0xb8>)
 8009528:	6013      	str	r3, [r2, #0]
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4a13      	ldr	r2, [pc, #76]	@ (8009584 <xTaskRemoveFromEventList+0xbc>)
 8009538:	441a      	add	r2, r3
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	3304      	adds	r3, #4
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f7fe fd9e 	bl	8008082 <vListInsertEnd>
 8009546:	e005      	b.n	8009554 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	3318      	adds	r3, #24
 800954c:	4619      	mov	r1, r3
 800954e:	480e      	ldr	r0, [pc, #56]	@ (8009588 <xTaskRemoveFromEventList+0xc0>)
 8009550:	f7fe fd97 	bl	8008082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009558:	4b0c      	ldr	r3, [pc, #48]	@ (800958c <xTaskRemoveFromEventList+0xc4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955e:	429a      	cmp	r2, r3
 8009560:	d905      	bls.n	800956e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009562:	2301      	movs	r3, #1
 8009564:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009566:	4b0a      	ldr	r3, [pc, #40]	@ (8009590 <xTaskRemoveFromEventList+0xc8>)
 8009568:	2201      	movs	r2, #1
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	e001      	b.n	8009572 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009572:	697b      	ldr	r3, [r7, #20]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20001658 	.word	0x20001658
 8009580:	20001638 	.word	0x20001638
 8009584:	20001160 	.word	0x20001160
 8009588:	200015f0 	.word	0x200015f0
 800958c:	2000115c 	.word	0x2000115c
 8009590:	20001644 	.word	0x20001644

08009594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800959c:	4b06      	ldr	r3, [pc, #24]	@ (80095b8 <vTaskInternalSetTimeOutState+0x24>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095a4:	4b05      	ldr	r3, [pc, #20]	@ (80095bc <vTaskInternalSetTimeOutState+0x28>)
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	605a      	str	r2, [r3, #4]
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	20001648 	.word	0x20001648
 80095bc:	20001634 	.word	0x20001634

080095c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10d      	bne.n	80095ec <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d4:	b672      	cpsid	i
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	b662      	cpsie	i
 80095e4:	613b      	str	r3, [r7, #16]
}
 80095e6:	bf00      	nop
 80095e8:	bf00      	nop
 80095ea:	e7fd      	b.n	80095e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10d      	bne.n	800960e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f6:	b672      	cpsid	i
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	b662      	cpsie	i
 8009606:	60fb      	str	r3, [r7, #12]
}
 8009608:	bf00      	nop
 800960a:	bf00      	nop
 800960c:	e7fd      	b.n	800960a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800960e:	f000 fe7d 	bl	800a30c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009612:	4b1d      	ldr	r3, [pc, #116]	@ (8009688 <xTaskCheckForTimeOut+0xc8>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d102      	bne.n	8009632 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800962c:	2300      	movs	r3, #0
 800962e:	61fb      	str	r3, [r7, #28]
 8009630:	e023      	b.n	800967a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	4b15      	ldr	r3, [pc, #84]	@ (800968c <xTaskCheckForTimeOut+0xcc>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d007      	beq.n	800964e <xTaskCheckForTimeOut+0x8e>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	69ba      	ldr	r2, [r7, #24]
 8009644:	429a      	cmp	r2, r3
 8009646:	d302      	bcc.n	800964e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009648:	2301      	movs	r3, #1
 800964a:	61fb      	str	r3, [r7, #28]
 800964c:	e015      	b.n	800967a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	429a      	cmp	r2, r3
 8009656:	d20b      	bcs.n	8009670 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	1ad2      	subs	r2, r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff ff95 	bl	8009594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800966a:	2300      	movs	r3, #0
 800966c:	61fb      	str	r3, [r7, #28]
 800966e:	e004      	b.n	800967a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2200      	movs	r2, #0
 8009674:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009676:	2301      	movs	r3, #1
 8009678:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800967a:	f000 fe7d 	bl	800a378 <vPortExitCritical>

	return xReturn;
 800967e:	69fb      	ldr	r3, [r7, #28]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3720      	adds	r7, #32
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	20001634 	.word	0x20001634
 800968c:	20001648 	.word	0x20001648

08009690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009694:	4b03      	ldr	r3, [pc, #12]	@ (80096a4 <vTaskMissedYield+0x14>)
 8009696:	2201      	movs	r2, #1
 8009698:	601a      	str	r2, [r3, #0]
}
 800969a:	bf00      	nop
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	20001644 	.word	0x20001644

080096a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096b0:	f000 f852 	bl	8009758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096b4:	4b06      	ldr	r3, [pc, #24]	@ (80096d0 <prvIdleTask+0x28>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d9f9      	bls.n	80096b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096bc:	4b05      	ldr	r3, [pc, #20]	@ (80096d4 <prvIdleTask+0x2c>)
 80096be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096cc:	e7f0      	b.n	80096b0 <prvIdleTask+0x8>
 80096ce:	bf00      	nop
 80096d0:	20001160 	.word	0x20001160
 80096d4:	e000ed04 	.word	0xe000ed04

080096d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096de:	2300      	movs	r3, #0
 80096e0:	607b      	str	r3, [r7, #4]
 80096e2:	e00c      	b.n	80096fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4a12      	ldr	r2, [pc, #72]	@ (8009738 <prvInitialiseTaskLists+0x60>)
 80096f0:	4413      	add	r3, r2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fc98 	bl	8008028 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3301      	adds	r3, #1
 80096fc:	607b      	str	r3, [r7, #4]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b37      	cmp	r3, #55	@ 0x37
 8009702:	d9ef      	bls.n	80096e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009704:	480d      	ldr	r0, [pc, #52]	@ (800973c <prvInitialiseTaskLists+0x64>)
 8009706:	f7fe fc8f 	bl	8008028 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800970a:	480d      	ldr	r0, [pc, #52]	@ (8009740 <prvInitialiseTaskLists+0x68>)
 800970c:	f7fe fc8c 	bl	8008028 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009710:	480c      	ldr	r0, [pc, #48]	@ (8009744 <prvInitialiseTaskLists+0x6c>)
 8009712:	f7fe fc89 	bl	8008028 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009716:	480c      	ldr	r0, [pc, #48]	@ (8009748 <prvInitialiseTaskLists+0x70>)
 8009718:	f7fe fc86 	bl	8008028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800971c:	480b      	ldr	r0, [pc, #44]	@ (800974c <prvInitialiseTaskLists+0x74>)
 800971e:	f7fe fc83 	bl	8008028 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009722:	4b0b      	ldr	r3, [pc, #44]	@ (8009750 <prvInitialiseTaskLists+0x78>)
 8009724:	4a05      	ldr	r2, [pc, #20]	@ (800973c <prvInitialiseTaskLists+0x64>)
 8009726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009728:	4b0a      	ldr	r3, [pc, #40]	@ (8009754 <prvInitialiseTaskLists+0x7c>)
 800972a:	4a05      	ldr	r2, [pc, #20]	@ (8009740 <prvInitialiseTaskLists+0x68>)
 800972c:	601a      	str	r2, [r3, #0]
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20001160 	.word	0x20001160
 800973c:	200015c0 	.word	0x200015c0
 8009740:	200015d4 	.word	0x200015d4
 8009744:	200015f0 	.word	0x200015f0
 8009748:	20001604 	.word	0x20001604
 800974c:	2000161c 	.word	0x2000161c
 8009750:	200015e8 	.word	0x200015e8
 8009754:	200015ec 	.word	0x200015ec

08009758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800975e:	e019      	b.n	8009794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009760:	f000 fdd4 	bl	800a30c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009764:	4b10      	ldr	r3, [pc, #64]	@ (80097a8 <prvCheckTasksWaitingTermination+0x50>)
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3304      	adds	r3, #4
 8009770:	4618      	mov	r0, r3
 8009772:	f7fe fce3 	bl	800813c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009776:	4b0d      	ldr	r3, [pc, #52]	@ (80097ac <prvCheckTasksWaitingTermination+0x54>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3b01      	subs	r3, #1
 800977c:	4a0b      	ldr	r2, [pc, #44]	@ (80097ac <prvCheckTasksWaitingTermination+0x54>)
 800977e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009780:	4b0b      	ldr	r3, [pc, #44]	@ (80097b0 <prvCheckTasksWaitingTermination+0x58>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3b01      	subs	r3, #1
 8009786:	4a0a      	ldr	r2, [pc, #40]	@ (80097b0 <prvCheckTasksWaitingTermination+0x58>)
 8009788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800978a:	f000 fdf5 	bl	800a378 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f810 	bl	80097b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009794:	4b06      	ldr	r3, [pc, #24]	@ (80097b0 <prvCheckTasksWaitingTermination+0x58>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e1      	bne.n	8009760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20001604 	.word	0x20001604
 80097ac:	20001630 	.word	0x20001630
 80097b0:	20001618 	.word	0x20001618

080097b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d108      	bne.n	80097d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 ff9a 	bl	800a704 <vPortFree>
				vPortFree( pxTCB );
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 ff97 	bl	800a704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097d6:	e01b      	b.n	8009810 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d103      	bne.n	80097ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 ff8e 	bl	800a704 <vPortFree>
	}
 80097e8:	e012      	b.n	8009810 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d00d      	beq.n	8009810 <prvDeleteTCB+0x5c>
	__asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f8:	b672      	cpsid	i
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	b662      	cpsie	i
 8009808:	60fb      	str	r3, [r7, #12]
}
 800980a:	bf00      	nop
 800980c:	bf00      	nop
 800980e:	e7fd      	b.n	800980c <prvDeleteTCB+0x58>
	}
 8009810:	bf00      	nop
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800981e:	4b0c      	ldr	r3, [pc, #48]	@ (8009850 <prvResetNextTaskUnblockTime+0x38>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d104      	bne.n	8009832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009828:	4b0a      	ldr	r3, [pc, #40]	@ (8009854 <prvResetNextTaskUnblockTime+0x3c>)
 800982a:	f04f 32ff 	mov.w	r2, #4294967295
 800982e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009830:	e008      	b.n	8009844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009832:	4b07      	ldr	r3, [pc, #28]	@ (8009850 <prvResetNextTaskUnblockTime+0x38>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	4a04      	ldr	r2, [pc, #16]	@ (8009854 <prvResetNextTaskUnblockTime+0x3c>)
 8009842:	6013      	str	r3, [r2, #0]
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	200015e8 	.word	0x200015e8
 8009854:	20001650 	.word	0x20001650

08009858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800985e:	4b0b      	ldr	r3, [pc, #44]	@ (800988c <xTaskGetSchedulerState+0x34>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009866:	2301      	movs	r3, #1
 8009868:	607b      	str	r3, [r7, #4]
 800986a:	e008      	b.n	800987e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800986c:	4b08      	ldr	r3, [pc, #32]	@ (8009890 <xTaskGetSchedulerState+0x38>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d102      	bne.n	800987a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009874:	2302      	movs	r3, #2
 8009876:	607b      	str	r3, [r7, #4]
 8009878:	e001      	b.n	800987e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800987a:	2300      	movs	r3, #0
 800987c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800987e:	687b      	ldr	r3, [r7, #4]
	}
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	2000163c 	.word	0x2000163c
 8009890:	20001658 	.word	0x20001658

08009894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d05c      	beq.n	8009964 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098aa:	4b31      	ldr	r3, [pc, #196]	@ (8009970 <xTaskPriorityDisinherit+0xdc>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d00d      	beq.n	80098d0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b8:	b672      	cpsid	i
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	b662      	cpsie	i
 80098c8:	60fb      	str	r3, [r7, #12]
}
 80098ca:	bf00      	nop
 80098cc:	bf00      	nop
 80098ce:	e7fd      	b.n	80098cc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10d      	bne.n	80098f4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098dc:	b672      	cpsid	i
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	b662      	cpsie	i
 80098ec:	60bb      	str	r3, [r7, #8]
}
 80098ee:	bf00      	nop
 80098f0:	bf00      	nop
 80098f2:	e7fd      	b.n	80098f0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098f8:	1e5a      	subs	r2, r3, #1
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009906:	429a      	cmp	r2, r3
 8009908:	d02c      	beq.n	8009964 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800990e:	2b00      	cmp	r3, #0
 8009910:	d128      	bne.n	8009964 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	3304      	adds	r3, #4
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe fc10 	bl	800813c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009928:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009934:	4b0f      	ldr	r3, [pc, #60]	@ (8009974 <xTaskPriorityDisinherit+0xe0>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d903      	bls.n	8009944 <xTaskPriorityDisinherit+0xb0>
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009940:	4a0c      	ldr	r2, [pc, #48]	@ (8009974 <xTaskPriorityDisinherit+0xe0>)
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4a09      	ldr	r2, [pc, #36]	@ (8009978 <xTaskPriorityDisinherit+0xe4>)
 8009952:	441a      	add	r2, r3
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3304      	adds	r3, #4
 8009958:	4619      	mov	r1, r3
 800995a:	4610      	mov	r0, r2
 800995c:	f7fe fb91 	bl	8008082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009960:	2301      	movs	r3, #1
 8009962:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009964:	697b      	ldr	r3, [r7, #20]
	}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	2000115c 	.word	0x2000115c
 8009974:	20001638 	.word	0x20001638
 8009978:	20001160 	.word	0x20001160

0800997c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009986:	4b21      	ldr	r3, [pc, #132]	@ (8009a0c <prvAddCurrentTaskToDelayedList+0x90>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800998c:	4b20      	ldr	r3, [pc, #128]	@ (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3304      	adds	r3, #4
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fbd2 	bl	800813c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999e:	d10a      	bne.n	80099b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d007      	beq.n	80099b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	4819      	ldr	r0, [pc, #100]	@ (8009a14 <prvAddCurrentTaskToDelayedList+0x98>)
 80099b0:	f7fe fb67 	bl	8008082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099b4:	e026      	b.n	8009a04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4413      	add	r3, r2
 80099bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099be:	4b14      	ldr	r3, [pc, #80]	@ (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d209      	bcs.n	80099e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099ce:	4b12      	ldr	r3, [pc, #72]	@ (8009a18 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4619      	mov	r1, r3
 80099da:	4610      	mov	r0, r2
 80099dc:	f7fe fb75 	bl	80080ca <vListInsert>
}
 80099e0:	e010      	b.n	8009a04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099e2:	4b0e      	ldr	r3, [pc, #56]	@ (8009a1c <prvAddCurrentTaskToDelayedList+0xa0>)
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3304      	adds	r3, #4
 80099ec:	4619      	mov	r1, r3
 80099ee:	4610      	mov	r0, r2
 80099f0:	f7fe fb6b 	bl	80080ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d202      	bcs.n	8009a04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099fe:	4a08      	ldr	r2, [pc, #32]	@ (8009a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	6013      	str	r3, [r2, #0]
}
 8009a04:	bf00      	nop
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20001634 	.word	0x20001634
 8009a10:	2000115c 	.word	0x2000115c
 8009a14:	2000161c 	.word	0x2000161c
 8009a18:	200015ec 	.word	0x200015ec
 8009a1c:	200015e8 	.word	0x200015e8
 8009a20:	20001650 	.word	0x20001650

08009a24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08a      	sub	sp, #40	@ 0x28
 8009a28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a2e:	f000 fb21 	bl	800a074 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a32:	4b1e      	ldr	r3, [pc, #120]	@ (8009aac <xTimerCreateTimerTask+0x88>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d021      	beq.n	8009a7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a42:	1d3a      	adds	r2, r7, #4
 8009a44:	f107 0108 	add.w	r1, r7, #8
 8009a48:	f107 030c 	add.w	r3, r7, #12
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe fad1 	bl	8007ff4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a52:	6879      	ldr	r1, [r7, #4]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	9202      	str	r2, [sp, #8]
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	2300      	movs	r3, #0
 8009a62:	460a      	mov	r2, r1
 8009a64:	4912      	ldr	r1, [pc, #72]	@ (8009ab0 <xTimerCreateTimerTask+0x8c>)
 8009a66:	4813      	ldr	r0, [pc, #76]	@ (8009ab4 <xTimerCreateTimerTask+0x90>)
 8009a68:	f7ff f8ac 	bl	8008bc4 <xTaskCreateStatic>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	4a12      	ldr	r2, [pc, #72]	@ (8009ab8 <xTimerCreateTimerTask+0x94>)
 8009a70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a72:	4b11      	ldr	r3, [pc, #68]	@ (8009ab8 <xTimerCreateTimerTask+0x94>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10d      	bne.n	8009aa0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a88:	b672      	cpsid	i
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	b662      	cpsie	i
 8009a98:	613b      	str	r3, [r7, #16]
}
 8009a9a:	bf00      	nop
 8009a9c:	bf00      	nop
 8009a9e:	e7fd      	b.n	8009a9c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009aa0:	697b      	ldr	r3, [r7, #20]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3718      	adds	r7, #24
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	2000168c 	.word	0x2000168c
 8009ab0:	0800b5a8 	.word	0x0800b5a8
 8009ab4:	08009bfd 	.word	0x08009bfd
 8009ab8:	20001690 	.word	0x20001690

08009abc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08a      	sub	sp, #40	@ 0x28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10d      	bne.n	8009af0 <xTimerGenericCommand+0x34>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad8:	b672      	cpsid	i
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	b662      	cpsie	i
 8009ae8:	623b      	str	r3, [r7, #32]
}
 8009aea:	bf00      	nop
 8009aec:	bf00      	nop
 8009aee:	e7fd      	b.n	8009aec <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009af0:	4b19      	ldr	r3, [pc, #100]	@ (8009b58 <xTimerGenericCommand+0x9c>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d02a      	beq.n	8009b4e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	dc18      	bgt.n	8009b3c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b0a:	f7ff fea5 	bl	8009858 <xTaskGetSchedulerState>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d109      	bne.n	8009b28 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b14:	4b10      	ldr	r3, [pc, #64]	@ (8009b58 <xTimerGenericCommand+0x9c>)
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	f107 0110 	add.w	r1, r7, #16
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b20:	f7fe fc4c 	bl	80083bc <xQueueGenericSend>
 8009b24:	6278      	str	r0, [r7, #36]	@ 0x24
 8009b26:	e012      	b.n	8009b4e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b28:	4b0b      	ldr	r3, [pc, #44]	@ (8009b58 <xTimerGenericCommand+0x9c>)
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	f107 0110 	add.w	r1, r7, #16
 8009b30:	2300      	movs	r3, #0
 8009b32:	2200      	movs	r2, #0
 8009b34:	f7fe fc42 	bl	80083bc <xQueueGenericSend>
 8009b38:	6278      	str	r0, [r7, #36]	@ 0x24
 8009b3a:	e008      	b.n	8009b4e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b3c:	4b06      	ldr	r3, [pc, #24]	@ (8009b58 <xTimerGenericCommand+0x9c>)
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	f107 0110 	add.w	r1, r7, #16
 8009b44:	2300      	movs	r3, #0
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	f7fe fd42 	bl	80085d0 <xQueueGenericSendFromISR>
 8009b4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3728      	adds	r7, #40	@ 0x28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	2000168c 	.word	0x2000168c

08009b5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b66:	4b24      	ldr	r3, [pc, #144]	@ (8009bf8 <prvProcessExpiredTimer+0x9c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	3304      	adds	r3, #4
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe fae1 	bl	800813c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d025      	beq.n	8009bd4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	699a      	ldr	r2, [r3, #24]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	18d1      	adds	r1, r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	6978      	ldr	r0, [r7, #20]
 8009b96:	f000 f8d7 	bl	8009d48 <prvInsertTimerInActiveList>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d022      	beq.n	8009be6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	6978      	ldr	r0, [r7, #20]
 8009bac:	f7ff ff86 	bl	8009abc <xTimerGenericCommand>
 8009bb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d116      	bne.n	8009be6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbc:	b672      	cpsid	i
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	b662      	cpsie	i
 8009bcc:	60fb      	str	r3, [r7, #12]
}
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	e7fd      	b.n	8009bd0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bda:	f023 0301 	bic.w	r3, r3, #1
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	6978      	ldr	r0, [r7, #20]
 8009bec:	4798      	blx	r3
}
 8009bee:	bf00      	nop
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20001684 	.word	0x20001684

08009bfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f859 	bl	8009cc0 <prvGetNextExpireTime>
 8009c0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	4619      	mov	r1, r3
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f000 f805 	bl	8009c24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c1a:	f000 f8d7 	bl	8009dcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c1e:	bf00      	nop
 8009c20:	e7f0      	b.n	8009c04 <prvTimerTask+0x8>
	...

08009c24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c2e:	f7ff fa1b 	bl	8009068 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c32:	f107 0308 	add.w	r3, r7, #8
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f866 	bl	8009d08 <prvSampleTimeNow>
 8009c3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d130      	bne.n	8009ca6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <prvProcessTimerOrBlockTask+0x3c>
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d806      	bhi.n	8009c60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c52:	f7ff fa17 	bl	8009084 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff ff7f 	bl	8009b5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c5e:	e024      	b.n	8009caa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d008      	beq.n	8009c78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c66:	4b13      	ldr	r3, [pc, #76]	@ (8009cb4 <prvProcessTimerOrBlockTask+0x90>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <prvProcessTimerOrBlockTask+0x50>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e000      	b.n	8009c76 <prvProcessTimerOrBlockTask+0x52>
 8009c74:	2300      	movs	r3, #0
 8009c76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c78:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb8 <prvProcessTimerOrBlockTask+0x94>)
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4619      	mov	r1, r3
 8009c86:	f7fe ff69 	bl	8008b5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c8a:	f7ff f9fb 	bl	8009084 <xTaskResumeAll>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c94:	4b09      	ldr	r3, [pc, #36]	@ (8009cbc <prvProcessTimerOrBlockTask+0x98>)
 8009c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	f3bf 8f6f 	isb	sy
}
 8009ca4:	e001      	b.n	8009caa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ca6:	f7ff f9ed 	bl	8009084 <xTaskResumeAll>
}
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20001688 	.word	0x20001688
 8009cb8:	2000168c 	.word	0x2000168c
 8009cbc:	e000ed04 	.word	0xe000ed04

08009cc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8009d04 <prvGetNextExpireTime+0x44>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <prvGetNextExpireTime+0x16>
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	e000      	b.n	8009cd8 <prvGetNextExpireTime+0x18>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d105      	bne.n	8009cf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ce4:	4b07      	ldr	r3, [pc, #28]	@ (8009d04 <prvGetNextExpireTime+0x44>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	60fb      	str	r3, [r7, #12]
 8009cee:	e001      	b.n	8009cf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	20001684 	.word	0x20001684

08009d08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d10:	f7ff fa58 	bl	80091c4 <xTaskGetTickCount>
 8009d14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d16:	4b0b      	ldr	r3, [pc, #44]	@ (8009d44 <prvSampleTimeNow+0x3c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d205      	bcs.n	8009d2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d20:	f000 f940 	bl	8009fa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	e002      	b.n	8009d32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d32:	4a04      	ldr	r2, [pc, #16]	@ (8009d44 <prvSampleTimeNow+0x3c>)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d38:	68fb      	ldr	r3, [r7, #12]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20001694 	.word	0x20001694

08009d48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d812      	bhi.n	8009d94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	1ad2      	subs	r2, r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d302      	bcc.n	8009d82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	617b      	str	r3, [r7, #20]
 8009d80:	e01b      	b.n	8009dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d82:	4b10      	ldr	r3, [pc, #64]	@ (8009dc4 <prvInsertTimerInActiveList+0x7c>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	f7fe f99c 	bl	80080ca <vListInsert>
 8009d92:	e012      	b.n	8009dba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d206      	bcs.n	8009daa <prvInsertTimerInActiveList+0x62>
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d302      	bcc.n	8009daa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009da4:	2301      	movs	r3, #1
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	e007      	b.n	8009dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009daa:	4b07      	ldr	r3, [pc, #28]	@ (8009dc8 <prvInsertTimerInActiveList+0x80>)
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f7fe f988 	bl	80080ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dba:	697b      	ldr	r3, [r7, #20]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20001688 	.word	0x20001688
 8009dc8:	20001684 	.word	0x20001684

08009dcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08e      	sub	sp, #56	@ 0x38
 8009dd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dd2:	e0d4      	b.n	8009f7e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da1b      	bge.n	8009e12 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009dda:	1d3b      	adds	r3, r7, #4
 8009ddc:	3304      	adds	r3, #4
 8009dde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10d      	bne.n	8009e02 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dea:	b672      	cpsid	i
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	b662      	cpsie	i
 8009dfa:	61fb      	str	r3, [r7, #28]
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	e7fd      	b.n	8009dfe <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e08:	6850      	ldr	r0, [r2, #4]
 8009e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e0c:	6892      	ldr	r2, [r2, #8]
 8009e0e:	4611      	mov	r1, r2
 8009e10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f2c0 80b2 	blt.w	8009f7e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e28:	3304      	adds	r3, #4
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe f986 	bl	800813c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e30:	463b      	mov	r3, r7
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff ff68 	bl	8009d08 <prvSampleTimeNow>
 8009e38:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b09      	cmp	r3, #9
 8009e3e:	f200 809b 	bhi.w	8009f78 <prvProcessReceivedCommands+0x1ac>
 8009e42:	a201      	add	r2, pc, #4	@ (adr r2, 8009e48 <prvProcessReceivedCommands+0x7c>)
 8009e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e48:	08009e71 	.word	0x08009e71
 8009e4c:	08009e71 	.word	0x08009e71
 8009e50:	08009e71 	.word	0x08009e71
 8009e54:	08009eeb 	.word	0x08009eeb
 8009e58:	08009eff 	.word	0x08009eff
 8009e5c:	08009f4f 	.word	0x08009f4f
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009e71 	.word	0x08009e71
 8009e68:	08009eeb 	.word	0x08009eeb
 8009e6c:	08009eff 	.word	0x08009eff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e76:	f043 0301 	orr.w	r3, r3, #1
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	18d1      	adds	r1, r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e90:	f7ff ff5a 	bl	8009d48 <prvInsertTimerInActiveList>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d070      	beq.n	8009f7c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d065      	beq.n	8009f7c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	441a      	add	r2, r3
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ec2:	f7ff fdfb 	bl	8009abc <xTimerGenericCommand>
 8009ec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d156      	bne.n	8009f7c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed2:	b672      	cpsid	i
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	b662      	cpsie	i
 8009ee2:	61bb      	str	r3, [r7, #24]
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	e7fd      	b.n	8009ee6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ef0:	f023 0301 	bic.w	r3, r3, #1
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009efc:	e03f      	b.n	8009f7e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f04:	f043 0301 	orr.w	r3, r3, #1
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10d      	bne.n	8009f3a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f22:	b672      	cpsid	i
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	b662      	cpsie	i
 8009f32:	617b      	str	r3, [r7, #20]
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop
 8009f38:	e7fd      	b.n	8009f36 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f40:	18d1      	adds	r1, r2, r3
 8009f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f48:	f7ff fefe 	bl	8009d48 <prvInsertTimerInActiveList>
					break;
 8009f4c:	e017      	b.n	8009f7e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f54:	f003 0302 	and.w	r3, r3, #2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d103      	bne.n	8009f64 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009f5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f5e:	f000 fbd1 	bl	800a704 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f62:	e00c      	b.n	8009f7e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f6a:	f023 0301 	bic.w	r3, r3, #1
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009f76:	e002      	b.n	8009f7e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009f78:	bf00      	nop
 8009f7a:	e000      	b.n	8009f7e <prvProcessReceivedCommands+0x1b2>
					break;
 8009f7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f7e:	4b08      	ldr	r3, [pc, #32]	@ (8009fa0 <prvProcessReceivedCommands+0x1d4>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	1d39      	adds	r1, r7, #4
 8009f84:	2200      	movs	r2, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fe fbc6 	bl	8008718 <xQueueReceive>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f47f af20 	bne.w	8009dd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f94:	bf00      	nop
 8009f96:	bf00      	nop
 8009f98:	3730      	adds	r7, #48	@ 0x30
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2000168c 	.word	0x2000168c

08009fa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b088      	sub	sp, #32
 8009fa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009faa:	e04b      	b.n	800a044 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fac:	4b2f      	ldr	r3, [pc, #188]	@ (800a06c <prvSwitchTimerLists+0xc8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800a06c <prvSwitchTimerLists+0xc8>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fe f8b9 	bl	800813c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fd8:	f003 0304 	and.w	r3, r3, #4
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d031      	beq.n	800a044 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d90e      	bls.n	800a010 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800a06c <prvSwitchTimerLists+0xc8>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3304      	adds	r3, #4
 800a006:	4619      	mov	r1, r3
 800a008:	4610      	mov	r0, r2
 800a00a:	f7fe f85e 	bl	80080ca <vListInsert>
 800a00e:	e019      	b.n	800a044 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a010:	2300      	movs	r3, #0
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	2300      	movs	r3, #0
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	2100      	movs	r1, #0
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f7ff fd4e 	bl	8009abc <xTimerGenericCommand>
 800a020:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10d      	bne.n	800a044 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02c:	b672      	cpsid	i
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	b662      	cpsie	i
 800a03c:	603b      	str	r3, [r7, #0]
}
 800a03e:	bf00      	nop
 800a040:	bf00      	nop
 800a042:	e7fd      	b.n	800a040 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a044:	4b09      	ldr	r3, [pc, #36]	@ (800a06c <prvSwitchTimerLists+0xc8>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1ae      	bne.n	8009fac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a04e:	4b07      	ldr	r3, [pc, #28]	@ (800a06c <prvSwitchTimerLists+0xc8>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a054:	4b06      	ldr	r3, [pc, #24]	@ (800a070 <prvSwitchTimerLists+0xcc>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a04      	ldr	r2, [pc, #16]	@ (800a06c <prvSwitchTimerLists+0xc8>)
 800a05a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a05c:	4a04      	ldr	r2, [pc, #16]	@ (800a070 <prvSwitchTimerLists+0xcc>)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	6013      	str	r3, [r2, #0]
}
 800a062:	bf00      	nop
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20001684 	.word	0x20001684
 800a070:	20001688 	.word	0x20001688

0800a074 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a07a:	f000 f947 	bl	800a30c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a07e:	4b15      	ldr	r3, [pc, #84]	@ (800a0d4 <prvCheckForValidListAndQueue+0x60>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d120      	bne.n	800a0c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a086:	4814      	ldr	r0, [pc, #80]	@ (800a0d8 <prvCheckForValidListAndQueue+0x64>)
 800a088:	f7fd ffce 	bl	8008028 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a08c:	4813      	ldr	r0, [pc, #76]	@ (800a0dc <prvCheckForValidListAndQueue+0x68>)
 800a08e:	f7fd ffcb 	bl	8008028 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a092:	4b13      	ldr	r3, [pc, #76]	@ (800a0e0 <prvCheckForValidListAndQueue+0x6c>)
 800a094:	4a10      	ldr	r2, [pc, #64]	@ (800a0d8 <prvCheckForValidListAndQueue+0x64>)
 800a096:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a098:	4b12      	ldr	r3, [pc, #72]	@ (800a0e4 <prvCheckForValidListAndQueue+0x70>)
 800a09a:	4a10      	ldr	r2, [pc, #64]	@ (800a0dc <prvCheckForValidListAndQueue+0x68>)
 800a09c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a09e:	2300      	movs	r3, #0
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	4b11      	ldr	r3, [pc, #68]	@ (800a0e8 <prvCheckForValidListAndQueue+0x74>)
 800a0a4:	4a11      	ldr	r2, [pc, #68]	@ (800a0ec <prvCheckForValidListAndQueue+0x78>)
 800a0a6:	2110      	movs	r1, #16
 800a0a8:	200a      	movs	r0, #10
 800a0aa:	f7fe f8dd 	bl	8008268 <xQueueGenericCreateStatic>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	4a08      	ldr	r2, [pc, #32]	@ (800a0d4 <prvCheckForValidListAndQueue+0x60>)
 800a0b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0b4:	4b07      	ldr	r3, [pc, #28]	@ (800a0d4 <prvCheckForValidListAndQueue+0x60>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0bc:	4b05      	ldr	r3, [pc, #20]	@ (800a0d4 <prvCheckForValidListAndQueue+0x60>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	490b      	ldr	r1, [pc, #44]	@ (800a0f0 <prvCheckForValidListAndQueue+0x7c>)
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe fd20 	bl	8008b08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0c8:	f000 f956 	bl	800a378 <vPortExitCritical>
}
 800a0cc:	bf00      	nop
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	2000168c 	.word	0x2000168c
 800a0d8:	2000165c 	.word	0x2000165c
 800a0dc:	20001670 	.word	0x20001670
 800a0e0:	20001684 	.word	0x20001684
 800a0e4:	20001688 	.word	0x20001688
 800a0e8:	20001738 	.word	0x20001738
 800a0ec:	20001698 	.word	0x20001698
 800a0f0:	0800b5b0 	.word	0x0800b5b0

0800a0f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3b04      	subs	r3, #4
 800a104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a10c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3b04      	subs	r3, #4
 800a112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f023 0201 	bic.w	r2, r3, #1
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3b04      	subs	r3, #4
 800a122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a124:	4a0c      	ldr	r2, [pc, #48]	@ (800a158 <pxPortInitialiseStack+0x64>)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3b14      	subs	r3, #20
 800a12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3b04      	subs	r3, #4
 800a13a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f06f 0202 	mvn.w	r2, #2
 800a142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3b20      	subs	r3, #32
 800a148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a14a:	68fb      	ldr	r3, [r7, #12]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	0800a15d 	.word	0x0800a15d

0800a15c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a166:	4b15      	ldr	r3, [pc, #84]	@ (800a1bc <prvTaskExitError+0x60>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16e:	d00d      	beq.n	800a18c <prvTaskExitError+0x30>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a174:	b672      	cpsid	i
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	b662      	cpsie	i
 800a184:	60fb      	str	r3, [r7, #12]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <prvTaskExitError+0x2c>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a190:	b672      	cpsid	i
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	b662      	cpsie	i
 800a1a0:	60bb      	str	r3, [r7, #8]
}
 800a1a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1a4:	bf00      	nop
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0fc      	beq.n	800a1a6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1ac:	bf00      	nop
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	2000000c 	.word	0x2000000c

0800a1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1c0:	4b07      	ldr	r3, [pc, #28]	@ (800a1e0 <pxCurrentTCBConst2>)
 800a1c2:	6819      	ldr	r1, [r3, #0]
 800a1c4:	6808      	ldr	r0, [r1, #0]
 800a1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ca:	f380 8809 	msr	PSP, r0
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f04f 0000 	mov.w	r0, #0
 800a1d6:	f380 8811 	msr	BASEPRI, r0
 800a1da:	4770      	bx	lr
 800a1dc:	f3af 8000 	nop.w

0800a1e0 <pxCurrentTCBConst2>:
 800a1e0:	2000115c 	.word	0x2000115c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1e4:	bf00      	nop
 800a1e6:	bf00      	nop

0800a1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1e8:	4808      	ldr	r0, [pc, #32]	@ (800a20c <prvPortStartFirstTask+0x24>)
 800a1ea:	6800      	ldr	r0, [r0, #0]
 800a1ec:	6800      	ldr	r0, [r0, #0]
 800a1ee:	f380 8808 	msr	MSP, r0
 800a1f2:	f04f 0000 	mov.w	r0, #0
 800a1f6:	f380 8814 	msr	CONTROL, r0
 800a1fa:	b662      	cpsie	i
 800a1fc:	b661      	cpsie	f
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	df00      	svc	0
 800a208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a20a:	bf00      	nop
 800a20c:	e000ed08 	.word	0xe000ed08

0800a210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a216:	4b37      	ldr	r3, [pc, #220]	@ (800a2f4 <xPortStartScheduler+0xe4>)
 800a218:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	22ff      	movs	r2, #255	@ 0xff
 800a226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	b2db      	uxtb	r3, r3
 800a234:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	4b2f      	ldr	r3, [pc, #188]	@ (800a2f8 <xPortStartScheduler+0xe8>)
 800a23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a23e:	4b2f      	ldr	r3, [pc, #188]	@ (800a2fc <xPortStartScheduler+0xec>)
 800a240:	2207      	movs	r2, #7
 800a242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a244:	e009      	b.n	800a25a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a246:	4b2d      	ldr	r3, [pc, #180]	@ (800a2fc <xPortStartScheduler+0xec>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	4a2b      	ldr	r2, [pc, #172]	@ (800a2fc <xPortStartScheduler+0xec>)
 800a24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	b2db      	uxtb	r3, r3
 800a258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a25a:	78fb      	ldrb	r3, [r7, #3]
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a262:	2b80      	cmp	r3, #128	@ 0x80
 800a264:	d0ef      	beq.n	800a246 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a266:	4b25      	ldr	r3, [pc, #148]	@ (800a2fc <xPortStartScheduler+0xec>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f1c3 0307 	rsb	r3, r3, #7
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d00d      	beq.n	800a28e <xPortStartScheduler+0x7e>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a276:	b672      	cpsid	i
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	b662      	cpsie	i
 800a286:	60bb      	str	r3, [r7, #8]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a28e:	4b1b      	ldr	r3, [pc, #108]	@ (800a2fc <xPortStartScheduler+0xec>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	021b      	lsls	r3, r3, #8
 800a294:	4a19      	ldr	r2, [pc, #100]	@ (800a2fc <xPortStartScheduler+0xec>)
 800a296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a298:	4b18      	ldr	r3, [pc, #96]	@ (800a2fc <xPortStartScheduler+0xec>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2a0:	4a16      	ldr	r2, [pc, #88]	@ (800a2fc <xPortStartScheduler+0xec>)
 800a2a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2ac:	4b14      	ldr	r3, [pc, #80]	@ (800a300 <xPortStartScheduler+0xf0>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a13      	ldr	r2, [pc, #76]	@ (800a300 <xPortStartScheduler+0xf0>)
 800a2b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a2b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2b8:	4b11      	ldr	r3, [pc, #68]	@ (800a300 <xPortStartScheduler+0xf0>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a10      	ldr	r2, [pc, #64]	@ (800a300 <xPortStartScheduler+0xf0>)
 800a2be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a2c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2c4:	f000 f8dc 	bl	800a480 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a304 <xPortStartScheduler+0xf4>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2ce:	f000 f8fb 	bl	800a4c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a308 <xPortStartScheduler+0xf8>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a308 <xPortStartScheduler+0xf8>)
 800a2d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a2dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2de:	f7ff ff83 	bl	800a1e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2e2:	f7ff f83b 	bl	800935c <vTaskSwitchContext>
	prvTaskExitError();
 800a2e6:	f7ff ff39 	bl	800a15c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	e000e400 	.word	0xe000e400
 800a2f8:	20001788 	.word	0x20001788
 800a2fc:	2000178c 	.word	0x2000178c
 800a300:	e000ed20 	.word	0xe000ed20
 800a304:	2000000c 	.word	0x2000000c
 800a308:	e000ef34 	.word	0xe000ef34

0800a30c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	b672      	cpsid	i
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	b662      	cpsie	i
 800a326:	607b      	str	r3, [r7, #4]
}
 800a328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a32a:	4b11      	ldr	r3, [pc, #68]	@ (800a370 <vPortEnterCritical+0x64>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3301      	adds	r3, #1
 800a330:	4a0f      	ldr	r2, [pc, #60]	@ (800a370 <vPortEnterCritical+0x64>)
 800a332:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a334:	4b0e      	ldr	r3, [pc, #56]	@ (800a370 <vPortEnterCritical+0x64>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d112      	bne.n	800a362 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a33c:	4b0d      	ldr	r3, [pc, #52]	@ (800a374 <vPortEnterCritical+0x68>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00d      	beq.n	800a362 <vPortEnterCritical+0x56>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34a:	b672      	cpsid	i
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	b662      	cpsie	i
 800a35a:	603b      	str	r3, [r7, #0]
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	e7fd      	b.n	800a35e <vPortEnterCritical+0x52>
	}
}
 800a362:	bf00      	nop
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	2000000c 	.word	0x2000000c
 800a374:	e000ed04 	.word	0xe000ed04

0800a378 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a37e:	4b13      	ldr	r3, [pc, #76]	@ (800a3cc <vPortExitCritical+0x54>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10d      	bne.n	800a3a2 <vPortExitCritical+0x2a>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38a:	b672      	cpsid	i
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	b662      	cpsie	i
 800a39a:	607b      	str	r3, [r7, #4]
}
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	e7fd      	b.n	800a39e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3cc <vPortExitCritical+0x54>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	4a08      	ldr	r2, [pc, #32]	@ (800a3cc <vPortExitCritical+0x54>)
 800a3aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3ac:	4b07      	ldr	r3, [pc, #28]	@ (800a3cc <vPortExitCritical+0x54>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d105      	bne.n	800a3c0 <vPortExitCritical+0x48>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f383 8811 	msr	BASEPRI, r3
}
 800a3be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	2000000c 	.word	0x2000000c

0800a3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3d0:	f3ef 8009 	mrs	r0, PSP
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	4b15      	ldr	r3, [pc, #84]	@ (800a430 <pxCurrentTCBConst>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	f01e 0f10 	tst.w	lr, #16
 800a3e0:	bf08      	it	eq
 800a3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ea:	6010      	str	r0, [r2, #0]
 800a3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3f4:	b672      	cpsid	i
 800a3f6:	f380 8811 	msr	BASEPRI, r0
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	b662      	cpsie	i
 800a404:	f7fe ffaa 	bl	800935c <vTaskSwitchContext>
 800a408:	f04f 0000 	mov.w	r0, #0
 800a40c:	f380 8811 	msr	BASEPRI, r0
 800a410:	bc09      	pop	{r0, r3}
 800a412:	6819      	ldr	r1, [r3, #0]
 800a414:	6808      	ldr	r0, [r1, #0]
 800a416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41a:	f01e 0f10 	tst.w	lr, #16
 800a41e:	bf08      	it	eq
 800a420:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a424:	f380 8809 	msr	PSP, r0
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop

0800a430 <pxCurrentTCBConst>:
 800a430:	2000115c 	.word	0x2000115c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop

0800a438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	b672      	cpsid	i
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	b662      	cpsie	i
 800a452:	607b      	str	r3, [r7, #4]
}
 800a454:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a456:	f7fe fec5 	bl	80091e4 <xTaskIncrementTick>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d003      	beq.n	800a468 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a460:	4b06      	ldr	r3, [pc, #24]	@ (800a47c <xPortSysTickHandler+0x44>)
 800a462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a466:	601a      	str	r2, [r3, #0]
 800a468:	2300      	movs	r3, #0
 800a46a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	f383 8811 	msr	BASEPRI, r3
}
 800a472:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	e000ed04 	.word	0xe000ed04

0800a480 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a484:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b4 <vPortSetupTimerInterrupt+0x34>)
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a48a:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b8 <vPortSetupTimerInterrupt+0x38>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a490:	4b0a      	ldr	r3, [pc, #40]	@ (800a4bc <vPortSetupTimerInterrupt+0x3c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a0a      	ldr	r2, [pc, #40]	@ (800a4c0 <vPortSetupTimerInterrupt+0x40>)
 800a496:	fba2 2303 	umull	r2, r3, r2, r3
 800a49a:	099b      	lsrs	r3, r3, #6
 800a49c:	4a09      	ldr	r2, [pc, #36]	@ (800a4c4 <vPortSetupTimerInterrupt+0x44>)
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4a2:	4b04      	ldr	r3, [pc, #16]	@ (800a4b4 <vPortSetupTimerInterrupt+0x34>)
 800a4a4:	2207      	movs	r2, #7
 800a4a6:	601a      	str	r2, [r3, #0]
}
 800a4a8:	bf00      	nop
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	e000e010 	.word	0xe000e010
 800a4b8:	e000e018 	.word	0xe000e018
 800a4bc:	20000000 	.word	0x20000000
 800a4c0:	10624dd3 	.word	0x10624dd3
 800a4c4:	e000e014 	.word	0xe000e014

0800a4c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a4d8 <vPortEnableVFP+0x10>
 800a4cc:	6801      	ldr	r1, [r0, #0]
 800a4ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a4d2:	6001      	str	r1, [r0, #0]
 800a4d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4d6:	bf00      	nop
 800a4d8:	e000ed88 	.word	0xe000ed88

0800a4dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4e2:	f3ef 8305 	mrs	r3, IPSR
 800a4e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b0f      	cmp	r3, #15
 800a4ec:	d917      	bls.n	800a51e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a558 <vPortValidateInterruptPriority+0x7c>)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4f8:	4b18      	ldr	r3, [pc, #96]	@ (800a55c <vPortValidateInterruptPriority+0x80>)
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	7afa      	ldrb	r2, [r7, #11]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d20d      	bcs.n	800a51e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a506:	b672      	cpsid	i
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	b662      	cpsie	i
 800a516:	607b      	str	r3, [r7, #4]
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	e7fd      	b.n	800a51a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a51e:	4b10      	ldr	r3, [pc, #64]	@ (800a560 <vPortValidateInterruptPriority+0x84>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a526:	4b0f      	ldr	r3, [pc, #60]	@ (800a564 <vPortValidateInterruptPriority+0x88>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d90d      	bls.n	800a54a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	b672      	cpsid	i
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	b662      	cpsie	i
 800a542:	603b      	str	r3, [r7, #0]
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop
 800a548:	e7fd      	b.n	800a546 <vPortValidateInterruptPriority+0x6a>
	}
 800a54a:	bf00      	nop
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	e000e3f0 	.word	0xe000e3f0
 800a55c:	20001788 	.word	0x20001788
 800a560:	e000ed0c 	.word	0xe000ed0c
 800a564:	2000178c 	.word	0x2000178c

0800a568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b08a      	sub	sp, #40	@ 0x28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a570:	2300      	movs	r3, #0
 800a572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a574:	f7fe fd78 	bl	8009068 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a578:	4b5d      	ldr	r3, [pc, #372]	@ (800a6f0 <pvPortMalloc+0x188>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a580:	f000 f920 	bl	800a7c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a584:	4b5b      	ldr	r3, [pc, #364]	@ (800a6f4 <pvPortMalloc+0x18c>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4013      	ands	r3, r2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 8094 	bne.w	800a6ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d020      	beq.n	800a5da <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a598:	2208      	movs	r2, #8
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4413      	add	r3, r2
 800a59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f003 0307 	and.w	r3, r3, #7
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d017      	beq.n	800a5da <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f023 0307 	bic.w	r3, r3, #7
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f003 0307 	and.w	r3, r3, #7
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00d      	beq.n	800a5da <pvPortMalloc+0x72>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c2:	b672      	cpsid	i
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	b662      	cpsie	i
 800a5d2:	617b      	str	r3, [r7, #20]
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop
 800a5d8:	e7fd      	b.n	800a5d6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d06c      	beq.n	800a6ba <pvPortMalloc+0x152>
 800a5e0:	4b45      	ldr	r3, [pc, #276]	@ (800a6f8 <pvPortMalloc+0x190>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d867      	bhi.n	800a6ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5ea:	4b44      	ldr	r3, [pc, #272]	@ (800a6fc <pvPortMalloc+0x194>)
 800a5ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5ee:	4b43      	ldr	r3, [pc, #268]	@ (800a6fc <pvPortMalloc+0x194>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5f4:	e004      	b.n	800a600 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	429a      	cmp	r2, r3
 800a608:	d903      	bls.n	800a612 <pvPortMalloc+0xaa>
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f1      	bne.n	800a5f6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a612:	4b37      	ldr	r3, [pc, #220]	@ (800a6f0 <pvPortMalloc+0x188>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a618:	429a      	cmp	r2, r3
 800a61a:	d04e      	beq.n	800a6ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2208      	movs	r2, #8
 800a622:	4413      	add	r3, r2
 800a624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	1ad2      	subs	r2, r2, r3
 800a636:	2308      	movs	r3, #8
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d922      	bls.n	800a684 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a63e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4413      	add	r3, r2
 800a644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00d      	beq.n	800a66c <pvPortMalloc+0x104>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	b672      	cpsid	i
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	b662      	cpsie	i
 800a664:	613b      	str	r3, [r7, #16]
}
 800a666:	bf00      	nop
 800a668:	bf00      	nop
 800a66a:	e7fd      	b.n	800a668 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	1ad2      	subs	r2, r2, r3
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a67e:	69b8      	ldr	r0, [r7, #24]
 800a680:	f000 f902 	bl	800a888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a684:	4b1c      	ldr	r3, [pc, #112]	@ (800a6f8 <pvPortMalloc+0x190>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	4a1a      	ldr	r2, [pc, #104]	@ (800a6f8 <pvPortMalloc+0x190>)
 800a690:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a692:	4b19      	ldr	r3, [pc, #100]	@ (800a6f8 <pvPortMalloc+0x190>)
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	4b1a      	ldr	r3, [pc, #104]	@ (800a700 <pvPortMalloc+0x198>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d203      	bcs.n	800a6a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a69e:	4b16      	ldr	r3, [pc, #88]	@ (800a6f8 <pvPortMalloc+0x190>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a17      	ldr	r2, [pc, #92]	@ (800a700 <pvPortMalloc+0x198>)
 800a6a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	4b12      	ldr	r3, [pc, #72]	@ (800a6f4 <pvPortMalloc+0x18c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6ba:	f7fe fce3 	bl	8009084 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	f003 0307 	and.w	r3, r3, #7
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00d      	beq.n	800a6e4 <pvPortMalloc+0x17c>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6cc:	b672      	cpsid	i
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	b662      	cpsie	i
 800a6dc:	60fb      	str	r3, [r7, #12]
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <pvPortMalloc+0x178>
	return pvReturn;
 800a6e4:	69fb      	ldr	r3, [r7, #28]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3728      	adds	r7, #40	@ 0x28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20005398 	.word	0x20005398
 800a6f4:	200053a4 	.word	0x200053a4
 800a6f8:	2000539c 	.word	0x2000539c
 800a6fc:	20005390 	.word	0x20005390
 800a700:	200053a0 	.word	0x200053a0

0800a704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d04e      	beq.n	800a7b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a716:	2308      	movs	r3, #8
 800a718:	425b      	negs	r3, r3
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	4413      	add	r3, r2
 800a71e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	4b24      	ldr	r3, [pc, #144]	@ (800a7bc <vPortFree+0xb8>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4013      	ands	r3, r2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10d      	bne.n	800a74e <vPortFree+0x4a>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a736:	b672      	cpsid	i
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	b662      	cpsie	i
 800a746:	60fb      	str	r3, [r7, #12]
}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	e7fd      	b.n	800a74a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00d      	beq.n	800a772 <vPortFree+0x6e>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	b672      	cpsid	i
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	b662      	cpsie	i
 800a76a:	60bb      	str	r3, [r7, #8]
}
 800a76c:	bf00      	nop
 800a76e:	bf00      	nop
 800a770:	e7fd      	b.n	800a76e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	4b11      	ldr	r3, [pc, #68]	@ (800a7bc <vPortFree+0xb8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d019      	beq.n	800a7b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d115      	bne.n	800a7b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	4b0b      	ldr	r3, [pc, #44]	@ (800a7bc <vPortFree+0xb8>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	43db      	mvns	r3, r3
 800a792:	401a      	ands	r2, r3
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a798:	f7fe fc66 	bl	8009068 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	4b07      	ldr	r3, [pc, #28]	@ (800a7c0 <vPortFree+0xbc>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	4a06      	ldr	r2, [pc, #24]	@ (800a7c0 <vPortFree+0xbc>)
 800a7a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7aa:	6938      	ldr	r0, [r7, #16]
 800a7ac:	f000 f86c 	bl	800a888 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a7b0:	f7fe fc68 	bl	8009084 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7b4:	bf00      	nop
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	200053a4 	.word	0x200053a4
 800a7c0:	2000539c 	.word	0x2000539c

0800a7c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a7ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7d0:	4b27      	ldr	r3, [pc, #156]	@ (800a870 <prvHeapInit+0xac>)
 800a7d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00c      	beq.n	800a7f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3307      	adds	r3, #7
 800a7e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f023 0307 	bic.w	r3, r3, #7
 800a7ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	4a1f      	ldr	r2, [pc, #124]	@ (800a870 <prvHeapInit+0xac>)
 800a7f4:	4413      	add	r3, r2
 800a7f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a874 <prvHeapInit+0xb0>)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a802:	4b1c      	ldr	r3, [pc, #112]	@ (800a874 <prvHeapInit+0xb0>)
 800a804:	2200      	movs	r2, #0
 800a806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	4413      	add	r3, r2
 800a80e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a810:	2208      	movs	r2, #8
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	1a9b      	subs	r3, r3, r2
 800a816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 0307 	bic.w	r3, r3, #7
 800a81e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4a15      	ldr	r2, [pc, #84]	@ (800a878 <prvHeapInit+0xb4>)
 800a824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a826:	4b14      	ldr	r3, [pc, #80]	@ (800a878 <prvHeapInit+0xb4>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2200      	movs	r2, #0
 800a82c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a82e:	4b12      	ldr	r3, [pc, #72]	@ (800a878 <prvHeapInit+0xb4>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a844:	4b0c      	ldr	r3, [pc, #48]	@ (800a878 <prvHeapInit+0xb4>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	4a0a      	ldr	r2, [pc, #40]	@ (800a87c <prvHeapInit+0xb8>)
 800a852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	4a09      	ldr	r2, [pc, #36]	@ (800a880 <prvHeapInit+0xbc>)
 800a85a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a85c:	4b09      	ldr	r3, [pc, #36]	@ (800a884 <prvHeapInit+0xc0>)
 800a85e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a862:	601a      	str	r2, [r3, #0]
}
 800a864:	bf00      	nop
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	20001790 	.word	0x20001790
 800a874:	20005390 	.word	0x20005390
 800a878:	20005398 	.word	0x20005398
 800a87c:	200053a0 	.word	0x200053a0
 800a880:	2000539c 	.word	0x2000539c
 800a884:	200053a4 	.word	0x200053a4

0800a888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a890:	4b28      	ldr	r3, [pc, #160]	@ (800a934 <prvInsertBlockIntoFreeList+0xac>)
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e002      	b.n	800a89c <prvInsertBlockIntoFreeList+0x14>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60fb      	str	r3, [r7, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d8f7      	bhi.n	800a896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d108      	bne.n	800a8ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	441a      	add	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	441a      	add	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d118      	bne.n	800a910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	4b15      	ldr	r3, [pc, #84]	@ (800a938 <prvInsertBlockIntoFreeList+0xb0>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d00d      	beq.n	800a906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	441a      	add	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	e008      	b.n	800a918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a906:	4b0c      	ldr	r3, [pc, #48]	@ (800a938 <prvInsertBlockIntoFreeList+0xb0>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	e003      	b.n	800a918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d002      	beq.n	800a926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a926:	bf00      	nop
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	20005390 	.word	0x20005390
 800a938:	20005398 	.word	0x20005398

0800a93c <atoi>:
 800a93c:	220a      	movs	r2, #10
 800a93e:	2100      	movs	r1, #0
 800a940:	f000 b928 	b.w	800ab94 <strtol>

0800a944 <sbrk_aligned>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	4e0f      	ldr	r6, [pc, #60]	@ (800a984 <sbrk_aligned+0x40>)
 800a948:	460c      	mov	r4, r1
 800a94a:	6831      	ldr	r1, [r6, #0]
 800a94c:	4605      	mov	r5, r0
 800a94e:	b911      	cbnz	r1, 800a956 <sbrk_aligned+0x12>
 800a950:	f000 f978 	bl	800ac44 <_sbrk_r>
 800a954:	6030      	str	r0, [r6, #0]
 800a956:	4621      	mov	r1, r4
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 f973 	bl	800ac44 <_sbrk_r>
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	d103      	bne.n	800a96a <sbrk_aligned+0x26>
 800a962:	f04f 34ff 	mov.w	r4, #4294967295
 800a966:	4620      	mov	r0, r4
 800a968:	bd70      	pop	{r4, r5, r6, pc}
 800a96a:	1cc4      	adds	r4, r0, #3
 800a96c:	f024 0403 	bic.w	r4, r4, #3
 800a970:	42a0      	cmp	r0, r4
 800a972:	d0f8      	beq.n	800a966 <sbrk_aligned+0x22>
 800a974:	1a21      	subs	r1, r4, r0
 800a976:	4628      	mov	r0, r5
 800a978:	f000 f964 	bl	800ac44 <_sbrk_r>
 800a97c:	3001      	adds	r0, #1
 800a97e:	d1f2      	bne.n	800a966 <sbrk_aligned+0x22>
 800a980:	e7ef      	b.n	800a962 <sbrk_aligned+0x1e>
 800a982:	bf00      	nop
 800a984:	200053a8 	.word	0x200053a8

0800a988 <_malloc_r>:
 800a988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a98c:	1ccd      	adds	r5, r1, #3
 800a98e:	f025 0503 	bic.w	r5, r5, #3
 800a992:	3508      	adds	r5, #8
 800a994:	2d0c      	cmp	r5, #12
 800a996:	bf38      	it	cc
 800a998:	250c      	movcc	r5, #12
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	4606      	mov	r6, r0
 800a99e:	db01      	blt.n	800a9a4 <_malloc_r+0x1c>
 800a9a0:	42a9      	cmp	r1, r5
 800a9a2:	d904      	bls.n	800a9ae <_malloc_r+0x26>
 800a9a4:	230c      	movs	r3, #12
 800a9a6:	6033      	str	r3, [r6, #0]
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa84 <_malloc_r+0xfc>
 800a9b2:	f000 f869 	bl	800aa88 <__malloc_lock>
 800a9b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ba:	461c      	mov	r4, r3
 800a9bc:	bb44      	cbnz	r4, 800aa10 <_malloc_r+0x88>
 800a9be:	4629      	mov	r1, r5
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f7ff ffbf 	bl	800a944 <sbrk_aligned>
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	d158      	bne.n	800aa7e <_malloc_r+0xf6>
 800a9cc:	f8d8 4000 	ldr.w	r4, [r8]
 800a9d0:	4627      	mov	r7, r4
 800a9d2:	2f00      	cmp	r7, #0
 800a9d4:	d143      	bne.n	800aa5e <_malloc_r+0xd6>
 800a9d6:	2c00      	cmp	r4, #0
 800a9d8:	d04b      	beq.n	800aa72 <_malloc_r+0xea>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	4639      	mov	r1, r7
 800a9de:	4630      	mov	r0, r6
 800a9e0:	eb04 0903 	add.w	r9, r4, r3
 800a9e4:	f000 f92e 	bl	800ac44 <_sbrk_r>
 800a9e8:	4581      	cmp	r9, r0
 800a9ea:	d142      	bne.n	800aa72 <_malloc_r+0xea>
 800a9ec:	6821      	ldr	r1, [r4, #0]
 800a9ee:	1a6d      	subs	r5, r5, r1
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f7ff ffa6 	bl	800a944 <sbrk_aligned>
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d03a      	beq.n	800aa72 <_malloc_r+0xea>
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	442b      	add	r3, r5
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	f8d8 3000 	ldr.w	r3, [r8]
 800aa06:	685a      	ldr	r2, [r3, #4]
 800aa08:	bb62      	cbnz	r2, 800aa64 <_malloc_r+0xdc>
 800aa0a:	f8c8 7000 	str.w	r7, [r8]
 800aa0e:	e00f      	b.n	800aa30 <_malloc_r+0xa8>
 800aa10:	6822      	ldr	r2, [r4, #0]
 800aa12:	1b52      	subs	r2, r2, r5
 800aa14:	d420      	bmi.n	800aa58 <_malloc_r+0xd0>
 800aa16:	2a0b      	cmp	r2, #11
 800aa18:	d917      	bls.n	800aa4a <_malloc_r+0xc2>
 800aa1a:	1961      	adds	r1, r4, r5
 800aa1c:	42a3      	cmp	r3, r4
 800aa1e:	6025      	str	r5, [r4, #0]
 800aa20:	bf18      	it	ne
 800aa22:	6059      	strne	r1, [r3, #4]
 800aa24:	6863      	ldr	r3, [r4, #4]
 800aa26:	bf08      	it	eq
 800aa28:	f8c8 1000 	streq.w	r1, [r8]
 800aa2c:	5162      	str	r2, [r4, r5]
 800aa2e:	604b      	str	r3, [r1, #4]
 800aa30:	4630      	mov	r0, r6
 800aa32:	f000 f82f 	bl	800aa94 <__malloc_unlock>
 800aa36:	f104 000b 	add.w	r0, r4, #11
 800aa3a:	1d23      	adds	r3, r4, #4
 800aa3c:	f020 0007 	bic.w	r0, r0, #7
 800aa40:	1ac2      	subs	r2, r0, r3
 800aa42:	bf1c      	itt	ne
 800aa44:	1a1b      	subne	r3, r3, r0
 800aa46:	50a3      	strne	r3, [r4, r2]
 800aa48:	e7af      	b.n	800a9aa <_malloc_r+0x22>
 800aa4a:	6862      	ldr	r2, [r4, #4]
 800aa4c:	42a3      	cmp	r3, r4
 800aa4e:	bf0c      	ite	eq
 800aa50:	f8c8 2000 	streq.w	r2, [r8]
 800aa54:	605a      	strne	r2, [r3, #4]
 800aa56:	e7eb      	b.n	800aa30 <_malloc_r+0xa8>
 800aa58:	4623      	mov	r3, r4
 800aa5a:	6864      	ldr	r4, [r4, #4]
 800aa5c:	e7ae      	b.n	800a9bc <_malloc_r+0x34>
 800aa5e:	463c      	mov	r4, r7
 800aa60:	687f      	ldr	r7, [r7, #4]
 800aa62:	e7b6      	b.n	800a9d2 <_malloc_r+0x4a>
 800aa64:	461a      	mov	r2, r3
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	42a3      	cmp	r3, r4
 800aa6a:	d1fb      	bne.n	800aa64 <_malloc_r+0xdc>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	6053      	str	r3, [r2, #4]
 800aa70:	e7de      	b.n	800aa30 <_malloc_r+0xa8>
 800aa72:	230c      	movs	r3, #12
 800aa74:	6033      	str	r3, [r6, #0]
 800aa76:	4630      	mov	r0, r6
 800aa78:	f000 f80c 	bl	800aa94 <__malloc_unlock>
 800aa7c:	e794      	b.n	800a9a8 <_malloc_r+0x20>
 800aa7e:	6005      	str	r5, [r0, #0]
 800aa80:	e7d6      	b.n	800aa30 <_malloc_r+0xa8>
 800aa82:	bf00      	nop
 800aa84:	200053ac 	.word	0x200053ac

0800aa88 <__malloc_lock>:
 800aa88:	4801      	ldr	r0, [pc, #4]	@ (800aa90 <__malloc_lock+0x8>)
 800aa8a:	f000 b915 	b.w	800acb8 <__retarget_lock_acquire_recursive>
 800aa8e:	bf00      	nop
 800aa90:	200054ec 	.word	0x200054ec

0800aa94 <__malloc_unlock>:
 800aa94:	4801      	ldr	r0, [pc, #4]	@ (800aa9c <__malloc_unlock+0x8>)
 800aa96:	f000 b910 	b.w	800acba <__retarget_lock_release_recursive>
 800aa9a:	bf00      	nop
 800aa9c:	200054ec 	.word	0x200054ec

0800aaa0 <_strtol_l.constprop.0>:
 800aaa0:	2b24      	cmp	r3, #36	@ 0x24
 800aaa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa6:	4686      	mov	lr, r0
 800aaa8:	4690      	mov	r8, r2
 800aaaa:	d801      	bhi.n	800aab0 <_strtol_l.constprop.0+0x10>
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d106      	bne.n	800aabe <_strtol_l.constprop.0+0x1e>
 800aab0:	f000 f8d8 	bl	800ac64 <__errno>
 800aab4:	2316      	movs	r3, #22
 800aab6:	6003      	str	r3, [r0, #0]
 800aab8:	2000      	movs	r0, #0
 800aaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aabe:	4834      	ldr	r0, [pc, #208]	@ (800ab90 <_strtol_l.constprop.0+0xf0>)
 800aac0:	460d      	mov	r5, r1
 800aac2:	462a      	mov	r2, r5
 800aac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aac8:	5d06      	ldrb	r6, [r0, r4]
 800aaca:	f016 0608 	ands.w	r6, r6, #8
 800aace:	d1f8      	bne.n	800aac2 <_strtol_l.constprop.0+0x22>
 800aad0:	2c2d      	cmp	r4, #45	@ 0x2d
 800aad2:	d12d      	bne.n	800ab30 <_strtol_l.constprop.0+0x90>
 800aad4:	782c      	ldrb	r4, [r5, #0]
 800aad6:	2601      	movs	r6, #1
 800aad8:	1c95      	adds	r5, r2, #2
 800aada:	f033 0210 	bics.w	r2, r3, #16
 800aade:	d109      	bne.n	800aaf4 <_strtol_l.constprop.0+0x54>
 800aae0:	2c30      	cmp	r4, #48	@ 0x30
 800aae2:	d12a      	bne.n	800ab3a <_strtol_l.constprop.0+0x9a>
 800aae4:	782a      	ldrb	r2, [r5, #0]
 800aae6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aaea:	2a58      	cmp	r2, #88	@ 0x58
 800aaec:	d125      	bne.n	800ab3a <_strtol_l.constprop.0+0x9a>
 800aaee:	786c      	ldrb	r4, [r5, #1]
 800aaf0:	2310      	movs	r3, #16
 800aaf2:	3502      	adds	r5, #2
 800aaf4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aaf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aafc:	2200      	movs	r2, #0
 800aafe:	fbbc f9f3 	udiv	r9, ip, r3
 800ab02:	4610      	mov	r0, r2
 800ab04:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab08:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ab0c:	2f09      	cmp	r7, #9
 800ab0e:	d81b      	bhi.n	800ab48 <_strtol_l.constprop.0+0xa8>
 800ab10:	463c      	mov	r4, r7
 800ab12:	42a3      	cmp	r3, r4
 800ab14:	dd27      	ble.n	800ab66 <_strtol_l.constprop.0+0xc6>
 800ab16:	1c57      	adds	r7, r2, #1
 800ab18:	d007      	beq.n	800ab2a <_strtol_l.constprop.0+0x8a>
 800ab1a:	4581      	cmp	r9, r0
 800ab1c:	d320      	bcc.n	800ab60 <_strtol_l.constprop.0+0xc0>
 800ab1e:	d101      	bne.n	800ab24 <_strtol_l.constprop.0+0x84>
 800ab20:	45a2      	cmp	sl, r4
 800ab22:	db1d      	blt.n	800ab60 <_strtol_l.constprop.0+0xc0>
 800ab24:	fb00 4003 	mla	r0, r0, r3, r4
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab2e:	e7eb      	b.n	800ab08 <_strtol_l.constprop.0+0x68>
 800ab30:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab32:	bf04      	itt	eq
 800ab34:	782c      	ldrbeq	r4, [r5, #0]
 800ab36:	1c95      	addeq	r5, r2, #2
 800ab38:	e7cf      	b.n	800aada <_strtol_l.constprop.0+0x3a>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1da      	bne.n	800aaf4 <_strtol_l.constprop.0+0x54>
 800ab3e:	2c30      	cmp	r4, #48	@ 0x30
 800ab40:	bf0c      	ite	eq
 800ab42:	2308      	moveq	r3, #8
 800ab44:	230a      	movne	r3, #10
 800ab46:	e7d5      	b.n	800aaf4 <_strtol_l.constprop.0+0x54>
 800ab48:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ab4c:	2f19      	cmp	r7, #25
 800ab4e:	d801      	bhi.n	800ab54 <_strtol_l.constprop.0+0xb4>
 800ab50:	3c37      	subs	r4, #55	@ 0x37
 800ab52:	e7de      	b.n	800ab12 <_strtol_l.constprop.0+0x72>
 800ab54:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ab58:	2f19      	cmp	r7, #25
 800ab5a:	d804      	bhi.n	800ab66 <_strtol_l.constprop.0+0xc6>
 800ab5c:	3c57      	subs	r4, #87	@ 0x57
 800ab5e:	e7d8      	b.n	800ab12 <_strtol_l.constprop.0+0x72>
 800ab60:	f04f 32ff 	mov.w	r2, #4294967295
 800ab64:	e7e1      	b.n	800ab2a <_strtol_l.constprop.0+0x8a>
 800ab66:	1c53      	adds	r3, r2, #1
 800ab68:	d108      	bne.n	800ab7c <_strtol_l.constprop.0+0xdc>
 800ab6a:	2322      	movs	r3, #34	@ 0x22
 800ab6c:	f8ce 3000 	str.w	r3, [lr]
 800ab70:	4660      	mov	r0, ip
 800ab72:	f1b8 0f00 	cmp.w	r8, #0
 800ab76:	d0a0      	beq.n	800aaba <_strtol_l.constprop.0+0x1a>
 800ab78:	1e69      	subs	r1, r5, #1
 800ab7a:	e006      	b.n	800ab8a <_strtol_l.constprop.0+0xea>
 800ab7c:	b106      	cbz	r6, 800ab80 <_strtol_l.constprop.0+0xe0>
 800ab7e:	4240      	negs	r0, r0
 800ab80:	f1b8 0f00 	cmp.w	r8, #0
 800ab84:	d099      	beq.n	800aaba <_strtol_l.constprop.0+0x1a>
 800ab86:	2a00      	cmp	r2, #0
 800ab88:	d1f6      	bne.n	800ab78 <_strtol_l.constprop.0+0xd8>
 800ab8a:	f8c8 1000 	str.w	r1, [r8]
 800ab8e:	e794      	b.n	800aaba <_strtol_l.constprop.0+0x1a>
 800ab90:	0800b5fd 	.word	0x0800b5fd

0800ab94 <strtol>:
 800ab94:	4613      	mov	r3, r2
 800ab96:	460a      	mov	r2, r1
 800ab98:	4601      	mov	r1, r0
 800ab9a:	4802      	ldr	r0, [pc, #8]	@ (800aba4 <strtol+0x10>)
 800ab9c:	6800      	ldr	r0, [r0, #0]
 800ab9e:	f7ff bf7f 	b.w	800aaa0 <_strtol_l.constprop.0>
 800aba2:	bf00      	nop
 800aba4:	20000010 	.word	0x20000010

0800aba8 <sniprintf>:
 800aba8:	b40c      	push	{r2, r3}
 800abaa:	b530      	push	{r4, r5, lr}
 800abac:	4b17      	ldr	r3, [pc, #92]	@ (800ac0c <sniprintf+0x64>)
 800abae:	1e0c      	subs	r4, r1, #0
 800abb0:	681d      	ldr	r5, [r3, #0]
 800abb2:	b09d      	sub	sp, #116	@ 0x74
 800abb4:	da08      	bge.n	800abc8 <sniprintf+0x20>
 800abb6:	238b      	movs	r3, #139	@ 0x8b
 800abb8:	602b      	str	r3, [r5, #0]
 800abba:	f04f 30ff 	mov.w	r0, #4294967295
 800abbe:	b01d      	add	sp, #116	@ 0x74
 800abc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abc4:	b002      	add	sp, #8
 800abc6:	4770      	bx	lr
 800abc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800abcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800abd0:	bf14      	ite	ne
 800abd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800abd6:	4623      	moveq	r3, r4
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	9307      	str	r3, [sp, #28]
 800abdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800abe0:	9002      	str	r0, [sp, #8]
 800abe2:	9006      	str	r0, [sp, #24]
 800abe4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800abe8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800abea:	ab21      	add	r3, sp, #132	@ 0x84
 800abec:	a902      	add	r1, sp, #8
 800abee:	4628      	mov	r0, r5
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	f000 f917 	bl	800ae24 <_svfiprintf_r>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	bfbc      	itt	lt
 800abfa:	238b      	movlt	r3, #139	@ 0x8b
 800abfc:	602b      	strlt	r3, [r5, #0]
 800abfe:	2c00      	cmp	r4, #0
 800ac00:	d0dd      	beq.n	800abbe <sniprintf+0x16>
 800ac02:	9b02      	ldr	r3, [sp, #8]
 800ac04:	2200      	movs	r2, #0
 800ac06:	701a      	strb	r2, [r3, #0]
 800ac08:	e7d9      	b.n	800abbe <sniprintf+0x16>
 800ac0a:	bf00      	nop
 800ac0c:	20000010 	.word	0x20000010

0800ac10 <memset>:
 800ac10:	4402      	add	r2, r0
 800ac12:	4603      	mov	r3, r0
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d100      	bne.n	800ac1a <memset+0xa>
 800ac18:	4770      	bx	lr
 800ac1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac1e:	e7f9      	b.n	800ac14 <memset+0x4>

0800ac20 <strncmp>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	b16a      	cbz	r2, 800ac40 <strncmp+0x20>
 800ac24:	3901      	subs	r1, #1
 800ac26:	1884      	adds	r4, r0, r2
 800ac28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d103      	bne.n	800ac3c <strncmp+0x1c>
 800ac34:	42a0      	cmp	r0, r4
 800ac36:	d001      	beq.n	800ac3c <strncmp+0x1c>
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	d1f5      	bne.n	800ac28 <strncmp+0x8>
 800ac3c:	1ad0      	subs	r0, r2, r3
 800ac3e:	bd10      	pop	{r4, pc}
 800ac40:	4610      	mov	r0, r2
 800ac42:	e7fc      	b.n	800ac3e <strncmp+0x1e>

0800ac44 <_sbrk_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d06      	ldr	r5, [pc, #24]	@ (800ac60 <_sbrk_r+0x1c>)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	4608      	mov	r0, r1
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	f7f6 fe34 	bl	80018bc <_sbrk>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_sbrk_r+0x1a>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_sbrk_r+0x1a>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	200054e8 	.word	0x200054e8

0800ac64 <__errno>:
 800ac64:	4b01      	ldr	r3, [pc, #4]	@ (800ac6c <__errno+0x8>)
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	20000010 	.word	0x20000010

0800ac70 <__libc_init_array>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	4d0d      	ldr	r5, [pc, #52]	@ (800aca8 <__libc_init_array+0x38>)
 800ac74:	4c0d      	ldr	r4, [pc, #52]	@ (800acac <__libc_init_array+0x3c>)
 800ac76:	1b64      	subs	r4, r4, r5
 800ac78:	10a4      	asrs	r4, r4, #2
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	42a6      	cmp	r6, r4
 800ac7e:	d109      	bne.n	800ac94 <__libc_init_array+0x24>
 800ac80:	4d0b      	ldr	r5, [pc, #44]	@ (800acb0 <__libc_init_array+0x40>)
 800ac82:	4c0c      	ldr	r4, [pc, #48]	@ (800acb4 <__libc_init_array+0x44>)
 800ac84:	f000 fba8 	bl	800b3d8 <_init>
 800ac88:	1b64      	subs	r4, r4, r5
 800ac8a:	10a4      	asrs	r4, r4, #2
 800ac8c:	2600      	movs	r6, #0
 800ac8e:	42a6      	cmp	r6, r4
 800ac90:	d105      	bne.n	800ac9e <__libc_init_array+0x2e>
 800ac92:	bd70      	pop	{r4, r5, r6, pc}
 800ac94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac98:	4798      	blx	r3
 800ac9a:	3601      	adds	r6, #1
 800ac9c:	e7ee      	b.n	800ac7c <__libc_init_array+0xc>
 800ac9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca2:	4798      	blx	r3
 800aca4:	3601      	adds	r6, #1
 800aca6:	e7f2      	b.n	800ac8e <__libc_init_array+0x1e>
 800aca8:	0800b738 	.word	0x0800b738
 800acac:	0800b738 	.word	0x0800b738
 800acb0:	0800b738 	.word	0x0800b738
 800acb4:	0800b73c 	.word	0x0800b73c

0800acb8 <__retarget_lock_acquire_recursive>:
 800acb8:	4770      	bx	lr

0800acba <__retarget_lock_release_recursive>:
 800acba:	4770      	bx	lr

0800acbc <memcpy>:
 800acbc:	440a      	add	r2, r1
 800acbe:	4291      	cmp	r1, r2
 800acc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800acc4:	d100      	bne.n	800acc8 <memcpy+0xc>
 800acc6:	4770      	bx	lr
 800acc8:	b510      	push	{r4, lr}
 800acca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acd2:	4291      	cmp	r1, r2
 800acd4:	d1f9      	bne.n	800acca <memcpy+0xe>
 800acd6:	bd10      	pop	{r4, pc}

0800acd8 <_free_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4605      	mov	r5, r0
 800acdc:	2900      	cmp	r1, #0
 800acde:	d041      	beq.n	800ad64 <_free_r+0x8c>
 800ace0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ace4:	1f0c      	subs	r4, r1, #4
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	bfb8      	it	lt
 800acea:	18e4      	addlt	r4, r4, r3
 800acec:	f7ff fecc 	bl	800aa88 <__malloc_lock>
 800acf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad68 <_free_r+0x90>)
 800acf2:	6813      	ldr	r3, [r2, #0]
 800acf4:	b933      	cbnz	r3, 800ad04 <_free_r+0x2c>
 800acf6:	6063      	str	r3, [r4, #4]
 800acf8:	6014      	str	r4, [r2, #0]
 800acfa:	4628      	mov	r0, r5
 800acfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad00:	f7ff bec8 	b.w	800aa94 <__malloc_unlock>
 800ad04:	42a3      	cmp	r3, r4
 800ad06:	d908      	bls.n	800ad1a <_free_r+0x42>
 800ad08:	6820      	ldr	r0, [r4, #0]
 800ad0a:	1821      	adds	r1, r4, r0
 800ad0c:	428b      	cmp	r3, r1
 800ad0e:	bf01      	itttt	eq
 800ad10:	6819      	ldreq	r1, [r3, #0]
 800ad12:	685b      	ldreq	r3, [r3, #4]
 800ad14:	1809      	addeq	r1, r1, r0
 800ad16:	6021      	streq	r1, [r4, #0]
 800ad18:	e7ed      	b.n	800acf6 <_free_r+0x1e>
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	b10b      	cbz	r3, 800ad24 <_free_r+0x4c>
 800ad20:	42a3      	cmp	r3, r4
 800ad22:	d9fa      	bls.n	800ad1a <_free_r+0x42>
 800ad24:	6811      	ldr	r1, [r2, #0]
 800ad26:	1850      	adds	r0, r2, r1
 800ad28:	42a0      	cmp	r0, r4
 800ad2a:	d10b      	bne.n	800ad44 <_free_r+0x6c>
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	4401      	add	r1, r0
 800ad30:	1850      	adds	r0, r2, r1
 800ad32:	4283      	cmp	r3, r0
 800ad34:	6011      	str	r1, [r2, #0]
 800ad36:	d1e0      	bne.n	800acfa <_free_r+0x22>
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	6053      	str	r3, [r2, #4]
 800ad3e:	4408      	add	r0, r1
 800ad40:	6010      	str	r0, [r2, #0]
 800ad42:	e7da      	b.n	800acfa <_free_r+0x22>
 800ad44:	d902      	bls.n	800ad4c <_free_r+0x74>
 800ad46:	230c      	movs	r3, #12
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	e7d6      	b.n	800acfa <_free_r+0x22>
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	1821      	adds	r1, r4, r0
 800ad50:	428b      	cmp	r3, r1
 800ad52:	bf04      	itt	eq
 800ad54:	6819      	ldreq	r1, [r3, #0]
 800ad56:	685b      	ldreq	r3, [r3, #4]
 800ad58:	6063      	str	r3, [r4, #4]
 800ad5a:	bf04      	itt	eq
 800ad5c:	1809      	addeq	r1, r1, r0
 800ad5e:	6021      	streq	r1, [r4, #0]
 800ad60:	6054      	str	r4, [r2, #4]
 800ad62:	e7ca      	b.n	800acfa <_free_r+0x22>
 800ad64:	bd38      	pop	{r3, r4, r5, pc}
 800ad66:	bf00      	nop
 800ad68:	200053ac 	.word	0x200053ac

0800ad6c <__ssputs_r>:
 800ad6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad70:	688e      	ldr	r6, [r1, #8]
 800ad72:	461f      	mov	r7, r3
 800ad74:	42be      	cmp	r6, r7
 800ad76:	680b      	ldr	r3, [r1, #0]
 800ad78:	4682      	mov	sl, r0
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	4690      	mov	r8, r2
 800ad7e:	d82d      	bhi.n	800addc <__ssputs_r+0x70>
 800ad80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad88:	d026      	beq.n	800add8 <__ssputs_r+0x6c>
 800ad8a:	6965      	ldr	r5, [r4, #20]
 800ad8c:	6909      	ldr	r1, [r1, #16]
 800ad8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad92:	eba3 0901 	sub.w	r9, r3, r1
 800ad96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad9a:	1c7b      	adds	r3, r7, #1
 800ad9c:	444b      	add	r3, r9
 800ad9e:	106d      	asrs	r5, r5, #1
 800ada0:	429d      	cmp	r5, r3
 800ada2:	bf38      	it	cc
 800ada4:	461d      	movcc	r5, r3
 800ada6:	0553      	lsls	r3, r2, #21
 800ada8:	d527      	bpl.n	800adfa <__ssputs_r+0x8e>
 800adaa:	4629      	mov	r1, r5
 800adac:	f7ff fdec 	bl	800a988 <_malloc_r>
 800adb0:	4606      	mov	r6, r0
 800adb2:	b360      	cbz	r0, 800ae0e <__ssputs_r+0xa2>
 800adb4:	6921      	ldr	r1, [r4, #16]
 800adb6:	464a      	mov	r2, r9
 800adb8:	f7ff ff80 	bl	800acbc <memcpy>
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800adc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adc6:	81a3      	strh	r3, [r4, #12]
 800adc8:	6126      	str	r6, [r4, #16]
 800adca:	6165      	str	r5, [r4, #20]
 800adcc:	444e      	add	r6, r9
 800adce:	eba5 0509 	sub.w	r5, r5, r9
 800add2:	6026      	str	r6, [r4, #0]
 800add4:	60a5      	str	r5, [r4, #8]
 800add6:	463e      	mov	r6, r7
 800add8:	42be      	cmp	r6, r7
 800adda:	d900      	bls.n	800adde <__ssputs_r+0x72>
 800addc:	463e      	mov	r6, r7
 800adde:	6820      	ldr	r0, [r4, #0]
 800ade0:	4632      	mov	r2, r6
 800ade2:	4641      	mov	r1, r8
 800ade4:	f000 faa8 	bl	800b338 <memmove>
 800ade8:	68a3      	ldr	r3, [r4, #8]
 800adea:	1b9b      	subs	r3, r3, r6
 800adec:	60a3      	str	r3, [r4, #8]
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	4433      	add	r3, r6
 800adf2:	6023      	str	r3, [r4, #0]
 800adf4:	2000      	movs	r0, #0
 800adf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adfa:	462a      	mov	r2, r5
 800adfc:	f000 fab6 	bl	800b36c <_realloc_r>
 800ae00:	4606      	mov	r6, r0
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d1e0      	bne.n	800adc8 <__ssputs_r+0x5c>
 800ae06:	6921      	ldr	r1, [r4, #16]
 800ae08:	4650      	mov	r0, sl
 800ae0a:	f7ff ff65 	bl	800acd8 <_free_r>
 800ae0e:	230c      	movs	r3, #12
 800ae10:	f8ca 3000 	str.w	r3, [sl]
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	e7e9      	b.n	800adf6 <__ssputs_r+0x8a>
	...

0800ae24 <_svfiprintf_r>:
 800ae24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae28:	4698      	mov	r8, r3
 800ae2a:	898b      	ldrh	r3, [r1, #12]
 800ae2c:	061b      	lsls	r3, r3, #24
 800ae2e:	b09d      	sub	sp, #116	@ 0x74
 800ae30:	4607      	mov	r7, r0
 800ae32:	460d      	mov	r5, r1
 800ae34:	4614      	mov	r4, r2
 800ae36:	d510      	bpl.n	800ae5a <_svfiprintf_r+0x36>
 800ae38:	690b      	ldr	r3, [r1, #16]
 800ae3a:	b973      	cbnz	r3, 800ae5a <_svfiprintf_r+0x36>
 800ae3c:	2140      	movs	r1, #64	@ 0x40
 800ae3e:	f7ff fda3 	bl	800a988 <_malloc_r>
 800ae42:	6028      	str	r0, [r5, #0]
 800ae44:	6128      	str	r0, [r5, #16]
 800ae46:	b930      	cbnz	r0, 800ae56 <_svfiprintf_r+0x32>
 800ae48:	230c      	movs	r3, #12
 800ae4a:	603b      	str	r3, [r7, #0]
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	b01d      	add	sp, #116	@ 0x74
 800ae52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae56:	2340      	movs	r3, #64	@ 0x40
 800ae58:	616b      	str	r3, [r5, #20]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae5e:	2320      	movs	r3, #32
 800ae60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae68:	2330      	movs	r3, #48	@ 0x30
 800ae6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b008 <_svfiprintf_r+0x1e4>
 800ae6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae72:	f04f 0901 	mov.w	r9, #1
 800ae76:	4623      	mov	r3, r4
 800ae78:	469a      	mov	sl, r3
 800ae7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae7e:	b10a      	cbz	r2, 800ae84 <_svfiprintf_r+0x60>
 800ae80:	2a25      	cmp	r2, #37	@ 0x25
 800ae82:	d1f9      	bne.n	800ae78 <_svfiprintf_r+0x54>
 800ae84:	ebba 0b04 	subs.w	fp, sl, r4
 800ae88:	d00b      	beq.n	800aea2 <_svfiprintf_r+0x7e>
 800ae8a:	465b      	mov	r3, fp
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4629      	mov	r1, r5
 800ae90:	4638      	mov	r0, r7
 800ae92:	f7ff ff6b 	bl	800ad6c <__ssputs_r>
 800ae96:	3001      	adds	r0, #1
 800ae98:	f000 80a7 	beq.w	800afea <_svfiprintf_r+0x1c6>
 800ae9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae9e:	445a      	add	r2, fp
 800aea0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aea2:	f89a 3000 	ldrb.w	r3, [sl]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 809f 	beq.w	800afea <_svfiprintf_r+0x1c6>
 800aeac:	2300      	movs	r3, #0
 800aeae:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeb6:	f10a 0a01 	add.w	sl, sl, #1
 800aeba:	9304      	str	r3, [sp, #16]
 800aebc:	9307      	str	r3, [sp, #28]
 800aebe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aec2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aec4:	4654      	mov	r4, sl
 800aec6:	2205      	movs	r2, #5
 800aec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aecc:	484e      	ldr	r0, [pc, #312]	@ (800b008 <_svfiprintf_r+0x1e4>)
 800aece:	f7f5 f9cf 	bl	8000270 <memchr>
 800aed2:	9a04      	ldr	r2, [sp, #16]
 800aed4:	b9d8      	cbnz	r0, 800af0e <_svfiprintf_r+0xea>
 800aed6:	06d0      	lsls	r0, r2, #27
 800aed8:	bf44      	itt	mi
 800aeda:	2320      	movmi	r3, #32
 800aedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aee0:	0711      	lsls	r1, r2, #28
 800aee2:	bf44      	itt	mi
 800aee4:	232b      	movmi	r3, #43	@ 0x2b
 800aee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeea:	f89a 3000 	ldrb.w	r3, [sl]
 800aeee:	2b2a      	cmp	r3, #42	@ 0x2a
 800aef0:	d015      	beq.n	800af1e <_svfiprintf_r+0xfa>
 800aef2:	9a07      	ldr	r2, [sp, #28]
 800aef4:	4654      	mov	r4, sl
 800aef6:	2000      	movs	r0, #0
 800aef8:	f04f 0c0a 	mov.w	ip, #10
 800aefc:	4621      	mov	r1, r4
 800aefe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af02:	3b30      	subs	r3, #48	@ 0x30
 800af04:	2b09      	cmp	r3, #9
 800af06:	d94b      	bls.n	800afa0 <_svfiprintf_r+0x17c>
 800af08:	b1b0      	cbz	r0, 800af38 <_svfiprintf_r+0x114>
 800af0a:	9207      	str	r2, [sp, #28]
 800af0c:	e014      	b.n	800af38 <_svfiprintf_r+0x114>
 800af0e:	eba0 0308 	sub.w	r3, r0, r8
 800af12:	fa09 f303 	lsl.w	r3, r9, r3
 800af16:	4313      	orrs	r3, r2
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	46a2      	mov	sl, r4
 800af1c:	e7d2      	b.n	800aec4 <_svfiprintf_r+0xa0>
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	1d19      	adds	r1, r3, #4
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	9103      	str	r1, [sp, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	bfbb      	ittet	lt
 800af2a:	425b      	neglt	r3, r3
 800af2c:	f042 0202 	orrlt.w	r2, r2, #2
 800af30:	9307      	strge	r3, [sp, #28]
 800af32:	9307      	strlt	r3, [sp, #28]
 800af34:	bfb8      	it	lt
 800af36:	9204      	strlt	r2, [sp, #16]
 800af38:	7823      	ldrb	r3, [r4, #0]
 800af3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800af3c:	d10a      	bne.n	800af54 <_svfiprintf_r+0x130>
 800af3e:	7863      	ldrb	r3, [r4, #1]
 800af40:	2b2a      	cmp	r3, #42	@ 0x2a
 800af42:	d132      	bne.n	800afaa <_svfiprintf_r+0x186>
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	1d1a      	adds	r2, r3, #4
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	9203      	str	r2, [sp, #12]
 800af4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af50:	3402      	adds	r4, #2
 800af52:	9305      	str	r3, [sp, #20]
 800af54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b018 <_svfiprintf_r+0x1f4>
 800af58:	7821      	ldrb	r1, [r4, #0]
 800af5a:	2203      	movs	r2, #3
 800af5c:	4650      	mov	r0, sl
 800af5e:	f7f5 f987 	bl	8000270 <memchr>
 800af62:	b138      	cbz	r0, 800af74 <_svfiprintf_r+0x150>
 800af64:	9b04      	ldr	r3, [sp, #16]
 800af66:	eba0 000a 	sub.w	r0, r0, sl
 800af6a:	2240      	movs	r2, #64	@ 0x40
 800af6c:	4082      	lsls	r2, r0
 800af6e:	4313      	orrs	r3, r2
 800af70:	3401      	adds	r4, #1
 800af72:	9304      	str	r3, [sp, #16]
 800af74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af78:	4824      	ldr	r0, [pc, #144]	@ (800b00c <_svfiprintf_r+0x1e8>)
 800af7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af7e:	2206      	movs	r2, #6
 800af80:	f7f5 f976 	bl	8000270 <memchr>
 800af84:	2800      	cmp	r0, #0
 800af86:	d036      	beq.n	800aff6 <_svfiprintf_r+0x1d2>
 800af88:	4b21      	ldr	r3, [pc, #132]	@ (800b010 <_svfiprintf_r+0x1ec>)
 800af8a:	bb1b      	cbnz	r3, 800afd4 <_svfiprintf_r+0x1b0>
 800af8c:	9b03      	ldr	r3, [sp, #12]
 800af8e:	3307      	adds	r3, #7
 800af90:	f023 0307 	bic.w	r3, r3, #7
 800af94:	3308      	adds	r3, #8
 800af96:	9303      	str	r3, [sp, #12]
 800af98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af9a:	4433      	add	r3, r6
 800af9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af9e:	e76a      	b.n	800ae76 <_svfiprintf_r+0x52>
 800afa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800afa4:	460c      	mov	r4, r1
 800afa6:	2001      	movs	r0, #1
 800afa8:	e7a8      	b.n	800aefc <_svfiprintf_r+0xd8>
 800afaa:	2300      	movs	r3, #0
 800afac:	3401      	adds	r4, #1
 800afae:	9305      	str	r3, [sp, #20]
 800afb0:	4619      	mov	r1, r3
 800afb2:	f04f 0c0a 	mov.w	ip, #10
 800afb6:	4620      	mov	r0, r4
 800afb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afbc:	3a30      	subs	r2, #48	@ 0x30
 800afbe:	2a09      	cmp	r2, #9
 800afc0:	d903      	bls.n	800afca <_svfiprintf_r+0x1a6>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0c6      	beq.n	800af54 <_svfiprintf_r+0x130>
 800afc6:	9105      	str	r1, [sp, #20]
 800afc8:	e7c4      	b.n	800af54 <_svfiprintf_r+0x130>
 800afca:	fb0c 2101 	mla	r1, ip, r1, r2
 800afce:	4604      	mov	r4, r0
 800afd0:	2301      	movs	r3, #1
 800afd2:	e7f0      	b.n	800afb6 <_svfiprintf_r+0x192>
 800afd4:	ab03      	add	r3, sp, #12
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	462a      	mov	r2, r5
 800afda:	4b0e      	ldr	r3, [pc, #56]	@ (800b014 <_svfiprintf_r+0x1f0>)
 800afdc:	a904      	add	r1, sp, #16
 800afde:	4638      	mov	r0, r7
 800afe0:	f3af 8000 	nop.w
 800afe4:	1c42      	adds	r2, r0, #1
 800afe6:	4606      	mov	r6, r0
 800afe8:	d1d6      	bne.n	800af98 <_svfiprintf_r+0x174>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	065b      	lsls	r3, r3, #25
 800afee:	f53f af2d 	bmi.w	800ae4c <_svfiprintf_r+0x28>
 800aff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aff4:	e72c      	b.n	800ae50 <_svfiprintf_r+0x2c>
 800aff6:	ab03      	add	r3, sp, #12
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	462a      	mov	r2, r5
 800affc:	4b05      	ldr	r3, [pc, #20]	@ (800b014 <_svfiprintf_r+0x1f0>)
 800affe:	a904      	add	r1, sp, #16
 800b000:	4638      	mov	r0, r7
 800b002:	f000 f879 	bl	800b0f8 <_printf_i>
 800b006:	e7ed      	b.n	800afe4 <_svfiprintf_r+0x1c0>
 800b008:	0800b6fd 	.word	0x0800b6fd
 800b00c:	0800b707 	.word	0x0800b707
 800b010:	00000000 	.word	0x00000000
 800b014:	0800ad6d 	.word	0x0800ad6d
 800b018:	0800b703 	.word	0x0800b703

0800b01c <_printf_common>:
 800b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b020:	4616      	mov	r6, r2
 800b022:	4698      	mov	r8, r3
 800b024:	688a      	ldr	r2, [r1, #8]
 800b026:	690b      	ldr	r3, [r1, #16]
 800b028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b02c:	4293      	cmp	r3, r2
 800b02e:	bfb8      	it	lt
 800b030:	4613      	movlt	r3, r2
 800b032:	6033      	str	r3, [r6, #0]
 800b034:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b038:	4607      	mov	r7, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	b10a      	cbz	r2, 800b042 <_printf_common+0x26>
 800b03e:	3301      	adds	r3, #1
 800b040:	6033      	str	r3, [r6, #0]
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	0699      	lsls	r1, r3, #26
 800b046:	bf42      	ittt	mi
 800b048:	6833      	ldrmi	r3, [r6, #0]
 800b04a:	3302      	addmi	r3, #2
 800b04c:	6033      	strmi	r3, [r6, #0]
 800b04e:	6825      	ldr	r5, [r4, #0]
 800b050:	f015 0506 	ands.w	r5, r5, #6
 800b054:	d106      	bne.n	800b064 <_printf_common+0x48>
 800b056:	f104 0a19 	add.w	sl, r4, #25
 800b05a:	68e3      	ldr	r3, [r4, #12]
 800b05c:	6832      	ldr	r2, [r6, #0]
 800b05e:	1a9b      	subs	r3, r3, r2
 800b060:	42ab      	cmp	r3, r5
 800b062:	dc26      	bgt.n	800b0b2 <_printf_common+0x96>
 800b064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b068:	6822      	ldr	r2, [r4, #0]
 800b06a:	3b00      	subs	r3, #0
 800b06c:	bf18      	it	ne
 800b06e:	2301      	movne	r3, #1
 800b070:	0692      	lsls	r2, r2, #26
 800b072:	d42b      	bmi.n	800b0cc <_printf_common+0xb0>
 800b074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b078:	4641      	mov	r1, r8
 800b07a:	4638      	mov	r0, r7
 800b07c:	47c8      	blx	r9
 800b07e:	3001      	adds	r0, #1
 800b080:	d01e      	beq.n	800b0c0 <_printf_common+0xa4>
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	6922      	ldr	r2, [r4, #16]
 800b086:	f003 0306 	and.w	r3, r3, #6
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	bf02      	ittt	eq
 800b08e:	68e5      	ldreq	r5, [r4, #12]
 800b090:	6833      	ldreq	r3, [r6, #0]
 800b092:	1aed      	subeq	r5, r5, r3
 800b094:	68a3      	ldr	r3, [r4, #8]
 800b096:	bf0c      	ite	eq
 800b098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b09c:	2500      	movne	r5, #0
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	bfc4      	itt	gt
 800b0a2:	1a9b      	subgt	r3, r3, r2
 800b0a4:	18ed      	addgt	r5, r5, r3
 800b0a6:	2600      	movs	r6, #0
 800b0a8:	341a      	adds	r4, #26
 800b0aa:	42b5      	cmp	r5, r6
 800b0ac:	d11a      	bne.n	800b0e4 <_printf_common+0xc8>
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	e008      	b.n	800b0c4 <_printf_common+0xa8>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	4652      	mov	r2, sl
 800b0b6:	4641      	mov	r1, r8
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	47c8      	blx	r9
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d103      	bne.n	800b0c8 <_printf_common+0xac>
 800b0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c8:	3501      	adds	r5, #1
 800b0ca:	e7c6      	b.n	800b05a <_printf_common+0x3e>
 800b0cc:	18e1      	adds	r1, r4, r3
 800b0ce:	1c5a      	adds	r2, r3, #1
 800b0d0:	2030      	movs	r0, #48	@ 0x30
 800b0d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0d6:	4422      	add	r2, r4
 800b0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0e0:	3302      	adds	r3, #2
 800b0e2:	e7c7      	b.n	800b074 <_printf_common+0x58>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	4641      	mov	r1, r8
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	47c8      	blx	r9
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d0e6      	beq.n	800b0c0 <_printf_common+0xa4>
 800b0f2:	3601      	adds	r6, #1
 800b0f4:	e7d9      	b.n	800b0aa <_printf_common+0x8e>
	...

0800b0f8 <_printf_i>:
 800b0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	7e0f      	ldrb	r7, [r1, #24]
 800b0fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b100:	2f78      	cmp	r7, #120	@ 0x78
 800b102:	4691      	mov	r9, r2
 800b104:	4680      	mov	r8, r0
 800b106:	460c      	mov	r4, r1
 800b108:	469a      	mov	sl, r3
 800b10a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b10e:	d807      	bhi.n	800b120 <_printf_i+0x28>
 800b110:	2f62      	cmp	r7, #98	@ 0x62
 800b112:	d80a      	bhi.n	800b12a <_printf_i+0x32>
 800b114:	2f00      	cmp	r7, #0
 800b116:	f000 80d2 	beq.w	800b2be <_printf_i+0x1c6>
 800b11a:	2f58      	cmp	r7, #88	@ 0x58
 800b11c:	f000 80b9 	beq.w	800b292 <_printf_i+0x19a>
 800b120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b128:	e03a      	b.n	800b1a0 <_printf_i+0xa8>
 800b12a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b12e:	2b15      	cmp	r3, #21
 800b130:	d8f6      	bhi.n	800b120 <_printf_i+0x28>
 800b132:	a101      	add	r1, pc, #4	@ (adr r1, 800b138 <_printf_i+0x40>)
 800b134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b138:	0800b191 	.word	0x0800b191
 800b13c:	0800b1a5 	.word	0x0800b1a5
 800b140:	0800b121 	.word	0x0800b121
 800b144:	0800b121 	.word	0x0800b121
 800b148:	0800b121 	.word	0x0800b121
 800b14c:	0800b121 	.word	0x0800b121
 800b150:	0800b1a5 	.word	0x0800b1a5
 800b154:	0800b121 	.word	0x0800b121
 800b158:	0800b121 	.word	0x0800b121
 800b15c:	0800b121 	.word	0x0800b121
 800b160:	0800b121 	.word	0x0800b121
 800b164:	0800b2a5 	.word	0x0800b2a5
 800b168:	0800b1cf 	.word	0x0800b1cf
 800b16c:	0800b25f 	.word	0x0800b25f
 800b170:	0800b121 	.word	0x0800b121
 800b174:	0800b121 	.word	0x0800b121
 800b178:	0800b2c7 	.word	0x0800b2c7
 800b17c:	0800b121 	.word	0x0800b121
 800b180:	0800b1cf 	.word	0x0800b1cf
 800b184:	0800b121 	.word	0x0800b121
 800b188:	0800b121 	.word	0x0800b121
 800b18c:	0800b267 	.word	0x0800b267
 800b190:	6833      	ldr	r3, [r6, #0]
 800b192:	1d1a      	adds	r2, r3, #4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6032      	str	r2, [r6, #0]
 800b198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b19c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e09d      	b.n	800b2e0 <_printf_i+0x1e8>
 800b1a4:	6833      	ldr	r3, [r6, #0]
 800b1a6:	6820      	ldr	r0, [r4, #0]
 800b1a8:	1d19      	adds	r1, r3, #4
 800b1aa:	6031      	str	r1, [r6, #0]
 800b1ac:	0606      	lsls	r6, r0, #24
 800b1ae:	d501      	bpl.n	800b1b4 <_printf_i+0xbc>
 800b1b0:	681d      	ldr	r5, [r3, #0]
 800b1b2:	e003      	b.n	800b1bc <_printf_i+0xc4>
 800b1b4:	0645      	lsls	r5, r0, #25
 800b1b6:	d5fb      	bpl.n	800b1b0 <_printf_i+0xb8>
 800b1b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1bc:	2d00      	cmp	r5, #0
 800b1be:	da03      	bge.n	800b1c8 <_printf_i+0xd0>
 800b1c0:	232d      	movs	r3, #45	@ 0x2d
 800b1c2:	426d      	negs	r5, r5
 800b1c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1c8:	4859      	ldr	r0, [pc, #356]	@ (800b330 <_printf_i+0x238>)
 800b1ca:	230a      	movs	r3, #10
 800b1cc:	e011      	b.n	800b1f2 <_printf_i+0xfa>
 800b1ce:	6821      	ldr	r1, [r4, #0]
 800b1d0:	6833      	ldr	r3, [r6, #0]
 800b1d2:	0608      	lsls	r0, r1, #24
 800b1d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1d8:	d402      	bmi.n	800b1e0 <_printf_i+0xe8>
 800b1da:	0649      	lsls	r1, r1, #25
 800b1dc:	bf48      	it	mi
 800b1de:	b2ad      	uxthmi	r5, r5
 800b1e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1e2:	4853      	ldr	r0, [pc, #332]	@ (800b330 <_printf_i+0x238>)
 800b1e4:	6033      	str	r3, [r6, #0]
 800b1e6:	bf14      	ite	ne
 800b1e8:	230a      	movne	r3, #10
 800b1ea:	2308      	moveq	r3, #8
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1f2:	6866      	ldr	r6, [r4, #4]
 800b1f4:	60a6      	str	r6, [r4, #8]
 800b1f6:	2e00      	cmp	r6, #0
 800b1f8:	bfa2      	ittt	ge
 800b1fa:	6821      	ldrge	r1, [r4, #0]
 800b1fc:	f021 0104 	bicge.w	r1, r1, #4
 800b200:	6021      	strge	r1, [r4, #0]
 800b202:	b90d      	cbnz	r5, 800b208 <_printf_i+0x110>
 800b204:	2e00      	cmp	r6, #0
 800b206:	d04b      	beq.n	800b2a0 <_printf_i+0x1a8>
 800b208:	4616      	mov	r6, r2
 800b20a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b20e:	fb03 5711 	mls	r7, r3, r1, r5
 800b212:	5dc7      	ldrb	r7, [r0, r7]
 800b214:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b218:	462f      	mov	r7, r5
 800b21a:	42bb      	cmp	r3, r7
 800b21c:	460d      	mov	r5, r1
 800b21e:	d9f4      	bls.n	800b20a <_printf_i+0x112>
 800b220:	2b08      	cmp	r3, #8
 800b222:	d10b      	bne.n	800b23c <_printf_i+0x144>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	07df      	lsls	r7, r3, #31
 800b228:	d508      	bpl.n	800b23c <_printf_i+0x144>
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	6861      	ldr	r1, [r4, #4]
 800b22e:	4299      	cmp	r1, r3
 800b230:	bfde      	ittt	le
 800b232:	2330      	movle	r3, #48	@ 0x30
 800b234:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b238:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b23c:	1b92      	subs	r2, r2, r6
 800b23e:	6122      	str	r2, [r4, #16]
 800b240:	f8cd a000 	str.w	sl, [sp]
 800b244:	464b      	mov	r3, r9
 800b246:	aa03      	add	r2, sp, #12
 800b248:	4621      	mov	r1, r4
 800b24a:	4640      	mov	r0, r8
 800b24c:	f7ff fee6 	bl	800b01c <_printf_common>
 800b250:	3001      	adds	r0, #1
 800b252:	d14a      	bne.n	800b2ea <_printf_i+0x1f2>
 800b254:	f04f 30ff 	mov.w	r0, #4294967295
 800b258:	b004      	add	sp, #16
 800b25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	f043 0320 	orr.w	r3, r3, #32
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	4833      	ldr	r0, [pc, #204]	@ (800b334 <_printf_i+0x23c>)
 800b268:	2778      	movs	r7, #120	@ 0x78
 800b26a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	6831      	ldr	r1, [r6, #0]
 800b272:	061f      	lsls	r7, r3, #24
 800b274:	f851 5b04 	ldr.w	r5, [r1], #4
 800b278:	d402      	bmi.n	800b280 <_printf_i+0x188>
 800b27a:	065f      	lsls	r7, r3, #25
 800b27c:	bf48      	it	mi
 800b27e:	b2ad      	uxthmi	r5, r5
 800b280:	6031      	str	r1, [r6, #0]
 800b282:	07d9      	lsls	r1, r3, #31
 800b284:	bf44      	itt	mi
 800b286:	f043 0320 	orrmi.w	r3, r3, #32
 800b28a:	6023      	strmi	r3, [r4, #0]
 800b28c:	b11d      	cbz	r5, 800b296 <_printf_i+0x19e>
 800b28e:	2310      	movs	r3, #16
 800b290:	e7ac      	b.n	800b1ec <_printf_i+0xf4>
 800b292:	4827      	ldr	r0, [pc, #156]	@ (800b330 <_printf_i+0x238>)
 800b294:	e7e9      	b.n	800b26a <_printf_i+0x172>
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	f023 0320 	bic.w	r3, r3, #32
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	e7f6      	b.n	800b28e <_printf_i+0x196>
 800b2a0:	4616      	mov	r6, r2
 800b2a2:	e7bd      	b.n	800b220 <_printf_i+0x128>
 800b2a4:	6833      	ldr	r3, [r6, #0]
 800b2a6:	6825      	ldr	r5, [r4, #0]
 800b2a8:	6961      	ldr	r1, [r4, #20]
 800b2aa:	1d18      	adds	r0, r3, #4
 800b2ac:	6030      	str	r0, [r6, #0]
 800b2ae:	062e      	lsls	r6, r5, #24
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	d501      	bpl.n	800b2b8 <_printf_i+0x1c0>
 800b2b4:	6019      	str	r1, [r3, #0]
 800b2b6:	e002      	b.n	800b2be <_printf_i+0x1c6>
 800b2b8:	0668      	lsls	r0, r5, #25
 800b2ba:	d5fb      	bpl.n	800b2b4 <_printf_i+0x1bc>
 800b2bc:	8019      	strh	r1, [r3, #0]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	6123      	str	r3, [r4, #16]
 800b2c2:	4616      	mov	r6, r2
 800b2c4:	e7bc      	b.n	800b240 <_printf_i+0x148>
 800b2c6:	6833      	ldr	r3, [r6, #0]
 800b2c8:	1d1a      	adds	r2, r3, #4
 800b2ca:	6032      	str	r2, [r6, #0]
 800b2cc:	681e      	ldr	r6, [r3, #0]
 800b2ce:	6862      	ldr	r2, [r4, #4]
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7f4 ffcc 	bl	8000270 <memchr>
 800b2d8:	b108      	cbz	r0, 800b2de <_printf_i+0x1e6>
 800b2da:	1b80      	subs	r0, r0, r6
 800b2dc:	6060      	str	r0, [r4, #4]
 800b2de:	6863      	ldr	r3, [r4, #4]
 800b2e0:	6123      	str	r3, [r4, #16]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2e8:	e7aa      	b.n	800b240 <_printf_i+0x148>
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	47d0      	blx	sl
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d0ad      	beq.n	800b254 <_printf_i+0x15c>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	079b      	lsls	r3, r3, #30
 800b2fc:	d413      	bmi.n	800b326 <_printf_i+0x22e>
 800b2fe:	68e0      	ldr	r0, [r4, #12]
 800b300:	9b03      	ldr	r3, [sp, #12]
 800b302:	4298      	cmp	r0, r3
 800b304:	bfb8      	it	lt
 800b306:	4618      	movlt	r0, r3
 800b308:	e7a6      	b.n	800b258 <_printf_i+0x160>
 800b30a:	2301      	movs	r3, #1
 800b30c:	4632      	mov	r2, r6
 800b30e:	4649      	mov	r1, r9
 800b310:	4640      	mov	r0, r8
 800b312:	47d0      	blx	sl
 800b314:	3001      	adds	r0, #1
 800b316:	d09d      	beq.n	800b254 <_printf_i+0x15c>
 800b318:	3501      	adds	r5, #1
 800b31a:	68e3      	ldr	r3, [r4, #12]
 800b31c:	9903      	ldr	r1, [sp, #12]
 800b31e:	1a5b      	subs	r3, r3, r1
 800b320:	42ab      	cmp	r3, r5
 800b322:	dcf2      	bgt.n	800b30a <_printf_i+0x212>
 800b324:	e7eb      	b.n	800b2fe <_printf_i+0x206>
 800b326:	2500      	movs	r5, #0
 800b328:	f104 0619 	add.w	r6, r4, #25
 800b32c:	e7f5      	b.n	800b31a <_printf_i+0x222>
 800b32e:	bf00      	nop
 800b330:	0800b70e 	.word	0x0800b70e
 800b334:	0800b71f 	.word	0x0800b71f

0800b338 <memmove>:
 800b338:	4288      	cmp	r0, r1
 800b33a:	b510      	push	{r4, lr}
 800b33c:	eb01 0402 	add.w	r4, r1, r2
 800b340:	d902      	bls.n	800b348 <memmove+0x10>
 800b342:	4284      	cmp	r4, r0
 800b344:	4623      	mov	r3, r4
 800b346:	d807      	bhi.n	800b358 <memmove+0x20>
 800b348:	1e43      	subs	r3, r0, #1
 800b34a:	42a1      	cmp	r1, r4
 800b34c:	d008      	beq.n	800b360 <memmove+0x28>
 800b34e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b352:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b356:	e7f8      	b.n	800b34a <memmove+0x12>
 800b358:	4402      	add	r2, r0
 800b35a:	4601      	mov	r1, r0
 800b35c:	428a      	cmp	r2, r1
 800b35e:	d100      	bne.n	800b362 <memmove+0x2a>
 800b360:	bd10      	pop	{r4, pc}
 800b362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b36a:	e7f7      	b.n	800b35c <memmove+0x24>

0800b36c <_realloc_r>:
 800b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b370:	4680      	mov	r8, r0
 800b372:	4615      	mov	r5, r2
 800b374:	460c      	mov	r4, r1
 800b376:	b921      	cbnz	r1, 800b382 <_realloc_r+0x16>
 800b378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b37c:	4611      	mov	r1, r2
 800b37e:	f7ff bb03 	b.w	800a988 <_malloc_r>
 800b382:	b92a      	cbnz	r2, 800b390 <_realloc_r+0x24>
 800b384:	f7ff fca8 	bl	800acd8 <_free_r>
 800b388:	2400      	movs	r4, #0
 800b38a:	4620      	mov	r0, r4
 800b38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b390:	f000 f81a 	bl	800b3c8 <_malloc_usable_size_r>
 800b394:	4285      	cmp	r5, r0
 800b396:	4606      	mov	r6, r0
 800b398:	d802      	bhi.n	800b3a0 <_realloc_r+0x34>
 800b39a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b39e:	d8f4      	bhi.n	800b38a <_realloc_r+0x1e>
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	f7ff faf0 	bl	800a988 <_malloc_r>
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d0ec      	beq.n	800b388 <_realloc_r+0x1c>
 800b3ae:	42b5      	cmp	r5, r6
 800b3b0:	462a      	mov	r2, r5
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	bf28      	it	cs
 800b3b6:	4632      	movcs	r2, r6
 800b3b8:	f7ff fc80 	bl	800acbc <memcpy>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4640      	mov	r0, r8
 800b3c0:	f7ff fc8a 	bl	800acd8 <_free_r>
 800b3c4:	463c      	mov	r4, r7
 800b3c6:	e7e0      	b.n	800b38a <_realloc_r+0x1e>

0800b3c8 <_malloc_usable_size_r>:
 800b3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3cc:	1f18      	subs	r0, r3, #4
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	bfbc      	itt	lt
 800b3d2:	580b      	ldrlt	r3, [r1, r0]
 800b3d4:	18c0      	addlt	r0, r0, r3
 800b3d6:	4770      	bx	lr

0800b3d8 <_init>:
 800b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3da:	bf00      	nop
 800b3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3de:	bc08      	pop	{r3}
 800b3e0:	469e      	mov	lr, r3
 800b3e2:	4770      	bx	lr

0800b3e4 <_fini>:
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e6:	bf00      	nop
 800b3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ea:	bc08      	pop	{r3}
 800b3ec:	469e      	mov	lr, r3
 800b3ee:	4770      	bx	lr
